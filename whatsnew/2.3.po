# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's New in Python 2.3"
msgstr "Vad är nytt i Python 2.3"

msgid "Author"
msgstr "Författare"

msgid "A.M. Kuchling"
msgstr "A.M. Kuchling"

msgid ""
"This article explains the new features in Python 2.3.  Python 2.3 was "
"released on July 29, 2003."
msgstr ""
"I den här artikeln förklaras de nya funktionerna i Python 2.3.  Python 2.3 "
"släpptes den 29 juli 2003."

msgid ""
"The main themes for Python 2.3 are polishing some of the features added in "
"2.2, adding various small but useful enhancements to the core language, and "
"expanding the standard library.  The new object model introduced in the "
"previous version has benefited from 18 months of bugfixes and from "
"optimization efforts that have improved the performance of new-style "
"classes.  A few new built-in functions have been added such as :func:`sum` "
"and :func:`enumerate`.  The :keyword:`in` operator can now be used for "
"substring searches (e.g. ``\"ab\" in \"abc\"`` returns :const:`True`)."
msgstr ""
"Huvudtemana för Python 2.3 är att polera några av de funktioner som lades "
"till i 2.2, lägga till olika små men användbara förbättringar av kärnspråket "
"och utöka standardbiblioteket.  Den nya objektmodellen som introducerades i "
"den tidigare versionen har dragit nytta av 18 månaders buggfixar och av "
"optimeringsinsatser som har förbättrat prestandan för klasser i ny stil.  "
"Några nya inbyggda funktioner har lagts till, t.ex. :func:`sum` och :func:"
"`enumerate`.  Operatorn :keyword:`in` kan nu användas för "
"delsträngssökningar (t.ex. ``\"ab\" i \"abc\"`` returnerar :const:`True`)."

msgid ""
"Some of the many new library features include Boolean, set, heap, and date/"
"time data types, the ability to import modules from ZIP-format archives, "
"metadata support for the long-awaited Python catalog, an updated version of "
"IDLE, and modules for logging messages, wrapping text, parsing CSV files, "
"processing command-line options, using BerkeleyDB databases...  the list of "
"new and enhanced modules is lengthy."
msgstr ""
"Några av de många nya biblioteksfunktionerna är datatyperna Boolean, set, "
"heap och date/time, möjligheten att importera moduler från ZIP-formatarkiv, "
"metadatastöd för den efterlängtade Python-katalogen, en uppdaterad version "
"av IDLE och moduler för loggning av meddelanden, textbrytning, parsning av "
"CSV-filer, bearbetning av kommandoradsalternativ, användning av BerkeleyDB-"
"databaser... listan över nya och förbättrade moduler är lång."

msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you "
"should refer to the documentation for Python 2.3, such as the Python Library "
"Reference and the Python Reference Manual.  If you want to understand the "
"complete implementation and design rationale, refer to the PEP for a "
"particular new feature."
msgstr ""
"Den här artikeln försöker inte ge en fullständig specifikation av de nya "
"funktionerna, utan ger istället en praktisk översikt.  För fullständiga "
"detaljer bör du läsa dokumentationen för Python 2.3, till exempel Python "
"Library Reference och Python Reference Manual.  Om du vill förstå den "
"fullständiga implementeringen och designrationaliteten, hänvisas till PEP "
"för en viss ny funktion."

msgid "PEP 218: A Standard Set Datatype"
msgstr "PEP 218: En datatyp för standarduppsättningar"

msgid ""
"The new :mod:`!sets` module contains an implementation of a set datatype.  "
"The :class:`Set` class is for mutable sets, sets that can have members added "
"and removed.  The :class:`!ImmutableSet` class is for sets that can't be "
"modified, and instances of :class:`!ImmutableSet` can therefore be used as "
"dictionary keys. Sets are built on top of dictionaries, so the elements "
"within a set must be hashable."
msgstr ""
"Den nya modulen :mod:`!sets` innehåller en implementation av datatypen set.  "
"Klassen :class:`Set` är för föränderliga uppsättningar, uppsättningar som "
"kan få medlemmar tillagda och borttagna.  Klassen :class:`!ImmutableSet` är "
"för uppsättningar som inte kan ändras, och instanser av :class:`!"
"ImmutableSet` kan därför användas som nycklar i ordböcker. Uppsättningar "
"byggs ovanpå ordböcker, så elementen i en uppsättning måste vara hashbara."

msgid "Here's a simple example::"
msgstr "Här är ett enkelt exempel::"

msgid ""
">>> import sets\n"
">>> S = sets.Set([1,2,3])\n"
">>> S\n"
"Set([1, 2, 3])\n"
">>> 1 in S\n"
"True\n"
">>> 0 in S\n"
"False\n"
">>> S.add(5)\n"
">>> S.remove(3)\n"
">>> S\n"
"Set([1, 2, 5])\n"
">>>"
msgstr ""
">>> import sets\n"
">>> S = sets.Set([1,2,3])\n"
">>> S\n"
"Set([1, 2, 3])\n"
">>> 1 in S\n"
"True\n"
">>> 0 in S\n"
"False\n"
">>> S.add(5)\n"
">>> S.remove(3)\n"
">>> S\n"
"Set([1, 2, 5])\n"
">>>"

msgid ""
"The union and intersection of sets can be computed with the :meth:"
"`~frozenset.union` and :meth:`~frozenset.intersection` methods; an "
"alternative notation uses the bitwise operators ``&`` and ``|``. Mutable "
"sets also have in-place versions of these methods, :meth:`!union_update` "
"and :meth:`~frozenset.intersection_update`. ::"
msgstr ""
"Union och intersektion av mängder kan beräknas med metoderna :meth:"
"`~frozenset.union` och :meth:`~frozenset.intersection`; en alternativ "
"notation använder de bitvisa operatorerna ``&`` och ``|``. Mutabla mängder "
"har också in-place-versioner av dessa metoder, :meth:`!union_update` och :"
"meth:`~frozenset.intersection_update`. ::"

msgid ""
">>> S1 = sets.Set([1,2,3])\n"
">>> S2 = sets.Set([4,5,6])\n"
">>> S1.union(S2)\n"
"Set([1, 2, 3, 4, 5, 6])\n"
">>> S1 | S2                  # Alternative notation\n"
"Set([1, 2, 3, 4, 5, 6])\n"
">>> S1.intersection(S2)\n"
"Set([])\n"
">>> S1 & S2                  # Alternative notation\n"
"Set([])\n"
">>> S1.union_update(S2)\n"
">>> S1\n"
"Set([1, 2, 3, 4, 5, 6])\n"
">>>"
msgstr ""
">>> S1 = uppsättningar.uppsättning([1,2,3])\n"
">>> S2 = uppsättningar.uppsättning([4,5,6])\n"
">>> S1.union(S2)\n"
"Set([1, 2, 3, 4, 5, 6])\n"
">>> S1 | S2 # Alternativ notation\n"
"Uppsättning([1, 2, 3, 4, 5, 6])\n"
">>> S1.intersektion(S2)\n"
"Set([])\n"
">>> S1 & S2 # Alternativ notation\n"
"Set([])\n"
">>> S1.union_uppdatering(S2)\n"
">>> S1\n"
"Set([1, 2, 3, 4, 5, 6])\n"
">>>"

msgid ""
"It's also possible to take the symmetric difference of two sets.  This is "
"the set of all elements in the union that aren't in the intersection.  "
"Another way of putting it is that the symmetric difference contains all "
"elements that are in exactly one set.  Again, there's an alternative "
"notation (``^``), and an in-place version with the ungainly name :meth:"
"`~frozenset.symmetric_difference_update`. ::"
msgstr ""
"Det är också möjligt att ta den symmetriska skillnaden mellan två "
"uppsättningar.  Detta är uppsättningen av alla element i unionen som inte "
"finns i intersektionen.  Ett annat sätt att uttrycka det är att den "
"symmetriska skillnaden innehåller alla element som finns i exakt en "
"uppsättning.  Återigen, det finns en alternativ notation (``^``), och en in-"
"place version med det otympliga namnet :meth:`~frozenset."
"symmetric_difference_update`. ::"

msgid ""
">>> S1 = sets.Set([1,2,3,4])\n"
">>> S2 = sets.Set([3,4,5,6])\n"
">>> S1.symmetric_difference(S2)\n"
"Set([1, 2, 5, 6])\n"
">>> S1 ^ S2\n"
"Set([1, 2, 5, 6])\n"
">>>"
msgstr ""
">>> S1 = sets.set([1,2,3,4])\n"
">>> S2 = uppsättningar.uppsättning([3,4,5,6])\n"
">>> S1.symmetrisk_skillnad(S2)\n"
"Set([1, 2, 5, 6])\n"
">>> S1 ^ S2\n"
"Set([1, 2, 5, 6])\n"
">>>"

msgid ""
"There are also :meth:`!issubset` and :meth:`!issuperset` methods for "
"checking whether one set is a subset or superset of another::"
msgstr ""
"Det finns också metoderna :meth:`!issubset` och :meth:`!issuperset` för att "
"kontrollera om en uppsättning är en delmängd eller övermängd av en annan:"

msgid ""
">>> S1 = sets.Set([1,2,3])\n"
">>> S2 = sets.Set([2,3])\n"
">>> S2.issubset(S1)\n"
"True\n"
">>> S1.issubset(S2)\n"
"False\n"
">>> S1.issuperset(S2)\n"
"True\n"
">>>"
msgstr ""
">>> S1 = set.set([1,2,3])\n"
">>> S2 = uppsättningar.uppsättning([2,3])\n"
">>> S2.issubset(S1)\n"
"Sant\n"
">>> S1.issubset(S2)\n"
"Falsk\n"
">>> S1.issuperset(S2)\n"
"Sant\n"
">>>"

msgid ":pep:`218` - Adding a Built-In Set Object Type"
msgstr ":pep:`218` - Lägga till en inbyggd objekttyp för set"

msgid ""
"PEP written by Greg V. Wilson. Implemented by Greg V. Wilson, Alex Martelli, "
"and GvR."
msgstr ""
"PEP skriven av Greg V. Wilson. Implementerad av Greg V. Wilson, Alex "
"Martelli och GvR."

msgid "PEP 255: Simple Generators"
msgstr "PEP 255: Enkla generatorer"

msgid ""
"In Python 2.2, generators were added as an optional feature, to be enabled "
"by a ``from __future__ import generators`` directive.  In 2.3 generators no "
"longer need to be specially enabled, and are now always present; this means "
"that :keyword:`yield` is now always a keyword.  The rest of this section is "
"a copy of the description of generators from the \"What's New in Python "
"2.2\" document; if you read it back when Python 2.2 came out, you can skip "
"the rest of this section."
msgstr ""
"I Python 2.2 lades generatorer till som en valfri funktion som kunde "
"aktiveras med ett ``from __future__ import generators``-direktiv.  I 2.3 "
"behöver generatorer inte längre aktiveras speciellt, utan är nu alltid "
"närvarande; detta innebär att :keyword:`yield` nu alltid är ett nyckelord.  "
"Resten av det här avsnittet är en kopia av beskrivningen av generatorer från "
"dokumentet \"What's New in Python 2.2\"; om du läste det när Python 2.2 kom "
"ut kan du hoppa över resten av det här avsnittet."

msgid ""
"You're doubtless familiar with how function calls work in Python or C. When "
"you call a function, it gets a private namespace where its local variables "
"are created.  When the function reaches a :keyword:`return` statement, the "
"local variables are destroyed and the resulting value is returned to the "
"caller.  A later call to the same function will get a fresh new set of local "
"variables. But, what if the local variables weren't thrown away on exiting a "
"function? What if you could later resume the function where it left off?  "
"This is what generators provide; they can be thought of as resumable "
"functions."
msgstr ""
"Du är säkert bekant med hur funktionsanrop fungerar i Python eller C. När du "
"anropar en funktion får den ett privat namnområde där dess lokala variabler "
"skapas.  När funktionen når en :keyword:`return`-sats förstörs de lokala "
"variablerna och det resulterande värdet returneras till anroparen.  Ett "
"senare anrop till samma funktion kommer att få en ny uppsättning lokala "
"variabler. Men tänk om de lokala variablerna inte kastades bort när en "
"funktion avslutades? Tänk om du senare kunde återuppta funktionen där den "
"slutade?  Detta är vad generatorer tillhandahåller; de kan betraktas som "
"återupptagbara funktioner."

msgid "Here's the simplest example of a generator function::"
msgstr "Här är det enklaste exemplet på en generatorfunktion::"

msgid ""
"def generate_ints(N):\n"
"    for i in range(N):\n"
"        yield i"
msgstr ""
"def generera_ints(N):\n"
"    för i i intervall(N):\n"
"        avkastning i"

msgid ""
"A new keyword, :keyword:`yield`, was introduced for generators.  Any "
"function containing a :keyword:`!yield` statement is a generator function; "
"this is detected by Python's bytecode compiler which compiles the function "
"specially as a result."
msgstr ""
"Ett nytt nyckelord, :keyword:`yield`, introducerades för generatorer.  Alla "
"funktioner som innehåller en :keyword:`!yield`-sats är en generatorfunktion; "
"detta upptäcks av Pythons bytecode-kompilator som kompilerar funktionen "
"speciellt som ett resultat."

msgid ""
"When you call a generator function, it doesn't return a single value; "
"instead it returns a generator object that supports the iterator protocol.  "
"On executing the :keyword:`yield` statement, the generator outputs the value "
"of ``i``, similar to a :keyword:`return` statement.  The big difference "
"between :keyword:`!yield` and a :keyword:`!return` statement is that on "
"reaching a :keyword:`!yield` the generator's state of execution is suspended "
"and local variables are preserved.  On the next call to the generator's ``."
"next()`` method, the function will resume executing immediately after the :"
"keyword:`!yield` statement.  (For complicated reasons, the :keyword:`!yield` "
"statement isn't allowed inside the :keyword:`try` block of a :keyword:`!"
"try`...\\ :keyword:`!finally` statement; read :pep:`255` for a full "
"explanation of the interaction between :keyword:`!yield` and exceptions.)"
msgstr ""
"När du anropar en generatorfunktion returnerar den inte ett enda värde, utan "
"istället ett generatorobjekt som stöder iteratorprotokollet.  Vid exekvering "
"av :keyword:`yield`-satsen matar generatorn ut värdet på ``i``, på samma "
"sätt som en :keyword:`return`-sats.  Den stora skillnaden mellan :keyword:`!"
"yield` och en :keyword:`!return`-sats är att när man når en :keyword:`!"
"yield` avbryts generatorns exekveringstillstånd och lokala variabler "
"bevaras.  Vid nästa anrop till generatorns metod ``.next()`` kommer "
"funktionen att återuppta exekveringen omedelbart efter :keyword:`!yield`-"
"satsen.  (Av komplicerade skäl är :keyword:`!yield`-satsen inte tillåten "
"inuti :keyword:`try`-blocket i en :keyword:`!try`...\\ :keyword:`!finally`-"
"sats; läs :pep:`255` för en fullständig förklaring av interaktionen mellan :"
"keyword:`!yield` och undantag)"

msgid "Here's a sample usage of the :func:`!generate_ints` generator::"
msgstr ""
"Här är ett exempel på användning av generatorn :func:`!generate_ints`::"

msgid ""
">>> gen = generate_ints(3)\n"
">>> gen\n"
"<generator object at 0x8117f90>\n"
">>> gen.next()\n"
"0\n"
">>> gen.next()\n"
"1\n"
">>> gen.next()\n"
"2\n"
">>> gen.next()\n"
"Traceback (most recent call last):\n"
"  File \"stdin\", line 1, in ?\n"
"  File \"stdin\", line 2, in generate_ints\n"
"StopIteration"
msgstr ""
"&gt;&gt;&gt; gen = generera_ints(3)\n"
"&gt;&gt;&gt; gen\n"
"<generator object at 0x8117f90>\n"
"&gt;&gt;&gt; gen.nästa()\n"
"0\n"
"&gt;&gt;&gt; gen.nästa()\n"
"1\n"
"&gt;&gt;&gt; gen.nästa()\n"
"2\n"
"&gt;&gt;&gt; gen.nästa()\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"stdin\", rad 1, i ?\n"
"  Fil \"stdin\", rad 2, i generate_ints\n"
"Stoppa iteration"

msgid ""
"You could equally write ``for i in generate_ints(5)``, or ``a,b,c = "
"generate_ints(3)``."
msgstr ""
"Du kan lika gärna skriva ``for i in generate_ints(5)``, eller ``a,b,c = "
"generate_ints(3)``."

msgid ""
"Inside a generator function, the :keyword:`return` statement can only be "
"used without a value, and signals the end of the procession of values; "
"afterwards the generator cannot return any further values. :keyword:`!"
"return` with a value, such as ``return 5``, is a syntax error inside a "
"generator function.  The end of the generator's results can also be "
"indicated by raising :exc:`StopIteration` manually, or by just letting the "
"flow of execution fall off the bottom of the function."
msgstr ""
"I en generatorfunktion kan :keyword:`return` bara användas utan ett värde "
"och signalerar slutet på värdeförloppet; därefter kan generatorn inte "
"returnera några ytterligare värden. :keyword:`!return` med ett värde, t.ex. "
"``return 5``, är ett syntaxfel i en generatorfunktion.  Slutet på "
"generatorns resultat kan också indikeras genom att höja :exc:`StopIteration` "
"manuellt, eller genom att bara låta flödet av exekveringen falla från botten "
"av funktionen."

msgid ""
"You could achieve the effect of generators manually by writing your own "
"class and storing all the local variables of the generator as instance "
"variables.  For example, returning a list of integers could be done by "
"setting ``self.count`` to 0, and having the :meth:`next` method increment "
"``self.count`` and return it. However, for a moderately complicated "
"generator, writing a corresponding class would be much messier. :file:`Lib/"
"test/test_generators.py` contains a number of more interesting examples.  "
"The simplest one implements an in-order traversal of a tree using generators "
"recursively. ::"
msgstr ""
"Du kan uppnå effekten av generatorer manuellt genom att skriva din egen "
"klass och lagra alla lokala variabler i generatorn som instansvariabler.  "
"Att returnera en lista med heltal kan till exempel göras genom att sätta "
"``self.count`` till 0 och låta :meth:`next`-metoden öka ``self.count`` och "
"returnera den. Men för en måttligt komplicerad generator skulle det vara "
"mycket krångligare att skriva en motsvarande klass. :file:`Lib/test/"
"test_generators.py` innehåller ett antal mer intressanta exempel.  Det "
"enklaste implementerar en genomgång av ett träd i ordningsföljd med hjälp av "
"generatorer rekursivt. ::"

msgid ""
"# A recursive generator that generates Tree leaves in in-order.\n"
"def inorder(t):\n"
"    if t:\n"
"        for x in inorder(t.left):\n"
"            yield x\n"
"        yield t.label\n"
"        for x in inorder(t.right):\n"
"            yield x"
msgstr ""
"# En rekursiv generator som genererar trädblad i ordning.\n"
"def inorder(t):\n"
"    if t:\n"
"        för x i inorder(t.left):\n"
"            avkastning x\n"
"        yield t.etikett\n"
"        för x i inorder(t.right):\n"
"            ge x"

msgid ""
"Two other examples in :file:`Lib/test/test_generators.py` produce solutions "
"for the N-Queens problem (placing $N$ queens on an $NxN$ chess board so that "
"no queen threatens another) and the Knight's Tour (a route that takes a "
"knight to every square of an $NxN$ chessboard without visiting any square "
"twice)."
msgstr ""
"Två andra exempel i :file:`Lib/test/test_generators.py` producerar lösningar "
"för N-Queens-problemet (placera $N$ drottningar på ett $NxN$ schackbräde så "
"att ingen drottning hotar en annan) och Knight's Tour (en rutt som tar en "
"springare till varje ruta på ett $NxN$ schackbräde utan att besöka någon "
"ruta två gånger)."

msgid ""
"The idea of generators comes from other programming languages, especially "
"Icon (https://www2.cs.arizona.edu/icon/), where the idea of generators is "
"central.  In Icon, every expression and function call behaves like a "
"generator.  One example from \"An Overview of the Icon Programming "
"Language\" at https://www2.cs.arizona.edu/icon/docs/ipd266.htm gives an idea "
"of what this looks like::"
msgstr ""
"Idén med generatorer kommer från andra programmeringsspråk, särskilt Icon "
"(https://www2.cs.arizona.edu/icon/), där idén med generatorer är central.  I "
"Icon beter sig varje uttryck och funktionsanrop som en generator.  Ett "
"exempel från \"An Overview of the Icon Programming Language\" på https://"
"www2.cs.arizona.edu/icon/docs/ipd266.htm ger en uppfattning om hur detta ser "
"ut::"

msgid ""
"sentence := \"Store it in the neighboring harbor\"\n"
"if (i := find(\"or\", sentence)) > 5 then write(i)"
msgstr ""
"mening := \"Förvara den i den närliggande hamnen\"\n"
"if (i := find(\"eller\", mening)) > 5 då skriv(i)"

msgid ""
"In Icon the :func:`!find` function returns the indexes at which the "
"substring \"or\" is found: 3, 23, 33.  In the :keyword:`if` statement, ``i`` "
"is first assigned a value of 3, but 3 is less than 5, so the comparison "
"fails, and Icon retries it with the second value of 23.  23 is greater than "
"5, so the comparison now succeeds, and the code prints the value 23 to the "
"screen."
msgstr ""
"I Icon returnerar funktionen :func:`!find` de index där delsträngen \"or\" "
"hittas: 3, 23, 33.  I :keyword:`if`-satsen tilldelas ``i`` först värdet 3, "
"men 3 är mindre än 5, så jämförelsen misslyckas, och Icon gör ett nytt "
"försök med det andra värdet 23. 23 är större än 5, så jämförelsen lyckas nu, "
"och koden skriver ut värdet 23 på skärmen."

msgid ""
"Python doesn't go nearly as far as Icon in adopting generators as a central "
"concept.  Generators are considered part of the core Python language, but "
"learning or using them isn't compulsory; if they don't solve any problems "
"that you have, feel free to ignore them. One novel feature of Python's "
"interface as compared to Icon's is that a generator's state is represented "
"as a concrete object (the iterator) that can be passed around to other "
"functions or stored in a data structure."
msgstr ""
"Python går inte alls lika långt som Icon när det gäller att anta generatorer "
"som ett centralt koncept.  Generatorer anses vara en del av Pythons "
"kärnspråk, men det är inte obligatoriskt att lära sig eller använda dem; om "
"de inte löser några problem som du har, känn dig fri att ignorera dem. En "
"nyhet i Pythons gränssnitt jämfört med Icons är att en generators tillstånd "
"representeras som ett konkret objekt (iteratorn) som kan skickas runt till "
"andra funktioner eller lagras i en datastruktur."

msgid ":pep:`255` - Simple Generators"
msgstr ":pep:`255` - Enkla generatorer"

msgid ""
"Written by Neil Schemenauer, Tim Peters, Magnus Lie Hetland.  Implemented "
"mostly by Neil Schemenauer and Tim Peters, with other fixes from the Python "
"Labs crew."
msgstr ""
"Skriven av Neil Schemenauer, Tim Peters, Magnus Lie Hetland.  Implementerad "
"mestadels av Neil Schemenauer och Tim Peters, med andra korrigeringar från "
"Python Labs-gänget."

msgid "PEP 263: Source Code Encodings"
msgstr "PEP 263: Kodning av källkod"

msgid ""
"Python source files can now be declared as being in different character set "
"encodings.  Encodings are declared by including a specially formatted "
"comment in the first or second line of the source file.  For example, a "
"UTF-8 file can be declared with::"
msgstr ""
"Python-källfiler kan nu deklareras med olika teckenuppsättningskodningar.  "
"Kodningar deklareras genom att inkludera en speciellt formaterad kommentar "
"på den första eller andra raden i källfilen.  Till exempel kan en UTF-8-fil "
"deklareras med::"

msgid ""
"#!/usr/bin/env python\n"
"# -*- coding: UTF-8 -*-"
msgstr ""
"#!/usr/bin/env python\n"
"# -*- kodning: UTF-8 -*-"

msgid ""
"Without such an encoding declaration, the default encoding used is 7-bit "
"ASCII. Executing or importing modules that contain string literals with 8-"
"bit characters and have no encoding declaration will result in a :exc:"
"`DeprecationWarning` being signalled by Python 2.3; in 2.4 this will be a "
"syntax error."
msgstr ""
"Utan en sådan kodningsdeklaration används 7-bitars ASCII som "
"standardkodning. Att exekvera eller importera moduler som innehåller "
"stränglitteraler med 8-bitars tecken och som inte har någon "
"kodningsdeklaration kommer att resultera i en :exc:`DeprecationWarning` som "
"signaleras av Python 2.3; i 2.4 kommer detta att vara ett syntaxfel."

msgid ""
"The encoding declaration only affects Unicode string literals, which will be "
"converted to Unicode using the specified encoding.  Note that Python "
"identifiers are still restricted to ASCII characters, so you can't have "
"variable names that use characters outside of the usual alphanumerics."
msgstr ""
"Kodningsdeklarationen påverkar endast Unicode-stränglitteraler, som kommer "
"att konverteras till Unicode med hjälp av den angivna kodningen.  Observera "
"att Python-identifierare fortfarande är begränsade till ASCII-tecken, så du "
"kan inte ha variabelnamn som använder tecken utanför de vanliga "
"alfanumeriska tecknen."

msgid ":pep:`263` - Defining Python Source Code Encodings"
msgstr ":pep:`263` - Definiera Python-kodning av källkod"

msgid ""
"Written by Marc-André Lemburg and Martin von Löwis; implemented by Suzuki "
"Hisao and Martin von Löwis."
msgstr ""
"Skriven av Marc-André Lemburg och Martin von Löwis; implementerad av Suzuki "
"Hisao och Martin von Löwis."

msgid "PEP 273: Importing Modules from ZIP Archives"
msgstr "PEP 273: Importera moduler från ZIP-arkiv"

msgid ""
"The new :mod:`zipimport` module adds support for importing modules from a "
"ZIP-format archive.  You don't need to import the module explicitly; it will "
"be automatically imported if a ZIP archive's filename is added to ``sys."
"path``. For example:"
msgstr ""
"Den nya modulen :mod:`zipimport` ger stöd för att importera moduler från ett "
"ZIP-arkiv.  Du behöver inte importera modulen explicit; den importeras "
"automatiskt om ZIP-arkivets filnamn läggs till i ``sys.path``. Ett exempel:"

msgid ""
"amk@nyman:~/src/python$ unzip -l /tmp/example.zip\n"
"Archive:  /tmp/example.zip\n"
"  Length     Date   Time    Name\n"
" --------    ----   ----    ----\n"
"     8467  11-26-02 22:30   jwzthreading.py\n"
" --------                   -------\n"
"     8467                   1 file\n"
"amk@nyman:~/src/python$ ./python\n"
"Python 2.3 (#1, Aug 1 2003, 19:54:32)\n"
">>> import sys\n"
">>> sys.path.insert(0, '/tmp/example.zip')  # Add .zip file to front of "
"path\n"
">>> import jwzthreading\n"
">>> jwzthreading.__file__\n"
"'/tmp/example.zip/jwzthreading.py'\n"
">>>"
msgstr ""
"amk@nyman:~/src/python$ unzip -l /tmp/example.zip\n"
"Arkiv:  /tmp/exempel.zip\n"
"  Längd Datum Tid Namn\n"
" -------- ---- ---- ----\n"
"     8467 11-26-02 22:30 jwzthreading.py\n"
" -------- -------\n"
"     8467 1 fil\n"
"amk@nyman:~/src/python$ ./python\n"
"Python 2.3 (#1, 1 aug 2003, 19:54:32)\n"
">>> import sys\n"
">>> sys.path.insert(0, '/tmp/example.zip') # Lägg till .zip-filen i början "
"av sökvägen\n"
">>> import jwzthreading\n"
">>> jwzthreading.__file__\n"
"'/tmp/exempel.zip/jwzthreading.py'\n"
">>>"

msgid ""
"An entry in ``sys.path`` can now be the filename of a ZIP archive. The ZIP "
"archive can contain any kind of files, but only files named :file:`\\*.py`, :"
"file:`\\*.pyc`, or :file:`\\*.pyo` can be imported.  If an archive only "
"contains :file:`\\*.py` files, Python will not attempt to modify the archive "
"by adding the corresponding :file:`\\*.pyc` file, meaning that if a ZIP "
"archive doesn't contain :file:`\\*.pyc` files, importing may be rather slow."
msgstr ""
"En post i ``sys.path`` kan nu vara filnamnet på ett ZIP-arkiv. ZIP-arkivet "
"kan innehålla alla typer av filer, men endast filer med namnet :file:`\\*."
"py`, :file:`\\*.pyc` eller :file:`\\*.pyo` kan importeras.  Om ett arkiv "
"endast innehåller :file:`\\*.py`-filer kommer Python inte att försöka "
"modifiera arkivet genom att lägga till motsvarande :file:`\\*.pyc`-fil, "
"vilket innebär att om ett ZIP-arkiv inte innehåller :file:`\\*.pyc`-filer "
"kan importen gå ganska långsamt."

msgid ""
"A path within the archive can also be specified to only import from a "
"subdirectory; for example, the path :file:`/tmp/example.zip/lib/` would only "
"import from the :file:`lib/` subdirectory within the archive."
msgstr ""
"En sökväg inom arkivet kan också anges för att endast importera från en "
"underkatalog; till exempel skulle sökvägen :file:`/tmp/example.zip/lib/` "
"endast importera från underkatalogen :file:`lib/` inom arkivet."

msgid ":pep:`273` - Import Modules from Zip Archives"
msgstr ":pep:`273` - Importera moduler från zip-arkiv"

msgid ""
"Written by James C. Ahlstrom,  who also provided an implementation. Python "
"2.3 follows the specification in :pep:`273`,  but uses an implementation "
"written by Just van Rossum  that uses the import hooks described in :pep:"
"`302`. See section :ref:`section-pep302` for a description of the new import "
"hooks."
msgstr ""
"Skriven av James C. Ahlstrom, som också tillhandahöll en implementation. "
"Python 2.3 följer specifikationen i :pep:`273`, men använder en "
"implementation skriven av Just van Rossum som använder de importkrokar som "
"beskrivs i :pep:`302`. Se avsnitt :ref:`section-pep302` för en beskrivning "
"av de nya importkrokarna."

msgid "PEP 277: Unicode file name support for Windows NT"
msgstr "PEP 277: Stöd för Unicode-filnamn i Windows NT"

msgid ""
"On Windows NT, 2000, and XP, the system stores file names as Unicode "
"strings. Traditionally, Python has represented file names as byte strings, "
"which is inadequate because it renders some file names inaccessible."
msgstr ""
"I Windows NT, 2000 och XP lagrar systemet filnamn som Unicode-strängar. "
"Traditionellt har Python representerat filnamn som bytesträngar, vilket är "
"otillräckligt eftersom det gör vissa filnamn otillgängliga."

msgid ""
"Python now allows using arbitrary Unicode strings (within the limitations of "
"the file system) for all functions that expect file names, most notably the :"
"func:`open` built-in function. If a Unicode string is passed to :func:`os."
"listdir`, Python now returns a list of Unicode strings.  A new function, :"
"func:`!os.getcwdu`, returns the current directory as a Unicode string."
msgstr ""
"Python tillåter nu användning av godtyckliga Unicode-strängar (inom "
"filsystemets begränsningar) för alla funktioner som förväntar sig filnamn, "
"framför allt den inbyggda funktionen :func:`open`. Om en Unicode-sträng "
"skickas till :func:`os.listdir` returnerar Python nu en lista med Unicode-"
"strängar.  En ny funktion, :func:`!os.getcwdu`, returnerar den aktuella "
"katalogen som en Unicode-sträng."

msgid ""
"Byte strings still work as file names, and on Windows Python will "
"transparently convert them to Unicode using the ``mbcs`` encoding."
msgstr ""
"Byte-strängar fungerar fortfarande som filnamn, och på Windows konverterar "
"Python dem transparent till Unicode med hjälp av kodningen ``mbcs``."

msgid ""
"Other systems also allow Unicode strings as file names but convert them to "
"byte strings before passing them to the system, which can cause a :exc:"
"`UnicodeError` to be raised. Applications can test whether arbitrary Unicode "
"strings are supported as file names by checking :const:`os.path."
"supports_unicode_filenames`, a Boolean value."
msgstr ""
"Andra system tillåter också Unicode-strängar som filnamn men konverterar dem "
"till byte-strängar innan de skickas till systemet, vilket kan leda till att "
"ett :exc:`UnicodeError` uppstår. Program kan testa om godtyckliga Unicode-"
"strängar stöds som filnamn genom att kontrollera :const:`os.path."
"supports_unicode_filenames`, ett booleskt värde."

msgid "Under MacOS, :func:`os.listdir` may now return Unicode filenames."
msgstr "Under MacOS kan :func:`os.listdir` nu returnera Unicode-filnamn."

msgid ":pep:`277` - Unicode file name support for Windows NT"
msgstr ":pep:`277` - Stöd för Unicode-filnamn i Windows NT"

msgid ""
"Written by Neil Hodgson; implemented by Neil Hodgson, Martin von Löwis, and "
"Mark Hammond."
msgstr ""
"Skriven av Neil Hodgson; implementerad av Neil Hodgson, Martin von Löwis och "
"Mark Hammond."

msgid "PEP 278: Universal Newline Support"
msgstr "PEP 278: Universellt stöd för nya linjer"

msgid ""
"The three major operating systems used today are Microsoft Windows, Apple's "
"Macintosh OS, and the various Unix derivatives.  A minor irritation of cross-"
"platform work  is that these three platforms all use different characters to "
"mark the ends of lines in text files.  Unix uses the linefeed (ASCII "
"character 10), MacOS uses the carriage return (ASCII character 13), and "
"Windows uses a two-character sequence of a carriage return plus a newline."
msgstr ""
"De tre största operativsystemen som används idag är Microsoft Windows, "
"Apples Macintosh OS och de olika Unix-derivaten.  Ett litet "
"irritationsmoment när man arbetar plattformsoberoende är att de tre "
"plattformarna använder olika tecken för att markera slutet på rader i "
"textfiler.  Unix använder linefeed (ASCII-tecken 10), MacOS använder "
"carriage return (ASCII-tecken 13) och Windows använder en sekvens med två "
"tecken, carriage return och en ny rad."

msgid ""
"Python's file objects can now support end of line conventions other than the "
"one followed by the platform on which Python is running. Opening a file with "
"the mode ``'U'`` or ``'rU'`` will open a file for reading in :term:"
"`universal newlines` mode.  All three line ending conventions will be "
"translated to a ``'\\n'`` in the strings returned by the various file "
"methods such as :meth:`!read` and :meth:`!readline`."
msgstr ""
"Pythons filobjekt kan nu stödja andra konventioner för radavslut än den som "
"följs av den plattform som Python körs på. Att öppna en fil med läget "
"``'U'`` eller ``'rU'`` kommer att öppna en fil för läsning i :term:"
"`universal newlines`-läget.  Alla tre radslutskonventionerna kommer att "
"översättas till ``'\\n'`` i strängarna som returneras av de olika "
"filmetoderna som :meth:`!read` och :meth:`!readline`."

msgid ""
"Universal newline support is also used when importing modules and when "
"executing a file with the :func:`!execfile` function.  This means that "
"Python modules can be shared between all three operating systems without "
"needing to convert the line-endings."
msgstr ""
"Universellt stöd för nya rader används också vid import av moduler och när "
"en fil exekveras med funktionen :func:`!execfile`.  Detta innebär att Python-"
"moduler kan delas mellan alla tre operativsystemen utan att "
"radavslutningarna behöver konverteras."

msgid ""
"This feature can be disabled when compiling Python by specifying the :option:"
"`!--without-universal-newlines` switch when running Python's :program:"
"`configure` script."
msgstr ""
"Denna funktion kan avaktiveras vid kompilering av Python genom att ange :"
"option:`!--without-universal-newlines` när Pythons :program:`configure`-"
"skript körs."

msgid ":pep:`278` - Universal Newline Support"
msgstr ":pep:`278` - Universellt stöd för nya linjer"

msgid "Written and implemented by Jack Jansen."
msgstr "Skriven och implementerad av Jack Jansen."

msgid "PEP 279: enumerate()"
msgstr "PEP 279: enumerate()"

msgid ""
"A new built-in function, :func:`enumerate`, will make certain loops a bit "
"clearer.  ``enumerate(thing)``, where *thing* is either an iterator or a "
"sequence, returns an iterator that will return ``(0, thing[0])``, ``(1, "
"thing[1])``, ``(2, thing[2])``, and so forth."
msgstr ""
"En ny inbyggd funktion, :func:`enumerate`, kommer att göra vissa loopar lite "
"tydligare.  ``enumerate(thing)``, där *thing* är antingen en iterator eller "
"en sekvens, returnerar en iterator som returnerar ``(0, thing[0])``, ``(1, "
"thing[1])``, ``(2, thing[2])``, och så vidare."

msgid "A common idiom to change every element of a list looks like this::"
msgstr ""
"Ett vanligt idiom för att ändra varje element i en lista ser ut så här::"

msgid ""
"for i in range(len(L)):\n"
"    item = L[i]\n"
"    # ... compute some result based on item ...\n"
"    L[i] = result"
msgstr ""
"for i in range(len(L)):\n"
"    objekt = L[i]\n"
"    # ... beräkna något resultat baserat på item ...\n"
"    L[i] = resultat"

msgid "This can be rewritten using :func:`enumerate` as::"
msgstr "Detta kan skrivas om med hjälp av :func:`enumerate` som::"

msgid ""
"for i, item in enumerate(L):\n"
"    # ... compute some result based on item ...\n"
"    L[i] = result"
msgstr ""
"för i, objekt i enumerate(L):\n"
"    # ... beräkna ett resultat baserat på objektet ...\n"
"    L[i] = resultat"

msgid ":pep:`279` - The enumerate() built-in function"
msgstr ":pep:`279` - Den inbyggda funktionen enumerate()"

msgid "Written and implemented by Raymond D. Hettinger."
msgstr "Skriven och implementerad av Raymond D. Hettinger."

msgid "PEP 282: The logging Package"
msgstr "PEP 282: Loggningspaketet"

msgid ""
"A standard package for writing logs, :mod:`logging`, has been added to "
"Python 2.3.  It provides a powerful and flexible mechanism for generating "
"logging output which can then be filtered and processed in various ways.  A "
"configuration file written in a standard format can be used to control the "
"logging behavior of a program.  Python includes handlers that will write log "
"records to standard error or to a file or socket, send them to the system "
"log, or even e-mail them to a particular address; of course, it's also "
"possible to write your own handler classes."
msgstr ""
"Ett standardpaket för att skriva loggar, :mod:`logging`, har lagts till i "
"Python 2.3.  Det ger en kraftfull och flexibel mekanism för att generera "
"loggningsutdata som sedan kan filtreras och bearbetas på olika sätt.  En "
"konfigurationsfil skriven i ett standardformat kan användas för att styra "
"loggningsbeteendet i ett program.  Python innehåller hanterare som skriver "
"loggposter till standardfel eller till en fil eller socket, skickar dem till "
"systemloggen eller till och med e-postar dem till en viss adress; "
"naturligtvis är det också möjligt att skriva egna hanterarklasser."

msgid ""
"The :class:`~logging.Logger` class is the primary class. Most application "
"code will deal with one or more :class:`~logging.Logger` objects, each one "
"used by a particular subsystem of the application. Each :class:`~logging."
"Logger` is identified by a name, and names are organized into a hierarchy "
"using ``.``  as the component separator. For example, you might have :class:"
"`~logging.Logger` instances named ``server``, ``server.auth`` and ``server."
"network``.  The latter two instances are below ``server`` in the hierarchy.  "
"This means that if you turn up the verbosity for ``server`` or direct "
"``server`` messages to a different handler, the changes will also apply to "
"records logged to ``server.auth`` and ``server.network``. There's also a "
"root :class:`~logging.Logger` that's the parent of all other loggers."
msgstr ""
"Klassen :class:`~logging.Logger` är den primära klassen. Den mesta "
"programkoden kommer att hantera ett eller flera :class:`~logging.Logger`-"
"objekt, som vart och ett används av ett visst delsystem i programmet. Varje :"
"class:`~logging.Logger` identifieras med ett namn, och namnen organiseras i "
"en hierarki med ``.`` som komponentavgränsare. Du kan t.ex. ha :class:"
"`~logging.Logger`-instanser med namnen ``server``, ``server.auth`` och "
"``server.network``.  De två sistnämnda instanserna ligger under ``server`` i "
"hierarkin.  Detta innebär att om du ökar ordrikedomen för ``server`` eller "
"riktar ``server``-meddelanden till en annan hanterare, kommer ändringarna "
"också att gälla för poster som loggas till ``server.auth`` och ``server."
"network``. Det finns också en rot :class:`~logging.Logger` som är överordnad "
"alla andra loggrar."

msgid ""
"For simple uses, the :mod:`logging` package contains some convenience "
"functions that always use the root log::"
msgstr ""
"För enkla användningsområden innehåller paketet :mod:`logging` några "
"bekvämlighetsfunktioner som alltid använder roten log::"

msgid ""
"import logging\n"
"\n"
"logging.debug('Debugging information')\n"
"logging.info('Informational message')\n"
"logging.warning('Warning:config file %s not found', 'server.conf')\n"
"logging.error('Error occurred')\n"
"logging.critical('Critical error -- shutting down')"
msgstr ""
"import logging\n"
"\n"
"logging.debug('Debugging information')\n"
"logging.info('Informational message')\n"
"logging.warning('Warning:config file %s not found', 'server.conf')\n"
"logging.error('Error occurred')\n"
"logging.critical('Critical error -- shutting down')"

msgid "This produces the following output::"
msgstr "Detta ger följande utdata::"

msgid ""
"WARNING:root:Warning:config file server.conf not found\n"
"ERROR:root:Error occurred\n"
"CRITICAL:root:Critical error -- shutting down"
msgstr ""
"WARNING:root:Warning:config-filen server.conf hittades inte\n"
"ERROR:root:Fel inträffade\n"
"CRITICAL:root:Kritiskt fel -- stänger ner"

msgid ""
"In the default configuration, informational and debugging messages are "
"suppressed and the output is sent to standard error.  You can enable the "
"display of informational and debugging messages by calling the :meth:"
"`~logging.Logger.setLevel` method on the root logger."
msgstr ""
"I standardkonfigurationen undertrycks informations- och "
"felsökningsmeddelanden och utdata skickas till standardfel.  Du kan aktivera "
"visning av informations- och felsökningsmeddelanden genom att anropa "
"metoden :meth:`~logging.Logger.setLevel` på rotloggaren."

msgid ""
"Notice the :func:`~logging.warning` call's use of string formatting "
"operators; all of the functions for logging messages take the arguments "
"``(msg, arg1, arg2, ...)`` and log the string resulting from ``msg % (arg1, "
"arg2, ...)``."
msgstr ""
"Lägg märke till :func:`~logging.warning`-anropets användning av "
"strängformateringsoperatorer; alla funktioner för loggning av meddelanden "
"tar argumenten ``(msg, arg1, arg2, ...)`` och loggar strängen som blir "
"resultatet av ``msg % (arg1, arg2, ...)``."

msgid ""
"There's also an :func:`~logging.exception` function that records the most "
"recent traceback.  Any of the other functions will also record the traceback "
"if you specify a true value for the keyword argument *exc_info*. ::"
msgstr ""
"Det finns också en :func:`~logging.exception`-funktion som registrerar det "
"senaste bakslaget.  Någon av de andra funktionerna kommer också att spela in "
"spårningen om du anger ett sant värde för nyckelordsargumentet *exc_info*. ::"

msgid ""
"def f():\n"
"    try:    1/0\n"
"    except: logging.exception('Problem recorded')\n"
"\n"
"f()"
msgstr ""
"def f():\n"
"    försök:    1/0\n"
"    except: logging.exception('Problem registrerat')\n"
"\n"
"f()"

msgid ""
"ERROR:root:Problem recorded\n"
"Traceback (most recent call last):\n"
"  File \"t.py\", line 6, in f\n"
"    1/0\n"
"ZeroDivisionError: integer division or modulo by zero"
msgstr ""
"ERROR:root:Problem registrerat\n"
"Återkoppling (senaste anropet sist):\n"
"  Fil \"t.py\", rad 6, i f\n"
"    1/0\n"
"ZeroDivisionError: division av heltal eller modulo med noll"

msgid ""
"Slightly more advanced programs will use a logger other than the root "
"logger. The ``getLogger(name)`` function is used to get a particular log, "
"creating it if it doesn't exist yet. ``getLogger(None)`` returns the root "
"logger. ::"
msgstr ""
"Lite mer avancerade program kommer att använda en annan logger än "
"rotloggern. Funktionen ``getLogger(name)`` används för att hämta en viss "
"logger, och skapar den om den inte finns ännu. ``getLogger(None)`` "
"returnerar rotloggaren. ::"

msgid ""
"log = logging.getLogger('server')\n"
" ...\n"
"log.info('Listening on port %i', port)\n"
" ...\n"
"log.critical('Disk full')\n"
" ..."
msgstr ""
"log = loggning.getLogger('server')\n"
" ...\n"
"log.info('Lyssnar på port %i', port)\n"
" ...\n"
"log.critical('Disk full')\n"
" ..."

msgid ""
"Log records are usually propagated up the hierarchy, so a message logged to "
"``server.auth`` is also seen by ``server`` and ``root``, but a :class:"
"`~logging.Logger` can prevent this by setting its :attr:`~logging.Logger."
"propagate` attribute to :const:`False`."
msgstr ""
"Loggposter sprids vanligtvis uppåt i hierarkin, så ett meddelande som loggas "
"till ``server.auth`` ses också av ``server`` och ``root``, men en :class:"
"`~logging.Logger` kan förhindra detta genom att ställa in dess :attr:"
"`~logging.Logger.propagate`-attribut till :const:`False`."

msgid ""
"There are more classes provided by the :mod:`logging` package that can be "
"customized.  When a :class:`~logging.Logger` instance is told to log a "
"message, it creates a :class:`~logging.LogRecord` instance that is sent to "
"any number of different :class:`~logging.Handler` instances.  Loggers and "
"handlers can also have an attached list of filters, and each filter can "
"cause the :class:`~logging.LogRecord` to be ignored or can modify the record "
"before passing it along.  When they're finally output, :class:`~logging."
"LogRecord` instances are converted to text by a :class:`~logging.Formatter` "
"class.  All of these classes can be replaced by your own specially written "
"classes."
msgstr ""
"Det finns fler klasser som tillhandahålls av paketet :mod:`logging` och som "
"kan anpassas.  När en instans av :class:`~logging.Logger` får i uppdrag att "
"logga ett meddelande skapas en instans av :class:`~logging.LogRecord` som "
"skickas till ett valfritt antal olika instanser av :class:`~logging."
"Handler`.  Loggare och hanterare kan också ha en bifogad lista med filter, "
"och varje filter kan orsaka att :class:`~logging.LogRecord` ignoreras eller "
"kan modifiera posten innan den skickas vidare.  När de slutligen skrivs ut "
"konverteras :class:`~logging.LogRecord`-instanser till text av en :class:"
"`~logging.Formatter`-klass.  Alla dessa klasser kan ersättas av dina egna "
"specialskrivna klasser."

msgid ""
"With all of these features the :mod:`logging` package should provide enough "
"flexibility for even the most complicated applications.  This is only an "
"incomplete overview of its features, so please see the package's reference "
"documentation for all of the details.  Reading :pep:`282` will also be "
"helpful."
msgstr ""
"Med alla dessa funktioner bör paketet :mod:`logging` ge tillräcklig "
"flexibilitet för även de mest komplicerade tillämpningarna.  Det här är bara "
"en ofullständig översikt över dess funktioner, så se paketets "
"referensdokumentation för alla detaljer.  Att läsa :pep:`282` kommer också "
"att vara till hjälp."

msgid ":pep:`282` - A Logging System"
msgstr ":pep:`282` - Ett loggningssystem"

msgid "Written by Vinay Sajip and Trent Mick; implemented by Vinay Sajip."
msgstr "Skriven av Vinay Sajip och Trent Mick; implementerad av Vinay Sajip."

msgid "PEP 285: A Boolean Type"
msgstr "PEP 285: En boolesk typ"

msgid ""
"A Boolean type was added to Python 2.3.  Two new constants were added to "
"the :mod:`!__builtin__` module, :const:`True` and :const:`False`.  (:const:"
"`True` and :const:`False` constants were added to the built-ins in Python "
"2.2.1, but the 2.2.1 versions are simply set to integer values of 1 and 0 "
"and aren't a different type.)"
msgstr ""
"En boolesk typ lades till i Python 2.3.  Två nya konstanter lades till i "
"modulen :mod:`!__builtin__`, :const:`True` och :const:`False`.  (:const:"
"`True` och :const:`False` lades till i Python 2.2.1, men 2.2.1-versionerna "
"är helt enkelt inställda på heltalsvärdena 1 och 0 och är inte en annan typ)"

msgid ""
"The type object for this new type is named :class:`bool`; the constructor "
"for it takes any Python value and converts it to :const:`True` or :const:"
"`False`. ::"
msgstr ""
"Typobjektet för den här nya typen heter :class:`bool`; konstruktören för den "
"tar ett valfritt Python-värde och konverterar det till :const:`True` eller :"
"const:`False`. ::"

msgid ""
">>> bool(1)\n"
"True\n"
">>> bool(0)\n"
"False\n"
">>> bool([])\n"
"False\n"
">>> bool( (1,) )\n"
"True"
msgstr ""
">>> bool(1)\n"
"Sann\n"
">>> bool(0)\n"
"Falsk\n"
">>> bool([])\n"
"Falsk\n"
">>> bool( (1,) )\n"
"Sann"

msgid ""
"Most of the standard library modules and built-in functions have been "
"changed to return Booleans. ::"
msgstr ""
"De flesta av standardbibliotekets moduler och inbyggda funktioner har "
"ändrats så att de returnerar booleaner:"

msgid ""
">>> obj = []\n"
">>> hasattr(obj, 'append')\n"
"True\n"
">>> isinstance(obj, list)\n"
"True\n"
">>> isinstance(obj, tuple)\n"
"False"
msgstr ""
">>> obj = []\n"
">>> hasattr(obj, 'append')\n"
"Sant\n"
">>> isinstance(obj, lista)\n"
"True >>> isinstance(obj, tuple)\n"
">>> isinstance(obj, tuple)\n"
"False"

msgid ""
"Python's Booleans were added with the primary goal of making code clearer.  "
"For example, if you're reading a function and encounter the statement "
"``return 1``, you might wonder whether the ``1`` represents a Boolean truth "
"value, an index, or a coefficient that multiplies some other quantity.  If "
"the statement is ``return True``, however, the meaning of the return value "
"is quite clear."
msgstr ""
"Pythons booleaner lades till med det primära målet att göra koden "
"tydligare.  Om du till exempel läser en funktion och stöter på uttalandet "
"``return 1``, kanske du undrar om ``1`` representerar ett booleskt "
"sanningsvärde, ett index eller en koefficient som multiplicerar någon annan "
"kvantitet.  Om uttalandet är ``return True`` är dock betydelsen av "
"returvärdet ganska tydlig."

msgid ""
"Python's Booleans were *not* added for the sake of strict type-checking.  A "
"very strict language such as Pascal would also prevent you performing "
"arithmetic with Booleans, and would require that the expression in an :"
"keyword:`if` statement always evaluate to a Boolean result.  Python is not "
"this strict and never will be, as :pep:`285` explicitly says.  This means "
"you can still use any expression in an :keyword:`!if` statement, even ones "
"that evaluate to a list or tuple or some random object.  The Boolean type is "
"a subclass of the :class:`int` class so that arithmetic using a Boolean "
"still works. ::"
msgstr ""
"Pythons booleaner lades *inte* till för att göra en strikt typkontroll.  Ett "
"mycket strikt språk som Pascal skulle också hindra dig från att utföra "
"aritmetik med booleaner och skulle kräva att uttrycket i en :keyword:`if`-"
"sats alltid utvärderas till ett booleanskt resultat.  Python är inte så "
"strikt och kommer aldrig att bli det, vilket :pep:`285` uttryckligen säger.  "
"Detta innebär att du fortfarande kan använda vilket uttryck som helst i en :"
"keyword:`!if`-sats, även sådana som utvärderas till en lista eller tupel "
"eller något slumpmässigt objekt.  Den booleska typen är en underklass till :"
"class:`int`-klassen så att aritmetik med en booleansk typ fortfarande "
"fungerar. ::"

msgid ""
">>> True + 1\n"
"2\n"
">>> False + 1\n"
"1\n"
">>> False * 75\n"
"0\n"
">>> True * 75\n"
"75"
msgstr ""
">>> Sant + 1\n"
"2\n"
">>> Falsk + 1\n"
"1\n"
">>> Falskt * 75\n"
"0\n"
">>> Sant * 75\n"
"75"

msgid ""
"To sum up :const:`True` and :const:`False` in a sentence: they're "
"alternative ways to spell the integer values 1 and 0, with the single "
"difference that :func:`str` and :func:`repr` return the strings ``'True'`` "
"and ``'False'`` instead of ``'1'`` and ``'0'``."
msgstr ""
"För att sammanfatta :const:`True` och :const:`False` i en mening: de är "
"alternativa sätt att stava till heltalsvärdena 1 och 0, med den enda "
"skillnaden att :func:`str` och :func:`repr` returnerar strängarna ``'True'`` "
"och ``'False'`` istället för ``'1'`` och ``'0'``."

msgid ":pep:`285` - Adding a bool type"
msgstr ":pep:`285` - Lägga till en bool-typ"

msgid "Written and implemented by GvR."
msgstr "Skrivet och implementerat av GvR."

msgid "PEP 293: Codec Error Handling Callbacks"
msgstr "PEP 293: Callbacks för felhantering av codec"

msgid ""
"When encoding a Unicode string into a byte string, unencodable characters "
"may be encountered.  So far, Python has allowed specifying the error "
"processing as either \"strict\" (raising :exc:`UnicodeError`), "
"\"ignore\" (skipping the character), or \"replace\" (using a question mark "
"in the output string), with \"strict\" being the default behavior. It may be "
"desirable to specify alternative processing of such errors, such as "
"inserting an XML character reference or HTML entity reference into the "
"converted string."
msgstr ""
"När man kodar en Unicode-sträng till en byte-sträng kan man stöta på tecken "
"som inte kan kodas.  Hittills har Python tillåtit att felhanteringen "
"specificeras som antingen \"strict\" (väcker :exc:`UnicodeError`), "
"\"ignore\" (hoppar över tecknet) eller \"replace\" (använder ett frågetecken "
"i utdatasträngen), där \"strict\" är standardbeteendet. Det kan vara "
"önskvärt att ange alternativ behandling av sådana fel, t.ex. att infoga en "
"XML-teckenreferens eller HTML-entitetsreferens i den konverterade strängen."

msgid ""
"Python now has a flexible framework to add different processing strategies.  "
"New error handlers can be added with :func:`codecs.register_error`, and "
"codecs then can access the error handler with :func:`codecs.lookup_error`. "
"An equivalent C API has been added for codecs written in C. The error "
"handler gets the necessary state information such as the string being "
"converted, the position in the string where the error was detected, and the "
"target encoding.  The handler can then either raise an exception or return a "
"replacement string."
msgstr ""
"Python har nu ett flexibelt ramverk för att lägga till olika "
"bearbetningsstrategier.  Nya felhanterare kan läggas till med :func:`codecs."
"register_error`, och codecs kan sedan komma åt felhanteraren med :func:"
"`codecs.lookup_error`. Ett motsvarande C-API har lagts till för codecs som "
"är skrivna i C. Felhanteraren får nödvändig statusinformation, t.ex. "
"strängen som konverteras, positionen i strängen där felet upptäcktes och "
"målkodningen.  Hanteraren kan sedan antingen skapa ett undantag eller "
"returnera en ersättningssträng."

msgid ""
"Two additional error handlers have been implemented using this framework: "
"\"backslashreplace\" uses Python backslash quoting to represent unencodable "
"characters and \"xmlcharrefreplace\" emits XML character references."
msgstr ""
"Två ytterligare felhanterare har implementerats med hjälp av detta ramverk: "
"\"backslashreplace\" använder Pythons backslash-citering för att "
"representera okodbara tecken och \"xmlcharrefreplace\" skickar ut XML-"
"teckenreferenser."

msgid ":pep:`293` - Codec Error Handling Callbacks"
msgstr ":pep:`293` - Återkallelser för felhantering av codec"

msgid "Written and implemented by Walter Dörwald."
msgstr "Skrivet och implementerat av Walter Dörwald."

msgid "PEP 301: Package Index and Metadata for Distutils"
msgstr "PEP 301: Paketindex och metadata för Distutils"

msgid ""
"Support for the long-requested Python catalog makes its first appearance in "
"2.3."
msgstr ""
"Stöd för den sedan länge efterfrågade Python-katalogen finns för första "
"gången i 2.3."

msgid ""
"The heart of the catalog is the new Distutils :command:`register` command. "
"Running ``python setup.py register`` will collect the metadata describing a "
"package, such as its name, version, maintainer, description, &c., and send "
"it to a central catalog server.  The resulting catalog is available from "
"https://pypi.org."
msgstr ""
"Hjärtat i katalogen är det nya Distutils :command:`register`-kommandot. "
"Genom att köra ``python setup.py register`` samlas de metadata som beskriver "
"ett paket in, t.ex. namn, version, underhållare, beskrivning etc., och "
"skickas till en central katalogserver.  Den resulterande katalogen finns "
"tillgänglig från https://pypi.org."

msgid ""
"To make the catalog a bit more useful, a new optional *classifiers* keyword "
"argument has been added to the Distutils :func:`!setup` function.  A list of "
"`Trove <http://catb.org/~esr/trove/>`_-style strings can be supplied to help "
"classify the software."
msgstr ""
"För att göra katalogen lite mer användbar har ett nytt valfritt "
"*classifiers*-nyckelordsargument lagts till i Distutils :func:`!setup`-"
"funktion.  En lista med strängar i stil med `Trove <http://catb.org/~esr/"
"trove/>`_ kan anges för att hjälpa till att klassificera programvaran."

msgid ""
"Here's an example :file:`setup.py` with classifiers, written to be "
"compatible with older versions of the Distutils::"
msgstr ""
"Här är ett exempel :file:`setup.py` med klassificerare, skriven för att vara "
"kompatibel med äldre versioner av Distutils::"

msgid ""
"from distutils import core\n"
"kw = {'name': \"Quixote\",\n"
"      'version': \"0.5.1\",\n"
"      'description': \"A highly Pythonic Web application framework\",\n"
"      # ...\n"
"      }\n"
"\n"
"if (hasattr(core, 'setup_keywords') and\n"
"    'classifiers' in core.setup_keywords):\n"
"    kw['classifiers'] = \\\n"
"        ['Topic :: Internet :: WWW/HTTP :: Dynamic Content',\n"
"         'Environment :: No Input/Output (Daemon)',\n"
"         'Intended Audience :: Developers'],\n"
"\n"
"core.setup(**kw)"
msgstr ""
"från distutils import core\n"
"kw = {'namn': \"Quixote\",\n"
"      'version': \"0.5.1\",\n"
"      'description': \"Ett mycket pythoniskt ramverk för "
"webbapplikationer\",\n"
"      # ...\n"
"      }\n"
"\n"
"if (hasattr(core, 'setup_keywords') och\n"
"    \"classifiers\" i core.setup_keywords):\n"
"    kw['classifiers'] = \\\n"
"        ['Ämne :: Internet :: WWW/HTTP :: Dynamic Content',\n"
"         \"Miljö :: Ingen inmatning/utmatning (Daemon)\",\n"
"         'Avsedd målgrupp :: Utvecklare'],\n"
"\n"
"core.setup(**kw)"

msgid ""
"The full list of classifiers can be obtained by running  ``python setup.py "
"register --list-classifiers``."
msgstr ""
"Den fullständiga listan över klassificerare kan erhållas genom att köra "
"``python setup.py register --list-classifiers``."

msgid ":pep:`301` - Package Index and Metadata for Distutils"
msgstr ":pep:`301` - Paketindex och metadata för Distutils"

msgid "Written and implemented by Richard Jones."
msgstr "Skrivet och implementerat av Richard Jones."

msgid "PEP 302: New Import Hooks"
msgstr "PEP 302: Nya importkrokar"

msgid ""
"While it's been possible to write custom import hooks ever since the :mod:`!"
"ihooks` module was introduced in Python 1.3, no one has ever been really "
"happy with it because writing new import hooks is difficult and messy.  "
"There have been various proposed alternatives such as the :mod:`!imputil` "
"and :mod:`!iu` modules, but none of them has ever gained much acceptance, "
"and none of them were easily usable from C code."
msgstr ""
"Även om det har varit möjligt att skriva egna importkrokar ända sedan "
"modulen :mod:`!ihooks` introducerades i Python 1.3, har ingen någonsin varit "
"riktigt nöjd med det eftersom det är svårt och rörigt att skriva nya "
"importkrokar.  Det har funnits olika föreslagna alternativ som modulerna :"
"mod:`!imputil` och :mod:`!iu`, men ingen av dem har någonsin fått någon "
"större acceptans, och ingen av dem var lätt att använda från C-kod."

msgid ""
":pep:`302` borrows ideas from its predecessors, especially from Gordon "
"McMillan's :mod:`!iu` module.  Three new items  are added to the :mod:`sys` "
"module:"
msgstr ""
":pep:`302` lånar idéer från sina föregångare, särskilt från Gordon McMillans "
"modul :mod:`!iu`.  Tre nya objekt har lagts till i modulen :mod:`sys`:"

msgid ""
"``sys.path_hooks`` is a list of callable objects; most  often they'll be "
"classes.  Each callable takes a string containing a path and either returns "
"an importer object that will handle imports from this path or raises an :exc:"
"`ImportError` exception if it can't handle this path."
msgstr ""
"```sys.path_hooks`` är en lista över anropsbara objekt; oftast är de "
"klasser.  Varje anropbart objekt tar en sträng som innehåller en sökväg och "
"returnerar antingen ett importobjekt som hanterar import från denna sökväg "
"eller ger upphov till ett :exc:`ImportError`-undantag om det inte kan "
"hantera denna sökväg."

msgid ""
"``sys.path_importer_cache`` caches importer objects for each path, so ``sys."
"path_hooks`` will only need to be traversed once for each path."
msgstr ""
"``sys.path_importer_cache`` cachelagrar importobjekt för varje sökväg, så "
"``sys.path_hooks`` behöver bara passeras en gång för varje sökväg."

msgid ""
"``sys.meta_path`` is a list of importer objects that will be traversed "
"before ``sys.path`` is checked.  This list is initially empty, but user code "
"can add objects to it.  Additional built-in and frozen modules can be "
"imported by an object added to this list."
msgstr ""
"```sys.meta_path`` är en lista över importerarobjekt som kommer att "
"genomkorsas innan ``sys.path`` kontrolleras.  Den här listan är från början "
"tom, men användarkod kan lägga till objekt i den.  Ytterligare inbyggda och "
"frysta moduler kan importeras av ett objekt som läggs till i den här listan."

msgid ""
"Importer objects must have a single method, ``find_module(fullname, "
"path=None)``.  *fullname* will be a module or package name, e.g. ``string`` "
"or ``distutils.core``.  :meth:`!find_module` must return a loader object "
"that has a single method, ``load_module(fullname)``, that creates and "
"returns the corresponding module object."
msgstr ""
"Importörobjekt måste ha en enda metod, ``find_module(fullname, "
"path=None)``.  *fullname* kommer att vara ett modul- eller paketnamn, t.ex. "
"``string`` eller ``distutils.core``. :meth:`!find_module` måste returnera "
"ett laddningsobjekt som har en enda metod, ``load_module(fullname)``, som "
"skapar och returnerar motsvarande modulobjekt."

msgid ""
"Pseudo-code for Python's new import logic, therefore, looks something like "
"this (simplified a bit; see :pep:`302` for the full details)::"
msgstr ""
"Pseudokoden för Pythons nya importlogik ser därför ut ungefär så här (lite "
"förenklat; se :pep:`302` för fullständiga detaljer)::"

msgid ""
"for mp in sys.meta_path:\n"
"    loader = mp(fullname)\n"
"    if loader is not None:\n"
"        <module> = loader.load_module(fullname)\n"
"\n"
"for path in sys.path:\n"
"    for hook in sys.path_hooks:\n"
"        try:\n"
"            importer = hook(path)\n"
"        except ImportError:\n"
"            # ImportError, so try the other path hooks\n"
"            pass\n"
"        else:\n"
"            loader = importer.find_module(fullname)\n"
"            <module> = loader.load_module(fullname)\n"
"\n"
"# Not found!\n"
"raise ImportError"
msgstr ""
"för mp i sys.meta_path:\n"
"    loader = mp(fullständigt namn)\n"
"    om loader inte är None:\n"
"        <module> = loader.load_module(fullname)\n"
"\n"
"for path in sys.path:\n"
"    för hook i sys.path_hooks:\n"
"        försök:\n"
"            importer = krok(sökväg)\n"
"        except ImportError:\n"
"            # ImportError, så prova de andra sökvägskrokarna\n"
"            passera\n"
"        else:\n"
"            loader = importer.find_module(fullname)\n"
"            <module> = loader.load_module(fullständigt namn)\n"
"\n"
"# Hittades inte!\n"
"höja ImportError"

msgid ":pep:`302` - New Import Hooks"
msgstr ":pep:`302` - Nya importkrokar"

msgid ""
"Written by Just van Rossum and Paul Moore. Implemented by Just van Rossum."
msgstr ""
"Skrivet av Just van Rossum och Paul Moore. Implementerad av Just van Rossum."

msgid "PEP 305: Comma-separated Files"
msgstr "PEP 305: Kommaseparerade filer"

msgid ""
"Comma-separated files are a format frequently used for exporting data from "
"databases and spreadsheets.  Python 2.3 adds a parser for comma-separated "
"files."
msgstr ""
"Kommaseparerade filer är ett format som ofta används för att exportera data "
"från databaser och kalkylblad.  Python 2.3 lägger till en parser för "
"kommaseparerade filer."

msgid "Comma-separated format is deceptively simple at first glance::"
msgstr "Kommaseparerat format är bedrägligt enkelt vid första anblicken::"

msgid "Costs,150,200,3.95"
msgstr "Kostnader,150,200,3,95"

msgid ""
"Read a line and call ``line.split(',')``: what could be simpler? But toss in "
"string data that can contain commas, and things get more complicated::"
msgstr ""
"Läs en rad och anropa ``line.split(',')``: vad kan vara enklare? Men släng "
"in strängdata som kan innehålla kommatecken, och saker och ting blir mer "
"komplicerade::"

msgid "\"Costs\",150,200,3.95,\"Includes taxes, shipping, and sundry items\""
msgstr "\"Kostnader\",150,200,3,95,\"Inkluderar skatter, frakt och diverse\""

msgid ""
"A big ugly regular expression can parse this, but using the new  :mod:`csv` "
"package is much simpler::"
msgstr ""
"Ett stort fult reguljärt uttryck kan analysera detta, men det är mycket "
"enklare att använda det nya :mod:`csv`-paketet::"

msgid ""
"import csv\n"
"\n"
"input = open('datafile', 'rb')\n"
"reader = csv.reader(input)\n"
"for line in reader:\n"
"    print line"
msgstr ""
"import csv\n"
"\n"
"input = open('datafile', 'rb')\n"
"reader = csv.reader(input)\n"
"for line in reader:\n"
"    print line"

msgid ""
"The :func:`~csv.reader` function takes a number of different options. The "
"field separator isn't limited to the comma and can be changed to any "
"character, and so can the quoting and line-ending characters."
msgstr ""
"Funktionen :func:`~csv.reader` tar emot ett antal olika alternativ. "
"Fältavgränsaren är inte begränsad till kommatecken utan kan ändras till "
"vilket tecken som helst, och det kan även citattecken och "
"radavslutningstecken."

msgid ""
"Different dialects of comma-separated files can be defined and registered; "
"currently there are two dialects, both used by Microsoft Excel. A separate :"
"class:`csv.writer` class will generate comma-separated files from a "
"succession of tuples or lists, quoting strings that contain the delimiter."
msgstr ""
"Olika dialekter av kommaseparerade filer kan definieras och registreras; för "
"närvarande finns det två dialekter, som båda används av Microsoft Excel. En "
"separat :class:`csv.writer`-klass genererar kommaseparerade filer från en "
"följd av tupler eller listor, och citerar strängar som innehåller "
"avgränsaren."

msgid ":pep:`305` - CSV File API"
msgstr ":pep:`305` - API för CSV-filer"

msgid ""
"Written and implemented  by Kevin Altis, Dave Cole, Andrew McNamara, Skip "
"Montanaro, Cliff Wells."
msgstr ""
"Skriven och implementerad av Kevin Altis, Dave Cole, Andrew McNamara, Skip "
"Montanaro, Cliff Wells."

msgid "PEP 307: Pickle Enhancements"
msgstr "PEP 307: Pickle-förbättringar"

msgid ""
"The :mod:`pickle` and :mod:`!cPickle` modules received some attention during "
"the 2.3 development cycle.  In 2.2, new-style classes could be pickled "
"without difficulty, but they weren't pickled very compactly; :pep:`307` "
"quotes a trivial example where a new-style class results in a pickled string "
"three times longer than that for a classic class."
msgstr ""
"Modulerna :mod:`pickle` och :mod:`!cPickle` fick en del uppmärksamhet under "
"utvecklingscykeln för 2.3.  I 2.2 kunde klasser av ny typ picklas utan "
"problem, men de picklades inte särskilt kompakt; :pep:`307` citerar ett "
"trivialt exempel där en klass av ny typ resulterar i en picklad sträng som "
"är tre gånger längre än för en klassisk klass."

msgid ""
"The solution was to invent a new pickle protocol.  The :func:`pickle.dumps` "
"function has supported a text-or-binary flag  for a long time.  In 2.3, this "
"flag is redefined from a Boolean to an integer: 0 is the old text-mode "
"pickle format, 1 is the old binary format, and now 2 is a new 2.3-specific "
"format.  A new constant, :const:`pickle.HIGHEST_PROTOCOL`, can be used to "
"select the fanciest protocol available."
msgstr ""
"Lösningen var att uppfinna ett nytt pickle-protokoll.  Funktionen :func:"
"`pickle.dumps` har länge haft stöd för en text-eller-binärflagga.  I 2.3 "
"omdefinieras denna flagga från en boolesk till ett heltal: 0 är det gamla "
"pickle-formatet i textläge, 1 är det gamla binära formatet och nu är 2 ett "
"nytt 2.3-specifikt format.  En ny konstant, :const:`pickle."
"HIGHEST_PROTOCOL`, kan användas för att välja det snyggaste tillgängliga "
"protokollet."

msgid ""
"Unpickling is no longer considered a safe operation.  2.2's :mod:`pickle` "
"provided hooks for trying to prevent unsafe classes from being unpickled "
"(specifically, a :attr:`!__safe_for_unpickling__` attribute), but none of "
"this code was ever audited and therefore it's all been ripped out in 2.3.  "
"You should not unpickle untrusted data in any version of Python."
msgstr ""
"Unpickling anses inte längre vara en säker operation.  2.2:s :mod:`pickle` "
"tillhandahöll krokar för att försöka förhindra osäkra klasser från att "
"avplockas (specifikt ett :attr:`!__safe_for_unpickling__`-attribut), men "
"ingen av denna kod granskades någonsin och därför har allt tagits bort i "
"2.3.  Du bör inte unpickle otillförlitlig data i någon version av Python."

msgid ""
"To reduce the pickling overhead for new-style classes, a new interface for "
"customizing pickling was added using three special methods: :meth:`~object."
"__getstate__`, :meth:`~object.__setstate__`, and :meth:`~object."
"__getnewargs__`.  Consult :pep:`307` for the full semantics  of these "
"methods."
msgstr ""
"För att minska kostnaderna för pickling för klasser av ny typ lades ett nytt "
"gränssnitt till för att anpassa pickling med hjälp av tre specialmetoder: :"
"meth:`~object.__getstate__`, :meth:`~object.__setstate__` och :meth:`~object."
"__getnewargs__`.  Se :pep:`307` för den fullständiga semantiken för dessa "
"metoder."

msgid ""
"As a way to compress pickles yet further, it's now possible to use integer "
"codes instead of long strings to identify pickled classes. The Python "
"Software Foundation will maintain a list of standardized codes; there's also "
"a range of codes for private use.  Currently no codes have been specified."
msgstr ""
"Som ett sätt att komprimera pickles ytterligare är det nu möjligt att "
"använda heltalskoder istället för långa strängar för att identifiera "
"picklade klasser. Python Software Foundation kommer att upprätthålla en "
"lista med standardiserade koder; det finns också en rad koder för privat "
"bruk.  För närvarande har inga koder specificerats."

msgid ":pep:`307` - Extensions to the pickle protocol"
msgstr ":pep:`307` - Tillägg till pickle-protokollet"

msgid "Written and implemented  by Guido van Rossum and Tim Peters."
msgstr "Skriven och implementerad av Guido van Rossum och Tim Peters."

msgid "Extended Slices"
msgstr "Förlängda skivor"

msgid ""
"Ever since Python 1.4, the slicing syntax has supported an optional third "
"\"step\" or \"stride\" argument.  For example, these are all legal Python "
"syntax: ``L[1:10:2]``, ``L[:-1:1]``, ``L[::-1]``.  This was added to Python "
"at the request of the developers of Numerical Python, which uses the third "
"argument extensively.  However, Python's built-in list, tuple, and string "
"sequence types have never supported this feature, raising a :exc:`TypeError` "
"if you tried it. Michael Hudson contributed a patch to fix this shortcoming."
msgstr ""
"Ända sedan Python 1.4 har slicing-syntaxen haft stöd för ett valfritt tredje "
"\"step\"- eller \"stride\"-argument.  Till exempel är dessa alla lagliga "
"Python-syntaxer: ``L[1:10:2]``, ``L[:-1:1]``, ``L[::-1]``.  Detta lades till "
"i Python på begäran av utvecklarna av Numerical Python, som använder det "
"tredje argumentet i stor utsträckning.  Pythons inbyggda list-, tuple- och "
"strängsequenstyper har dock aldrig haft stöd för den här funktionen, och gav "
"upphov till ett :exc:`TypeError` om man försökte. Michael Hudson bidrog med "
"en patch för att åtgärda denna brist."

msgid ""
"For example, you can now easily extract the elements of a list that have "
"even indexes::"
msgstr ""
"Till exempel kan du nu enkelt extrahera de element i en lista som har jämna "
"index::"

msgid ""
">>> L = range(10)\n"
">>> L[::2]\n"
"[0, 2, 4, 6, 8]"
msgstr ""
">>> L = intervall(10)\n"
">>> L[::2]\n"
"[0, 2, 4, 6, 8]"

msgid ""
"Negative values also work to make a copy of the same list in reverse order::"
msgstr ""
"Negativa värden fungerar också för att göra en kopia av samma lista i omvänd "
"ordning::"

msgid ""
">>> L[::-1]\n"
"[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
msgstr ""
">>> L[::-1]\n"
"[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"

msgid "This also works for tuples, arrays, and strings::"
msgstr "Detta fungerar även för tupler, arrayer och strängar::"

msgid ""
">>> s='abcd'\n"
">>> s[::2]\n"
"'ac'\n"
">>> s[::-1]\n"
"'dcba'"
msgstr ""
">>> s='abcd'\n"
">>> s[::2]\n"
"'ac'\n"
">>> s[::-1]\n"
"'dcba'"

msgid ""
"If you have a mutable sequence such as a list or an array you can assign to "
"or delete an extended slice, but there are some differences between "
"assignment to extended and regular slices.  Assignment to a regular slice "
"can be used to change the length of the sequence::"
msgstr ""
"Om du har en föränderlig sekvens, t.ex. en lista eller en array, kan du "
"tilldela eller ta bort en extended slice, men det finns vissa skillnader "
"mellan tilldelning till extended och regular slices.  Tilldelning till en "
"vanlig skiva kan användas för att ändra längden på sekvensen::"

msgid ""
">>> a = range(3)\n"
">>> a\n"
"[0, 1, 2]\n"
">>> a[1:3] = [4, 5, 6]\n"
">>> a\n"
"[0, 4, 5, 6]"
msgstr ""
">>> a = intervall(3)\n"
">>> a\n"
"[0, 1, 2]\n"
">>> a[1:3] = [4, 5, 6]\n"
">>> a\n"
"[0, 4, 5, 6]"

msgid ""
"Extended slices aren't this flexible.  When assigning to an extended slice, "
"the list on the right hand side of the statement must contain the same "
"number of items as the slice it is replacing::"
msgstr ""
"Extended slices är inte lika flexibla.  Vid tilldelning till en utökad slice "
"måste listan på höger sida av uttalandet innehålla samma antal poster som "
"den slice den ersätter::"

msgid ""
">>> a = range(4)\n"
">>> a\n"
"[0, 1, 2, 3]\n"
">>> a[::2]\n"
"[0, 2]\n"
">>> a[::2] = [0, -1]\n"
">>> a\n"
"[0, 1, -1, 3]\n"
">>> a[::2] = [0,1,2]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in ?\n"
"ValueError: attempt to assign sequence of size 3 to extended slice of size 2"
msgstr ""
"&gt;&gt;&gt; a = intervall(4)\n"
"&gt;&gt;&gt; a\n"
"[0, 1, 2, 3]\n"
"&gt;&gt;&gt; a[::2]\n"
"[0, 2]\n"
"&gt;&gt;&gt; a[::2] = [0, -1]\n"
"&gt;&gt;&gt; a\n"
"[0, 1, -1, 3]\n"
"&gt;&gt;&gt; a[::2] = [0,1,2]\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i ?\n"
"ValueError: försök att tilldela sekvens av storlek 3 till utökad skiva av "
"storlek 2"

msgid "Deletion is more straightforward::"
msgstr "Radering är mer okomplicerat::"

msgid ""
">>> a = range(4)\n"
">>> a\n"
"[0, 1, 2, 3]\n"
">>> a[::2]\n"
"[0, 2]\n"
">>> del a[::2]\n"
">>> a\n"
"[1, 3]"
msgstr ""
">>> a = intervall(4)\n"
">>> a\n"
"[0, 1, 2, 3]\n"
">>> a[::2]\n"
"[0, 2]\n"
">>> del a[::2]\n"
">>> a\n"
"[1, 3]"

msgid ""
"One can also now pass slice objects to the :meth:`~object.__getitem__` "
"methods of the built-in sequences::"
msgstr ""
"Man kan nu också skicka slice-objekt till :meth:`~object.__getitem__`-"
"metoderna i de inbyggda sekvenserna::"

msgid ""
">>> range(10).__getitem__(slice(0, 5, 2))\n"
"[0, 2, 4]"
msgstr ""
">>> range(10).__getitem__(slice(0, 5, 2))\n"
"[0, 2, 4]"

msgid "Or use slice objects directly in subscripts::"
msgstr "Eller använd slice-objekt direkt i subscripts::"

msgid ""
">>> range(10)[slice(0, 5, 2)]\n"
"[0, 2, 4]"
msgstr ""
">>> intervall(10)[slice(0, 5, 2)]\n"
"[0, 2, 4]"

msgid ""
"To simplify implementing sequences that support extended slicing, slice "
"objects now have a method ``indices(length)`` which, given the length of a "
"sequence, returns a ``(start, stop, step)`` tuple that can be passed "
"directly to :func:`range`. :meth:`!indices` handles omitted and out-of-"
"bounds indices in a manner consistent with regular slices (and this "
"innocuous phrase hides a welter of confusing details!).  The method is "
"intended to be used like this::"
msgstr ""
"För att förenkla implementeringen av sekvenser som stöder utökad skivning "
"har slice-objekt nu en metod ``indices(length)`` som, givet längden på en "
"sekvens, returnerar en ``(start, stop, step)``-tupel som kan skickas direkt "
"till :func:`range`. :meth:`!indices` hanterar utelämnade och obegränsade "
"index på ett sätt som överensstämmer med vanliga slices (och denna oskyldiga "
"fras döljer en mängd förvirrande detaljer!)  Metoden är avsedd att användas "
"så här::"

msgid ""
"class FakeSeq:\n"
"    ...\n"
"    def calc_item(self, i):\n"
"        ...\n"
"    def __getitem__(self, item):\n"
"        if isinstance(item, slice):\n"
"            indices = item.indices(len(self))\n"
"            return FakeSeq([self.calc_item(i) for i in range(*indices)])\n"
"        else:\n"
"            return self.calc_item(i)"
msgstr ""
"klass FakeSeq:\n"
"    ...\n"
"    def calc_item(self, i):\n"
"        ...\n"
"    def __getitem__(self, item):\n"
"        if isinstance(item, slice):\n"
"            index = objekt.index(len(self))\n"
"            return FakeSeq([self.calc_item(i) for i in range(*indices)])\n"
"        annat:\n"
"            return self.calc_item(i)"

msgid ""
"From this example you can also see that the built-in :class:`slice` object "
"is now the type object for the slice type, and is no longer a function.  "
"This is consistent with Python 2.2, where :class:`int`, :class:`str`, etc., "
"underwent the same change."
msgstr ""
"Från detta exempel kan du också se att det inbyggda :class:`slice`-objektet "
"nu är typobjektet för slice-typen och inte längre är en funktion.  Detta "
"stämmer överens med Python 2.2, där :class:`int`, :class:`str`, etc. "
"genomgick samma förändring."

msgid "Other Language Changes"
msgstr "Andra språkliga förändringar"

msgid ""
"Here are all of the changes that Python 2.3 makes to the core Python "
"language."
msgstr "Här är alla ändringar som Python 2.3 gör i kärnan i Python-språket."

msgid ""
"The :keyword:`yield` statement is now always a keyword, as described in "
"section :ref:`section-generators` of this document."
msgstr ""
"Satsen :keyword:`yield` är nu alltid ett nyckelord, enligt beskrivningen i "
"avsnitt :ref:`section-generators` i detta dokument."

msgid ""
"A new built-in function :func:`enumerate` was added, as described in "
"section :ref:`section-enumerate` of this document."
msgstr ""
"En ny inbyggd funktion :func:`enumerate` lades till, som beskrivs i avsnitt :"
"ref:`section-enumerate` i detta dokument."

msgid ""
"Two new constants, :const:`True` and :const:`False` were added along with "
"the built-in :class:`bool` type, as described in section :ref:`section-bool` "
"of this document."
msgstr ""
"Två nya konstanter, :const:`True` och :const:`False` lades till tillsammans "
"med den inbyggda typen :class:`bool`, enligt beskrivningen i avsnitt :ref:"
"`section-bool` i detta dokument."

msgid ""
"The :func:`int` type constructor will now return a long integer instead of "
"raising an :exc:`OverflowError` when a string or floating-point number is "
"too large to fit into an integer.  This can lead to the paradoxical result "
"that ``isinstance(int(expression), int)`` is false, but that seems unlikely "
"to cause problems in practice."
msgstr ""
"Typkonstruktören :func:`int` returnerar nu ett långt heltal istället för att "
"ge upphov till ett :exc:`OverflowError` när en sträng eller ett flyttal är "
"för stort för att rymmas i ett heltal.  Detta kan leda till det paradoxala "
"resultatet att ``isinstance(int(expression), int)`` är falskt, men det "
"verkar osannolikt att det kommer att orsaka problem i praktiken."

msgid ""
"Built-in types now support the extended slicing syntax, as described in "
"section :ref:`section-slices` of this document."
msgstr ""
"Inbyggda typer stöder nu den utökade slicing-syntaxen, som beskrivs i "
"avsnitt :ref:`section-slices` i detta dokument."

msgid ""
"A new built-in function, ``sum(iterable, start=0)``,  adds up the numeric "
"items in the iterable object and returns their sum.  :func:`sum` only "
"accepts numbers, meaning that you can't use it to concatenate a bunch of "
"strings. (Contributed by Alex Martelli.)"
msgstr ""
"En ny inbyggd funktion, ``sum(iterable, start=0)``, adderar de numeriska "
"objekten i iterable-objektet och returnerar summan av dem. :func:`sum` "
"accepterar bara siffror, vilket innebär att du inte kan använda den för att "
"sammanfoga en massa strängar. (Bidrag från Alex Martelli.)"

msgid ""
"``list.insert(pos, value)`` used to  insert *value* at the front of the list "
"when *pos* was negative.  The behaviour has now been changed to be "
"consistent with slice indexing, so when *pos* is -1 the value will be "
"inserted before the last element, and so forth."
msgstr ""
"``list.insert(pos, value)`` brukade infoga *värde* längst fram i listan när "
"*pos* var negativ.  Beteendet har nu ändrats så att det stämmer överens med "
"slice-indexering, så när *pos* är -1 kommer värdet att infogas före det "
"sista elementet, och så vidare."

msgid ""
"``list.index(value)``, which searches for *value*  within the list and "
"returns its index, now takes optional  *start* and *stop* arguments to limit "
"the search to  only part of the list."
msgstr ""
"``list.index(value)``, som söker efter *värde* i listan och returnerar dess "
"index, tar nu valfria *start* och *stop* argument för att begränsa sökningen "
"till endast en del av listan."

msgid ""
"Dictionaries have a new method, ``pop(key[, *default*])``, that returns the "
"value corresponding to *key* and removes that key/value pair from the "
"dictionary.  If the requested key isn't present in the dictionary, *default* "
"is returned if it's specified and :exc:`KeyError` raised if it isn't. ::"
msgstr ""
"Dictionaries har en ny metod, ``pop(key[, *default*])``, som returnerar det "
"värde som motsvarar *key* och tar bort det nyckel/värde-paret från "
"dictionaryn.  Om den begärda nyckeln inte finns i ordboken returneras "
"*default* om den är specificerad och :exc:`KeyError` om den inte är det. ::"

msgid ""
">>> d = {1:2}\n"
">>> d\n"
"{1: 2}\n"
">>> d.pop(4)\n"
"Traceback (most recent call last):\n"
"  File \"stdin\", line 1, in ?\n"
"KeyError: 4\n"
">>> d.pop(1)\n"
"2\n"
">>> d.pop(1)\n"
"Traceback (most recent call last):\n"
"  File \"stdin\", line 1, in ?\n"
"KeyError: 'pop(): dictionary is empty'\n"
">>> d\n"
"{}\n"
">>>"
msgstr ""
">>> d = {1:2}\n"
">>> d\n"
"{1: 2}\n"
">>> d.pop(4)\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"stdin\", rad 1, i ?\n"
"NyckelFel: 4\n"
">>> d.pop(1)\n"
"2\n"
">>> d.pop(1)\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"stdin\", rad 1, i ?\n"
"KeyError: 'pop(): ordlistan är tom'\n"
">>> d\n"
"{}\n"
">>>"

msgid ""
"There's also a new class method,  ``dict.fromkeys(iterable, value)``, that "
"creates a dictionary with keys taken from the supplied iterator *iterable* "
"and all values set to *value*, defaulting to ``None``."
msgstr ""
"Det finns också en ny klassmetod, ``dict.fromkeys(iterable, value)``, som "
"skapar en ordbok med nycklar som hämtas från den medföljande iteratorn "
"*iterable* och alla värden sätts till *value*, med standardvärdet ``None``."

msgid "(Patches contributed by Raymond Hettinger.)"
msgstr "(Lapparna har tillhandahållits av Raymond Hettinger.)"

msgid ""
"Also, the :func:`dict` constructor now accepts keyword arguments to simplify "
"creating small dictionaries::"
msgstr ""
"Dessutom accepterar :func:`dict`-konstruktören nu nyckelordsargument för att "
"förenkla skapandet av små ordböcker::"

msgid ""
">>> dict(red=1, blue=2, green=3, black=4)\n"
"{'blue': 2, 'black': 4, 'green': 3, 'red': 1}"
msgstr ""
">>> dict(röd=1, blå=2, grön=3, svart=4)\n"
"{\"blå\": 2, \"svart\": 4, 'grön': 3, 'röd': 1}"

msgid "(Contributed by Just van Rossum.)"
msgstr "(Bidrag från Just van Rossum.)"

msgid ""
"The :keyword:`assert` statement no longer checks the ``__debug__`` flag, so "
"you can no longer disable assertions by assigning to ``__debug__``. Running "
"Python with the :option:`-O` switch will still generate code that doesn't "
"execute any assertions."
msgstr ""
"Satsen :keyword:`assert` kontrollerar inte längre flaggan ``__debug__``, så "
"du kan inte längre inaktivera påståenden genom att tilldela till "
"``__debug__``. Att köra Python med :option:`-O` kommer fortfarande att "
"generera kod som inte utför några assertions."

msgid ""
"Most type objects are now callable, so you can use them to create new "
"objects such as functions, classes, and modules.  (This means that the :mod:"
"`!new` module can be deprecated in a future Python version, because you can "
"now use the type objects available in the :mod:`types` module.) For example, "
"you can create a new module object with the following code:"
msgstr ""
"De flesta typobjekt är nu anropsbara, så att du kan använda dem för att "
"skapa nya objekt som funktioner, klasser och moduler.  (Detta innebär att "
"modulen :mod:`!new` kan tas bort i en framtida Python-version, eftersom du "
"nu kan använda de typobjekt som finns i modulen :mod:`types`) Du kan till "
"exempel skapa ett nytt modulobjekt med följande kod:"

msgid ""
">>> import types\n"
">>> m = types.ModuleType('abc','docstring')\n"
">>> m\n"
"<module 'abc' (built-in)>\n"
">>> m.__doc__\n"
"'docstring'"
msgstr ""
">>> import typer\n"
">>> m = types.ModuleType('abc','docstring')\n"
">>> m\n"
"<modul 'abc' (inbyggd)>\n"
">>> m.__doc__\n"
"'docstring'"

msgid ""
"A new warning, :exc:`PendingDeprecationWarning` was added to indicate "
"features which are in the process of being deprecated.  The warning will "
"*not* be printed by default.  To check for use of features that will be "
"deprecated in the future, supply :option:`-Walways::"
"PendingDeprecationWarning:: <-W>` on the command line or use :func:`warnings."
"filterwarnings`."
msgstr ""
"En ny varning, :exc:`PendingDeprecationWarning`, har lagts till för att "
"indikera funktioner som håller på att bli föråldrade.  Varningen kommer "
"*inte* att skrivas ut som standard.  För att kontrollera om funktioner som "
"kommer att föråldras används i framtiden, ange :option:`-Walways::"
"PendingDeprecationWarning:: <-W>` på kommandoraden eller använd :func:"
"`warnings.filterwarnings`."

msgid ""
"The process of deprecating string-based exceptions, as in ``raise \"Error "
"occurred\"``, has begun.  Raising a string will now trigger :exc:"
"`PendingDeprecationWarning`."
msgstr ""
"Processen med att avskriva strängbaserade undantag, som i ``raise \"Error "
"occurred\"``, har börjat.  Om en sträng anges kommer den nu att utlösa :exc:"
"`PendingDeprecationWarning`."

msgid ""
"Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning` "
"warning.  In a future version of Python, ``None`` may finally become a "
"keyword."
msgstr ""
"Att använda ``None`` som variabelnamn kommer nu att resultera i en :exc:"
"`SyntaxWarning`-varning.  I en framtida version av Python kan ``None`` "
"äntligen bli ett nyckelord."

msgid ""
"The :meth:`!xreadlines` method of file objects, introduced in Python 2.1, is "
"no longer necessary because files now behave as their own iterator. :meth:`!"
"xreadlines` was originally introduced as a faster way to loop over all the "
"lines in a file, but now you can simply write ``for line in file_obj``. File "
"objects also have a new read-only :attr:`!encoding` attribute that gives the "
"encoding used by the file; Unicode strings written to the file will be "
"automatically  converted to bytes using the given encoding."
msgstr ""
"Metoden :meth:`!xreadlines` för filobjekt, som introducerades i Python 2.1, "
"är inte längre nödvändig eftersom filer nu beter sig som sin egen iterator. :"
"meth:`!xreadlines` introducerades ursprungligen som ett snabbare sätt att "
"loopa över alla rader i en fil, men nu kan du helt enkelt skriva ``for line "
"in file_obj``. Filobjekt har också ett nytt skrivskyddat attribut :attr:`!"
"encoding` som anger den kodning som används av filen; Unicode-strängar som "
"skrivs till filen konverteras automatiskt till bytes med den angivna "
"kodningen."

msgid ""
"The method resolution order used by new-style classes has changed, though "
"you'll only notice the difference if you have a really complicated "
"inheritance hierarchy.  Classic classes are unaffected by this change.  "
"Python 2.2 originally used a topological sort of a class's ancestors, but "
"2.3 now uses the C3 algorithm as described in the paper `\"A Monotonic "
"Superclass Linearization for Dylan\" <https://citeseerx.ist.psu.edu/viewdoc/"
"summary?doi=10.1.1.19.3910>`_. To understand the motivation for this "
"change,  read Michele Simionato's article :ref:`python_2.3_mro`, or read the "
"thread on python-dev starting with the message at https://mail.python.org/"
"pipermail/python-dev/2002-October/029035.html. Samuele Pedroni first pointed "
"out the problem and also implemented the fix by coding the C3 algorithm."
msgstr ""
"Den metodupplösningsordning som används av new-style klasser har ändrats, "
"men du kommer bara att märka skillnaden om du har en riktigt komplicerad "
"arvshierarki.  Klassiska klasser påverkas inte av denna förändring.  Python "
"2.2 använde ursprungligen en topologisk sortering av en klass förfäder, men "
"2.3 använder nu C3-algoritmen som beskrivs i dokumentet `\"A Monotonic "
"Superclass Linearization for Dylan\" <https://citeseerx.ist.psu.edu/viewdoc/"
"summary?doi=10.1.1.19.3910>`_. För att förstå motivationen för denna "
"förändring, läs Michele Simionatos artikel :ref:`python_2.3_mro`, eller läs "
"tråden på python-dev som börjar med meddelandet på https://mail.python.org/"
"pipermail/python-dev/2002-October/029035.html. Samuele Pedroni påpekade "
"först problemet och implementerade också lösningen genom att koda C3-"
"algoritmen."

msgid ""
"Python runs multithreaded programs by switching between threads after "
"executing N bytecodes.  The default value for N has been increased from 10 "
"to 100 bytecodes, speeding up single-threaded applications by reducing the "
"switching overhead.  Some multithreaded applications may suffer slower "
"response time, but that's easily fixed by setting the limit back to a lower "
"number using ``sys.setcheckinterval(N)``. The limit can be retrieved with "
"the new :func:`!sys.getcheckinterval` function."
msgstr ""
"Python kör flertrådade program genom att växla mellan trådar efter att N "
"bytekoder har exekverats.  Standardvärdet för N har ökats från 10 till 100 "
"bytekoder, vilket snabbar upp enkeltrådade applikationer genom att minska "
"växlingsomkostnaderna.  Vissa flertrådade program kan få långsammare "
"svarstid, men det är lätt att åtgärda genom att sätta tillbaka gränsen till "
"ett lägre värde med hjälp av ``sys.setcheckinterval(N)``. Gränsen kan hämtas "
"med den nya funktionen :func:`!sys.getcheckinterval`."

msgid ""
"One minor but far-reaching change is that the names of extension types "
"defined by the modules included with Python now contain the module and a "
"``'.'`` in front of the type name.  For example, in Python 2.2, if you "
"created a socket and printed its :attr:`!__class__`, you'd get this output::"
msgstr ""
"En mindre men långtgående förändring är att namnen på tilläggstyper som "
"definieras av de moduler som ingår i Python nu innehåller modulen och en "
"``'.'`` framför typnamnet.  Om du till exempel i Python 2.2 skapade en "
"socket och skrev ut dess :attr:`!__class__`, skulle du få följande resultat::"

msgid ""
">>> s = socket.socket()\n"
">>> s.__class__\n"
"<type 'socket'>"
msgstr ""
">>> s = socket.socket()\n"
">>> s.__class__\n"
"<typ 'socket'>"

msgid "In 2.3, you get this::"
msgstr "I 2.3 får du detta::"

msgid ""
">>> s.__class__\n"
"<type '_socket.socket'>"
msgstr ""
">>> s.__class__\n"
"<typ '_socket.socket'>"

msgid ""
"One of the noted incompatibilities between old- and new-style classes has "
"been removed: you can now assign to the :attr:`~type.__name__` and :attr:"
"`~type.__bases__` attributes of new-style classes.  There are some "
"restrictions on what can be assigned to :attr:`!__bases__` along the lines "
"of those relating to assigning to an instance's :attr:`~object.__class__` "
"attribute."
msgstr ""
"En av de noterade inkompatibiliteterna mellan gamla och nya klasser har "
"tagits bort: du kan nu tilldela attributen :attr:`~type.__name__` och :attr:"
"`~type.__bases__` till nya klasser.  Det finns vissa restriktioner för vad "
"som kan tilldelas :attr:`!__bases__` i linje med de som gäller för att "
"tilldela en instans attribut :attr:`~object.__class__`."

msgid "String Changes"
msgstr "Strängförändringar"

msgid ""
"The :keyword:`in` operator now works differently for strings. Previously, "
"when evaluating ``X in Y`` where *X* and *Y* are strings, *X* could only be "
"a single character. That's now changed; *X* can be a string of any length, "
"and ``X in Y`` will return :const:`True` if *X* is a substring of *Y*.  If "
"*X* is the empty string, the result is always :const:`True`. ::"
msgstr ""
"Operatorn :keyword:`in` fungerar nu annorlunda för strängar. Tidigare kunde "
"*X* bara vara ett enda tecken vid utvärdering av ``X in Y`` där *X* och *Y* "
"är strängar. Det har nu ändrats; *X* kan vara en sträng av valfri längd, och "
"``X in Y`` returnerar :const:`True` om *X* är en delsträng av *Y*.  Om *X* "
"är den tomma strängen är resultatet alltid :const:`True`. ::"

msgid ""
">>> 'ab' in 'abcd'\n"
"True\n"
">>> 'ad' in 'abcd'\n"
"False\n"
">>> '' in 'abcd'\n"
"True"
msgstr ""
">>> 'ab' i 'abcd'\n"
"Sant\n"
">>> 'ad' i 'abcd'\n"
"Falsk\n"
">>> '' i 'abcd'\n"
"Sant"

msgid ""
"Note that this doesn't tell you where the substring starts; if you need that "
"information, use the :meth:`~str.find` string method."
msgstr ""
"Observera att detta inte berättar var delsträngen börjar; om du behöver den "
"informationen använder du strängmetoden :meth:`~str.find`."

msgid ""
"The :meth:`~str.strip`, :meth:`~str.lstrip`, and :meth:`~str.rstrip` string "
"methods now have an optional argument for specifying the characters to "
"strip.  The default is still to remove all whitespace characters::"
msgstr ""
"Strängmetoderna :meth:`~str.strip`, :meth:`~str.lstrip` och :meth:`~str."
"rstrip` har nu ett valfritt argument för att ange vilka tecken som ska tas "
"bort.  Standardinställningen är fortfarande att ta bort alla "
"blankstegstecken::"

msgid ""
">>> '   abc '.strip()\n"
"'abc'\n"
">>> '><><abc<><><>'.strip('<>')\n"
"'abc'\n"
">>> '><><abc<><><>\\n'.strip('<>')\n"
"'abc<><><>\\n'\n"
">>> u'\\u4000\\u4001abc\\u4000'.strip(u'\\u4000')\n"
"u'\\u4001abc'\n"
">>>"
msgstr ""
">>> ' abc '.strip()\n"
"'abc'\n"
">>> '><><abc<><><>'.strip('<>')\n"
"'abc'\n"
">>> '><><abc<><><>\\n'.strip('<>')\n"
"'abc<><><>\\n'\n"
">>> u'\\u4000\\u4001abc\\u4000'.strip(u'\\u4000')\n"
"u'\\u4001abc'\n"
">>>"

msgid "(Suggested by Simon Brunning and implemented by Walter Dörwald.)"
msgstr "(Föreslagen av Simon Brunning och implementerad av Walter Dörwald.)"

msgid ""
"The :meth:`~str.startswith` and :meth:`~str.endswith` string methods now "
"accept negative numbers for the *start* and *end* parameters."
msgstr ""
"Strängmetoderna :meth:`~str.startswith` och :meth:`~str.endswith` accepterar "
"nu negativa tal för parametrarna *start* och *end*."

msgid ""
"Another new string method is :meth:`~str.zfill`, originally a function in "
"the :mod:`string` module.  :meth:`~str.zfill` pads a numeric string with "
"zeros on the left until it's the specified width. Note that the ``%`` "
"operator is still more flexible and powerful than :meth:`~str.zfill`. ::"
msgstr ""
"En annan ny strängmetod är :meth:`~str.zfill`, som ursprungligen var en "
"funktion i modulen :mod:`string`. :meth:`~str.zfill` fyller en numerisk "
"sträng med nollor till vänster tills den har den angivna bredden. Observera "
"att operatorn ``%`` fortfarande är mer flexibel och kraftfull än :meth:`~str."
"zfill`. ::"

msgid ""
">>> '45'.zfill(4)\n"
"'0045'\n"
">>> '12345'.zfill(4)\n"
"'12345'\n"
">>> 'goofy'.zfill(6)\n"
"'0goofy'"
msgstr ""
">>> '45'.zfill(4)\n"
"'0045'\n"
">>> '12345'.zfill(4)\n"
"'12345'\n"
">>> 'goofy'.zfill(6)\n"
"'0goofy'"

msgid "(Contributed by Walter Dörwald.)"
msgstr "(Bidrag från Walter Dörwald.)"

msgid ""
"A new type object, :class:`!basestring`, has been added. Both 8-bit strings "
"and Unicode strings inherit from this type, so ``isinstance(obj, "
"basestring)`` will return :const:`True` for either kind of string.  It's a "
"completely abstract type, so you can't create :class:`!basestring` instances."
msgstr ""
"En ny typ av objekt, :class:`!basestring`, har lagts till. Både 8-bitars "
"strängar och Unicode-strängar ärver från den här typen, så ``isinstance(obj, "
"basestring)`` kommer att returnera :const:`True` för båda typerna av "
"strängar.  Det är en helt abstrakt typ, så du kan inte skapa :class:`!"
"basestring`-instanser."

msgid ""
"Interned strings are no longer immortal and will now be garbage-collected in "
"the usual way when the only reference to them is from the internal "
"dictionary of interned strings.  (Implemented by Oren Tirosh.)"
msgstr ""
"Internerade strängar är inte längre odödliga och kommer nu att samlas in på "
"vanligt sätt när den enda referensen till dem är från den interna ordlistan "
"över internerade strängar.  (Implementerad av Oren Tirosh.)"

msgid "Optimizations"
msgstr "Optimeringar"

msgid ""
"The creation of new-style class instances has been made much faster; they're "
"now faster than classic classes!"
msgstr ""
"Skapandet av nya klassinstanser har gjorts mycket snabbare; de är nu "
"snabbare än klassiska klasser!"

msgid ""
"The :meth:`~list.sort` method of list objects has been extensively rewritten "
"by Tim Peters, and the implementation is significantly faster."
msgstr ""
"Metoden :meth:`~list.sort` för listobjekt har skrivits om i stor "
"utsträckning av Tim Peters, och implementeringen är betydligt snabbare."

msgid ""
"Multiplication of large long integers is now much faster thanks to an "
"implementation of Karatsuba multiplication, an algorithm that scales better "
"than the *O*\\ (*n*\\ :sup:`2`) required for the grade-school multiplication "
"algorithm.  (Original patch by Christopher A. Craig, and significantly "
"reworked by Tim Peters.)"
msgstr ""
"Multiplikation av stora långa heltal är nu mycket snabbare tack vare en "
"implementering av Karatsuba-multiplikation, en algoritm som skalar bättre än "
"*O*\\ (*n*\\ :sup:`2`) som krävs för grundskolans multiplikationsalgoritm.  "
"(Ursprunglig patch av Christopher A. Craig, och väsentligt omarbetad av Tim "
"Peters)"

msgid ""
"The ``SET_LINENO`` opcode is now gone.  This may provide a small speed "
"increase, depending on your compiler's idiosyncrasies. See section :ref:"
"`23section-other` for a longer explanation. (Removed by Michael Hudson.)"
msgstr ""
"Opkoden ``SET_LINENO`` är nu borta.  Detta kan ge en liten hastighetsökning, "
"beroende på din kompilators idiosynkrasier. Se avsnitt :ref:`23section-"
"other` för en längre förklaring. (Borttagen av Michael Hudson.)"

msgid ""
":func:`!xrange` objects now have their own iterator, making ``for i in "
"xrange(n)`` slightly faster than ``for i in range(n)``.  (Patch by Raymond "
"Hettinger.)"
msgstr ""
":func:`!xrange`-objekt har nu sin egen iterator, vilket gör ``for i in "
"xrange(n)`` något snabbare än ``for i in range(n)``.  (Patch av Raymond "
"Hettinger.)"

msgid ""
"A number of small rearrangements have been made in various hotspots to "
"improve performance, such as inlining a function or removing some code.  "
"(Implemented mostly by GvR, but lots of people have contributed single "
"changes.)"
msgstr ""
"Ett antal små omarrangemang har gjorts i olika hotspots för att förbättra "
"prestandan, t.ex. inlining av en funktion eller borttagning av viss kod.  "
"(Implementerat mestadels av GvR, men många människor har bidragit med "
"enskilda ändringar)"

msgid ""
"The net result of the 2.3 optimizations is that Python 2.3 runs the  pystone "
"benchmark around 25% faster than Python 2.2."
msgstr ""
"Nettoresultatet av 2.3-optimeringarna är att Python 2.3 kör pystone-"
"riktmärket cirka 25% fsnabbare än Python 2.2."

msgid "New, Improved, and Deprecated Modules"
msgstr "Nya, förbättrade och utfasade moduler"

msgid ""
"As usual, Python's standard library received a number of enhancements and "
"bug fixes.  Here's a partial list of the most notable changes, sorted "
"alphabetically by module name. Consult the :file:`Misc/NEWS` file in the "
"source tree for a more complete list of changes, or look through the CVS "
"logs for all the details."
msgstr ""
"Som vanligt fick Pythons standardbibliotek ett antal förbättringar och "
"buggfixar.  Här är en partiell lista över de mest anmärkningsvärda "
"ändringarna, sorterade alfabetiskt efter modulnamn. Se filen :file:`Misc/"
"NEWS` i källträdet för en mer komplett lista över ändringar, eller titta "
"igenom CVS-loggarna för alla detaljer."

msgid ""
"The :mod:`array` module now supports arrays of Unicode characters using the "
"``'u'`` format character.  Arrays also now support using the ``+=`` "
"assignment operator to add another array's contents, and the ``*=`` "
"assignment operator to repeat an array. (Contributed by Jason Orendorff.)"
msgstr ""
"Modulen :mod:`array` har nu stöd för matriser med Unicode-tecken som "
"använder formattecknet ``'u'``.  Arrayer stöder nu också användning av "
"tilldelningsoperatorn ``+=`` för att lägga till innehållet i en annan array "
"och tilldelningsoperatorn ``*=`` för att upprepa en array. (Bidrag från "
"Jason Orendorff.)"

msgid ""
"The :mod:`!bsddb` module has been replaced by version 4.1.6 of the `PyBSDDB "
"<https://pybsddb.sourceforge.net>`_ package, providing a more complete "
"interface to the transactional features of the BerkeleyDB library."
msgstr ""
"Modulen :mod:`!bsddb` har ersatts av version 4.1.6 av paketet `PyBSDDB "
"<https://pybsddb.sourceforge.net>`_, vilket ger ett mer komplett gränssnitt "
"till transaktionsfunktionerna i BerkeleyDB-biblioteket."

msgid ""
"The old version of the module has been renamed to  :mod:`!bsddb185` and is "
"no longer built automatically; you'll  have to edit :file:`Modules/Setup` to "
"enable it.  Note that the new :mod:`!bsddb` package is intended to be "
"compatible with the  old module, so be sure to file bugs if you discover any "
"incompatibilities. When upgrading to Python 2.3, if the new interpreter is "
"compiled with a new version of  the underlying BerkeleyDB library, you will "
"almost certainly have to convert your database files to the new version.  "
"You can do this fairly easily with the new scripts :file:`db2pickle.py` and :"
"file:`pickle2db.py` which you will find in the distribution's :file:`Tools/"
"scripts` directory.  If you've already been using the PyBSDDB package and "
"importing it as :mod:`!bsddb3`, you will have to change your ``import`` "
"statements to import it as :mod:`!bsddb`."
msgstr ""
"Den gamla versionen av modulen har bytt namn till :mod:`!bsddb185` och byggs "
"inte längre automatiskt; du måste redigera :file:`Modules/Setup` för att "
"aktivera den.  Observera att det nya :mod:`!bsddb`-paketet är avsett att "
"vara kompatibelt med den gamla modulen, så var noga med att rapportera "
"buggar om du upptäcker några inkompatibiliteter. När du uppgraderar till "
"Python 2.3, om den nya tolken är kompilerad med en ny version av det "
"underliggande BerkeleyDB-biblioteket, kommer du nästan säkert att behöva "
"konvertera dina databasfiler till den nya versionen.  Du kan göra detta "
"ganska enkelt med de nya skripten :file:`db2pickle.py` och :file:`pickle2db."
"py` som du hittar i distributionens katalog :file:`Tools/scripts`.  Om du "
"redan har använt PyBSDDB-paketet och importerat det som :mod:`!bsddb3`, "
"måste du ändra dina ``import``-satser så att du importerar det som :mod:`!"
"bsddb`."

msgid ""
"The new :mod:`bz2` module is an interface to the bz2 data compression "
"library. bz2-compressed data is usually smaller than  corresponding :mod:"
"`zlib`\\ -compressed data. (Contributed by Gustavo Niemeyer.)"
msgstr ""
"Den nya modulen :mod:`bz2` är ett gränssnitt till "
"datakomprimeringsbiblioteket bz2. bz2-komprimerad data är vanligtvis mindre "
"än motsvarande :mod:`zlib`-komprimerad data. (Bidrag från Gustavo Niemeyer.)"

msgid ""
"A set of standard date/time types has been added in the new :mod:`datetime` "
"module.  See the following section for more details."
msgstr ""
"En uppsättning standardtyper för datum/tid har lagts till i den nya modulen :"
"mod:`datetime`.  Se följande avsnitt för mer information."

msgid ""
"The Distutils :class:`!Extension` class now supports an extra constructor "
"argument named *depends* for listing additional source files that an "
"extension depends on.  This lets Distutils recompile the module if any of "
"the dependency files are modified.  For example, if :file:`sampmodule.c` "
"includes the header file :file:`sample.h`, you would create the :class:`!"
"Extension` object like this::"
msgstr ""
"Klassen Distutils :class:`!Extension` stöder nu ett extra "
"konstruktörsargument med namnet *depends* för att lista ytterligare "
"källfiler som ett tillägg är beroende av.  Detta låter Distutils kompilera "
"om modulen om någon av de beroende filerna ändras.  Om till exempel :file:"
"`sampmodule.c` innehåller header-filen :file:`sample.h`, skulle du skapa :"
"class:`!Extension`-objektet så här::"

msgid ""
"ext = Extension(\"samp\",\n"
"                sources=[\"sampmodule.c\"],\n"
"                depends=[\"sample.h\"])"
msgstr ""
"ext = Extension(\"samp\",\n"
"                sources=[\"sampmodule.c\"],\n"
"                depends=[\"sample.h\"])"

msgid ""
"Modifying :file:`sample.h` would then cause the module to be recompiled. "
"(Contributed by Jeremy Hylton.)"
msgstr ""
"Modifiering av :file:`sample.h` skulle då leda till att modulen kompileras "
"om. (Bidrag från Jeremy Hylton.)"

msgid ""
"Other minor changes to Distutils: it now checks for the :envvar:`CC`, :"
"envvar:`CFLAGS`, :envvar:`!CPP`, :envvar:`LDFLAGS`, and :envvar:`CPPFLAGS` "
"environment variables, using them to override the settings in Python's "
"configuration (contributed by Robert Weber)."
msgstr ""
"Andra mindre ändringar i Distutils: det kontrollerar nu för "
"miljövariablerna :envvar:`CC`, :envvar:`CFLAGS`, :envvar:`!CPP`, :envvar:"
"`LDFLAGS` och :envvar:`CPPFLAGS`, och använder dem för att åsidosätta "
"inställningarna i Pythons konfiguration (bidrag från Robert Weber)."

msgid ""
"Previously the :mod:`doctest` module would only search the docstrings of "
"public methods and functions for test cases, but it now also examines "
"private ones as well.  The :func:`~doctest.DocTestSuite` function creates a :"
"class:`unittest.TestSuite` object from a set of :mod:`doctest` tests."
msgstr ""
"Tidigare sökte modulen :mod:`doctest` bara efter testfall i "
"dokumentsträngarna för offentliga metoder och funktioner, men nu undersöker "
"den även privata metoder och funktioner.  Funktionen :func:`~doctest."
"DocTestSuite` skapar ett :class:`unittest.TestSuite`-objekt från en "
"uppsättning :mod:`doctest`-tester."

msgid ""
"The new ``gc.get_referents(object)`` function returns a list of all the "
"objects referenced by *object*."
msgstr ""
"Den nya funktionen ``gc.get_referents(object)`` returnerar en lista över "
"alla objekt som refereras till av *object*."

msgid ""
"The :mod:`getopt` module gained a new function, :func:`~getopt.gnu_getopt`, "
"that supports the same arguments as the existing :func:`~getopt.getopt` "
"function but uses GNU-style scanning mode. The existing :func:`~getopt."
"getopt` stops processing options as soon as a non-option argument is "
"encountered, but in GNU-style mode processing continues, meaning that "
"options and arguments can be mixed.  For example::"
msgstr ""
"Modulen :mod:`getopt` har fått en ny funktion, :func:`~getopt.gnu_getopt`, "
"som stöder samma argument som den befintliga funktionen :func:`~getopt."
"getopt` men som använder GNU-stils skanningsläge. Den befintliga :func:"
"`~getopt.getopt` slutar bearbeta alternativ så snart ett argument som inte "
"är ett alternativ påträffas, men i GNU-stil fortsätter bearbetningen, vilket "
"innebär att alternativ och argument kan blandas.  Till exempel::"

msgid ""
">>> getopt.getopt(['-f', 'filename', 'output', '-v'], 'f:v')\n"
"([('-f', 'filename')], ['output', '-v'])\n"
">>> getopt.gnu_getopt(['-f', 'filename', 'output', '-v'], 'f:v')\n"
"([('-f', 'filename'), ('-v', '')], ['output'])"
msgstr ""
">>> getopt.getopt(['-f', 'filnamn', 'output', '-v'], 'f:v')\n"
"([('-f', 'filnamn')], ['output', '-v'])\n"
">>> getopt.gnu_getopt(['-f', 'filnamn', 'utdata', '-v'], 'f:v')\n"
"([('-f', 'filnamn'), ('-v', '')], ['utdata'])"

msgid "(Contributed by Peter Åstrand.)"
msgstr "(Bidrag från Peter Åstrand.)"

msgid ""
"The :mod:`grp`, :mod:`pwd`, and :mod:`resource` modules now return enhanced "
"tuples::"
msgstr ""
"Modulerna :mod:`grp`, :mod:`pwd` och :mod:`resource` returnerar nu "
"förbättrade tuples::"

msgid ""
">>> import grp\n"
">>> g = grp.getgrnam('amk')\n"
">>> g.gr_name, g.gr_gid\n"
"('amk', 500)"
msgstr ""
">>> import grp\n"
">>> g = grp.getgrnam('amk')\n"
">>> g.gr_namn, g.gr_gid\n"
"('amk', 500)"

msgid "The :mod:`gzip` module can now handle files exceeding 2 GiB."
msgstr "Modulen :mod:`gzip` kan nu hantera filer som överstiger 2 GiB."

msgid ""
"The new :mod:`heapq` module contains an implementation of a heap queue "
"algorithm.  A heap is an array-like data structure that keeps items in a "
"partially sorted order such that, for every index *k*, ``heap[k] <= "
"heap[2*k+1]`` and ``heap[k] <= heap[2*k+2]``.  This makes it quick to remove "
"the smallest item, and inserting a new item while maintaining the heap "
"property is *O*\\ (log *n*).  (See https://xlinux.nist.gov/dads//HTML/"
"priorityque.html for more information about the priority queue data "
"structure.)"
msgstr ""
"Den nya modulen :mod:`heapq` innehåller en implementation av en heap-"
"köalgoritm.  En heap är en array-liknande datastruktur som håller objekt i "
"en delvis sorterad ordning så att, för varje index *k*, ``heap[k] <= "
"heap[2*k+1]`` och ``heap[k] <= heap[2*k+2]``.  Detta gör att det går snabbt "
"att ta bort det minsta objektet, och att infoga ett nytt objekt samtidigt "
"som heap-egenskapen bibehålls är *O*\\ (log *n*).  (Se https://xlinux.nist."
"gov/dads//HTML/priorityque.html för mer information om datastrukturen för "
"prioritetsköer)"

msgid ""
"The :mod:`heapq` module provides :func:`~heapq.heappush` and :func:`~heapq."
"heappop` functions for adding and removing items while maintaining the heap "
"property on top of some other mutable Python sequence type.  Here's an "
"example that uses a Python list::"
msgstr ""
"Modulen :mod:`heapq` tillhandahåller funktionerna :func:`~heapq.heappush` "
"och :func:`~heapq.heappop` för att lägga till och ta bort objekt samtidigt "
"som heap-egenskapen bibehålls ovanpå någon annan föränderlig Python-"
"sekvenstyp.  Här är ett exempel som använder en Python-lista::"

msgid ""
">>> import heapq\n"
">>> heap = []\n"
">>> for item in [3, 7, 5, 11, 1]:\n"
"...    heapq.heappush(heap, item)\n"
"...\n"
">>> heap\n"
"[1, 3, 5, 11, 7]\n"
">>> heapq.heappop(heap)\n"
"1\n"
">>> heapq.heappop(heap)\n"
"3\n"
">>> heap\n"
"[5, 7, 11]"
msgstr ""
">>> import heapq\n"
">>> heap = []\n"
">>> för objekt i [3, 7, 5, 11, 1]:\n"
"... heapq.heappush(heap, objekt)\n"
"...\n"
">>> heap\n"
"[1, 3, 5, 11, 7]\n"
">>> heapq.heappop(heap)\n"
"1\n"
">>> heapq.heappop(heap)\n"
"3\n"
">>> heap\n"
"[5, 7, 11]"

msgid "(Contributed by Kevin O'Connor.)"
msgstr "(Bidrag från Kevin O'Connor.)"

msgid ""
"The IDLE integrated development environment has been updated using the code "
"from the IDLEfork project (https://idlefork.sourceforge.net).  The most "
"notable feature is that the code being developed is now executed in a "
"subprocess, meaning that there's no longer any need for manual ``reload()`` "
"operations. IDLE's core code has been incorporated into the standard library "
"as the :mod:`idlelib` package."
msgstr ""
"Den integrerade utvecklingsmiljön IDLE har uppdaterats med hjälp av koden "
"från IDLEfork-projektet (https://idlefork.sourceforge.net).  Den mest "
"anmärkningsvärda funktionen är att koden som utvecklas nu körs i en "
"underprocess, vilket innebär att det inte längre finns något behov av "
"manuella ``reload()``-operationer. IDLE:s kärnkod har införlivats i "
"standardbiblioteket som paketet :mod:`idlelib`."

msgid ""
"The :mod:`imaplib` module now supports IMAP over SSL. (Contributed by Piers "
"Lauder and Tino Lange.)"
msgstr ""
"Modulen :mod:`imaplib` har nu stöd för IMAP över SSL. (Bidrag från Piers "
"Lauder och Tino Lange.)"

msgid ""
"The :mod:`itertools` contains a number of useful functions for use with "
"iterators, inspired by various functions provided by the ML and Haskell "
"languages.  For example, ``itertools.ifilter(predicate, iterator)`` returns "
"all elements in the iterator for which the function :func:`!predicate` "
"returns :const:`True`, and ``itertools.repeat(obj, N)`` returns ``obj`` *N* "
"times. There are a number of other functions in the module; see the "
"package's reference documentation for details. (Contributed by Raymond "
"Hettinger.)"
msgstr ""
":mod:`itertools` innehåller ett antal användbara funktioner för användning "
"med iteratorer, inspirerade av olika funktioner som tillhandahålls av "
"språken ML och Haskell.  Till exempel returnerar ``itertools."
"ifilter(predicate, iterator)`` alla element i iteratorn för vilka "
"funktionen :func:`!predicate` returnerar :const:`True`, och ``itertools."
"repeat(obj, N)`` returnerar ``obj`` *N* gånger. Det finns ett antal andra "
"funktioner i modulen; se paketets referensdokumentation för detaljer. "
"(Bidrag från Raymond Hettinger.)"

msgid ""
"Two new functions in the :mod:`math` module, ``degrees(rads)`` and "
"``radians(degs)``, convert between radians and degrees.  Other functions in "
"the :mod:`math` module such as :func:`math.sin` and :func:`math.cos` have "
"always required input values measured in radians.  Also, an optional *base* "
"argument was added to :func:`math.log` to make it easier to compute "
"logarithms for bases other than ``e`` and ``10``.  (Contributed by Raymond "
"Hettinger.)"
msgstr ""
"Två nya funktioner i modulen :mod:`math`, ``degrees(rads)`` och "
"``radians(degs)``, konverterar mellan radianer och grader.  Andra funktioner "
"i modulen :mod:`math`, t.ex. :func:`math.sin` och :func:`math.cos`, har "
"alltid krävt ingångsvärden som mätts i radianer.  Dessutom lades ett "
"valfritt *base*-argument till i :func:`math.log` för att göra det enklare "
"att beräkna logaritmer för andra baser än ``e`` och ``10``.  (Bidrag från "
"Raymond Hettinger.)"

msgid ""
"Several new POSIX functions (:func:`!getpgid`, :func:`!killpg`, :func:`!"
"lchown`, :func:`!loadavg`, :func:`!major`, :func:`!makedev`, :func:`!minor`, "
"and :func:`!mknod`) were added to the :mod:`posix` module that underlies "
"the :mod:`os` module. (Contributed by Gustavo Niemeyer, Geert Jansen, and "
"Denis S. Otkidach.)"
msgstr ""
"Flera nya POSIX-funktioner (:func:`!getpgid`, :func:`!killpg`, :func:`!"
"lchown`, :func:`!loadavg`, :func:`!major`, :func:`!makedev`, :func:`!minor` "
"och :func:`!mknod`) har lagts till i modulen :mod:`posix` som ligger till "
"grund för modulen :mod:`os`. (Bidrag från Gustavo Niemeyer, Geert Jansen och "
"Denis S. Otkidach)"

msgid ""
"In the :mod:`os` module, the :func:`!\\*stat` family of functions can now "
"report fractions of a second in a timestamp.  Such time stamps are "
"represented as floats, similar to the value returned by :func:`time.time`."
msgstr ""
"I modulen :mod:`os` kan funktionerna i :func:`!\\*stat`-familjen nu "
"rapportera bråkdelar av en sekund i en tidsstämpel.  Sådana tidsstämplar "
"representeras som flyttal, liknande det värde som returneras av :func:`time."
"time`."

msgid ""
"During testing, it was found that some applications will break if time "
"stamps are floats.  For compatibility, when using the tuple interface of "
"the :class:`~os.stat_result` time stamps will be represented as integers. "
"When using named fields (a feature first introduced in Python 2.2), time "
"stamps are still represented as integers, unless :func:`!os."
"stat_float_times` is invoked to enable float return values::"
msgstr ""
"Under testningen upptäcktes att vissa program inte fungerar om "
"tidsstämplarna är flyttal.  För kompatibilitet, när du använder tuple-"
"gränssnittet i :class:`~os.stat_result` kommer tidsstämplar att "
"representeras som heltal. Vid användning av namngivna fält (en funktion som "
"först introducerades i Python 2.2) representeras tidsstämplar fortfarande "
"som heltal, såvida inte :func:`!os.stat_float_times` anropas för att "
"aktivera returvärden med flyttal::"

msgid ""
">>> os.stat(\"/tmp\").st_mtime\n"
"1034791200\n"
">>> os.stat_float_times(True)\n"
">>> os.stat(\"/tmp\").st_mtime\n"
"1034791200.6335014"
msgstr ""
">>> os.stat(\"/tmp\").st_mtime\n"
"1034791200\n"
">>> os.stat_float_times(True)\n"
">>> os.stat(\"/tmp\").st_mtime\n"
"1034791200.6335014"

msgid "In Python 2.4, the default will change to always returning floats."
msgstr ""
"I Python 2.4 kommer standardinställningen att ändras till att alltid "
"returnera floats."

msgid ""
"Application developers should enable this feature only if all their "
"libraries work properly when confronted with floating-point time stamps, or "
"if they use the tuple API. If used, the feature should be activated on an "
"application level instead of trying to enable it on a per-use basis."
msgstr ""
"Programutvecklare bör endast aktivera den här funktionen om alla deras "
"bibliotek fungerar korrekt när de konfronteras med tidsstämplar med flyttal "
"eller om de använder tuple-API:et. Om funktionen används bör den aktiveras "
"på applikationsnivå istället för att försöka aktivera den för varje enskild "
"användning."

msgid ""
"The :mod:`optparse` module contains a new parser for command-line arguments "
"that can convert option values to a particular Python type  and will "
"automatically generate a usage message.  See the following section for  more "
"details."
msgstr ""
"Modulen :mod:`optparse` innehåller en ny analysator för kommandoradsargument "
"som kan konvertera alternativvärden till en viss Python-typ och automatiskt "
"generera ett användningsmeddelande.  Se följande avsnitt för mer information."

msgid ""
"The old and never-documented :mod:`!linuxaudiodev` module has been "
"deprecated, and a new version named :mod:`!ossaudiodev` has been added.  The "
"module was renamed because the OSS sound drivers can be used on platforms "
"other than Linux, and the interface has also been tidied and brought up to "
"date in various ways. (Contributed by Greg Ward and Nicholas FitzRoy-Dale.)"
msgstr ""
"Den gamla och aldrig dokumenterade modulen :mod:`!linuxaudiodev` har utgått "
"och en ny version med namnet :mod:`!ossaudiodev` har lagts till.  Modulen "
"döptes om eftersom OSS-ljuddrivrutinerna kan användas på andra plattformar "
"än Linux, och gränssnittet har också snyggats till och uppdaterats på olika "
"sätt. (Bidrag från Greg Ward och Nicholas FitzRoy-Dale.)"

msgid ""
"The new :mod:`platform` module contains a number of functions that try to "
"determine various properties of the platform you're running on.  There are "
"functions for getting the architecture, CPU type, the Windows OS version, "
"and even the Linux distribution version. (Contributed by Marc-André Lemburg.)"
msgstr ""
"Den nya modulen :mod:`platform` innehåller ett antal funktioner som försöker "
"fastställa olika egenskaper hos den plattform du kör på.  Det finns "
"funktioner för att få fram arkitektur, CPU-typ, Windows OS-version och till "
"och med Linux-distributionsversion. (Bidrag från Marc-André Lemburg.)"

msgid ""
"The parser objects provided by the :mod:`pyexpat <xml.parsers.expat>` module "
"can now optionally buffer character data, resulting in fewer calls to your "
"character data handler and therefore faster performance.  Setting the parser "
"object's :attr:`~xml.parsers.expat.xmlparser.buffer_text` attribute to :"
"const:`True` will enable buffering."
msgstr ""
"De parserobjekt som tillhandahålls av modulen :mod:`pyexpat <xml.parsers."
"expat>` kan nu buffra teckendata, vilket resulterar i färre anrop till din "
"teckendatahanterare och därmed snabbare prestanda.  Om parserobjektets "
"attribut :attr:`~xml.parsers.expat.xmlparser.buffer_text` sätts till :const:"
"`True` aktiveras buffring."

msgid ""
"The ``sample(population, k)`` function was added to the :mod:`random` "
"module.  *population* is a sequence or :class:`!xrange` object containing "
"the elements of a population, and :func:`~random.sample` chooses *k* "
"elements from the population without replacing chosen elements.  *k* can be "
"any value up to ``len(population)``. For example::"
msgstr ""
"Funktionen ``sample(population, k)`` har lagts till i modulen :mod:"
"`random`.  *population* är en sekvens eller ett :class:`!xrange`-objekt som "
"innehåller elementen i en population, och :func:`~random.sample` väljer *k* "
"element från populationen utan att ersätta valda element.  *k* kan vara "
"vilket värde som helst upp till ``len(population)``. Till exempel::"

msgid ""
">>> days = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'St', 'Sn']\n"
">>> random.sample(days, 3)      # Choose 3 elements\n"
"['St', 'Sn', 'Th']\n"
">>> random.sample(days, 7)      # Choose 7 elements\n"
"['Tu', 'Th', 'Mo', 'We', 'St', 'Fr', 'Sn']\n"
">>> random.sample(days, 7)      # Choose 7 again\n"
"['We', 'Mo', 'Sn', 'Fr', 'Tu', 'St', 'Th']\n"
">>> random.sample(days, 8)      # Can't choose eight\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in ?\n"
"  File \"random.py\", line 414, in sample\n"
"      raise ValueError, \"sample larger than population\"\n"
"ValueError: sample larger than population\n"
">>> random.sample(xrange(1,10000,2), 10)   # Choose ten odd nos. under "
"10000\n"
"[3407, 3805, 1505, 7023, 2401, 2267, 9733, 3151, 8083, 9195]"
msgstr ""
"&gt;&gt;&gt; days = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'St', 'Sn'] &gt;&gt;&gt; "
"random sample(3)\n"
"&gt;&gt;&gt; random.sample(dagar, 3) # Välj 3 element\n"
"['St', 'Sn', 'Th']\n"
"&gt;&gt;&gt; slumpmässigt.urval(dagar, 7) # Välj 7 element\n"
"['Tu', 'Th', 'Mo', 'We', 'St', 'Fr', 'Sn']\n"
"&gt;&gt;&gt; random.sample(dagar, 7) # Välj 7 igen\n"
"['We', 'Mo', 'Sn', 'Fr', 'Tu', 'St', 'Th']\n"
"&gt;&gt;&gt; random.sample(dagar, 8) # Kan inte välja åtta\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i ?\n"
"  Fil \"random.py\", rad 414, i prov\n"
"      raise ValueError, \"urvalet större än populationen\"\n"
"ValueError: urvalet större än populationen\n"
"&gt;&gt;&gt; slumpmässigt.urval(xintervall(1,10000,2), 10)   # Välj tio udda "
"nummer under 10000\n"
"[3407, 3805, 1505, 7023, 2401, 2267, 9733, 3151, 8083, 9195]"

msgid ""
"The :mod:`random` module now uses a new algorithm, the Mersenne Twister, "
"implemented in C.  It's faster and more extensively studied than the "
"previous algorithm."
msgstr ""
"Modulen :mod:`random` använder nu en ny algoritm, Mersenne Twister, som är "
"implementerad i C. Den är snabbare och mer välstuderad än den tidigare "
"algoritmen."

msgid "(All changes contributed by Raymond Hettinger.)"
msgstr "(Alla ändringar har gjorts av Raymond Hettinger.)"

msgid ""
"The :mod:`readline` module also gained a number of new functions: :func:"
"`~readline.get_history_item`, :func:`~readline.get_current_history_length`, "
"and :func:`~readline.redisplay`."
msgstr ""
"Modulen :mod:`readline` har också fått ett antal nya funktioner: :func:"
"`~readline.get_history_item`, :func:`~readline.get_current_history_length` "
"och :func:`~readline.redisplay`."

msgid ""
"The :mod:`!rexec` and :mod:`!Bastion` modules have been declared dead, and "
"attempts to import them will fail with a :exc:`RuntimeError`.  New-style "
"classes provide new ways to break out of the restricted execution "
"environment provided by :mod:`!rexec`, and no one has interest in fixing "
"them or time to do so.  If you have applications using :mod:`!rexec`, "
"rewrite them to use something else."
msgstr ""
"Modulerna :mod:`!rexec` och :mod:`!Bastion` har dödförklarats och försök att "
"importera dem kommer att misslyckas med ett :exc:`RuntimeError`.  Klasser i "
"ny stil ger nya sätt att bryta sig ur den begränsade exekveringsmiljön som :"
"mod:`!rexec` ger, och ingen har intresse av att fixa dem eller tid att göra "
"det.  Om du har program som använder :mod:`!rexec`, skriv om dem så att de "
"använder något annat."

msgid ""
"(Sticking with Python 2.2 or 2.1 will not make your applications any safer "
"because there are known bugs in the :mod:`!rexec` module in those versions.  "
"To repeat: if you're using :mod:`!rexec`, stop using it immediately.)"
msgstr ""
"(Att hålla sig till Python 2.2 eller 2.1 kommer inte att göra dina "
"applikationer säkrare eftersom det finns kända buggar i modulen :mod:`!"
"rexec` i dessa versioner.  För att upprepa: om du använder :mod:`!rexec`, "
"sluta använda den omedelbart)"

msgid ""
"The :mod:`!rotor` module has been deprecated because the  algorithm it uses "
"for encryption is not believed to be secure.  If you need encryption, use "
"one of the several AES Python modules that are available separately."
msgstr ""
"Modulen :mod:`!rotor` har utgått eftersom den algoritm som används för "
"kryptering inte anses vara säker.  Om du behöver kryptering, använd en av de "
"många AES Python-moduler som finns tillgängliga separat."

msgid ""
"The :mod:`shutil` module gained a ``move(src, dest)`` function that "
"recursively moves a file or directory to a new location."
msgstr ""
"Modulen :mod:`shutil` har utökats med funktionen ``move(src, dest)`` som "
"rekursivt flyttar en fil eller katalog till en ny plats."

msgid ""
"Support for more advanced POSIX signal handling was added to the :mod:"
"`signal` but then removed again as it proved impossible to make it work "
"reliably across platforms."
msgstr ""
"Stöd för mer avancerad POSIX-signalhantering lades till i :mod:`signal` men "
"togs sedan bort igen eftersom det visade sig omöjligt att få det att fungera "
"tillförlitligt på olika plattformar."

msgid ""
"The :mod:`socket` module now supports timeouts.  You can call the "
"``settimeout(t)`` method on a socket object to set a timeout of *t* seconds. "
"Subsequent socket operations that take longer than *t* seconds to complete "
"will abort and raise a :exc:`socket.timeout` exception."
msgstr ""
"Modulen :mod:`socket` har nu stöd för timeouts.  Du kan anropa metoden "
"``settimeout(t)`` på ett socket-objekt för att ställa in en timeout på *t* "
"sekunder. Efterföljande socket-operationer som tar längre tid än *t* "
"sekunder att slutföra kommer att avbrytas och ge upphov till ett :exc:"
"`socket.timeout`-undantag."

msgid ""
"The original timeout implementation was by Tim O'Malley.  Michael Gilfix "
"integrated it into the Python :mod:`socket` module and shepherded it through "
"a lengthy review.  After the code was checked in, Guido van Rossum rewrote "
"parts of it.  (This is a good example of a collaborative development process "
"in action.)"
msgstr ""
"Den ursprungliga implementeringen av timeout gjordes av Tim O'Malley.  "
"Michael Gilfix integrerade den i Python :mod:`socket`-modulen och ledde den "
"genom en lång granskning.  Efter att koden hade checkats in skrev Guido van "
"Rossum om delar av den.  (Detta är ett bra exempel på en utvecklingsprocess "
"som bygger på samarbete)"

msgid ""
"On Windows, the :mod:`socket` module now ships with Secure  Sockets Layer "
"(SSL) support."
msgstr ""
"På Windows levereras nu modulen :mod:`socket` med stöd för SSL (Secure "
"Sockets Layer)."

msgid ""
"The value of the C :c:macro:`!PYTHON_API_VERSION` macro is now exposed at "
"the Python level as ``sys.api_version``.  The current exception can be "
"cleared by calling the new :func:`!sys.exc_clear` function."
msgstr ""
"Värdet på C :c:macro:`!PYTHON_API_VERSION`-makrot är nu exponerat på Python-"
"nivå som ``sys.api_version``.  Det aktuella undantaget kan rensas genom att "
"anropa den nya :func:`!sys.exc_clear`-funktionen."

msgid ""
"The new :mod:`tarfile` module  allows reading from and writing to :program:"
"`tar`\\ -format archive files. (Contributed by Lars Gustäbel.)"
msgstr ""
"Den nya modulen :mod:`tarfile` gör det möjligt att läsa från och skriva till "
"arkivfiler i formatet :program:`tar`. (Bidrag från Lars Gustäbel.)"

msgid ""
"The new :mod:`textwrap` module contains functions for wrapping strings "
"containing paragraphs of text.  The ``wrap(text, width)`` function takes a "
"string and returns a list containing the text split into lines of no more "
"than the chosen width.  The ``fill(text, width)`` function returns a single "
"string, reformatted to fit into lines no longer than the chosen width. (As "
"you can guess, :func:`~textwrap.fill` is built on top of :func:`~textwrap."
"wrap`.  For example::"
msgstr ""
"Den nya modulen :mod:`textwrap` innehåller funktioner för ombrytning av "
"strängar som innehåller textstycken.  Funktionen ``wrap(text, width)`` tar "
"en sträng och returnerar en lista som innehåller texten uppdelad i rader med "
"högst den valda bredden.  Funktionen ``fill(text, width)`` returnerar en "
"enda sträng, omformaterad för att passa in i rader som inte är längre än den "
"valda bredden. (Som du kan gissa bygger :func:`~textwrap.fill` på :func:"
"`~textwrap.wrap`.  Till exempel::"

msgid ""
">>> import textwrap\n"
">>> paragraph = \"Not a whit, we defy augury: ... more text ...\"\n"
">>> textwrap.wrap(paragraph, 60)\n"
"[\"Not a whit, we defy augury: there's a special providence in\",\n"
" \"the fall of a sparrow. If it be now, 'tis not to come; if it\",\n"
" ...]\n"
">>> print textwrap.fill(paragraph, 35)\n"
"Not a whit, we defy augury: there's\n"
"a special providence in the fall of\n"
"a sparrow. If it be now, 'tis not\n"
"to come; if it be not to come, it\n"
"will be now; if it be not now, yet\n"
"it will come: the readiness is all.\n"
">>>"
msgstr ""
">>> import textwrap\n"
">>> stycke = \"Inte ett dugg, vi trotsar spådomen: ... mer text ...\"\n"
">>> textwrap.wrap(stycke, 60)\n"
"[\"Inte ett dugg, vi trotsar augurun: det finns en speciell försyn i\",\n"
" \"en sparvs fall. Om det är nu, är det inte att komma; om det\",\n"
" ...]\n"
">>> print textwrap.fill(stycke, 35)\n"
"Inte en whit, vi trotsar augury: det finns\n"
"en speciell försyn i fallet av\n"
"en sparv. Om det är nu, är det inte\n"
"att komma; om det inte är att komma, det\n"
"kommer det att vara nu; om det inte är nu, ändå\n"
"kommer det att komma: beredskapen är allt.\n"
">>>"

msgid ""
"The module also contains a :class:`~textwrap.TextWrapper` class that "
"actually implements the text wrapping strategy.   Both the :class:`~textwrap."
"TextWrapper` class and the :func:`~textwrap.wrap` and :func:`~textwrap.fill` "
"functions support a number of additional keyword arguments for fine-tuning "
"the formatting; consult the module's documentation for details. (Contributed "
"by Greg Ward.)"
msgstr ""
"Modulen innehåller också en :class:`~textwrap.TextWrapper`-klass som "
"faktiskt implementerar textombrytningsstrategin.   Både klassen :class:"
"`~textwrap.TextWrapper` och funktionerna :func:`~textwrap.wrap` och :func:"
"`~textwrap.fill` stöder ett antal ytterligare nyckelordsargument för att "
"finjustera formateringen; se modulens dokumentation för mer information. "
"(Bidrag från Greg Ward.)"

msgid ""
"The :mod:`!thread` and :mod:`threading` modules now have companion modules, :"
"mod:`!dummy_thread` and :mod:`!dummy_threading`, that provide a do-nothing "
"implementation of the :mod:`!thread` module's interface for platforms where "
"threads are not supported.  The intention is to simplify thread-aware "
"modules (ones that *don't* rely on threads to run) by putting the following "
"code at the top::"
msgstr ""
"Modulerna :mod:`!thread` och :mod:`threading` har nu följeslagarmoduler, :"
"mod:`!dummy_thread` och :mod:`!dummy_threading`, som ger en \"do-nothing\"-"
"implementering av :mod:`!thread\"-modulens gränssnitt för plattformar där "
"trådar inte stöds.  Avsikten är att förenkla trådmedvetna moduler (sådana "
"som *inte* förlitar sig på trådar för att köras) genom att lägga följande "
"kod högst upp::"

msgid ""
"try:\n"
"    import threading as _threading\n"
"except ImportError:\n"
"    import dummy_threading as _threading"
msgstr ""
"try:\n"
"    import threading as _threading\n"
"except ImportError:\n"
"    import dummy_threading as _threading"

msgid ""
"In this example, :mod:`!_threading` is used as the module name to make it "
"clear that the module being used is not necessarily the actual :mod:"
"`threading` module. Code can call functions and use classes in :mod:`!"
"_threading` whether or not threads are supported, avoiding an :keyword:`if` "
"statement and making the code slightly clearer.  This module will not "
"magically make multithreaded code run without threads; code that waits for "
"another thread to return or to do something will simply hang forever."
msgstr ""
"I det här exemplet används :mod:`!_threading` som modulnamn för att klargöra "
"att den modul som används inte nödvändigtvis är den faktiska modulen :mod:"
"`threading`. Kod kan anropa funktioner och använda klasser i :mod:`!"
"_threading` oavsett om trådar stöds eller inte, vilket undviker ett :keyword:"
"`if`-slutsats och gör koden något tydligare.  Den här modulen kommer inte på "
"något magiskt sätt att få flertrådad kod att köras utan trådar; kod som "
"väntar på att en annan tråd ska återvända eller göra något kommer helt "
"enkelt att hänga sig för evigt."

msgid ""
"The :mod:`time` module's :func:`~time.strptime` function has long been an "
"annoyance because it uses the platform C library's :func:`~time.strptime` "
"implementation, and different platforms sometimes have odd bugs.  Brett "
"Cannon contributed a portable implementation that's written in pure Python "
"and should behave identically on all platforms."
msgstr ""
"Modulen :mod:`time`:s funktion :func:`~time.strptime` har länge varit ett "
"irritationsmoment eftersom den använder plattform C-bibliotekets "
"implementation :func:`~time.strptime`, och olika plattformar har ibland udda "
"buggar.  Brett Cannon bidrog med en portabel implementation som är skriven i "
"ren Python och som bör bete sig identiskt på alla plattformar."

msgid ""
"The new :mod:`timeit` module helps measure how long snippets of Python code "
"take to execute.  The :file:`timeit.py` file can be run directly from the "
"command line, or the module's :class:`~timeit.Timer` class can be imported "
"and used directly.  Here's a short example that figures out whether it's "
"faster to convert an 8-bit string to Unicode by appending an empty Unicode "
"string to it or by using the :func:`!unicode` function::"
msgstr ""
"Den nya modulen :mod:`timeit` hjälper till att mäta hur lång tid det tar att "
"exekvera bitar av Python-kod.  Filen :file:`timeit.py` kan köras direkt från "
"kommandoraden, eller så kan modulens klass :class:`~timeit.Timer` importeras "
"och användas direkt.  Här är ett kort exempel som räknar ut om det är "
"snabbare att konvertera en 8-bitars sträng till Unicode genom att lägga till "
"en tom Unicode-sträng till den eller genom att använda funktionen :func:`!"
"unicode`::"

msgid ""
"import timeit\n"
"\n"
"timer1 = timeit.Timer('unicode(\"abc\")')\n"
"timer2 = timeit.Timer('\"abc\" + u\"\"')\n"
"\n"
"# Run three trials\n"
"print timer1.repeat(repeat=3, number=100000)\n"
"print timer2.repeat(repeat=3, number=100000)\n"
"\n"
"# On my laptop this outputs:\n"
"# [0.36831796169281006, 0.37441694736480713, 0.35304892063140869]\n"
"# [0.17574405670166016, 0.18193507194519043, 0.17565798759460449]"
msgstr ""
"import timeit\n"
"\n"
"timer1 = timeit.Timer('unicode(\"abc\")')\n"
"timer2 = timeit.Timer('\"abc\" + u\"\"')\n"
"\n"
"# Run three trials\n"
"print timer1.repeat(repeat=3, number=100000)\n"
"print timer2.repeat(repeat=3, number=100000)\n"
"\n"
"# On my laptop this outputs:\n"
"# [0.36831796169281006, 0.37441694736480713, 0.35304892063140869]\n"
"# [0.17574405670166016, 0.18193507194519043, 0.17565798759460449]"

msgid ""
"The :mod:`!Tix` module has received various bug fixes and updates for the "
"current version of the Tix package."
msgstr ""
"Modulen :mod:`!Tix` har fått olika buggfixar och uppdateringar för den "
"aktuella versionen av Tix-paketet."

msgid ""
"The :mod:`!Tkinter` module now works with a thread-enabled  version of Tcl. "
"Tcl's threading model requires that widgets only be accessed from the thread "
"in which they're created; accesses from another thread can cause Tcl to "
"panic.  For certain Tcl interfaces, :mod:`!Tkinter` will now automatically "
"avoid this  when a widget is accessed from a different thread by marshalling "
"a command, passing it to the correct thread, and waiting for the results.  "
"Other interfaces can't be handled automatically but :mod:`!Tkinter` will now "
"raise an exception on such an access so that you can at least find out about "
"the problem.  See https://mail.python.org/pipermail/python-dev/2002-"
"December/031107.html for a more detailed explanation of this change.  "
"(Implemented by Martin von Löwis.)"
msgstr ""
"Modulen :mod:`!Tkinter` fungerar nu med en trådaktiverad version av Tcl. Tcl:"
"s trådmodell kräver att widgetar endast kan nås från den tråd i vilken de "
"skapades; åtkomst från en annan tråd kan orsaka panik i Tcl.  För vissa Tcl-"
"gränssnitt kommer :mod:`!Tkinter` nu automatiskt att undvika detta när en "
"widget nås från en annan tråd genom att marshalla ett kommando, skicka det "
"till rätt tråd och vänta på resultatet.  Andra gränssnitt kan inte hanteras "
"automatiskt men :mod:`!Tkinter` kommer nu att ge upphov till ett undantag "
"vid sådan åtkomst så att du åtminstone kan ta reda på problemet.  Se https://"
"mail.python.org/pipermail/python-dev/2002-December/031107.html för en mer "
"detaljerad förklaring av denna förändring.  (Implementerad av Martin von "
"Löwis.)"

msgid ""
"Calling Tcl methods through :mod:`!_tkinter` no longer  returns only "
"strings. Instead, if Tcl returns other objects those objects are converted "
"to their Python equivalent, if one exists, or wrapped with a :class:`!"
"_tkinter.Tcl_Obj` object if no Python equivalent exists. This behavior can "
"be controlled through the :meth:`!wantobjects` method of :class:`!tkapp` "
"objects."
msgstr ""
"Anrop av Tcl-metoder via :mod:`!_tkinter` returnerar inte längre bara "
"strängar. Istället, om Tcl returnerar andra objekt konverteras dessa objekt "
"till sin Python-ekvivalent, om en sådan finns, eller omsluts med ett :class:"
"`!_tkinter.Tcl_Obj`-objekt om ingen Python-ekvivalent finns. Detta beteende "
"kan kontrolleras genom metoden :meth:`!wantobjects` för :class:`!tkapp`-"
"objekt."

msgid ""
"When using :mod:`!_tkinter` through the :mod:`!Tkinter` module (as most "
"Tkinter applications will), this feature is always activated. It should not "
"cause compatibility problems, since Tkinter would always convert string "
"results to Python types where possible."
msgstr ""
"När :mod:`!_tkinter` används genom modulen :mod:`!Tkinter` (vilket de flesta "
"Tkinter-applikationer gör), är den här funktionen alltid aktiverad. Det bör "
"inte orsaka kompatibilitetsproblem, eftersom Tkinter alltid konverterar "
"strängresultat till Python-typer där det är möjligt."

msgid ""
"If any incompatibilities are found, the old behavior can be restored by "
"setting the :attr:`!wantobjects` variable in the :mod:`!Tkinter` module to "
"false before creating the first :class:`!tkapp` object. ::"
msgstr ""
"Om några inkompatibiliteter upptäcks kan det gamla beteendet återställas "
"genom att variabeln :attr:`!wantobjects` i modulen :mod:`!Tkinter` sätts "
"till false innan det första objektet :class:`!tkapp` skapas. ::"

msgid ""
"import Tkinter\n"
"Tkinter.wantobjects = 0"
msgstr ""
"import Tkinter\n"
"Tkinter.wantobjects = 0"

msgid "Any breakage caused by this change should be reported as a bug."
msgstr ""
"Eventuella avbrott som orsakas av denna ändring ska rapporteras som en bugg."

msgid ""
"The :mod:`!UserDict` module has a new :class:`!DictMixin` class which "
"defines all dictionary methods for classes that already have a minimum "
"mapping interface.  This greatly simplifies writing classes that need to be "
"substitutable for dictionaries, such as the classes in  the :mod:`shelve` "
"module."
msgstr ""
"Modulen :mod:`!UserDict` har en ny klass :class:`!DictMixin` som definierar "
"alla ordboksmetoder för klasser som redan har ett minimalt "
"mappningsgränssnitt.  Detta förenklar avsevärt skrivandet av klasser som "
"behöver vara utbytbara mot ordböcker, såsom klasserna i modulen :mod:"
"`shelve`."

msgid ""
"Adding the mix-in as a superclass provides the full dictionary interface "
"whenever the class defines :meth:`~object.__getitem__`, :meth:`~object."
"__setitem__`, :meth:`~object.__delitem__`, and :meth:`!keys`. For example::"
msgstr ""
"Om du lägger till mix-in som en superklass får du det fullständiga "
"ordboksgränssnittet när klassen definierar :meth:`~object.__getitem__`, :"
"meth:`~object.__setitem__`, :meth:`~object.__delitem__` och :meth:`!keys`. "
"Till exempel::"

msgid ""
">>> import UserDict\n"
">>> class SeqDict(UserDict.DictMixin):\n"
"...     \"\"\"Dictionary lookalike implemented with lists.\"\"\"\n"
"...     def __init__(self):\n"
"...         self.keylist = []\n"
"...         self.valuelist = []\n"
"...     def __getitem__(self, key):\n"
"...         try:\n"
"...             i = self.keylist.index(key)\n"
"...         except ValueError:\n"
"...             raise KeyError\n"
"...         return self.valuelist[i]\n"
"...     def __setitem__(self, key, value):\n"
"...         try:\n"
"...             i = self.keylist.index(key)\n"
"...             self.valuelist[i] = value\n"
"...         except ValueError:\n"
"...             self.keylist.append(key)\n"
"...             self.valuelist.append(value)\n"
"...     def __delitem__(self, key):\n"
"...         try:\n"
"...             i = self.keylist.index(key)\n"
"...         except ValueError:\n"
"...             raise KeyError\n"
"...         self.keylist.pop(i)\n"
"...         self.valuelist.pop(i)\n"
"...     def keys(self):\n"
"...         return list(self.keylist)\n"
"...\n"
">>> s = SeqDict()\n"
">>> dir(s)      # See that other dictionary methods are implemented\n"
"['__cmp__', '__contains__', '__delitem__', '__doc__', '__getitem__',\n"
" '__init__', '__iter__', '__len__', '__module__', '__repr__',\n"
" '__setitem__', 'clear', 'get', 'has_key', 'items', 'iteritems',\n"
" 'iterkeys', 'itervalues', 'keylist', 'keys', 'pop', 'popitem',\n"
" 'setdefault', 'update', 'valuelist', 'values']"
msgstr ""
">>> import UserDict\n"
">>> klass SeqDict(UserDict.DictMixin):\n"
"...     \"\"\"Dictionary lookalike implementerad med listor.\"\"\"\n"
"... def __init__(self):\n"
"... self.keylist = []\n"
"... self.valuelist = []\n"
"... def __getitem__(self, key):\n"
"... försök:\n"
"... i = self.keylist.index(nyckel)\n"
"... except ValueError:\n"
"... raise KeyError\n"
"... return self.valuelist[i]\n"
"... def __setitem__(self, nyckel, värde):\n"
"... try:\n"
"... i = self.keylist.index(nyckel)\n"
"... self.valuelist[i] = värde\n"
"... utom ValueError:\n"
"... self.keylist.append(nyckel)\n"
"... self.valuelist.append(värde)\n"
"... def __delitem__(self, key):\n"
"... försök:\n"
"... i = self.keylist.index(nyckel)\n"
"... except ValueError:\n"
"... raise KeyError\n"
"... self.keylist.pop(i)\n"
"... self.valuelist.pop(i)\n"
"... def keys(self):\n"
"... return list(self.keylist)\n"
"...\n"
">>> s = SeqDict()\n"
">>> dir(s) # Se till att andra ordboksmetoder är implementerade\n"
"['__cmp__', '__contains__', '__delitem__', '__doc__', '__getitem__',\n"
" \"__init__\", \"__iter__\", \"__len__\", \"__module__\", \"__repr__\",\n"
" '__setitem__', 'clear', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', "
"'iterkeys\n"
" 'iterkeys', 'itervalues', 'keylist', 'keys', 'pop', 'popitem',\n"
" 'setdefault', 'update', 'valuelist', 'värden']"

msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Bidrag från Raymond Hettinger.)"

msgid ""
"The DOM implementation in :mod:`xml.dom.minidom` can now generate XML output "
"in a particular encoding by providing an optional encoding argument to the :"
"meth:`~xml.dom.minidom.Node.toxml` and :meth:`~xml.dom.minidom.Node."
"toprettyxml` methods of DOM nodes."
msgstr ""
"DOM-implementationen i :mod:`xml.dom.minidom` kan nu generera XML-utdata i "
"en viss kodning genom att tillhandahålla ett valfritt kodningsargument till "
"metoderna :meth:`~xml.dom.minidom.Node.toxml` och :meth:`~xml.dom.minidom."
"Node.toprettyxml` för DOM-noder."

msgid ""
"The :mod:`!xmlrpclib` module now supports an XML-RPC extension for handling "
"nil data values such as Python's ``None``.  Nil values are always supported "
"on unmarshalling an XML-RPC response.  To generate requests containing "
"``None``, you must supply a true value for the *allow_none* parameter when "
"creating a :class:`!Marshaller` instance."
msgstr ""
"Modulen :mod:`!xmlrpclib` har nu stöd för ett XML-RPC-tillägg för hantering "
"av nil-datavärden, t.ex. Pythons ``None``.  Nil-värden stöds alltid vid "
"unmarshalling av ett XML-RPC-svar.  För att generera begäranden som "
"innehåller ``None`` måste du ange ett true-värde för parametern *allow_none* "
"när du skapar en :class:`!Marshaller`-instans."

msgid ""
"The new :mod:`!DocXMLRPCServer` module allows writing self-documenting XML-"
"RPC servers. Run it in demo mode (as a program) to see it in action.   "
"Pointing the web browser to the RPC server produces pydoc-style "
"documentation; pointing xmlrpclib to the server allows invoking the actual "
"methods. (Contributed by Brian Quinlan.)"
msgstr ""
"Den nya :mod:`!DocXMLRPCServer`-modulen gör det möjligt att skriva "
"självdokumenterande XML-RPC-servrar. Kör den i demoläge (som ett program) "
"för att se hur den fungerar.   Genom att peka webbläsaren mot RPC-servern "
"produceras dokumentation i pydoc-stil; genom att peka xmlrpclib mot servern "
"kan man anropa de faktiska metoderna. (Bidrag från Brian Quinlan.)"

msgid ""
"Support for internationalized domain names (RFCs 3454, 3490, 3491, and 3492) "
"has been added. The \"idna\" encoding can be used to convert between a "
"Unicode domain name and the ASCII-compatible encoding (ACE) of that name. ::"
msgstr ""
"Stöd för internationaliserade domännamn (RFC 3454, 3490, 3491 och 3492) har "
"lagts till. Kodningen \"idna\" kan användas för att konvertera mellan ett "
"Unicode-domännamn och den ASCII-kompatibla kodningen (ACE) av det namnet. ::"

msgid ""
">{}>{}> u\"www.Alliancefrançaise.nu\".encode(\"idna\")\n"
"'www.xn--alliancefranaise-npb.nu'"
msgstr ""
">{}>{}> u\"www.Alliancefrançaise.nu\".encode(\"idna\")\n"
"'www.xn--alliancefranaise-npb.nu'"

msgid ""
"The :mod:`socket` module has also been extended to transparently convert "
"Unicode hostnames to the ACE version before passing them to the C library. "
"Modules that deal with hostnames such as :mod:`!httplib` and :mod:`ftplib`) "
"also support Unicode host names; :mod:`!httplib` also sends HTTP ``Host`` "
"headers using the ACE version of the domain name.  :mod:`urllib` supports "
"Unicode URLs with non-ASCII host names as long as the ``path`` part of the "
"URL is ASCII only."
msgstr ""
"Modulen :mod:`socket` har också utökats för att på ett transparent sätt "
"konvertera Unicode-värdnamn till ACE-versionen innan de skickas till C-"
"biblioteket. Moduler som hanterar värdnamn såsom :mod:`!httplib` och :mod:"
"`ftplib`) stöder också Unicode-värdnamn; :mod:`!httplib` skickar också HTTP "
"``Host``-rubriker med ACE-versionen av domännamnet. :mod:`urllib` stöder "
"Unicode-URL:er med icke-ASCII-värdnamn så länge som ``path``-delen av URL:en "
"endast är ASCII."

msgid ""
"To implement this change, the :mod:`stringprep` module, the  "
"``mkstringprep`` tool and the ``punycode`` encoding have been added."
msgstr ""
"För att implementera denna ändring har modulen :mod:`stringprep`, verktyget "
"``mkstringprep`` och kodningen ``punycode`` lagts till."

msgid "Date/Time Type"
msgstr "Datum/Tid Typ"

msgid ""
"Date and time types suitable for expressing timestamps were added as the :"
"mod:`datetime` module.  The types don't support different calendars or many "
"fancy features, and just stick to the basics of representing time."
msgstr ""
"Datum- och tidstyper som lämpar sig för att uttrycka tidsstämplar har lagts "
"till i modulen :mod:`datetime`.  Typerna stöder inte olika kalendrar eller "
"många andra avancerade funktioner, utan håller sig bara till grunderna för "
"att representera tid."

msgid ""
"The three primary types are: :class:`~datetime.date`, representing a day, "
"month, and year; :class:`~datetime.time`, consisting of hour, minute, and "
"second; and :class:`~datetime.datetime`, which contains all the attributes "
"of both :class:`~datetime.date` and :class:`~datetime.time`. There's also a :"
"class:`~datetime.timedelta` class representing differences between two "
"points in time, and time zone logic is implemented by classes inheriting "
"from the abstract :class:`~datetime.tzinfo` class."
msgstr ""
"De tre primära typerna är: :class:`~datetime.date`, som representerar en "
"dag, månad och år; :class:`~datetime.time`, som består av timme, minut och "
"sekund; och :class:`~datetime.datetime`, som innehåller alla attribut från "
"både :class:`~datetime.date` och :class:`~datetime.time`. Det finns också en "
"klass :class:`~datetime.timedelta` som representerar skillnader mellan två "
"tidpunkter, och tidszonlogik implementeras av klasser som ärver från den "
"abstrakta klassen :class:`~datetime.tzinfo`."

msgid ""
"You can create instances of :class:`~datetime.date` and :class:`~datetime."
"time` by either supplying keyword arguments to the appropriate constructor, "
"e.g. ``datetime.date(year=1972, month=10, day=15)``, or by using one of a "
"number of class methods.  For example, the :meth:`~datetime.date.today` "
"class method returns the current local date."
msgstr ""
"Du kan skapa instanser av :class:`~datetime.date` och :class:`~datetime."
"time` antingen genom att ange nyckelordsargument till lämplig konstruktör, t."
"ex. ``datetime.date(year=1972, month=10, day=15)``, eller genom att använda "
"en av ett antal klassmetoder.  Exempelvis ger klassmetoden :meth:`~datetime."
"date.today` det aktuella lokala datumet."

msgid ""
"Once created, instances of the date/time classes are all immutable. There "
"are a number of methods for producing formatted strings from objects::"
msgstr ""
"När de väl har skapats är alla instanser av date/time-klasserna "
"oföränderliga. Det finns ett antal metoder för att producera formaterade "
"strängar från objekt::"

msgid ""
">>> import datetime\n"
">>> now = datetime.datetime.now()\n"
">>> now.isoformat()\n"
"'2002-12-30T21:27:03.994956'\n"
">>> now.ctime()  # Only available on date, datetime\n"
"'Mon Dec 30 21:27:03 2002'\n"
">>> now.strftime('%Y %d %b')\n"
"'2002 30 Dec'"
msgstr ""
">>> import datetime\n"
">>> nu = datetime.datetime.nu()\n"
">>> now.isoformat()\n"
"'2002-12-30T21:27:03.994956'\n"
">>> now.ctime() # Endast tillgänglig på datum, datetime\n"
"'Mån 30 dec 21:27:03 2002'\n"
">>> now.strftime('%Y %d %b')\n"
"'2002 30 dec'"

msgid ""
"The :meth:`~datetime.datetime.replace` method allows modifying one or more "
"fields  of a :class:`~datetime.date` or :class:`~datetime.datetime` "
"instance, returning a new instance::"
msgstr ""
"Med metoden :meth:`~datetime.datetime.replace` kan du ändra ett eller flera "
"fält i en instans av :class:`~datetime.date` eller :class:`~datetime."
"datetime` och returnera en ny instans::"

msgid ""
">>> d = datetime.datetime.now()\n"
">>> d\n"
"datetime.datetime(2002, 12, 30, 22, 15, 38, 827738)\n"
">>> d.replace(year=2001, hour = 12)\n"
"datetime.datetime(2001, 12, 30, 12, 15, 38, 827738)\n"
">>>"
msgstr ""
">>> d = datetime.datetime.now()\n"
">>> d\n"
"datetime.datetime(2002, 12, 30, 22, 15, 38, 827738)\n"
">>> d.replace(år=2001, timme = 12)\n"
"datetime.datetime(2001, 12, 30, 12, 15, 38, 827738)\n"
">>>"

msgid ""
"Instances can be compared, hashed, and converted to strings (the result is "
"the same as that of :meth:`~datetime.datetime.isoformat`).  :class:"
"`~datetime.date` and :class:`~datetime.datetime` instances can be subtracted "
"from each other, and added to :class:`~datetime.timedelta` instances.  The "
"largest missing feature is that there's no standard library support for "
"parsing strings and getting back a :class:`~datetime.date` or :class:"
"`~datetime.datetime`."
msgstr ""
"Instanser kan jämföras, hashas och konverteras till strängar (resultatet är "
"detsamma som för :meth:`~datetime.datetime.isoformat`).  instanser av :class:"
"`~datetime.date` och :class:`~datetime.datetime` kan subtraheras från "
"varandra och adderas till instanser av :class:`~datetime.timedelta`.  Den "
"största saknade funktionen är att det inte finns något "
"standardbiblioteksstöd för att analysera strängar och få tillbaka en :class:"
"`~datetime.date` eller :class:`~datetime.datetime`."

msgid ""
"For more information, refer to the module's reference documentation. "
"(Contributed by Tim Peters.)"
msgstr ""
"För mer information, se modulens referensdokumentation. (Bidrag från Tim "
"Peters.)"

msgid "The optparse Module"
msgstr "Optparse-modulen"

msgid ""
"The :mod:`getopt` module provides simple parsing of command-line arguments.  "
"The new :mod:`optparse` module (originally named Optik) provides more "
"elaborate command-line parsing that follows the Unix conventions, "
"automatically creates the output for :option:`!--help`, and can perform "
"different actions for different options."
msgstr ""
"Modulen :mod:`getopt` ger en enkel analys av kommandoradsargument.  Den nya "
"modulen :mod:`optparse` (som ursprungligen hette Optik) ger en mer "
"detaljerad tolkning av kommandoraden som följer Unix-konventionerna, skapar "
"automatiskt utdata för :option:`!--help` och kan utföra olika åtgärder för "
"olika alternativ."

msgid ""
"You start by creating an instance of :class:`~optparse.OptionParser` and "
"telling it what your program's options are. ::"
msgstr ""
"Du börjar med att skapa en instans av :class:`~optparse.OptionParser` och "
"tala om för den vilka alternativ ditt program har. ::"

msgid ""
"import sys\n"
"from optparse import OptionParser\n"
"\n"
"op = OptionParser()\n"
"op.add_option('-i', '--input',\n"
"              action='store', type='string', dest='input',\n"
"              help='set input filename')\n"
"op.add_option('-l', '--length',\n"
"              action='store', type='int', dest='length',\n"
"              help='set maximum length of output')"
msgstr ""
"import sys\n"
"from optparse import OptionParser\n"
"\n"
"op = OptionParser()\n"
"op.add_option('-i', '--input',\n"
"              action='store', type='string', dest='input',\n"
"              help='set input filename')\n"
"op.add_option('-l', '--length',\n"
"              action='store', type='int', dest='length',\n"
"              help='set maximum length of output')"

msgid ""
"Parsing a command line is then done by calling the :meth:`~optparse."
"OptionParser.parse_args` method. ::"
msgstr ""
"Parsning av en kommandorad görs sedan genom att anropa metoden :meth:"
"`~optparse.OptionParser.parse_args`. ::"

msgid ""
"options, args = op.parse_args(sys.argv[1:])\n"
"print options\n"
"print args"
msgstr ""
"options, args = op.parse_args(sys.argv[1:])\n"
"skriv ut alternativ\n"
"skriv ut args"

msgid ""
"This returns an object containing all of the option values, and a list of "
"strings containing the remaining arguments."
msgstr ""
"Detta returnerar ett objekt som innehåller alla alternativvärden och en "
"lista med strängar som innehåller de återstående argumenten."

msgid ""
"Invoking the script with the various arguments now works as you'd expect it "
"to. Note that the length argument is automatically converted to an integer."
msgstr ""
"Att anropa skriptet med de olika argumenten fungerar nu som du förväntar dig "
"att det ska göra. Observera att argumentet length automatiskt konverteras "
"till ett heltal."

msgid ""
"$ ./python opt.py -i data arg1\n"
"<Values at 0x400cad4c: {'input': 'data', 'length': None}>\n"
"['arg1']\n"
"$ ./python opt.py --input=data --length=4\n"
"<Values at 0x400cad2c: {'input': 'data', 'length': 4}>\n"
"[]\n"
"$"
msgstr ""
"$ ./python opt.py -i data arg1\n"
"<Värden vid 0x400cad4c: {'input': 'data', 'length': None}>\n"
"['arg1']\n"
"$ ./python opt.py --input=data --length=4\n"
"<Värden på 0x400cad2c: {'input': 'data', 'length': 4}>\n"
"[]\n"
"$"

msgid "The help message is automatically generated for you:"
msgstr "Hjälpmeddelandet genereras automatiskt åt dig:"

msgid ""
"$ ./python opt.py --help\n"
"usage: opt.py [options]\n"
"\n"
"options:\n"
"  -h, --help            show this help message and exit\n"
"  -iINPUT, --input=INPUT\n"
"                        set input filename\n"
"  -lLENGTH, --length=LENGTH\n"
"                        set maximum length of output\n"
"$"
msgstr ""
"$ ./python opt.py --hjälp\n"
"användning: opt.py [alternativ]\n"
"\n"
"alternativ:\n"
"  -h, --help visa detta hjälpmeddelande och avsluta\n"
"  -iINPUT, --input=INPUT\n"
"                        ange filnamn för inmatning\n"
"  -lLENGTH, --längd=LÄNGD\n"
"                        anger maximal längd på utdata\n"
"$"

msgid "See the module's documentation for more details."
msgstr "Se modulens dokumentation för mer information."

msgid ""
"Optik was written by Greg Ward, with suggestions from the readers of the "
"Getopt SIG."
msgstr ""
"Optik har skrivits av Greg Ward, med förslag från läsarna av Getopt SIG."

msgid "Pymalloc: A Specialized Object Allocator"
msgstr "Pymalloc: En specialiserad objektallokering"

msgid ""
"Pymalloc, a specialized object allocator written by Vladimir Marangozov, was "
"a feature added to Python 2.1.  Pymalloc is intended to be faster than the "
"system :c:func:`malloc` and to have less memory overhead for allocation "
"patterns typical of Python programs. The allocator uses C's :c:func:`malloc` "
"function to get large pools of memory and then fulfills smaller memory "
"requests from these pools."
msgstr ""
"Pymalloc, en specialiserad objektallokator skriven av Vladimir Marangozov, "
"var en funktion som lades till i Python 2.1.  Pymalloc är tänkt att vara "
"snabbare än systemets :c:func:`malloc` och att ha mindre minnesoverhead för "
"allokeringsmönster som är typiska för Python-program. Allokatorn använder C:"
"s :c:func:`malloc`-funktion för att få stora minnespooler och uppfyller "
"sedan mindre minnesförfrågningar från dessa pooler."

msgid ""
"In 2.1 and 2.2, pymalloc was an experimental feature and wasn't enabled by "
"default; you had to explicitly enable it when compiling Python by providing "
"the :option:`!--with-pymalloc` option to the :program:`configure` script.  "
"In 2.3, pymalloc has had further enhancements and is now enabled by default; "
"you'll have to supply :option:`!--without-pymalloc` to disable it."
msgstr ""
"I 2.1 och 2.2 var pymalloc en experimentell funktion och var inte aktiverad "
"som standard; du var tvungen att uttryckligen aktivera den när du "
"kompilerade Python genom att ange :option:`!--with-pymalloc`-alternativet "
"till :program:`configure`-skriptet.  I 2.3 har pymalloc förbättrats "
"ytterligare och är nu aktiverat som standard; du måste ange :option:`!--"
"without-pymalloc` för att inaktivera det."

msgid ""
"This change is transparent to code written in Python; however, pymalloc may "
"expose bugs in C extensions.  Authors of C extension modules should test "
"their code with pymalloc enabled, because some incorrect code may cause core "
"dumps at runtime."
msgstr ""
"Denna ändring är transparent för kod skriven i Python, men pymalloc kan "
"avslöja buggar i C-tillägg.  Författare till C-tilläggsmoduler bör testa sin "
"kod med pymalloc aktiverat, eftersom viss felaktig kod kan orsaka kärndumpar "
"vid körning."

msgid ""
"There's one particularly common error that causes problems.  There are a "
"number of memory allocation functions in Python's C API that have previously "
"just been aliases for the C library's :c:func:`malloc` and :c:func:`free`, "
"meaning that if you accidentally called mismatched functions the error "
"wouldn't be noticeable. When the object allocator is enabled, these "
"functions aren't aliases of :c:func:`malloc` and :c:func:`free` any more, "
"and calling the wrong function to free memory may get you a core dump.  For "
"example, if memory was allocated using :c:func:`PyObject_Malloc`, it has to "
"be freed using :c:func:`PyObject_Free`, not :c:func:`free`.  A few modules "
"included with Python fell afoul of this and had to be fixed; doubtless there "
"are more third-party modules that will have the same problem."
msgstr ""
"Det finns ett särskilt vanligt fel som orsakar problem.  Det finns ett antal "
"minnesallokeringsfunktioner i Pythons C API som tidigare bara har varit "
"alias för C-bibliotekets :c:func:`malloc` och :c:func:`free`, vilket innebär "
"att om du av misstag anropade felaktiga funktioner skulle felet inte märkas. "
"När objektallokeraren är aktiverad är dessa funktioner inte längre alias "
"för :c:func:`malloc` och :c:func:`free`, och om du anropar fel funktion för "
"att frigöra minne kan du få en kärndump.  Till exempel, om minne allokerades "
"med :c:func:`PyObject_Malloc`, måste det frigöras med :c:func:"
"`PyObject_Free`, inte :c:func:`free`.  Några moduler som ingår i Python "
"drabbades av detta och måste åtgärdas; utan tvekan finns det fler "
"tredjepartsmoduler som kommer att ha samma problem."

msgid ""
"As part of this change, the confusing multiple interfaces for allocating "
"memory have been consolidated down into two API families. Memory allocated "
"with one family must not be manipulated with functions from the other "
"family.  There is one family for allocating chunks of memory and another "
"family of functions specifically for allocating Python objects."
msgstr ""
"Som en del av denna förändring har de förvirrande många gränssnitten för "
"allokering av minne konsoliderats till två API-familjer. Minne som "
"allokerats med den ena familjen får inte manipuleras med funktioner från den "
"andra familjen.  Det finns en familj för allokering av minnesbitar och en "
"annan familj med funktioner som är särskilt avsedda för allokering av Python-"
"objekt."

msgid ""
"To allocate and free an undistinguished chunk of memory use the \"raw "
"memory\" family: :c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc`, and :c:"
"func:`PyMem_Free`."
msgstr ""
"För att allokera och frigöra en oansenlig bit minne använder du \"raw "
"memory\"-familjen: :c:func:`PyMem_Malloc`, :c:func:`PyMem_Realloc` och :c:"
"func:`PyMem_Free`."

msgid ""
"The \"object memory\" family is the interface to the pymalloc facility "
"described above and is biased towards a large number of \"small\" "
"allocations: :c:func:`PyObject_Malloc`, :c:func:`PyObject_Realloc`, and :c:"
"func:`PyObject_Free`."
msgstr ""
"Familjen \"object memory\" är gränssnittet till pymalloc-funktionen som "
"beskrivs ovan och är inriktad på ett stort antal \"små\" allokeringar: :c:"
"func:`PyObject_Malloc`, :c:func:`PyObject_Realloc` och :c:func:"
"`PyObject_Free`."

msgid ""
"To allocate and free Python objects, use the \"object\" family :c:macro:"
"`PyObject_New`, :c:macro:`PyObject_NewVar`, and :c:func:`PyObject_Del`."
msgstr ""
"För att allokera och frigöra Python-objekt använder du \"object\"-familjen :"
"c:macro:`PyObject_New`, :c:macro:`PyObject_NewVar` och :c:func:"
"`PyObject_Del`."

msgid ""
"Thanks to lots of work by Tim Peters, pymalloc in 2.3 also provides "
"debugging features to catch memory overwrites and doubled frees in both "
"extension modules and in the interpreter itself.  To enable this support, "
"compile a debugging version of the Python interpreter by running :program:"
"`configure` with :option:`!--with-pydebug`."
msgstr ""
"Tack vare mycket arbete av Tim Peters har pymalloc i 2.3 också "
"felsökningsfunktioner för att fånga upp minnesöverskrivningar och dubbla "
"frees i både tilläggsmoduler och i själva tolken.  För att aktivera detta "
"stöd, kompilera en felsökningsversion av Python-tolken genom att köra :"
"program:`configure` med :option:`!--with-pydebug`."

msgid ""
"To aid extension writers, a header file :file:`Misc/pymemcompat.h` is "
"distributed with the source to Python 2.3 that allows Python extensions to "
"use the 2.3 interfaces to memory allocation while compiling against any "
"version of Python since 1.5.2.  You would copy the file from Python's source "
"distribution and bundle it with the source of your extension."
msgstr ""
"För att hjälpa författare av tillägg distribueras en header-fil :file:`Misc/"
"pymemcompat.h` med källan till Python 2.3 som gör det möjligt för Python-"
"tillägg att använda 2.3-gränssnitten för minnesallokering när de kompilerar "
"mot alla versioner av Python sedan 1.5.2.  Du kopierar filen från Pythons "
"källdistribution och buntar den med källan till ditt tillägg."

msgid "https://hg.python.org/cpython/file/default/Objects/obmalloc.c"
msgstr "https://hg.python.org/cpython/file/default/Objects/obmalloc.c"

msgid ""
"For the full details of the pymalloc implementation, see the comments at the "
"top of the file :file:`Objects/obmalloc.c` in the Python source code. The "
"above link points to the file within the python.org SVN browser."
msgstr ""
"För fullständiga detaljer om pymalloc-implementeringen, se kommentarerna "
"högst upp i filen :file:`Objects/obmalloc.c` i Pythons källkod. Ovanstående "
"länk pekar på filen i python.org SVN-webbläsaren."

msgid "Build and C API Changes"
msgstr "Ändringar i Build och C API"

msgid "Changes to Python's build process and to the C API include:"
msgstr "Ändringar i Pythons byggprocess och i C API inkluderar:"

msgid ""
"The cycle detection implementation used by the garbage collection has proven "
"to be stable, so it's now been made mandatory.  You can no longer compile "
"Python without it, and the :option:`!--with-cycle-gc` switch to :program:"
"`configure` has been removed."
msgstr ""
"Implementationen av cykeldetektering som används av skräpinsamlingen har "
"visat sig vara stabil, så den har nu gjorts obligatorisk.  Du kan inte "
"längre kompilera Python utan det, och :option:`!--with-cycle-gc` till :"
"program:`configure` har tagits bort."

msgid ""
"Python can now optionally be built as a shared library (:file:`libpython2.3."
"so`) by supplying :option:`!--enable-shared` when running Python's :program:"
"`configure` script.  (Contributed by Ondrej Palkovsky.)"
msgstr ""
"Python kan nu eventuellt byggas som ett delat bibliotek (:file:`libpython2.3."
"so`) genom att ange :option:`!--enable-shared` när Pythons :program:"
"`configure`-skript körs.  (Bidrag från Ondrej Palkovsky.)"

msgid ""
"The :c:macro:`!DL_EXPORT` and :c:macro:`!DL_IMPORT` macros are now "
"deprecated. Initialization functions for Python extension modules should now "
"be declared using the new macro :c:macro:`PyMODINIT_FUNC`, while the Python "
"core will generally use the :c:macro:`!PyAPI_FUNC` and :c:macro:`!"
"PyAPI_DATA` macros."
msgstr ""
"Makrot :c:macro:`!DL_EXPORT` och :c:macro:`!DL_IMPORT` är nu föråldrade. "
"Initialiseringsfunktioner för Python-tilläggsmoduler bör nu deklareras med "
"det nya makrot :c:macro:`PyMODINIT_FUNC`, medan Python-kärnan i allmänhet "
"kommer att använda makrot :c:macro:`!PyAPI_FUNC` och :c:macro:`!PyAPI_DATA`."

msgid ""
"The interpreter can be compiled without any docstrings for the built-in "
"functions and modules by supplying :option:`!--without-doc-strings` to the :"
"program:`configure` script. This makes the Python executable about 10% "
"smaller, but will also mean that you can't get help for Python's built-ins.  "
"(Contributed by Gustavo Niemeyer.)"
msgstr ""
"Tolken kan kompileras utan några dokumentsträngar för de inbyggda "
"funktionerna och modulerna genom att ange :option:`!--without-doc-strings` "
"till :program:`configure`-skriptet. Detta gör Pythons körbara program ca 10% "
"smaller, men innebär också att du inte kan få hjälp med Pythons inbyggda "
"funktioner.  (Bidrag från Gustavo Niemeyer.)"

msgid ""
"The :c:func:`!PyArg_NoArgs` macro is now deprecated, and code that uses it "
"should be changed.  For Python 2.2 and later, the method definition table "
"can specify the :c:macro:`METH_NOARGS` flag, signalling that there are no "
"arguments, and the argument checking can then be removed.  If compatibility "
"with pre-2.2 versions of Python is important, the code could use "
"``PyArg_ParseTuple(args, \"\")`` instead, but this will be slower than "
"using :c:macro:`METH_NOARGS`."
msgstr ""
"Makrot :c:func:`!PyArg_NoArgs` är nu föråldrat, och kod som använder det bör "
"ändras.  För Python 2.2 och senare kan metoddefinitionstabellen ange :c:"
"macro:`METH_NOARGS`-flaggan, vilket signalerar att det inte finns några "
"argument, och argumentkontrollen kan då tas bort.  Om kompatibilitet med "
"Python-versioner före 2.2 är viktig, kan koden använda "
"``PyArg_ParseTuple(args, \"\")`` istället, men detta kommer att vara "
"långsammare än att använda :c:macro:`METH_NOARGS`."

msgid ""
":c:func:`PyArg_ParseTuple` accepts new format characters for various sizes "
"of unsigned integers: ``B`` for :c:expr:`unsigned char`, ``H`` for :c:expr:"
"`unsigned short int`,  ``I`` for :c:expr:`unsigned int`,  and ``K`` for :c:"
"expr:`unsigned long long`."
msgstr ""
":c:func:`PyArg_ParseTuple` accepterar nya formattecken för olika storlekar "
"av osignerade heltal: ``B`` för :c:expr:`unsigned char`, ``H`` för :c:expr:"
"`unsigned short int`, ``I`` för :c:expr:`unsigned int`, och ``K`` för :c:"
"expr:`unsigned long long`."

msgid ""
"A new function, ``PyObject_DelItemString(mapping, char *key)`` was added as "
"shorthand for ``PyObject_DelItem(mapping, PyString_New(key))``."
msgstr ""
"En ny funktion, ``PyObject_DelItemString(mappning, char *nyckel)`` lades "
"till som kortform för ``PyObject_DelItem(mappning, PyString_New(nyckel))``."

msgid ""
"File objects now manage their internal string buffer differently, increasing "
"it exponentially when needed.  This results in the benchmark tests in :file:"
"`Lib/test/test_bufio.py` speeding up considerably (from 57 seconds to 1.7 "
"seconds, according to one measurement)."
msgstr ""
"File-objekt hanterar nu sin interna strängbuffert annorlunda och ökar den "
"exponentiellt när det behövs.  Detta resulterar i att benchmarktesterna i :"
"file:`Lib/test/test_bufio.py` går betydligt snabbare (från 57 sekunder till "
"1,7 sekunder, enligt en mätning)."

msgid ""
"It's now possible to define class and static methods for a C extension type "
"by setting either the :c:macro:`METH_CLASS` or :c:macro:`METH_STATIC` flags "
"in a method's :c:type:`PyMethodDef` structure."
msgstr ""
"Det är nu möjligt att definiera klass- och statiska metoder för en C-"
"tilläggstyp genom att ange antingen :c:macro:`METH_CLASS`- eller :c:macro:"
"`METH_STATIC`-flaggorna i en metods :c:type:`PyMethodDef`-struktur."

msgid ""
"Python now includes a copy of the Expat XML parser's source code, removing "
"any dependence on a system version or local installation of Expat."
msgstr ""
"Python innehåller nu en kopia av Expat XML-parserns källkod, vilket gör att "
"man inte längre är beroende av en systemversion eller lokal installation av "
"Expat."

msgid ""
"If you dynamically allocate type objects in your extension, you should be "
"aware of a change in the rules relating to the :attr:`~type.__module__` and :"
"attr:`~type.__name__` attributes.  In summary, you will want to ensure the "
"type's dictionary contains a ``'__module__'`` key; making the module name "
"the part of the type name leading up to the final period will no longer have "
"the desired effect.  For more detail, read the API reference documentation "
"or the  source."
msgstr ""
"Om du dynamiskt allokerar typobjekt i ditt tillägg bör du vara medveten om "
"en ändring i reglerna för attributen :attr:`~type.__module__` och :attr:"
"`~type.__name__`.  Sammanfattningsvis bör du se till att typens dictionary "
"innehåller nyckeln ``'__module__``; att göra modulnamnet till den del av "
"typnamnet som leder fram till den sista perioden kommer inte längre att ha "
"önskad effekt.  För mer detaljer, läs API-referensdokumentationen eller "
"källan."

msgid "Port-Specific Changes"
msgstr "Hamnspecifika ändringar"

msgid ""
"Support for a port to IBM's OS/2 using the EMX runtime environment was "
"merged into the main Python source tree.  EMX is a POSIX emulation layer "
"over the OS/2 system APIs.  The Python port for EMX tries to support all the "
"POSIX-like capability exposed by the EMX runtime, and mostly succeeds; :func:"
"`!fork` and :func:`fcntl` are restricted by the limitations of the "
"underlying emulation layer.  The standard OS/2 port, which uses IBM's Visual "
"Age compiler, also gained support for case-sensitive import semantics as "
"part of the integration of the EMX port into CVS.  (Contributed by Andrew "
"MacIntyre.)"
msgstr ""
"Stöd för en portning till IBM:s OS/2 med hjälp av EMX runtime-miljön slogs "
"samman med Pythons huvudkällträd.  EMX är ett POSIX-emuleringslager över "
"OS/2-systemets API:er.  Python-portningen för EMX försöker stödja alla POSIX-"
"liknande funktioner som EMX runtime erbjuder och lyckas för det mesta; :func:"
"`!fork` och :func:`fcntl` begränsas av det underliggande emuleringslagrets "
"begränsningar.  Standardporten för OS/2, som använder IBM:s Visual Age-"
"kompilator, fick också stöd för skiftlägeskänslig importsemantik som en del "
"av integrationen av EMX-porten i CVS.  (Bidrag från Andrew MacIntyre.)"

msgid ""
"On MacOS, most toolbox modules have been weaklinked to improve backward "
"compatibility.  This means that modules will no longer fail to load if a "
"single routine is missing on the current OS version. Instead calling the "
"missing routine will raise an exception. (Contributed by Jack Jansen.)"
msgstr ""
"På MacOS har de flesta verktygslådemoduler försetts med svaga länkar för att "
"förbättra bakåtkompatibiliteten.  Detta innebär att moduler inte längre "
"misslyckas med att laddas om en enda rutin saknas i den aktuella OS-"
"versionen. Istället kommer anrop av den saknade rutinen att ge upphov till "
"ett undantag. (Bidrag från Jack Jansen.)"

msgid ""
"The RPM spec files, found in the :file:`Misc/RPM/` directory in the Python "
"source distribution, were updated for 2.3.  (Contributed by Sean "
"Reifschneider.)"
msgstr ""
"RPM-specifikationsfilerna, som finns i katalogen :file:`Misc/RPM/` i Python-"
"källdistributionen, uppdaterades för 2.3. (Bidrag från Sean Reifschneider.)"

msgid ""
"Other new platforms now supported by Python include AtheOS (http://www."
"atheos.cx/), GNU/Hurd, and OpenVMS."
msgstr ""
"Andra nya plattformar som nu stöds av Python är AtheOS (http://www.atheos."
"cx/), GNU/Hurd och OpenVMS."

msgid "Other Changes and Fixes"
msgstr "Övriga ändringar och korrigeringar"

msgid ""
"As usual, there were a bunch of other improvements and bugfixes scattered "
"throughout the source tree.  A search through the CVS change logs finds "
"there were 523 patches applied and 514 bugs fixed between Python 2.2 and "
"2.3.  Both figures are likely to be underestimates."
msgstr ""
"Som vanligt fanns det en massa andra förbättringar och buggfixar utspridda i "
"hela källträdet.  En sökning genom CVS-ändringsloggarna visar att det fanns "
"523 patchar tillämpade och 514 buggar fixade mellan Python 2.2 och 2.3.  "
"Båda siffrorna är sannolikt underskattningar."

msgid "Some of the more notable changes are:"
msgstr "Några av de mer anmärkningsvärda förändringarna är:"

msgid ""
"If the :envvar:`PYTHONINSPECT` environment variable is set, the Python "
"interpreter will enter the interactive prompt after running a Python "
"program, as if Python had been invoked with the :option:`-i` option. The "
"environment variable can be set before running the Python interpreter, or it "
"can be set by the Python program as part of its execution."
msgstr ""
"Om miljövariabeln :envvar:`PYTHONINSPECT` är inställd kommer Python-tolken "
"att gå till den interaktiva prompten efter att ha kört ett Python-program, "
"som om Python hade anropats med alternativet :option:`-i`. Miljövariabeln "
"kan sättas innan Python-tolken körs, eller så kan den sättas av Python-"
"programmet som en del av dess exekvering."

msgid ""
"The :file:`regrtest.py` script now provides a way to allow \"all resources "
"except *foo*.\"  A resource name passed to the :option:`!-u` option can now "
"be prefixed with a hyphen (``'-'``) to mean \"remove this resource.\"  For "
"example, the option '``-uall,-bsddb``' could be used to enable the use of "
"all resources except ``bsddb``."
msgstr ""
"Skriptet :file:`regrtest.py` erbjuder nu ett sätt att tillåta \"alla "
"resurser utom *foo*\"  Ett resursnamn som skickas till alternativet :option:"
"`!-u` kan nu förses med ett bindestreck (``'-'``) för att betyda \"ta bort "
"den här resursen\"  Till exempel kan alternativet \"``-uall,-bsddb``\" "
"användas för att aktivera användningen av alla resurser utom ``bsddb``."

msgid ""
"The tools used to build the documentation now work under Cygwin as well as "
"Unix."
msgstr ""
"De verktyg som används för att bygga dokumentationen fungerar nu under "
"Cygwin såväl som Unix."

msgid ""
"The ``SET_LINENO`` opcode has been removed.  Back in the mists of time, this "
"opcode was needed to produce line numbers in tracebacks and support trace "
"functions (for, e.g., :mod:`pdb`). Since Python 1.5, the line numbers in "
"tracebacks have been computed using a different mechanism that works with "
"\"python -O\".  For Python 2.3 Michael Hudson implemented a similar scheme "
"to determine when to call the trace function, removing the need for "
"``SET_LINENO`` entirely."
msgstr ""
"Operativkoden ``SET_LINENO`` har tagits bort.  Förr i tiden behövdes denna "
"opcode för att producera radnummer i spårningar och stödja "
"spårningsfunktioner (för t.ex. :mod:`pdb`). Sedan Python 1.5 har radnumren i "
"tracebacks beräknats med hjälp av en annan mekanism som fungerar med "
"\"python -O\".  För Python 2.3 har Michael Hudson implementerat ett liknande "
"system för att avgöra när trace-funktionen ska anropas, vilket helt tar bort "
"behovet av ``SET_LINENO``."

msgid ""
"It would be difficult to detect any resulting difference from Python code, "
"apart from a slight speed up when Python is run without :option:`-O`."
msgstr ""
"Det skulle vara svårt att upptäcka någon skillnad i Python-kod, bortsett "
"från en liten hastighetsökning när Python körs utan :option:`-O`."

msgid ""
"C extensions that access the :attr:`~frame.f_lineno` field of frame objects "
"should instead call ``PyCode_Addr2Line(f->f_code, f->f_lasti)``. This will "
"have the added effect of making the code work as desired under \"python -O\" "
"in earlier versions of Python."
msgstr ""
"C-tillägg som använder fältet :attr:`~frame.f_lineno` i frame-objekt bör "
"istället anropa ``PyCode_Addr2Line(f->f_code, f->f_lasti)``. Detta kommer "
"att ha den extra effekten att koden fungerar som önskat under \"python -O\" "
"i tidigare versioner av Python."

msgid ""
"A nifty new feature is that trace functions can now assign to the :attr:"
"`~frame.f_lineno` attribute of frame objects, changing the line that will be "
"executed next.  A ``jump`` command has been added to the :mod:`pdb` debugger "
"taking advantage of this new feature. (Implemented by Richie Hindle.)"
msgstr ""
"En fiffig ny funktion är att spårningsfunktioner nu kan tilldelas "
"attributet :attr:`~frame.f_lineno` för frame-objekt, vilket ändrar vilken "
"rad som kommer att exekveras härnäst.  Ett ``jump``-kommando har lagts till "
"i :mod:`pdb`-felsökaren för att dra nytta av denna nya funktion. "
"(Implementerat av Richie Hindle.)"

msgid "Porting to Python 2.3"
msgstr "Portning till Python 2.3"

msgid ""
"This section lists previously described changes that may require changes to "
"your code:"
msgstr ""
"I detta avsnitt listas tidigare beskrivna ändringar som kan kräva ändringar "
"i din kod:"

msgid ""
":keyword:`yield` is now always a keyword; if it's used as a variable name in "
"your code, a different name must be chosen."
msgstr ""
":keyword:`yield` är nu alltid ett nyckelord; om det används som variabelnamn "
"i din kod måste du välja ett annat namn."

msgid ""
"For strings *X* and *Y*, ``X in Y`` now works if *X* is more than one "
"character long."
msgstr ""
"För strängar *X* och *Y* fungerar nu ``X i Y`` om *X* är mer än ett tecken "
"lång."

msgid ""
"The :func:`int` type constructor will now return a long integer instead of "
"raising an :exc:`OverflowError` when a string or floating-point number is "
"too large to fit into an integer."
msgstr ""
"Typkonstruktören :func:`int` returnerar nu ett långt heltal istället för att "
"ge upphov till ett :exc:`OverflowError` när en sträng eller ett flyttal är "
"för stort för att rymmas i ett heltal."

msgid ""
"If you have Unicode strings that contain 8-bit characters, you must declare "
"the file's encoding (UTF-8, Latin-1, or whatever) by adding a comment to the "
"top of the file.  See section :ref:`section-encodings` for more information."
msgstr ""
"Om du har Unicode-strängar som innehåller 8-bitars tecken måste du ange "
"filens kodning (UTF-8, Latin-1 eller något annat) genom att lägga till en "
"kommentar längst upp i filen.  Se avsnitt :ref:`section-encodings` för mer "
"information."

msgid ""
"Calling Tcl methods through :mod:`!_tkinter` no longer  returns only "
"strings. Instead, if Tcl returns other objects those objects are converted "
"to their Python equivalent, if one exists, or wrapped with a :class:`!"
"_tkinter.Tcl_Obj` object if no Python equivalent exists."
msgstr ""
"Anrop av Tcl-metoder via :mod:`!_tkinter` returnerar inte längre bara "
"strängar. Istället, om Tcl returnerar andra objekt konverteras dessa objekt "
"till sin Python-ekvivalent, om en sådan finns, eller omsluts med ett :class:"
"`!_tkinter.Tcl_Obj`-objekt om ingen Python-ekvivalent finns."

msgid ""
"Large octal and hex literals such as ``0xffffffff`` now trigger a :exc:"
"`FutureWarning`. Currently they're stored as 32-bit numbers and result in a "
"negative value, but in Python 2.4 they'll become positive long integers."
msgstr ""
"Stora oktal- och hex-literaler som ``0xffffffff`` utlöser nu en :exc:"
"`FutureWarning`. För närvarande lagras de som 32-bitars tal och resulterar i "
"ett negativt värde, men i Python 2.4 kommer de att bli positiva långa heltal."

msgid ""
"There are a few ways to fix this warning.  If you really need a positive "
"number, just add an ``L`` to the end of the literal.  If you're trying to "
"get a 32-bit integer with low bits set and have previously used an "
"expression such as ``~(1 << 31)``, it's probably clearest to start with all "
"bits set and clear the desired upper bits. For example, to clear just the "
"top bit (bit 31), you could write ``0xffffffffL &~(1L<<31)``."
msgstr ""
"Det finns några sätt att åtgärda denna varning.  Om du verkligen behöver ett "
"positivt tal, lägg bara till ett ``L`` i slutet av det bokstavliga talet.  "
"Om du försöker få ett 32-bitars heltal med låga bitar inställda och tidigare "
"har använt ett uttryck som ``~(1 << 31)``, är det förmodligen tydligast att "
"börja med alla bitar inställda och rensa de önskade övre bitarna. Om du till "
"exempel bara vill rensa den översta biten (bit 31) kan du skriva "
"``0xffffffffffL &~(1L<<31)``."

msgid "You can no longer disable assertions by assigning to ``__debug__``."
msgstr ""
"Du kan inte längre inaktivera påståenden genom att tilldela till "
"``__debug__``."

msgid ""
"The Distutils :func:`!setup` function has gained various new keyword "
"arguments such as *depends*.  Old versions of the Distutils will abort if "
"passed unknown keywords.  A solution is to check for the presence of the "
"new :func:`!get_distutil_options` function in your :file:`setup.py` and only "
"uses the new keywords with a version of the Distutils that supports them::"
msgstr ""
"Distutils :func:`!setup`-funktion har fått flera nya nyckelordsargument som "
"*depends*.  Gamla versioner av Distutils kommer att avbrytas om okända "
"nyckelord skickas.  En lösning är att kontrollera om den nya funktionen :"
"func:`!get_distutil_options` finns i din :file:`setup.py` och endast använda "
"de nya nyckelorden med en version av Distutils som stöder dem::"

msgid ""
"from distutils import core\n"
"\n"
"kw = {'sources': 'foo.c', ...}\n"
"if hasattr(core, 'get_distutil_options'):\n"
"    kw['depends'] = ['foo.h']\n"
"ext = Extension(**kw)"
msgstr ""
"from distutils import core\n"
"\n"
"kw = {'sources': 'foo.c', ...}\n"
"if hasattr(core, 'get_distutil_options'):\n"
"    kw['depends'] = ['foo.h']\n"
"ext = Extension(**kw)"

msgid ""
"Using ``None`` as a variable name will now result in a :exc:`SyntaxWarning` "
"warning."
msgstr ""
"Att använda ``None`` som variabelnamn kommer nu att resultera i en :exc:"
"`SyntaxWarning`-varning."

msgid ""
"Names of extension types defined by the modules included with Python now "
"contain the module and a ``'.'`` in front of the type name."
msgstr ""
"Namn på tilläggstyper som definieras av de moduler som ingår i Python "
"innehåller nu modulen och en ``'.'`` framför typnamnet."

msgid "Acknowledgements"
msgstr "Tack till"

msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Jeff Bauer, Simon Brunning, Brett Cannon, Michael Chermside, Andrew Dalke, "
"Scott David Daniels, Fred L. Drake, Jr., David Fraser,  Kelly Gerber, "
"Raymond Hettinger, Michael Hudson, Chris Lambert, Detlef Lannert, Martin von "
"Löwis, Andrew MacIntyre, Lalo Martins, Chad Netzer, Gustavo Niemeyer, Neal "
"Norwitz, Hans Nowak, Chris Reedy, Francesco Ricciardi, Vinay Sajip, Neil "
"Schemenauer, Roman Suzi, Jason Tishler, Just van Rossum."
msgstr ""
"Författaren vill tacka följande personer för förslag, korrigeringar och "
"hjälp med olika utkast till denna artikel: Jeff Bauer, Simon Brunning, Brett "
"Cannon, Michael Chermside, Andrew Dalke, Scott David Daniels, Fred L. Drake, "
"Jr, David Fraser, Kelly Gerber, Raymond Hettinger, Michael Hudson, Chris "
"Lambert, Detlef Lannert, Martin von Löwis, Andrew MacIntyre, Lalo Martins, "
"Chad Netzer, Gustavo Niemeyer, Neal Norwitz, Hans Nowak, Chris Reedy, "
"Francesco Ricciardi, Vinay Sajip, Neil Schemenauer, Roman Suzi, Jason "
"Tishler, Just van Rossum."

msgid "universal newlines"
msgstr "universella nya rader"

msgid "What's new"
msgstr "Vad är nytt"
