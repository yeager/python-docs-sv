# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-23 14:15+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!glob` --- Unix style pathname pattern expansion"
msgstr ""

msgid "**Source code:** :source:`Lib/glob.py`"
msgstr ""

msgid ""
"The :mod:`glob` module finds all the pathnames matching a specified pattern "
"according to the rules used by the Unix shell, although results are returned "
"in arbitrary order.  No tilde expansion is done, but ``*``, ``?``, and "
"character ranges expressed with ``[]`` will be correctly matched.  This is "
"done by using the :func:`os.scandir` and :func:`fnmatch.fnmatch` functions "
"in concert, and not by actually invoking a subshell."
msgstr ""

msgid ""
"Note that files beginning with a dot (``.``) can only be matched by patterns "
"that also start with a dot, unlike :func:`fnmatch.fnmatch` or :func:`pathlib."
"Path.glob`. (For tilde and shell variable expansion, use :func:`os.path."
"expanduser` and :func:`os.path.expandvars`.)"
msgstr ""

msgid ""
"For a literal match, wrap the meta-characters in brackets. For example, "
"``'[?]'`` matches the character ``'?'``."
msgstr ""

msgid "The :mod:`glob` module defines the following functions:"
msgstr ""

msgid ""
"Return a possibly empty list of path names that match *pathname*, which must "
"be a string containing a path specification. *pathname* can be either "
"absolute (like :file:`/usr/src/Python-1.5/Makefile`) or relative (like :file:"
"`../../Tools/\\*/\\*.gif`), and can contain shell-style wildcards. Broken "
"symlinks are included in the results (as in the shell). Whether or not the "
"results are sorted depends on the file system.  If a file that satisfies "
"conditions is removed or added during the call of this function, whether a "
"path name for that file will be included is unspecified."
msgstr ""

msgid ""
"If *root_dir* is not ``None``, it should be a :term:`path-like object` "
"specifying the root directory for searching.  It has the same effect on :"
"func:`glob` as changing the current directory before calling it.  If "
"*pathname* is relative, the result will contain paths relative to *root_dir*."
msgstr ""

msgid ""
"This function can support :ref:`paths relative to directory descriptors "
"<dir_fd>` with the *dir_fd* parameter."
msgstr ""

msgid ""
"If *recursive* is true, the pattern \"``**``\" will match any files and zero "
"or more directories, subdirectories and symbolic links to directories. If "
"the pattern is followed by an :data:`os.sep` or :data:`os.altsep` then files "
"will not match."
msgstr ""

msgid ""
"If *include_hidden* is true, \"``**``\" pattern will match hidden "
"directories."
msgstr ""

msgid ""
"Raises an :ref:`auditing event <auditing>` ``glob.glob`` with arguments "
"``pathname``, ``recursive``."
msgstr ""

msgid ""
"Raises an :ref:`auditing event <auditing>` ``glob.glob/2`` with arguments "
"``pathname``, ``recursive``, ``root_dir``, ``dir_fd``."
msgstr ""

msgid ""
"Using the \"``**``\" pattern in large directory trees may consume an "
"inordinate amount of time."
msgstr ""

msgid ""
"This function may return duplicate path names if *pathname* contains "
"multiple \"``**``\" patterns and *recursive* is true."
msgstr ""

msgid "Support for recursive globs using \"``**``\"."
msgstr ""

msgid "Added the *root_dir* and *dir_fd* parameters."
msgstr ""

msgid "Added the *include_hidden* parameter."
msgstr ""

msgid ""
"Return an :term:`iterator` which yields the same values as :func:`glob` "
"without actually storing them all simultaneously."
msgstr ""

msgid ""
"Escape all special characters (``'?'``, ``'*'`` and ``'['``). This is useful "
"if you want to match an arbitrary literal string that may have special "
"characters in it.  Special characters in drive/UNC sharepoints are not "
"escaped, e.g. on Windows ``escape('//?/c:/Quo vadis?.txt')`` returns ``'//?/"
"c:/Quo vadis[?].txt'``."
msgstr ""

msgid ""
"Convert the given path specification to a regular expression for use with :"
"func:`re.match`. The path specification can contain shell-style wildcards."
msgstr ""

msgid "For example:"
msgstr ""

msgid ""
"Path separators and segments are meaningful to this function, unlike :func:"
"`fnmatch.translate`. By default wildcards do not match path separators, and "
"``*`` pattern segments match precisely one path segment."
msgstr ""

msgid ""
"If *recursive* is true, the pattern segment \"``**``\" will match any number "
"of path segments."
msgstr ""

msgid ""
"If *include_hidden* is true, wildcards can match path segments that start "
"with a dot (``.``)."
msgstr ""

msgid ""
"A sequence of path separators may be supplied to the *seps* argument. If not "
"given, :data:`os.sep` and :data:`~os.altsep` (if available) are used."
msgstr ""

msgid ""
":meth:`pathlib.PurePath.full_match` and :meth:`pathlib.Path.glob` methods, "
"which call this function to implement pattern matching and globbing."
msgstr ""

msgid "Examples"
msgstr ""

msgid ""
"Consider a directory containing the following files: :file:`1.gif`, :file:`2."
"txt`, :file:`card.gif` and a subdirectory :file:`sub` which contains only "
"the file :file:`3.txt`.  :func:`glob` will produce the following results.  "
"Notice how any leading components of the path are preserved. ::"
msgstr ""

msgid ""
">>> import glob\n"
">>> glob.glob('./[0-9].*')\n"
"['./1.gif', './2.txt']\n"
">>> glob.glob('*.gif')\n"
"['1.gif', 'card.gif']\n"
">>> glob.glob('?.gif')\n"
"['1.gif']\n"
">>> glob.glob('**/*.txt', recursive=True)\n"
"['2.txt', 'sub/3.txt']\n"
">>> glob.glob('./**/', recursive=True)\n"
"['./', './sub/']"
msgstr ""

msgid ""
"If the directory contains files starting with ``.`` they won't be matched by "
"default. For example, consider a directory containing :file:`card.gif` and :"
"file:`.card.gif`::"
msgstr ""

msgid ""
">>> import glob\n"
">>> glob.glob('*.gif')\n"
"['card.gif']\n"
">>> glob.glob('.c*')\n"
"['.card.gif']"
msgstr ""

msgid ""
"The :mod:`fnmatch` module offers shell-style filename (not path) expansion."
msgstr ""

msgid "The :mod:`pathlib` module offers high-level path objects."
msgstr ""

msgid "filenames"
msgstr ""

msgid "pathname expansion"
msgstr ""

msgid "* (asterisk)"
msgstr ""

msgid "in glob-style wildcards"
msgstr ""

msgid "? (question mark)"
msgstr ""

msgid "[] (square brackets)"
msgstr ""

msgid "! (exclamation)"
msgstr ""

msgid "- (minus)"
msgstr ""

msgid ". (dot)"
msgstr ""

msgid "**"
msgstr ""
