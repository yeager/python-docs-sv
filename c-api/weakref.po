# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 20:38+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Weak Reference Objects"
msgstr "Svaga referensobjekt"

msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The first "
"is a simple reference object, and the second acts as a proxy for the "
"original object as much as it can."
msgstr ""
"Python stöder *svaga referenser* som förstklassiga objekt.  Det finns två "
"specifika objekttyper som direkt implementerar svaga referenser.  Det första "
"är ett enkelt referensobjekt, och det andra fungerar som en proxy för det "
"ursprungliga objektet så mycket det kan."

msgid ""
"Return non-zero if *ob* is either a reference or proxy object.  This "
"function always succeeds."
msgstr ""
"Returnerar icke-noll om *ob* är antingen en referens eller ett proxyobjekt.  "
"Denna funktion lyckas alltid."

msgid ""
"Return non-zero if *ob* is a reference object.  This function always "
"succeeds."
msgstr ""
"Returnerar icke-noll om *ob* är ett referensobjekt.  Denna funktion lyckas "
"alltid."

msgid ""
"Return non-zero if *ob* is a proxy object.  This function always succeeds."
msgstr ""
"Returnerar icke-noll om *ob* är ett proxyobjekt.  Denna funktion lyckas "
"alltid."

msgid ""
"Return a weak reference object for the object *ob*.  This will always return "
"a new reference, but is not guaranteed to create a new object; an existing "
"reference object may be returned.  The second parameter, *callback*, can be "
"a callable object that receives notification when *ob* is garbage collected; "
"it should accept a single parameter, which will be the weak reference object "
"itself. *callback* may also be ``None`` or ``NULL``.  If *ob* is not a "
"weakly referenceable object, or if *callback* is not callable, ``None``, or "
"``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"Returnerar ett svagt referensobjekt för objektet *ob*.  Detta kommer alltid "
"att returnera en ny referens, men det är inte garanterat att ett nytt objekt "
"skapas; ett befintligt referensobjekt kan returneras.  Den andra parametern, "
"*callback*, kan vara ett anropsbart objekt som får meddelande när *ob* "
"garbage collected; det bör acceptera en enda parameter, som kommer att vara "
"det svaga referensobjektet självt. *callback* kan också vara ``None`` eller "
"``NULL``.  Om *ob* inte är ett svagt refererbart objekt, eller om *callback* "
"inte är anropbart, ``None``, eller ``NULL``, kommer detta att returnera "
"``NULL`` och ge upphov till :exc:`TypeError`."

msgid ""
"Return a weak reference proxy object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing proxy object may be returned.  The second parameter, *callback*, "
"can be a callable object that receives notification when *ob* is garbage "
"collected; it should accept a single parameter, which will be the weak "
"reference object itself. *callback* may also be ``None`` or ``NULL``.  If "
"*ob* is not a weakly referenceable object, or if *callback* is not callable, "
"``None``, or ``NULL``, this will return ``NULL`` and raise :exc:`TypeError`."
msgstr ""
"Returnerar ett proxyobjekt med svag referens för objektet *ob*.  Detta "
"kommer alltid att returnera en ny referens, men det är inte garanterat att "
"ett nytt objekt skapas; ett befintligt proxyobjekt kan returneras.  Den "
"andra parametern, *callback*, kan vara ett anropsbart objekt som får "
"meddelande när *ob* samlas in; det bör acceptera en enda parameter, som "
"kommer att vara själva det svaga referensobjektet. *callback* kan också vara "
"``None`` eller ``NULL``.  Om *ob* inte är ett svagt refererbart objekt, "
"eller om *callback* inte är anropbart, ``None``, eller ``NULL``, kommer "
"detta att returnera ``NULL`` och ge upphov till :exc:`TypeError`."

msgid ""
"Get a :term:`strong reference` to the referenced object from a weak "
"reference, *ref*, into *\\*pobj*."
msgstr ""
"Hämta en :term:`stark referens` till det refererade objektet från en svag "
"referens, *ref*, till *\\*pobj*."

msgid ""
"On success, set *\\*pobj* to a new :term:`strong reference` to the "
"referenced object and return 1."
msgstr ""
"Vid framgång, sätt *\\*pobj* till en ny :term:`strong reference` till det "
"refererade objektet och returnera 1."

msgid "If the reference is dead, set *\\*pobj* to ``NULL`` and return 0."
msgstr "Om referensen är död, sätt *\\*pobj* till ``NULL`` och returnera 0."

msgid "On error, raise an exception and return -1."
msgstr "Vid fel, skapa ett undantag och returnera -1."

msgid ""
"Return a :term:`borrowed reference` to the referenced object from a weak "
"reference, *ref*.  If the referent is no longer live, returns ``Py_None``."
msgstr ""
"Returnerar en :term:`lånad referens` till det refererade objektet från en "
"svag referens, *ref*.  Om referensen inte längre är levande, returneras "
"``Py_None``."

msgid ""
"This function returns a :term:`borrowed reference` to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except when it cannot be destroyed before the last usage of the borrowed "
"reference."
msgstr ""
"Denna funktion returnerar en :term:`lånad referens` till det refererade "
"objektet. Detta innebär att du alltid bör anropa :c:func:`Py_INCREF` på "
"objektet utom när det inte kan förstöras innan den sista användningen av den "
"lånade referensen."

msgid "Use :c:func:`PyWeakref_GetRef` instead."
msgstr "Använd :c:func:`PyWeakref_GetRef` istället."

msgid "Similar to :c:func:`PyWeakref_GetObject`, but does no error checking."
msgstr "Liknar :c:func:`PyWeakref_GetObject`, men gör ingen felkontroll."

msgid ""
"Test if the weak reference *ref* is dead. Returns 1 if the reference is "
"dead, 0 if it is alive, and -1 with an error set if *ref* is not a weak "
"reference object."
msgstr ""
"Testar om den svaga referensen *ref* är död. Returnerar 1 om referensen är "
"död, 0 om den är levande och -1 med en felinställning om *ref* inte är ett "
"svagt referensobjekt."

msgid ""
"This function is called by the :c:member:`~PyTypeObject.tp_dealloc` handler "
"to clear weak references."
msgstr ""
"Denna funktion anropas av handläggaren :c:member:`~PyTypeObject.tp_dealloc` "
"för att rensa svaga referenser."

msgid ""
"This iterates through the weak references for *object* and calls callbacks "
"for those references which have one. It returns when all callbacks have been "
"attempted."
msgstr ""
"Detta itererar genom de svaga referenserna för *objekt* och anropar "
"callbacks för de referenser som har en sådan. Den returnerar när alla anrop "
"har försökts."

msgid "Clears the weakrefs for *object* without calling the callbacks."
msgstr "Rensar weakrefs för *object* utan att anropa callbacks."

msgid ""
"This function is called by the :c:member:`~PyTypeObject.tp_dealloc` handler "
"for types with finalizers (i.e., :meth:`~object.__del__`).  The handler for "
"those objects first calls :c:func:`PyObject_ClearWeakRefs` to clear weakrefs "
"and call their callbacks, then the finalizer, and finally this function to "
"clear any weakrefs that may have been created by the finalizer."
msgstr ""
"Denna funktion anropas av :c:member:`~PyTypeObject.tp_dealloc`-hanteraren "
"för typer med finalizers (dvs. :meth:`~object.__del__`).  Hanteraren för "
"dessa objekt anropar först :c:func:`PyObject_ClearWeakRefs` för att rensa "
"weakrefs och anropa deras callbacks, sedan finalizern och slutligen denna "
"funktion för att rensa alla weakrefs som kan ha skapats av finalizern."

msgid ""
"In most circumstances, it's more appropriate to use :c:func:"
"`PyObject_ClearWeakRefs` to clear weakrefs instead of this function."
msgstr ""
"Under de flesta omständigheter är det lämpligare att använda :c:func:"
"`PyObject_ClearWeakRefs` för att rensa weakrefs istället för den här "
"funktionen."
