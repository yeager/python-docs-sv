# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 20:38+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Allocating Objects on the Heap"
msgstr "Tilldela objekt på heapen"

msgid ""
"Initialize a newly allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  Other fields of the object are "
"not initialized.  Despite its name, this function is unrelated to the "
"object's :meth:`~object.__init__` method (:c:member:`~PyTypeObject.tp_init` "
"slot).  Specifically, this function does **not** call the object's :meth:`!"
"__init__` method."
msgstr ""
"Initialiserar ett nyallokerat objekt *op* med dess typ och initiala "
"referens.  Returnerar det initialiserade objektet.  Andra fält i objektet "
"initialiseras inte.  Trots sitt namn är denna funktion inte relaterad till "
"objektets :meth:`~object.__init__`-metod (:c:member:`~PyTypeObject.tp_init` "
"slot).  Specifikt anropar den här funktionen **inte** objektets :meth:`!"
"__init__`-metod."

msgid ""
"In general, consider this function to be a low-level routine. Use :c:member:"
"`~PyTypeObject.tp_alloc` where possible. For implementing :c:member:`!"
"tp_alloc` for your type, prefer :c:func:`PyType_GenericAlloc` or :c:func:"
"`PyObject_New`."
msgstr ""
"I allmänhet bör du betrakta denna funktion som en lågnivårutin. Använd :c:"
"member:`~PyTypeObject.tp_alloc` där det är möjligt. För implementering av :c:"
"member:`!tp_alloc` för din typ, föredra :c:func:`PyType_GenericAlloc` eller :"
"c:func:`PyObject_New`."

msgid ""
"This function only initializes the object's memory corresponding to the "
"initial :c:type:`PyObject` structure.  It does not zero the rest."
msgstr ""
"Denna funktion initialiserar endast objektets minne som motsvarar den "
"ursprungliga :c:type:`PyObject`-strukturen.  Den nollställer inte resten."

msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""
"Detta gör allt som :c:func:`PyObject_Init` gör, och initierar även "
"längdinformationen för ett objekt med variabel storlek."

msgid ""
"This function only initializes some of the object's memory.  It does not "
"zero the rest."
msgstr ""
"Denna funktion initialiserar endast en del av objektets minne.  Den "
"nollställer inte resten."

msgid ""
"Allocates a new Python object using the C structure type *TYPE* and the "
"Python type object *typeobj* (``PyTypeObject*``) by calling :c:func:"
"`PyObject_Malloc` to allocate memory and initializing it like :c:func:"
"`PyObject_Init`.  The caller will own the only reference to the object (i.e. "
"its reference count will be one)."
msgstr ""
"Allokerar ett nytt Python-objekt med hjälp av C-strukturtypen *TYPE* och "
"Python-typobjektet *typeobj* (``PyTypeObject*``) genom att anropa :c:func:"
"`PyObject_Malloc` för att allokera minne och initiera det som :c:func:"
"`PyObject_Init`.  Anroparen kommer att äga den enda referensen till objektet "
"(d.v.s. dess referensantal kommer att vara ett)."

msgid ""
"Avoid calling this directly to allocate memory for an object; call the "
"type's :c:member:`~PyTypeObject.tp_alloc` slot instead."
msgstr ""
"Undvik att anropa detta direkt för att allokera minne för ett objekt; anropa "
"istället typens :c:member:`~PyTypeObject.tp_alloc` slot."

msgid ""
"When populating a type's :c:member:`~PyTypeObject.tp_alloc` slot, :c:func:"
"`PyType_GenericAlloc` is preferred over a custom function that simply calls "
"this macro."
msgstr ""
"När en typs :c:member:`~PyTypeObject.tp_alloc`-plats fylls i är :c:func:"
"`PyType_GenericAlloc` att föredra framför en anpassad funktion som helt "
"enkelt anropar detta makro."

msgid ""
"This macro does not call :c:member:`~PyTypeObject.tp_alloc`, :c:member:"
"`~PyTypeObject.tp_new` (:meth:`~object.__new__`), or :c:member:"
"`~PyTypeObject.tp_init` (:meth:`~object.__init__`)."
msgstr ""
"Detta makro anropar inte :c:member:`~PyTypeObject.tp_alloc`, :c:member:"
"`~PyTypeObject.tp_new` (:meth:`~object.__new__`), eller :c:member:"
"`~PyTypeObject.tp_init` (:meth:`~object.__init__`)."

msgid ""
"This cannot be used for objects with :c:macro:`Py_TPFLAGS_HAVE_GC` set in :c:"
"member:`~PyTypeObject.tp_flags`; use :c:macro:`PyObject_GC_New` instead."
msgstr ""
"Detta kan inte användas för objekt med :c:macro:`Py_TPFLAGS_HAVE_GC` "
"inställt i :c:member:`~PyTypeObject.tp_flags`; använd :c:macro:"
"`PyObject_GC_New` istället."

msgid ""
"Memory allocated by this macro must be freed with :c:func:`PyObject_Free` "
"(usually called via the object's :c:member:`~PyTypeObject.tp_free` slot)."
msgstr ""
"Minne som allokerats av detta makro måste frigöras med :c:func:"
"`PyObject_Free` (anropas vanligtvis via objektets :c:member:`~PyTypeObject."
"tp_free` slot)."

msgid ""
"The returned memory is not guaranteed to have been completely zeroed before "
"it was initialized."
msgstr ""
"Det är inte säkert att det returnerade minnet har nollställts helt innan det "
"initialiserades."

msgid ""
"This macro does not construct a fully initialized object of the given type; "
"it merely allocates memory and prepares it for further initialization by :c:"
"member:`~PyTypeObject.tp_init`.  To construct a fully initialized object, "
"call *typeobj* instead.  For example::"
msgstr ""
"Detta makro konstruerar inte ett fullständigt initialiserat objekt av den "
"angivna typen; det allokerar bara minne och förbereder det för ytterligare "
"initialisering av :c:member:`~PyTypeObject.tp_init`.  För att konstruera ett "
"helt initialiserat objekt, anropa *typeobj* istället.  Till exempel::"

msgid "PyObject *foo = PyObject_CallNoArgs((PyObject *)&PyFoo_Type);"
msgstr "PyObject *foo = PyObject_CallNoArgs((PyObject *)&PyFoo_Type);"

msgid ":c:func:`PyObject_Free`"
msgstr ":c:func:`PyObject_Free`"

msgid ":c:macro:`PyObject_GC_New`"
msgstr ":c:makro:`PyObject_GC_New`"

msgid ":c:func:`PyType_GenericAlloc`"
msgstr ":c:func:`PyType_GenericAlloc`"

msgid ":c:member:`~PyTypeObject.tp_alloc`"
msgstr ":c:medlem:`~PyTypeObject.tp_alloc`"

msgid "Like :c:macro:`PyObject_New` except:"
msgstr "Som :c:macro:`PyObject_New` utom:"

msgid ""
"It allocates enough memory for the *TYPE* structure plus *size* "
"(``Py_ssize_t``) fields of the size given by the :c:member:`~PyTypeObject."
"tp_itemsize` field of *typeobj*."
msgstr ""
"Den allokerar tillräckligt med minne för *TYPE*-strukturen plus *size*-fält "
"(``Py_ssize_t``) med den storlek som anges av fältet :c:member:"
"`~PyTypeObject.tp_itemsize` i *typeobj*."

msgid "The memory is initialized like :c:func:`PyObject_InitVar`."
msgstr "Minnet initialiseras på samma sätt som :c:func:`PyObject_InitVar`."

msgid ""
"This is useful for implementing objects like tuples, which are able to "
"determine their size at construction time.  Embedding the array of fields "
"into the same allocation decreases the number of allocations, improving the "
"memory management efficiency."
msgstr ""
"Detta är användbart för att implementera objekt som t.ex. tupler, som kan "
"bestämma sin storlek vid konstruktionstillfället.  Om fältmatrisen bäddas in "
"i samma allokering minskar antalet allokeringar, vilket förbättrar "
"minneshanteringens effektivitet."

msgid ""
"This cannot be used for objects with :c:macro:`Py_TPFLAGS_HAVE_GC` set in :c:"
"member:`~PyTypeObject.tp_flags`; use :c:macro:`PyObject_GC_NewVar` instead."
msgstr ""
"Detta kan inte användas för objekt med :c:macro:`Py_TPFLAGS_HAVE_GC` "
"inställt i :c:member:`~PyTypeObject.tp_flags`; använd :c:macro:"
"`PyObject_GC_NewVar` istället."

msgid ""
"Memory allocated by this function must be freed with :c:func:`PyObject_Free` "
"(usually called via the object's :c:member:`~PyTypeObject.tp_free` slot)."
msgstr ""
"Minne som allokerats av denna funktion måste frigöras med :c:func:"
"`PyObject_Free` (anropas vanligtvis via objektets :c:member:`~PyTypeObject."
"tp_free` slot)."

msgid ""
"PyObject *list_instance = PyObject_CallNoArgs((PyObject *)&PyList_Type);"
msgstr ""
"PyObject *list_instance = PyObject_CallNoArgs((PyObject *)&PyList_Type);"

msgid ":c:macro:`PyObject_GC_NewVar`"
msgstr ":c:makro:`PyObject_GC_NewVar`"

msgid "Same as :c:func:`PyObject_Free`."
msgstr "Samma som :c:func:`PyObject_Free`."

msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""
"Objekt som är synligt i Python som ``None``.  Detta bör endast nås med hjälp "
"av :c:macro:`Py_None`-makrot, som utvärderas till en pekare till detta "
"objekt."

msgid ":ref:`moduleobjects`"
msgstr ":ref:`modulobjekt`"

msgid "To allocate and create extension modules."
msgstr "För att tilldela och skapa tilläggsmoduler."
