# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!fnmatch` --- Unix filename pattern matching"
msgstr ""

msgid "**Source code:** :source:`Lib/fnmatch.py`"
msgstr ""

msgid ""
"This module provides support for Unix shell-style wildcards, which are *not* "
"the same as regular expressions (which are documented in the :mod:`re` "
"module).  The special characters used in shell-style wildcards are:"
msgstr ""

msgid "Pattern"
msgstr ""

msgid "Meaning"
msgstr ""

msgid "``*``"
msgstr ""

msgid "matches everything"
msgstr ""

msgid "``?``"
msgstr ""

msgid "matches any single character"
msgstr ""

msgid "``[seq]``"
msgstr ""

msgid "matches any character in *seq*"
msgstr ""

msgid "``[!seq]``"
msgstr ""

msgid "matches any character not in *seq*"
msgstr ""

msgid ""
"For a literal match, wrap the meta-characters in brackets. For example, "
"``'[?]'`` matches the character ``'?'``."
msgstr ""

msgid ""
"Note that the filename separator (``'/'`` on Unix) is *not* special to this "
"module.  See module :mod:`glob` for pathname expansion (:mod:`glob` uses :"
"func:`.filter` to match pathname segments).  Similarly, filenames starting "
"with a period are not special for this module, and are matched by the ``*`` "
"and ``?`` patterns."
msgstr ""

msgid ""
"Unless stated otherwise, \"filename string\" and \"pattern string\" either "
"refer to :class:`str` or ``ISO-8859-1`` encoded :class:`bytes` objects. Note "
"that the functions documented below do not allow to mix a :class:`!bytes` "
"pattern with a :class:`!str` filename, and vice-versa."
msgstr ""

msgid ""
"Finally, note that :func:`functools.lru_cache` with a *maxsize* of 32768 is "
"used to cache the (typed) compiled regex patterns in the following "
"functions: :func:`fnmatch`, :func:`fnmatchcase`, :func:`.filter`, :func:`."
"filterfalse`."
msgstr ""

msgid ""
"Test whether the filename string *name* matches the pattern string *pat*, "
"returning ``True`` or ``False``.  Both parameters are case-normalized using :"
"func:`os.path.normcase`. :func:`fnmatchcase` can be used to perform a case-"
"sensitive comparison, regardless of whether that's standard for the "
"operating system."
msgstr ""

msgid ""
"This example will print all file names in the current directory with the "
"extension ``.txt``::"
msgstr ""

msgid ""
"import fnmatch\n"
"import os\n"
"\n"
"for file in os.listdir('.'):\n"
"    if fnmatch.fnmatch(file, '*.txt'):\n"
"        print(file)"
msgstr ""

msgid ""
"Test whether the filename string *name* matches the pattern string *pat*, "
"returning ``True`` or ``False``; the comparison is case-sensitive and does "
"not apply :func:`os.path.normcase`."
msgstr ""

msgid ""
"Construct a list from those elements of the :term:`iterable` of filename "
"strings *names* that match the pattern string *pat*. It is the same as ``[n "
"for n in names if fnmatch(n, pat)]``, but implemented more efficiently."
msgstr ""

msgid ""
"Construct a list from those elements of the :term:`iterable` of filename "
"strings *names* that do not match the pattern string *pat*. It is the same "
"as ``[n for n in names if not fnmatch(n, pat)]``, but implemented more "
"efficiently."
msgstr ""

msgid ""
"Return the shell-style pattern *pat* converted to a regular expression for "
"using with :func:`re.match`. The pattern is expected to be a :class:`str`."
msgstr ""

msgid "Example:"
msgstr ""

msgid "Module :mod:`glob`"
msgstr ""

msgid "Unix shell-style path expansion."
msgstr ""

msgid "filenames"
msgstr ""

msgid "wildcard expansion"
msgstr ""

msgid "module"
msgstr ""

msgid "re"
msgstr ""

msgid "* (asterisk)"
msgstr ""

msgid "in glob-style wildcards"
msgstr ""

msgid "? (question mark)"
msgstr ""

msgid "[] (square brackets)"
msgstr ""

msgid "! (exclamation)"
msgstr ""

msgid "- (minus)"
msgstr ""

msgid "glob"
msgstr ""
