# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "PyTime C API"
msgstr ""

msgid ""
"The clock C API provides access to system clocks. It is similar to the "
"Python :mod:`time` module."
msgstr ""

msgid ""
"For C API related to the :mod:`datetime` module, see :ref:`datetimeobjects`."
msgstr ""

msgid "Types"
msgstr ""

msgid ""
"A timestamp or duration in nanoseconds, represented as a signed 64-bit "
"integer."
msgstr ""

msgid ""
"The reference point for timestamps depends on the clock used. For example, :"
"c:func:`PyTime_Time` returns timestamps relative to the UNIX epoch."
msgstr ""

msgid ""
"The supported range is around [-292.3 years; +292.3 years]. Using the Unix "
"epoch (January 1st, 1970) as reference, the supported date range is around "
"[1677-09-21; 2262-04-11]. The exact limits are exposed as constants:"
msgstr ""

msgid "Minimum value of :c:type:`PyTime_t`."
msgstr ""

msgid "Maximum value of :c:type:`PyTime_t`."
msgstr ""

msgid "Clock Functions"
msgstr ""

msgid ""
"The following functions take a pointer to a :c:expr:`PyTime_t` that they set "
"to the value of a particular clock. Details of each clock are given in the "
"documentation of the corresponding Python function."
msgstr ""

msgid ""
"The functions return ``0`` on success, or ``-1`` (with an exception set) on "
"failure."
msgstr ""

msgid ""
"On integer overflow, they set the :c:data:`PyExc_OverflowError` exception "
"and set ``*result`` to the value clamped to the ``[PyTime_MIN; PyTime_MAX]`` "
"range. (On current systems, integer overflows are likely caused by "
"misconfigured system time.)"
msgstr ""

msgid ""
"As any other C API (unless otherwise specified), the functions must be "
"called with an :term:`attached thread state`."
msgstr ""

msgid ""
"Read the monotonic clock. See :func:`time.monotonic` for important details "
"on this clock."
msgstr ""

msgid ""
"Read the performance counter. See :func:`time.perf_counter` for important "
"details on this clock."
msgstr ""

msgid ""
"Read the “wall clock” time. See :func:`time.time` for details important on "
"this clock."
msgstr ""

msgid "Raw Clock Functions"
msgstr ""

msgid ""
"Similar to clock functions, but don't set an exception on error and don't "
"require the caller to have an :term:`attached thread state`."
msgstr ""

msgid "On success, the functions return ``0``."
msgstr ""

msgid ""
"On failure, they set ``*result`` to ``0`` and return ``-1``, *without* "
"setting an exception. To get the cause of the error, :term:`attach <attached "
"thread state>` a :term:`thread state`, and call the regular (non-``Raw``) "
"function. Note that the regular function may succeed after the ``Raw`` one "
"failed."
msgstr ""

msgid ""
"Similar to :c:func:`PyTime_Monotonic`, but don't set an exception on error "
"and don't require an :term:`attached thread state`."
msgstr ""

msgid ""
"Similar to :c:func:`PyTime_PerfCounter`, but don't set an exception on error "
"and don't require an :term:`attached thread state`."
msgstr ""

msgid ""
"Similar to :c:func:`PyTime_Time`, but don't set an exception on error and "
"don't require an :term:`attached thread state`."
msgstr ""

msgid "Conversion functions"
msgstr ""

msgid "Convert a timestamp to a number of seconds as a C :c:expr:`double`."
msgstr ""

msgid ""
"The function cannot fail, but note that :c:expr:`double` has limited "
"accuracy for large values."
msgstr ""
