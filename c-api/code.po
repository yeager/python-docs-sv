# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 20:38+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Code Objects"
msgstr "Kodobjekt"

msgid ""
"Code objects are a low-level detail of the CPython implementation. Each one "
"represents a chunk of executable code that hasn't yet been bound into a "
"function."
msgstr ""
"Kodobjekt är en detalj på låg nivå i CPython-implementeringen. Var och en "
"representerar en bit körbar kod som ännu inte har bundits till en funktion."

msgid ""
"The C structure of the objects used to describe code objects.  The fields of "
"this type are subject to change at any time."
msgstr ""
"C-strukturen för de objekt som används för att beskriva kodobjekt.  Fälten "
"av denna typ kan ändras när som helst."

msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :ref:"
"`code object <code-objects>`."
msgstr ""
"Detta är en instans av :c:type:`PyTypeObject` som representerar Python :ref:"
"`kodobjekt <code-objects>`."

msgid ""
"Return true if *co* is a :ref:`code object <code-objects>`. This function "
"always succeeds."
msgstr ""
"Returnerar true om *co* är ett :ref:`kodobjekt <code-objects>`. Denna "
"funktion lyckas alltid."

msgid ""
"Return the number of :term:`free (closure) variables <closure variable>` in "
"a code object."
msgstr ""
"Returnera antalet :term:`fria (stängda) variabler <closure variable>` i ett "
"kodobjekt."

msgid ""
"Return the position of the first :term:`free (closure) variable <closure "
"variable>` in a code object."
msgstr ""
"Returnerar positionen för den första :term:`fria (stängda) variabeln "
"<closure variable>` i ett kodobjekt."

msgid ""
"Renamed from ``PyCode_GetFirstFree`` as part of :ref:`unstable-c-api`. The "
"old name is deprecated, but will remain available until the signature "
"changes again."
msgstr ""
"Bytt namn från ``PyCode_GetFirstFree`` som en del av :ref:`unstable-c-api`. "
"Det gamla namnet är föråldrat, men kommer att finnas kvar tills signaturen "
"ändras igen."

msgid ""
"Return a new code object.  If you need a dummy code object to create a "
"frame, use :c:func:`PyCode_NewEmpty` instead."
msgstr ""
"Returnerar ett nytt kodobjekt.  Om du behöver ett dummy-kodobjekt för att "
"skapa en ram, använd :c:func:`PyCode_NewEmpty` istället."

msgid ""
"Since the definition of the bytecode changes often, calling :c:func:"
"`PyUnstable_Code_New` directly can bind you to a precise Python version."
msgstr ""
"Eftersom definitionen av bytekoden ändras ofta kan ett direkt anrop av :c:"
"func:`PyUnstable_Code_New` binda dig till en exakt Python-version."

msgid ""
"The many arguments of this function are inter-dependent in complex ways, "
"meaning that subtle changes to values are likely to result in incorrect "
"execution or VM crashes. Use this function only with extreme care."
msgstr ""
"De många argumenten i denna funktion är beroende av varandra på ett komplext "
"sätt, vilket innebär att små förändringar av värdena sannolikt leder till "
"felaktigt utförande eller VM-krascher. Använd denna funktion endast med "
"yttersta försiktighet."

msgid "Added ``qualname`` and ``exceptiontable`` parameters."
msgstr "Lagt till parametrarna ``qualname`` och ``exceptiontable``."

msgid ""
"Renamed from ``PyCode_New`` as part of :ref:`unstable-c-api`. The old name "
"is deprecated, but will remain available until the signature changes again."
msgstr ""
"Bytt namn från ``PyCode_New`` som en del av :ref:`unstable-c-api`. Det gamla "
"namnet är föråldrat, men kommer att finnas kvar tills signaturen ändras igen."

msgid ""
"Similar to :c:func:`PyUnstable_Code_New`, but with an extra "
"\"posonlyargcount\" for positional-only arguments. The same caveats that "
"apply to ``PyUnstable_Code_New`` also apply to this function."
msgstr ""
"Liknar :c:func:`PyUnstable_Code_New`, men med ett extra \"posonlyargcount\" "
"för enbart positionella argument. Samma varningar som gäller för "
"``PyUnstable_Code_New`` gäller också för denna funktion."

msgid "as ``PyCode_NewWithPosOnlyArgs``"
msgstr "som ``PyCode_NewWithPosOnlyArgs``"

msgid "Added ``qualname`` and  ``exceptiontable`` parameters."
msgstr "Lagt till parametrarna ``qualname`` och ``exceptiontable``."

msgid ""
"Renamed to ``PyUnstable_Code_NewWithPosOnlyArgs``. The old name is "
"deprecated, but will remain available until the signature changes again."
msgstr ""
"Bytt namn till ``PyUnstable_Code_NewWithPosOnlyArgs``. Det gamla namnet är "
"föråldrat, men kommer att finnas kvar tills signaturen ändras igen."

msgid ""
"Return a new empty code object with the specified filename, function name, "
"and first line number. The resulting code object will raise an ``Exception`` "
"if executed."
msgstr ""
"Returnerar ett nytt tomt kodobjekt med angivet filnamn, funktionsnamn och "
"första radnummer. Det resulterande kodobjektet kommer att ge upphov till ett "
"``Exception`` om det körs."

msgid ""
"Return the line number of the instruction that occurs on or before "
"``byte_offset`` and ends after it. If you just need the line number of a "
"frame, use :c:func:`PyFrame_GetLineNumber` instead."
msgstr ""
"Returnerar radnumret för den instruktion som börjar på eller före "
"``byte_offset`` och slutar efter den. Om du bara behöver radnumret för en "
"frame, använd :c:func:`PyFrame_GetLineNumber` istället."

msgid ""
"For efficiently iterating over the line numbers in a code object, use :pep:"
"`the API described in PEP 626 <0626#out-of-process-debuggers-and-profilers>`."
msgstr ""
"För effektiv iterering över radnumren i ett kodobjekt, använd :pep:`det API "
"som beskrivs i PEP 626 <0626#out-of-process-debuggers-and-profilers>`."

msgid ""
"Sets the passed ``int`` pointers to the source code line and column numbers "
"for the instruction at ``byte_offset``. Sets the value to ``0`` when "
"information is not available for any particular element."
msgstr ""
"Ställer in de överlämnade ``int``pekarna till källkodens rad- och "
"kolumnnummer för instruktionen vid ``byte_offset``. Sätter värdet till ``0`` "
"när information inte är tillgänglig för något särskilt element."

msgid "Returns ``1`` if the function succeeds and 0 otherwise."
msgstr "Returnerar ``1`` om funktionen lyckas och 0 annars."

msgid ""
"Equivalent to the Python code ``getattr(co, 'co_code')``. Returns a strong "
"reference to a :c:type:`PyBytesObject` representing the bytecode in a code "
"object. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Motsvarar Python-koden ``getattr(co, 'co_code')``. Returnerar en stark "
"referens till ett :c:type:`PyBytesObject` som representerar bytekoden i ett "
"kodobjekt. Vid fel returneras ``NULL`` och ett undantag tas upp."

msgid ""
"This ``PyBytesObject`` may be created on-demand by the interpreter and does "
"not necessarily represent the bytecode actually executed by CPython. The "
"primary use case for this function is debuggers and profilers."
msgstr ""
"Detta ``PyBytesObject`` kan skapas på begäran av tolken och representerar "
"inte nödvändigtvis den bytekod som faktiskt exekveras av CPython. Det "
"primära användningsområdet för denna funktion är debuggers och profilerare."

msgid ""
"Equivalent to the Python code ``getattr(co, 'co_varnames')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables. On error, ``NULL`` is returned and an exception is raised."
msgstr ""
"Motsvarar Python-koden ``getattr(co, 'co_varnames')``. Returnerar en ny "
"referens till ett :c:type:`PyTupleObject` som innehåller namnen på de lokala "
"variablerna. Vid fel returneras ``NULL`` och ett undantag tas upp."

msgid ""
"Equivalent to the Python code ``getattr(co, 'co_cellvars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the local "
"variables that are referenced by nested functions. On error, ``NULL`` is "
"returned and an exception is raised."
msgstr ""
"Motsvarar Python-koden ``getattr(co, 'co_cellvars')``. Returnerar en ny "
"referens till ett :c:type:`PyTupleObject` som innehåller namnen på de lokala "
"variabler som refereras av nästlade funktioner. Vid fel returneras ``NULL`` "
"och ett undantag tas upp."

msgid ""
"Equivalent to the Python code ``getattr(co, 'co_freevars')``. Returns a new "
"reference to a :c:type:`PyTupleObject` containing the names of the :term:"
"`free (closure) variables <closure variable>`. On error, ``NULL`` is "
"returned and an exception is raised."
msgstr ""
"Motsvarar Python-koden ``getattr(co, 'co_freevars')``. Returnerar en ny "
"referens till ett :c:type:`PyTupleObject` som innehåller namnen på :term:"
"`free (closure) variables <closure variable>`. Vid fel returneras ``NULL`` "
"och ett undantag tas upp."

msgid ""
"Register *callback* as a code object watcher for the current interpreter. "
"Return an ID which may be passed to :c:func:`PyCode_ClearWatcher`. In case "
"of error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""
"Registrera *callback* som en kodobjektsövervakare för den aktuella tolken. "
"Returnerar ett ID som kan skickas till :c:func:`PyCode_ClearWatcher`. I "
"händelse av fel (t.ex. inga fler ID:n tillgängliga), returnera ``-1`` och "
"sätt ett undantag."

msgid ""
"Clear watcher identified by *watcher_id* previously returned from :c:func:"
"`PyCode_AddWatcher` for the current interpreter. Return ``0`` on success, or "
"``-1`` and set an exception on error (e.g. if the given *watcher_id* was "
"never registered.)"
msgstr ""
"Rensa en övervakare identifierad av *watcher_id* som tidigare returnerats "
"från :c:func:`PyCode_AddWatcher` för den aktuella tolken. Returnerar ``0`` "
"vid framgång, eller ``-1`` och anger ett undantag vid fel (t.ex. om det "
"givna *watcher_id* aldrig registrerades)"

msgid ""
"Enumeration of possible code object watcher events: - "
"``PY_CODE_EVENT_CREATE`` - ``PY_CODE_EVENT_DESTROY``"
msgstr ""
"Uppräkning av möjliga händelser för kodobjektsövervakare: - "
"``PY_CODE_EVENT_CREATE`` - ``PY_CODE_EVENT_DESTROY`` - "
"``PY_CODE_EVENT_DESTROY``"

msgid "Type of a code object watcher callback function."
msgstr "Typ av återuppringningsfunktion för en kodobjektsövervakare."

msgid ""
"If *event* is ``PY_CODE_EVENT_CREATE``, then the callback is invoked after "
"*co* has been fully initialized. Otherwise, the callback is invoked before "
"the destruction of *co* takes place, so the prior state of *co* can be "
"inspected."
msgstr ""
"Om *event* är ``PY_CODE_EVENT_CREATE``, anropas återuppringningen efter att "
"*co* har initialiserats helt och hållet. I annat fall anropas "
"återuppringningen innan *co* förstörs, så att *co*s tidigare tillstånd kan "
"inspekteras."

msgid ""
"If *event* is ``PY_CODE_EVENT_DESTROY``, taking a reference in the callback "
"to the about-to-be-destroyed code object will resurrect it and prevent it "
"from being freed at this time. When the resurrected object is destroyed "
"later, any watcher callbacks active at that time will be called again."
msgstr ""
"Om *event* är ``PY_CODE_EVENT_DESTROY`` kommer en referens i "
"återuppringningen till det kodobjekt som ska förstöras att återuppliva det "
"och förhindra att det frigörs vid den här tidpunkten. När det återupplivade "
"objektet förstörs senare kommer alla watchers callbacks som är aktiva vid "
"den tidpunkten att anropas igen."

msgid ""
"Users of this API should not rely on internal runtime implementation "
"details. Such details may include, but are not limited to, the exact order "
"and timing of creation and destruction of code objects. While changes in "
"these details may result in differences observable by watchers (including "
"whether a callback is invoked or not), it does not change the semantics of "
"the Python code being executed."
msgstr ""
"Användare av detta API bör inte förlita sig på interna "
"implementeringsdetaljer för körtiden. Sådana detaljer kan inkludera, men är "
"inte begränsade till, den exakta ordningen och tidpunkten för skapande och "
"förstörelse av kodobjekt. Även om ändringar i dessa detaljer kan resultera i "
"skillnader som kan observeras av observatörer (inklusive om en "
"återuppringning anropas eller inte), ändrar det inte semantiken i den Python-"
"kod som exekveras."

msgid ""
"If the callback sets an exception, it must return ``-1``; this exception "
"will be printed as an unraisable exception using :c:func:"
"`PyErr_WriteUnraisable`. Otherwise it should return ``0``."
msgstr ""
"Om callbacken anger ett undantag måste den returnera ``-1``; detta undantag "
"kommer att skrivas ut som ett undantag som inte kan bedömas med :c:func:"
"`PyErr_WriteUnraisable`. Annars bör det returnera ``0``."

msgid ""
"There may already be a pending exception set on entry to the callback. In "
"this case, the callback should return ``0`` with the same exception still "
"set. This means the callback may not call any other API that can set an "
"exception unless it saves and clears the exception state first, and restores "
"it before returning."
msgstr ""
"Det kan redan finnas ett väntande undantag inställt vid ingången till "
"återuppringningen. I detta fall bör återuppringningen returnera ``0`` med "
"samma undantag fortfarande inställt. Detta innebär att återuppringningen "
"inte får anropa något annat API som kan ställa in ett undantag om det inte "
"sparar och rensar undantagstillståndet först och återställer det innan det "
"returneras."

msgid "Code Object Flags"
msgstr "Kod Objekt Flaggor"

msgid ""
"Code objects contain a bit-field of flags, which can be retrieved as the :"
"attr:`~codeobject.co_flags` Python attribute (for example using :c:func:"
"`PyObject_GetAttrString`), and set using a *flags* argument to :c:func:"
"`PyUnstable_Code_New` and similar functions."
msgstr ""
"Kodobjekt innehåller ett bitfält med flaggor, som kan hämtas som Python-"
"attributet :attr:`~codeobject.co_flags` (till exempel med :c:func:"
"`PyObject_GetAttrString`) och ställas in med ett *flags*-argument till :c:"
"func:`PyUnstable_Code_New` och liknande funktioner."

msgid ""
"Flags whose names start with ``CO_FUTURE_`` correspond to features normally "
"selectable by :ref:`future statements <future>`. These flags can be used in :"
"c:member:`PyCompilerFlags.cf_flags`. Note that many ``CO_FUTURE_`` flags are "
"mandatory in current versions of Python, and setting them has no effect."
msgstr ""
"Flaggor vars namn börjar med ``CO_FUTURE_`` motsvarar funktioner som normalt "
"kan väljas med :ref:``future statements <future>``. Dessa flaggor kan "
"användas i :c:member:`PyCompilerFlags.cf_flags`. Observera att många "
"``CO_FUTURE_``-flaggor är obligatoriska i nuvarande versioner av Python, och "
"att ange dem har ingen effekt."

msgid ""
"The following flags are available. For their meaning, see the linked "
"documentation of their Python equivalents."
msgstr ""
"Följande flaggor finns tillgängliga. För deras betydelse, se den länkade "
"dokumentationen för deras Python-ekvivalenter."

msgid "Flag"
msgstr "Flagga"

msgid "Meaning"
msgstr "Betydelse"

msgid ":py:data:`inspect.CO_OPTIMIZED`"
msgstr ":py:data:`inspect.CO_OPTIMIZED`"

msgid ":py:data:`inspect.CO_NEWLOCALS`"
msgstr ":py:data:`inspect.CO_NEWLOCALS`"

msgid ":py:data:`inspect.CO_VARARGS`"
msgstr ":py:data:`inspect.CO_VARARGS`"

msgid ":py:data:`inspect.CO_VARKEYWORDS`"
msgstr ":py:data:`inspect.CO_VARKEYWORDS`"

msgid ":py:data:`inspect.CO_NESTED`"
msgstr ":py:data:`inspect.CO_NESTED`"

msgid ":py:data:`inspect.CO_GENERATOR`"
msgstr ":py:data:`inspect.CO_GENERATOR`"

msgid ":py:data:`inspect.CO_COROUTINE`"
msgstr ":py:data:`inspect.CO_COROUTINE`"

msgid ":py:data:`inspect.CO_ITERABLE_COROUTINE`"
msgstr ":py:data:`inspect.CO_ITERABLE_COROUTINE`"

msgid ":py:data:`inspect.CO_ASYNC_GENERATOR`"
msgstr ":py:data:`inspect.CO_ASYNC_GENERATOR`"

msgid ":py:data:`inspect.CO_HAS_DOCSTRING`"
msgstr ":py:data:`inspect.CO_HAS_DOCSTRING`"

msgid ":py:data:`inspect.CO_METHOD`"
msgstr ":py:data:`inspect.CO_METHOD`"

msgid "no effect (:py:data:`__future__.division`)"
msgstr "ingen effekt (:py:data:`__future__.division`)"

msgid "no effect (:py:data:`__future__.absolute_import`)"
msgstr "ingen effekt (:py:data:`__future__.absolute_import`)"

msgid "no effect (:py:data:`__future__.with_statement`)"
msgstr "ingen effekt (:py:data:`__future__.with_statement`)"

msgid "no effect (:py:data:`__future__.print_function`)"
msgstr "ingen effekt (:py:data:`__future__.print_function`)"

msgid "no effect (:py:data:`__future__.unicode_literals`)"
msgstr "ingen effekt (:py:data:`__future__.unicode_literals`)"

msgid "no effect (:py:data:`__future__.generator_stop`)"
msgstr "ingen effekt (:py:data:`__future__.generator_stop`)"

msgid ":py:data:`__future__.annotations`"
msgstr ":py:data:`__future__.anteckningar`"

msgid "Extra information"
msgstr "Extra information"

msgid ""
"To support low-level extensions to frame evaluation, such as external just-"
"in-time compilers, it is possible to attach arbitrary extra data to code "
"objects."
msgstr ""
"För att stödja lågnivåtillägg till ramutvärdering, t.ex. externa just-in-"
"time-kompilatorer, är det möjligt att bifoga godtyckliga extra data till "
"kodobjekt."

msgid ""
"These functions are part of the unstable C API tier: this functionality is a "
"CPython implementation detail, and the API may change without deprecation "
"warnings."
msgstr ""
"Dessa funktioner är en del av den instabila C API-nivån: denna "
"funktionalitet är en CPython-implementeringsdetalj, och API kan ändras utan "
"varningar om avskrivning."

msgid "Return a new an opaque index value used to adding data to code objects."
msgstr ""
"Returnerar ett nytt opakt indexvärde som används för att lägga till data i "
"kodobjekt."

msgid ""
"You generally call this function once (per interpreter) and use the result "
"with ``PyCode_GetExtra`` and ``PyCode_SetExtra`` to manipulate data on "
"individual code objects."
msgstr ""
"Du anropar vanligtvis den här funktionen en gång (per tolk) och använder "
"resultatet med ``PyCode_GetExtra`` och ``PyCode_SetExtra`` för att "
"manipulera data på enskilda kodobjekt."

msgid ""
"If *free* is not ``NULL``: when a code object is deallocated, *free* will be "
"called on non-``NULL`` data stored under the new index. Use :c:func:"
"`Py_DecRef` when storing :c:type:`PyObject`."
msgstr ""
"Om *free* inte är ``NULL``: när ett kodobjekt avallokeras kommer *free* att "
"anropas på data som inte är ``NULL`` och som lagras under det nya indexet. "
"Använd :c:func:`Py_DecRef` när du lagrar :c:type:`PyObject`."

msgid "as ``_PyEval_RequestCodeExtraIndex``"
msgstr "som ``_PyEval_RequestCodeExtraIndex``"

msgid ""
"Renamed to ``PyUnstable_Eval_RequestCodeExtraIndex``. The old private name "
"is deprecated, but will be available until the API changes."
msgstr ""
"Bytt namn till ``PyUnstable_Eval_RequestCodeExtraIndex``. Det gamla privata "
"namnet är föråldrat, men kommer att vara tillgängligt tills API ändras."

msgid ""
"Set *extra* to the extra data stored under the given index. Return 0 on "
"success. Set an exception and return -1 on failure."
msgstr ""
"Ställ in *extra* till de extra data som lagras under det angivna indexet. "
"Returnera 0 vid framgång. Ställ in ett undantag och returnera -1 vid "
"misslyckande."

msgid ""
"If no data was set under the index, set *extra* to ``NULL`` and return 0 "
"without setting an exception."
msgstr ""
"Om inga data har angetts under indexet, anges *extra* till ``NULL`` och "
"returneras 0 utan att något undantag anges."

msgid "as ``_PyCode_GetExtra``"
msgstr "som ``_PyCode_GetExtra``"

msgid ""
"Renamed to ``PyUnstable_Code_GetExtra``. The old private name is deprecated, "
"but will be available until the API changes."
msgstr ""
"Bytt namn till ``PyUnstable_Code_GetExtra``. Det gamla privata namnet är "
"föråldrat, men kommer att vara tillgängligt tills API:et ändras."

msgid ""
"Set the extra data stored under the given index to *extra*. Return 0 on "
"success. Set an exception and return -1 on failure."
msgstr ""
"Ställ in de extra data som lagras under det angivna indexet till *extra*. "
"Returnera 0 vid framgång. Ställ in ett undantag och returnera -1 vid "
"misslyckande."

msgid "as ``_PyCode_SetExtra``"
msgstr "som ``_PyCode_SetExtra``"

msgid ""
"Renamed to ``PyUnstable_Code_SetExtra``. The old private name is deprecated, "
"but will be available until the API changes."
msgstr ""
"Bytt namn till ``PyUnstable_Code_SetExtra``. Det gamla privata namnet är "
"föråldrat, men kommer att vara tillgängligt tills API ändras."

msgid "object"
msgstr "objekt"

msgid "code"
msgstr "kod"

msgid "code object"
msgstr "kodobjekt"

msgid "PyCode_New (C function)"
msgstr "PyCode_New (C-funktion)"

msgid "PyCode_NewWithPosOnlyArgs (C function)"
msgstr "PyCode_NewWithPosOnlyArgs (C-funktion)"

msgid "_PyEval_RequestCodeExtraIndex (C function)"
msgstr "_PyEval_RequestCodeExtraIndex (C-funktion)"

msgid "_PyCode_GetExtra (C function)"
msgstr "_PyCode_GetExtra (C-funktion)"

msgid "_PyCode_SetExtra (C function)"
msgstr "_PyCode_SetExtra (C-funktion)"
