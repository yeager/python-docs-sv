# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!xml.dom.pulldom` --- Support for building partial DOM trees"
msgstr ""

msgid "**Source code:** :source:`Lib/xml/dom/pulldom.py`"
msgstr ""

msgid ""
"The :mod:`xml.dom.pulldom` module provides a \"pull parser\" which can also "
"be asked to produce DOM-accessible fragments of the document where "
"necessary. The basic concept involves pulling \"events\" from a stream of "
"incoming XML and processing them. In contrast to SAX which also employs an "
"event-driven processing model together with callbacks, the user of a pull "
"parser is responsible for explicitly pulling events from the stream, looping "
"over those events until either processing is finished or an error condition "
"occurs."
msgstr ""

msgid ""
"If you need to parse untrusted or unauthenticated data, see :ref:`xml-"
"security`."
msgstr ""

msgid ""
"The SAX parser no longer processes general external entities by default to "
"increase security by default. To enable processing of external entities, "
"pass a custom parser instance in::"
msgstr ""

msgid ""
"from xml.dom.pulldom import parse\n"
"from xml.sax import make_parser\n"
"from xml.sax.handler import feature_external_ges\n"
"\n"
"parser = make_parser()\n"
"parser.setFeature(feature_external_ges, True)\n"
"parse(filename, parser=parser)"
msgstr ""

msgid "Example::"
msgstr ""

msgid ""
"from xml.dom import pulldom\n"
"\n"
"doc = pulldom.parse('sales_items.xml')\n"
"for event, node in doc:\n"
"    if event == pulldom.START_ELEMENT and node.tagName == 'item':\n"
"        if int(node.getAttribute('price')) > 50:\n"
"            doc.expandNode(node)\n"
"            print(node.toxml())"
msgstr ""

msgid "``event`` is a constant and can be one of:"
msgstr ""

msgid ":data:`START_ELEMENT`"
msgstr ""

msgid ":data:`END_ELEMENT`"
msgstr ""

msgid ":data:`COMMENT`"
msgstr ""

msgid ":data:`START_DOCUMENT`"
msgstr ""

msgid ":data:`END_DOCUMENT`"
msgstr ""

msgid ":data:`CHARACTERS`"
msgstr ""

msgid ":data:`PROCESSING_INSTRUCTION`"
msgstr ""

msgid ":data:`IGNORABLE_WHITESPACE`"
msgstr ""

msgid ""
"``node`` is an object of type :class:`xml.dom.minidom.Document`, :class:`xml."
"dom.minidom.Element` or :class:`xml.dom.minidom.Text`."
msgstr ""

msgid ""
"Since the document is treated as a \"flat\" stream of events, the document "
"\"tree\" is implicitly traversed and the desired elements are found "
"regardless of their depth in the tree. In other words, one does not need to "
"consider hierarchical issues such as recursive searching of the document "
"nodes, although if the context of elements were important, one would either "
"need to maintain some context-related state (i.e. remembering where one is "
"in the document at any given point) or to make use of the :func:"
"`DOMEventStream.expandNode` method and switch to DOM-related processing."
msgstr ""

msgid "Subclass of :class:`xml.sax.handler.ContentHandler`."
msgstr ""

msgid ""
"Return a :class:`DOMEventStream` from the given input. *stream_or_string* "
"may be either a file name, or a file-like object. *parser*, if given, must "
"be an :class:`~xml.sax.xmlreader.XMLReader` object. This function will "
"change the document handler of the parser and activate namespace support; "
"other parser configuration (like setting an entity resolver) must have been "
"done in advance."
msgstr ""

msgid ""
"If you have XML in a string, you can use the :func:`parseString` function "
"instead:"
msgstr ""

msgid ""
"Return a :class:`DOMEventStream` that represents the (Unicode) *string*."
msgstr ""

msgid "Default value for the *bufsize* parameter to :func:`parse`."
msgstr ""

msgid ""
"The value of this variable can be changed before calling :func:`parse` and "
"the new value will take effect."
msgstr ""

msgid "DOMEventStream Objects"
msgstr ""

msgid "Support for :meth:`~object.__getitem__` method has been removed."
msgstr ""

msgid ""
"Return a tuple containing *event* and the current *node* as :class:`xml.dom."
"minidom.Document` if event equals :data:`START_DOCUMENT`, :class:`xml.dom."
"minidom.Element` if event equals :data:`START_ELEMENT` or :data:"
"`END_ELEMENT` or :class:`xml.dom.minidom.Text` if event equals :data:"
"`CHARACTERS`. The current node does not contain information about its "
"children, unless :func:`expandNode` is called."
msgstr ""

msgid "Expands all children of *node* into *node*. Example::"
msgstr ""

msgid ""
"from xml.dom import pulldom\n"
"\n"
"xml = '<html><title>Foo</title> <p>Some text <div>and more</div></p> </"
"html>'\n"
"doc = pulldom.parseString(xml)\n"
"for event, node in doc:\n"
"    if event == pulldom.START_ELEMENT and node.tagName == 'p':\n"
"        # Following statement only prints '<p/>'\n"
"        print(node.toxml())\n"
"        doc.expandNode(node)\n"
"        # Following statement prints node with all its children '<p>Some "
"text <div>and more</div></p>'\n"
"        print(node.toxml())"
msgstr ""
