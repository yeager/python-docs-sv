# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!copy` --- Shallow and deep copy operations"
msgstr ""

msgid "**Source code:** :source:`Lib/copy.py`"
msgstr ""

msgid ""
"Assignment statements in Python do not copy objects, they create bindings "
"between a target and an object. For collections that are mutable or contain "
"mutable items, a copy is sometimes needed so one can change one copy without "
"changing the other. This module provides generic shallow and deep copy "
"operations (explained below)."
msgstr ""

msgid "Interface summary:"
msgstr ""

msgid "Return a shallow copy of *obj*."
msgstr ""

msgid "Return a deep copy of *obj*."
msgstr ""

msgid ""
"Creates a new object of the same type as *obj*, replacing fields with values "
"from *changes*."
msgstr ""

msgid "Raised for module specific errors."
msgstr ""

msgid ""
"The difference between shallow and deep copying is only relevant for "
"compound objects (objects that contain other objects, like lists or class "
"instances):"
msgstr ""

msgid ""
"A *shallow copy* constructs a new compound object and then (to the extent "
"possible) inserts *references* into it to the objects found in the original."
msgstr ""

msgid ""
"A *deep copy* constructs a new compound object and then, recursively, "
"inserts *copies* into it of the objects found in the original."
msgstr ""

msgid ""
"Two problems often exist with deep copy operations that don't exist with "
"shallow copy operations:"
msgstr ""

msgid ""
"Recursive objects (compound objects that, directly or indirectly, contain a "
"reference to themselves) may cause a recursive loop."
msgstr ""

msgid ""
"Because deep copy copies everything it may copy too much, such as data which "
"is intended to be shared between copies."
msgstr ""

msgid "The :func:`deepcopy` function avoids these problems by:"
msgstr ""

msgid ""
"keeping a ``memo`` dictionary of objects already copied during the current "
"copying pass; and"
msgstr ""

msgid ""
"letting user-defined classes override the copying operation or the set of "
"components copied."
msgstr ""

msgid ""
"This module does not copy types like module, method, stack trace, stack "
"frame, file, socket, window, or any similar types.  It does \"copy\" "
"functions and classes (shallow and deeply), by returning the original object "
"unchanged; this is compatible with the way these are treated by the :mod:"
"`pickle` module."
msgstr ""

msgid ""
"Shallow copies of dictionaries can be made using :meth:`dict.copy`, and of "
"lists by assigning a slice of the entire list, for example, ``copied_list = "
"original_list[:]``."
msgstr ""

msgid ""
"Classes can use the same interfaces to control copying that they use to "
"control pickling.  See the description of module :mod:`pickle` for "
"information on these methods.  In fact, the :mod:`copy` module uses the "
"registered pickle functions from the :mod:`copyreg` module."
msgstr ""

msgid ""
"In order for a class to define its own copy implementation, it can define "
"special methods :meth:`~object.__copy__` and :meth:`~object.__deepcopy__`."
msgstr ""

msgid ""
"Called to implement the shallow copy operation; no additional arguments are "
"passed."
msgstr ""

msgid ""
"Called to implement the deep copy operation; it is passed one argument, the "
"*memo* dictionary.  If the ``__deepcopy__`` implementation needs to make a "
"deep copy of a component, it should call the :func:`~copy.deepcopy` function "
"with the component as first argument and the *memo* dictionary as second "
"argument. The *memo* dictionary should be treated as an opaque object."
msgstr ""

msgid ""
"Function :func:`!copy.replace` is more limited than :func:`~copy.copy` and :"
"func:`~copy.deepcopy`, and only supports named tuples created by :func:"
"`~collections.namedtuple`, :mod:`dataclasses`, and other classes which "
"define method :meth:`~object.__replace__`."
msgstr ""

msgid ""
"This method should create a new object of the same type, replacing fields "
"with values from *changes*."
msgstr ""

msgid "Module :mod:`pickle`"
msgstr ""

msgid ""
"Discussion of the special methods used to support object state retrieval and "
"restoration."
msgstr ""

msgid "module"
msgstr ""

msgid "pickle"
msgstr ""

msgid "__copy__() (copy protocol)"
msgstr ""

msgid "__deepcopy__() (copy protocol)"
msgstr ""

msgid "__replace__() (replace protocol)"
msgstr ""
