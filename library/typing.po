# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!typing` --- Support for type hints"
msgstr ""

msgid "**Source code:** :source:`Lib/typing.py`"
msgstr ""

msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as :term:`type checkers <static "
"type checker>`, IDEs, linters, etc."
msgstr ""

msgid "This module provides runtime support for type hints."
msgstr ""

msgid "Consider the function below::"
msgstr ""

msgid ""
"def surface_area_of_cube(edge_length: float) -> str:\n"
"    return f\"The surface area of the cube is {6 * edge_length ** 2}.\""
msgstr ""

msgid ""
"The function ``surface_area_of_cube`` takes an argument expected to be an "
"instance of :class:`float`, as indicated by the :term:`type hint` "
"``edge_length: float``. The function is expected to return an instance of :"
"class:`str`, as indicated by the ``-> str`` hint."
msgstr ""

msgid ""
"While type hints can be simple classes like :class:`float` or :class:`str`, "
"they can also be more complex. The :mod:`typing` module provides a "
"vocabulary of more advanced type hints."
msgstr ""

msgid ""
"New features are frequently added to the ``typing`` module. The :pypi:"
"`typing_extensions` package provides backports of these new features to "
"older versions of Python."
msgstr ""

msgid ""
"`Typing cheat sheet <https://mypy.readthedocs.io/en/stable/cheat_sheet_py3."
"html>`_"
msgstr ""

msgid "A quick overview of type hints (hosted at the mypy docs)"
msgstr ""

msgid ""
"Type System Reference section of `the mypy docs <https://mypy.readthedocs.io/"
"en/stable/index.html>`_"
msgstr ""

msgid ""
"The Python typing system is standardised via PEPs, so this reference should "
"broadly apply to most Python type checkers. (Some parts may still be "
"specific to mypy.)"
msgstr ""

msgid "`Static Typing with Python <https://typing.python.org/en/latest/>`_"
msgstr ""

msgid ""
"Type-checker-agnostic documentation written by the community detailing type "
"system features, useful typing related tools and typing best practices."
msgstr ""

msgid "Specification for the Python Type System"
msgstr ""

msgid ""
"The canonical, up-to-date specification of the Python type system can be "
"found at `Specification for the Python type system <https://typing.python."
"org/en/latest/spec/index.html>`_."
msgstr ""

msgid "Type aliases"
msgstr ""

msgid ""
"A type alias is defined using the :keyword:`type` statement, which creates "
"an instance of :class:`TypeAliasType`. In this example, ``Vector`` and "
"``list[float]`` will be treated equivalently by static type checkers::"
msgstr ""

msgid ""
"type Vector = list[float]\n"
"\n"
"def scale(scalar: float, vector: Vector) -> Vector:\n"
"    return [scalar * num for num in vector]\n"
"\n"
"# passes type checking; a list of floats qualifies as a Vector.\n"
"new_vector = scale(2.0, [1.0, -4.2, 5.4])"
msgstr ""

msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr ""

msgid ""
"from collections.abc import Sequence\n"
"\n"
"type ConnectionOptions = dict[str, str]\n"
"type Address = tuple[str, int]\n"
"type Server = tuple[Address, ConnectionOptions]\n"
"\n"
"def broadcast_message(message: str, servers: Sequence[Server]) -> None:\n"
"    ...\n"
"\n"
"# The static type checker will treat the previous type signature as\n"
"# being exactly equivalent to this one.\n"
"def broadcast_message(\n"
"    message: str,\n"
"    servers: Sequence[tuple[tuple[str, int], dict[str, str]]]\n"
") -> None:\n"
"    ..."
msgstr ""

msgid ""
"The :keyword:`type` statement is new in Python 3.12. For backwards "
"compatibility, type aliases can also be created through simple assignment::"
msgstr ""

msgid "Vector = list[float]"
msgstr ""

msgid ""
"Or marked with :data:`TypeAlias` to make it explicit that this is a type "
"alias, not a normal variable assignment::"
msgstr ""

msgid ""
"from typing import TypeAlias\n"
"\n"
"Vector: TypeAlias = list[float]"
msgstr ""

msgid "NewType"
msgstr ""

msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr ""

msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"some_id = UserId(524313)"
msgstr ""

msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""

msgid ""
"def get_user_name(user_id: UserId) -> str:\n"
"    ...\n"
"\n"
"# passes type checking\n"
"user_a = get_user_name(UserId(42351))\n"
"\n"
"# fails type checking; an int is not a UserId\n"
"user_b = get_user_name(-1)"
msgstr ""

msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""

msgid ""
"# 'output' is of type 'int', not 'UserId'\n"
"output = UserId(23413) + UserId(54341)"
msgstr ""

msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""

msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""

msgid "It is invalid to create a subtype of ``Derived``::"
msgstr ""

msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"\n"
"# Fails at runtime and does not pass type checking\n"
"class AdminUserId(UserId): pass"
msgstr ""

msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""

msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"\n"
"ProUserId = NewType('ProUserId', UserId)"
msgstr ""

msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr ""

msgid "See :pep:`484` for more details."
msgstr ""

msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``type Alias = Original`` will make the static type "
"checker treat ``Alias`` as being *exactly equivalent* to ``Original`` in all "
"cases. This is useful when you want to simplify complex type signatures."
msgstr ""

msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""

msgid ""
"``NewType`` is now a class rather than a function.  As a result, there is "
"some additional runtime cost when calling ``NewType`` over a regular "
"function."
msgstr ""

msgid ""
"The performance of calling ``NewType`` has been restored to its level in "
"Python 3.9."
msgstr ""

msgid "Annotating callable objects"
msgstr ""

msgid ""
"Functions -- or other :term:`callable` objects -- can be annotated using :"
"class:`collections.abc.Callable` or deprecated :data:`typing.Callable`. "
"``Callable[[int], str]`` signifies a function that takes a single parameter "
"of type :class:`int` and returns a :class:`str`."
msgstr ""

msgid "For example:"
msgstr ""

msgid ""
"from collections.abc import Callable, Awaitable\n"
"\n"
"def feeder(get_next_item: Callable[[], str]) -> None:\n"
"    ...  # Body\n"
"\n"
"def async_query(on_success: Callable[[int], None],\n"
"                on_error: Callable[[int, Exception], None]) -> None:\n"
"    ...  # Body\n"
"\n"
"async def on_update(value: str) -> None:\n"
"    ...  # Body\n"
"\n"
"callback: Callable[[str], Awaitable[None]] = on_update"
msgstr ""

msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types, a :class:`ParamSpec`, :data:`Concatenate`, or an ellipsis. The return "
"type must be a single type."
msgstr ""

msgid ""
"If a literal ellipsis ``...`` is given as the argument list, it indicates "
"that a callable with any arbitrary parameter list would be acceptable:"
msgstr ""

msgid ""
"def concat(x: str, y: str) -> str:\n"
"    return x + y\n"
"\n"
"x: Callable[..., str]\n"
"x = str     # OK\n"
"x = concat  # Also OK"
msgstr ""

msgid ""
"``Callable`` cannot express complex signatures such as functions that take a "
"variadic number of arguments, :ref:`overloaded functions <overload>`, or "
"functions that have keyword-only parameters. However, these signatures can "
"be expressed by defining a :class:`Protocol` class with a :meth:`~object."
"__call__` method:"
msgstr ""

msgid ""
"from collections.abc import Iterable\n"
"from typing import Protocol\n"
"\n"
"class Combiner(Protocol):\n"
"    def __call__(self, *vals: bytes, maxlen: int | None = None) -> "
"list[bytes]: ...\n"
"\n"
"def batch_proc(data: Iterable[bytes], cb_results: Combiner) -> bytes:\n"
"    for item in data:\n"
"        ...\n"
"\n"
"def good_cb(*vals: bytes, maxlen: int | None = None) -> list[bytes]:\n"
"    ...\n"
"def bad_cb(*vals: bytes, maxitems: int | None) -> list[bytes]:\n"
"    ...\n"
"\n"
"batch_proc([], good_cb)  # OK\n"
"batch_proc([], bad_cb)   # Error! Argument 2 has incompatible type because "
"of\n"
"                         # different name and kind in the callback"
msgstr ""

msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form "
"``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""

msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See :"
"pep:`612` for more details."
msgstr ""

msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provides "
"examples of usage in ``Callable``."
msgstr ""

msgid "Generics"
msgstr ""

msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, many container classes in the standard library "
"support subscription to denote the expected types of container elements."
msgstr ""

msgid ""
"from collections.abc import Mapping, Sequence\n"
"\n"
"class Employee: ...\n"
"\n"
"# Sequence[Employee] indicates that all elements in the sequence\n"
"# must be instances of \"Employee\".\n"
"# Mapping[str, str] indicates that all keys and all values in the mapping\n"
"# must be strings.\n"
"def notify_by_email(employees: Sequence[Employee],\n"
"                    overrides: Mapping[str, str]) -> None: ..."
msgstr ""

msgid ""
"Generic functions and classes can be parameterized by using :ref:`type "
"parameter syntax <type-params>`::"
msgstr ""

msgid ""
"from collections.abc import Sequence\n"
"\n"
"def first[T](l: Sequence[T]) -> T:  # Function is generic over the TypeVar "
"\"T\"\n"
"    return l[0]"
msgstr ""

msgid "Or by using the :class:`TypeVar` factory directly::"
msgstr ""

msgid ""
"from collections.abc import Sequence\n"
"from typing import TypeVar\n"
"\n"
"U = TypeVar('U')                  # Declare type variable \"U\"\n"
"\n"
"def second(l: Sequence[U]) -> U:  # Function is generic over the TypeVar "
"\"U\"\n"
"    return l[1]"
msgstr ""

msgid "Syntactic support for generics is new in Python 3.12."
msgstr ""

msgid "Annotating tuples"
msgstr ""

msgid ""
"For most containers in Python, the typing system assumes that all elements "
"in the container will be of the same type. For example::"
msgstr ""

msgid ""
"from collections.abc import Mapping\n"
"\n"
"# Type checker will infer that all elements in ``x`` are meant to be ints\n"
"x: list[int] = []\n"
"\n"
"# Type checker error: ``list`` only accepts a single type argument:\n"
"y: list[int, str] = [1, 'foo']\n"
"\n"
"# Type checker will infer that all keys in ``z`` are meant to be strings,\n"
"# and that all values in ``z`` are meant to be either strings or ints\n"
"z: Mapping[str, str | int] = {}"
msgstr ""

msgid ""
":class:`list` only accepts one type argument, so a type checker would emit "
"an error on the ``y`` assignment above. Similarly, :class:`~collections.abc."
"Mapping` only accepts two type arguments: the first indicates the type of "
"the keys, and the second indicates the type of the values."
msgstr ""

msgid ""
"Unlike most other Python containers, however, it is common in idiomatic "
"Python code for tuples to have elements which are not all of the same type. "
"For this reason, tuples are special-cased in Python's typing system. :class:"
"`tuple` accepts *any number* of type arguments::"
msgstr ""

msgid ""
"# OK: ``x`` is assigned to a tuple of length 1 where the sole element is an "
"int\n"
"x: tuple[int] = (5,)\n"
"\n"
"# OK: ``y`` is assigned to a tuple of length 2;\n"
"# element 1 is an int, element 2 is a str\n"
"y: tuple[int, str] = (5, \"foo\")\n"
"\n"
"# Error: the type annotation indicates a tuple of length 1,\n"
"# but ``z`` has been assigned to a tuple of length 3\n"
"z: tuple[int] = (1, 2, 3)"
msgstr ""

msgid ""
"To denote a tuple which could be of *any* length, and in which all elements "
"are of the same type ``T``, use ``tuple[T, ...]``. To denote an empty tuple, "
"use ``tuple[()]``. Using plain ``tuple`` as an annotation is equivalent to "
"using ``tuple[Any, ...]``::"
msgstr ""

msgid ""
"x: tuple[int, ...] = (1, 2)\n"
"# These reassignments are OK: ``tuple[int, ...]`` indicates x can be of any "
"length\n"
"x = (1, 2, 3)\n"
"x = ()\n"
"# This reassignment is an error: all elements in ``x`` must be ints\n"
"x = (\"foo\", \"bar\")\n"
"\n"
"# ``y`` can only ever be assigned to an empty tuple\n"
"y: tuple[()] = ()\n"
"\n"
"z: tuple = (\"foo\", \"bar\")\n"
"# These reassignments are OK: plain ``tuple`` is equivalent to "
"``tuple[Any, ...]``\n"
"z = (1, 2, 3)\n"
"z = ()"
msgstr ""

msgid "The type of class objects"
msgstr ""

msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``type[C]`` (or deprecated :class:"
"`typing.Type[C] <Type>`) may accept values that are classes themselves -- "
"specifically, it will accept the *class object* of ``C``. For example::"
msgstr ""

msgid ""
"a = 3         # Has type ``int``\n"
"b = int       # Has type ``type[int]``\n"
"c = type(a)   # Also has type ``type[int]``"
msgstr ""

msgid "Note that ``type[C]`` is covariant::"
msgstr ""

msgid ""
"class User: ...\n"
"class ProUser(User): ...\n"
"class TeamUser(User): ...\n"
"\n"
"def make_new_user(user_class: type[User]) -> User:\n"
"    # ...\n"
"    return user_class()\n"
"\n"
"make_new_user(User)      # OK\n"
"make_new_user(ProUser)   # Also OK: ``type[ProUser]`` is a subtype of "
"``type[User]``\n"
"make_new_user(TeamUser)  # Still fine\n"
"make_new_user(User())    # Error: expected ``type[User]`` but got ``User``\n"
"make_new_user(int)       # Error: ``type[int]`` is not a subtype of "
"``type[User]``"
msgstr ""

msgid ""
"The only legal parameters for :class:`type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""

msgid ""
"def new_non_team_user(user_class: type[BasicUser | ProUser]): ...\n"
"\n"
"new_non_team_user(BasicUser)  # OK\n"
"new_non_team_user(ProUser)    # OK\n"
"new_non_team_user(TeamUser)   # Error: ``type[TeamUser]`` is not a subtype\n"
"                              # of ``type[BasicUser | ProUser]``\n"
"new_non_team_user(User)       # Also an error"
msgstr ""

msgid ""
"``type[Any]`` is equivalent to :class:`type`, which is the root of Python's :"
"ref:`metaclass hierarchy <metaclasses>`."
msgstr ""

msgid "Annotating generators and coroutines"
msgstr ""

msgid ""
"A generator can be annotated using the generic type :class:"
"`Generator[YieldType, SendType, ReturnType] <collections.abc.Generator>`. "
"For example::"
msgstr ""

msgid ""
"def echo_round() -> Generator[int, float, str]:\n"
"    sent = yield 0\n"
"    while sent >= 0:\n"
"        sent = yield round(sent)\n"
"    return 'Done'"
msgstr ""

msgid ""
"Note that unlike many other generic classes in the standard library, the "
"``SendType`` of :class:`~collections.abc.Generator` behaves contravariantly, "
"not covariantly or invariantly."
msgstr ""

msgid ""
"The ``SendType`` and ``ReturnType`` parameters default to :const:`!None`::"
msgstr ""

msgid ""
"def infinite_stream(start: int) -> Generator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"
msgstr ""

msgid "It is also possible to set these types explicitly::"
msgstr ""

msgid ""
"def infinite_stream(start: int) -> Generator[int, None, None]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"
msgstr ""

msgid ""
"Simple generators that only ever yield values can also be annotated as "
"having a return type of either :class:`Iterable[YieldType] <collections.abc."
"Iterable>` or :class:`Iterator[YieldType] <collections.abc.Iterator>`::"
msgstr ""

msgid ""
"def infinite_stream(start: int) -> Iterator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start += 1"
msgstr ""

msgid ""
"Async generators are handled in a similar fashion, but don't expect a "
"``ReturnType`` type argument (:class:`AsyncGenerator[YieldType, SendType] "
"<collections.abc.AsyncGenerator>`). The ``SendType`` argument defaults to :"
"const:`!None`, so the following definitions are equivalent::"
msgstr ""

msgid ""
"async def infinite_stream(start: int) -> AsyncGenerator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)\n"
"\n"
"async def infinite_stream(start: int) -> AsyncGenerator[int, None]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)"
msgstr ""

msgid ""
"As in the synchronous case, :class:`AsyncIterable[YieldType] <collections."
"abc.AsyncIterable>` and :class:`AsyncIterator[YieldType] <collections.abc."
"AsyncIterator>` are available as well::"
msgstr ""

msgid ""
"async def infinite_stream(start: int) -> AsyncIterator[int]:\n"
"    while True:\n"
"        yield start\n"
"        start = await increment(start)"
msgstr ""

msgid ""
"Coroutines can be annotated using :class:`Coroutine[YieldType, SendType, "
"ReturnType] <collections.abc.Coroutine>`. Generic arguments correspond to "
"those of :class:`~collections.abc.Generator`, for example::"
msgstr ""

msgid ""
"from collections.abc import Coroutine\n"
"c: Coroutine[list[str], str, int]  # Some coroutine defined elsewhere\n"
"x = c.send('hi')                   # Inferred type of 'x' is list[str]\n"
"async def bar() -> None:\n"
"    y = await c                    # Inferred type of 'y' is int"
msgstr ""

msgid "User-defined generic types"
msgstr ""

msgid "A user-defined class can be defined as a generic class."
msgstr ""

msgid ""
"from logging import Logger\n"
"\n"
"class LoggedVar[T]:\n"
"    def __init__(self, value: T, name: str, logger: Logger) -> None:\n"
"        self.name = name\n"
"        self.logger = logger\n"
"        self.value = value\n"
"\n"
"    def set(self, new: T) -> None:\n"
"        self.log('Set ' + repr(self.value))\n"
"        self.value = new\n"
"\n"
"    def get(self) -> T:\n"
"        self.log('Get ' + repr(self.value))\n"
"        return self.value\n"
"\n"
"    def log(self, message: str) -> None:\n"
"        self.logger.info('%s: %s', self.name, message)"
msgstr ""

msgid ""
"This syntax indicates that the class ``LoggedVar`` is parameterised around a "
"single :ref:`type variable <typevar>` ``T`` . This also makes ``T`` valid as "
"a type within the class body."
msgstr ""

msgid ""
"Generic classes implicitly inherit from :class:`Generic`. For compatibility "
"with Python 3.11 and lower, it is also possible to inherit explicitly from :"
"class:`Generic` to indicate a generic class::"
msgstr ""

msgid ""
"from typing import TypeVar, Generic\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class LoggedVar(Generic[T]):\n"
"    ..."
msgstr ""

msgid ""
"Generic classes have :meth:`~object.__class_getitem__` methods, meaning they "
"can be parameterised at runtime (e.g. ``LoggedVar[int]`` below)::"
msgstr ""

msgid ""
"from collections.abc import Iterable\n"
"\n"
"def zero_all_vars(vars: Iterable[LoggedVar[int]]) -> None:\n"
"    for var in vars:\n"
"        var.set(0)"
msgstr ""

msgid ""
"A generic type can have any number of type variables. All varieties of :"
"class:`TypeVar` are permissible as parameters for a generic type::"
msgstr ""

msgid ""
"from typing import TypeVar, Generic, Sequence\n"
"\n"
"class WeirdTrio[T, B: Sequence[bytes], S: (int, str)]:\n"
"    ...\n"
"\n"
"OldT = TypeVar('OldT', contravariant=True)\n"
"OldB = TypeVar('OldB', bound=Sequence[bytes], covariant=True)\n"
"OldS = TypeVar('OldS', int, str)\n"
"\n"
"class OldWeirdTrio(Generic[OldT, OldB, OldS]):\n"
"    ..."
msgstr ""

msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""

msgid ""
"from typing import TypeVar, Generic\n"
"...\n"
"\n"
"class Pair[M, M]:  # SyntaxError\n"
"    ...\n"
"\n"
"T = TypeVar('T')\n"
"\n"
"class Pair(Generic[T, T]):   # INVALID\n"
"    ..."
msgstr ""

msgid "Generic classes can also inherit from other classes::"
msgstr ""

msgid ""
"from collections.abc import Sized\n"
"\n"
"class LinkedList[T](Sized):\n"
"    ..."
msgstr ""

msgid ""
"When inheriting from generic classes, some type parameters could be fixed::"
msgstr ""

msgid ""
"from collections.abc import Mapping\n"
"\n"
"class MyDict[T](Mapping[str, T]):\n"
"    ..."
msgstr ""

msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr ""

msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``:"
msgstr ""

msgid ""
"from collections.abc import Iterable\n"
"\n"
"class MyIterable(Iterable): # Same as Iterable[Any]\n"
"    ..."
msgstr ""

msgid "User-defined generic type aliases are also supported. Examples::"
msgstr ""

msgid ""
"from collections.abc import Iterable\n"
"\n"
"type Response[S] = Iterable[S] | int\n"
"\n"
"# Return type here is same as Iterable[str] | int\n"
"def response(query: str) -> Response[str]:\n"
"    ...\n"
"\n"
"type Vec[T] = Iterable[tuple[T, T]]\n"
"\n"
"def inproduct[T: (int, float, complex)](v: Vec[T]) -> T: # Same as "
"Iterable[tuple[T, T]]\n"
"    return sum(x*y for x, y in v)"
msgstr ""

msgid ""
"For backward compatibility, generic type aliases can also be created through "
"a simple assignment::"
msgstr ""

msgid ""
"from collections.abc import Iterable\n"
"from typing import TypeVar\n"
"\n"
"S = TypeVar(\"S\")\n"
"Response = Iterable[S] | int"
msgstr ""

msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ""

msgid ""
"Syntactic support for generics and type aliases is new in version 3.12. "
"Previously, generic classes had to explicitly inherit from :class:`Generic` "
"or contain a type variable in one of their bases."
msgstr ""

msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``[**P]``.  The behavior is "
"consistent with type variables' described above as parameter specification "
"variables are treated by the :mod:`!typing` module as a specialized type "
"variable.  The one exception to this is that a list of types can be used to "
"substitute a :class:`ParamSpec`::"
msgstr ""

msgid ""
">>> class Z[T, **P]: ...  # T is a TypeVar; P is a ParamSpec\n"
"...\n"
">>> Z[int, [dict, float]]\n"
"__main__.Z[int, [dict, float]]"
msgstr ""

msgid ""
"Classes generic over a :class:`ParamSpec` can also be created using explicit "
"inheritance from :class:`Generic`. In this case, ``**`` is not used::"
msgstr ""

msgid ""
"from typing import ParamSpec, Generic\n"
"\n"
"P = ParamSpec('P')\n"
"\n"
"class Z(Generic[P]):\n"
"    ..."
msgstr ""

msgid ""
"Another difference between :class:`TypeVar` and :class:`ParamSpec` is that a "
"generic with only one parameter specification variable will accept parameter "
"lists in the forms ``X[[Type1, Type2, ...]]`` and also ``X[Type1, "
"Type2, ...]`` for aesthetic reasons.  Internally, the latter is converted to "
"the former, so the following are equivalent::"
msgstr ""

msgid ""
">>> class X[**P]: ...\n"
"...\n"
">>> X[int, str]\n"
"__main__.X[[int, str]]\n"
">>> X[[int, str]]\n"
"__main__.X[[int, str]]"
msgstr ""

msgid ""
"Note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""

msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See :"
"class:`ParamSpec` and :pep:`612` for more details."
msgstr ""

msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the :mod:`!typing` "
"module are :term:`hashable` and comparable for equality."
msgstr ""

msgid "The :data:`Any` type"
msgstr ""

msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""

msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""

msgid ""
"from typing import Any\n"
"\n"
"a: Any = None\n"
"a = []          # OK\n"
"a = 2           # OK\n"
"\n"
"s: str = ''\n"
"s = a           # OK\n"
"\n"
"def foo(item: Any) -> int:\n"
"    # Passes type checking; 'item' could be any type,\n"
"    # and that type might have a 'bar' method\n"
"    item.bar()\n"
"    ..."
msgstr ""

msgid ""
"Notice that no type checking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""

msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""

msgid ""
"def legacy_parser(text):\n"
"    ...\n"
"    return data\n"
"\n"
"# A static type checker will treat the above\n"
"# as having the same signature as:\n"
"def legacy_parser(text: Any) -> Any:\n"
"    ...\n"
"    return data"
msgstr ""

msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""

msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""

msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""

msgid ""
"def hash_a(item: object) -> int:\n"
"    # Fails type checking; an object does not have a 'magic' method.\n"
"    item.magic()\n"
"    ...\n"
"\n"
"def hash_b(item: Any) -> int:\n"
"    # Passes type checking\n"
"    item.magic()\n"
"    ...\n"
"\n"
"# Passes type checking, since ints and strs are subclasses of object\n"
"hash_a(42)\n"
"hash_a(\"foo\")\n"
"\n"
"# Passes type checking, since Any is compatible with all types\n"
"hash_b(42)\n"
"hash_b(\"foo\")"
msgstr ""

msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""

msgid "Nominal vs structural subtyping"
msgstr ""

msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""

msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""

msgid ""
"from collections.abc import Sized, Iterable, Iterator\n"
"\n"
"class Bucket(Sized, Iterable[int]):\n"
"    ...\n"
"    def __len__(self) -> int: ...\n"
"    def __iter__(self) -> Iterator[int]: ..."
msgstr ""

msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""

msgid ""
"from collections.abc import Iterator, Iterable\n"
"\n"
"class Bucket:  # Note: no base classes\n"
"    ...\n"
"    def __len__(self) -> int: ...\n"
"    def __iter__(self) -> Iterator[int]: ...\n"
"\n"
"def collect(items: Iterable[int]) -> int: ...\n"
"result = collect(Bucket())  # Passes type check"
msgstr ""

msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""

msgid "Module contents"
msgstr ""

msgid ""
"The ``typing`` module defines the following classes, functions and "
"decorators."
msgstr ""

msgid "Special typing primitives"
msgstr ""

msgid "Special types"
msgstr ""

msgid ""
"These can be used as types in annotations. They do not support subscription "
"using ``[]``."
msgstr ""

msgid "Special type indicating an unconstrained type."
msgstr ""

msgid "Every type is compatible with :data:`Any`."
msgstr ""

msgid ":data:`Any` is compatible with every type."
msgstr ""

msgid ""
":data:`Any` can now be used as a base class. This can be useful for avoiding "
"type checker errors with classes that can duck type anywhere or are highly "
"dynamic."
msgstr ""

msgid "A :ref:`constrained type variable <typing-constrained-typevar>`."
msgstr ""

msgid "Definition::"
msgstr ""

msgid "AnyStr = TypeVar('AnyStr', str, bytes)"
msgstr ""

msgid ""
"``AnyStr`` is meant to be used for functions that may accept :class:`str` "
"or :class:`bytes` arguments but cannot allow the two to mix."
msgstr ""

msgid "For example::"
msgstr ""

msgid ""
"def concat(a: AnyStr, b: AnyStr) -> AnyStr:\n"
"    return a + b\n"
"\n"
"concat(\"foo\", \"bar\")    # OK, output has type 'str'\n"
"concat(b\"foo\", b\"bar\")  # OK, output has type 'bytes'\n"
"concat(\"foo\", b\"bar\")   # Error, cannot mix str and bytes"
msgstr ""

msgid ""
"Note that, despite its name, ``AnyStr`` has nothing to do with the :class:"
"`Any` type, nor does it mean \"any string\". In particular, ``AnyStr`` and "
"``str | bytes`` are different from each other and have different use cases::"
msgstr ""

msgid ""
"# Invalid use of AnyStr:\n"
"# The type variable is used only once in the function signature,\n"
"# so cannot be \"solved\" by the type checker\n"
"def greet_bad(cond: bool) -> AnyStr:\n"
"    return \"hi there!\" if cond else b\"greetings!\"\n"
"\n"
"# The better way of annotating this function:\n"
"def greet_proper(cond: bool) -> str | bytes:\n"
"    return \"hi there!\" if cond else b\"greetings!\""
msgstr ""

msgid ""
"Deprecated in favor of the new :ref:`type parameter syntax <type-params>`. "
"Use ``class A[T: (str, bytes)]: ...`` instead of importing ``AnyStr``. See :"
"pep:`695` for more details."
msgstr ""

msgid ""
"In Python 3.16, ``AnyStr`` will be removed from ``typing.__all__``, and "
"deprecation warnings will be emitted at runtime when it is accessed or "
"imported from ``typing``. ``AnyStr`` will be removed from ``typing`` in "
"Python 3.18."
msgstr ""

msgid "Special type that includes only literal strings."
msgstr ""

msgid ""
"Any string literal is compatible with ``LiteralString``, as is another "
"``LiteralString``. However, an object typed as just ``str`` is not. A string "
"created by composing ``LiteralString``-typed objects is also acceptable as a "
"``LiteralString``."
msgstr ""

msgid "Example:"
msgstr ""

msgid ""
"def run_query(sql: LiteralString) -> None:\n"
"    ...\n"
"\n"
"def caller(arbitrary_string: str, literal_string: LiteralString) -> None:\n"
"    run_query(\"SELECT * FROM students\")  # OK\n"
"    run_query(literal_string)  # OK\n"
"    run_query(\"SELECT * FROM \" + literal_string)  # OK\n"
"    run_query(arbitrary_string)  # type checker error\n"
"    run_query(  # type checker error\n"
"        f\"SELECT * FROM students WHERE name = {arbitrary_string}\"\n"
"    )"
msgstr ""

msgid ""
"``LiteralString`` is useful for sensitive APIs where arbitrary user-"
"generated strings could generate problems. For example, the two cases above "
"that generate type checker errors could be vulnerable to an SQL injection "
"attack."
msgstr ""

msgid "See :pep:`675` for more details."
msgstr ""

msgid ""
":data:`!Never` and :data:`!NoReturn` represent the `bottom type <https://en."
"wikipedia.org/wiki/Bottom_type>`_, a type that has no members."
msgstr ""

msgid ""
"They can be used to indicate that a function never returns, such as :func:"
"`sys.exit`::"
msgstr ""

msgid ""
"from typing import Never  # or NoReturn\n"
"\n"
"def stop() -> Never:\n"
"    raise RuntimeError('no way')"
msgstr ""

msgid ""
"Or to define a function that should never be called, as there are no valid "
"arguments, such as :func:`assert_never`::"
msgstr ""

msgid ""
"from typing import Never  # or NoReturn\n"
"\n"
"def never_call_me(arg: Never) -> None:\n"
"    pass\n"
"\n"
"def int_or_str(arg: int | str) -> None:\n"
"    never_call_me(arg)  # type checker error\n"
"    match arg:\n"
"        case int():\n"
"            print(\"It's an int\")\n"
"        case str():\n"
"            print(\"It's a str\")\n"
"        case _:\n"
"            never_call_me(arg)  # OK, arg is of type Never (or NoReturn)"
msgstr ""

msgid ""
":data:`!Never` and :data:`!NoReturn` have the same meaning in the type "
"system and static type checkers treat both equivalently."
msgstr ""

msgid "Added :data:`NoReturn`."
msgstr ""

msgid "Added :data:`Never`."
msgstr ""

msgid "Special type to represent the current enclosed class."
msgstr ""

msgid ""
"from typing import Self, reveal_type\n"
"\n"
"class Foo:\n"
"    def return_self(self) -> Self:\n"
"        ...\n"
"        return self\n"
"\n"
"class SubclassOfFoo(Foo): pass\n"
"\n"
"reveal_type(Foo().return_self())  # Revealed type is \"Foo\"\n"
"reveal_type(SubclassOfFoo().return_self())  # Revealed type is "
"\"SubclassOfFoo\""
msgstr ""

msgid ""
"This annotation is semantically equivalent to the following, albeit in a "
"more succinct fashion::"
msgstr ""

msgid ""
"from typing import TypeVar\n"
"\n"
"Self = TypeVar(\"Self\", bound=\"Foo\")\n"
"\n"
"class Foo:\n"
"    def return_self(self: Self) -> Self:\n"
"        ...\n"
"        return self"
msgstr ""

msgid ""
"In general, if something returns ``self``, as in the above examples, you "
"should use ``Self`` as the return annotation. If ``Foo.return_self`` was "
"annotated as returning ``\"Foo\"``, then the type checker would infer the "
"object returned from ``SubclassOfFoo.return_self`` as being of type ``Foo`` "
"rather than ``SubclassOfFoo``."
msgstr ""

msgid "Other common use cases include:"
msgstr ""

msgid ""
":class:`classmethod`\\s that are used as alternative constructors and return "
"instances of the ``cls`` parameter."
msgstr ""

msgid "Annotating an :meth:`~object.__enter__` method which returns self."
msgstr ""

msgid ""
"You should not use ``Self`` as the return annotation if the method is not "
"guaranteed to return an instance of a subclass when the class is subclassed::"
msgstr ""

msgid ""
"class Eggs:\n"
"    # Self would be an incorrect return annotation here,\n"
"    # as the object returned is always an instance of Eggs,\n"
"    # even in subclasses\n"
"    def returns_eggs(self) -> \"Eggs\":\n"
"        return Eggs()"
msgstr ""

msgid "See :pep:`673` for more details."
msgstr ""

msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`."
msgstr ""

msgid ""
"from typing import TypeAlias\n"
"\n"
"Factors: TypeAlias = list[int]"
msgstr ""

msgid ""
"``TypeAlias`` is particularly useful on older Python versions for annotating "
"aliases that make use of forward references, as it can be hard for type "
"checkers to distinguish these from normal variable assignments:"
msgstr ""

msgid ""
"from typing import Generic, TypeAlias, TypeVar\n"
"\n"
"T = TypeVar(\"T\")\n"
"\n"
"# \"Box\" does not exist yet,\n"
"# so we have to use quotes for the forward reference on Python <3.12.\n"
"# Using ``TypeAlias`` tells the type checker that this is a type alias "
"declaration,\n"
"# not a variable assignment to a string.\n"
"BoxOfStrings: TypeAlias = \"Box[str]\"\n"
"\n"
"class Box(Generic[T]):\n"
"    @classmethod\n"
"    def make_box_of_strings(cls) -> BoxOfStrings: ..."
msgstr ""

msgid "See :pep:`613` for more details."
msgstr ""

msgid ""
":data:`TypeAlias` is deprecated in favor of the :keyword:`type` statement, "
"which creates instances of :class:`TypeAliasType` and which natively "
"supports forward references. Note that while :data:`TypeAlias` and :class:"
"`TypeAliasType` serve similar purposes and have similar names, they are "
"distinct and the latter is not the type of the former. Removal of :data:"
"`TypeAlias` is not currently planned, but users are encouraged to migrate "
"to :keyword:`type` statements."
msgstr ""

msgid "Special forms"
msgstr ""

msgid ""
"These can be used as types in annotations. They all support subscription "
"using ``[]``, but each has a unique syntax."
msgstr ""

msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or "
"Y."
msgstr ""

msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr ""

msgid "The arguments must be types and there must be at least one."
msgstr ""

msgid "Unions of unions are flattened, e.g.::"
msgstr ""

msgid "Union[Union[int, str], float] == Union[int, str, float]"
msgstr ""

msgid ""
"However, this does not apply to unions referenced through a type alias, to "
"avoid forcing evaluation of the underlying :class:`TypeAliasType`::"
msgstr ""

msgid ""
"type A = Union[int, str]\n"
"Union[A, float] != Union[int, str, float]"
msgstr ""

msgid "Unions of a single argument vanish, e.g.::"
msgstr ""

msgid "Union[int] == int  # The constructor actually returns int"
msgstr ""

msgid "Redundant arguments are skipped, e.g.::"
msgstr ""

msgid "Union[int, str, int] == Union[int, str] == int | str"
msgstr ""

msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr ""

msgid "Union[int, str] == Union[str, int]"
msgstr ""

msgid "You cannot subclass or instantiate a ``Union``."
msgstr ""

msgid "You cannot write ``Union[X][Y]``."
msgstr ""

msgid "Don't remove explicit subclasses from unions at runtime."
msgstr ""

msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""

msgid ""
":class:`types.UnionType` is now an alias for :class:`Union`, and both "
"``Union[int, str]`` and ``int | str`` create instances of the same class. To "
"check whether an object is a ``Union`` at runtime, use ``isinstance(obj, "
"Union)``. For compatibility with earlier versions of Python, use "
"``get_origin(obj) is typing.Union or get_origin(obj) is types.UnionType``."
msgstr ""

msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr ""

msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""

msgid ""
"def foo(arg: int = 0) -> None:\n"
"    ..."
msgstr ""

msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""

msgid ""
"def foo(arg: Optional[int] = None) -> None:\n"
"    ..."
msgstr ""

msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""

msgid "Special form for annotating higher-order functions."
msgstr ""

msgid ""
"``Concatenate`` can be used in conjunction with :ref:`Callable <annotating-"
"callables>` and :class:`ParamSpec` to annotate a higher-order callable which "
"adds, removes, or transforms parameters of another callable.  Usage is in "
"the form ``Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable]``. "
"``Concatenate`` is currently only valid when used as the first argument to "
"a :ref:`Callable <annotating-callables>`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec` or ellipsis (``...``)."
msgstr ""

msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a :class:"
"`threading.Lock` to the decorated function,  ``Concatenate`` can be used to "
"indicate that ``with_lock`` expects a callable which takes in a ``Lock`` as "
"the first argument, and returns a callable with a different type signature.  "
"In this case, the :class:`ParamSpec` indicates that the returned callable's "
"parameter types are dependent on the parameter types of the callable being "
"passed in::"
msgstr ""

msgid ""
"from collections.abc import Callable\n"
"from threading import Lock\n"
"from typing import Concatenate\n"
"\n"
"# Use this lock to ensure that only one thread is executing a function\n"
"# at any time.\n"
"my_lock = Lock()\n"
"\n"
"def with_lock[**P, R](f: Callable[Concatenate[Lock, P], R]) -> Callable[P, "
"R]:\n"
"    '''A type-safe decorator which provides a lock.'''\n"
"    def inner(*args: P.args, **kwargs: P.kwargs) -> R:\n"
"        # Provide the lock as the first argument.\n"
"        return f(my_lock, *args, **kwargs)\n"
"    return inner\n"
"\n"
"@with_lock\n"
"def sum_threadsafe(lock: Lock, numbers: list[float]) -> float:\n"
"    '''Add a list of numbers together in a thread-safe manner.'''\n"
"    with lock:\n"
"        return sum(numbers)\n"
"\n"
"# We don't need to pass in the lock ourselves thanks to the decorator.\n"
"sum_threadsafe([1.1, 2.2, 3.3])"
msgstr ""

msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)"
msgstr ""

msgid ":class:`ParamSpec`"
msgstr ""

msgid ":ref:`annotating-callables`"
msgstr ""

msgid "Special typing form to define \"literal types\"."
msgstr ""

msgid ""
"``Literal`` can be used to indicate to type checkers that the annotated "
"object has a value equivalent to one of the provided literals."
msgstr ""

msgid ""
"def validate_simple(data: Any) -> Literal[True]:  # always returns True\n"
"    ...\n"
"\n"
"type Mode = Literal['r', 'rb', 'w', 'wb']\n"
"def open_helper(file: str, mode: Mode) -> str:\n"
"    ...\n"
"\n"
"open_helper('/some/path', 'r')      # Passes type check\n"
"open_helper('/other/path', 'typo')  # Error in type checker"
msgstr ""

msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""

msgid "Additional details:"
msgstr ""

msgid "The arguments must be literal values and there must be at least one."
msgstr ""

msgid "Nested ``Literal`` types are flattened, e.g.::"
msgstr ""

msgid "assert Literal[Literal[1, 2], 3] == Literal[1, 2, 3]"
msgstr ""

msgid ""
"However, this does not apply to ``Literal`` types referenced through a type "
"alias, to avoid forcing evaluation of the underlying :class:`TypeAliasType`::"
msgstr ""

msgid ""
"type A = Literal[1, 2]\n"
"assert Literal[A, 3] != Literal[1, 2, 3]"
msgstr ""

msgid "assert Literal[1, 2, 1] == Literal[1, 2]"
msgstr ""

msgid "When comparing literals, the argument order is ignored, e.g.::"
msgstr ""

msgid "assert Literal[1, 2] == Literal[2, 1]"
msgstr ""

msgid "You cannot subclass or instantiate a ``Literal``."
msgstr ""

msgid "You cannot write ``Literal[X][Y]``."
msgstr ""

msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of "
"their parameters are not :term:`hashable`."
msgstr ""

msgid "Special type construct to mark class variables."
msgstr ""

msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""

msgid ""
"class Starship:\n"
"    stats: ClassVar[dict[str, int]] = {} # class variable\n"
"    damage: int = 10                     # instance variable"
msgstr ""

msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ""

msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""

msgid ""
"enterprise_d = Starship(3000)\n"
"enterprise_d.stats = {} # Error, setting class variable on instance\n"
"Starship.stats = {}     # This is OK"
msgstr ""

msgid ":data:`ClassVar` can now be nested in :data:`Final` and vice versa."
msgstr ""

msgid "Special typing construct to indicate final names to type checkers."
msgstr ""

msgid ""
"Final names cannot be reassigned in any scope. Final names declared in class "
"scopes cannot be overridden in subclasses."
msgstr ""

msgid ""
"MAX_SIZE: Final = 9000\n"
"MAX_SIZE += 1  # Error reported by type checker\n"
"\n"
"class Connection:\n"
"    TIMEOUT: Final[int] = 10\n"
"\n"
"class FastConnector(Connection):\n"
"    TIMEOUT = 1  # Error reported by type checker"
msgstr ""

msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""

msgid ":data:`Final` can now be nested in :data:`ClassVar` and vice versa."
msgstr ""

msgid "Special typing construct to mark a :class:`TypedDict` key as required."
msgstr ""

msgid ""
"This is mainly useful for ``total=False`` TypedDicts. See :class:`TypedDict` "
"and :pep:`655` for more details."
msgstr ""

msgid ""
"Special typing construct to mark a :class:`TypedDict` key as potentially "
"missing."
msgstr ""

msgid "See :class:`TypedDict` and :pep:`655` for more details."
msgstr ""

msgid ""
"A special typing construct to mark an item of a :class:`TypedDict` as read-"
"only."
msgstr ""

msgid ""
"class Movie(TypedDict):\n"
"   title: ReadOnly[str]\n"
"   year: int\n"
"\n"
"def mutate_movie(m: Movie) -> None:\n"
"   m[\"year\"] = 1999  # allowed\n"
"   m[\"title\"] = \"The Matrix\"  # typechecker error"
msgstr ""

msgid "There is no runtime checking for this property."
msgstr ""

msgid "See :class:`TypedDict` and :pep:`705` for more details."
msgstr ""

msgid "Special typing form to add context-specific metadata to an annotation."
msgstr ""

msgid ""
"Add metadata ``x`` to a given type ``T`` by using the annotation "
"``Annotated[T, x]``. Metadata added using ``Annotated`` can be used by "
"static analysis tools or at runtime. At runtime, the metadata is stored in "
"a :attr:`!__metadata__` attribute."
msgstr ""

msgid ""
"If a library or tool encounters an annotation ``Annotated[T, x]`` and has no "
"special logic for the metadata, it should ignore the metadata and simply "
"treat the annotation as ``T``. As such, ``Annotated`` can be useful for code "
"that wants to use annotations for purposes outside Python's static typing "
"system."
msgstr ""

msgid ""
"Using ``Annotated[T, x]`` as an annotation still allows for static "
"typechecking of ``T``, as type checkers will simply ignore the metadata "
"``x``. In this way, ``Annotated`` differs from the :func:`@no_type_check "
"<no_type_check>` decorator, which can also be used for adding annotations "
"outside the scope of the typing system, but completely disables typechecking "
"for a function or class."
msgstr ""

msgid ""
"The responsibility of how to interpret the metadata lies with the tool or "
"library encountering an ``Annotated`` annotation. A tool or library "
"encountering an ``Annotated`` type can scan through the metadata elements to "
"determine if they are of interest (e.g., using :func:`isinstance`)."
msgstr ""

msgid ""
"Here is an example of how you might use ``Annotated`` to add metadata to "
"type annotations if you were doing range analysis:"
msgstr ""

msgid ""
"@dataclass\n"
"class ValueRange:\n"
"    lo: int\n"
"    hi: int\n"
"\n"
"T1 = Annotated[int, ValueRange(-10, 5)]\n"
"T2 = Annotated[T1, ValueRange(-20, 3)]"
msgstr ""

msgid ""
"The first argument to ``Annotated`` must be a valid type. Multiple metadata "
"elements can be supplied as ``Annotated`` supports variadic arguments. The "
"order of the metadata elements is preserved and matters for equality checks::"
msgstr ""

msgid ""
"@dataclass\n"
"class ctype:\n"
"     kind: str\n"
"\n"
"a1 = Annotated[int, ValueRange(3, 10), ctype(\"char\")]\n"
"a2 = Annotated[int, ctype(\"char\"), ValueRange(3, 10)]\n"
"\n"
"assert a1 != a2  # Order matters"
msgstr ""

msgid ""
"It is up to the tool consuming the annotations to decide whether the client "
"is allowed to add multiple metadata elements to one annotation and how to "
"merge those annotations."
msgstr ""

msgid ""
"Nested ``Annotated`` types are flattened. The order of the metadata elements "
"starts with the innermost annotation::"
msgstr ""

msgid ""
"assert Annotated[Annotated[int, ValueRange(3, 10)], ctype(\"char\")] == "
"Annotated[\n"
"    int, ValueRange(3, 10), ctype(\"char\")\n"
"]"
msgstr ""

msgid ""
"However, this does not apply to ``Annotated`` types referenced through a "
"type alias, to avoid forcing evaluation of the underlying :class:"
"`TypeAliasType`::"
msgstr ""

msgid ""
"type From3To10[T] = Annotated[T, ValueRange(3, 10)]\n"
"assert Annotated[From3To10[int], ctype(\"char\")] != Annotated[\n"
"   int, ValueRange(3, 10), ctype(\"char\")\n"
"]"
msgstr ""

msgid "Duplicated metadata elements are not removed::"
msgstr ""

msgid ""
"assert Annotated[int, ValueRange(3, 10)] != Annotated[\n"
"    int, ValueRange(3, 10), ValueRange(3, 10)\n"
"]"
msgstr ""

msgid "``Annotated`` can be used with nested and generic aliases:"
msgstr ""

msgid ""
"@dataclass\n"
"class MaxLen:\n"
"    value: int\n"
"\n"
"type Vec[T] = Annotated[list[tuple[T, T]], MaxLen(10)]\n"
"\n"
"# When used in a type annotation, a type checker will treat \"V\" the same "
"as\n"
"# ``Annotated[list[tuple[int, int]], MaxLen(10)]``:\n"
"type V = Vec[int]"
msgstr ""

msgid "``Annotated`` cannot be used with an unpacked :class:`TypeVarTuple`::"
msgstr ""

msgid ""
"type Variadic[*Ts] = Annotated[*Ts, Ann1] = Annotated[T1, T2, T3, ..., "
"Ann1]  # NOT valid"
msgstr ""

msgid ""
"where ``T1``, ``T2``, ... are :class:`TypeVars <TypeVar>`. This is invalid "
"as only one type should be passed to Annotated."
msgstr ""

msgid ""
"By default, :func:`get_type_hints` strips the metadata from annotations. "
"Pass ``include_extras=True`` to have the metadata preserved:"
msgstr ""

msgid ""
">>> from typing import Annotated, get_type_hints\n"
">>> def func(x: Annotated[int, \"metadata\"]) -> None: pass\n"
"...\n"
">>> get_type_hints(func)\n"
"{'x': <class 'int'>, 'return': <class 'NoneType'>}\n"
">>> get_type_hints(func, include_extras=True)\n"
"{'x': typing.Annotated[int, 'metadata'], 'return': <class 'NoneType'>}"
msgstr ""

msgid ""
"At runtime, the metadata associated with an ``Annotated`` type can be "
"retrieved via the :attr:`!__metadata__` attribute:"
msgstr ""

msgid ""
">>> from typing import Annotated\n"
">>> X = Annotated[int, \"very\", \"important\", \"metadata\"]\n"
">>> X\n"
"typing.Annotated[int, 'very', 'important', 'metadata']\n"
">>> X.__metadata__\n"
"('very', 'important', 'metadata')"
msgstr ""

msgid ""
"If you want to retrieve the original type wrapped by ``Annotated``, use the :"
"attr:`!__origin__` attribute:"
msgstr ""

msgid ""
">>> from typing import Annotated, get_origin\n"
">>> Password = Annotated[str, \"secret\"]\n"
">>> Password.__origin__\n"
"<class 'str'>"
msgstr ""

msgid "Note that using :func:`get_origin` will return ``Annotated`` itself:"
msgstr ""

msgid ""
">>> get_origin(Password)\n"
"typing.Annotated"
msgstr ""

msgid ":pep:`593` - Flexible function and variable annotations"
msgstr ""

msgid "The PEP introducing ``Annotated`` to the standard library."
msgstr ""

msgid ""
"Special typing construct for marking user-defined type predicate functions."
msgstr ""

msgid ""
"``TypeIs`` can be used to annotate the return type of a user-defined type "
"predicate function.  ``TypeIs`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean and take at least "
"one positional argument."
msgstr ""

msgid ""
"``TypeIs`` aims to benefit *type narrowing* -- a technique used by static "
"type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type "
"predicate\"::"
msgstr ""

msgid ""
"def is_str(val: str | float):\n"
"    # \"isinstance\" type predicate\n"
"    if isinstance(val, str):\n"
"        # Type of ``val`` is narrowed to ``str``\n"
"        ...\n"
"    else:\n"
"        # Else, type of ``val`` is narrowed to ``float``.\n"
"        ..."
msgstr ""

msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a "
"type predicate.  Such a function should use ``TypeIs[...]`` or :data:"
"`TypeGuard` as its return type to alert static type checkers to this "
"intention.  ``TypeIs`` usually has more intuitive behavior than "
"``TypeGuard``, but it cannot be used when the input and output types are "
"incompatible (e.g., ``list[object]`` to ``list[int]``) or when the function "
"does not return ``True`` for all instances of the narrowed type."
msgstr ""

msgid ""
"Using  ``-> TypeIs[NarrowedType]`` tells the static type checker that for a "
"given function:"
msgstr ""

msgid "The return value is a boolean."
msgstr ""

msgid ""
"If the return value is ``True``, the type of its argument is the "
"intersection of the argument's original type and ``NarrowedType``."
msgstr ""

msgid ""
"If the return value is ``False``, the type of its argument is narrowed to "
"exclude ``NarrowedType``."
msgstr ""

msgid ""
"from typing import assert_type, final, TypeIs\n"
"\n"
"class Parent: pass\n"
"class Child(Parent): pass\n"
"@final\n"
"class Unrelated: pass\n"
"\n"
"def is_parent(val: object) -> TypeIs[Parent]:\n"
"    return isinstance(val, Parent)\n"
"\n"
"def run(arg: Child | Unrelated):\n"
"    if is_parent(arg):\n"
"        # Type of ``arg`` is narrowed to the intersection\n"
"        # of ``Parent`` and ``Child``, which is equivalent to\n"
"        # ``Child``.\n"
"        assert_type(arg, Child)\n"
"    else:\n"
"        # Type of ``arg`` is narrowed to exclude ``Parent``,\n"
"        # so only ``Unrelated`` is left.\n"
"        assert_type(arg, Unrelated)"
msgstr ""

msgid ""
"The type inside ``TypeIs`` must be consistent with the type of the "
"function's argument; if it is not, static type checkers will raise an "
"error.  An incorrectly written ``TypeIs`` function can lead to unsound "
"behavior in the type system; it is the user's responsibility to write such "
"functions in a type-safe manner."
msgstr ""

msgid ""
"If a ``TypeIs`` function is a class or instance method, then the type in "
"``TypeIs`` maps to the type of the second parameter (after ``cls`` or "
"``self``)."
msgstr ""

msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeIs[TypeB]: ...``, means that "
"if ``foo(arg)`` returns ``True``, then ``arg`` is an instance of ``TypeB``, "
"and if it returns ``False``, it is not an instance of ``TypeB``."
msgstr ""

msgid ""
"``TypeIs`` also works with type variables.  For more information, see :pep:"
"`742` (Narrowing types with ``TypeIs``)."
msgstr ""

msgid ""
"Type predicate functions are user-defined functions that return whether "
"their argument is an instance of a particular type. ``TypeGuard`` works "
"similarly to :data:`TypeIs`, but has subtly different effects on type "
"checking behavior (see below)."
msgstr ""

msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr ""

msgid ""
"If the return value is ``True``, the type of its argument is the type inside "
"``TypeGuard``."
msgstr ""

msgid ""
"``TypeGuard`` also works with type variables.  See :pep:`647` for more "
"details."
msgstr ""

msgid ""
"def is_str_list(val: list[object]) -> TypeGuard[list[str]]:\n"
"    '''Determines whether all objects in the list are strings'''\n"
"    return all(isinstance(x, str) for x in val)\n"
"\n"
"def func1(val: list[object]):\n"
"    if is_str_list(val):\n"
"        # Type of ``val`` is narrowed to ``list[str]``.\n"
"        print(\" \".join(val))\n"
"    else:\n"
"        # Type of ``val`` remains as ``list[object]``.\n"
"        print(\"Not a list of strings!\")"
msgstr ""

msgid "``TypeIs`` and ``TypeGuard`` differ in the following ways:"
msgstr ""

msgid ""
"``TypeIs`` requires the narrowed type to be a subtype of the input type, "
"while ``TypeGuard`` does not.  The main reason is to allow for things like "
"narrowing ``list[object]`` to ``list[str]`` even though the latter is not a "
"subtype of the former, since ``list`` is invariant."
msgstr ""

msgid ""
"When a ``TypeGuard`` function returns ``True``, type checkers narrow the "
"type of the variable to exactly the ``TypeGuard`` type. When a ``TypeIs`` "
"function returns ``True``, type checkers can infer a more precise type "
"combining the previously known type of the variable with the ``TypeIs`` "
"type. (Technically, this is known as an intersection type.)"
msgstr ""

msgid ""
"When a ``TypeGuard`` function returns ``False``, type checkers cannot narrow "
"the type of the variable at all. When a ``TypeIs`` function returns "
"``False``, type checkers can narrow the type of the variable to exclude the "
"``TypeIs`` type."
msgstr ""

msgid "Typing operator to conceptually mark an object as having been unpacked."
msgstr ""

msgid ""
"For example, using the unpack operator ``*`` on a :ref:`type variable tuple "
"<typevartuple>` is equivalent to using ``Unpack`` to mark the type variable "
"tuple as having been unpacked::"
msgstr ""

msgid ""
"Ts = TypeVarTuple('Ts')\n"
"tup: tuple[*Ts]\n"
"# Effectively does:\n"
"tup: tuple[Unpack[Ts]]"
msgstr ""

msgid ""
"In fact, ``Unpack`` can be used interchangeably with ``*`` in the context "
"of :class:`typing.TypeVarTuple <TypeVarTuple>` and :class:`builtins.tuple "
"<tuple>` types. You might see ``Unpack`` being used explicitly in older "
"versions of Python, where ``*`` couldn't be used in certain places::"
msgstr ""

msgid ""
"# In older versions of Python, TypeVarTuple and Unpack\n"
"# are located in the `typing_extensions` backports package.\n"
"from typing_extensions import TypeVarTuple, Unpack\n"
"\n"
"Ts = TypeVarTuple('Ts')\n"
"tup: tuple[*Ts]         # Syntax error on Python <= 3.10!\n"
"tup: tuple[Unpack[Ts]]  # Semantically equivalent, and backwards-compatible"
msgstr ""

msgid ""
"``Unpack`` can also be used along with :class:`typing.TypedDict` for typing "
"``**kwargs`` in a function signature::"
msgstr ""

msgid ""
"from typing import TypedDict, Unpack\n"
"\n"
"class Movie(TypedDict):\n"
"    name: str\n"
"    year: int\n"
"\n"
"# This function expects two keyword arguments - `name` of type `str`\n"
"# and `year` of type `int`.\n"
"def foo(**kwargs: Unpack[Movie]): ..."
msgstr ""

msgid ""
"See :pep:`692` for more details on using ``Unpack`` for ``**kwargs`` typing."
msgstr ""

msgid "Building generic types and type aliases"
msgstr ""

msgid ""
"The following classes should not be used directly as annotations. Their "
"intended purpose is to be building blocks for creating generic types and "
"type aliases."
msgstr ""

msgid ""
"These objects can be created through special syntax (:ref:`type parameter "
"lists <type-params>` and the :keyword:`type` statement). For compatibility "
"with Python 3.11 and earlier, they can also be created without the dedicated "
"syntax, as documented below."
msgstr ""

msgid "Abstract base class for generic types."
msgstr ""

msgid ""
"A generic type is typically declared by adding a list of type parameters "
"after the class name::"
msgstr ""

msgid ""
"class Mapping[KT, VT]:\n"
"    def __getitem__(self, key: KT) -> VT:\n"
"        ...\n"
"        # Etc."
msgstr ""

msgid ""
"Such a class implicitly inherits from ``Generic``. The runtime semantics of "
"this syntax are discussed in the :ref:`Language Reference <generic-classes>`."
msgstr ""

msgid "This class can then be used as follows::"
msgstr ""

msgid ""
"def lookup_name[X, Y](mapping: Mapping[X, Y], key: X, default: Y) -> Y:\n"
"    try:\n"
"        return mapping[key]\n"
"    except KeyError:\n"
"        return default"
msgstr ""

msgid ""
"Here the brackets after the function name indicate a :ref:`generic function "
"<generic-functions>`."
msgstr ""

msgid ""
"For backwards compatibility, generic classes can also be declared by "
"explicitly inheriting from ``Generic``. In this case, the type parameters "
"must be declared separately::"
msgstr ""

msgid ""
"KT = TypeVar('KT')\n"
"VT = TypeVar('VT')\n"
"\n"
"class Mapping(Generic[KT, VT]):\n"
"    def __getitem__(self, key: KT) -> VT:\n"
"        ...\n"
"        # Etc."
msgstr ""

msgid "Type variable."
msgstr ""

msgid ""
"The preferred way to construct a type variable is via the dedicated syntax "
"for :ref:`generic functions <generic-functions>`, :ref:`generic classes "
"<generic-classes>`, and :ref:`generic type aliases <generic-type-aliases>`::"
msgstr ""

msgid ""
"class Sequence[T]:  # T is a TypeVar\n"
"    ..."
msgstr ""

msgid ""
"This syntax can also be used to create bounded and constrained type "
"variables::"
msgstr ""

msgid ""
"class StrSequence[S: str]:  # S is a TypeVar with a `str` upper bound;\n"
"    ...                     # we can say that S is \"bounded by `str`\"\n"
"\n"
"\n"
"class StrOrBytesSequence[A: (str, bytes)]:  # A is a TypeVar constrained to "
"str or bytes\n"
"    ..."
msgstr ""

msgid ""
"However, if desired, reusable type variables can also be constructed "
"manually, like so::"
msgstr ""

msgid ""
"T = TypeVar('T')  # Can be anything\n"
"S = TypeVar('S', bound=str)  # Can be any subtype of str\n"
"A = TypeVar('A', str, bytes)  # Must be exactly str or bytes"
msgstr ""

msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function and type alias definitions. See :class:`Generic` for more "
"information on generic types.  Generic functions work as follows::"
msgstr ""

msgid ""
"def repeat[T](x: T, n: int) -> Sequence[T]:\n"
"    \"\"\"Return a list containing n references to x.\"\"\"\n"
"    return [x]*n\n"
"\n"
"\n"
"def print_capitalized[S: str](x: S) -> S:\n"
"    \"\"\"Print x capitalized, and return x.\"\"\"\n"
"    print(x.capitalize())\n"
"    return x\n"
"\n"
"\n"
"def concatenate[A: (str, bytes)](x: A, y: A) -> A:\n"
"    \"\"\"Add two strings or bytes objects together.\"\"\"\n"
"    return x + y"
msgstr ""

msgid ""
"Note that type variables can be *bounded*, *constrained*, or neither, but "
"cannot be both bounded *and* constrained."
msgstr ""

msgid ""
"The variance of type variables is inferred by type checkers when they are "
"created through the :ref:`type parameter syntax <type-params>` or when "
"``infer_variance=True`` is passed. Manually created type variables may be "
"explicitly marked covariant or contravariant by passing ``covariant=True`` "
"or ``contravariant=True``. By default, manually created type variables are "
"invariant. See :pep:`484` and :pep:`695` for more details."
msgstr ""

msgid ""
"Bounded type variables and constrained type variables have different "
"semantics in several important ways. Using a *bounded* type variable means "
"that the ``TypeVar`` will be solved using the most specific type possible::"
msgstr ""

msgid ""
"x = print_capitalized('a string')\n"
"reveal_type(x)  # revealed type is str\n"
"\n"
"class StringSubclass(str):\n"
"    pass\n"
"\n"
"y = print_capitalized(StringSubclass('another string'))\n"
"reveal_type(y)  # revealed type is StringSubclass\n"
"\n"
"z = print_capitalized(45)  # error: int is not a subtype of str"
msgstr ""

msgid ""
"The upper bound of a type variable can be a concrete type, abstract type "
"(ABC or Protocol), or even a union of types::"
msgstr ""

msgid ""
"# Can be anything with an __abs__ method\n"
"def print_abs[T: SupportsAbs](arg: T) -> None:\n"
"    print(\"Absolute value:\", abs(arg))\n"
"\n"
"U = TypeVar('U', bound=str|bytes)  # Can be any subtype of the union str|"
"bytes\n"
"V = TypeVar('V', bound=SupportsAbs)  # Can be anything with an __abs__ method"
msgstr ""

msgid ""
"Using a *constrained* type variable, however, means that the ``TypeVar`` can "
"only ever be solved as being exactly one of the constraints given::"
msgstr ""

msgid ""
"a = concatenate('one', 'two')\n"
"reveal_type(a)  # revealed type is str\n"
"\n"
"b = concatenate(StringSubclass('one'), StringSubclass('two'))\n"
"reveal_type(b)  # revealed type is str, despite StringSubclass being passed "
"in\n"
"\n"
"c = concatenate('one', b'two')  # error: type variable 'A' can be either str "
"or bytes in a function call, but not both"
msgstr ""

msgid "At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`."
msgstr ""

msgid "The name of the type variable."
msgstr ""

msgid "Whether the type var has been explicitly marked as covariant."
msgstr ""

msgid "Whether the type var has been explicitly marked as contravariant."
msgstr ""

msgid ""
"Whether the type variable's variance should be inferred by type checkers."
msgstr ""

msgid "The upper bound of the type variable, if any."
msgstr ""

msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the bound is evaluated only when the attribute is accessed, not "
"when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""

msgid ""
"An :term:`evaluate function` corresponding to the :attr:`~TypeVar.__bound__` "
"attribute. When called directly, this method supports only the :attr:"
"`~annotationlib.Format.VALUE` format, which is equivalent to accessing the :"
"attr:`~TypeVar.__bound__` attribute directly, but the method object can be "
"passed to :func:`annotationlib.call_evaluate_function` to evaluate the value "
"in a different format."
msgstr ""

msgid "A tuple containing the constraints of the type variable, if any."
msgstr ""

msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the constraints are evaluated only when the attribute is accessed, "
"not when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""

msgid ""
"An :term:`evaluate function` corresponding to the :attr:`~TypeVar."
"__constraints__` attribute. When called directly, this method supports only "
"the :attr:`~annotationlib.Format.VALUE` format, which is equivalent to "
"accessing the :attr:`~TypeVar.__constraints__` attribute directly, but the "
"method object can be passed to :func:`annotationlib.call_evaluate_function` "
"to evaluate the value in a different format."
msgstr ""

msgid ""
"The default value of the type variable, or :data:`typing.NoDefault` if it "
"has no default."
msgstr ""

msgid ""
"An :term:`evaluate function` corresponding to the :attr:`~TypeVar."
"__default__` attribute. When called directly, this method supports only the :"
"attr:`~annotationlib.Format.VALUE` format, which is equivalent to accessing "
"the :attr:`~TypeVar.__default__` attribute directly, but the method object "
"can be passed to :func:`annotationlib.call_evaluate_function` to evaluate "
"the value in a different format."
msgstr ""

msgid ""
"Return whether or not the type variable has a default value. This is "
"equivalent to checking whether :attr:`__default__` is not the :data:`typing."
"NoDefault` singleton, except that it does not force evaluation of the :ref:"
"`lazily evaluated <lazy-evaluation>` default value."
msgstr ""

msgid ""
"Type variables can now be declared using the :ref:`type parameter <type-"
"params>` syntax introduced by :pep:`695`. The ``infer_variance`` parameter "
"was added."
msgstr ""

msgid "Support for default values was added."
msgstr ""

msgid ""
"Type variable tuple. A specialized form of :ref:`type variable <typevar>` "
"that enables *variadic* generics."
msgstr ""

msgid ""
"Type variable tuples can be declared in :ref:`type parameter lists <type-"
"params>` using a single asterisk (``*``) before the name::"
msgstr ""

msgid ""
"def move_first_element_to_last[T, *Ts](tup: tuple[T, *Ts]) -> tuple[*Ts, "
"T]:\n"
"    return (*tup[1:], tup[0])"
msgstr ""

msgid "Or by explicitly invoking the ``TypeVarTuple`` constructor::"
msgstr ""

msgid ""
"T = TypeVar(\"T\")\n"
"Ts = TypeVarTuple(\"Ts\")\n"
"\n"
"def move_first_element_to_last(tup: tuple[T, *Ts]) -> tuple[*Ts, T]:\n"
"    return (*tup[1:], tup[0])"
msgstr ""

msgid ""
"A normal type variable enables parameterization with a single type. A type "
"variable tuple, in contrast, allows parameterization with an *arbitrary* "
"number of types by acting like an *arbitrary* number of type variables "
"wrapped in a tuple. For example::"
msgstr ""

msgid ""
"# T is bound to int, Ts is bound to ()\n"
"# Return value is (1,), which has type tuple[int]\n"
"move_first_element_to_last(tup=(1,))\n"
"\n"
"# T is bound to int, Ts is bound to (str,)\n"
"# Return value is ('spam', 1), which has type tuple[str, int]\n"
"move_first_element_to_last(tup=(1, 'spam'))\n"
"\n"
"# T is bound to int, Ts is bound to (str, float)\n"
"# Return value is ('spam', 3.0, 1), which has type tuple[str, float, int]\n"
"move_first_element_to_last(tup=(1, 'spam', 3.0))\n"
"\n"
"# This fails to type check (and fails at runtime)\n"
"# because tuple[()] is not compatible with tuple[T, *Ts]\n"
"# (at least one element is required)\n"
"move_first_element_to_last(tup=())"
msgstr ""

msgid ""
"Note the use of the unpacking operator ``*`` in ``tuple[T, *Ts]``. "
"Conceptually, you can think of ``Ts`` as a tuple of type variables ``(T1, "
"T2, ...)``. ``tuple[T, *Ts]`` would then become ``tuple[T, *(T1, "
"T2, ...)]``, which is equivalent to ``tuple[T, T1, T2, ...]``. (Note that in "
"older versions of Python, you might see this written using :data:`Unpack "
"<Unpack>` instead, as ``Unpack[Ts]``.)"
msgstr ""

msgid ""
"Type variable tuples must *always* be unpacked. This helps distinguish type "
"variable tuples from normal type variables::"
msgstr ""

msgid ""
"x: Ts          # Not valid\n"
"x: tuple[Ts]   # Not valid\n"
"x: tuple[*Ts]  # The correct way to do it"
msgstr ""

msgid ""
"Type variable tuples can be used in the same contexts as normal type "
"variables. For example, in class definitions, arguments, and return types::"
msgstr ""

msgid ""
"class Array[*Shape]:\n"
"    def __getitem__(self, key: tuple[*Shape]) -> float: ...\n"
"    def __abs__(self) -> \"Array[*Shape]\": ...\n"
"    def get_shape(self) -> tuple[*Shape]: ..."
msgstr ""

msgid ""
"Type variable tuples can be happily combined with normal type variables:"
msgstr ""

msgid ""
"class Array[DType, *Shape]:  # This is fine\n"
"    pass\n"
"\n"
"class Array2[*Shape, DType]:  # This would also be fine\n"
"    pass\n"
"\n"
"class Height: ...\n"
"class Width: ...\n"
"\n"
"float_array_1d: Array[float, Height] = Array()     # Totally fine\n"
"int_array_2d: Array[int, Height, Width] = Array()  # Yup, fine too"
msgstr ""

msgid ""
"However, note that at most one type variable tuple may appear in a single "
"list of type arguments or type parameters::"
msgstr ""

msgid ""
"x: tuple[*Ts, *Ts]            # Not valid\n"
"class Array[*Shape, *Shape]:  # Not valid\n"
"    pass"
msgstr ""

msgid ""
"Finally, an unpacked type variable tuple can be used as the type annotation "
"of ``*args``::"
msgstr ""

msgid ""
"def call_soon[*Ts](\n"
"    callback: Callable[[*Ts], None],\n"
"    *args: *Ts\n"
") -> None:\n"
"    ...\n"
"    callback(*args)"
msgstr ""

msgid ""
"In contrast to non-unpacked annotations of ``*args`` - e.g. ``*args: int``, "
"which would specify that *all* arguments are ``int`` - ``*args: *Ts`` "
"enables reference to the types of the *individual* arguments in ``*args``. "
"Here, this allows us to ensure the types of the ``*args`` passed to "
"``call_soon`` match the types of the (positional) arguments of ``callback``."
msgstr ""

msgid "See :pep:`646` for more details on type variable tuples."
msgstr ""

msgid "The name of the type variable tuple."
msgstr ""

msgid ""
"The default value of the type variable tuple, or :data:`typing.NoDefault` if "
"it has no default."
msgstr ""

msgid ""
"An :term:`evaluate function` corresponding to the :attr:`~TypeVarTuple."
"__default__` attribute. When called directly, this method supports only the :"
"attr:`~annotationlib.Format.VALUE` format, which is equivalent to accessing "
"the :attr:`~TypeVarTuple.__default__` attribute directly, but the method "
"object can be passed to :func:`annotationlib.call_evaluate_function` to "
"evaluate the value in a different format."
msgstr ""

msgid ""
"Return whether or not the type variable tuple has a default value. This is "
"equivalent to checking whether :attr:`__default__` is not the :data:`typing."
"NoDefault` singleton, except that it does not force evaluation of the :ref:"
"`lazily evaluated <lazy-evaluation>` default value."
msgstr ""

msgid ""
"Type variable tuples can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr ""

msgid ""
"Parameter specification variable.  A specialized version of :ref:`type "
"variables <typevar>`."
msgstr ""

msgid ""
"In :ref:`type parameter lists <type-params>`, parameter specifications can "
"be declared with two asterisks (``**``)::"
msgstr ""

msgid "type IntFunc[**P] = Callable[P, int]"
msgstr ""

msgid ""
"For compatibility with Python 3.11 and earlier, ``ParamSpec`` objects can "
"also be created as follows::"
msgstr ""

msgid "P = ParamSpec('P')"
msgstr ""

msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable "
"to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the "
"first argument to ``Callable``, or as parameters for user-defined Generics.  "
"See :class:`Generic` for more information on generic types."
msgstr ""

msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable "
"tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""

msgid ""
"from collections.abc import Callable\n"
"import logging\n"
"\n"
"def add_logging[T, **P](f: Callable[P, T]) -> Callable[P, T]:\n"
"    '''A type-safe decorator to add logging to a function.'''\n"
"    def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n"
"        logging.info(f'{f.__name__} was called')\n"
"        return f(*args, **kwargs)\n"
"    return inner\n"
"\n"
"@add_logging\n"
"def add_two(x: float, y: float) -> float:\n"
"    '''Add two numbers together.'''\n"
"    return x + y"
msgstr ""

msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with upper bound ``Callable[..., Any]``.  However "
"this causes two problems:"
msgstr ""

msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""

msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""

msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, ``P."
"args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` and :class:"
"`ParamSpecKwargs`."
msgstr ""

msgid "The name of the parameter specification."
msgstr ""

msgid ""
"The default value of the parameter specification, or :data:`typing."
"NoDefault` if it has no default."
msgstr ""

msgid ""
"An :term:`evaluate function` corresponding to the :attr:`~ParamSpec."
"__default__` attribute. When called directly, this method supports only the :"
"attr:`~annotationlib.Format.VALUE` format, which is equivalent to accessing "
"the :attr:`~ParamSpec.__default__` attribute directly, but the method object "
"can be passed to :func:`annotationlib.call_evaluate_function` to evaluate "
"the value in a different format."
msgstr ""

msgid ""
"Return whether or not the parameter specification has a default value. This "
"is equivalent to checking whether :attr:`__default__` is not the :data:"
"`typing.NoDefault` singleton, except that it does not force evaluation of "
"the :ref:`lazily evaluated <lazy-evaluation>` default value."
msgstr ""

msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to :class:"
"`TypeVar`.  However the actual semantics of these keywords are yet to be "
"decided."
msgstr ""

msgid ""
"Parameter specifications can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr ""

msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr ""

msgid ":data:`Concatenate`"
msgstr ""

msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The ``P."
"args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``, and "
"``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended for "
"runtime introspection and have no special meaning to static type checkers."
msgstr ""

msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``:"
msgstr ""

msgid ""
">>> from typing import ParamSpec, get_origin\n"
">>> P = ParamSpec(\"P\")\n"
">>> get_origin(P.args) is P\n"
"True\n"
">>> get_origin(P.kwargs) is P\n"
"True"
msgstr ""

msgid "The type of type aliases created through the :keyword:`type` statement."
msgstr ""

msgid ""
">>> type Alias = int\n"
">>> type(Alias)\n"
"<class 'typing.TypeAliasType'>"
msgstr ""

msgid "The name of the type alias:"
msgstr ""

msgid ""
">>> type Alias = int\n"
">>> Alias.__name__\n"
"'Alias'"
msgstr ""

msgid "The module in which the type alias was defined::"
msgstr ""

msgid ""
">>> type Alias = int\n"
">>> Alias.__module__\n"
"'__main__'"
msgstr ""

msgid ""
"The type parameters of the type alias, or an empty tuple if the alias is not "
"generic:"
msgstr ""

msgid ""
">>> type ListOrSet[T] = list[T] | set[T]\n"
">>> ListOrSet.__type_params__\n"
"(T,)\n"
">>> type NotGeneric = int\n"
">>> NotGeneric.__type_params__\n"
"()"
msgstr ""

msgid ""
"The type alias's value. This is :ref:`lazily evaluated <lazy-evaluation>`, "
"so names used in the definition of the alias are not resolved until the "
"``__value__`` attribute is accessed:"
msgstr ""

msgid ""
">>> type Mutually = Recursive\n"
">>> type Recursive = Mutually\n"
">>> Mutually\n"
"Mutually\n"
">>> Recursive\n"
"Recursive\n"
">>> Mutually.__value__\n"
"Recursive\n"
">>> Recursive.__value__\n"
"Mutually"
msgstr ""

msgid ""
"An :term:`evaluate function` corresponding to the :attr:`__value__` "
"attribute. When called directly, this method supports only the :attr:"
"`~annotationlib.Format.VALUE` format, which is equivalent to accessing the :"
"attr:`__value__` attribute directly, but the method object can be passed to :"
"func:`annotationlib.call_evaluate_function` to evaluate the value in a "
"different format:"
msgstr ""

msgid ""
">>> type Alias = undefined\n"
">>> Alias.__value__\n"
"Traceback (most recent call last):\n"
"...\n"
"NameError: name 'undefined' is not defined\n"
">>> from annotationlib import Format, call_evaluate_function\n"
">>> Alias.evaluate_value(Format.VALUE)\n"
"Traceback (most recent call last):\n"
"...\n"
"NameError: name 'undefined' is not defined\n"
">>> call_evaluate_function(Alias.evaluate_value, Format.FORWARDREF)\n"
"ForwardRef('undefined')"
msgstr ""

msgid "Unpacking"
msgstr ""

msgid ""
"Type aliases support star unpacking using the ``*Alias`` syntax. This is "
"equivalent to using ``Unpack[Alias]`` directly:"
msgstr ""

msgid ""
">>> type Alias = tuple[int, str]\n"
">>> type Unpacked = tuple[bool, *Alias]\n"
">>> Unpacked.__value__\n"
"tuple[bool, typing.Unpack[Alias]]"
msgstr ""

msgid "Other special directives"
msgstr ""

msgid ""
"These functions and classes should not be used directly as annotations. "
"Their intended purpose is to be building blocks for creating and declaring "
"types."
msgstr ""

msgid "Typed version of :func:`collections.namedtuple`."
msgstr ""

msgid "Usage::"
msgstr ""

msgid ""
"class Employee(NamedTuple):\n"
"    name: str\n"
"    id: int"
msgstr ""

msgid "This is equivalent to::"
msgstr ""

msgid "Employee = collections.namedtuple('Employee', ['name', 'id'])"
msgstr ""

msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr ""

msgid ""
"class Employee(NamedTuple):\n"
"    name: str\n"
"    id: int = 3\n"
"\n"
"employee = Employee('Guido')\n"
"assert employee.id == 3"
msgstr ""

msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""

msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""

msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr ""

msgid ""
"class Employee(NamedTuple):\n"
"    \"\"\"Represents an employee.\"\"\"\n"
"    name: str\n"
"    id: int = 3\n"
"\n"
"    def __repr__(self) -> str:\n"
"        return f'<Employee {self.name}, id={self.id}>'"
msgstr ""

msgid "``NamedTuple`` subclasses can be generic::"
msgstr ""

msgid ""
"class Group[T](NamedTuple):\n"
"    key: T\n"
"    group: list[T]"
msgstr ""

msgid "Backward-compatible usage::"
msgstr ""

msgid ""
"# For creating a generic NamedTuple on Python 3.11\n"
"T = TypeVar(\"T\")\n"
"\n"
"class Group(NamedTuple, Generic[T]):\n"
"    key: T\n"
"    group: list[T]\n"
"\n"
"# A functional syntax is also supported\n"
"Employee = NamedTuple('Employee', [('name', str), ('id', int)])"
msgstr ""

msgid "Added support for :pep:`526` variable annotation syntax."
msgstr ""

msgid "Added support for default values, methods, and docstrings."
msgstr ""

msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""

msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""

msgid "Added support for generic namedtuples."
msgstr ""

msgid ""
"Using :func:`super` (and the ``__class__`` :term:`closure variable`) in "
"methods of ``NamedTuple`` subclasses is unsupported and causes a :class:"
"`TypeError`."
msgstr ""

msgid ""
"The undocumented keyword argument syntax for creating NamedTuple classes "
"(``NT = NamedTuple(\"NT\", x=int)``) is deprecated, and will be disallowed "
"in 3.15. Use the class-based syntax or the functional syntax instead."
msgstr ""

msgid ""
"When using the functional syntax to create a NamedTuple class, failing to "
"pass a value to the 'fields' parameter (``NT = NamedTuple(\"NT\")``) is "
"deprecated. Passing ``None`` to the 'fields' parameter (``NT = "
"NamedTuple(\"NT\", None)``) is also deprecated. Both will be disallowed in "
"Python 3.15. To create a NamedTuple class with 0 fields, use ``class "
"NT(NamedTuple): pass`` or ``NT = NamedTuple(\"NT\", [])``."
msgstr ""

msgid "Helper class to create low-overhead :ref:`distinct types <distinct>`."
msgstr ""

msgid ""
"A ``NewType`` is considered a distinct type by a typechecker. At runtime, "
"however, calling a ``NewType`` returns its argument unchanged."
msgstr ""

msgid ""
"UserId = NewType('UserId', int)  # Declare the NewType \"UserId\"\n"
"first_user = UserId(1)  # \"UserId\" returns the argument unchanged at "
"runtime"
msgstr ""

msgid "The module in which the new type is defined."
msgstr ""

msgid "The name of the new type."
msgstr ""

msgid "The type that the new type is based on."
msgstr ""

msgid "``NewType`` is now a class rather than a function."
msgstr ""

msgid "Base class for protocol classes."
msgstr ""

msgid "Protocol classes are defined like this::"
msgstr ""

msgid ""
"class Proto(Protocol):\n"
"    def meth(self) -> int:\n"
"        ..."
msgstr ""

msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""

msgid ""
"class C:\n"
"    def meth(self) -> int:\n"
"        return 0\n"
"\n"
"def func(x: Proto) -> int:\n"
"    return x.meth()\n"
"\n"
"func(C())  # Passes static type check"
msgstr ""

msgid ""
"See :pep:`544` for more details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures. Protocol classes without this decorator cannot be used as the "
"second argument to :func:`isinstance` or :func:`issubclass`."
msgstr ""

msgid "Protocol classes can be generic, for example::"
msgstr ""

msgid ""
"class GenProto[T](Protocol):\n"
"    def meth(self) -> T:\n"
"        ..."
msgstr ""

msgid ""
"In code that needs to be compatible with Python 3.11 or older, generic "
"Protocols can be written as follows::"
msgstr ""

msgid ""
"T = TypeVar(\"T\")\n"
"\n"
"class GenProto(Protocol[T]):\n"
"    def meth(self) -> T:\n"
"        ..."
msgstr ""

msgid "Mark a protocol class as a runtime protocol."
msgstr ""

msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`~collections.abc."
"Iterable`.  For example::"
msgstr ""

msgid ""
"@runtime_checkable\n"
"class Closable(Protocol):\n"
"    def close(self): ...\n"
"\n"
"assert isinstance(open('/some/file'), Closable)\n"
"\n"
"@runtime_checkable\n"
"class Named(Protocol):\n"
"    name: str\n"
"\n"
"import threading\n"
"assert isinstance(threading.Thread(name='Bob'), Named)"
msgstr ""

msgid ""
"This decorator raises :exc:`TypeError` when applied to a non-protocol class."
msgstr ""

msgid ""
":func:`!runtime_checkable` will check only the presence of the required "
"methods or attributes, not their type signatures or types. For example, :"
"class:`ssl.SSLObject` is a class, therefore it passes an :func:`issubclass` "
"check against :ref:`Callable <annotating-callables>`. However, the ``ssl."
"SSLObject.__init__`` method exists only to raise a :exc:`TypeError` with a "
"more informative message, therefore making it impossible to call "
"(instantiate) :class:`ssl.SSLObject`."
msgstr ""

msgid ""
"An :func:`isinstance` check against a runtime-checkable protocol can be "
"surprisingly slow compared to an ``isinstance()`` check against a non-"
"protocol class. Consider using alternative idioms such as :func:`hasattr` "
"calls for structural checks in performance-sensitive code."
msgstr ""

msgid ""
"The internal implementation of :func:`isinstance` checks against runtime-"
"checkable protocols now uses :func:`inspect.getattr_static` to look up "
"attributes (previously, :func:`hasattr` was used). As a result, some objects "
"which used to be considered instances of a runtime-checkable protocol may no "
"longer be considered instances of that protocol on Python 3.12+, and vice "
"versa. Most users are unlikely to be affected by this change."
msgstr ""

msgid ""
"The members of a runtime-checkable protocol are now considered \"frozen\" at "
"runtime as soon as the class has been created. Monkey-patching attributes "
"onto a runtime-checkable protocol will still work, but will have no impact "
"on :func:`isinstance` checks comparing objects to the protocol. See :ref:"
"`What's new in Python 3.12 <whatsnew-typing-py312>` for more details."
msgstr ""

msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr ""

msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""

msgid ""
"class Point2D(TypedDict):\n"
"    x: int\n"
"    y: int\n"
"    label: str\n"
"\n"
"a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK\n"
"b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check\n"
"\n"
"assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')"
msgstr ""

msgid ""
"An alternative way to create a ``TypedDict`` is by using function-call "
"syntax. The second argument must be a literal :class:`dict`::"
msgstr ""

msgid "Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})"
msgstr ""

msgid ""
"This functional syntax allows defining keys which are not valid :ref:"
"`identifiers <identifiers>`, for example because they are keywords or "
"contain hyphens, or when key names must not be :ref:`mangled <private-name-"
"mangling>` like regular private names::"
msgstr ""

msgid ""
"# raises SyntaxError\n"
"class Point2D(TypedDict):\n"
"    in: int  # 'in' is a keyword\n"
"    x-y: int  # name with hyphens\n"
"\n"
"class Definition(TypedDict):\n"
"    __schema: str  # mangled to `_Definition__schema`\n"
"\n"
"# OK, functional syntax\n"
"Point2D = TypedDict('Point2D', {'in': int, 'x-y': int})\n"
"Definition = TypedDict('Definition', {'__schema': str})  # not mangled"
msgstr ""

msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"mark individual keys as non-required using :data:`NotRequired`::"
msgstr ""

msgid ""
"class Point2D(TypedDict):\n"
"    x: int\n"
"    y: int\n"
"    label: NotRequired[str]\n"
"\n"
"# Alternative syntax\n"
"Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': "
"NotRequired[str]})"
msgstr ""

msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have the ``label`` key "
"omitted."
msgstr ""

msgid ""
"It is also possible to mark all keys as non-required by default by "
"specifying a totality of ``False``::"
msgstr ""

msgid ""
"class Point2D(TypedDict, total=False):\n"
"    x: int\n"
"    y: int\n"
"\n"
"# Alternative syntax\n"
"Point2D = TypedDict('Point2D', {'x': int, 'y': int}, total=False)"
msgstr ""

msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""

msgid ""
"Individual keys of a ``total=False`` ``TypedDict`` can be marked as required "
"using :data:`Required`::"
msgstr ""

msgid ""
"class Point2D(TypedDict, total=False):\n"
"    x: Required[int]\n"
"    y: Required[int]\n"
"    label: str\n"
"\n"
"# Alternative syntax\n"
"Point2D = TypedDict('Point2D', {\n"
"    'x': Required[int],\n"
"    'y': Required[int],\n"
"    'label': str\n"
"}, total=False)"
msgstr ""

msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr ""

msgid ""
"class Point3D(Point2D):\n"
"    z: int"
msgstr ""

msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr ""

msgid ""
"class Point3D(TypedDict):\n"
"    x: int\n"
"    y: int\n"
"    z: int"
msgstr ""

msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, except "
"for :class:`Generic`. For example::"
msgstr ""

msgid ""
"class X(TypedDict):\n"
"    x: int\n"
"\n"
"class Y(TypedDict):\n"
"    y: int\n"
"\n"
"class Z(object): pass  # A non-TypedDict class\n"
"\n"
"class XY(X, Y): pass  # OK\n"
"\n"
"class XZ(X, Z): pass  # raises TypeError"
msgstr ""

msgid "A ``TypedDict`` can be generic::"
msgstr ""

msgid ""
"class Group[T](TypedDict):\n"
"    key: T\n"
"    group: list[T]"
msgstr ""

msgid ""
"To create a generic ``TypedDict`` that is compatible with Python 3.11 or "
"lower, inherit from :class:`Generic` explicitly:"
msgstr ""

msgid ""
"T = TypeVar(\"T\")\n"
"\n"
"class Group(TypedDict, Generic[T]):\n"
"    key: T\n"
"    group: list[T]"
msgstr ""

msgid ""
"A ``TypedDict`` can be introspected via annotations dicts (see :ref:"
"`annotations-howto` for more information on annotations best practices), :"
"attr:`__total__`, :attr:`__required_keys__`, and :attr:`__optional_keys__`."
msgstr ""

msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example:"
msgstr ""

msgid ""
">>> from typing import TypedDict\n"
">>> class Point2D(TypedDict): pass\n"
">>> Point2D.__total__\n"
"True\n"
">>> class Point2D(TypedDict, total=False): pass\n"
">>> Point2D.__total__\n"
"False\n"
">>> class Point3D(Point2D): pass\n"
">>> Point3D.__total__\n"
"True"
msgstr ""

msgid ""
"This attribute reflects *only* the value of the ``total`` argument to the "
"current ``TypedDict`` class, not whether the class is semantically total. "
"For example, a ``TypedDict`` with ``__total__`` set to ``True`` may have "
"keys marked with :data:`NotRequired`, or it may inherit from another "
"``TypedDict`` with ``total=False``. Therefore, it is generally better to "
"use :attr:`__required_keys__` and :attr:`__optional_keys__` for "
"introspection."
msgstr ""

msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return :"
"class:`frozenset` objects containing required and non-required keys, "
"respectively."
msgstr ""

msgid ""
"Keys marked with :data:`Required` will always appear in "
"``__required_keys__`` and keys marked with :data:`NotRequired` will always "
"appear in ``__optional_keys__``."
msgstr ""

msgid ""
"For backwards compatibility with Python 3.10 and below, it is also possible "
"to use inheritance to declare both required and non-required keys in the "
"same ``TypedDict`` . This is done by declaring a ``TypedDict`` with one "
"value for the ``total`` argument and then inheriting from it in another "
"``TypedDict`` with a different value for ``total``:"
msgstr ""

msgid ""
">>> class Point2D(TypedDict, total=False):\n"
"...     x: int\n"
"...     y: int\n"
"...\n"
">>> class Point3D(Point2D):\n"
"...     z: int\n"
"...\n"
">>> Point3D.__required_keys__ == frozenset({'z'})\n"
"True\n"
">>> Point3D.__optional_keys__ == frozenset({'x', 'y'})\n"
"True"
msgstr ""

msgid ""
"If ``from __future__ import annotations`` is used or if annotations are "
"given as strings, annotations are not evaluated when the ``TypedDict`` is "
"defined. Therefore, the runtime introspection that ``__required_keys__`` and "
"``__optional_keys__`` rely on may not work properly, and the values of the "
"attributes may be incorrect."
msgstr ""

msgid "Support for :data:`ReadOnly` is reflected in the following attributes:"
msgstr ""

msgid ""
"A :class:`frozenset` containing the names of all read-only keys. Keys are "
"read-only if they carry the :data:`ReadOnly` qualifier."
msgstr ""

msgid ""
"A :class:`frozenset` containing the names of all mutable keys. Keys are "
"mutable if they do not carry the :data:`ReadOnly` qualifier."
msgstr ""

msgid ""
"See the `TypedDict <https://typing.python.org/en/latest/spec/typeddict."
"html#typeddict>`_ section in the typing documentation for more examples and "
"detailed rules."
msgstr ""

msgid ""
"Added support for marking individual keys as :data:`Required` or :data:"
"`NotRequired`. See :pep:`655`."
msgstr ""

msgid "Added support for generic ``TypedDict``\\ s."
msgstr ""

msgid ""
"Removed support for the keyword-argument method of creating ``TypedDict``\\ "
"s."
msgstr ""

msgid "Support for the :data:`ReadOnly` qualifier was added."
msgstr ""

msgid ""
"When using the functional syntax to create a TypedDict class, failing to "
"pass a value to the 'fields' parameter (``TD = TypedDict(\"TD\")``) is "
"deprecated. Passing ``None`` to the 'fields' parameter (``TD = "
"TypedDict(\"TD\", None)``) is also deprecated. Both will be disallowed in "
"Python 3.15. To create a TypedDict class with 0 fields, use ``class "
"TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", {})``."
msgstr ""

msgid "Protocols"
msgstr ""

msgid ""
"The following protocols are provided by the :mod:`!typing` module. All are "
"decorated with :func:`@runtime_checkable <runtime_checkable>`."
msgstr ""

msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr ""

msgid "An ABC with one abstract method ``__bytes__``."
msgstr ""

msgid "An ABC with one abstract method ``__complex__``."
msgstr ""

msgid "An ABC with one abstract method ``__float__``."
msgstr ""

msgid "An ABC with one abstract method ``__index__``."
msgstr ""

msgid "An ABC with one abstract method ``__int__``."
msgstr ""

msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr ""

msgid "ABCs and Protocols for working with I/O"
msgstr ""

msgid ""
"Generic class ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`. Please note that these classes are not protocols, and their "
"interface is fairly broad."
msgstr ""

msgid ""
"The protocols :class:`io.Reader` and :class:`io.Writer` offer a simpler "
"alternative for argument types, when only the ``read()`` or ``write()`` "
"methods are accessed, respectively::"
msgstr ""

msgid ""
"def read_and_write(reader: Reader[str], writer: Writer[bytes]):\n"
"    data = reader.read()\n"
"    writer.write(data.encode())"
msgstr ""

msgid ""
"Also consider using :class:`collections.abc.Iterable` for iterating over the "
"lines of an input stream::"
msgstr ""

msgid ""
"def read_config(stream: Iterable[str]):\n"
"    for line in stream:\n"
"        ..."
msgstr ""

msgid "Functions and decorators"
msgstr ""

msgid "Cast a value to a type."
msgstr ""

msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""

msgid ""
"Ask a static type checker to confirm that *val* has an inferred type of "
"*typ*."
msgstr ""

msgid ""
"At runtime this does nothing: it returns the first argument unchanged with "
"no checks or side effects, no matter the actual type of the argument."
msgstr ""

msgid ""
"When a static type checker encounters a call to ``assert_type()``, it emits "
"an error if the value is not of the specified type::"
msgstr ""

msgid ""
"def greet(name: str) -> None:\n"
"    assert_type(name, str)  # OK, inferred type of `name` is `str`\n"
"    assert_type(name, int)  # type checker error"
msgstr ""

msgid ""
"This function is useful for ensuring the type checker's understanding of a "
"script is in line with the developer's intentions::"
msgstr ""

msgid ""
"def complex_function(arg: object):\n"
"    # Do some complex type-narrowing logic,\n"
"    # after which we hope the inferred type will be `int`\n"
"    ...\n"
"    # Test whether the type checker correctly understands our function\n"
"    assert_type(arg, int)"
msgstr ""

msgid ""
"Ask a static type checker to confirm that a line of code is unreachable."
msgstr ""

msgid "Example::"
msgstr ""

msgid ""
"def int_or_str(arg: int | str) -> None:\n"
"    match arg:\n"
"        case int():\n"
"            print(\"It's an int\")\n"
"        case str():\n"
"            print(\"It's a str\")\n"
"        case _ as unreachable:\n"
"            assert_never(unreachable)"
msgstr ""

msgid ""
"Here, the annotations allow the type checker to infer that the last case can "
"never execute, because ``arg`` is either an :class:`int` or a :class:`str`, "
"and both options are covered by earlier cases."
msgstr ""

msgid ""
"If a type checker finds that a call to ``assert_never()`` is reachable, it "
"will emit an error. For example, if the type annotation for ``arg`` was "
"instead ``int | str | float``, the type checker would emit an error pointing "
"out that ``unreachable`` is of type :class:`float`. For a call to "
"``assert_never`` to pass type checking, the inferred type of the argument "
"passed in must be the bottom type, :data:`Never`, and nothing else."
msgstr ""

msgid "At runtime, this throws an exception when called."
msgstr ""

msgid ""
"`Unreachable Code and Exhaustiveness Checking <https://typing.python.org/en/"
"latest/guides/unreachable.html>`__ has more information about exhaustiveness "
"checking with static typing."
msgstr ""

msgid "Ask a static type checker to reveal the inferred type of an expression."
msgstr ""

msgid ""
"When a static type checker encounters a call to this function, it emits a "
"diagnostic with the inferred type of the argument. For example::"
msgstr ""

msgid ""
"x: int = 1\n"
"reveal_type(x)  # Revealed type is \"builtins.int\""
msgstr ""

msgid ""
"This can be useful when you want to debug how your type checker handles a "
"particular piece of code."
msgstr ""

msgid ""
"At runtime, this function prints the runtime type of its argument to :data:"
"`sys.stderr` and returns the argument unchanged (allowing the call to be "
"used within an expression)::"
msgstr ""

msgid ""
"x = reveal_type(1)  # prints \"Runtime type is int\"\n"
"print(x)  # prints \"1\""
msgstr ""

msgid ""
"Note that the runtime type may be different from (more or less specific "
"than) the type statically inferred by a type checker."
msgstr ""

msgid ""
"Most type checkers support ``reveal_type()`` anywhere, even if the name is "
"not imported from ``typing``. Importing the name from ``typing``, however, "
"allows your code to run without runtime errors and communicates intent more "
"clearly."
msgstr ""

msgid ""
"Decorator to mark an object as providing :func:`dataclass <dataclasses."
"dataclass>`-like behavior."
msgstr ""

msgid ""
"``dataclass_transform`` may be used to decorate a class, metaclass, or a "
"function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class in a similar way "
"to :func:`@dataclasses.dataclass <dataclasses.dataclass>`."
msgstr ""

msgid "Example usage with a decorator function:"
msgstr ""

msgid ""
"@dataclass_transform()\n"
"def create_model[T](cls: type[T]) -> type[T]:\n"
"    ...\n"
"    return cls\n"
"\n"
"@create_model\n"
"class CustomerModel:\n"
"    id: int\n"
"    name: str"
msgstr ""

msgid "On a base class::"
msgstr ""

msgid ""
"@dataclass_transform()\n"
"class ModelBase: ...\n"
"\n"
"class CustomerModel(ModelBase):\n"
"    id: int\n"
"    name: str"
msgstr ""

msgid "On a metaclass::"
msgstr ""

msgid ""
"@dataclass_transform()\n"
"class ModelMeta(type): ...\n"
"\n"
"class ModelBase(metaclass=ModelMeta): ...\n"
"\n"
"class CustomerModel(ModelBase):\n"
"    id: int\n"
"    name: str"
msgstr ""

msgid ""
"The ``CustomerModel`` classes defined above will be treated by type checkers "
"similarly to classes created with :func:`@dataclasses.dataclass <dataclasses."
"dataclass>`. For example, type checkers will assume these classes have "
"``__init__`` methods that accept ``id`` and ``name``."
msgstr ""

msgid ""
"The decorated class, metaclass, or function may accept the following bool "
"arguments which type checkers will assume have the same effect as they would "
"have on the :func:`@dataclasses.dataclass<dataclasses.dataclass>` decorator: "
"``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, ``match_args``, "
"``kw_only``, and ``slots``. It must be possible for the value of these "
"arguments (``True`` or ``False``) to be statically evaluated."
msgstr ""

msgid ""
"The arguments to the ``dataclass_transform`` decorator can be used to "
"customize the default behaviors of the decorated class, metaclass, or "
"function:"
msgstr ""

msgid "Parameters"
msgstr ""

msgid ""
"Indicates whether the ``eq`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``True``."
msgstr ""

msgid ""
"Indicates whether the ``order`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""

msgid ""
"Indicates whether the ``kw_only`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""

msgid ""
"Indicates whether the ``frozen`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``.  .. "
"versionadded:: 3.12"
msgstr ""

msgid ""
"Indicates whether the ``frozen`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""

msgid ""
"Specifies a static list of supported classes or functions that describe "
"fields, similar to :func:`dataclasses.field`. Defaults to ``()``."
msgstr ""

msgid ""
"Arbitrary other keyword arguments are accepted in order to allow for "
"possible future extensions."
msgstr ""

msgid ""
"Type checkers recognize the following optional parameters on field "
"specifiers:"
msgstr ""

msgid "**Recognised parameters for field specifiers**"
msgstr ""

msgid "Parameter name"
msgstr ""

msgid "Description"
msgstr ""

msgid "``init``"
msgstr ""

msgid ""
"Indicates whether the field should be included in the synthesized "
"``__init__`` method. If unspecified, ``init`` defaults to ``True``."
msgstr ""

msgid "``default``"
msgstr ""

msgid "Provides the default value for the field."
msgstr ""

msgid "``default_factory``"
msgstr ""

msgid ""
"Provides a runtime callback that returns the default value for the field. If "
"neither ``default`` nor ``default_factory`` are specified, the field is "
"assumed to have no default value and must be provided a value when the class "
"is instantiated."
msgstr ""

msgid "``factory``"
msgstr ""

msgid "An alias for the ``default_factory`` parameter on field specifiers."
msgstr ""

msgid "``kw_only``"
msgstr ""

msgid ""
"Indicates whether the field should be marked as keyword-only. If ``True``, "
"the field will be keyword-only. If ``False``, it will not be keyword-only. "
"If unspecified, the value of the ``kw_only`` parameter on the object "
"decorated with ``dataclass_transform`` will be used, or if that is "
"unspecified, the value of ``kw_only_default`` on ``dataclass_transform`` "
"will be used."
msgstr ""

msgid "``alias``"
msgstr ""

msgid ""
"Provides an alternative name for the field. This alternative name is used in "
"the synthesized ``__init__`` method."
msgstr ""

msgid ""
"At runtime, this decorator records its arguments in the "
"``__dataclass_transform__`` attribute on the decorated object. It has no "
"other runtime effect."
msgstr ""

msgid "See :pep:`681` for more details."
msgstr ""

msgid "Decorator for creating overloaded functions and methods."
msgstr ""

msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method)."
msgstr ""

msgid ""
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition. The non-``@overload``-decorated definition, meanwhile, will be "
"used at runtime but should be ignored by a type checker.  At runtime, "
"calling an ``@overload``-decorated function directly will raise :exc:"
"`NotImplementedError`."
msgstr ""

msgid ""
"An example of overload that gives a more precise type than can be expressed "
"using a union or a type variable:"
msgstr ""

msgid ""
"@overload\n"
"def process(response: None) -> None:\n"
"    ...\n"
"@overload\n"
"def process(response: int) -> tuple[int, str]:\n"
"    ...\n"
"@overload\n"
"def process(response: bytes) -> str:\n"
"    ...\n"
"def process(response):\n"
"    ...  # actual implementation goes here"
msgstr ""

msgid ""
"See :pep:`484` for more details and comparison with other typing semantics."
msgstr ""

msgid ""
"Overloaded functions can now be introspected at runtime using :func:"
"`get_overloads`."
msgstr ""

msgid ""
"Return a sequence of :func:`@overload <overload>`-decorated definitions for "
"*func*."
msgstr ""

msgid ""
"*func* is the function object for the implementation of the overloaded "
"function. For example, given the definition of ``process`` in the "
"documentation for :func:`@overload <overload>`, ``get_overloads(process)`` "
"will return a sequence of three function objects for the three defined "
"overloads. If called on a function with no overloads, ``get_overloads()`` "
"returns an empty sequence."
msgstr ""

msgid ""
"``get_overloads()`` can be used for introspecting an overloaded function at "
"runtime."
msgstr ""

msgid "Clear all registered overloads in the internal registry."
msgstr ""

msgid "This can be used to reclaim the memory used by the registry."
msgstr ""

msgid "Decorator to indicate final methods and final classes."
msgstr ""

msgid ""
"Decorating a method with ``@final`` indicates to a type checker that the "
"method cannot be overridden in a subclass. Decorating a class with "
"``@final`` indicates that it cannot be subclassed."
msgstr ""

msgid ""
"class Base:\n"
"    @final\n"
"    def done(self) -> None:\n"
"        ...\n"
"class Sub(Base):\n"
"    def done(self) -> None:  # Error reported by type checker\n"
"        ...\n"
"\n"
"@final\n"
"class Leaf:\n"
"    ...\n"
"class Other(Leaf):  # Error reported by type checker\n"
"    ..."
msgstr ""

msgid ""
"The decorator will now attempt to set a ``__final__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, \"__final__\", "
"False)`` can be used at runtime to determine whether an object ``obj`` has "
"been marked as final. If the decorated object does not support setting "
"attributes, the decorator returns the object unchanged without raising an "
"exception."
msgstr ""

msgid "Decorator to indicate that annotations are not type hints."
msgstr ""

msgid ""
"This works as a class or function :term:`decorator`.  With a class, it "
"applies recursively to all methods and classes defined in that class (but "
"not to methods defined in its superclasses or subclasses). Type checkers "
"will ignore all annotations in a function or class with this decorator."
msgstr ""

msgid "``@no_type_check`` mutates the decorated object in place."
msgstr ""

msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr ""

msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr ""

msgid ""
"No type checker ever added support for ``@no_type_check_decorator``. It is "
"therefore deprecated, and will be removed in Python 3.15."
msgstr ""

msgid ""
"Decorator to indicate that a method in a subclass is intended to override a "
"method or attribute in a superclass."
msgstr ""

msgid ""
"Type checkers should emit an error if a method decorated with ``@override`` "
"does not, in fact, override anything. This helps prevent bugs that may occur "
"when a base class is changed without an equivalent change to a child class."
msgstr ""

msgid ""
"class Base:\n"
"    def log_status(self) -> None:\n"
"        ...\n"
"\n"
"class Sub(Base):\n"
"    @override\n"
"    def log_status(self) -> None:  # Okay: overrides Base.log_status\n"
"        ...\n"
"\n"
"    @override\n"
"    def done(self) -> None:  # Error reported by type checker\n"
"        ..."
msgstr ""

msgid "There is no runtime checking of this property."
msgstr ""

msgid ""
"The decorator will attempt to set an ``__override__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, "
"\"__override__\", False)`` can be used at runtime to determine whether an "
"object ``obj`` has been marked as an override.  If the decorated object does "
"not support setting attributes, the decorator returns the object unchanged "
"without raising an exception."
msgstr ""

msgid "See :pep:`698` for more details."
msgstr ""

msgid "Decorator to mark a class or function as unavailable at runtime."
msgstr ""

msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""

msgid ""
"@type_check_only\n"
"class Response:  # private or not available at runtime\n"
"    code: int\n"
"    def get_header(self, name: str) -> str: ...\n"
"\n"
"def fetch_response() -> Response: ..."
msgstr ""

msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""

msgid "Introspection helpers"
msgstr ""

msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""

msgid ""
"This is often the same as ``obj.__annotations__``, but this function makes "
"the following changes to the annotations dictionary:"
msgstr ""

msgid ""
"Forward references encoded as string literals or :class:`ForwardRef` objects "
"are handled by evaluating them in *globalns*, *localns*, and (where "
"applicable) *obj*'s :ref:`type parameter <type-params>` namespace. If "
"*globalns* or *localns* is not given, appropriate namespace dictionaries are "
"inferred from *obj*."
msgstr ""

msgid "``None`` is replaced with :class:`types.NoneType`."
msgstr ""

msgid ""
"If :func:`@no_type_check <no_type_check>` has been applied to *obj*, an "
"empty dictionary is returned."
msgstr ""

msgid ""
"If *obj* is a class ``C``, the function returns a dictionary that merges "
"annotations from ``C``'s base classes with those on ``C`` directly. This is "
"done by traversing :attr:`C.__mro__ <type.__mro__>` and iteratively "
"combining ``__annotations__`` dictionaries. Annotations on classes appearing "
"earlier in the :term:`method resolution order` always take precedence over "
"annotations on classes appearing later in the method resolution order."
msgstr ""

msgid ""
"The function recursively replaces all occurrences of ``Annotated[T, ...]`` "
"with ``T``, unless *include_extras* is set to ``True`` (see :class:"
"`Annotated` for more information)."
msgstr ""

msgid ""
"See also :func:`annotationlib.get_annotations`, a lower-level function that "
"returns annotations more directly."
msgstr ""

msgid ""
"If any forward references in the annotations of *obj* are not resolvable or "
"are not valid Python code, this function will raise an exception such as :"
"exc:`NameError`. For example, this can happen with imported :ref:`type "
"aliases <type-aliases>` that include forward references, or with names "
"imported under :data:`if TYPE_CHECKING <TYPE_CHECKING>`."
msgstr ""

msgid ""
"Added ``include_extras`` parameter as part of :pep:`593`. See the "
"documentation on :data:`Annotated` for more information."
msgstr ""

msgid ""
"Previously, ``Optional[t]`` was added for function and method annotations if "
"a default value equal to ``None`` was set. Now the annotation is returned "
"unchanged."
msgstr ""

msgid ""
"Get the unsubscripted version of a type: for a typing object of the form "
"``X[Y, Z, ...]`` return ``X``."
msgstr ""

msgid ""
"If ``X`` is a typing-module alias for a builtin or :mod:`collections` class, "
"it will be normalized to the original class. If ``X`` is an instance of :"
"class:`ParamSpecArgs` or :class:`ParamSpecKwargs`, return the underlying :"
"class:`ParamSpec`. Return ``None`` for unsupported objects."
msgstr ""

msgid "Examples:"
msgstr ""

msgid ""
"assert get_origin(str) is None\n"
"assert get_origin(Dict[str, int]) is dict\n"
"assert get_origin(Union[int, str]) is Union\n"
"assert get_origin(Annotated[str, \"metadata\"]) is Annotated\n"
"P = ParamSpec('P')\n"
"assert get_origin(P.args) is P\n"
"assert get_origin(P.kwargs) is P"
msgstr ""

msgid ""
"Get type arguments with all substitutions performed: for a typing object of "
"the form ``X[Y, Z, ...]`` return ``(Y, Z, ...)``."
msgstr ""

msgid ""
"If ``X`` is a union or :class:`Literal` contained in another generic type, "
"the order of ``(Y, Z, ...)`` may be different from the order of the original "
"arguments ``[Y, Z, ...]`` due to type caching. Return ``()`` for unsupported "
"objects."
msgstr ""

msgid ""
"assert get_args(int) == ()\n"
"assert get_args(Dict[int, str]) == (int, str)\n"
"assert get_args(Union[int, str]) == (int, str)"
msgstr ""

msgid "Return the set of members defined in a :class:`Protocol`."
msgstr ""

msgid ""
">>> from typing import Protocol, get_protocol_members\n"
">>> class P(Protocol):\n"
"...     def a(self) -> str: ...\n"
"...     b: int\n"
">>> get_protocol_members(P) == frozenset({'a', 'b'})\n"
"True"
msgstr ""

msgid "Raise :exc:`TypeError` for arguments that are not Protocols."
msgstr ""

msgid "Determine if a type is a :class:`Protocol`."
msgstr ""

msgid ""
"class P(Protocol):\n"
"    def a(self) -> str: ...\n"
"    b: int\n"
"\n"
"is_protocol(P)    # => True\n"
"is_protocol(int)  # => False"
msgstr ""

msgid "Check if a type is a :class:`TypedDict`."
msgstr ""

msgid ""
"class Film(TypedDict):\n"
"    title: str\n"
"    year: int\n"
"\n"
"assert is_typeddict(Film)\n"
"assert not is_typeddict(list | str)\n"
"\n"
"# TypedDict is a factory for creating typed dicts,\n"
"# not a typed dict itself\n"
"assert not is_typeddict(TypedDict)"
msgstr ""

msgid ""
"Class used for internal typing representation of string forward references."
msgstr ""

msgid ""
"For example, ``List[\"SomeClass\"]`` is implicitly transformed into "
"``List[ForwardRef(\"SomeClass\")]``.  :class:`!ForwardRef` should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""

msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""

msgid ""
"This is now an alias for :class:`annotationlib.ForwardRef`. Several "
"undocumented behaviors of this class have been changed; for example, after a "
"``ForwardRef`` has been evaluated, the evaluated value is no longer cached."
msgstr ""

msgid "Evaluate an :class:`annotationlib.ForwardRef` as a :term:`type hint`."
msgstr ""

msgid ""
"This is similar to calling :meth:`annotationlib.ForwardRef.evaluate`, but "
"unlike that method, :func:`!evaluate_forward_ref` also recursively evaluates "
"forward references nested within the type hint."
msgstr ""

msgid ""
"See the documentation for :meth:`annotationlib.ForwardRef.evaluate` for the "
"meaning of the *owner*, *globals*, *locals*, *type_params*, and *format* "
"parameters."
msgstr ""

msgid ""
"A sentinel object used to indicate that a type parameter has no default "
"value. For example:"
msgstr ""

msgid ""
">>> T = TypeVar(\"T\")\n"
">>> T.__default__ is typing.NoDefault\n"
"True\n"
">>> S = TypeVar(\"S\", default=None)\n"
">>> S.__default__ is None\n"
"True"
msgstr ""

msgid "Constant"
msgstr ""

msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It's ``False`` at runtime."
msgstr ""

msgid ""
"A module which is expensive to import, and which only contain types used for "
"typing annotations, can be safely imported inside an ``if TYPE_CHECKING:`` "
"block.  This prevents the module from actually being imported at runtime; "
"annotations aren't eagerly evaluated (see :pep:`649`) so using undefined "
"symbols in annotations is harmless--as long as you don't later examine them. "
"Your static type analysis tool will set ``TYPE_CHECKING`` to ``True`` during "
"static type analysis, which means the module will be imported and the types "
"will be checked properly during such analysis."
msgstr ""

msgid ""
"if TYPE_CHECKING:\n"
"    import expensive_mod\n"
"\n"
"def fun(arg: expensive_mod.SomeType) -> None:\n"
"    local_var: expensive_mod.AnotherType = other_fun()"
msgstr ""

msgid ""
"If you occasionally need to examine type annotations at runtime which may "
"contain undefined symbols, use :meth:`annotationlib.get_annotations` with a "
"``format`` parameter of :attr:`annotationlib.Format.STRING` or :attr:"
"`annotationlib.Format.FORWARDREF` to safely retrieve the annotations without "
"raising :exc:`NameError`."
msgstr ""

msgid "Deprecated aliases"
msgstr ""

msgid ""
"This module defines several deprecated aliases to pre-existing standard "
"library classes. These were originally included in the :mod:`!typing` module "
"in order to support parameterizing these generic classes using ``[]``. "
"However, the aliases became redundant in Python 3.9 when the corresponding "
"pre-existing classes were enhanced to support ``[]`` (see :pep:`585`)."
msgstr ""

msgid ""
"The redundant types are deprecated as of Python 3.9. However, while the "
"aliases may be removed at some point, removal of these aliases is not "
"currently planned. As such, no deprecation warnings are currently issued by "
"the interpreter for these aliases."
msgstr ""

msgid ""
"If at some point it is decided to remove these deprecated aliases, a "
"deprecation warning will be issued by the interpreter for at least two "
"releases prior to removal. The aliases are guaranteed to remain in the :mod:"
"`!typing` module without deprecation warnings until at least Python 3.14."
msgstr ""

msgid ""
"Type checkers are encouraged to flag uses of the deprecated types if the "
"program they are checking targets a minimum Python version of 3.9 or newer."
msgstr ""

msgid "Aliases to built-in types"
msgstr ""

msgid "Deprecated alias to :class:`dict`."
msgstr ""

msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`~collections.abc.Mapping` rather than to "
"use :class:`dict` or :class:`!typing.Dict`."
msgstr ""

msgid ""
":class:`builtins.dict <dict>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`list`."
msgstr ""

msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`~collections.abc.Sequence` or :class:"
"`~collections.abc.Iterable` rather than to use :class:`list` or :class:`!"
"typing.List`."
msgstr ""

msgid ""
":class:`builtins.list <list>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`builtins.set <set>`."
msgstr ""

msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`collections.abc.Set` rather than to use :"
"class:`set` or :class:`typing.Set`."
msgstr ""

msgid ""
":class:`builtins.set <set>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`builtins.frozenset <frozenset>`."
msgstr ""

msgid ""
":class:`builtins.frozenset <frozenset>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias for :class:`tuple`."
msgstr ""

msgid ""
":class:`tuple` and ``Tuple`` are special-cased in the type system; see :ref:"
"`annotating-tuples` for more details."
msgstr ""

msgid ""
":class:`builtins.tuple <tuple>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`type`."
msgstr ""

msgid ""
"See :ref:`type-of-class-objects` for details on using :class:`type` or "
"``typing.Type`` in type annotations."
msgstr ""

msgid ""
":class:`builtins.type <type>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Aliases to types in :mod:`collections`"
msgstr ""

msgid "Deprecated alias to :class:`collections.defaultdict`."
msgstr ""

msgid ""
":class:`collections.defaultdict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.OrderedDict`."
msgstr ""

msgid ""
":class:`collections.OrderedDict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.ChainMap`."
msgstr ""

msgid ""
":class:`collections.ChainMap` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.Counter`."
msgstr ""

msgid ""
":class:`collections.Counter` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.deque`."
msgstr ""

msgid ""
":class:`collections.deque` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Aliases to other concrete types"
msgstr ""

msgid ""
"Deprecated aliases corresponding to the return types from :func:`re.compile` "
"and :func:`re.match`."
msgstr ""

msgid ""
"These types (and the corresponding functions) are generic over :data:"
"`AnyStr`. ``Pattern`` can be specialised as ``Pattern[str]`` or "
"``Pattern[bytes]``; ``Match`` can be specialised as ``Match[str]`` or "
"``Match[bytes]``."
msgstr ""

msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias for :class:`str`."
msgstr ""

msgid ""
"``Text`` is provided to supply a forward compatible path for Python 2 code: "
"in Python 2, ``Text`` is an alias for ``unicode``."
msgstr ""

msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""

msgid ""
"def add_unicode_checkmark(text: Text) -> Text:\n"
"    return text + u' \\u2713'"
msgstr ""

msgid ""
"Python 2 is no longer supported, and most type checkers also no longer "
"support type checking Python 2 code. Removal of the alias is not currently "
"planned, but users are encouraged to use :class:`str` instead of ``Text``."
msgstr ""

msgid "Aliases to container ABCs in :mod:`collections.abc`"
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.Set`."
msgstr ""

msgid ""
":class:`collections.abc.Set` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.Collection`."
msgstr ""

msgid ""
":class:`collections.abc.Collection` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.Container`."
msgstr ""

msgid ""
":class:`collections.abc.Container` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.ItemsView`."
msgstr ""

msgid ""
":class:`collections.abc.ItemsView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.KeysView`."
msgstr ""

msgid ""
":class:`collections.abc.KeysView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.Mapping`."
msgstr ""

msgid ""
":class:`collections.abc.Mapping` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.MappingView`."
msgstr ""

msgid ""
":class:`collections.abc.MappingView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.MutableMapping`."
msgstr ""

msgid ""
":class:`collections.abc.MutableMapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.MutableSequence`."
msgstr ""

msgid ""
":class:`collections.abc.MutableSequence` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.MutableSet`."
msgstr ""

msgid ""
":class:`collections.abc.MutableSet` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.Sequence`."
msgstr ""

msgid ""
":class:`collections.abc.Sequence` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.ValuesView`."
msgstr ""

msgid ""
":class:`collections.abc.ValuesView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Aliases to asynchronous ABCs in :mod:`collections.abc`"
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.Coroutine`."
msgstr ""

msgid ""
"See :ref:`annotating-generators-and-coroutines` for details on using :class:"
"`collections.abc.Coroutine` and ``typing.Coroutine`` in type annotations."
msgstr ""

msgid ""
":class:`collections.abc.Coroutine` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.AsyncGenerator`."
msgstr ""

msgid ""
"See :ref:`annotating-generators-and-coroutines` for details on using :class:"
"`collections.abc.AsyncGenerator` and ``typing.AsyncGenerator`` in type "
"annotations."
msgstr ""

msgid ""
":class:`collections.abc.AsyncGenerator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "The ``SendType`` parameter now has a default."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.AsyncIterable`."
msgstr ""

msgid ""
":class:`collections.abc.AsyncIterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.AsyncIterator`."
msgstr ""

msgid ""
":class:`collections.abc.AsyncIterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.Awaitable`."
msgstr ""

msgid ""
":class:`collections.abc.Awaitable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Aliases to other ABCs in :mod:`collections.abc`"
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.Iterable`."
msgstr ""

msgid ""
":class:`collections.abc.Iterable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.Iterator`."
msgstr ""

msgid ""
":class:`collections.abc.Iterator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.Callable`."
msgstr ""

msgid ""
"See :ref:`annotating-callables` for details on how to use :class:"
"`collections.abc.Callable` and ``typing.Callable`` in type annotations."
msgstr ""

msgid ""
":class:`collections.abc.Callable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.Generator`."
msgstr ""

msgid ""
"See :ref:`annotating-generators-and-coroutines` for details on using :class:"
"`collections.abc.Generator` and ``typing.Generator`` in type annotations."
msgstr ""

msgid ""
":class:`collections.abc.Generator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Default values for the send and return types were added."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.Hashable`."
msgstr ""

msgid "Use :class:`collections.abc.Hashable` directly instead."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.Reversible`."
msgstr ""

msgid ""
":class:`collections.abc.Reversible` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Deprecated alias to :class:`collections.abc.Sized`."
msgstr ""

msgid "Use :class:`collections.abc.Sized` directly instead."
msgstr ""

msgid "Aliases to :mod:`contextlib` ABCs"
msgstr ""

msgid "Deprecated alias to :class:`contextlib.AbstractContextManager`."
msgstr ""

msgid ""
"The first type parameter, ``T_co``, represents the type returned by the :"
"meth:`~object.__enter__` method. The optional second type parameter, "
"``ExitT_co``, which defaults to ``bool | None``, represents the type "
"returned by the :meth:`~object.__exit__` method."
msgstr ""

msgid ""
":class:`contextlib.AbstractContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Added the optional second type parameter, ``ExitT_co``."
msgstr ""

msgid "Deprecated alias to :class:`contextlib.AbstractAsyncContextManager`."
msgstr ""

msgid ""
"The first type parameter, ``T_co``, represents the type returned by the :"
"meth:`~object.__aenter__` method. The optional second type parameter, "
"``AExitT_co``, which defaults to ``bool | None``, represents the type "
"returned by the :meth:`~object.__aexit__` method."
msgstr ""

msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""

msgid "Added the optional second type parameter, ``AExitT_co``."
msgstr ""

msgid "Deprecation Timeline of Major Features"
msgstr ""

msgid ""
"Certain features in ``typing`` are deprecated and may be removed in a future "
"version of Python. The following table summarizes major deprecations for "
"your convenience. This is subject to change, and not all deprecations are "
"listed."
msgstr ""

msgid "Feature"
msgstr ""

msgid "Deprecated in"
msgstr ""

msgid "Projected removal"
msgstr ""

msgid "PEP/issue"
msgstr ""

msgid "``typing`` versions of standard collections"
msgstr ""

msgid "3.9"
msgstr ""

msgid "Undecided (see :ref:`deprecated-aliases` for more information)"
msgstr ""

msgid ":pep:`585`"
msgstr ""

msgid ":data:`typing.Text`"
msgstr ""

msgid "3.11"
msgstr ""

msgid "Undecided"
msgstr ""

msgid ":gh:`92332`"
msgstr ""

msgid ":class:`typing.Hashable` and :class:`typing.Sized`"
msgstr ""

msgid "3.12"
msgstr ""

msgid ":gh:`94309`"
msgstr ""

msgid ":data:`typing.TypeAlias`"
msgstr ""

msgid ":pep:`695`"
msgstr ""

msgid ":func:`@typing.no_type_check_decorator <no_type_check_decorator>`"
msgstr ""

msgid "3.13"
msgstr ""

msgid "3.15"
msgstr ""

msgid ":gh:`106309`"
msgstr ""

msgid ":data:`typing.AnyStr`"
msgstr ""

msgid "3.18"
msgstr ""

msgid ":gh:`105578`"
msgstr ""
