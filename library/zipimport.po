# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-09 14:17+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!zipimport` --- Import modules from Zip archives"
msgstr ":mod:`!zipimport` --- Importera moduler från zip-arkiv"

msgid "**Source code:** :source:`Lib/zipimport.py`"
msgstr "**Källkod:** :source:`Lib/zipimport.py`"

msgid ""
"This module adds the ability to import Python modules (:file:`\\*.py`, :file:"
"`\\*.pyc`) and packages from ZIP-format archives. It is usually not needed "
"to use the :mod:`zipimport` module explicitly; it is automatically used by "
"the built-in :keyword:`import` mechanism for :data:`sys.path` items that are "
"paths to ZIP archives."
msgstr ""
"Denna modul ger möjlighet att importera Python-moduler (:file:`\\*.py`, :"
"file:`\\*.pyc`) och paket från ZIP-formatarkiv. Det är vanligtvis inte "
"nödvändigt att använda :mod:`zipimport`-modulen explicit; den används "
"automatiskt av den inbyggda :keyword:`import`-mekanismen för :data:`sys."
"path`-objekt som är sökvägar till ZIP-arkiv."

msgid ""
"Typically, :data:`sys.path` is a list of directory names as strings.  This "
"module also allows an item of :data:`sys.path` to be a string naming a ZIP "
"file archive. The ZIP archive can contain a subdirectory structure to "
"support package imports, and a path within the archive can be specified to "
"only import from a subdirectory.  For example, the path :file:`example.zip/"
"lib/` would only import from the :file:`lib/` subdirectory within the "
"archive."
msgstr ""
"Vanligtvis är :data:`sys.path` en lista med katalognamn i form av strängar.  "
"Den här modulen tillåter också att ett objekt i :data:`sys.path` är en "
"sträng som namnger ett ZIP-filarkiv. ZIP-arkivet kan innehålla en "
"underkatalogstruktur för att stödja paketimport, och en sökväg i arkivet kan "
"anges för att endast importera från en underkatalog.  Till exempel skulle "
"sökvägen :file:`example.zip/lib/` endast importera från underkatalogen :file:"
"`lib/` i arkivet."

msgid ""
"Any files may be present in the ZIP archive, but importers are only invoked "
"for :file:`.py` and :file:`.pyc` files.  ZIP import of dynamic modules (:"
"file:`.pyd`, :file:`.so`) is disallowed. Note that if an archive only "
"contains :file:`.py` files, Python will not attempt to modify the archive by "
"adding the corresponding :file:`.pyc` file, meaning that if a ZIP archive "
"doesn't contain :file:`.pyc` files, importing may be rather slow."
msgstr ""
"Alla filer kan finnas i ZIP-arkivet, men importörer anropas endast för :file:"
"`.py`- och :file:`.pyc`-filer.  ZIP-import av dynamiska moduler (:file:`."
"pyd`, :file:`.so`) är inte tillåten. Observera att om ett arkiv endast "
"innehåller :file:`.py`-filer kommer Python inte att försöka modifiera "
"arkivet genom att lägga till motsvarande :file:`.pyc`-fil, vilket innebär "
"att om ett ZIP-arkiv inte innehåller :file:`.pyc`-filer kan importen gå "
"ganska långsamt."

msgid "ZIP64 is supported"
msgstr "ZIP64 stöds"

msgid "Previously, ZIP archives with an archive comment were not supported."
msgstr "Tidigare stöddes inte ZIP-arkiv med en arkivkommentar."

msgid ""
"`PKZIP Application Note <https://pkware.cachefly.net/webdocs/casestudies/"
"APPNOTE.TXT>`_"
msgstr ""
"`PKZIP Application Note <https://pkware.cachefly.net/webdocs/casestudies/"
"APPNOTE.TXT>`_"

msgid ""
"Documentation on the ZIP file format by Phil Katz, the creator of the format "
"and algorithms used."
msgstr ""
"Dokumentation om ZIP-filformatet av Phil Katz, skaparen av formatet och "
"algoritmerna som används."

msgid ":pep:`273` - Import Modules from Zip Archives"
msgstr ":pep:`273` - Importera moduler från zip-arkiv"

msgid ""
"Written by James C. Ahlstrom, who also provided an implementation. Python "
"2.3 follows the specification in :pep:`273`, but uses an implementation "
"written by Just van Rossum that uses the import hooks described in :pep:"
"`302`."
msgstr ""
"Skriven av James C. Ahlstrom, som också tillhandahöll en implementation. "
"Python 2.3 följer specifikationen i :pep:`273`, men använder en "
"implementation skriven av Just van Rossum som använder importkrokarna som "
"beskrivs i :pep:`302`."

msgid ":mod:`importlib` - The implementation of the import machinery"
msgstr ":mod:`importlib` - Implementeringen av importmaskineriet"

msgid ""
"Package providing the relevant protocols for all importers to implement."
msgstr "Paket med de relevanta protokoll som alla importörer ska genomföra."

msgid "This module defines an exception:"
msgstr "Denna modul definierar ett undantag:"

msgid ""
"Exception raised by zipimporter objects. It's a subclass of :exc:"
"`ImportError`, so it can be caught as :exc:`ImportError`, too."
msgstr ""
"Undantag som orsakas av zipimporter-objekt. Det är en underklass till :exc:"
"`ImportError`, så det kan också fångas som :exc:`ImportError`."

msgid "zipimporter Objects"
msgstr "zipimporter objekt"

msgid ":class:`zipimporter` is the class for importing ZIP files."
msgstr ":class:`zipimporter` är en klass för import av ZIP-filer."

msgid ""
"Create a new zipimporter instance. *archivepath* must be a path to a ZIP "
"file, or to a specific path within a ZIP file.  For example, an "
"*archivepath* of :file:`foo/bar.zip/lib` will look for modules in the :file:"
"`lib` directory inside the ZIP file :file:`foo/bar.zip` (provided that it "
"exists)."
msgstr ""
"Skapa en ny zipimporter-instans. *archivepath* måste vara en sökväg till en "
"ZIP-fil eller till en specifik sökväg inom en ZIP-fil.  Till exempel kommer "
"en *archivepath* på :file:`foo/bar.zip/lib` att leta efter moduler i "
"katalogen :file:`lib` i ZIP-filen :file:`foo/bar.zip` (förutsatt att den "
"finns)."

msgid ""
":exc:`ZipImportError` is raised if *archivepath* doesn't point to a valid "
"ZIP archive."
msgstr ""
":exc:`ZipImportError` uppstår om *archivepath* inte pekar på ett giltigt ZIP-"
"arkiv."

msgid ""
"Methods ``find_loader()`` and ``find_module()``, deprecated in 3.10 are now "
"removed.  Use :meth:`find_spec` instead."
msgstr ""
"Metoderna ``find_loader()`` och ``find_module()``, föråldrade i 3.10, är nu "
"borttagna.  Använd :meth:`find_spec` istället."

msgid ""
"Implementation of :meth:`importlib.abc.Loader.create_module` that returns :"
"const:`None` to explicitly request the default semantics."
msgstr ""
"Implementering av :meth:`importlib.abc.Loader.create_module` som returnerar :"
"const:`None` för att uttryckligen begära standardsemantik."

msgid "Implementation of :meth:`importlib.abc.Loader.exec_module`."
msgstr "Implementering av :meth:`importlib.abc.Loader.exec_module`."

msgid "An implementation of :meth:`importlib.abc.PathEntryFinder.find_spec`."
msgstr "En implementation av :meth:`importlib.abc.PathEntryFinder.find_spec`."

msgid ""
"Return the code object for the specified module. Raise :exc:`ZipImportError` "
"if the module couldn't be imported."
msgstr ""
"Returnerar kodobjektet för den angivna modulen. Utlöser :exc:"
"`ZipImportError` om modulen inte kunde importeras."

msgid ""
"Return the data associated with *pathname*. Raise :exc:`OSError` if the file "
"wasn't found."
msgstr ""
"Returnerar data som är associerade med *pathname*. Utlös :exc:`OSError` om "
"filen inte hittades."

msgid ":exc:`IOError` used to be raised, it is now an alias of :exc:`OSError`."
msgstr ""
":exc:`IOError` användes tidigare, nu är det ett alias för :exc:`OSError`."

msgid ""
"Return the value ``__file__`` would be set to if the specified module was "
"imported. Raise :exc:`ZipImportError` if the module couldn't be imported."
msgstr ""
"Returnerar värdet ``__file__`` skulle sättas till om den angivna modulen "
"importerades. Utlöser :exc:`ZipImportError` om modulen inte kunde importeras."

msgid ""
"Return the source code for the specified module. Raise :exc:`ZipImportError` "
"if the module couldn't be found, return :const:`None` if the archive does "
"contain the module, but has no source for it."
msgstr ""
"Returnerar källkoden för den angivna modulen. Utlös :exc:`ZipImportError` om "
"modulen inte kunde hittas, returnera :const:`None` om arkivet innehåller "
"modulen, men inte har någon källkod för den."

msgid ""
"Return ``True`` if the module specified by *fullname* is a package. Raise :"
"exc:`ZipImportError` if the module couldn't be found."
msgstr ""
"Returnerar ``True`` om modulen som anges av *fullname* är ett paket. "
"Utlöser :exc:`ZipImportError` om modulen inte kunde hittas."

msgid ""
"Load the module specified by *fullname*. *fullname* must be the fully "
"qualified (dotted) module name. Returns the imported module on success, "
"raises :exc:`ZipImportError` on failure."
msgstr ""
"Laddar den modul som anges av *fullname*. *fullname* måste vara det "
"fullständigt kvalificerade (prickade) modulnamnet. Returnerar den "
"importerade modulen vid framgång, ger upphov till :exc:`ZipImportError` vid "
"misslyckande."

msgid "Use :meth:`exec_module` instead."
msgstr "Använd :meth:`exec_module` istället."

msgid ""
"Clear out the internal cache of information about files found within the ZIP "
"archive."
msgstr ""
"Rensa den interna cacheminnet för information om filer som finns i ZIP-"
"arkivet."

msgid ""
"The file name of the importer's associated ZIP file, without a possible "
"subpath."
msgstr "Filnamnet på importörens tillhörande ZIP-fil, utan eventuell underväg."

msgid ""
"The subpath within the ZIP file where modules are searched.  This is the "
"empty string for zipimporter objects which point to the root of the ZIP file."
msgstr ""
"Den underväg i ZIP-filen där moduler söks.  Detta är den tomma strängen för "
"zipimporter-objekt som pekar på roten till ZIP-filen."

msgid ""
"The :attr:`archive` and :attr:`prefix` attributes, when combined with a "
"slash, equal the original *archivepath* argument given to the :class:"
"`zipimporter` constructor."
msgstr ""
"Attributen :attr:`archive` och :attr:`prefix`, när de kombineras med ett "
"snedstreck, motsvarar det ursprungliga argumentet *archivepath* som ges till "
"konstruktören :class:`zipimporter`."

msgid "Examples"
msgstr "Exempel"

msgid ""
"Here is an example that imports a module from a ZIP archive - note that the :"
"mod:`zipimport` module is not explicitly used."
msgstr ""
"Här är ett exempel på import av en modul från ett ZIP-arkiv - notera att "
"modulen :mod:`zipimport` inte används explicit."

msgid ""
"$ unzip -l example.zip\n"
"Archive:  example.zip\n"
"  Length     Date   Time    Name\n"
" --------    ----   ----    ----\n"
"     8467  11-26-02 22:30   jwzthreading.py\n"
" --------                   -------\n"
"     8467                   1 file\n"
"$ ./python\n"
"Python 2.3 (#1, Aug 1 2003, 19:54:32)\n"
">>> import sys\n"
">>> sys.path.insert(0, 'example.zip')  # Add .zip file to front of path\n"
">>> import jwzthreading\n"
">>> jwzthreading.__file__\n"
"'example.zip/jwzthreading.py'"
msgstr ""
"$ unzip -l exempel.zip\n"
"Arkiv: exempel.zip\n"
"  Längd Datum Tid Namn\n"
" -------- ---- ---- ----\n"
"     8467 11-26-02 22:30 jwzthreading.py\n"
" -------- -------\n"
"     8467 1 fil\n"
"$ ./python\n"
"Python 2.3 (#1, 1 aug 2003, 19:54:32)\n"
">>> import sys\n"
">>> sys.path.insert(0, 'example.zip') # Lägg till .zip-filen i början av "
"sökvägen\n"
">>> import jwzthreading\n"
">>> jwzthreading.__file__\n"
"'exempel.zip/jwzthreading.py'"
