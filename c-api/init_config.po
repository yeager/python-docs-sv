# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-25 14:20+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Python Initialization Configuration"
msgstr ""

msgid "PyInitConfig C API"
msgstr ""

msgid "Python can be initialized with :c:func:`Py_InitializeFromInitConfig`."
msgstr ""

msgid ""
"The :c:func:`Py_RunMain` function can be used to write a customized Python "
"program."
msgstr ""

msgid ""
"See also :ref:`Initialization, Finalization, and Threads <initialization>`."
msgstr ""

msgid ":pep:`741` \"Python Configuration C API\"."
msgstr ""

msgid "Example"
msgstr ""

msgid ""
"Example of customized Python always running with the :ref:`Python "
"Development Mode <devmode>` enabled; return ``-1`` on error:"
msgstr ""

msgid ""
"int init_python(void)\n"
"{\n"
"    PyInitConfig *config = PyInitConfig_Create();\n"
"    if (config == NULL) {\n"
"        printf(\"PYTHON INIT ERROR: memory allocation failed\\n\");\n"
"        return -1;\n"
"    }\n"
"\n"
"    // Enable the Python Development Mode\n"
"    if (PyInitConfig_SetInt(config, \"dev_mode\", 1) < 0) {\n"
"        goto error;\n"
"    }\n"
"\n"
"    // Initialize Python with the configuration\n"
"    if (Py_InitializeFromInitConfig(config) < 0) {\n"
"        goto error;\n"
"    }\n"
"    PyInitConfig_Free(config);\n"
"    return 0;\n"
"\n"
"error:\n"
"    {\n"
"        // Display the error message.\n"
"        //\n"
"        // This uncommon braces style is used, because you cannot make\n"
"        // goto targets point to variable declarations.\n"
"        const char *err_msg;\n"
"        (void)PyInitConfig_GetError(config, &err_msg);\n"
"        printf(\"PYTHON INIT ERROR: %s\\n\", err_msg);\n"
"        PyInitConfig_Free(config);\n"
"        return -1;\n"
"    }\n"
"}"
msgstr ""

msgid "Create Config"
msgstr ""

msgid "Opaque structure to configure the Python initialization."
msgstr ""

msgid ""
"Create a new initialization configuration using :ref:`Isolated Configuration "
"<init-isolated-conf>` default values."
msgstr ""

msgid "It must be freed by :c:func:`PyInitConfig_Free`."
msgstr ""

msgid "Return ``NULL`` on memory allocation failure."
msgstr ""

msgid "Free memory of the initialization configuration *config*."
msgstr ""

msgid "If *config* is ``NULL``, no operation is performed."
msgstr ""

msgid "Error Handling"
msgstr ""

msgid "Get the *config* error message."
msgstr ""

msgid "Set *\\*err_msg* and return ``1`` if an error is set."
msgstr ""

msgid "Set *\\*err_msg* to ``NULL`` and return ``0`` otherwise."
msgstr ""

msgid "An error message is an UTF-8 encoded string."
msgstr ""

msgid "If *config* has an exit code, format the exit code as an error message."
msgstr ""

msgid ""
"The error message remains valid until another ``PyInitConfig`` function is "
"called with *config*. The caller doesn't have to free the error message."
msgstr ""

msgid "Get the *config* exit code."
msgstr ""

msgid "Set *\\*exitcode* and return ``1`` if *config* has an exit code set."
msgstr ""

msgid "Return ``0`` if *config* has no exit code set."
msgstr ""

msgid ""
"Only the ``Py_InitializeFromInitConfig()`` function can set an exit code if "
"the ``parse_argv`` option is non-zero."
msgstr ""

msgid ""
"An exit code can be set when parsing the command line failed (exit code "
"``2``) or when a command line option asks to display the command line help "
"(exit code ``0``)."
msgstr ""

msgid "Get Options"
msgstr ""

msgid ""
"The configuration option *name* parameter must be a non-NULL null-terminated "
"UTF-8 encoded string. See :ref:`Configuration Options <pyinitconfig-opts>`."
msgstr ""

msgid "Test if the configuration has an option called *name*."
msgstr ""

msgid "Return ``1`` if the option exists, or return ``0`` otherwise."
msgstr ""

msgid "Get an integer configuration option."
msgstr ""

msgid "Set *\\*value*, and return ``0`` on success."
msgstr ""

msgid "Set an error in *config* and return ``-1`` on error."
msgstr ""

msgid ""
"Get a string configuration option as a null-terminated UTF-8 encoded string."
msgstr ""

msgid ""
"*\\*value* can be set to ``NULL`` if the option is an optional string and "
"the option is unset."
msgstr ""

msgid ""
"On success, the string must be released with ``free(value)`` if it's not "
"``NULL``."
msgstr ""

msgid ""
"Get a string list configuration option as an array of null-terminated UTF-8 "
"encoded strings."
msgstr ""

msgid "Set *\\*length* and *\\*value*, and return ``0`` on success."
msgstr ""

msgid ""
"On success, the string list must be released with "
"``PyInitConfig_FreeStrList(length, items)``."
msgstr ""

msgid "Free memory of a string list created by ``PyInitConfig_GetStrList()``."
msgstr ""

msgid "Set Options"
msgstr ""

msgid ""
"Some configuration options have side effects on other options. This logic is "
"only implemented when ``Py_InitializeFromInitConfig()`` is called, not by "
"the \"Set\" functions below. For example, setting ``dev_mode`` to ``1`` does "
"not set ``faulthandler`` to ``1``."
msgstr ""

msgid "Set an integer configuration option."
msgstr ""

msgid "Return ``0`` on success."
msgstr ""

msgid ""
"Set a string configuration option from a null-terminated UTF-8 encoded "
"string. The string is copied."
msgstr ""

msgid ""
"Set a string list configuration option from an array of null-terminated "
"UTF-8 encoded strings. The string list is copied."
msgstr ""

msgid "Module"
msgstr ""

msgid "Add a built-in extension module to the table of built-in modules."
msgstr ""

msgid ""
"The new module can be imported by the name *name*, and uses the function "
"*initfunc* as the initialization function called on the first attempted "
"import."
msgstr ""

msgid ""
"If Python is initialized multiple times, ``PyInitConfig_AddModule()`` must "
"be called at each Python initialization."
msgstr ""

msgid "Similar to the :c:func:`PyImport_AppendInittab` function."
msgstr ""

msgid "Initialize Python"
msgstr ""

msgid "Initialize Python from the initialization configuration."
msgstr ""

msgid "Set an exit code in *config* and return ``-1`` if Python wants to exit."
msgstr ""

msgid "See ``PyInitConfig_GetExitcode()`` for the exit code case."
msgstr ""

msgid "Configuration Options"
msgstr ""

msgid "Option"
msgstr ""

msgid "PyConfig/PyPreConfig member"
msgstr ""

msgid "Type"
msgstr ""

msgid "Visibility"
msgstr ""

msgid "``\"allocator\"``"
msgstr ""

msgid ":c:member:`allocator <PyPreConfig.allocator>`"
msgstr ""

msgid "``int``"
msgstr ""

msgid "Read-only"
msgstr ""

msgid "``\"argv\"``"
msgstr ""

msgid ":c:member:`argv <PyConfig.argv>`"
msgstr ""

msgid "``list[str]``"
msgstr ""

msgid "Public"
msgstr ""

msgid "``\"base_exec_prefix\"``"
msgstr ""

msgid ":c:member:`base_exec_prefix <PyConfig.base_exec_prefix>`"
msgstr ""

msgid "``str``"
msgstr ""

msgid "``\"base_executable\"``"
msgstr ""

msgid ":c:member:`base_executable <PyConfig.base_executable>`"
msgstr ""

msgid "``\"base_prefix\"``"
msgstr ""

msgid ":c:member:`base_prefix <PyConfig.base_prefix>`"
msgstr ""

msgid "``\"buffered_stdio\"``"
msgstr ""

msgid ":c:member:`buffered_stdio <PyConfig.buffered_stdio>`"
msgstr ""

msgid "``bool``"
msgstr ""

msgid "``\"bytes_warning\"``"
msgstr ""

msgid ":c:member:`bytes_warning <PyConfig.bytes_warning>`"
msgstr ""

msgid "``\"check_hash_pycs_mode\"``"
msgstr ""

msgid ":c:member:`check_hash_pycs_mode <PyConfig.check_hash_pycs_mode>`"
msgstr ""

msgid "``\"code_debug_ranges\"``"
msgstr ""

msgid ":c:member:`code_debug_ranges <PyConfig.code_debug_ranges>`"
msgstr ""

msgid "``\"coerce_c_locale\"``"
msgstr ""

msgid ":c:member:`coerce_c_locale <PyPreConfig.coerce_c_locale>`"
msgstr ""

msgid "``\"coerce_c_locale_warn\"``"
msgstr ""

msgid ":c:member:`coerce_c_locale_warn <PyPreConfig.coerce_c_locale_warn>`"
msgstr ""

msgid "``\"configure_c_stdio\"``"
msgstr ""

msgid ":c:member:`configure_c_stdio <PyConfig.configure_c_stdio>`"
msgstr ""

msgid "``\"configure_locale\"``"
msgstr ""

msgid ":c:member:`configure_locale <PyPreConfig.configure_locale>`"
msgstr ""

msgid "``\"cpu_count\"``"
msgstr ""

msgid ":c:member:`cpu_count <PyConfig.cpu_count>`"
msgstr ""

msgid "``\"dev_mode\"``"
msgstr ""

msgid ":c:member:`dev_mode <PyConfig.dev_mode>`"
msgstr ""

msgid "``\"dump_refs\"``"
msgstr ""

msgid ":c:member:`dump_refs <PyConfig.dump_refs>`"
msgstr ""

msgid "``\"dump_refs_file\"``"
msgstr ""

msgid ":c:member:`dump_refs_file <PyConfig.dump_refs_file>`"
msgstr ""

msgid "``\"exec_prefix\"``"
msgstr ""

msgid ":c:member:`exec_prefix <PyConfig.exec_prefix>`"
msgstr ""

msgid "``\"executable\"``"
msgstr ""

msgid ":c:member:`executable <PyConfig.executable>`"
msgstr ""

msgid "``\"faulthandler\"``"
msgstr ""

msgid ":c:member:`faulthandler <PyConfig.faulthandler>`"
msgstr ""

msgid "``\"filesystem_encoding\"``"
msgstr ""

msgid ":c:member:`filesystem_encoding <PyConfig.filesystem_encoding>`"
msgstr ""

msgid "``\"filesystem_errors\"``"
msgstr ""

msgid ":c:member:`filesystem_errors <PyConfig.filesystem_errors>`"
msgstr ""

msgid "``\"hash_seed\"``"
msgstr ""

msgid ":c:member:`hash_seed <PyConfig.hash_seed>`"
msgstr ""

msgid "``\"home\"``"
msgstr ""

msgid ":c:member:`home <PyConfig.home>`"
msgstr ""

msgid "``\"import_time\"``"
msgstr ""

msgid ":c:member:`import_time <PyConfig.import_time>`"
msgstr ""

msgid "``\"inspect\"``"
msgstr ""

msgid ":c:member:`inspect <PyConfig.inspect>`"
msgstr ""

msgid "``\"install_signal_handlers\"``"
msgstr ""

msgid ":c:member:`install_signal_handlers <PyConfig.install_signal_handlers>`"
msgstr ""

msgid "``\"int_max_str_digits\"``"
msgstr ""

msgid ":c:member:`int_max_str_digits <PyConfig.int_max_str_digits>`"
msgstr ""

msgid "``\"interactive\"``"
msgstr ""

msgid ":c:member:`interactive <PyConfig.interactive>`"
msgstr ""

msgid "``\"isolated\"``"
msgstr ""

msgid ":c:member:`isolated <PyConfig.isolated>`"
msgstr ""

msgid "``\"legacy_windows_fs_encoding\"``"
msgstr ""

msgid ""
":c:member:`legacy_windows_fs_encoding <PyPreConfig."
"legacy_windows_fs_encoding>`"
msgstr ""

msgid "``\"legacy_windows_stdio\"``"
msgstr ""

msgid ":c:member:`legacy_windows_stdio <PyConfig.legacy_windows_stdio>`"
msgstr ""

msgid "``\"malloc_stats\"``"
msgstr ""

msgid ":c:member:`malloc_stats <PyConfig.malloc_stats>`"
msgstr ""

msgid "``\"module_search_paths\"``"
msgstr ""

msgid ":c:member:`module_search_paths <PyConfig.module_search_paths>`"
msgstr ""

msgid "``\"optimization_level\"``"
msgstr ""

msgid ":c:member:`optimization_level <PyConfig.optimization_level>`"
msgstr ":c:member:`optimization_level <PyConfig.optimization_level>`"

msgid "``\"orig_argv\"``"
msgstr ""

msgid ":c:member:`orig_argv <PyConfig.orig_argv>`"
msgstr ""

msgid "``\"parse_argv\"``"
msgstr ""

msgid ":c:member:`parse_argv <PyConfig.parse_argv>`"
msgstr ""

msgid "``\"parser_debug\"``"
msgstr ""

msgid ":c:member:`parser_debug <PyConfig.parser_debug>`"
msgstr ""

msgid "``\"pathconfig_warnings\"``"
msgstr ""

msgid ":c:member:`pathconfig_warnings <PyConfig.pathconfig_warnings>`"
msgstr ""

msgid "``\"perf_profiling\"``"
msgstr ""

msgid ":c:member:`perf_profiling <PyConfig.perf_profiling>`"
msgstr ""

msgid "``\"platlibdir\"``"
msgstr ""

msgid ":c:member:`platlibdir <PyConfig.platlibdir>`"
msgstr ""

msgid "``\"prefix\"``"
msgstr ""

msgid ":c:member:`prefix <PyConfig.prefix>`"
msgstr ""

msgid "``\"program_name\"``"
msgstr ""

msgid ":c:member:`program_name <PyConfig.program_name>`"
msgstr ""

msgid "``\"pycache_prefix\"``"
msgstr ""

msgid ":c:member:`pycache_prefix <PyConfig.pycache_prefix>`"
msgstr ""

msgid "``\"quiet\"``"
msgstr ""

msgid ":c:member:`quiet <PyConfig.quiet>`"
msgstr ""

msgid "``\"run_command\"``"
msgstr ""

msgid ":c:member:`run_command <PyConfig.run_command>`"
msgstr ""

msgid "``\"run_filename\"``"
msgstr ""

msgid ":c:member:`run_filename <PyConfig.run_filename>`"
msgstr ""

msgid "``\"run_module\"``"
msgstr ""

msgid ":c:member:`run_module <PyConfig.run_module>`"
msgstr ""

msgid "``\"run_presite\"``"
msgstr ""

msgid ":c:member:`run_presite <PyConfig.run_presite>`"
msgstr ""

msgid "``\"safe_path\"``"
msgstr ""

msgid ":c:member:`safe_path <PyConfig.safe_path>`"
msgstr ""

msgid "``\"show_ref_count\"``"
msgstr ""

msgid ":c:member:`show_ref_count <PyConfig.show_ref_count>`"
msgstr ""

msgid "``\"site_import\"``"
msgstr ""

msgid ":c:member:`site_import <PyConfig.site_import>`"
msgstr ""

msgid "``\"skip_source_first_line\"``"
msgstr ""

msgid ":c:member:`skip_source_first_line <PyConfig.skip_source_first_line>`"
msgstr ""

msgid "``\"stdio_encoding\"``"
msgstr ""

msgid ":c:member:`stdio_encoding <PyConfig.stdio_encoding>`"
msgstr ""

msgid "``\"stdio_errors\"``"
msgstr ""

msgid ":c:member:`stdio_errors <PyConfig.stdio_errors>`"
msgstr ""

msgid "``\"stdlib_dir\"``"
msgstr ""

msgid ":c:member:`stdlib_dir <PyConfig.stdlib_dir>`"
msgstr ""

msgid "``\"tracemalloc\"``"
msgstr ""

msgid ":c:member:`tracemalloc <PyConfig.tracemalloc>`"
msgstr ""

msgid "``\"use_environment\"``"
msgstr ""

msgid ":c:member:`use_environment <PyConfig.use_environment>`"
msgstr ":c:member:`use_environment <PyConfig.use_environment>`"

msgid "``\"use_frozen_modules\"``"
msgstr ""

msgid ":c:member:`use_frozen_modules <PyConfig.use_frozen_modules>`"
msgstr ""

msgid "``\"use_hash_seed\"``"
msgstr ""

msgid ":c:member:`use_hash_seed <PyConfig.use_hash_seed>`"
msgstr ""

msgid "``\"use_system_logger\"``"
msgstr ""

msgid ":c:member:`use_system_logger <PyConfig.use_system_logger>`"
msgstr ""

msgid "``\"user_site_directory\"``"
msgstr ""

msgid ":c:member:`user_site_directory <PyConfig.user_site_directory>`"
msgstr ""

msgid "``\"utf8_mode\"``"
msgstr ""

msgid ":c:member:`utf8_mode <PyPreConfig.utf8_mode>`"
msgstr ""

msgid "``\"verbose\"``"
msgstr ""

msgid ":c:member:`verbose <PyConfig.verbose>`"
msgstr ""

msgid "``\"warn_default_encoding\"``"
msgstr ""

msgid ":c:member:`warn_default_encoding <PyConfig.warn_default_encoding>`"
msgstr ""

msgid "``\"warnoptions\"``"
msgstr ""

msgid ":c:member:`warnoptions <PyConfig.warnoptions>`"
msgstr ""

msgid "``\"write_bytecode\"``"
msgstr ""

msgid ":c:member:`write_bytecode <PyConfig.write_bytecode>`"
msgstr ""

msgid "``\"xoptions\"``"
msgstr ""

msgid ":c:member:`xoptions <PyConfig.xoptions>`"
msgstr ""

msgid "``dict[str, str]``"
msgstr ""

msgid "``\"_pystats\"``"
msgstr ""

msgid ":c:member:`_pystats <PyConfig._pystats>`"
msgstr ""

msgid "Visibility:"
msgstr ""

msgid ""
"Public: Can by get by :c:func:`PyConfig_Get` and set by :c:func:"
"`PyConfig_Set`."
msgstr ""

msgid ""
"Read-only: Can by get by :c:func:`PyConfig_Get`, but cannot be set by :c:"
"func:`PyConfig_Set`."
msgstr ""

msgid "Runtime Python configuration API"
msgstr ""

msgid ""
"At runtime, it's possible to get and set configuration options using :c:func:"
"`PyConfig_Get` and  :c:func:`PyConfig_Set` functions."
msgstr ""

msgid ""
"Some options are read from the :mod:`sys` attributes. For example, the "
"option ``\"argv\"`` is read from :data:`sys.argv`."
msgstr ""

msgid ""
"Get the current runtime value of a configuration option as a Python object."
msgstr ""

msgid "Return a new reference on success."
msgstr ""

msgid "Set an exception and return ``NULL`` on error."
msgstr ""

msgid "The object type depends on the configuration option. It can be:"
msgstr ""

msgid ""
"The caller must have an :term:`attached thread state`. The function cannot "
"be called before Python initialization nor after Python finalization."
msgstr ""

msgid "Similar to :c:func:`PyConfig_Get`, but get the value as a C int."
msgstr ""

msgid "Set an exception and return ``-1`` on error."
msgstr ""

msgid "Get all configuration option names as a ``frozenset``."
msgstr ""

msgid "Set the current runtime value of a configuration option."
msgstr ""

msgid "Raise a :exc:`ValueError` if there is no option *name*."
msgstr ""

msgid "Raise a :exc:`ValueError` if *value* is an invalid value."
msgstr ""

msgid "Raise a :exc:`ValueError` if the option is read-only (cannot be set)."
msgstr ""

msgid "Raise a :exc:`TypeError` if *value* has not the proper type."
msgstr ""

msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython.PyConfig_Set`` with "
"arguments ``name``, ``value``."
msgstr ""

msgid "PyConfig C API"
msgstr ""

msgid ""
"Python can be initialized with :c:func:`Py_InitializeFromConfig` and the :c:"
"type:`PyConfig` structure. It can be preinitialized with :c:func:"
"`Py_PreInitialize` and the :c:type:`PyPreConfig` structure."
msgstr ""

msgid "There are two kinds of configuration:"
msgstr ""

msgid ""
"The :ref:`Python Configuration <init-python-config>` can be used to build a "
"customized Python which behaves as the regular Python. For example, "
"environment variables and command line arguments are used to configure "
"Python."
msgstr ""

msgid ""
"The :ref:`Isolated Configuration <init-isolated-conf>` can be used to embed "
"Python into an application. It isolates Python from the system. For example, "
"environment variables are ignored, the LC_CTYPE locale is left unchanged and "
"no signal handler is registered."
msgstr ""

msgid ":pep:`587` \"Python Initialization Configuration\"."
msgstr ""

msgid "Example of customized Python always running in isolated mode::"
msgstr ""

msgid ""
"int main(int argc, char **argv)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"    config.isolated = 1;\n"
"\n"
"    /* Decode command line arguments.\n"
"       Implicitly preinitialize Python (in isolated mode). */\n"
"    status = PyConfig_SetBytesArgv(&config, argc, argv);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"    PyConfig_Clear(&config);\n"
"\n"
"    return Py_RunMain();\n"
"\n"
"exception:\n"
"    PyConfig_Clear(&config);\n"
"    if (PyStatus_IsExit(status)) {\n"
"        return status.exitcode;\n"
"    }\n"
"    /* Display the error message and exit the process with\n"
"       non-zero exit code */\n"
"    Py_ExitStatusException(status);\n"
"}"
msgstr ""

msgid "PyWideStringList"
msgstr ""

msgid "List of ``wchar_t*`` strings."
msgstr ""

msgid ""
"If *length* is non-zero, *items* must be non-``NULL`` and all strings must "
"be non-``NULL``."
msgstr ""

msgid "Methods:"
msgstr ""

msgid "Append *item* to *list*."
msgstr ""

msgid "Python must be preinitialized to call this function."
msgstr ""

msgid "Insert *item* into *list* at *index*."
msgstr ""

msgid ""
"If *index* is greater than or equal to *list* length, append *item* to "
"*list*."
msgstr ""

msgid "*index* must be greater than or equal to ``0``."
msgstr ""

msgid "Structure fields:"
msgstr ""

msgid "List length."
msgstr ""

msgid "List items."
msgstr ""

msgid "PyStatus"
msgstr ""

msgid ""
"Structure to store an initialization function status: success, error or exit."
msgstr ""

msgid "For an error, it can store the C function name which created the error."
msgstr ""

msgid "Exit code. Argument passed to ``exit()``."
msgstr ""

msgid "Error message."
msgstr ""

msgid "Name of the function which created an error, can be ``NULL``."
msgstr ""

msgid "Functions to create a status:"
msgstr ""

msgid "Success."
msgstr ""

msgid "Initialization error with a message."
msgstr ""

msgid "*err_msg* must not be ``NULL``."
msgstr ""

msgid "Memory allocation failure (out of memory)."
msgstr ""

msgid "Exit Python with the specified exit code."
msgstr ""

msgid "Functions to handle a status:"
msgstr ""

msgid ""
"Is the status an error or an exit? If true, the exception must be handled; "
"by calling :c:func:`Py_ExitStatusException` for example."
msgstr ""

msgid "Is the result an error?"
msgstr ""

msgid "Is the result an exit?"
msgstr ""

msgid ""
"Call ``exit(exitcode)`` if *status* is an exit. Print the error message and "
"exit with a non-zero exit code if *status* is an error.  Must only be called "
"if ``PyStatus_Exception(status)`` is non-zero."
msgstr ""

msgid ""
"Internally, Python uses macros which set ``PyStatus.func``, whereas "
"functions to create a status set ``func`` to ``NULL``."
msgstr ""

msgid "Example::"
msgstr ""

msgid ""
"PyStatus alloc(void **ptr, size_t size)\n"
"{\n"
"    *ptr = PyMem_RawMalloc(size);\n"
"    if (*ptr == NULL) {\n"
"        return PyStatus_NoMemory();\n"
"    }\n"
"    return PyStatus_Ok();\n"
"}\n"
"\n"
"int main(int argc, char **argv)\n"
"{\n"
"    void *ptr;\n"
"    PyStatus status = alloc(&ptr, 16);\n"
"    if (PyStatus_Exception(status)) {\n"
"        Py_ExitStatusException(status);\n"
"    }\n"
"    PyMem_Free(ptr);\n"
"    return 0;\n"
"}"
msgstr ""

msgid "PyPreConfig"
msgstr ""

msgid "Structure used to preinitialize Python."
msgstr ""

msgid "Function to initialize a preconfiguration:"
msgstr ""

msgid ""
"Initialize the preconfiguration with :ref:`Python Configuration <init-python-"
"config>`."
msgstr ""

msgid ""
"Initialize the preconfiguration with :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ""

msgid "Name of the Python memory allocators:"
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_NOT_SET`` (``0``): don't change memory allocators (use "
"defaults)."
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_DEFAULT`` (``1``): :ref:`default memory allocators "
"<default-memory-allocators>`."
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_DEBUG`` (``2``): :ref:`default memory allocators <default-"
"memory-allocators>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""

msgid "``PYMEM_ALLOCATOR_MALLOC`` (``3``): use ``malloc()`` of the C library."
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_MALLOC_DEBUG`` (``4``): force usage of ``malloc()`` with :"
"ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` (``5``): :ref:`Python pymalloc memory allocator "
"<pymalloc>`."
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` (``6``): :ref:`Python pymalloc memory "
"allocator <pymalloc>` with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_MIMALLOC`` (``6``): use ``mimalloc``, a fast malloc "
"replacement."
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_MIMALLOC_DEBUG`` (``7``): use ``mimalloc``, a fast malloc "
"replacement with :ref:`debug hooks <pymem-debug-hooks>`."
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_PYMALLOC`` and ``PYMEM_ALLOCATOR_PYMALLOC_DEBUG`` are not "
"supported if Python is :option:`configured using --without-pymalloc <--"
"without-pymalloc>`."
msgstr ""

msgid ""
"``PYMEM_ALLOCATOR_MIMALLOC`` and ``PYMEM_ALLOCATOR_MIMALLOC_DEBUG`` are not "
"supported if Python is :option:`configured using --without-mimalloc <--"
"without-mimalloc>` or if the underlying atomic support isn't available."
msgstr ""

msgid "See :ref:`Memory Management <memory>`."
msgstr ""

msgid "Default: ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""

msgid "Set the LC_CTYPE locale to the user preferred locale."
msgstr ""

msgid ""
"If equals to ``0``, set :c:member:`~PyPreConfig.coerce_c_locale` and :c:"
"member:`~PyPreConfig.coerce_c_locale_warn` members to ``0``."
msgstr ""

msgid "See the :term:`locale encoding`."
msgstr ""

msgid "Default: ``1`` in Python config, ``0`` in isolated config."
msgstr ""

msgid "If equals to ``2``, coerce the C locale."
msgstr ""

msgid ""
"If equals to ``1``, read the LC_CTYPE locale to decide if it should be "
"coerced."
msgstr ""

msgid "Default: ``-1`` in Python config, ``0`` in isolated config."
msgstr ""

msgid "If non-zero, emit a warning if the C locale is coerced."
msgstr ""

msgid ""
":ref:`Python Development Mode <devmode>`: see :c:member:`PyConfig.dev_mode`."
msgstr ""

msgid "Default: ``-1`` in Python mode, ``0`` in isolated mode."
msgstr ""

msgid "Isolated mode: see :c:member:`PyConfig.isolated`."
msgstr ""

msgid "Default: ``0`` in Python mode, ``1`` in isolated mode."
msgstr ""

msgid "If non-zero:"
msgstr ""

msgid "Set :c:member:`PyPreConfig.utf8_mode` to ``0``,"
msgstr ""

msgid "Set :c:member:`PyConfig.filesystem_encoding` to ``\"mbcs\"``,"
msgstr ""

msgid "Set :c:member:`PyConfig.filesystem_errors` to ``\"replace\"``."
msgstr ""

msgid ""
"Initialized from the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment "
"variable value."
msgstr ""

msgid ""
"Only available on Windows. ``#ifdef MS_WINDOWS`` macro can be used for "
"Windows specific code."
msgstr ""

msgid "Default: ``0``."
msgstr ""

msgid ""
"If non-zero, :c:func:`Py_PreInitializeFromArgs` and :c:func:"
"`Py_PreInitializeFromBytesArgs` parse their ``argv`` argument the same way "
"the regular Python parses command line arguments: see :ref:`Command Line "
"Arguments <using-on-cmdline>`."
msgstr ""

msgid ""
"Use :ref:`environment variables <using-on-envvars>`? See :c:member:`PyConfig."
"use_environment`."
msgstr ""

msgid "Default: ``1`` in Python config and ``0`` in isolated config."
msgstr ""

msgid "If non-zero, enable the :ref:`Python UTF-8 Mode <utf8-mode>`."
msgstr ""

msgid ""
"Set to ``0`` or ``1`` by the :option:`-X utf8 <-X>` command line option and "
"the :envvar:`PYTHONUTF8` environment variable."
msgstr ""

msgid "Also set to ``1`` if the ``LC_CTYPE`` locale is ``C`` or ``POSIX``."
msgstr ""

msgid "Default: ``-1`` in Python config and ``0`` in isolated config."
msgstr ""

msgid "Preinitialize Python with PyPreConfig"
msgstr ""

msgid "The preinitialization of Python:"
msgstr ""

msgid "Set the Python memory allocators (:c:member:`PyPreConfig.allocator`)"
msgstr ""

msgid "Configure the LC_CTYPE locale (:term:`locale encoding`)"
msgstr ""

msgid ""
"Set the :ref:`Python UTF-8 Mode <utf8-mode>` (:c:member:`PyPreConfig."
"utf8_mode`)"
msgstr ""

msgid ""
"The current preconfiguration (``PyPreConfig`` type) is stored in "
"``_PyRuntime.preconfig``."
msgstr ""

msgid "Functions to preinitialize Python:"
msgstr ""

msgid "Preinitialize Python from *preconfig* preconfiguration."
msgstr ""

msgid "*preconfig* must not be ``NULL``."
msgstr ""

msgid ""
"Parse *argv* command line arguments (bytes strings) if :c:member:"
"`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""

msgid ""
"Parse *argv* command line arguments (wide strings) if :c:member:"
"`~PyPreConfig.parse_argv` of *preconfig* is non-zero."
msgstr ""

msgid ""
"The caller is responsible to handle exceptions (error or exit) using :c:func:"
"`PyStatus_Exception` and :c:func:`Py_ExitStatusException`."
msgstr ""

msgid ""
"For :ref:`Python Configuration <init-python-config>` (:c:func:"
"`PyPreConfig_InitPythonConfig`), if Python is initialized with command line "
"arguments, the command line arguments must also be passed to preinitialize "
"Python, since they have an effect on the pre-configuration like encodings. "
"For example, the :option:`-X utf8 <-X>` command line option enables the :ref:"
"`Python UTF-8 Mode <utf8-mode>`."
msgstr ""

msgid ""
"``PyMem_SetAllocator()`` can be called after :c:func:`Py_PreInitialize` and "
"before :c:func:`Py_InitializeFromConfig` to install a custom memory "
"allocator. It can be called before :c:func:`Py_PreInitialize` if :c:member:"
"`PyPreConfig.allocator` is set to ``PYMEM_ALLOCATOR_NOT_SET``."
msgstr ""

msgid ""
"Python memory allocation functions like :c:func:`PyMem_RawMalloc` must not "
"be used before the Python preinitialization, whereas calling directly "
"``malloc()`` and ``free()`` is always safe. :c:func:`Py_DecodeLocale` must "
"not be called before the Python preinitialization."
msgstr ""

msgid ""
"Example using the preinitialization to enable the :ref:`Python UTF-8 Mode "
"<utf8-mode>`::"
msgstr ""

msgid ""
"PyStatus status;\n"
"PyPreConfig preconfig;\n"
"PyPreConfig_InitPythonConfig(&preconfig);\n"
"\n"
"preconfig.utf8_mode = 1;\n"
"\n"
"status = Py_PreInitialize(&preconfig);\n"
"if (PyStatus_Exception(status)) {\n"
"    Py_ExitStatusException(status);\n"
"}\n"
"\n"
"/* at this point, Python speaks UTF-8 */\n"
"\n"
"Py_Initialize();\n"
"/* ... use Python API here ... */\n"
"Py_Finalize();"
msgstr ""

msgid "PyConfig"
msgstr ""

msgid "Structure containing most parameters to configure Python."
msgstr ""

msgid ""
"When done, the :c:func:`PyConfig_Clear` function must be used to release the "
"configuration memory."
msgstr ""

msgid "Structure methods:"
msgstr ""

msgid ""
"Initialize configuration with the :ref:`Python Configuration <init-python-"
"config>`."
msgstr ""

msgid ""
"Initialize configuration with the :ref:`Isolated Configuration <init-"
"isolated-conf>`."
msgstr ""

msgid "Copy the wide character string *str* into ``*config_str``."
msgstr ""

msgid ":ref:`Preinitialize Python <c-preinit>` if needed."
msgstr ""

msgid ""
"Decode *str* using :c:func:`Py_DecodeLocale` and set the result into "
"``*config_str``."
msgstr ""

msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of wide character strings."
msgstr ""

msgid ""
"Set command line arguments (:c:member:`~PyConfig.argv` member of *config*) "
"from the *argv* list of bytes strings. Decode bytes using :c:func:"
"`Py_DecodeLocale`."
msgstr ""

msgid "Set the list of wide strings *list* to *length* and *items*."
msgstr ""

msgid "Read all Python configuration."
msgstr ""

msgid "Fields which are already initialized are left unchanged."
msgstr ""

msgid ""
"Fields for :ref:`path configuration <init-path-config>` are no longer "
"calculated or modified when calling this function, as of Python 3.11."
msgstr ""

msgid ""
"The :c:func:`PyConfig_Read` function only parses :c:member:`PyConfig.argv` "
"arguments once: :c:member:`PyConfig.parse_argv` is set to ``2`` after "
"arguments are parsed. Since Python arguments are stripped from :c:member:"
"`PyConfig.argv`, parsing arguments twice would parse the application options "
"as Python options."
msgstr ""

msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed once, :c:member:"
"`PyConfig.parse_argv` is set to ``2`` after arguments are parsed, and "
"arguments are only parsed if :c:member:`PyConfig.parse_argv` equals ``1``."
msgstr ""

msgid ""
":c:func:`PyConfig_Read` no longer calculates all paths, and so fields listed "
"under :ref:`Python Path Configuration <init-path-config>` may no longer be "
"updated until :c:func:`Py_InitializeFromConfig` is called."
msgstr ""

msgid "Release configuration memory."
msgstr ""

msgid ""
"Most ``PyConfig`` methods :ref:`preinitialize Python <c-preinit>` if needed. "
"In that case, the Python preinitialization configuration (:c:type:"
"`PyPreConfig`) in based on the :c:type:`PyConfig`. If configuration fields "
"which are in common with :c:type:`PyPreConfig` are tuned, they must be set "
"before calling a :c:type:`PyConfig` method:"
msgstr ""

msgid ":c:member:`PyConfig.dev_mode`"
msgstr ""

msgid ":c:member:`PyConfig.isolated`"
msgstr ""

msgid ":c:member:`PyConfig.parse_argv`"
msgstr ""

msgid ":c:member:`PyConfig.use_environment`"
msgstr ":c:member:`PyConfig.use_environment`"

msgid ""
"Moreover, if :c:func:`PyConfig_SetArgv` or :c:func:`PyConfig_SetBytesArgv` "
"is used, this method must be called before other methods, since the "
"preinitialization configuration depends on command line arguments (if :c:"
"member:`~PyConfig.parse_argv` is non-zero)."
msgstr ""

msgid ""
"The caller of these methods is responsible to handle exceptions (error or "
"exit) using ``PyStatus_Exception()`` and ``Py_ExitStatusException()``."
msgstr ""

msgid ""
"Set :data:`sys.argv` command line arguments based on :c:member:`~PyConfig."
"argv`.  These parameters are similar to those passed to the program's :c:"
"func:`main` function with the difference that the first entry should refer "
"to the script file to be executed rather than the executable hosting the "
"Python interpreter.  If there isn't a script that will be run, the first "
"entry in :c:member:`~PyConfig.argv` can be an empty string."
msgstr ""

msgid ""
"Set :c:member:`~PyConfig.parse_argv` to ``1`` to parse :c:member:`~PyConfig."
"argv` the same way the regular Python parses Python command line arguments "
"and then to strip Python arguments from :c:member:`~PyConfig.argv`."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.argv` is empty, an empty string is added to ensure "
"that :data:`sys.argv` always exists and is never empty."
msgstr ""

msgid "Default: ``NULL``."
msgstr ""

msgid "See also the :c:member:`~PyConfig.orig_argv` member."
msgstr ""

msgid ""
"If equals to zero, ``Py_RunMain()`` prepends a potentially unsafe path to :"
"data:`sys.path` at startup:"
msgstr ""

msgid ""
"If :c:member:`argv[0] <PyConfig.argv>` is equal to ``L\"-m\"`` (``python -m "
"module``), prepend the current working directory."
msgstr ""

msgid ""
"If running a script (``python script.py``), prepend the script's directory.  "
"If it's a symbolic link, resolve symbolic links."
msgstr ""

msgid ""
"Otherwise (``python -c code`` and ``python``), prepend an empty string, "
"which means the current working directory."
msgstr ""

msgid ""
"Set to ``1`` by the :option:`-P` command line option and the :envvar:"
"`PYTHONSAFEPATH` environment variable."
msgstr ""

msgid "Default: ``0`` in Python config, ``1`` in isolated config."
msgstr ""

msgid ":data:`sys.base_exec_prefix`."
msgstr ""

msgid "Part of the :ref:`Python Path Configuration <init-path-config>` output."
msgstr ""

msgid "See also :c:member:`PyConfig.exec_prefix`."
msgstr ""

msgid "Python base executable: :data:`sys._base_executable`."
msgstr ""

msgid "Set by the :envvar:`__PYVENV_LAUNCHER__` environment variable."
msgstr ""

msgid "Set from :c:member:`PyConfig.executable` if ``NULL``."
msgstr ""

msgid "See also :c:member:`PyConfig.executable`."
msgstr ""

msgid ":data:`sys.base_prefix`."
msgstr ""

msgid "See also :c:member:`PyConfig.prefix`."
msgstr ""

msgid ""
"If equals to ``0`` and :c:member:`~PyConfig.configure_c_stdio` is non-zero, "
"disable buffering on the C streams stdout and stderr."
msgstr ""

msgid ""
"Set to ``0`` by the :option:`-u` command line option and the :envvar:"
"`PYTHONUNBUFFERED` environment variable."
msgstr ""

msgid "stdin is always opened in buffered mode."
msgstr ""

msgid "Default: ``1``."
msgstr ""

msgid ""
"If equals to ``1``, issue a warning when comparing :class:`bytes` or :class:"
"`bytearray` with :class:`str`, or comparing :class:`bytes` with :class:`int`."
msgstr ""

msgid ""
"If equal or greater to ``2``, raise a :exc:`BytesWarning` exception in these "
"cases."
msgstr ""

msgid "Incremented by the :option:`-b` command line option."
msgstr ""

msgid ""
"If non-zero, emit a :exc:`EncodingWarning` warning when :class:`io."
"TextIOWrapper` uses its default encoding. See :ref:`io-encoding-warning` for "
"details."
msgstr ""

msgid ""
"If equals to ``0``, disables the inclusion of the end line and column "
"mappings in code objects. Also disables traceback printing carets to "
"specific error locations."
msgstr ""

msgid ""
"Set to ``0`` by the :envvar:`PYTHONNODEBUGRANGES` environment variable and "
"by the :option:`-X no_debug_ranges <-X>` command line option."
msgstr ""

msgid ""
"Control the validation behavior of hash-based ``.pyc`` files: value of the :"
"option:`--check-hash-based-pycs` command line option."
msgstr ""

msgid "Valid values:"
msgstr ""

msgid ""
"``L\"always\"``: Hash the source file for invalidation regardless of value "
"of the 'check_source' flag."
msgstr ""

msgid "``L\"never\"``: Assume that hash-based pycs always are valid."
msgstr ""

msgid ""
"``L\"default\"``: The 'check_source' flag in hash-based pycs determines "
"invalidation."
msgstr ""

msgid "Default: ``L\"default\"``."
msgstr ""

msgid "See also :pep:`552` \"Deterministic pycs\"."
msgstr ""

msgid "If non-zero, configure C standard streams:"
msgstr ""

msgid ""
"On Windows, set the binary mode (``O_BINARY``) on stdin, stdout and stderr."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.buffered_stdio` equals zero, disable buffering of "
"stdin, stdout and stderr streams."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.interactive` is non-zero, enable stream buffering on "
"stdin and stdout (only stdout on Windows)."
msgstr ""

msgid "If non-zero, enable the :ref:`Python Development Mode <devmode>`."
msgstr ""

msgid ""
"Set to ``1`` by the :option:`-X dev <-X>` option and the :envvar:"
"`PYTHONDEVMODE` environment variable."
msgstr ""

msgid "Dump Python references?"
msgstr ""

msgid "If non-zero, dump all objects which are still alive at exit."
msgstr ""

msgid "Set to ``1`` by the :envvar:`PYTHONDUMPREFS` environment variable."
msgstr ""

msgid ""
"Needs a special build of Python with the ``Py_TRACE_REFS`` macro defined: "
"see the :option:`configure --with-trace-refs option <--with-trace-refs>`."
msgstr ""

msgid "Filename where to dump Python references."
msgstr ""

msgid "Set by the :envvar:`PYTHONDUMPREFSFILE` environment variable."
msgstr ""

msgid ""
"The site-specific directory prefix where the platform-dependent Python files "
"are installed: :data:`sys.exec_prefix`."
msgstr ""

msgid "See also :c:member:`PyConfig.base_exec_prefix`."
msgstr ""

msgid ""
"The absolute path of the executable binary for the Python interpreter: :data:"
"`sys.executable`."
msgstr ""

msgid "See also :c:member:`PyConfig.base_executable`."
msgstr ""

msgid "Enable faulthandler?"
msgstr ""

msgid "If non-zero, call :func:`faulthandler.enable` at startup."
msgstr ""

msgid ""
"Set to ``1`` by :option:`-X faulthandler <-X>` and the :envvar:"
"`PYTHONFAULTHANDLER` environment variable."
msgstr ""

msgid ""
":term:`Filesystem encoding <filesystem encoding and error handler>`: :func:"
"`sys.getfilesystemencoding`."
msgstr ""

msgid "On macOS, Android and VxWorks: use ``\"utf-8\"`` by default."
msgstr ""

msgid ""
"On Windows: use ``\"utf-8\"`` by default, or ``\"mbcs\"`` if :c:member:"
"`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig` is non-"
"zero."
msgstr ""

msgid "Default encoding on other platforms:"
msgstr ""

msgid "``\"utf-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr ""

msgid ""
"``\"ascii\"`` if Python detects that ``nl_langinfo(CODESET)`` announces the "
"ASCII encoding, whereas the ``mbstowcs()`` function decodes from a different "
"encoding (usually Latin1)."
msgstr ""

msgid "``\"utf-8\"`` if ``nl_langinfo(CODESET)`` returns an empty string."
msgstr ""

msgid ""
"Otherwise, use the :term:`locale encoding`: ``nl_langinfo(CODESET)`` result."
msgstr ""

msgid ""
"At Python startup, the encoding name is normalized to the Python codec name. "
"For example, ``\"ANSI_X3.4-1968\"`` is replaced with ``\"ascii\"``."
msgstr ""

msgid "See also the :c:member:`~PyConfig.filesystem_errors` member."
msgstr ""

msgid ""
":term:`Filesystem error handler <filesystem encoding and error handler>`: :"
"func:`sys.getfilesystemencodeerrors`."
msgstr ""

msgid ""
"On Windows: use ``\"surrogatepass\"`` by default, or ``\"replace\"``  if :c:"
"member:`~PyPreConfig.legacy_windows_fs_encoding` of :c:type:`PyPreConfig` is "
"non-zero."
msgstr ""

msgid "On other platforms: use ``\"surrogateescape\"`` by default."
msgstr ""

msgid "Supported error handlers:"
msgstr ""

msgid "``\"strict\"``"
msgstr ""

msgid "``\"surrogateescape\"``"
msgstr ""

msgid "``\"surrogatepass\"`` (only supported with the UTF-8 encoding)"
msgstr ""

msgid "See also the :c:member:`~PyConfig.filesystem_encoding` member."
msgstr ""

msgid "If non-zero, use frozen modules."
msgstr ""

msgid "Set by the :envvar:`PYTHON_FROZEN_MODULES` environment variable."
msgstr ""

msgid ""
"Default: ``1`` in a release build, or ``0`` in a :ref:`debug build <debug-"
"build>`."
msgstr ""

msgid "Randomized hash function seed."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.use_hash_seed` is zero, a seed is chosen randomly at "
"Python startup, and :c:member:`~PyConfig.hash_seed` is ignored."
msgstr ""

msgid "Set by the :envvar:`PYTHONHASHSEED` environment variable."
msgstr ""

msgid ""
"Default *use_hash_seed* value: ``-1`` in Python mode, ``0`` in isolated mode."
msgstr ""

msgid ""
"Set the default Python \"home\" directory, that is, the location of the "
"standard Python libraries (see :envvar:`PYTHONHOME`)."
msgstr ""

msgid "Set by the :envvar:`PYTHONHOME` environment variable."
msgstr ""

msgid "Part of the :ref:`Python Path Configuration <init-path-config>` input."
msgstr ""

msgid ""
"If ``1``, profile import time. If ``2``, include additional output that "
"indicates when an imported module has already been loaded."
msgstr ""

msgid ""
"Set by the :option:`-X importtime <-X>` option and the :envvar:"
"`PYTHONPROFILEIMPORTTIME` environment variable."
msgstr ""

msgid "Added support for ``import_time = 2``"
msgstr ""

msgid "Enter interactive mode after executing a script or a command."
msgstr ""

msgid ""
"If greater than ``0``, enable inspect: when a script is passed as first "
"argument or the -c option is used, enter interactive mode after executing "
"the script or the command, even when :data:`sys.stdin` does not appear to be "
"a terminal."
msgstr ""

msgid ""
"Incremented by the :option:`-i` command line option. Set to ``1`` if the :"
"envvar:`PYTHONINSPECT` environment variable is non-empty."
msgstr ""

msgid "Install Python signal handlers?"
msgstr ""

msgid "Default: ``1`` in Python mode, ``0`` in isolated mode."
msgstr ""

msgid "If greater than ``0``, enable the interactive mode (REPL)."
msgstr ""

msgid "Incremented by the :option:`-i` command line option."
msgstr ""

msgid ""
"Configures the :ref:`integer string conversion length limitation "
"<int_max_str_digits>`.  An initial value of ``-1`` means the value will be "
"taken from the command line or environment or otherwise default to 4300 (:"
"data:`sys.int_info.default_max_str_digits`).  A value of ``0`` disables the "
"limitation.  Values greater than zero but less than 640 (:data:`sys.int_info."
"str_digits_check_threshold`) are unsupported and will produce an error."
msgstr ""

msgid ""
"Configured by the :option:`-X int_max_str_digits <-X>` command line flag or "
"the :envvar:`PYTHONINTMAXSTRDIGITS` environment variable."
msgstr ""

msgid ""
"Default: ``-1`` in Python mode.  4300 (:data:`sys.int_info."
"default_max_str_digits`) in isolated mode."
msgstr ""

msgid ""
"If the value of :c:member:`~PyConfig.cpu_count` is not ``-1`` then it will "
"override the return values of :func:`os.cpu_count`, :func:`os."
"process_cpu_count`, and :func:`multiprocessing.cpu_count`."
msgstr ""

msgid ""
"Configured by the :samp:`-X cpu_count={n|default}` command line flag or the :"
"envvar:`PYTHON_CPU_COUNT` environment variable."
msgstr ""

msgid "Default: ``-1``."
msgstr ""

msgid "If greater than ``0``, enable isolated mode:"
msgstr ""

msgid ""
"Set :c:member:`~PyConfig.safe_path` to ``1``: don't prepend a potentially "
"unsafe path to :data:`sys.path` at Python startup, such as the current "
"directory, the script's directory or an empty string."
msgstr ""

msgid ""
"Set :c:member:`~PyConfig.use_environment` to ``0``: ignore ``PYTHON`` "
"environment variables."
msgstr ""

msgid ""
"Set :c:member:`~PyConfig.user_site_directory` to ``0``: don't add the user "
"site directory to :data:`sys.path`."
msgstr ""

msgid ""
"Python REPL doesn't import :mod:`readline` nor enable default readline "
"configuration on interactive prompts."
msgstr ""

msgid "Set to ``1`` by the :option:`-I` command line option."
msgstr ""

msgid ""
"See also the :ref:`Isolated Configuration <init-isolated-conf>` and :c:"
"member:`PyPreConfig.isolated`."
msgstr ""

msgid ""
"If non-zero, use :class:`io.FileIO` instead of :class:`!io."
"_WindowsConsoleIO` for :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys."
"stderr`."
msgstr ""

msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSSTDIO` environment variable "
"is set to a non-empty string."
msgstr ""

msgid "See also the :pep:`528` (Change Windows console encoding to UTF-8)."
msgstr ""

msgid ""
"If non-zero, dump statistics on :ref:`Python pymalloc memory allocator "
"<pymalloc>` at exit."
msgstr ""

msgid "Set to ``1`` by the :envvar:`PYTHONMALLOCSTATS` environment variable."
msgstr ""

msgid ""
"The option is ignored if Python is :option:`configured using the --without-"
"pymalloc option <--without-pymalloc>`."
msgstr ""

msgid "Platform library directory name: :data:`sys.platlibdir`."
msgstr ""

msgid "Set by the :envvar:`PYTHONPLATLIBDIR` environment variable."
msgstr ""

msgid ""
"Default: value of the ``PLATLIBDIR`` macro which is set by the :option:"
"`configure --with-platlibdir option <--with-platlibdir>` (default: "
"``\"lib\"``, or ``\"DLLs\"`` on Windows)."
msgstr ""

msgid ""
"This macro is now used on Windows to locate the standard library extension "
"modules, typically under ``DLLs``. However, for compatibility, note that "
"this value is ignored for any non-standard layouts, including in-tree builds "
"and virtual environments."
msgstr ""

msgid ""
"Module search paths (:data:`sys.path`) as a string separated by ``DELIM`` (:"
"data:`os.pathsep`)."
msgstr ""

msgid "Set by the :envvar:`PYTHONPATH` environment variable."
msgstr ""

msgid "Module search paths: :data:`sys.path`."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.module_search_paths_set` is equal to ``0``, :c:func:"
"`Py_InitializeFromConfig` will replace :c:member:`~PyConfig."
"module_search_paths` and sets :c:member:`~PyConfig.module_search_paths_set` "
"to ``1``."
msgstr ""

msgid ""
"Default: empty list (``module_search_paths``) and ``0`` "
"(``module_search_paths_set``)."
msgstr ""

msgid "Compilation optimization level:"
msgstr ""

msgid "``0``: Peephole optimizer, set ``__debug__`` to ``True``."
msgstr ""

msgid "``1``: Level 0, remove assertions, set ``__debug__`` to ``False``."
msgstr ""

msgid "``2``: Level 1, strip docstrings."
msgstr ""

msgid ""
"Incremented by the :option:`-O` command line option. Set to the :envvar:"
"`PYTHONOPTIMIZE` environment variable value."
msgstr ""

msgid ""
"The list of the original command line arguments passed to the Python "
"executable: :data:`sys.orig_argv`."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.orig_argv` list is empty and :c:member:`~PyConfig."
"argv` is not a list only containing an empty string, :c:func:`PyConfig_Read` "
"copies :c:member:`~PyConfig.argv` into :c:member:`~PyConfig.orig_argv` "
"before modifying :c:member:`~PyConfig.argv` (if :c:member:`~PyConfig."
"parse_argv` is non-zero)."
msgstr ""

msgid ""
"See also the :c:member:`~PyConfig.argv` member and the :c:func:"
"`Py_GetArgcArgv` function."
msgstr ""

msgid "Default: empty list."
msgstr ""

msgid "Parse command line arguments?"
msgstr ""

msgid ""
"If equals to ``1``, parse :c:member:`~PyConfig.argv` the same way the "
"regular Python parses :ref:`command line arguments <using-on-cmdline>`, and "
"strip Python arguments from :c:member:`~PyConfig.argv`."
msgstr ""

msgid ""
"The :c:member:`PyConfig.argv` arguments are now only parsed if :c:member:"
"`PyConfig.parse_argv` equals to ``1``."
msgstr ""

msgid ""
"Parser debug mode. If greater than ``0``, turn on parser debugging output "
"(for expert only, depending on compilation options)."
msgstr ""

msgid ""
"Incremented by the :option:`-d` command line option. Set to the :envvar:"
"`PYTHONDEBUG` environment variable value."
msgstr ""

msgid ""
"Needs a :ref:`debug build of Python <debug-build>` (the ``Py_DEBUG`` macro "
"must be defined)."
msgstr ""

msgid ""
"If non-zero, calculation of path configuration is allowed to log warnings "
"into ``stderr``. If equals to ``0``, suppress these warnings."
msgstr ""

msgid "Now also applies on Windows."
msgstr ""

msgid ""
"The site-specific directory prefix where the platform independent Python "
"files are installed: :data:`sys.prefix`."
msgstr ""

msgid "See also :c:member:`PyConfig.base_prefix`."
msgstr ""

msgid ""
"Program name used to initialize :c:member:`~PyConfig.executable` and in "
"early error messages during Python initialization."
msgstr ""

msgid "On macOS, use :envvar:`PYTHONEXECUTABLE` environment variable if set."
msgstr ""

msgid ""
"If the ``WITH_NEXT_FRAMEWORK`` macro is defined, use :envvar:"
"`__PYVENV_LAUNCHER__` environment variable if set."
msgstr ""

msgid ""
"Use ``argv[0]`` of :c:member:`~PyConfig.argv` if available and non-empty."
msgstr ""

msgid ""
"Otherwise, use ``L\"python\"`` on Windows, or ``L\"python3\"`` on other "
"platforms."
msgstr ""

msgid ""
"Directory where cached ``.pyc`` files are written: :data:`sys."
"pycache_prefix`."
msgstr ""

msgid ""
"Set by the :option:`-X pycache_prefix=PATH <-X>` command line option and "
"the :envvar:`PYTHONPYCACHEPREFIX` environment variable. The command-line "
"option takes precedence."
msgstr ""

msgid "If ``NULL``, :data:`sys.pycache_prefix` is set to ``None``."
msgstr ""

msgid ""
"Quiet mode. If greater than ``0``, don't display the copyright and version "
"at Python startup in interactive mode."
msgstr ""

msgid "Incremented by the :option:`-q` command line option."
msgstr ""

msgid "Value of the :option:`-c` command line option."
msgstr ""

msgid "Used by :c:func:`Py_RunMain`."
msgstr ""

msgid ""
"Filename passed on the command line: trailing command line argument without :"
"option:`-c` or :option:`-m`. It is used by the :c:func:`Py_RunMain` function."
msgstr ""

msgid ""
"For example, it is set to ``script.py`` by the ``python3 script.py arg`` "
"command line."
msgstr ""

msgid "See also the :c:member:`PyConfig.skip_source_first_line` option."
msgstr ""

msgid "Value of the :option:`-m` command line option."
msgstr ""

msgid ""
"``package.module`` path to module that should be imported before ``site.py`` "
"is run."
msgstr ""

msgid ""
"Set by the :option:`-X presite=package.module <-X>` command-line option and "
"the :envvar:`PYTHON_PRESITE` environment variable. The command-line option "
"takes precedence."
msgstr ""

msgid ""
"Show total reference count at exit (excluding :term:`immortal` objects)?"
msgstr ""

msgid "Set to ``1`` by :option:`-X showrefcount <-X>` command line option."
msgstr ""

msgid ""
"Needs a :ref:`debug build of Python <debug-build>` (the ``Py_REF_DEBUG`` "
"macro must be defined)."
msgstr ""

msgid "Import the :mod:`site` module at startup?"
msgstr ""

msgid ""
"If equal to zero, disable the import of the module site and the site-"
"dependent manipulations of :data:`sys.path` that it entails."
msgstr ""

msgid ""
"Also disable these manipulations if the :mod:`site` module is explicitly "
"imported later (call :func:`site.main` if you want them to be triggered)."
msgstr ""

msgid "Set to ``0`` by the :option:`-S` command line option."
msgstr ""

msgid ""
":data:`sys.flags.no_site <sys.flags>` is set to the inverted value of :c:"
"member:`~PyConfig.site_import`."
msgstr ""

msgid ""
"If non-zero, skip the first line of the :c:member:`PyConfig.run_filename` "
"source."
msgstr ""

msgid ""
"It allows the usage of non-Unix forms of ``#!cmd``. This is intended for a "
"DOS specific hack only."
msgstr ""

msgid "Set to ``1`` by the :option:`-x` command line option."
msgstr ""

msgid ""
"Encoding and encoding errors of :data:`sys.stdin`, :data:`sys.stdout` and :"
"data:`sys.stderr` (but :data:`sys.stderr` always uses "
"``\"backslashreplace\"`` error handler)."
msgstr ""

msgid ""
"Use the :envvar:`PYTHONIOENCODING` environment variable if it is non-empty."
msgstr ""

msgid "Default encoding:"
msgstr ""

msgid "``\"UTF-8\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero."
msgstr ""

msgid "Otherwise, use the :term:`locale encoding`."
msgstr ""

msgid "Default error handler:"
msgstr ""

msgid "On Windows: use ``\"surrogateescape\"``."
msgstr ""

msgid ""
"``\"surrogateescape\"`` if :c:member:`PyPreConfig.utf8_mode` is non-zero, or "
"if the LC_CTYPE locale is \"C\" or \"POSIX\"."
msgstr ""

msgid "``\"strict\"`` otherwise."
msgstr ""

msgid "See also :c:member:`PyConfig.legacy_windows_stdio`."
msgstr ""

msgid "Enable tracemalloc?"
msgstr ""

msgid "If non-zero, call :func:`tracemalloc.start` at startup."
msgstr ""

msgid ""
"Set by :option:`-X tracemalloc=N <-X>` command line option and by the :"
"envvar:`PYTHONTRACEMALLOC` environment variable."
msgstr ""

msgid "Enable the Linux ``perf`` profiler support?"
msgstr ""

msgid "If equals to ``1``, enable support for the Linux ``perf`` profiler."
msgstr ""

msgid ""
"If equals to ``2``, enable support for the Linux ``perf`` profiler with "
"DWARF JIT support."
msgstr ""

msgid ""
"Set to ``1`` by :option:`-X perf <-X>` command-line option and the :envvar:"
"`PYTHONPERFSUPPORT` environment variable."
msgstr ""

msgid ""
"Set to ``2`` by the :option:`-X perf_jit <-X>` command-line option and the :"
"envvar:`PYTHON_PERF_JIT_SUPPORT` environment variable."
msgstr ""

msgid "See :ref:`perf_profiling` for more information."
msgstr ""

msgid "Directory of the Python standard library."
msgstr ""

msgid "Use :ref:`environment variables <using-on-envvars>`?"
msgstr ""

msgid ""
"If equals to zero, ignore the :ref:`environment variables <using-on-"
"envvars>`."
msgstr ""

msgid "Set to ``0`` by the :option:`-E` environment variable."
msgstr ""

msgid ""
"If non-zero, ``stdout`` and ``stderr`` will be redirected to the system log."
msgstr ""

msgid "Only available on macOS 10.12 and later, and on iOS."
msgstr ""

msgid ""
"Default: ``0`` (don't use the system log) on macOS; ``1`` on iOS (use the "
"system log)."
msgstr ""

msgid "If non-zero, add the user site directory to :data:`sys.path`."
msgstr ""

msgid "Set to ``0`` by the :option:`-s` and :option:`-I` command line options."
msgstr ""

msgid "Set to ``0`` by the :envvar:`PYTHONNOUSERSITE` environment variable."
msgstr ""

msgid ""
"Verbose mode. If greater than ``0``, print a message each time a module is "
"imported, showing the place (filename or built-in module) from which it is "
"loaded."
msgstr ""

msgid ""
"If greater than or equal to ``2``, print a message for each file that is "
"checked for when searching for a module. Also provides information on module "
"cleanup at exit."
msgstr ""

msgid "Incremented by the :option:`-v` command line option."
msgstr ""

msgid "Set by the :envvar:`PYTHONVERBOSE` environment variable value."
msgstr ""

msgid ""
"Options of the :mod:`warnings` module to build warnings filters, lowest to "
"highest priority: :data:`sys.warnoptions`."
msgstr ""

msgid ""
"The :mod:`warnings` module adds :data:`sys.warnoptions` in the reverse "
"order: the last :c:member:`PyConfig.warnoptions` item becomes the first item "
"of :data:`warnings.filters` which is checked first (highest priority)."
msgstr ""

msgid ""
"The :option:`-W` command line options adds its value to :c:member:`~PyConfig."
"warnoptions`, it can be used multiple times."
msgstr ""

msgid ""
"The :envvar:`PYTHONWARNINGS` environment variable can also be used to add "
"warning options. Multiple options can be specified, separated by commas (``,"
"``)."
msgstr ""

msgid ""
"If equal to ``0``, Python won't try to write ``.pyc`` files on the import of "
"source modules."
msgstr ""

msgid ""
"Set to ``0`` by the :option:`-B` command line option and the :envvar:"
"`PYTHONDONTWRITEBYTECODE` environment variable."
msgstr ""

msgid ""
":data:`sys.dont_write_bytecode` is initialized to the inverted value of :c:"
"member:`~PyConfig.write_bytecode`."
msgstr ""

msgid "Values of the :option:`-X` command line options: :data:`sys._xoptions`."
msgstr ""

msgid "If non-zero, write performance statistics at Python exit."
msgstr ""

msgid ""
"Need a special build with the ``Py_STATS`` macro: see :option:`--enable-"
"pystats`."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.parse_argv` is non-zero, :c:member:`~PyConfig.argv` "
"arguments are parsed the same way the regular Python parses :ref:`command "
"line arguments <using-on-cmdline>`, and Python arguments are stripped from :"
"c:member:`~PyConfig.argv`."
msgstr ""

msgid ""
"The :c:member:`~PyConfig.xoptions` options are parsed to set other options: "
"see the :option:`-X` command line option."
msgstr ""

msgid "The ``show_alloc_count`` field has been removed."
msgstr ""

msgid "Initialization with PyConfig"
msgstr ""

msgid ""
"Initializing the interpreter from a populated configuration struct is "
"handled by calling :c:func:`Py_InitializeFromConfig`."
msgstr ""

msgid ""
"If :c:func:`PyImport_FrozenModules`, :c:func:`PyImport_AppendInittab` or :c:"
"func:`PyImport_ExtendInittab` are used, they must be set or called after "
"Python preinitialization and before the Python initialization. If Python is "
"initialized multiple times, :c:func:`PyImport_AppendInittab` or :c:func:"
"`PyImport_ExtendInittab` must be called before each Python initialization."
msgstr ""

msgid ""
"The current configuration (``PyConfig`` type) is stored in "
"``PyInterpreterState.config``."
msgstr ""

msgid "Example setting the program name::"
msgstr ""

msgid ""
"void init_python(void)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"\n"
"    /* Set the program name. Implicitly preinitialize Python. */\n"
"    status = PyConfig_SetString(&config, &config.program_name,\n"
"                                L\"/path/to/my_program\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto exception;\n"
"    }\n"
"    PyConfig_Clear(&config);\n"
"    return;\n"
"\n"
"exception:\n"
"    PyConfig_Clear(&config);\n"
"    Py_ExitStatusException(status);\n"
"}"
msgstr ""

msgid ""
"More complete example modifying the default configuration, read the "
"configuration, and then override some parameters. Note that since 3.11, many "
"parameters are not calculated until initialization, and so values cannot be "
"read from the configuration structure. Any values set before initialize is "
"called will be left unchanged by initialization::"
msgstr ""

msgid ""
"PyStatus init_python(const char *program_name)\n"
"{\n"
"    PyStatus status;\n"
"\n"
"    PyConfig config;\n"
"    PyConfig_InitPythonConfig(&config);\n"
"\n"
"    /* Set the program name before reading the configuration\n"
"       (decode byte string from the locale encoding).\n"
"\n"
"       Implicitly preinitialize Python. */\n"
"    status = PyConfig_SetBytesString(&config, &config.program_name,\n"
"                                     program_name);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    /* Read all configuration at once */\n"
"    status = PyConfig_Read(&config);\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    /* Specify sys.path explicitly */\n"
"    /* If you want to modify the default set of paths, finish\n"
"       initialization first and then use PySys_GetObject(\"path\") */\n"
"    config.module_search_paths_set = 1;\n"
"    status = PyWideStringList_Append(&config.module_search_paths,\n"
"                                     L\"/path/to/stdlib\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"    status = PyWideStringList_Append(&config.module_search_paths,\n"
"                                     L\"/path/to/more/modules\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    /* Override executable computed by PyConfig_Read() */\n"
"    status = PyConfig_SetString(&config, &config.executable,\n"
"                                L\"/path/to/my_executable\");\n"
"    if (PyStatus_Exception(status)) {\n"
"        goto done;\n"
"    }\n"
"\n"
"    status = Py_InitializeFromConfig(&config);\n"
"\n"
"done:\n"
"    PyConfig_Clear(&config);\n"
"    return status;\n"
"}"
msgstr ""

msgid "Isolated Configuration"
msgstr ""

msgid ""
":c:func:`PyPreConfig_InitIsolatedConfig` and :c:func:"
"`PyConfig_InitIsolatedConfig` functions create a configuration to isolate "
"Python from the system. For example, to embed Python into an application."
msgstr ""

msgid ""
"This configuration ignores global configuration variables, environment "
"variables, command line arguments (:c:member:`PyConfig.argv` is not parsed) "
"and user site directory. The C standard streams (ex: ``stdout``) and the "
"LC_CTYPE locale are left unchanged. Signal handlers are not installed."
msgstr ""

msgid ""
"Configuration files are still used with this configuration to determine "
"paths that are unspecified. Ensure :c:member:`PyConfig.home` is specified to "
"avoid computing the default path configuration."
msgstr ""

msgid "Python Configuration"
msgstr ""

msgid ""
":c:func:`PyPreConfig_InitPythonConfig` and :c:func:"
"`PyConfig_InitPythonConfig` functions create a configuration to build a "
"customized Python which behaves as the regular Python."
msgstr ""

msgid ""
"Environments variables and command line arguments are used to configure "
"Python, whereas global configuration variables are ignored."
msgstr ""

msgid ""
"This function enables C locale coercion (:pep:`538`) and :ref:`Python UTF-8 "
"Mode <utf8-mode>` (:pep:`540`) depending on the LC_CTYPE locale, :envvar:"
"`PYTHONUTF8` and :envvar:`PYTHONCOERCECLOCALE` environment variables."
msgstr ""

msgid "Python Path Configuration"
msgstr ""

msgid ":c:type:`PyConfig` contains multiple fields for the path configuration:"
msgstr ""

msgid "Path configuration inputs:"
msgstr ""

msgid ":c:member:`PyConfig.home`"
msgstr ""

msgid ":c:member:`PyConfig.platlibdir`"
msgstr ""

msgid ":c:member:`PyConfig.pathconfig_warnings`"
msgstr ""

msgid ":c:member:`PyConfig.program_name`"
msgstr ""

msgid ":c:member:`PyConfig.pythonpath_env`"
msgstr ""

msgid "current working directory: to get absolute paths"
msgstr ""

msgid ""
"``PATH`` environment variable to get the program full path (from :c:member:"
"`PyConfig.program_name`)"
msgstr ""

msgid "``__PYVENV_LAUNCHER__`` environment variable"
msgstr ""

msgid ""
"(Windows only) Application paths in the registry under "
"\"Software\\Python\\PythonCore\\X.Y\\PythonPath\" of HKEY_CURRENT_USER and "
"HKEY_LOCAL_MACHINE (where X.Y is the Python version)."
msgstr ""

msgid "Path configuration output fields:"
msgstr ""

msgid ":c:member:`PyConfig.base_exec_prefix`"
msgstr ""

msgid ":c:member:`PyConfig.base_executable`"
msgstr ""

msgid ":c:member:`PyConfig.base_prefix`"
msgstr ""

msgid ":c:member:`PyConfig.exec_prefix`"
msgstr ""

msgid ":c:member:`PyConfig.executable`"
msgstr ":c:member:`PyConfig.executable`"

msgid ""
":c:member:`PyConfig.module_search_paths_set`, :c:member:`PyConfig."
"module_search_paths`"
msgstr ""

msgid ":c:member:`PyConfig.prefix`"
msgstr ""

msgid ""
"If at least one \"output field\" is not set, Python calculates the path "
"configuration to fill unset fields. If :c:member:`~PyConfig."
"module_search_paths_set` is equal to ``0``, :c:member:`~PyConfig."
"module_search_paths` is overridden and :c:member:`~PyConfig."
"module_search_paths_set` is set to ``1``."
msgstr ""

msgid ""
"It is possible to completely ignore the function calculating the default "
"path configuration by setting explicitly all path configuration output "
"fields listed above. A string is considered as set even if it is non-empty. "
"``module_search_paths`` is considered as set if ``module_search_paths_set`` "
"is set to ``1``. In this case, ``module_search_paths`` will be used without "
"modification."
msgstr ""

msgid ""
"Set :c:member:`~PyConfig.pathconfig_warnings` to ``0`` to suppress warnings "
"when calculating the path configuration (Unix only, Windows does not log any "
"warning)."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.base_prefix` or :c:member:`~PyConfig."
"base_exec_prefix` fields are not set, they inherit their value from :c:"
"member:`~PyConfig.prefix` and :c:member:`~PyConfig.exec_prefix` respectively."
msgstr ""

msgid ":c:func:`Py_RunMain` and :c:func:`Py_Main` modify :data:`sys.path`:"
msgstr ""

msgid ""
"If :c:member:`~PyConfig.run_filename` is set and is a directory which "
"contains a ``__main__.py`` script, prepend :c:member:`~PyConfig."
"run_filename` to :data:`sys.path`."
msgstr ""

msgid "If :c:member:`~PyConfig.isolated` is zero:"
msgstr ""

msgid ""
"If :c:member:`~PyConfig.run_module` is set, prepend the current directory "
"to :data:`sys.path`. Do nothing if the current directory cannot be read."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.run_filename` is set, prepend the directory of the "
"filename to :data:`sys.path`."
msgstr ""

msgid "Otherwise, prepend an empty string to :data:`sys.path`."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.site_import` is non-zero, :data:`sys.path` can be "
"modified by the :mod:`site` module. If :c:member:`~PyConfig."
"user_site_directory` is non-zero and the user's site-package directory "
"exists, the :mod:`site` module appends the user's site-package directory to :"
"data:`sys.path`."
msgstr ""

msgid "The following configuration files are used by the path configuration:"
msgstr ""

msgid "``pyvenv.cfg``"
msgstr ""

msgid "``._pth`` file (ex: ``python._pth``)"
msgstr ""

msgid "``pybuilddir.txt`` (Unix only)"
msgstr ""

msgid "If a ``._pth`` file is present:"
msgstr ""

msgid "Set :c:member:`~PyConfig.isolated` to ``1``."
msgstr ""

msgid "Set :c:member:`~PyConfig.use_environment` to ``0``."
msgstr ""

msgid "Set :c:member:`~PyConfig.site_import` to ``0``."
msgstr ""

msgid "Set :c:member:`~PyConfig.safe_path` to ``1``."
msgstr ""

msgid ""
"If :c:member:`~PyConfig.home` is not set and a ``pyvenv.cfg`` file is "
"present in the same directory as :c:member:`~PyConfig.executable`, or its "
"parent, :c:member:`~PyConfig.prefix` and :c:member:`~PyConfig.exec_prefix` "
"are set that location. When this happens, :c:member:`~PyConfig.base_prefix` "
"and :c:member:`~PyConfig.base_exec_prefix` still keep their value, pointing "
"to the base installation. See :ref:`sys-path-init-virtual-environments` for "
"more information."
msgstr ""

msgid ""
"The ``__PYVENV_LAUNCHER__`` environment variable is used to set :c:member:"
"`PyConfig.base_executable`."
msgstr ""

msgid ""
":c:member:`~PyConfig.prefix`, and :c:member:`~PyConfig.exec_prefix`, are now "
"set to the ``pyvenv.cfg`` directory. This was previously done by :mod:"
"`site`, therefore affected by :option:`-S`."
msgstr ""

msgid "Py_GetArgcArgv()"
msgstr ""

msgid "Get the original command line arguments, before Python modified them."
msgstr ""

msgid "See also :c:member:`PyConfig.orig_argv` member."
msgstr ""

msgid "Delaying main module execution"
msgstr ""

msgid ""
"In some embedding use cases, it may be desirable to separate interpreter "
"initialization from the execution of the main module."
msgstr ""

msgid ""
"This separation can be achieved by setting ``PyConfig.run_command`` to the "
"empty string during initialization (to prevent the interpreter from dropping "
"into the interactive prompt), and then subsequently executing the desired "
"main module code using ``__main__.__dict__`` as the global namespace."
msgstr ""

msgid "main()"
msgstr ""

msgid "argv (in module sys)"
msgstr ""
