# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!trace` --- Trace or track Python statement execution"
msgstr ""

msgid "**Source code:** :source:`Lib/trace.py`"
msgstr ""

msgid ""
"The :mod:`trace` module allows you to trace program execution, generate "
"annotated statement coverage listings, print caller/callee relationships and "
"list functions executed during a program run.  It can be used in another "
"program or from the command line."
msgstr ""

msgid "`Coverage.py <https://coverage.readthedocs.io/>`_"
msgstr ""

msgid ""
"A popular third-party coverage tool that provides HTML output along with "
"advanced features such as branch coverage."
msgstr ""

msgid "Command-Line Usage"
msgstr ""

msgid ""
"The :mod:`trace` module can be invoked from the command line.  It can be as "
"simple as ::"
msgstr ""

msgid "python -m trace --count -C . somefile.py ..."
msgstr ""

msgid ""
"The above will execute :file:`somefile.py` and generate annotated listings "
"of all Python modules imported during the execution into the current "
"directory."
msgstr ""

msgid "Display usage and exit."
msgstr ""

msgid "Display the version of the module and exit."
msgstr ""

msgid "Added ``--module`` option that allows to run an executable module."
msgstr ""

msgid "Main options"
msgstr ""

msgid ""
"At least one of the following options must be specified when invoking :mod:"
"`trace`.  The :option:`--listfuncs <-l>` option is mutually exclusive with "
"the :option:`--trace <-t>` and :option:`--count <-c>` options. When :option:"
"`--listfuncs <-l>` is provided, neither :option:`--count <-c>` nor :option:"
"`--trace <-t>` are accepted, and vice versa."
msgstr ""

msgid ""
"Produce a set of annotated listing files upon program completion that shows "
"how many times each statement was executed.  See also :option:`--coverdir <-"
"C>`, :option:`--file <-f>` and :option:`--no-report <-R>` below."
msgstr ""

msgid "Display lines as they are executed."
msgstr ""

msgid "Display the functions executed by running the program."
msgstr ""

msgid ""
"Produce an annotated list from an earlier program run that used the :option:"
"`--count <-c>` and :option:`--file <-f>` option.  This does not execute any "
"code."
msgstr ""

msgid "Display the calling relationships exposed by running the program."
msgstr ""

msgid "Modifiers"
msgstr ""

msgid ""
"Name of a file to accumulate counts over several tracing runs.  Should be "
"used with the :option:`--count <-c>` option."
msgstr ""

msgid ""
"Directory where the report files go.  The coverage report for ``package."
"module`` is written to file :file:`{dir}/{package}/{module}.cover`."
msgstr ""

msgid ""
"When generating annotated listings, mark lines which were not executed with "
"``>>>>>>``."
msgstr ""

msgid ""
"When using :option:`--count <-c>` or :option:`--report <-r>`, write a brief "
"summary to stdout for each file processed."
msgstr ""

msgid ""
"Do not generate annotated listings.  This is useful if you intend to make "
"several runs with :option:`--count <-c>`, and then produce a single set of "
"annotated listings at the end."
msgstr ""

msgid ""
"Prefix each line with the time since the program started.  Only used while "
"tracing."
msgstr ""

msgid "Filters"
msgstr ""

msgid "These options may be repeated multiple times."
msgstr ""

msgid ""
"Ignore each of the given module names and its submodules (if it is a "
"package).  The argument can be a list of names separated by a comma."
msgstr ""

msgid ""
"Ignore all modules and packages in the named directory and subdirectories. "
"The argument can be a list of directories separated by :data:`os.pathsep`."
msgstr ""

msgid "Programmatic Interface"
msgstr ""

msgid ""
"Create an object to trace execution of a single statement or expression.  "
"All parameters are optional.  *count* enables counting of line numbers.  "
"*trace* enables line execution tracing.  *countfuncs* enables listing of the "
"functions called during the run.  *countcallers* enables call relationship "
"tracking.  *ignoremods* is a list of modules or packages to ignore. "
"*ignoredirs* is a list of directories whose modules or packages should be "
"ignored.  *infile* is the name of the file from which to read stored count "
"information.  *outfile* is the name of the file in which to write updated "
"count information.  *timing* enables a timestamp relative to when tracing "
"was started to be displayed."
msgstr ""

msgid ""
"Execute the command and gather statistics from the execution with the "
"current tracing parameters.  *cmd* must be a string or code object, suitable "
"for passing into :func:`exec`."
msgstr ""

msgid ""
"Execute the command and gather statistics from the execution with the "
"current tracing parameters, in the defined global and local environments.  "
"If not defined, *globals* and *locals* default to empty dictionaries."
msgstr ""

msgid ""
"Call *func* with the given arguments under control of the :class:`Trace` "
"object with the current tracing parameters."
msgstr ""

msgid ""
"Return a :class:`CoverageResults` object that contains the cumulative "
"results of all previous calls to ``run``, ``runctx`` and ``runfunc`` for the "
"given :class:`Trace` instance.  Does not reset the accumulated trace results."
msgstr ""

msgid ""
"A container for coverage results, created by :meth:`Trace.results`.  Should "
"not be created directly by the user."
msgstr ""

msgid "Merge in data from another :class:`CoverageResults` object."
msgstr ""

msgid ""
"Write coverage results.  Set *show_missing* to show lines that had no hits.  "
"Set *summary* to include in the output the coverage summary per module.  "
"*coverdir* specifies the directory into which the coverage result files will "
"be output.  If ``None``, the results for each source file are placed in its "
"directory."
msgstr ""

msgid ""
"If *ignore_missing_files* is ``True``, coverage counts for files that no "
"longer exist are silently ignored. Otherwise, a missing file will raise a :"
"exc:`FileNotFoundError`."
msgstr ""

msgid "Added *ignore_missing_files* parameter."
msgstr ""

msgid "A simple example demonstrating the use of the programmatic interface::"
msgstr ""

msgid ""
"import sys\n"
"import trace\n"
"\n"
"# create a Trace object, telling it what to ignore, and whether to\n"
"# do tracing or line-counting or both.\n"
"tracer = trace.Trace(\n"
"    ignoredirs=[sys.prefix, sys.exec_prefix],\n"
"    trace=0,\n"
"    count=1)\n"
"\n"
"# run the new command using the given tracer\n"
"tracer.run('main()')\n"
"\n"
"# make a report, placing output in the current directory\n"
"r = tracer.results()\n"
"r.write_results(show_missing=True, coverdir=\".\")"
msgstr ""
