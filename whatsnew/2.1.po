# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's New in Python 2.1"
msgstr "Vad är nytt i Python 2.1"

msgid "Author"
msgstr "Författare"

msgid "A.M. Kuchling"
msgstr "A.M. Kuchling"

msgid "Introduction"
msgstr "Introduktion"

msgid ""
"This article explains the new features in Python 2.1.  While there aren't as "
"many changes in 2.1 as there were in Python 2.0, there are still some "
"pleasant surprises in store.  2.1 is the first release to be steered through "
"the use of Python Enhancement Proposals, or PEPs, so most of the sizable "
"changes have accompanying PEPs that provide more complete documentation and "
"a design rationale for the change.  This article doesn't attempt to document "
"the new features completely, but simply provides an overview of the new "
"features for Python programmers. Refer to the Python 2.1 documentation, or "
"to the specific PEP, for more details about any new feature that "
"particularly interests you."
msgstr ""
"Den här artikeln förklarar de nya funktionerna i Python 2.1.  Även om det "
"inte finns så många förändringar i 2.1 som det fanns i Python 2.0, finns det "
"fortfarande några trevliga överraskningar i butiken.  2.1 är den första "
"utgåvan som styrs genom användning av Python Enhancement Proposals, eller "
"PEPs, så de flesta av de stora förändringarna har medföljande PEPs som ger "
"mer fullständig dokumentation och en designgrund för förändringen.  Den här "
"artikeln försöker inte dokumentera de nya funktionerna fullständigt, utan "
"ger helt enkelt en översikt över de nya funktionerna för Python-"
"programmerare. Se dokumentationen för Python 2.1, eller den specifika PEP:"
"en, för mer information om någon ny funktion som intresserar dig särskilt."

msgid ""
"One recent goal of the Python development team has been to accelerate the "
"pace of new releases, with a new release coming every 6 to 9 months. 2.1 is "
"the first release to come out at this faster pace, with the first alpha "
"appearing in January, 3 months after the final version of 2.0 was released."
msgstr ""
"Ett av Python-utvecklingsteamets senaste mål har varit att påskynda takten "
"för nya utgåvor, med en ny utgåva var 6:e till 9:e månad. 2.1 är den första "
"utgåvan som kommer ut i denna snabbare takt, med den första alfan som kom ut "
"i januari, 3 månader efter att den slutliga versionen av 2.0 släpptes."

msgid "The final release of Python 2.1 was made on April 17, 2001."
msgstr "Den slutliga versionen av Python 2.1 släpptes den 17 april 2001."

msgid "PEP 227: Nested Scopes"
msgstr "PEP 227: Nästlade scopes"

msgid ""
"The largest change in Python 2.1 is to Python's scoping rules.  In Python "
"2.0, at any given time there are at most three namespaces used to look up "
"variable names: local, module-level, and the built-in namespace.  This often "
"surprised people because it didn't match their intuitive expectations.  For "
"example, a nested recursive function definition doesn't work::"
msgstr ""
"Den största förändringen i Python 2.1 är Pythons scoping-regler.  I Python "
"2.0 finns det vid varje given tidpunkt högst tre namnrymder som används för "
"att leta upp variabelnamn: lokalt, modulnivå och det inbyggda namnrymden.  "
"Detta förvånade ofta människor eftersom det inte stämde överens med deras "
"intuitiva förväntningar.  Till exempel fungerar inte en nästlad rekursiv "
"funktionsdefinition::"

msgid ""
"def f():\n"
"    ...\n"
"    def g(value):\n"
"        ...\n"
"        return g(value-1) + 1\n"
"    ..."
msgstr ""
"def f():\n"
"    ...\n"
"    def g(värde):\n"
"        ...\n"
"        returnera g(värde-1) + 1\n"
"    ..."

msgid ""
"The function :func:`!g` will always raise a :exc:`NameError` exception, "
"because the binding of the name ``g`` isn't in either its local namespace or "
"in the module-level namespace.  This isn't much of a problem in practice "
"(how often do you recursively define interior functions like this?), but "
"this also made using the :keyword:`lambda` expression clumsier, and this was "
"a problem in practice. In code which uses :keyword:`lambda` you can often "
"find local variables being copied by passing them as the default values of "
"arguments. ::"
msgstr ""
"Funktionen :func:`!g` kommer alltid att ge upphov till ett :exc:`NameError`-"
"undantag, eftersom bindningen av namnet ``g`` inte finns i vare sig dess "
"lokala namnrymd eller i namnrymden på modulnivå.  Detta är inte mycket av "
"ett problem i praktiken (hur ofta definierar man rekursivt inre funktioner "
"på det här sättet?), men det gjorde det också klumpigare att använda :"
"keyword:`lambda`-uttrycket, och det var ett problem i praktiken. I kod som "
"använder :keyword:`lambda` kan man ofta hitta lokala variabler som kopieras "
"genom att de skickas som standardvärden för argument. ::"

msgid ""
"def find(self, name):\n"
"    \"Return list of any entries equal to 'name'\"\n"
"    L = filter(lambda x, name=name: x == name,\n"
"               self.list_attribute)\n"
"    return L"
msgstr ""
"def hitta(själv, namn):\n"
"    \"Returnera listan med alla poster som är lika med 'namn'\"\n"
"    L = filter(lambda x, namn=namn: x == namn,\n"
"               self.list_attribut)\n"
"    returnera L"

msgid ""
"The readability of Python code written in a strongly functional style "
"suffers greatly as a result."
msgstr ""
"Läsbarheten hos Python-kod skriven i en starkt funktionell stil blir därför "
"mycket lidande."

msgid ""
"The most significant change to Python 2.1 is that static scoping has been "
"added to the language to fix this problem.  As a first effect, the "
"``name=name`` default argument is now unnecessary in the above example.  Put "
"simply, when a given variable name is not assigned a value within a function "
"(by an assignment, or the :keyword:`def`, :keyword:`class`, or :keyword:"
"`import` statements), references to the variable will be looked up in the "
"local namespace of the enclosing scope.  A more detailed explanation of the "
"rules, and a dissection of the implementation, can be found in the PEP."
msgstr ""
"Den mest betydande förändringen i Python 2.1 är att statisk scoping har "
"lagts till i språket för att lösa detta problem.  Som en första effekt är "
"standardargumentet ``namn=namn`` nu onödigt i exemplet ovan.  Enkelt "
"uttryckt, när ett givet variabelnamn inte tilldelas ett värde inom en "
"funktion (genom en tilldelning, eller genom :keyword:`def`, :keyword:"
"`class`, eller :keyword:`import`), kommer referenser till variabeln att "
"sökas i det lokala namnområdet i det omslutande scopet.  En mer detaljerad "
"förklaring av reglerna, och en dissektion av implementationen, finns i PEP."

msgid ""
"This change may cause some compatibility problems for code where the same "
"variable name is used both at the module level and as a local variable "
"within a function that contains further function definitions. This seems "
"rather unlikely though, since such code would have been pretty confusing to "
"read in the first place."
msgstr ""
"Denna ändring kan orsaka vissa kompatibilitetsproblem för kod där samma "
"variabelnamn används både på modulnivå och som en lokal variabel inom en "
"funktion som innehåller ytterligare funktionsdefinitioner. Detta verkar dock "
"ganska osannolikt, eftersom sådan kod skulle ha varit ganska förvirrande att "
"läsa från början."

msgid ""
"One side effect of the change is that the ``from module import *`` and "
"``exec`` statements have been made illegal inside a function scope under "
"certain conditions.  The Python reference manual has said all along that "
"``from module import *`` is only legal at the top level of a module, but the "
"CPython interpreter has never enforced this before.  As part of the "
"implementation of nested scopes, the compiler which turns Python source into "
"bytecodes has to generate different code to access variables in a containing "
"scope.  ``from module import *`` and ``exec`` make it impossible for the "
"compiler to figure this out, because they add names to the local namespace "
"that are unknowable at compile time. Therefore, if a function contains "
"function definitions or :keyword:`lambda` expressions with free variables, "
"the compiler will flag this by raising a :exc:`SyntaxError` exception."
msgstr ""
"En sidoeffekt av förändringen är att ``from module import *`` och ``exec``-"
"satserna har gjorts olagliga inom ett funktionsomfång under vissa "
"förhållanden.  Pythons referensmanual har hela tiden sagt att ``from module "
"import *`` bara är lagligt på den översta nivån i en modul, men CPython-"
"tolken har aldrig verkställt detta tidigare.  Som en del av implementeringen "
"av nästlade scope måste kompilatorn som förvandlar Python-källkod till "
"bytecodes generera annan kod för att komma åt variabler i ett innehållande "
"scope.  ``from module import *`` och ``exec`` gör det omöjligt för "
"kompilatorn att räkna ut detta, eftersom de lägger till namn i det lokala "
"namnområdet som är okända vid kompileringstillfället. Därför, om en funktion "
"innehåller funktionsdefinitioner eller :keyword:`lambda` uttryck med fria "
"variabler, kommer kompilatorn att flagga detta genom att skapa ett :exc:"
"`SyntaxError` undantag."

msgid "To make the preceding explanation a bit clearer, here's an example::"
msgstr ""
"För att göra den föregående förklaringen lite tydligare, här är ett exempel::"

msgid ""
"x = 1\n"
"def f():\n"
"    # The next line is a syntax error\n"
"    exec 'x=2'\n"
"    def g():\n"
"        return x"
msgstr ""
"x = 1\n"
"def f():\n"
"    # Nästa rad är ett syntaxfel\n"
"    exekvera 'x=2'\n"
"    def g():\n"
"        returnera x"

msgid ""
"Line 4 containing the ``exec`` statement is a syntax error, since ``exec`` "
"would define a new local variable named ``x`` whose value should be accessed "
"by :func:`!g`."
msgstr ""
"Rad 4 som innehåller ``exec``-satsen är ett syntaxfel, eftersom ``exec`` "
"skulle definiera en ny lokal variabel med namnet ``x`` vars värde ska nås "
"av :func:`!g`."

msgid ""
"This shouldn't be much of a limitation, since ``exec`` is rarely used in "
"most Python code (and when it is used, it's often a sign of a poor design "
"anyway)."
msgstr ""
"Detta borde inte vara någon större begränsning, eftersom ``exec`` sällan "
"används i den mesta Python-koden (och när det används är det ofta ett tecken "
"på dålig design)."

msgid ""
"Compatibility concerns have led to nested scopes being introduced gradually; "
"in Python 2.1, they aren't enabled by default, but can be turned on within a "
"module by using a future statement as described in :pep:`236`.  (See the "
"following section for further discussion of :pep:`236`.)  In Python 2.2, "
"nested scopes will become the default and there will be no way to turn them "
"off, but users will have had all of 2.1's lifetime to fix any breakage "
"resulting from their introduction."
msgstr ""
"Kompatibilitetsproblem har lett till att nästlade scopes införs gradvis; i "
"Python 2.1 är de inte aktiverade som standard, men kan slås på inom en modul "
"genom att använda en future-sats som beskrivs i :pep:`236`.  (Se följande "
"avsnitt för ytterligare diskussion om :pep:`236`.) I Python 2.2 kommer "
"nästlade scopes att bli standard och det kommer inte att finnas något sätt "
"att stänga av dem, men användare kommer att ha haft hela 2.1:s livstid för "
"att åtgärda eventuella fel som uppstår till följd av deras införande."

msgid ":pep:`227` - Statically Nested Scopes"
msgstr ":pep:`227` - Statiskt nästlade scopes"

msgid "Written and implemented by Jeremy Hylton."
msgstr "Skriven och implementerad av Jeremy Hylton."

msgid "PEP 236: __future__ Directives"
msgstr "PEP 236: __framtida__ direktiv"

msgid ""
"The reaction to nested scopes was widespread concern about the dangers of "
"breaking code with the 2.1 release, and it was strong enough to make the "
"Pythoneers take a more conservative approach.  This approach consists of "
"introducing a convention for enabling optional functionality in release N "
"that will become compulsory in release N+1."
msgstr ""
"Reaktionen på nested scopes var en utbredd oro för farorna med att bryta kod "
"med 2.1-versionen, och den var tillräckligt stark för att få Pythoneers att "
"ta ett mer konservativt tillvägagångssätt.  Detta tillvägagångssätt består i "
"att införa en konvention för att aktivera valfri funktionalitet i version N "
"som kommer att bli obligatorisk i version N+1."

msgid ""
"The syntax uses a ``from...import`` statement using the reserved module "
"name :mod:`__future__`.  Nested scopes can be enabled by the following "
"statement::"
msgstr ""
"Syntaxen använder en ``from...import``-sats med det reserverade modulnamnet :"
"mod:`__future__`.  Nested scopes kan aktiveras genom följande uttalande::"

msgid "from __future__ import nested_scopes"
msgstr "from __future__ import nested_scopes"

msgid ""
"While it looks like a normal :keyword:`import` statement, it's not; there "
"are strict rules on where such a future statement can be put. They can only "
"be at the top of a module, and must precede any Python code or regular :"
"keyword:`!import` statements.  This is because such statements can affect "
"how the Python bytecode compiler parses code and generates bytecode, so they "
"must precede any statement that will result in bytecodes being produced."
msgstr ""
"Även om det ser ut som en vanlig :keyword:`import`-sats är det inte det; det "
"finns strikta regler för var en sådan framtida sats kan placeras. De kan "
"bara vara högst upp i en modul, och måste föregå all Python-kod eller "
"vanliga :keyword:`!import`-satser.  Detta beror på att sådana uttalanden kan "
"påverka hur Pythons bytecode-kompilator analyserar kod och genererar "
"bytecode, så de måste föregå alla uttalanden som kommer att resultera i att "
"bytecodes produceras."

msgid ":pep:`236` - Back to the :mod:`__future__`"
msgstr ":pep:`236` - Tillbaka till :mod:`__framtiden__`"

msgid "Written by Tim Peters, and primarily implemented by Jeremy Hylton."
msgstr ""
"Skriven av Tim Peters och huvudsakligen implementerad av Jeremy Hylton."

msgid "PEP 207: Rich Comparisons"
msgstr "PEP 207: Rika jämförelser"

msgid ""
"In earlier versions, Python's support for implementing comparisons on user-"
"defined classes and extension types was quite simple. Classes could "
"implement a :meth:`!__cmp__` method that was given two instances of a class, "
"and could only return 0 if they were equal or +1 or -1 if they weren't; the "
"method couldn't raise an exception or return anything other than a Boolean "
"value.  Users of Numeric Python often found this model too weak and "
"restrictive, because in the number-crunching programs that numeric Python is "
"used for, it would be more useful to be able to perform elementwise "
"comparisons of two matrices, returning a matrix containing the results of a "
"given comparison for each element.  If the two matrices are of different "
"sizes, then the compare has to be able to raise an exception to signal the "
"error."
msgstr ""
"I tidigare versioner var Pythons stöd för att implementera jämförelser på "
"användardefinierade klasser och tilläggstyper ganska enkelt. Klasser kunde "
"implementera en :meth:`!__cmp__`-metod som fick två instanser av en klass, "
"och kunde bara returnera 0 om de var lika eller +1 eller -1 om de inte var "
"det; metoden kunde inte ge upphov till ett undantag eller returnera något "
"annat än ett booleskt värde.  Användare av Numeric Python tyckte ofta att "
"denna modell var för svag och restriktiv, eftersom det i de numeriska "
"program som Numeric Python används för skulle vara mer användbart att kunna "
"utföra elementvisa jämförelser av två matriser och returnera en matris som "
"innehåller resultaten av en given jämförelse för varje element.  Om de två "
"matriserna är av olika storlek måste jämförelsen kunna ge upphov till ett "
"undantag för att signalera felet."

msgid ""
"In Python 2.1, rich comparisons were added in order to support this need. "
"Python classes can now individually overload each of the ``<``, ``<=``, "
"``>``, ``>=``, ``==``, and ``!=`` operations.  The new magic method names "
"are:"
msgstr ""
"I Python 2.1 lades rika jämförelser till för att stödja detta behov. Python-"
"klasser kan nu individuellt överbelasta var och en av operationerna ``<``, "
"``<=``, ``>``, ``>=``, ``==`` och ``!=``.  De nya magiska metodnamnen är:"

msgid "Operation"
msgstr "Operation"

msgid "Method name"
msgstr "Metodnamn"

msgid "``<``"
msgstr "``<``"

msgid ":meth:`~object.__lt__`"
msgstr ":meth:`~object.__lt__`"

msgid "``<=``"
msgstr "``<=``"

msgid ":meth:`~object.__le__`"
msgstr ":meth:`~object.__le__`"

msgid "``>``"
msgstr "``>``"

msgid ":meth:`~object.__gt__`"
msgstr ":meth:`~object.__gt__`"

msgid "``>=``"
msgstr "``>=``"

msgid ":meth:`~object.__ge__`"
msgstr ":meth:`~object.__ge__`"

msgid "``==``"
msgstr "``==``"

msgid ":meth:`~object.__eq__`"
msgstr ":meth:`~object.__eq__`"

msgid "``!=``"
msgstr "``!=``"

msgid ":meth:`~object.__ne__`"
msgstr ":meth:`~objekt.__ne__`"

msgid ""
"(The magic methods are named after the corresponding Fortran operators ``.LT."
"``. ``.LE.``, &c.  Numeric programmers are almost certainly quite familiar "
"with these names and will find them easy to remember.)"
msgstr ""
"(De magiska metoderna är uppkallade efter motsvarande Fortran-operatorer ``."
"LT.``. ``.LE.``, &c.  Numeriska programmerare är nästan säkert ganska "
"bekanta med dessa namn och kommer att tycka att de är lätta att komma ihåg)"

msgid ""
"Each of these magic methods is of the form ``method(self, other)``, where "
"``self`` will be the object on the left-hand side of the operator, while "
"``other`` will be the object on the right-hand side.  For example, the "
"expression ``A < B`` will cause ``A.__lt__(B)`` to be called."
msgstr ""
"Var och en av dessa magiska metoder är av formen ``method(self, other)``, "
"där ``self`` är objektet på vänster sida av operatorn, medan ``other`` är "
"objektet på höger sida.  Till exempel kommer uttrycket ``A < B`` att leda "
"till att ``A.__lt__(B)`` anropas."

msgid ""
"Each of these magic methods can return anything at all: a Boolean, a matrix, "
"a list, or any other Python object.  Alternatively they can raise an "
"exception if the comparison is impossible, inconsistent, or otherwise "
"meaningless."
msgstr ""
"Var och en av dessa magiska metoder kan returnera vad som helst: en boolesk, "
"en matris, en lista eller något annat Python-objekt.  Alternativt kan de ge "
"upphov till ett undantag om jämförelsen är omöjlig, inkonsekvent eller på "
"annat sätt meningslös."

msgid ""
"The built-in ``cmp(A,B)`` function can use the rich comparison machinery, "
"and now accepts an optional argument specifying which comparison operation "
"to use; this is given as one of the strings ``\"<\"``, ``\"<=\"``, "
"``\">\"``, ``\">=\"``, ``\"==\"``, or ``\"!=\"``.  If called without the "
"optional third argument, :func:`!cmp` will only return -1, 0, or +1 as in "
"previous versions of Python; otherwise it will call the appropriate method "
"and can return any Python object."
msgstr ""
"Den inbyggda funktionen ``cmp(A,B)`` kan använda det rika "
"jämförelsemaskineriet och accepterar nu ett valfritt argument som anger "
"vilken jämförelseoperation som ska användas; detta ges som en av strängarna "
"``\"<\"``, ``\"<=\"``, ``\">\"``, ``\">=\"``, ``\"==\"`` eller ``\"!=\"``.  "
"Om den anropas utan det valfria tredje argumentet kommer :func:`!cmp` bara "
"att returnera -1, 0 eller +1 som i tidigare versioner av Python; annars "
"kommer den att anropa lämplig metod och kan returnera vilket Python-objekt "
"som helst."

msgid ""
"There are also corresponding changes of interest to C programmers; there's a "
"new slot ``tp_richcmp`` in type objects and an API for performing a given "
"rich comparison.  I won't cover the C API here, but will refer you to :pep:"
"`207`, or to 2.1's C API documentation, for the full list of related "
"functions."
msgstr ""
"Det finns också motsvarande förändringar av intresse för C-programmerare; "
"det finns en ny plats ``tp_richcmp`` i typobjekt och ett API för att utföra "
"en given rik jämförelse.  Jag kommer inte att täcka C API här, men hänvisar "
"dig till :pep:`207`, eller till 2.1:s C API-dokumentation, för den "
"fullständiga listan över relaterade funktioner."

msgid ":pep:`207` - Rich Comparisons"
msgstr ":pep:`207` - Jämförelser av rikedomar"

msgid ""
"Written by Guido van Rossum, heavily based on earlier work by David Ascher, "
"and implemented by Guido van Rossum."
msgstr ""
"Skrivet av Guido van Rossum, starkt baserat på tidigare arbete av David "
"Ascher, och implementerat av Guido van Rossum."

msgid "PEP 230: Warning Framework"
msgstr "PEP 230: Ramverk för varning"

msgid ""
"Over its 10 years of existence, Python has accumulated a certain number of "
"obsolete modules and features along the way.  It's difficult to know when a "
"feature is safe to remove, since there's no way of knowing how much code "
"uses it --- perhaps no programs depend on the feature, or perhaps many do.  "
"To enable removing old features in a more structured way, a warning "
"framework was added. When the Python developers want to get rid of a "
"feature, it will first trigger a warning in the next version of Python.  The "
"following Python version can then drop the feature, and users will have had "
"a full release cycle to remove uses of the old feature."
msgstr ""
"Under sina 10 år har Python samlat på sig ett visst antal föråldrade moduler "
"och funktioner längs vägen.  Det är svårt att veta när en funktion är säker "
"att ta bort, eftersom det inte finns något sätt att veta hur mycket kod som "
"använder den --- kanske inga program är beroende av funktionen, eller kanske "
"många gör det.  För att göra det möjligt att ta bort gamla funktioner på ett "
"mer strukturerat sätt lades ett varningsramverk till. När Python-utvecklarna "
"vill bli av med en funktion utlöses först en varning i nästa version av "
"Python.  Den följande Python-versionen kan sedan ta bort funktionen, och "
"användarna har haft en hel versionscykel på sig att ta bort användningen av "
"den gamla funktionen."

msgid ""
"Python 2.1 adds the warning framework to be used in this scheme.  It adds a :"
"mod:`warnings` module that provide functions to issue warnings, and to "
"filter out warnings that you don't want to be displayed. Third-party modules "
"can also use this framework to deprecate old features that they no longer "
"wish to support."
msgstr ""
"Python 2.1 lägger till ett ramverk för varningar som kan användas i detta "
"system.  Det lägger till en :mod:`warnings`-modul som tillhandahåller "
"funktioner för att utfärda varningar och för att filtrera bort varningar som "
"du inte vill ska visas. Tredjepartsmoduler kan också använda det här "
"ramverket för att avskriva gamla funktioner som de inte längre vill stödja."

msgid ""
"For example, in Python 2.1 the :mod:`!regex` module is deprecated, so "
"importing it causes a warning to be printed::"
msgstr ""
"Till exempel, i Python 2.1 är modulen :mod:`!regex` föråldrad, så import av "
"den orsakar en varning som skrivs ut::"

msgid ""
">>> import regex\n"
"__main__:1: DeprecationWarning: the regex module\n"
"         is deprecated; please use the re module\n"
">>>"
msgstr ""
">>> import regex\n"
"__main__:1: DeprecationWarning: regex-modulen\n"
"         är föråldrad; använd re-modulen\n"
">>>"

msgid "Warnings can be issued by calling the :func:`warnings.warn` function::"
msgstr ""
"Varningar kan utfärdas genom att anropa funktionen :func:`warnings.warn`::"

msgid "warnings.warn(\"feature X no longer supported\")"
msgstr "warnings.warn(\"funktion X stöds inte längre\")"

msgid ""
"The first parameter is the warning message; an additional optional "
"parameters can be used to specify a particular warning category."
msgstr ""
"Den första parametern är varningsmeddelandet; ytterligare valfria parametrar "
"kan användas för att ange en viss varningskategori."

msgid ""
"Filters can be added to disable certain warnings; a regular expression "
"pattern can be applied to the message or to the module name in order to "
"suppress a warning.  For example, you may have a program that uses the :mod:"
"`!regex` module and not want to spare the time to convert it to use the :mod:"
"`re` module right now.  The warning can be suppressed by calling ::"
msgstr ""
"Filter kan läggas till för att inaktivera vissa varningar; ett reguljärt "
"uttrycksmönster kan tillämpas på meddelandet eller på modulnamnet för att "
"undertrycka en varning.  Du kanske till exempel har ett program som använder "
"modulen :mod:`!regex` och inte vill ta dig tid att konvertera det till att "
"använda modulen :mod:`re` just nu.  Varningen kan undertryckas genom att "
"anropa ::"

msgid ""
"import warnings\n"
"warnings.filterwarnings(action = 'ignore',\n"
"                        message='.*regex module is deprecated',\n"
"                        category=DeprecationWarning,\n"
"                        module = '__main__')"
msgstr ""
"import varningar\n"
"warnings.filterwarnings(åtgärd = 'ignorera',\n"
"                        message='.*regex-modulen är föråldrad',\n"
"                        kategori=DeprecationWarning,\n"
"                        modul = '__main__')"

msgid ""
"This adds a filter that will apply only to warnings of the class :class:"
"`DeprecationWarning` triggered in the :mod:`__main__` module, and applies a "
"regular expression to only match the message about the :mod:`!regex` module "
"being deprecated, and will cause such warnings to be ignored.  Warnings can "
"also be printed only once, printed every time the offending code is "
"executed, or turned into exceptions that will cause the program to stop "
"(unless the exceptions are caught in the usual way, of course)."
msgstr ""
"Detta lägger till ett filter som endast gäller för varningar av klassen :"
"class:`DeprecationWarning` som utlöses i modulen :mod:`__main__`, och "
"tillämpar ett reguljärt uttryck som endast matchar meddelandet om att "
"modulen :mod:`!regex` är föråldrad, och gör att sådana varningar ignoreras.  "
"Varningar kan också skrivas ut endast en gång, skrivas ut varje gång den "
"felaktiga koden exekveras eller omvandlas till undantag som gör att "
"programmet stoppas (om inte undantagen fångas på vanligt sätt, förstås)."

msgid ""
"Functions were also added to Python's C API for issuing warnings; refer to "
"PEP 230 or to Python's API documentation for the details."
msgstr ""
"Funktioner har också lagts till i Pythons C API för att utfärda varningar; "
"se PEP 230 eller Pythons API-dokumentation för mer information."

msgid ":pep:`5` - Guidelines for Language Evolution"
msgstr ":pep:`5` - Riktlinjer för språkutveckling"

msgid ""
"Written by Paul Prescod, to specify procedures to be followed when removing "
"old features from Python.  The policy described in this PEP hasn't been "
"officially adopted, but the eventual policy probably won't be too different "
"from Prescod's proposal."
msgstr ""
"Skriven av Paul Prescod, för att specificera procedurer som ska följas när "
"man tar bort gamla funktioner från Python.  Policyn som beskrivs i denna PEP "
"har inte officiellt antagits, men den slutliga policyn kommer förmodligen "
"inte att skilja sig alltför mycket från Prescods förslag."

msgid ":pep:`230` - Warning Framework"
msgstr ":pep:`230` - Varning för ramverk"

msgid "Written and implemented by Guido van Rossum."
msgstr "Skriven och implementerad av Guido van Rossum."

msgid "PEP 229: New Build System"
msgstr "PEP 229: Nybyggt system"

msgid ""
"When compiling Python, the user had to go in and edit the :file:`Modules/"
"Setup` file in order to enable various additional modules; the default set "
"is relatively small and limited to modules that compile on most Unix "
"platforms. This means that on Unix platforms with many more features, most "
"notably Linux, Python installations often don't contain all useful modules "
"they could."
msgstr ""
"När Python kompilerades var användaren tvungen att gå in och redigera filen :"
"file:`Modules/Setup` för att aktivera olika tilläggsmoduler; "
"standarduppsättningen är relativt liten och begränsad till moduler som "
"kompileras på de flesta Unix-plattformar. Detta innebär att på Unix-"
"plattformar med många fler funktioner, framför allt Linux, innehåller Python-"
"installationer ofta inte alla användbara moduler som de skulle kunna "
"innehålla."

msgid ""
"Python 2.0 added the Distutils, a set of modules for distributing and "
"installing extensions.  In Python 2.1, the Distutils are used to compile "
"much of the standard library of extension modules, autodetecting which ones "
"are supported on the current machine.  It's hoped that this will make Python "
"installations easier and more featureful."
msgstr ""
"I Python 2.0 tillkom Distutils, en uppsättning moduler för distribution och "
"installation av tillägg.  I Python 2.1 används Distutils för att kompilera "
"en stor del av standardbiblioteket med tilläggsmoduler och automatiskt "
"upptäcka vilka som stöds på den aktuella maskinen.  Förhoppningen är att "
"detta ska göra Python-installationer enklare och mer funktionsrika."

msgid ""
"Instead of having to edit the :file:`Modules/Setup` file in order to enable "
"modules, a :file:`setup.py` script in the top directory of the Python source "
"distribution is run at build time, and attempts to discover which modules "
"can be enabled by examining the modules and header files on the system.  If "
"a module is configured in :file:`Modules/Setup`, the :file:`setup.py` script "
"won't attempt to compile that module and will defer to the :file:`Modules/"
"Setup` file's contents.  This provides a way to specific any strange command-"
"line flags or libraries that are required for a specific platform."
msgstr ""
"Istället för att behöva redigera filen :file:`Modules/Setup` för att "
"aktivera moduler, körs skriptet :file:`setup.py` i den översta katalogen i "
"Python-källdistributionen vid byggtiden och försöker upptäcka vilka moduler "
"som kan aktiveras genom att undersöka modulerna och header-filerna på "
"systemet.  Om en modul är konfigurerad i :file:`Modules/Setup`, kommer "
"skriptet :file:`setup.py` inte att försöka kompilera den modulen utan kommer "
"att hänvisa till innehållet i :file:`Modules/Setup`.  Detta ger ett sätt att "
"specificera eventuella konstiga kommandoradsflaggor eller bibliotek som "
"krävs för en viss plattform."

msgid ""
"In another far-reaching change to the build mechanism, Neil Schemenauer "
"restructured things so Python now uses a single makefile that isn't "
"recursive, instead of makefiles in the top directory and in each of the :"
"file:`Python/`, :file:`Parser/`, :file:`Objects/`, and :file:`Modules/` "
"subdirectories.  This makes building Python faster and also makes hacking "
"the Makefiles clearer and simpler."
msgstr ""
"I en annan långtgående förändring av byggmekanismen har Neil Schemenauer "
"omstrukturerat saker så att Python nu använder en enda makefile som inte är "
"rekursiv, istället för makefiles i toppkatalogen och i var och en av "
"underkatalogerna :file:`Python/`, :file:`Parser/`, :file:`Objects/` och :"
"file:`Modules/`.  Detta gör det snabbare att bygga Python och gör det också "
"tydligare och enklare att hacka Makefiles."

msgid ":pep:`229` - Using Distutils to Build Python"
msgstr ":pep:`229` - Använda Distutils för att bygga Python"

msgid "Written and implemented by A.M. Kuchling."
msgstr "Skriven och implementerad av A.M. Kuchling."

msgid "PEP 205: Weak References"
msgstr "PEP 205: Svaga referenser"

msgid ""
"Weak references, available through the :mod:`weakref` module, are a minor "
"but useful new data type in the Python programmer's toolbox."
msgstr ""
"Svaga referenser, som är tillgängliga via modulen :mod:`weakref`, är en "
"mindre men användbar ny datatyp i Python-programmerarens verktygslåda."

msgid ""
"Storing a reference to an object (say, in a dictionary or a list) has the "
"side effect of keeping that object alive forever.  There are a few specific "
"cases where this behaviour is undesirable, object caches being the most "
"common one, and another being circular references in data structures such as "
"trees."
msgstr ""
"Att lagra en referens till ett objekt (t.ex. i en ordbok eller en lista) har "
"som bieffekt att objektet hålls vid liv för alltid.  Det finns några "
"specifika fall där detta beteende inte är önskvärt, objektcacher är det "
"vanligaste, och ett annat är cirkulära referenser i datastrukturer som träd."

msgid ""
"For example, consider a memoizing function that caches the results of "
"another function ``f(x)`` by storing the function's argument and its result "
"in a dictionary::"
msgstr ""
"Tänk till exempel på en memoiseringsfunktion som cachelagrar resultaten av "
"en annan funktion ``f(x)`` genom att lagra funktionens argument och dess "
"resultat i en ordbok::"

msgid ""
"_cache = {}\n"
"def memoize(x):\n"
"    if _cache.has_key(x):\n"
"        return _cache[x]\n"
"\n"
"    retval = f(x)\n"
"\n"
"    # Cache the returned object\n"
"    _cache[x] = retval\n"
"\n"
"    return retval"
msgstr ""
"_cache = {}\n"
"def memoize(x):\n"
"    if _cache.has_key(x):\n"
"        return _cache[x]\n"
"\n"
"    retval = f(x)\n"
"\n"
"    # Cacha det returnerade objektet\n"
"    _cache[x] = retval\n"
"\n"
"    returnera retval"

msgid ""
"This version works for simple things such as integers, but it has a side "
"effect; the ``_cache`` dictionary holds a reference to the return values, so "
"they'll never be deallocated until the Python process exits and cleans up. "
"This isn't very noticeable for integers, but if :func:`!f` returns an "
"object, or a data structure that takes up a lot of memory, this can be a "
"problem."
msgstr ""
"Den här versionen fungerar för enkla saker som heltal, men den har en "
"bieffekt; ``_cache``-ordlistan innehåller en referens till returvärdena, så "
"de kommer aldrig att avallokeras förrän Python-processen avslutas och rensas "
"upp. Detta är inte särskilt märkbart för heltal, men om :func:`!f` "
"returnerar ett objekt, eller en datastruktur som tar upp mycket minne, kan "
"detta vara ett problem."

msgid ""
"Weak references provide a way to implement a cache that won't keep objects "
"alive beyond their time.  If an object is only accessible through weak "
"references, the object will be deallocated and the weak references will now "
"indicate that the object it referred to no longer exists.  A weak reference "
"to an object *obj* is created by calling ``wr = weakref.ref(obj)``.  The "
"object being referred to is returned by calling the weak reference as if it "
"were a function: ``wr()``.  It will return the referenced object, or "
"``None`` if the object no longer exists."
msgstr ""
"Svaga referenser är ett sätt att implementera en cache som inte håller "
"objekt vid liv längre än vad som är nödvändigt.  Om ett objekt endast är "
"tillgängligt via svaga referenser kommer objektet att avallokeras och de "
"svaga referenserna kommer nu att indikera att objektet som det hänvisade "
"till inte längre existerar.  En svag referens till ett objekt *obj* skapas "
"genom att anropa ``wr = weakref.ref(obj)``.  Objektet som refereras till "
"returneras genom att anropa den svaga referensen som om den vore en "
"funktion: ``wr()``.  Den returnerar det refererade objektet, eller ``None`` "
"om objektet inte längre existerar."

msgid ""
"This makes it possible to write a :func:`!memoize` function whose cache "
"doesn't keep objects alive, by storing weak references in the cache. ::"
msgstr ""
"Detta gör det möjligt att skriva en :func:`!memoize`-funktion vars cache "
"inte håller objekt vid liv, genom att lagra svaga referenser i "
"cacheminnet. ::"

msgid ""
"_cache = {}\n"
"def memoize(x):\n"
"    if _cache.has_key(x):\n"
"        obj = _cache[x]()\n"
"        # If weak reference object still exists,\n"
"        # return it\n"
"        if obj is not None: return obj\n"
"\n"
"    retval = f(x)\n"
"\n"
"    # Cache a weak reference\n"
"    _cache[x] = weakref.ref(retval)\n"
"\n"
"    return retval"
msgstr ""
"_cache = {}\n"
"def memoize(x):\n"
"    if _cache.has_key(x):\n"
"        obj = _cache[x]()\n"
"        # Om objektet med svag referens fortfarande existerar,\n"
"        # returnera det\n"
"        om obj inte är None: returnera obj\n"
"\n"
"    retval = f(x)\n"
"\n"
"    # Cache en svag referens\n"
"    _cache[x] = weakref.ref(retval)\n"
"\n"
"    returnera retval"

msgid ""
"The :mod:`weakref` module also allows creating proxy objects which behave "
"like weak references --- an object referenced only by proxy objects is "
"deallocated -- but instead of requiring an explicit call to retrieve the "
"object, the proxy transparently forwards all operations to the object as "
"long as the object still exists.  If the object is deallocated, attempting "
"to use a proxy will cause a :exc:`!weakref.ReferenceError` exception to be "
"raised. ::"
msgstr ""
"Modulen :mod:`weakref` gör det också möjligt att skapa proxyobjekt som beter "
"sig som svaga referenser --- ett objekt som endast refereras av proxyobjekt "
"avallokeras -- men istället för att kräva ett explicit anrop för att hämta "
"objektet, vidarebefordrar proxyn transparent alla operationer till objektet "
"så länge objektet fortfarande existerar.  Om objektet är deallokerat kommer "
"försök att använda en proxy att orsaka ett :exc:`!weakref.ReferenceError` "
"undantag. ::"

msgid ""
"proxy = weakref.proxy(obj)\n"
"proxy.attr   # Equivalent to obj.attr\n"
"proxy.meth() # Equivalent to obj.meth()\n"
"del obj\n"
"proxy.attr   # raises weakref.ReferenceError"
msgstr ""
"proxy = weakref.proxy(obj)\n"
"proxy.attr # Likvärdig med obj.attr\n"
"proxy.meth() # Motsvarar obj.meth()\n"
"del obj\n"
"proxy.attr # ger upphov till weakref.ReferenceError"

msgid ":pep:`205` - Weak References"
msgstr ":pep:`205` - Svaga referenser"

msgid "Written and implemented by Fred L. Drake, Jr."
msgstr "Skriven och implementerad av Fred L. Drake, Jr."

msgid "PEP 232: Function Attributes"
msgstr "PEP 232: Funktionsattribut"

msgid ""
"In Python 2.1, functions can now have arbitrary information attached to "
"them. People were often using docstrings to hold information about functions "
"and methods, because the :attr:`~function.__doc__` attribute was the only "
"way of attaching any information to a function.  For example, in the Zope "
"web application server, functions are marked as safe for public access by "
"having a docstring, and in John Aycock's SPARK parsing framework, docstrings "
"hold parts of the BNF grammar to be parsed.  This overloading is "
"unfortunate, since docstrings are really intended to hold a function's "
"documentation; for example, it means you can't properly document functions "
"intended for private use in Zope."
msgstr ""
"I Python 2.1 kan funktioner nu ha godtycklig information kopplad till sig. "
"Folk använde ofta docstrings för att hålla information om funktioner och "
"metoder, eftersom attributet :attr:`~function.__doc__` var det enda sättet "
"att bifoga någon information till en funktion.  I webbapplikationsservern "
"Zope markeras till exempel funktioner som säkra för allmän åtkomst genom att "
"ha en docstring, och i John Aycocks SPARK-ramverk för parsning innehåller "
"docstrings delar av BNF-grammatiken som ska parsas.  Denna överbelastning är "
"olycklig, eftersom docstrings egentligen är avsedda att innehålla en "
"funktions dokumentation; till exempel innebär det att du inte kan "
"dokumentera funktioner avsedda för privat användning i Zope på rätt sätt."

msgid ""
"Arbitrary attributes can now be set and retrieved on functions using the "
"regular Python syntax::"
msgstr ""
"Godtyckliga attribut kan nu ställas in och hämtas på funktioner med hjälp av "
"den vanliga Python-syntaxen::"

msgid ""
"def f(): pass\n"
"\n"
"f.publish = 1\n"
"f.secure = 1\n"
"f.grammar = \"A ::= B (C D)*\""
msgstr ""
"def f(): pass\n"
"\n"
"f.publish = 1\n"
"f.secure = 1\n"
"f.grammatik = \"A ::= B (C D)*\""

msgid ""
"The dictionary containing attributes can be accessed as the function's :attr:"
"`~function.__dict__`. Unlike the :attr:`~type.__dict__` attribute of class "
"instances, in functions you can actually assign a new dictionary to :attr:"
"`~function.__dict__`, though the new value is restricted to a regular Python "
"dictionary; you *can't* be tricky and set it to a :class:`!UserDict` "
"instance, or any other random object that behaves like a mapping."
msgstr ""
"Dictionariet som innehåller attribut kan nås som funktionens :attr:"
"`~function.__dict__`. Till skillnad från attributet :attr:`~type.__dict__` "
"för klassinstanser kan du i funktioner faktiskt tilldela en ny ordbok till :"
"attr:`~function.__dict__`, även om det nya värdet är begränsat till en "
"vanlig Python-ordbok; du *kan* inte vara listig och ställa in den på en :"
"class:`!UserDict`-instans, eller något annat slumpmässigt objekt som beter "
"sig som en mappning."

msgid ":pep:`232` - Function Attributes"
msgstr ":pep:`232` - Funktionsattribut"

msgid "Written and implemented by Barry Warsaw."
msgstr "Skriven och implementerad av Barry Warsaw."

msgid "PEP 235: Importing Modules on Case-Insensitive Platforms"
msgstr ""
"PEP 235: Importera moduler på plattformar som inte är skiftlägeskänsliga"

msgid ""
"Some operating systems have filesystems that are case-insensitive, MacOS and "
"Windows being the primary examples; on these systems, it's impossible to "
"distinguish the filenames ``FILE.PY`` and ``file.py``, even though they do "
"store the file's name  in its original case (they're case-preserving, too)."
msgstr ""
"Vissa operativsystem har filsystem som är skiftlägesokänsliga, MacOS och "
"Windows är de främsta exemplen; på dessa system är det omöjligt att skilja "
"på filnamnen ``FILE.PY`` och ``file.py``, även om de lagrar filnamnet i dess "
"ursprungliga skiftlägesform (de bevarar också skiftlägesformen)."

msgid ""
"In Python 2.1, the :keyword:`import` statement will work to simulate case-"
"sensitivity on case-insensitive platforms.  Python will now search for the "
"first case-sensitive match by default, raising an :exc:`ImportError` if no "
"such file is found, so ``import file`` will not import a module named ``FILE."
"PY``. Case-insensitive matching can be requested by setting the :envvar:"
"`PYTHONCASEOK` environment variable before starting the Python interpreter."
msgstr ""
"I Python 2.1 kommer :keyword:`import` att fungera för att simulera "
"skiftlägeskänslighet på plattformar som inte är skiftlägeskänsliga.  Python "
"kommer nu att söka efter den första skiftlägeskänsliga matchningen som "
"standard och ge upphov till ett :exc:`ImportError` om ingen sådan fil "
"hittas, så ``import file`` kommer inte att importera en modul med namnet "
"``FILE.PY``. Matchning utan skiftlägeskänslighet kan begäras genom att "
"ställa in miljövariabeln :envvar:`PYTHONCASEOK` innan Python-tolken startas."

msgid "PEP 217: Interactive Display Hook"
msgstr "PEP 217: Krok för interaktiv display"

msgid ""
"When using the Python interpreter interactively, the output of commands is "
"displayed using the built-in :func:`repr` function. In Python 2.1, the "
"variable :func:`sys.displayhook` can be set to a callable object which will "
"be called instead of :func:`repr`. For example, you can set it to a special "
"pretty-printing function::"
msgstr ""
"Vid interaktiv användning av Python-tolken visas kommandon med hjälp av den "
"inbyggda funktionen :func:`repr`. I Python 2.1 kan variabeln :func:`sys."
"displayhook` ställas in på ett anropsbart objekt som kommer att anropas "
"istället för :func:`repr`. Du kan till exempel ställa in den på en speciell "
"funktion för snygga utskrifter::"

msgid ""
">>> # Create a recursive data structure\n"
"... L = [1,2,3]\n"
">>> L.append(L)\n"
">>> L # Show Python's default output\n"
"[1, 2, 3, [...]]\n"
">>> # Use pprint.pprint() as the display function\n"
"... import sys, pprint\n"
">>> sys.displayhook = pprint.pprint\n"
">>> L\n"
"[1, 2, 3,  <Recursion on list with id=135143996>]\n"
">>>"
msgstr ""
">>> # Skapa en rekursiv datastruktur\n"
"... L = [1,2,3]\n"
">>> L.append(L)\n"
">>> L # Visa Pythons standardutdata\n"
"[1, 2, 3, [...]]\n"
">>> # Använd pprint.pprint() som visningsfunktion\n"
"... import sys, pprint\n"
">>> sys.displayhook = pprint.pprint\n"
">>> L\n"
"[1, 2, 3, <Recursion på lista med id=135143996>]\n"
">>>"

msgid ":pep:`217` - Display Hook for Interactive Use"
msgstr ":pep:`217` - Displaykrok för interaktiv användning"

msgid "Written and implemented by Moshe Zadka."
msgstr "Skrivet och implementerat av Moshe Zadka."

msgid "PEP 208: New Coercion Model"
msgstr "PEP 208: Ny modell för tvångsmedel"

msgid ""
"How numeric coercion is done at the C level was significantly modified.  "
"This will only affect the authors of C extensions to Python, allowing them "
"more flexibility in writing extension types that support numeric operations."
msgstr ""
"Hur numerisk coercion görs på C-nivå ändrades avsevärt.  Detta kommer endast "
"att påverka författarna av C-tillägg till Python, vilket ger dem mer "
"flexibilitet när det gäller att skriva tilläggstyper som stöder numeriska "
"operationer."

msgid ""
"Extension types can now set the type flag ``Py_TPFLAGS_CHECKTYPES`` in their "
"``PyTypeObject`` structure to indicate that they support the new coercion "
"model. In such extension types, the numeric slot functions can no longer "
"assume that they'll be passed two arguments of the same type; instead they "
"may be passed two arguments of differing types, and can then perform their "
"own internal coercion. If the slot function is passed a type it can't "
"handle, it can indicate the failure by returning a reference to the "
"``Py_NotImplemented`` singleton value. The numeric functions of the other "
"type will then be tried, and perhaps they can handle the operation; if the "
"other type also returns ``Py_NotImplemented``, then a :exc:`TypeError` will "
"be raised.  Numeric methods written in Python can also return "
"``Py_NotImplemented``, causing the interpreter to act as if the method did "
"not exist (perhaps raising a :exc:`TypeError`, perhaps trying another "
"object's numeric methods)."
msgstr ""
"Tilläggstyper kan nu ställa in typflaggan ``Py_TPFLAGS_CHECKTYPES`` i sin "
"``PyTypeObject``-struktur för att ange att de stöder den nya coercion-"
"modellen. I sådana tilläggstyper kan de numeriska slotfunktionerna inte "
"längre anta att de kommer att få två argument av samma typ; istället kan de "
"få två argument av olika typer och kan då utföra sin egen interna "
"kooperation. Om slot-funktionen får en typ som den inte kan hantera kan den "
"ange att den misslyckats genom att returnera en referens till singleton-"
"värdet ``Py_NotImplemented``. De numeriska funktionerna för den andra typen "
"kommer då att provas, och kanske kan de hantera operationen; om den andra "
"typen också returnerar ``Py_NotImplemented``, kommer ett :exc:`TypeError` "
"att uppstå.  Numeriska metoder skrivna i Python kan också returnera "
"``Py_NotImplemented``, vilket gör att tolken agerar som om metoden inte "
"existerade (kanske ger ett :exc:`TypeError`, kanske provar ett annat objekts "
"numeriska metoder)."

msgid ":pep:`208` - Reworking the Coercion Model"
msgstr ":pep:`208` - Omarbetning av tvångsmodellen"

msgid ""
"Written and implemented by Neil Schemenauer, heavily based upon earlier work "
"by Marc-André Lemburg.  Read this to understand the fine points of how "
"numeric operations will now be processed at the C level."
msgstr ""
"Skriven och implementerad av Neil Schemenauer, starkt baserad på tidigare "
"arbete av Marc-André Lemburg.  Läs detta för att förstå detaljerna i hur "
"numeriska operationer nu kommer att behandlas på C-nivå."

msgid "PEP 241: Metadata in Python Packages"
msgstr "PEP 241: Metadata i Python-paket"

msgid ""
"A common complaint from Python users is that there's no single catalog of "
"all the Python modules in existence.  T. Middleton's Vaults of Parnassus at "
"``www.vex.net/parnassus/`` (retired in February 2009, `available in the "
"Internet Archive Wayback Machine <https://web.archive.org/web/20090130140102/"
"http://www.vex.net/parnassus/>`_) was the largest catalog of Python modules, "
"but registering software at the Vaults is optional, and many people did not "
"bother."
msgstr ""
"Ett vanligt klagomål från Python-användare är att det inte finns någon enda "
"katalog över alla Python-moduler som finns.  T. Middletons Vaults of "
"Parnassus på ``www.vex.net/parnassus/`` (pensionerad i februari 2009, "
"`available in the Internet Archive Wayback Machine <https://web.archive.org/"
"web/20090130140102/http://www.vex.net/parnassus/>`_) var den största "
"katalogen över Python-moduler, men det är frivilligt att registrera "
"programvara på Vaults och många brydde sig inte om det."

msgid ""
"As a first small step toward fixing the problem, Python software packaged "
"using the Distutils :command:`sdist` command will include a file named :file:"
"`PKG-INFO` containing information about the package such as its name, "
"version, and author (metadata, in cataloguing terminology).  :pep:`241` "
"contains the full list of fields that can be present in the :file:`PKG-INFO` "
"file.  As people began to package their software using Python 2.1, more and "
"more packages will include metadata, making it possible to build automated "
"cataloguing systems and experiment with them.  With the result experience, "
"perhaps it'll be possible to design a really good catalog and then build "
"support for it into Python 2.2. For example, the Distutils :command:`sdist` "
"and :command:`bdist_\\*` commands could support an ``upload`` option that "
"would automatically upload your package to a catalog server."
msgstr ""
"Som ett första litet steg mot att lösa problemet kommer Python-programvara "
"som paketeras med Distutils :command:`sdist`-kommando att inkludera en fil "
"med namnet :file:`PKG-INFO` som innehåller information om paketet, till "
"exempel dess namn, version och författare (metadata, i "
"katalogiseringsterminologi). :pep:`241` innehåller den fullständiga listan "
"över fält som kan finnas i :file:`PKG-INFO`-filen.  När människor börjar "
"paketera sin programvara med Python 2.1 kommer fler och fler paket att "
"innehålla metadata, vilket gör det möjligt att bygga automatiserade "
"katalogiseringssystem och experimentera med dem.  Med erfarenhet av "
"resultatet kanske det blir möjligt att utforma en riktigt bra katalog och "
"sedan bygga in stöd för den i Python 2.2. Till exempel skulle Distutils :"
"command:`sdist` och :command:`bdist_\\*` kunna stödja ett ``upload``-"
"alternativ som automatiskt laddar upp ditt paket till en katalogserver."

msgid ""
"You can start creating packages containing :file:`PKG-INFO` even if you're "
"not using Python 2.1, since a new release of the Distutils will be made for "
"users of earlier Python versions.  Version 1.0.2 of the Distutils includes "
"the changes described in :pep:`241`, as well as various bugfixes and "
"enhancements.  It will be available from the Distutils SIG at https://www."
"python.org/community/sigs/current/distutils-sig/."
msgstr ""
"Du kan börja skapa paket som innehåller :file:`PKG-INFO` även om du inte "
"använder Python 2.1, eftersom en ny version av Distutils kommer att göras "
"för användare av tidigare Python-versioner.  Version 1.0.2 av Distutils "
"innehåller de ändringar som beskrivs i :pep:`241`, samt diverse buggfixar "
"och förbättringar.  Den kommer att finnas tillgänglig från Distutils SIG på "
"https://www.python.org/community/sigs/current/distutils-sig/."

msgid ":pep:`241` - Metadata for Python Software Packages"
msgstr ":pep:`241` - Metadata för Python-programvarupaket"

msgid ":pep:`243` - Module Repository Upload Mechanism"
msgstr ":pep:`243` - Uppladdningsmekanism för modulförvar"

msgid ""
"Written by Sean Reifschneider, this draft PEP describes a proposed mechanism "
"for uploading  Python packages to a central server."
msgstr ""
"Detta utkast till PEP är skrivet av Sean Reifschneider och beskriver en "
"föreslagen mekanism för att ladda upp Python-paket till en central server."

msgid "New and Improved Modules"
msgstr "Nya och förbättrade moduler"

msgid ""
"Ka-Ping Yee contributed two new modules: :mod:`!inspect.py`, a module for "
"getting information about live Python code, and :mod:`!pydoc.py`, a module "
"for interactively converting docstrings to HTML or text.  As a bonus, :file:"
"`Tools/scripts/pydoc`, which is now automatically installed, uses :mod:`!"
"pydoc.py` to display documentation given a Python module, package, or class "
"name.  For example, ``pydoc xml.dom`` displays the following::"
msgstr ""
"Ka-Ping Yee bidrog med två nya moduler: :mod:`!inspect.py`, en modul för att "
"få information om live Python-kod, och :mod:`!pydoc.py`, en modul för att "
"interaktivt konvertera dokumentationssträngar till HTML eller text.  Som en "
"bonus använder :file:`Tools/scripts/pydoc`, som nu installeras automatiskt, :"
"mod:`!pydoc.py` för att visa dokumentation med ett Python-modul-, paket- "
"eller klassnamn.  Till exempel, ``pydoc xml.dom`` visar följande::"

msgid ""
"Python Library Documentation: package xml.dom in xml\n"
"\n"
"NAME\n"
"    xml.dom - W3C Document Object Model implementation for Python.\n"
"\n"
"FILE\n"
"    /usr/local/lib/python2.1/xml/dom/__init__.pyc\n"
"\n"
"DESCRIPTION\n"
"    The Python mapping of the Document Object Model is documented in the\n"
"    Python Library Reference in the section on the xml.dom package.\n"
"\n"
"    This package contains the following modules:\n"
"      ..."
msgstr ""
"Python Library Documentation: paket xml.dom in xml\n"
"\n"
"NAMN\n"
"    xml.dom - Implementering av W3C:s dokumentobjektmodell för Python.\n"
"\n"
"FIL\n"
"    /usr/local/lib/python2.1/xml/dom/__init__.pyc\n"
"\n"
"BESKRIVNING\n"
"    Python-mappningen av Document Object Model finns dokumenterad i\n"
"    Python Library Reference i avsnittet om paketet xml.dom.\n"
"\n"
"    Detta paket innehåller följande moduler:\n"
"      ..."

msgid ""
":file:`pydoc` also includes a Tk-based interactive help browser.   :file:"
"`pydoc` quickly becomes addictive; try it out!"
msgstr ""
":file:`pydoc` innehåller också en Tk-baserad interaktiv hjälpbläddrare. :"
"file:`pydoc` blir snabbt beroendeframkallande; prova det!"

msgid ""
"Two different modules for unit testing were added to the standard library. "
"The :mod:`doctest` module, contributed by Tim Peters, provides a testing "
"framework based on running embedded examples in docstrings and comparing the "
"results against the expected output.  PyUnit, contributed by Steve Purcell, "
"is a unit testing framework inspired by JUnit, which was in turn an "
"adaptation of Kent Beck's Smalltalk testing framework.  See https://pyunit."
"sourceforge.net/ for more information about PyUnit."
msgstr ""
"Två olika moduler för enhetstestning har lagts till i standardbiblioteket. "
"Modulen :mod:`doctest`, som Tim Peters har bidragit med, tillhandahåller ett "
"testramverk som bygger på att köra inbäddade exempel i dokumentsträngar och "
"jämföra resultaten med den förväntade utdata.  PyUnit, som Steve Purcell har "
"bidragit med, är ett ramverk för enhetstestning som inspirerats av JUnit, "
"som i sin tur var en anpassning av Kent Becks testramverk för Smalltalk.  Se "
"https://pyunit.sourceforge.net/ för mer information om PyUnit."

msgid ""
"The :mod:`difflib` module contains a class, :class:`~difflib."
"SequenceMatcher`, which compares two sequences and computes the changes "
"required to transform one sequence into the other.  For example, this module "
"can be used to write a tool similar to the Unix :program:`diff` program, and "
"in fact the sample program :file:`Tools/scripts/ndiff.py` demonstrates how "
"to write such a script."
msgstr ""
"Modulen :mod:`difflib` innehåller en klass, :class:`~difflib."
"SequenceMatcher`, som jämför två sekvenser och beräknar de ändringar som "
"krävs för att omvandla den ena sekvensen till den andra.  Den här modulen "
"kan till exempel användas för att skriva ett verktyg som liknar Unix-"
"programmet :program:`diff`, och i själva verket visar exempelprogrammet :"
"file:`Tools/scripts/ndiff.py` hur man skriver ett sådant skript."

msgid ""
":mod:`curses.panel`, a wrapper for the panel library, part of ncurses and of "
"SYSV curses, was contributed by Thomas Gellekum.  The panel library provides "
"windows with the additional feature of depth. Windows can be moved higher or "
"lower in the depth ordering, and the panel library figures out where panels "
"overlap and which sections are visible."
msgstr ""
":mod:`curses.panel`, en omslagslösning för panelbiblioteket, en del av "
"ncurses och av SYSV curses, har skrivits av Thomas Gellekum.  "
"Panelbiblioteket ger fönster den extra egenskapen att de är djupa. Fönster "
"kan flyttas högre eller lägre i djupordningen, och panelbiblioteket räknar "
"ut var paneler överlappar varandra och vilka sektioner som är synliga."

msgid ""
"The PyXML package has gone through a few releases since Python 2.0, and "
"Python 2.1 includes an updated version of the :mod:`xml` package.  Some of "
"the noteworthy changes include support for Expat 1.2 and later versions, the "
"ability for Expat parsers to handle files in any encoding supported by "
"Python, and various bugfixes for SAX, DOM, and the :mod:`!minidom` module."
msgstr ""
"PyXML-paketet har gått igenom några utgåvor sedan Python 2.0, och Python 2.1 "
"innehåller en uppdaterad version av :mod:`xml`-paketet.  Några av de "
"anmärkningsvärda ändringarna inkluderar stöd för Expat 1.2 och senare "
"versioner, möjligheten för Expat-parser att hantera filer i alla kodningar "
"som stöds av Python och olika buggfixar för SAX, DOM och modulen :mod:`!"
"minidom`."

msgid ""
"Ping also contributed another hook for handling uncaught exceptions. :func:"
"`sys.excepthook` can be set to a callable object.  When an exception isn't "
"caught by any :keyword:`try`...\\ :keyword:`except` blocks, the exception "
"will be passed to :func:`sys.excepthook`, which can then do whatever it "
"likes.  At the Ninth Python Conference, Ping demonstrated an application for "
"this hook: printing an extended traceback that not only lists the stack "
"frames, but also lists the function arguments and the local variables for "
"each frame."
msgstr ""
"Ping bidrog också med en annan krok för att hantera undantag som inte "
"fångats upp. :func:`sys.excepthook` kan sättas till ett anropbart objekt.  "
"När ett undantag inte fångas upp av något :keyword:`try`...\\ :keyword:"
"`except` block, kommer undantaget att skickas till :func:`sys.excepthook`, "
"som sedan kan göra vad den vill.  På Ninth Python Conference demonstrerade "
"Ping en tillämpning av denna krok: att skriva ut en utökad traceback som "
"inte bara listar stackrutorna utan även funktionsargumenten och de lokala "
"variablerna för varje ruta."

msgid ""
"Various functions in the :mod:`time` module, such as :func:`~time.asctime` "
"and :func:`~time.localtime`, require a floating-point argument containing "
"the time in seconds since the epoch.  The most common use of these functions "
"is to work with the current time, so the floating-point argument has been "
"made optional; when a value isn't provided, the current time will be used.  "
"For example, log file entries usually need a string containing the current "
"time; in Python 2.1, ``time.asctime()`` can be used, instead of the "
"lengthier ``time.asctime(time.localtime(time.time()))`` that was previously "
"required."
msgstr ""
"Olika funktioner i modulen :mod:`time`, t.ex. :func:`~time.asctime` och :"
"func:`~time.localtime`, kräver ett argument i form av ett flyttal som "
"innehåller tiden i sekunder sedan epoken.  Den vanligaste användningen av "
"dessa funktioner är att arbeta med aktuell tid, så argumentet med flyttal "
"har gjorts valfritt; när ett värde inte anges kommer aktuell tid att "
"användas.  Till exempel behöver loggfilsposter vanligtvis en sträng som "
"innehåller aktuell tid; i Python 2.1 kan ``time.asctime()`` användas "
"istället för den längre ``time.asctime(time.localtime(time.time()))`` som "
"tidigare krävdes."

msgid "This change was proposed and implemented by Thomas Wouters."
msgstr "Denna ändring föreslogs och genomfördes av Thomas Wouters."

msgid ""
"The :mod:`ftplib` module now defaults to retrieving files in passive mode, "
"because passive mode is more likely to work from behind a firewall.  This "
"request came from the Debian bug tracking system, since other Debian "
"packages use :mod:`ftplib` to retrieve files and then don't work from behind "
"a firewall. It's deemed unlikely that this will cause problems for anyone, "
"because Netscape defaults to passive mode and few people complain, but if "
"passive mode is unsuitable for your application or network setup, call "
"``set_pasv(0)`` on FTP objects to disable passive mode."
msgstr ""
"Modulen :mod:`ftplib` har nu som standard att hämta filer i passivt läge, "
"eftersom det är mer sannolikt att passivt läge fungerar bakom en brandvägg.  "
"Denna begäran kom från Debians buggspårningssystem, eftersom andra Debian-"
"paket använder :mod:`ftplib` för att hämta filer och sedan inte fungerar "
"bakom en brandvägg. Det anses osannolikt att detta kommer att orsaka problem "
"för någon, eftersom Netscape använder passivt läge som standard och få "
"människor klagar, men om passivt läge inte passar för din applikation eller "
"nätverksinställning, anropa ``set_pasv(0)`` på FTP-objekt för att inaktivera "
"passivt läge."

msgid ""
"Support for raw socket access has been added to the :mod:`socket` module, "
"contributed by Grant Edwards."
msgstr ""
"Stöd för rå socket-åtkomst har lagts till i modulen :mod:`socket`, med "
"bidrag från Grant Edwards."

msgid ""
"The :mod:`pstats` module now contains a simple interactive statistics "
"browser for displaying timing profiles for Python programs, invoked when the "
"module is run as a script.  Contributed by  Eric S. Raymond."
msgstr ""
"Modulen :mod:`pstats` innehåller nu en enkel interaktiv statistikbläddrare "
"för visning av tidsprofiler för Python-program, som startas när modulen körs "
"som ett skript.  Bidrag från Eric S. Raymond."

msgid ""
"A new implementation-dependent function, ``sys._getframe([depth])``, has "
"been added to return a given frame object from the current call stack. :func:"
"`sys._getframe` returns the frame at the top of the call stack;  if the "
"optional integer argument *depth* is supplied, the function returns the "
"frame that is *depth* calls below the top of the stack.  For example, ``sys."
"_getframe(1)`` returns the caller's frame object."
msgstr ""
"En ny implementationsberoende funktion, ``sys._getframe([depth])``, har "
"lagts till för att returnera ett givet ramobjekt från den aktuella "
"anropsstacken. :func:`sys._getframe` returnerar ramen högst upp i "
"anropsstacken; om det valfria heltalsargumentet *depth* anges, returnerar "
"funktionen den ram som ligger *depth* anrop under toppen av stacken.  "
"Exempel: ``sys._getframe(1)`` returnerar anroparens ramobjekt."

msgid ""
"This function is only present in CPython, not in Jython or the .NET "
"implementation.  Use it for debugging, and resist the temptation to put it "
"into production code."
msgstr ""
"Den här funktionen finns bara i CPython, inte i Jython eller .NET-"
"implementeringen.  Använd den för felsökning och motstå frestelsen att lägga "
"in den i produktionskoden."

msgid "Other Changes and Fixes"
msgstr "Övriga ändringar och korrigeringar"

msgid ""
"There were relatively few smaller changes made in Python 2.1 due to the "
"shorter release cycle.  A search through the CVS change logs turns up 117 "
"patches applied, and 136 bugs fixed; both figures are likely to be "
"underestimates.  Some of the more notable changes are:"
msgstr ""
"Det gjordes relativt få mindre ändringar i Python 2.1 på grund av den "
"kortare utgivningscykeln.  En sökning genom CVS-ändringsloggarna visar 117 "
"tillämpade korrigeringar och 136 åtgärdade buggar; båda siffrorna är "
"sannolikt underskattningar.  Några av de mer anmärkningsvärda ändringarna är:"

msgid ""
"A specialized object allocator is now optionally available, that should be "
"faster than the system :c:func:`malloc` and have less memory overhead.  The "
"allocator uses C's :c:func:`!malloc` function to get large pools of memory, "
"and then fulfills smaller memory requests from these pools.  It can be "
"enabled by providing the :option:`!--with-pymalloc` option to the :program:"
"`configure` script; see :file:`Objects/obmalloc.c` for the implementation "
"details."
msgstr ""
"En specialiserad objektallokering är nu tillgänglig som tillval, som bör "
"vara snabbare än systemets :c:func:`malloc` och ha mindre minnesoverhead.  "
"Allokatorn använder C:s :c:func:`!malloc`-funktion för att hämta stora "
"minnespooler, och uppfyller sedan mindre minnesförfrågningar från dessa "
"pooler.  Den kan aktiveras genom att ange alternativet :option:`!--with-"
"pymalloc` till skriptet :program:`configure`; se :file:`Objects/obmalloc.c` "
"för implementeringsdetaljer."

msgid ""
"Authors of C extension modules should test their code with the object "
"allocator enabled, because some incorrect code may break, causing core dumps "
"at runtime. There are a bunch of memory allocation functions in Python's C "
"API that have previously been just aliases for the C library's :c:func:"
"`malloc` and :c:func:`free`, meaning that if you accidentally called "
"mismatched functions, the error wouldn't be noticeable.  When the object "
"allocator is enabled, these functions aren't aliases of :c:func:`!malloc` "
"and :c:func:`!free` any more, and calling the wrong function to free memory "
"will get you a core dump.  For example, if memory was allocated using :c:"
"macro:`PyMem_New`, it has to be freed using :c:func:`PyMem_Del`, not :c:func:"
"`!free`.  A few modules included with Python fell afoul of this and had to "
"be fixed; doubtless there are more third-party modules that will have the "
"same problem."
msgstr ""
"Författare av C-tilläggsmoduler bör testa sin kod med objektallokeringen "
"aktiverad, eftersom en del felaktig kod kan gå sönder och orsaka kärndumpar "
"vid körning. Det finns ett gäng minnesallokeringsfunktioner i Pythons C API "
"som tidigare bara har varit alias för C-bibliotekets :c:func:`malloc` och :c:"
"func:`free`, vilket innebär att om du av misstag anropade felaktiga "
"funktioner skulle felet inte märkas.  När objektallokeraren är aktiverad är "
"dessa funktioner inte längre alias för :c:func:`!malloc` och :c:func:`!"
"free`, och om du anropar fel funktion för att frigöra minne får du en "
"kärndump.  Till exempel, om minne allokerades med :c:macro:`PyMem_New`, "
"måste det frigöras med :c:func:`PyMem_Del`, inte :c:func:`!free`.  Några "
"moduler som ingår i Python drabbades av detta och måste åtgärdas; utan "
"tvekan finns det fler moduler från tredje part som kommer att ha samma "
"problem."

msgid "The object allocator was contributed by Vladimir Marangozov."
msgstr "Objektfördelaren har utvecklats av Vladimir Marangozov."

msgid ""
"The speed of line-oriented file I/O has been improved because people often "
"complain about its lack of speed, and because it's often been used as a "
"naïve benchmark.  The :meth:`readline` method of file objects has therefore "
"been rewritten to be much faster.  The exact amount of the speedup will vary "
"from platform to platform depending on how slow the C library's :c:func:`!"
"getc` was, but is around 66%, and potentially much faster on some particular "
"operating systems. Tim Peters did much of the benchmarking and coding for "
"this change, motivated by a discussion in comp.lang.python."
msgstr ""
"Hastigheten för linjeorienterad fil-I/O har förbättrats eftersom folk ofta "
"klagar på dess bristande hastighet och eftersom den ofta har använts som ett "
"naivt riktmärke.  Metoden :meth:`readline` för filobjekt har därför skrivits "
"om för att bli mycket snabbare.  Den exakta hastigheten varierar från "
"plattform till plattform beroende på hur långsam C-bibliotekets :c:func:`!"
"getc` var, men den ligger runt 66%, och potentiellt mycket snabbare på vissa "
"operativsystem. Tim Peters gjorde mycket av benchmarkingen och kodningen för "
"den här ändringen, motiverad av en diskussion i comp.lang.python."

msgid ""
"A new module and method for file objects was also added, contributed by Jeff "
"Epler. The new method, :meth:`!xreadlines`, is similar to the existing :func:"
"`!xrange` built-in.  :func:`!xreadlines` returns an opaque sequence object "
"that only supports being iterated over, reading a line on every iteration "
"but not reading the entire file into memory as the existing :meth:`!"
"readlines` method does. You'd use it like this::"
msgstr ""
"En ny modul och metod för filobjekt har också lagts till, med bidrag från "
"Jeff Epler. Den nya metoden, :meth:`!xreadlines`, liknar den befintliga "
"inbyggda :func:`!xrange`. :func:`!xreadlines` returnerar ett ogenomskinligt "
"sekvensobjekt som endast stöder iteration över, läser en rad vid varje "
"iteration men inte läser hela filen i minnet som den befintliga :meth:`!"
"readlines`-metoden gör. Du skulle använda den så här::"

msgid ""
"for line in sys.stdin.xreadlines():\n"
"    # ... do something for each line ...\n"
"    ..."
msgstr ""
"för rad i sys.stdin.xreadlines():\n"
"    # ... gör något för varje rad ...\n"
"    ..."

msgid ""
"For a fuller discussion of the line I/O changes, see the python-dev summary "
"for January 1--15, 2001 at https://mail.python.org/pipermail/python-dev/2001-"
"January/."
msgstr ""
"För en mer utförlig diskussion om ändringarna av linje-I/O, se python-dev-"
"sammandraget för 1--15 januari 2001 på https://mail.python.org/pipermail/"
"python-dev/2001-January/."

msgid ""
"A new method, :meth:`~dict.popitem`, was added to dictionaries to enable "
"destructively iterating through the contents of a dictionary; this can be "
"faster for large dictionaries because there's no need to construct a list "
"containing all the keys or values. ``D.popitem()`` removes a random ``(key, "
"value)`` pair from the dictionary ``D`` and returns it as a 2-tuple.  This "
"was implemented mostly by Tim Peters and Guido van Rossum, after a "
"suggestion and preliminary patch by Moshe Zadka."
msgstr ""
"En ny metod, :meth:`~dict.popitem`, lades till i dictionaries för att göra "
"det möjligt att destruktivt iterera genom innehållet i en dictionary; detta "
"kan vara snabbare för stora dictionaries eftersom det inte finns något behov "
"av att konstruera en lista som innehåller alla nycklar eller värden. ``D."
"popitem()`` tar bort ett slumpmässigt ``(nyckel, värde)``-par från ordboken "
"``D`` och returnerar det som en 2-tupel.  Detta implementerades "
"huvudsakligen av Tim Peters och Guido van Rossum, efter ett förslag och en "
"preliminär patch av Moshe Zadka."

msgid ""
"Modules can now control which names are imported when ``from module import "
"*`` is used, by defining an ``__all__`` attribute containing a list of names "
"that will be imported.  One common complaint is that if the module imports "
"other modules such as :mod:`sys` or :mod:`string`, ``from module import *`` "
"will add them to the importing module's namespace.  To fix this, simply list "
"the public names in ``__all__``::"
msgstr ""
"Moduler kan nu kontrollera vilka namn som importeras när ``from module "
"import *`` används, genom att definiera ett ``__all__``-attribut som "
"innehåller en lista med namn som ska importeras.  Ett vanligt klagomål är "
"att om modulen importerar andra moduler som :mod:`sys` eller :mod:`string`, "
"kommer ``from module import *`` att lägga till dem i den importerande "
"modulens namnrymd.  För att åtgärda detta listar du helt enkelt de "
"offentliga namnen i ``__all__``::"

msgid ""
"# List public names\n"
"__all__ = ['Database', 'open']"
msgstr ""
"# Lista offentliga namn\n"
"__all__ = ['Database', 'open']"

msgid ""
"A stricter version of this patch was first suggested and implemented by Ben "
"Wolfson, but after some python-dev discussion, a weaker final version was "
"checked in."
msgstr ""
"En strängare version av denna patch föreslogs och implementerades först av "
"Ben Wolfson, men efter en del diskussioner på Python-dev checkades en "
"svagare slutlig version in."

msgid ""
"Applying :func:`repr` to strings previously used octal escapes for non-"
"printable characters; for example, a newline was ``'\\012'``.  This was a "
"vestigial trace of Python's C ancestry, but today octal is of very little "
"practical use.  Ka-Ping Yee suggested using hex escapes instead of octal "
"ones, and using the ``\\n``, ``\\t``, ``\\r`` escapes for the appropriate "
"characters, and implemented this new formatting."
msgstr ""
"När :func:`repr` applicerades på strängar användes tidigare oktala escapes "
"för icke-tryckbara tecken; till exempel var en ny rad ``'\\012'``.  Detta "
"var en kvarleva från Pythons C-förfäder, men idag har oktal mycket liten "
"praktisk användning.  Ka-Ping Yee föreslog att man skulle använda hex-"
"escapes i stället för oktal-escapes och använda escapen ``\\n``, ``t``, "
"``r`` för lämpliga tecken, och implementerade denna nya formatering."

msgid ""
"Syntax errors detected at compile-time can now raise exceptions containing "
"the filename and line number of the error, a pleasant side effect of the "
"compiler reorganization done by Jeremy Hylton."
msgstr ""
"Syntaxfel som upptäcks vid kompilering kan nu ge upphov till undantag som "
"innehåller filnamnet och radnumret för felet, en trevlig bieffekt av den "
"omorganisation av kompilatorn som Jeremy Hylton har gjort."

msgid ""
"C extensions which import other modules have been changed to use :c:func:"
"`PyImport_ImportModule`, which means that they will use any import hooks "
"that have been installed.  This is also encouraged for third-party "
"extensions that need to import some other module from C code."
msgstr ""
"C-tillägg som importerar andra moduler har ändrats så att de använder :c:"
"func:`PyImport_ImportModule`, vilket innebär att de kommer att använda alla "
"importkrokar som har installerats.  Detta uppmuntras även för "
"tredjepartstillägg som behöver importera någon annan modul från C-kod."

msgid ""
"The size of the Unicode character database was shrunk by another 340K thanks "
"to Fredrik Lundh."
msgstr ""
"Storleken på Unicodes teckendatabas krympte med ytterligare 340K tack vare "
"Fredrik Lundh."

msgid ""
"Some new ports were contributed: MacOS X (by Steven Majewski), Cygwin (by "
"Jason Tishler); RISCOS (by Dietmar Schwertberger); Unixware 7  (by Billy G. "
"Allie)."
msgstr ""
"Några nya portar har bidragit: MacOS X (av Steven Majewski), Cygwin (av "
"Jason Tishler); RISCOS (av Dietmar Schwertberger); Unixware 7 (av Billy G. "
"Allie)."

msgid ""
"And there's the usual list of minor bugfixes, minor memory leaks, docstring "
"edits, and other tweaks, too lengthy to be worth itemizing; see the CVS logs "
"for the full details if you want them."
msgstr ""
"Dessutom finns den vanliga listan med mindre buggfixar, mindre minnesläckor, "
"redigeringar av dokumentsträngar och andra justeringar, som är för långa för "
"att vara värda att specificera; se CVS-loggarna för fullständiga detaljer om "
"du vill ha dem."

msgid "Acknowledgements"
msgstr "Tack till"

msgid ""
"The author would like to thank the following people for offering suggestions "
"on various drafts of this article: Graeme Cross, David Goodger, Jay Graves, "
"Michael Hudson, Marc-André Lemburg, Fredrik Lundh, Neil Schemenauer, Thomas "
"Wouters."
msgstr ""
"Författaren vill tacka följande personer för att ha kommit med förslag på "
"olika utkast till denna artikel: Graeme Cross, David Goodger, Jay Graves, "
"Michael Hudson, Marc-André Lemburg, Fredrik Lundh, Neil Schemenauer, Thomas "
"Wouters."
