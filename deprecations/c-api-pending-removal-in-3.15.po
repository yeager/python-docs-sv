# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 20:38+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Pending removal in Python 3.15"
msgstr "Väntar på borttagning i Python 3.15"

msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use :c:func:"
"`PyImport_ImportModule` instead."
msgstr ""
":c:func:`PyImport_ImportModuleNoBlock`: Använd :c:func:"
"`PyImport_ImportModule` istället."

msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use :c:"
"func:`PyWeakref_GetRef` instead. The `pythoncapi-compat project <https://"
"github.com/python/pythoncapi-compat/>`__ can be used to get :c:func:"
"`PyWeakref_GetRef` on Python 3.12 and older."
msgstr ""
":c:func:`PyWeakref_GetObject` och :c:func:`PyWeakref_GET_OBJECT`: Använd :c:"
"func:`PyWeakref_GetRef` istället. Projektet `pythoncapi-compat <https://"
"github.com/python/pythoncapi-compat/>`__ kan användas för att hämta :c:func:"
"`PyWeakref_GetRef` på Python 3.12 och äldre."

msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use :c:"
"type:`wchar_t` instead."
msgstr ""
":c:type:`Py_UNICODE` typ och :c:macro:`!Py_UNICODE_WIDE` makro: Använd :c:"
"type:`wchar_t` istället."

msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ""
":c:func:`!PyUnicode_AsDecodedObject`: Använd :c:func:`PyCodec_Decode` "
"istället."

msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`str`, such as :class:`bytes`."
msgstr ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Använd :c:func:`PyCodec_Decode` "
"istället; Observera att vissa codecs (t.ex. \"base64\") kan returnera en "
"annan typ än :class:`str`, t.ex. :class:`bytes`."

msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ""
":c:func:`!PyUnicode_AsEncodedObject`: Använd :c:func:`PyCodec_Encode` "
"istället."

msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`bytes`, such as :class:`str`."
msgstr ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Använd :c:func:`PyCodec_Encode` "
"istället; Observera att vissa codecs (t.ex. \"base64\") kan returnera en "
"annan typ än :class:`bytes`, t.ex. :class:`str`."

msgid "Python initialization functions, deprecated in Python 3.13:"
msgstr "Python-initialiseringsfunktioner, föråldrade i Python 3.13:"

msgid ""
":c:func:`Py_GetPath`: Use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) instead."
msgstr ""
":c:func:`Py_GetPath`: Använd :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) istället."

msgid ""
":c:func:`Py_GetPrefix`: Use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) if :ref:"
"`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetPrefix`: Använd :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) istället. Använd :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) om :ref:"
"`virtuella miljöer <venv-def>` behöver hanteras."

msgid ""
":c:func:`Py_GetExecPrefix`: Use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` (:data:`sys.exec_prefix`) if :"
"ref:`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetExecPrefix`: Använd :c:func:"
"`PyConfig_Get(\"base_exec_prefix\") <PyConfig_Get>` (:data:`sys."
"base_exec_prefix`) istället. Använd :c:func:`PyConfig_Get(\"exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.exec_prefix`) om :ref:`virtuella miljöer <venv-"
"def>` behöver hanteras."

msgid ""
":c:func:`Py_GetProgramFullPath`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramFullPath`: Använd :c:func:"
"`PyConfig_Get(\"executable\") <PyConfig_Get>` (:data:`sys.executable`) "
"istället."

msgid ""
":c:func:`Py_GetProgramName`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramName`: Använd :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) istället."

msgid ""
":c:func:`Py_GetPythonHome`: Use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` or the :envvar:`PYTHONHOME` environment variable instead."
msgstr ""
":c:func:`Py_GetPythonHome`: Använd :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` eller miljövariabeln :envvar:`PYTHONHOME` istället."

msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get :c:func:`PyConfig_Get` on Python 3.13 and older."
msgstr ""
"Projektet `pythoncapi-compat <https://github.com/python/pythoncapi-compat/"
">`__ kan användas för att få :c:func:`PyConfig_Get` på Python 3.13 och äldre."

msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr ""
"Funktioner för att konfigurera Pythons initialisering, föråldrad i Python "
"3.11:"

msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""
":c:func:`!PySys_SetArgvEx()`: Ställ in :c:member:`PyConfig.argv` istället."

msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""
":c:func:`!PySys_SetArgv()`: Ställ in :c:member:`PyConfig.argv` istället."

msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""
":c:func:`!Py_SetProgramName()`: Ställ in :c:member:`PyConfig.program_name` "
"istället."

msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ""
":c:func:`!Py_SetPythonHome()`: Ställ in :c:member:`PyConfig.home` istället."

msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and :data:`!"
"warnings.filters` instead."
msgstr ""
":c:func:`PySys_ResetWarnOptions`: Rensa :data:`sys.warnoptions` och :data:`!"
"warnings.filters` istället."

msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead."
msgstr ""
"API:t :c:func:`Py_InitializeFromConfig` bör användas med :c:type:`PyConfig` "
"istället."

msgid "Global configuration variables:"
msgstr "Variabler för global konfiguration:"

msgid ""
":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` or :c:func:"
"`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DebugFlag`: Använd :c:member:`PyConfig.parser_debug` eller :c:"
"func:`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` or :c:func:"
"`PyConfig_Get(\"verbose\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_VerboseFlag`: Använd :c:member:`PyConfig.verbose` eller :c:func:"
"`PyConfig_Get(\"verbose\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` or :c:func:"
"`PyConfig_Get(\"quiet\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_QuietFlag`: Använd :c:member:`PyConfig.quiet` eller :c:func:"
"`PyConfig_Get(\"quiet\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` or :c:func:"
"`PyConfig_Get(\"interactive\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InteractiveFlag`: Använd :c:member:`PyConfig.interactive` eller :"
"c:func:`PyConfig_Get(\"interactive\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` or :c:func:"
"`PyConfig_Get(\"inspect\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InspectFlag`: Använd :c:member:`PyConfig.inspect` eller :c:func:"
"`PyConfig_Get(\"inspect\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` or :c:"
"func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_OptimizeFlag`: Använd :c:member:`PyConfig.optimization_level` "
"eller :c:func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` or :c:func:"
"`PyConfig_Get(\"site_import\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoSiteFlag`: Använd :c:member:`PyConfig.site_import` eller :c:"
"func:`PyConfig_Get(\"site_import\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` or :c:"
"func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_BytesWarningFlag`: Använd :c:member:`PyConfig.bytes_warning` "
"eller :c:func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` or :c:"
"func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_FrozenFlag`: Använd :c:member:`PyConfig.pathconfig_warnings` "
"eller :c:func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` "
"istället."

msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"or :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`: Använd :c:member:`PyConfig."
"use_environment` eller :c:func:`PyConfig_Get(\"use_environment\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"or :c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: Använd :c:member:`PyConfig."
"write_bytecode` eller :c:func:`PyConfig_Get(\"write_bytecode\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use :c:member:`PyConfig."
"user_site_directory` or :c:func:`PyConfig_Get(\"user_site_directory\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: Använd :c:member:`PyConfig."
"user_site_directory` eller :c:func:`PyConfig_Get(\"user_site_directory\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` or :"
"c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: Använd :c:member:`PyConfig.buffered_stdio` "
"eller :c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` or :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_HashRandomizationFlag`: Använd :c:member:`PyConfig.use_hash_seed` "
"och :c:member:`PyConfig.hash_seed` eller :c:func:"
"`PyConfig_Get(\"hash_seed\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` or :c:func:"
"`PyConfig_Get(\"isolated\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IsolatedFlag`: Använd :c:member:`PyConfig.isolated` eller :c:func:"
"`PyConfig_Get(\"isolated\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` or :c:func:"
"`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Använd :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` eller :c:func:"
"`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use :c:member:`PyConfig."
"legacy_windows_stdio` or :c:func:`PyConfig_Get(\"legacy_windows_stdio\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: Använd :c:member:`PyConfig."
"legacy_windows_stdio` eller :c:func:`PyConfig_Get(\"legacy_windows_stdio\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`, :c:var:`!"
"Py_HasFileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` or :c:func:`PyConfig_Get(\"filesystem_encoding\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`, :c:var:`!"
"Py_HasFileSystemDefaultEncoding`: Använd :c:member:`PyConfig."
"filesystem_encoding` eller :c:func:`PyConfig_Get(\"filesystem_encoding\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use :c:member:`PyConfig."
"filesystem_errors` or :c:func:`PyConfig_Get(\"filesystem_errors\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Använd :c:member:`PyConfig."
"filesystem_errors` eller :c:func:`PyConfig_Get(\"filesystem_errors\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` or :c:func:"
"`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` instead. (see :c:func:"
"`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: Använd :c:member:`PyPreConfig.utf8_mode` eller :c:"
"func:`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` istället. (se :c:func:"
"`Py_PreInitialize`)"

msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` to set these options. Or :c:func:`PyConfig_Get` can be used to "
"get these options at runtime."
msgstr ""
"API:et :c:func:`Py_InitializeFromConfig` bör användas med :c:type:`PyConfig` "
"för att ställa in dessa alternativ. Eller så kan :c:func:`PyConfig_Get` "
"användas för att hämta dessa alternativ vid körning."
