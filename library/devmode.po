# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Python Development Mode"
msgstr "Python-utvecklingsläge"

msgid ""
"The Python Development Mode introduces additional runtime checks that are "
"too expensive to be enabled by default. It should not be more verbose than "
"the default if the code is correct; new warnings are only emitted when an "
"issue is detected."
msgstr ""
"Python Development Mode introducerar ytterligare körtidskontroller som är "
"för dyra för att aktiveras som standard. Det bör inte vara mer mångordigt än "
"standardvärdet om koden är korrekt; nya varningar utfärdas endast när ett "
"problem upptäcks."

msgid ""
"It can be enabled using the :option:`-X dev <-X>` command line option or by "
"setting the :envvar:`PYTHONDEVMODE` environment variable to ``1``."
msgstr ""
"Det kan aktiveras med kommandoradsalternativet :option:`-X dev <-X>` eller "
"genom att ställa in miljövariabeln :envvar:`PYTHONDEVMODE` till ``1``."

msgid "See also :ref:`Python debug build <debug-build>`."
msgstr "Se även :ref:`Python debug build <debug-build>`."

msgid "Effects of the Python Development Mode"
msgstr "Effekter av Pythons utvecklingsläge"

msgid ""
"Enabling the Python Development Mode is similar to the following command, "
"but with additional effects described below::"
msgstr ""
"Aktivering av Python Development Mode liknar följande kommando, men med "
"ytterligare effekter som beskrivs nedan::"

msgid ""
"PYTHONMALLOC=debug PYTHONASYNCIODEBUG=1 python -W default -X faulthandler"
msgstr ""
"PYTHONMALLOC=debug PYTHONASYNCIODEBUG=1 python -W default -X faulthandler"

msgid "Effects of the Python Development Mode:"
msgstr "Effekter av Pythons utvecklingsläge:"

msgid ""
"Add ``default`` :ref:`warning filter <describing-warning-filters>`. The "
"following warnings are shown:"
msgstr ""
"Lägg till ``default`` :ref:`warning filter <describing-warning-filters>`. "
"Följande varningar visas:"

msgid ":exc:`DeprecationWarning`"
msgstr ":exc:`DeprecationWarning`"

msgid ":exc:`ImportWarning`"
msgstr ":exc:`ImportWarning`"

msgid ":exc:`PendingDeprecationWarning`"
msgstr ":exc:`PendingDeprecationWarning`"

msgid ":exc:`ResourceWarning`"
msgstr ":exc:`ResourceWarning`"

msgid ""
"Normally, the above warnings are filtered by the default :ref:`warning "
"filters <describing-warning-filters>`."
msgstr ""
"Normalt filtreras ovanstående varningar med standard :ref:`warning filters "
"<describing-warning-filters>`."

msgid ""
"It behaves as if the :option:`-W default <-W>` command line option is used."
msgstr ""
"Det beter sig som om kommandoradsalternativet :option:`-W default <-W>` "
"används."

msgid ""
"Use the :option:`-W error <-W>` command line option or set the :envvar:"
"`PYTHONWARNINGS` environment variable to ``error`` to treat warnings as "
"errors."
msgstr ""
"Använd kommandoradsalternativet :option:`-W error <-W>` eller sätt "
"miljövariabeln :envvar:`PYTHONWARNINGS` till `error`` för att behandla "
"varningar som fel."

msgid "Install debug hooks on memory allocators to check for:"
msgstr "Installera felsökningskrokar på minnesallokatorer för att kontrollera:"

msgid "Buffer underflow"
msgstr "Underflöde i buffert"

msgid "Buffer overflow"
msgstr "Buffertöverfyllnad"

msgid "Memory allocator API violation"
msgstr "Överträdelse av API för minnesallokering"

msgid "Unsafe usage of the GIL"
msgstr "Osäker användning av GIL"

msgid "See the :c:func:`PyMem_SetupDebugHooks` C function."
msgstr "Se C-funktionen :c:func:`PyMem_SetupDebugHooks`."

msgid ""
"It behaves as if the :envvar:`PYTHONMALLOC` environment variable is set to "
"``debug``."
msgstr ""
"Det beter sig som om miljövariabeln :envvar:`PYTHONMALLOC` är inställd på "
"``debug``."

msgid ""
"To enable the Python Development Mode without installing debug hooks on "
"memory allocators, set the :envvar:`PYTHONMALLOC` environment variable to "
"``default``."
msgstr ""
"För att aktivera Python Development Mode utan att installera debug-krokar på "
"minnesallokatorer, ställ in miljövariabeln :envvar:`PYTHONMALLOC` till "
"``default``."

msgid ""
"Call :func:`faulthandler.enable` at Python startup to install handlers for "
"the :const:`~signal.SIGSEGV`, :const:`~signal.SIGFPE`, :const:`~signal."
"SIGABRT`, :const:`~signal.SIGBUS` and :const:`~signal.SIGILL` signals to "
"dump the Python traceback on a crash."
msgstr ""
"Anropa :func:`faulthandler.enable` vid Python-start för att installera "
"hanterare för signalerna :const:`~signal.SIGSEGV`, :const:`~signal.SIGFPE`, :"
"const:`~signal.SIGABRT`, :const:`~signal.SIGBUS` och :const:`~signal.SIGILL` "
"för att dumpa Python-traceback vid en krasch."

msgid ""
"It behaves as if the :option:`-X faulthandler <-X>` command line option is "
"used or if the :envvar:`PYTHONFAULTHANDLER` environment variable is set to "
"``1``."
msgstr ""
"Det beter sig som om kommandoradsalternativet :option:`-X faulthandler <-X>` "
"används eller om miljövariabeln :envvar:`PYTHONFAULTHANDLER` är satt till "
"``1``."

msgid ""
"Enable :ref:`asyncio debug mode <asyncio-debug-mode>`. For example, :mod:"
"`asyncio` checks for coroutines that were not awaited and logs them."
msgstr ""
"Aktivera :ref:`asyncio felsökningsläge <asyncio-debug-mode>`. Till exempel "
"kontrollerar :mod:`asyncio` om det finns coroutines som inte var väntade och "
"loggar dem."

msgid ""
"It behaves as if the :envvar:`PYTHONASYNCIODEBUG` environment variable is "
"set to ``1``."
msgstr ""
"Det beter sig som om miljövariabeln :envvar:`PYTHONASYNCIODEBUG` är inställd "
"på ``1``."

msgid ""
"Check the *encoding* and *errors* arguments for string encoding and decoding "
"operations. Examples: :func:`open`, :meth:`str.encode` and :meth:`bytes."
"decode`."
msgstr ""
"Kontrollera argumenten *encoding* och *errors* för strängkodnings- och "
"avkodningsoperationer. Exempel: :func:`open`, :meth:`str.encode` och :meth:"
"`bytes.decode`."

msgid ""
"By default, for best performance, the *errors* argument is only checked at "
"the first encoding/decoding error and the *encoding* argument is sometimes "
"ignored for empty strings."
msgstr ""
"Som standard, för bästa prestanda, kontrolleras *errors*-argumentet endast "
"vid det första kodnings-/avkodningsfelet och *encoding*-argumentet ignoreras "
"ibland för tomma strängar."

msgid "The :class:`io.IOBase` destructor logs ``close()`` exceptions."
msgstr "Destruktorn för :class:`io.IOBase` loggar ``close()`` undantag."

msgid ""
"Set the :attr:`~sys.flags.dev_mode` attribute of :data:`sys.flags` to "
"``True``."
msgstr ""
"Sätt attributet :attr:`~sys.flags.dev_mode` i :data:`sys.flags` till "
"``True``."

msgid ""
"The Python Development Mode does not enable the :mod:`tracemalloc` module by "
"default, because the overhead cost (to performance and memory) would be too "
"large. Enabling the :mod:`tracemalloc` module provides additional "
"information on the origin of some errors. For example, :exc:"
"`ResourceWarning` logs the traceback where the resource was allocated, and a "
"buffer overflow error logs the traceback where the memory block was "
"allocated."
msgstr ""
"I Pythons utvecklingsläge aktiveras inte modulen :mod:`tracemalloc` som "
"standard, eftersom kostnaden (för prestanda och minne) skulle bli för stor. "
"Om du aktiverar modulen :mod:`tracemalloc` får du ytterligare information om "
"ursprunget till vissa fel. Till exempel loggar :exc:`ResourceWarning` "
"spårningen där resursen allokerades, och ett buffer overflow-fel loggar "
"spårningen där minnesblocket allokerades."

msgid ""
"The Python Development Mode does not prevent the :option:`-O` command line "
"option from removing :keyword:`assert` statements nor from setting :const:"
"`__debug__` to ``False``."
msgstr ""
"Python Development Mode hindrar inte kommandoradsalternativet :option:`-O` "
"från att ta bort :keyword:`assert`-satser eller från att sätta :const:"
"`__debug__` till ``False``."

msgid ""
"The Python Development Mode can only be enabled at the Python startup. Its "
"value can be read from :data:`sys.flags.dev_mode <sys.flags>`."
msgstr ""
"Pythons utvecklingsläge kan endast aktiveras när Python startas. Dess värde "
"kan läsas från :data:`sys.flags.dev_mode <sys.flags>`."

msgid "The :class:`io.IOBase` destructor now logs ``close()`` exceptions."
msgstr "Destruktorn :class:`io.IOBase` loggar nu ``close()``-undantag."

msgid ""
"The *encoding* and *errors* arguments are now checked for string encoding "
"and decoding operations."
msgstr ""
"Argumenten *encoding* och *errors* kontrolleras nu för kodning och avkodning "
"av strängar."

msgid "ResourceWarning Example"
msgstr "Exempel på ResourceWarning"

msgid ""
"Example of a script counting the number of lines of the text file specified "
"in the command line::"
msgstr ""
"Exempel på ett skript som räknar antalet rader i den textfil som anges på "
"kommandoraden::"

msgid ""
"import sys\n"
"\n"
"def main():\n"
"    fp = open(sys.argv[1])\n"
"    nlines = len(fp.readlines())\n"
"    print(nlines)\n"
"    # The file is closed implicitly\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()"
msgstr ""
"import sys\n"
"\n"
"def main():\n"
"    fp = open(sys.argv[1])\n"
"    nlines = len(fp.readlines())\n"
"    print(nlines)\n"
"    # The file is closed implicitly\n"
"\n"
"if __name__ == \"__main__\":\n"
"    main()"

msgid ""
"The script does not close the file explicitly. By default, Python does not "
"emit any warning. Example using README.txt, which has 269 lines:"
msgstr ""
"Skriptet stänger inte filen explicit. Som standard ger Python inte ut någon "
"varning. I exemplet används README.txt, som har 269 rader:"

msgid ""
"$ python script.py README.txt\n"
"269"
msgstr ""
"$ python script.py README.txt\n"
"269"

msgid ""
"Enabling the Python Development Mode displays a :exc:`ResourceWarning` "
"warning:"
msgstr ""
"Om du aktiverar Python Development Mode visas en :exc:`ResourceWarning`-"
"varning:"

msgid ""
"$ python -X dev script.py README.txt\n"
"269\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper name='README."
"rst' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"ResourceWarning: Enable tracemalloc to get the object allocation traceback"
msgstr ""
"$ python -X dev script.py README.txt\n"
"269\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper name='README."
"rst' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"ResourceWarning: Enable tracemalloc to get the object allocation traceback"

msgid ""
"In addition, enabling :mod:`tracemalloc` shows the line where the file was "
"opened:"
msgstr ""
"Om du aktiverar :mod:`tracemalloc` visas dessutom den rad där filen öppnades:"

msgid ""
"$ python -X dev -X tracemalloc=5 script.py README.rst\n"
"269\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper name='README."
"rst' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"Object allocated at (most recent call last):\n"
"  File \"script.py\", lineno 10\n"
"    main()\n"
"  File \"script.py\", lineno 4\n"
"    fp = open(sys.argv[1])"
msgstr ""
"$ python -X dev -X tracemalloc=5 script.py README.rst\n"
"269\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper name='README."
"rst' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"Object allocated at (most recent call last):\n"
"  File \"script.py\", lineno 10\n"
"    main()\n"
"  File \"script.py\", lineno 4\n"
"    fp = open(sys.argv[1])"

msgid ""
"The fix is to close explicitly the file. Example using a context manager::"
msgstr ""
"Lösningen är att stänga filen explicit. Exempel med hjälp av en "
"kontexthanterare::"

msgid ""
"def main():\n"
"    # Close the file explicitly when exiting the with block\n"
"    with open(sys.argv[1]) as fp:\n"
"        nlines = len(fp.readlines())\n"
"    print(nlines)"
msgstr ""
"def main():\n"
"    # Close the file explicitly when exiting the with block\n"
"    with open(sys.argv[1]) as fp:\n"
"        nlines = len(fp.readlines())\n"
"    print(nlines)"

msgid ""
"Not closing a resource explicitly can leave a resource open for way longer "
"than expected; it can cause severe issues upon exiting Python. It is bad in "
"CPython, but it is even worse in PyPy. Closing resources explicitly makes an "
"application more deterministic and more reliable."
msgstr ""
"Att inte stänga en resurs explicit kan lämna en resurs öppen mycket längre "
"än förväntat; det kan orsaka allvarliga problem när Python avslutas. Det är "
"illa i CPython, men det är ännu värre i PyPy. Att stänga resurser explicit "
"gör en applikation mer deterministisk och mer tillförlitlig."

msgid "Bad file descriptor error example"
msgstr "Exempel på fel i dålig filbeskrivare"

msgid "Script displaying the first line of itself::"
msgstr "Skriptet visar den första raden av sig själv::"

msgid ""
"import os\n"
"\n"
"def main():\n"
"    fp = open(__file__)\n"
"    firstline = fp.readline()\n"
"    print(firstline.rstrip())\n"
"    os.close(fp.fileno())\n"
"    # The file is closed implicitly\n"
"\n"
"main()"
msgstr ""
"import os\n"
"\n"
"def main():\n"
"    fp = open(__file__)\n"
"    firstline = fp.readline()\n"
"    print(firstline.rstrip())\n"
"    os.close(fp.fileno())\n"
"    # The file is closed implicitly\n"
"\n"
"main()"

msgid "By default, Python does not emit any warning:"
msgstr "Som standard ger Python inte ut någon varning:"

msgid ""
"$ python script.py\n"
"import os"
msgstr ""
"$ python script.py\n"
"import os"

msgid ""
"The Python Development Mode shows a :exc:`ResourceWarning` and logs a \"Bad "
"file descriptor\" error when finalizing the file object:"
msgstr ""
"Python Development Mode visar en :exc:`ResourceWarning` och loggar ett \"Bad "
"file descriptor\"-fel när filobjektet slutförs:"

msgid ""
"$ python -X dev script.py\n"
"import os\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper name='script."
"py' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"ResourceWarning: Enable tracemalloc to get the object allocation traceback\n"
"Exception ignored in: <_io.TextIOWrapper name='script.py' mode='r' "
"encoding='UTF-8'>\n"
"Traceback (most recent call last):\n"
"  File \"script.py\", line 10, in <module>\n"
"    main()\n"
"OSError: [Errno 9] Bad file descriptor"
msgstr ""
"$ python -X dev script.py\n"
"import os\n"
"script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper name='script."
"py' mode='r' encoding='UTF-8'>\n"
"  main()\n"
"ResourceWarning: Enable tracemalloc to get the object allocation traceback\n"
"Exception ignored in: <_io.TextIOWrapper name='script.py' mode='r' "
"encoding='UTF-8'>\n"
"Traceback (most recent call last):\n"
"  File \"script.py\", line 10, in <module>\n"
"    main()\n"
"OSError: [Errno 9] Bad file descriptor"

msgid ""
"``os.close(fp.fileno())`` closes the file descriptor. When the file object "
"finalizer tries to close the file descriptor again, it fails with the ``Bad "
"file descriptor`` error. A file descriptor must be closed only once. In the "
"worst case scenario, closing it twice can lead to a crash (see :issue:"
"`18748` for an example)."
msgstr ""
"```os.close(fp.fileno())`` stänger filbeskrivaren. När filobjektets "
"slutbehandlare försöker stänga filbeskrivaren igen misslyckas den med felet "
"``Bad file descriptor``. En file descriptor får bara stängas en gång. I "
"värsta fall kan det leda till en krasch om den stängs två gånger (se :issue:"
"`18748` för ett exempel)."

msgid ""
"The fix is to remove the ``os.close(fp.fileno())`` line, or open the file "
"with ``closefd=False``."
msgstr ""
"Lösningen är att ta bort raden ``os.close(fp.fileno())`` eller öppna filen "
"med ``closefd=False``."
