# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "DateTime Objects"
msgstr ""

msgid ""
"Various date and time objects are supplied by the :mod:`datetime` module. "
"Before using any of these functions, the header file :file:`datetime.h` must "
"be included in your source (note that this is not included by :file:`Python."
"h`), and the macro :c:macro:`!PyDateTime_IMPORT` must be invoked, usually as "
"part of the module initialisation function.  The macro puts a pointer to a C "
"structure into a static variable, :c:data:`!PyDateTimeAPI`, that is used by "
"the following macros."
msgstr ""

msgid "This subtype of :c:type:`PyObject` represents a Python date object."
msgstr ""

msgid "This subtype of :c:type:`PyObject` represents a Python datetime object."
msgstr ""

msgid "This subtype of :c:type:`PyObject` represents a Python time object."
msgstr ""

msgid ""
"This subtype of :c:type:`PyObject` represents the difference between two "
"datetime values."
msgstr ""

msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python date type; it "
"is the same object as :class:`datetime.date` in the Python layer."
msgstr ""

msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python datetime type; "
"it is the same object as :class:`datetime.datetime` in the Python layer."
msgstr ""

msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python time type; it "
"is the same object as :class:`datetime.time` in the Python layer."
msgstr ""

msgid ""
"This instance of :c:type:`PyTypeObject` represents Python type for the "
"difference between two datetime values; it is the same object as :class:"
"`datetime.timedelta` in the Python layer."
msgstr ""

msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python time zone info "
"type; it is the same object as :class:`datetime.tzinfo` in the Python layer."
msgstr ""

msgid "Macro for access to the UTC singleton:"
msgstr ""

msgid ""
"Returns the time zone singleton representing UTC, the same object as :attr:"
"`datetime.timezone.utc`."
msgstr ""

msgid "Type-check macros:"
msgstr ""

msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType` or a subtype "
"of :c:data:`!PyDateTime_DateType`.  *ob* must not be ``NULL``.  This "
"function always succeeds."
msgstr ""

msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateType`. *ob* must not "
"be ``NULL``.  This function always succeeds."
msgstr ""

msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType` or a "
"subtype of :c:data:`!PyDateTime_DateTimeType`.  *ob* must not be ``NULL``.  "
"This function always succeeds."
msgstr ""

msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DateTimeType`. *ob* must "
"not be ``NULL``.  This function always succeeds."
msgstr ""

msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType` or a subtype "
"of :c:data:`!PyDateTime_TimeType`.  *ob* must not be ``NULL``.  This "
"function always succeeds."
msgstr ""

msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TimeType`. *ob* must not "
"be ``NULL``.  This function always succeeds."
msgstr ""

msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType` or a subtype "
"of :c:data:`!PyDateTime_DeltaType`.  *ob* must not be ``NULL``.  This "
"function always succeeds."
msgstr ""

msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_DeltaType`. *ob* must not "
"be ``NULL``.  This function always succeeds."
msgstr ""

msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType` or a subtype "
"of :c:data:`!PyDateTime_TZInfoType`.  *ob* must not be ``NULL``.  This "
"function always succeeds."
msgstr ""

msgid ""
"Return true if *ob* is of type :c:data:`PyDateTime_TZInfoType`. *ob* must "
"not be ``NULL``.  This function always succeeds."
msgstr ""

msgid "Macros to create objects:"
msgstr ""

msgid ""
"Return a :class:`datetime.date` object with the specified year, month and "
"day."
msgstr ""

msgid ""
"Return a :class:`datetime.datetime` object with the specified year, month, "
"day, hour, minute, second and microsecond."
msgstr ""

msgid ""
"Return a :class:`datetime.datetime` object with the specified year, month, "
"day, hour, minute, second, microsecond and fold."
msgstr ""

msgid ""
"Return a :class:`datetime.time` object with the specified hour, minute, "
"second and microsecond."
msgstr ""

msgid ""
"Return a :class:`datetime.time` object with the specified hour, minute, "
"second, microsecond and fold."
msgstr ""

msgid ""
"Return a :class:`datetime.timedelta` object representing the given number of "
"days, seconds and microseconds.  Normalization is performed so that the "
"resulting number of microseconds and seconds lie in the ranges documented "
"for :class:`datetime.timedelta` objects."
msgstr ""

msgid ""
"Return a :class:`datetime.timezone` object with an unnamed fixed offset "
"represented by the *offset* argument."
msgstr ""

msgid ""
"Return a :class:`datetime.timezone` object with a fixed offset represented "
"by the *offset* argument and with tzname *name*."
msgstr ""

msgid ""
"Macros to extract fields from date objects.  The argument must be an "
"instance of :c:type:`PyDateTime_Date`, including subclasses (such as :c:type:"
"`PyDateTime_DateTime`).  The argument must not be ``NULL``, and the type is "
"not checked:"
msgstr ""

msgid "Return the year, as a positive int."
msgstr ""

msgid "Return the month, as an int from 1 through 12."
msgstr ""

msgid "Return the day, as an int from 1 through 31."
msgstr ""

msgid ""
"Macros to extract fields from datetime objects.  The argument must be an "
"instance of :c:type:`PyDateTime_DateTime`, including subclasses. The "
"argument must not be ``NULL``, and the type is not checked:"
msgstr ""

msgid "Return the hour, as an int from 0 through 23."
msgstr ""

msgid "Return the minute, as an int from 0 through 59."
msgstr ""

msgid "Return the second, as an int from 0 through 59."
msgstr ""

msgid "Return the microsecond, as an int from 0 through 999999."
msgstr ""

msgid "Return the fold, as an int from 0 through 1."
msgstr ""

msgid "Return the tzinfo (which may be ``None``)."
msgstr ""

msgid ""
"Macros to extract fields from time objects.  The argument must be an "
"instance of :c:type:`PyDateTime_Time`, including subclasses. The argument "
"must not be ``NULL``, and the type is not checked:"
msgstr ""

msgid ""
"Macros to extract fields from time delta objects.  The argument must be an "
"instance of :c:type:`PyDateTime_Delta`, including subclasses. The argument "
"must not be ``NULL``, and the type is not checked:"
msgstr ""

msgid "Return the number of days, as an int from -999999999 to 999999999."
msgstr ""

msgid "Return the number of seconds, as an int from 0 through 86399."
msgstr ""

msgid "Return the number of microseconds, as an int from 0 through 999999."
msgstr ""

msgid "Macros for the convenience of modules implementing the DB API:"
msgstr ""

msgid ""
"Create and return a new :class:`datetime.datetime` object given an argument "
"tuple suitable for passing to :meth:`datetime.datetime.fromtimestamp`."
msgstr ""

msgid ""
"Create and return a new :class:`datetime.date` object given an argument "
"tuple suitable for passing to :meth:`datetime.date.fromtimestamp`."
msgstr ""
