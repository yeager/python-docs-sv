# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!csv` --- CSV File Reading and Writing"
msgstr ":mod:`!csv` --- Läsning och skrivning av CSV-filer"

msgid "**Source code:** :source:`Lib/csv.py`"
msgstr "**Källkod:** :source:`Lib/csv.py`"

msgid ""
"The so-called CSV (Comma Separated Values) format is the most common import "
"and export format for spreadsheets and databases.  CSV format was used for "
"many years prior to attempts to describe the format in a standardized way "
"in :rfc:`4180`.  The lack of a well-defined standard means that subtle "
"differences often exist in the data produced and consumed by different "
"applications.  These differences can make it annoying to process CSV files "
"from multiple sources. Still, while the delimiters and quoting characters "
"vary, the overall format is similar enough that it is possible to write a "
"single module which can efficiently manipulate such data, hiding the details "
"of reading and writing the data from the programmer."
msgstr ""
"Det s.k. CSV-formatet (Comma Separated Values) är det vanligaste import- och "
"exportformatet för kalkylblad och databaser.  CSV-formatet användes under "
"många år innan försök gjordes att beskriva formatet på ett standardiserat "
"sätt i :rfc:`4180`.  Avsaknaden av en väldefinierad standard innebär att det "
"ofta finns subtila skillnader i de data som produceras och konsumeras av "
"olika applikationer.  Dessa skillnader kan göra det irriterande att bearbeta "
"CSV-filer från flera källor. Även om avgränsnings- och citattecknen varierar "
"är det övergripande formatet ändå tillräckligt likt för att det ska vara "
"möjligt att skriva en enda modul som effektivt kan manipulera sådana data "
"och dölja detaljerna kring läsning och skrivning av data för programmeraren."

msgid ""
"The :mod:`csv` module implements classes to read and write tabular data in "
"CSV format.  It allows programmers to say, \"write this data in the format "
"preferred by Excel,\" or \"read data from this file which was generated by "
"Excel,\" without knowing the precise details of the CSV format used by "
"Excel.  Programmers can also describe the CSV formats understood by other "
"applications or define their own special-purpose CSV formats."
msgstr ""
"Modulen :mod:`csv` implementerar klasser för att läsa och skriva tabelldata "
"i CSV-format.  Det gör det möjligt för programmerare att säga \"skriv dessa "
"data i det format som Excel föredrar\" eller \"läs data från den här filen "
"som genererades av Excel\" utan att känna till de exakta detaljerna i det "
"CSV-format som används av Excel.  Programmerare kan också beskriva de CSV-"
"format som förstås av andra applikationer eller definiera sina egna CSV-"
"format för speciella ändamål."

msgid ""
"The :mod:`csv` module's :class:`reader` and :class:`writer` objects read and "
"write sequences.  Programmers can also read and write data in dictionary "
"form using the :class:`DictReader` and :class:`DictWriter` classes."
msgstr ""
"Objekten :class:`reader` och :class:`writer` i modulen :mod:`csv` läser och "
"skriver sekvenser.  Programmerare kan också läsa och skriva data i "
"ordboksform med hjälp av klasserna :class:`DictReader` och :class:"
"`DictWriter`."

msgid ":pep:`305` - CSV File API"
msgstr ":pep:`305` - API för CSV-filer"

msgid "The Python Enhancement Proposal which proposed this addition to Python."
msgstr "Python Enhancement Proposal som föreslog detta tillägg till Python."

msgid "Module Contents"
msgstr "Modulens innehåll"

msgid "The :mod:`csv` module defines the following functions:"
msgstr "Modulen :mod:`csv` definierar följande funktioner:"

msgid ""
"Return a :ref:`reader object <reader-objects>` that will process lines from "
"the given *csvfile*.  A csvfile must be an iterable of strings, each in the "
"reader's defined csv format. A csvfile is most commonly a file-like object "
"or list. If *csvfile* is a file object, it should be opened with "
"``newline=''``. [1]_  An optional *dialect* parameter can be given which is "
"used to define a set of parameters specific to a particular CSV dialect.  It "
"may be an instance of a subclass of the :class:`Dialect` class or one of the "
"strings returned by the :func:`list_dialects` function.  The other optional "
"*fmtparams* keyword arguments can be given to override individual formatting "
"parameters in the current dialect.  For full details about the dialect and "
"formatting parameters, see section :ref:`csv-fmt-params`."
msgstr ""
"Returnerar ett :ref:``läsarobjekt <reader-objects>`` som bearbetar rader "
"från den angivna *csvfilen*.  En csvfile måste vara en iterabel av strängar, "
"var och en i läsarens definierade csv-format. En csvfile är oftast ett "
"filliknande objekt eller en lista. Om *csvfile* är ett filobjekt bör det "
"öppnas med ``newline=''``. [1]_ En valfri parameter *dialect* kan anges som "
"används för att definiera en uppsättning parametrar som är specifika för en "
"viss CSV-dialekt.  Den kan vara en instans av en underklass av klassen :"
"class:`Dialect` eller en av de strängar som returneras av funktionen :func:"
"`list_dialects`.  De andra valfria *fmtparams* nyckelordsargumenten kan ges "
"för att åsidosätta enskilda formateringsparametrar i den aktuella "
"dialekten.  För fullständig information om dialekt- och "
"formateringsparametrar, se avsnitt :ref:`csv-fmt-params`."

msgid ""
"Each row read from the csv file is returned as a list of strings.  No "
"automatic data type conversion is performed unless the :data:"
"`QUOTE_NONNUMERIC` format option is specified (in which case unquoted fields "
"are transformed into floats)."
msgstr ""
"Varje rad som läses från csv-filen returneras som en lista med strängar.  "
"Ingen automatisk datatypskonvertering utförs om inte formatalternativet :"
"data:`QUOTE_NONNUMERIC` anges (i så fall omvandlas fält som inte är citerade "
"till flyttal)."

msgid "A short usage example::"
msgstr "Ett kort exempel på användning::"

msgid ""
">>> import csv\n"
">>> with open('eggs.csv', newline='') as csvfile:\n"
"...     spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')\n"
"...     for row in spamreader:\n"
"...         print(', '.join(row))\n"
"Spam, Spam, Spam, Spam, Spam, Baked Beans\n"
"Spam, Lovely Spam, Wonderful Spam"
msgstr ""
">>> import csv\n"
">>> with open('eggs.csv', newline='') as csvfile:\n"
"... spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')\n"
"... for row in spamreader:\n"
"... print(', '.join(row))\n"
"Skräp, skräp, skräp, skräp, skräp, bakade bönor\n"
"Skräp, härlig skräp, underbar skräp"

msgid ""
"Return a writer object responsible for converting the user's data into "
"delimited strings on the given file-like object.  *csvfile* can be any "
"object with a :meth:`~io.TextIOBase.write` method.  If *csvfile* is a file "
"object, it should be opened with ``newline=''`` [1]_.  An optional *dialect* "
"parameter can be given which is used to define a set of parameters specific "
"to a particular CSV dialect.  It may be an instance of a subclass of the :"
"class:`Dialect` class or one of the strings returned by the :func:"
"`list_dialects` function.  The other optional *fmtparams* keyword arguments "
"can be given to override individual formatting parameters in the current "
"dialect.  For full details about dialects and formatting parameters, see "
"the :ref:`csv-fmt-params` section. To make it as easy as possible to "
"interface with modules which implement the DB API, the value :const:`None` "
"is written as the empty string.  While this isn't a reversible "
"transformation, it makes it easier to dump SQL NULL data values to CSV files "
"without preprocessing the data returned from a ``cursor.fetch*`` call. All "
"other non-string data are stringified with :func:`str` before being written."
msgstr ""
"Returnerar ett skrivarobjekt som ansvarar för att konvertera användarens "
"data till avgränsade strängar på det givna filliknande objektet.  *csvfile* "
"kan vara vilket objekt som helst med en :meth:`~io.TextIOBase.write`-metod.  "
"Om *csvfile* är ett filobjekt bör det öppnas med ``newline=''`` [1]_.  En "
"valfri parameter *dialect* kan anges som används för att definiera en "
"uppsättning parametrar som är specifika för en viss CSV-dialekt.  Den kan "
"vara en instans av en underklass till klassen :class:`Dialect` eller en av "
"de strängar som returneras av funktionen :func:`list_dialects`.  De andra "
"valfria *fmtparams* nyckelordsargumenten kan ges för att åsidosätta enskilda "
"formateringsparametrar i den aktuella dialekten.  För fullständig "
"information om dialekter och formateringsparametrar, se avsnittet :ref:`csv-"
"fmt-params`. För att göra det så enkelt som möjligt att interagera med "
"moduler som implementerar DB API, skrivs värdet :const:`None` som den tomma "
"strängen.  Även om detta inte är en reversibel transformation, gör det det "
"lättare att dumpa SQL NULL-datavärden till CSV-filer utan att förbehandla de "
"data som returneras från ett ``cursor.fetch*``-anrop. Alla andra data som "
"inte är strängar strängifieras med :func:`str` innan de skrivs."

msgid ""
"import csv\n"
"with open('eggs.csv', 'w', newline='') as csvfile:\n"
"    spamwriter = csv.writer(csvfile, delimiter=' ',\n"
"                            quotechar='|', quoting=csv.QUOTE_MINIMAL)\n"
"    spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])\n"
"    spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])"
msgstr ""
"import csv\n"
"with open('eggs.csv', 'w', newline='') as csvfile:\n"
"    spamwriter = csv.writer(csvfile, delimiter=' ',\n"
"                            quotechar='|', quoting=csv.QUOTE_MINIMAL)\n"
"    spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])\n"
"    spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])"

msgid ""
"Associate *dialect* with *name*.  *name* must be a string. The dialect can "
"be specified either by passing a sub-class of :class:`Dialect`, or by "
"*fmtparams* keyword arguments, or both, with keyword arguments overriding "
"parameters of the dialect. For full details about dialects and formatting "
"parameters, see section :ref:`csv-fmt-params`."
msgstr ""
"Associera *dialekt* med *namn*.  *name* måste vara en sträng. Dialekten kan "
"anges antingen genom att skicka en underklass till :class:`Dialect`, eller "
"genom *fmtparams* nyckelordsargument, eller båda, med nyckelordsargument som "
"åsidosätter parametrar för dialekten. För fullständig information om "
"dialekter och formateringsparametrar, se avsnitt :ref:`csv-fmt-params`."

msgid ""
"Delete the dialect associated with *name* from the dialect registry.  An :"
"exc:`Error` is raised if *name* is not a registered dialect name."
msgstr ""
"Ta bort den dialekt som associeras med *namn* från dialektregistret.  Ett :"
"exc:`Error` visas om *namn* inte är ett registrerat dialektnamn."

msgid ""
"Return the dialect associated with *name*.  An :exc:`Error` is raised if "
"*name* is not a registered dialect name.  This function returns an "
"immutable :class:`Dialect`."
msgstr ""
"Returnerar den dialekt som associeras med *namn*.  Ett :exc:`Error` visas om "
"*namn* inte är ett registrerat dialektnamn.  Denna funktion returnerar en "
"oföränderlig :class:`Dialect`."

msgid "Return the names of all registered dialects."
msgstr "Returnera namnen på alla registrerade dialekter."

msgid ""
"Returns the current maximum field size allowed by the parser. If *new_limit* "
"is given, this becomes the new limit."
msgstr ""
"Returnerar den aktuella maximala fältstorleken som tillåts av parsern. Om "
"*new_limit* anges blir detta den nya gränsen."

msgid "The :mod:`csv` module defines the following classes:"
msgstr "Modulen :mod:`csv` definierar följande klasser:"

msgid ""
"Create an object that operates like a regular reader but maps the "
"information in each row to a :class:`dict` whose keys are given by the "
"optional *fieldnames* parameter."
msgstr ""
"Skapa ett objekt som fungerar som en vanlig läsare men som mappar "
"informationen i varje rad till en :class:`dict` vars nycklar anges av den "
"valfria parametern *fieldnames*."

msgid ""
"The *fieldnames* parameter is a :term:`sequence`.  If *fieldnames* is "
"omitted, the values in the first row of file *f* will be used as the "
"fieldnames and will be omitted from the results. If *fieldnames* is "
"provided, they will be used and the first row will be included in the "
"results.  Regardless of how the fieldnames are determined, the dictionary "
"preserves their original ordering."
msgstr ""
"Parametern *fieldnames* är en :term:`sequence`.  Om *fieldnames* utelämnas "
"kommer värdena i den första raden i filen *f* att användas som fältnamn och "
"utelämnas från resultatet. Om *fieldnames* anges kommer de att användas och "
"den första raden kommer att inkluderas i resultatet.  Oavsett hur fältnamnen "
"bestäms behåller ordlistan deras ursprungliga ordning."

msgid ""
"If a row has more fields than fieldnames, the remaining data is put in a "
"list and stored with the fieldname specified by *restkey* (which defaults to "
"``None``).  If a non-blank row has fewer fields than fieldnames, the missing "
"values are filled-in with the value of *restval* (which defaults to "
"``None``)."
msgstr ""
"Om en rad har fler fält än fältnamn läggs de återstående uppgifterna i en "
"lista och lagras med det fältnamn som anges av *restkey* (som har ``None`` "
"som standard).  Om en rad som inte är blank har färre fält än fältnamn fylls "
"de saknade värdena i med värdet för *restval* (som har ``None`` som "
"standard)."

msgid ""
"All other optional or keyword arguments are passed to the underlying :class:"
"`reader` instance."
msgstr ""
"Alla andra valfria argument eller nyckelordsargument skickas till den "
"underliggande :class:`reader`-instansen."

msgid ""
"If the argument passed to *fieldnames* is an iterator, it will be coerced to "
"a :class:`list`."
msgstr ""
"Om argumentet som skickas till *fieldnames* är en iterator, kommer det att "
"tvingas till en :class:`list`."

msgid "Returned rows are now of type :class:`OrderedDict`."
msgstr "Returnerade rader är nu av typen :class:`OrderedDict`."

msgid "Returned rows are now of type :class:`dict`."
msgstr "Returnerade rader är nu av typen :class:`dict`."

msgid ""
">>> import csv\n"
">>> with open('names.csv', newline='') as csvfile:\n"
"...     reader = csv.DictReader(csvfile)\n"
"...     for row in reader:\n"
"...         print(row['first_name'], row['last_name'])\n"
"...\n"
"Eric Idle\n"
"John Cleese\n"
"\n"
">>> print(row)\n"
"{'first_name': 'John', 'last_name': 'Cleese'}"
msgstr ""
">>> import csv\n"
">>> with open('names.csv', newline='') as csvfile:\n"
"...     reader = csv.DictReader(csvfile)\n"
"...     for row in reader:\n"
"...         print(row['first_name'], row['last_name'])\n"
"...\n"
"Eric Idle\n"
"John Cleese\n"
"\n"
">>> print(row)\n"
"{'first_name': 'John', 'last_name': 'Cleese'}"

msgid ""
"Create an object which operates like a regular writer but maps dictionaries "
"onto output rows.  The *fieldnames* parameter is a :mod:`sequence "
"<collections.abc>` of keys that identify the order in which values in the "
"dictionary passed to the :meth:`~csvwriter.writerow` method are written to "
"file *f*.  The optional *restval* parameter specifies the value to be "
"written if the dictionary is missing a key in *fieldnames*.  If the "
"dictionary passed to the :meth:`~csvwriter.writerow` method contains a key "
"not found in *fieldnames*, the optional *extrasaction* parameter indicates "
"what action to take. If it is set to ``'raise'``, the default value, a :exc:"
"`ValueError` is raised. If it is set to ``'ignore'``, extra values in the "
"dictionary are ignored. Any other optional or keyword arguments are passed "
"to the underlying :class:`writer` instance."
msgstr ""
"Skapa ett objekt som fungerar som en vanlig skrivare men som mappar "
"ordlistor till utdatarader.  Parametern *fieldnames* är en :mod:`sequence "
"<collections.abc>` av nycklar som identifierar i vilken ordning värdena i "
"den ordbok som skickas till :meth:`~csvwriter.writerow`-metoden skrivs till "
"filen *f*.  Den valfria parametern *restval* anger det värde som ska skrivas "
"om ordlistan saknar en nyckel i *fieldnames*.  Om den ordbok som skickas "
"till :meth:`~csvwriter.writerow`-metoden innehåller en nyckel som inte finns "
"i *fieldnames*, anger den valfria parametern *extrasaction* vilken åtgärd "
"som ska vidtas. Om den är inställd på ``'raise'``, standardvärdet, skapas "
"ett :exc:`ValueError`. Om den är inställd på ``'ignore'`` ignoreras extra "
"värden i ordlistan. Alla andra valfria argument eller nyckelordsargument "
"skickas till den underliggande :class:`writer`-instansen."

msgid ""
"Note that unlike the :class:`DictReader` class, the *fieldnames* parameter "
"of the :class:`DictWriter` class is not optional."
msgstr ""
"Observera att till skillnad från klassen :class:`DictReader` är parametern "
"*fieldnames* i klassen :class:`DictWriter` inte valfri."

msgid ""
"import csv\n"
"\n"
"with open('names.csv', 'w', newline='') as csvfile:\n"
"    fieldnames = ['first_name', 'last_name']\n"
"    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n"
"\n"
"    writer.writeheader()\n"
"    writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})\n"
"    writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'})\n"
"    writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'})"
msgstr ""
"import csv\n"
"\n"
"with open('names.csv', 'w', newline='') as csvfile:\n"
"    fieldnames = ['first_name', 'last_name']\n"
"    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n"
"\n"
"    writer.writeheader()\n"
"    writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})\n"
"    writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'})\n"
"    writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'})"

msgid ""
"The :class:`Dialect` class is a container class whose attributes contain "
"information for how to handle doublequotes, whitespace, delimiters, etc. Due "
"to the lack of a strict CSV specification, different applications produce "
"subtly different CSV data.  :class:`Dialect` instances define how :class:"
"`reader` and :class:`writer` instances behave."
msgstr ""
"Klassen :class:`Dialect` är en containerklass vars attribut innehåller "
"information om hur man hanterar dubbla citattecken, blanksteg, avgränsare "
"etc. Eftersom det inte finns någon strikt CSV-specifikation producerar olika "
"applikationer subtilt olika CSV-data. :class:`Dialect`-instanser definierar "
"hur :class:`reader`- och :class:`writer`-instanser beter sig."

msgid ""
"All available :class:`Dialect` names are returned by :func:`list_dialects`, "
"and they can be registered with specific :class:`reader` and :class:`writer` "
"classes through their initializer (``__init__``) functions like this::"
msgstr ""
"Alla tillgängliga :class:`Dialect`-namn returneras av :func:`list_dialects`, "
"och de kan registreras med specifika :class:`reader`- och :class:`writer`-"
"klasser genom deras initialiseringsfunktioner (``__init__``) så här::"

msgid ""
"import csv\n"
"\n"
"with open('students.csv', 'w', newline='') as csvfile:\n"
"    writer = csv.writer(csvfile, dialect='unix')"
msgstr ""
"import csv\n"
"\n"
"with open('students.csv', 'w', newline='') as csvfile:\n"
"    writer = csv.writer(csvfile, dialect='unix')"

msgid ""
"The :class:`excel` class defines the usual properties of an Excel-generated "
"CSV file.  It is registered with the dialect name ``'excel'``."
msgstr ""
"Klassen :class:`excel` definierar de vanliga egenskaperna för en Excel-"
"genererad CSV-fil.  Den är registrerad med dialektnamnet ``'excel``."

msgid ""
"The :class:`excel_tab` class defines the usual properties of an Excel-"
"generated TAB-delimited file.  It is registered with the dialect name "
"``'excel-tab'``."
msgstr ""
"Klassen :class:`excel_tab` definierar de vanliga egenskaperna för en Excel-"
"genererad TAB-delimiterad fil.  Den är registrerad med dialektnamnet "
"``'excel-tab``."

msgid ""
"The :class:`unix_dialect` class defines the usual properties of a CSV file "
"generated on UNIX systems, i.e. using ``'\\n'`` as line terminator and "
"quoting all fields.  It is registered with the dialect name ``'unix'``."
msgstr ""
"Klassen :class:`unix_dialect` definierar de vanliga egenskaperna hos en CSV-"
"fil som genereras på UNIX-system, dvs. använder ``'\\n'`` som radavslutare "
"och citerar alla fält.  Den är registrerad med dialektnamnet ``'unix``."

msgid "The :class:`Sniffer` class is used to deduce the format of a CSV file."
msgstr ""
"Klassen :class:`Sniffer` används för att härleda formatet på en CSV-fil."

msgid "The :class:`Sniffer` class provides two methods:"
msgstr "Klassen :class:`Sniffer` innehåller två metoder:"

msgid ""
"Analyze the given *sample* and return a :class:`Dialect` subclass reflecting "
"the parameters found.  If the optional *delimiters* parameter is given, it "
"is interpreted as a string containing possible valid delimiter characters."
msgstr ""
"Analyserar det givna *provet* och returnerar en :class:`Dialect`-underklass "
"som återspeglar de parametrar som hittats.  Om den valfria parametern "
"*delimiters* anges tolkas den som en sträng som innehåller möjliga giltiga "
"avgränsningstecken."

msgid ""
"Analyze the sample text (presumed to be in CSV format) and return :const:"
"`True` if the first row appears to be a series of column headers. Inspecting "
"each column, one of two key criteria will be considered to estimate if the "
"sample contains a header:"
msgstr ""
"Analysera exempeltexten (som antas vara i CSV-format) och returnera :const:"
"`True` om den första raden verkar vara en serie kolumnrubriker. Genom att "
"inspektera varje kolumn kommer ett av två nyckelkriterier att beaktas för "
"att uppskatta om provet innehåller en rubrik:"

msgid "the second through n-th rows contain numeric values"
msgstr "den andra till n:te raden innehåller numeriska värden"

msgid ""
"the second through n-th rows contain strings where at least one value's "
"length differs from that of the putative header of that column."
msgstr ""
"de andra till n:te raderna innehåller strängar där minst ett värdes längd "
"skiljer sig från längden på den förmodade rubriken för den kolumnen."

msgid ""
"Twenty rows after the first row are sampled; if more than half of columns + "
"rows meet the criteria, :const:`True` is returned."
msgstr ""
"Tjugo rader efter den första raden samplas; om mer än hälften av kolumnerna "
"+ raderna uppfyller kriterierna returneras :const:`True`."

msgid ""
"This method is a rough heuristic and may produce both false positives and "
"negatives."
msgstr ""
"Denna metod är en grov heuristik och kan ge både falska positiva och "
"negativa resultat."

msgid "An example for :class:`Sniffer` use::"
msgstr "Ett exempel på :class:`Sniffer` användning::"

msgid ""
"with open('example.csv', newline='') as csvfile:\n"
"    dialect = csv.Sniffer().sniff(csvfile.read(1024))\n"
"    csvfile.seek(0)\n"
"    reader = csv.reader(csvfile, dialect)\n"
"    # ... process CSV file contents here ..."
msgstr ""
"with open('example.csv', newline='') as csvfile:\n"
"    dialect = csv.Sniffer().sniff(csvfile.read(1024))\n"
"    csvfile.seek(0)\n"
"    reader = csv.reader(csvfile, dialect)\n"
"    # ... process CSV file contents here ..."

msgid "The :mod:`csv` module defines the following constants:"
msgstr "Modulen :mod:`csv` definierar följande konstanter:"

msgid "Instructs :class:`writer` objects to quote all fields."
msgstr "Instruerar :class:`writer`-objekt att citera alla fält."

msgid ""
"Instructs :class:`writer` objects to only quote those fields which contain "
"special characters such as *delimiter*, *quotechar*, ``'\\r'``, ``'\\n'`` or "
"any of the characters in *lineterminator*."
msgstr ""
"Instruerar :class:`writer`-objekt att endast citera de fält som innehåller "
"specialtecken som *delimiter*, *quotechar*, ``'\\r'``, ``'\\n'`` eller något "
"av tecknen i *lineterminator*."

msgid "Instructs :class:`writer` objects to quote all non-numeric fields."
msgstr "Instruerar :class:`writer`-objekt att citera alla icke-numeriska fält."

msgid ""
"Instructs :class:`reader` objects to convert all non-quoted fields to type :"
"class:`float`."
msgstr ""
"Instruerar :class:`reader`-objekt att konvertera alla icke-citerade fält "
"till typen :class:`float`."

msgid ""
"Some numeric types, such as :class:`bool`, :class:`~fractions.Fraction`, or :"
"class:`~enum.IntEnum`, have a string representation that cannot be converted "
"to :class:`float`. They cannot be read in the :data:`QUOTE_NONNUMERIC` and :"
"data:`QUOTE_STRINGS` modes."
msgstr ""
"Vissa numeriska typer, t.ex. :class:`bool`, :class:`~fractions.Fraction` "
"eller :class:`~enum.IntEnum`, har en strängrepresentation som inte kan "
"konverteras till :class:`float`. De kan inte läsas i lägena :data:"
"`QUOTE_NONNUMERIC` och :data:`QUOTE_STRINGS`."

msgid ""
"Instructs :class:`writer` objects to never quote fields. When the current "
"*delimiter*, *quotechar*, *escapechar*, ``'\\r'``, ``'\\n'`` or any of the "
"characters in *lineterminator* occurs in output data it is preceded by the "
"current *escapechar* character. If *escapechar* is not set, the writer will "
"raise :exc:`Error` if any characters that require escaping are encountered. "
"Set *quotechar* to ``None`` to prevent its escaping."
msgstr ""
"Instruerar :class:`writer`-objekt att aldrig citera fält. När det aktuella "
"*delimiter*, *quotechar*, *escapechar*, ``'\\r'``, ``'\\n'`` eller något av "
"tecknen i *lineterminator* förekommer i utdata föregås det av det aktuella "
"*escapechar* tecknet. Om *escapechar* inte är inställt kommer skrivaren att "
"ge :exc:`Error` om några tecken som kräver escaping påträffas. Sätt "
"*quotechar* till ``None`` för att förhindra att det escapas."

msgid ""
"Instructs :class:`reader` objects to perform no special processing of quote "
"characters."
msgstr ""
"Instruerar :class:`reader`-objekt att inte utföra någon speciell behandling "
"av citattecken."

msgid ""
"Instructs :class:`writer` objects to quote all fields which are not "
"``None``.  This is similar to :data:`QUOTE_ALL`, except that if a field "
"value is ``None`` an empty (unquoted) string is written."
msgstr ""
"Instruerar :class:`writer`-objekt att citera alla fält som inte är "
"``None``.  Detta liknar :data:`QUOTE_ALL`, förutom att om ett fältvärde är "
"``None`` skrivs en tom (ej citerad) sträng."

msgid ""
"Instructs :class:`reader` objects to interpret an empty (unquoted) field as "
"``None`` and to otherwise behave as :data:`QUOTE_ALL`."
msgstr ""
"Instruerar :class:`reader`-objekt att tolka ett tomt (ej citerat) fält som "
"``None`` och att i övrigt bete sig som :data:`QUOTE_ALL`."

msgid ""
"Instructs :class:`writer` objects to always place quotes around fields which "
"are strings.  This is similar to :data:`QUOTE_NONNUMERIC`, except that if a "
"field value is ``None`` an empty (unquoted) string is written."
msgstr ""
"Instruerar :class:`writer`-objekt att alltid placera citattecken runt fält "
"som är strängar.  Detta liknar :data:`QUOTE_NONNUMERIC`, förutom att om ett "
"fältvärde är ``None`` skrivs en tom sträng (utan citationstecken)."

msgid ""
"Instructs :class:`reader` objects to interpret an empty (unquoted) string as "
"``None`` and to otherwise behave as :data:`QUOTE_NONNUMERIC`."
msgstr ""
"Instruerar :class:`reader`-objekt att tolka en tom (ej citerad) sträng som "
"``None`` och att i övrigt bete sig som :data:`QUOTE_NONNUMERIC`."

msgid "The :mod:`csv` module defines the following exception:"
msgstr "Modulen :mod:`csv` definierar följande undantag:"

msgid "Raised by any of the functions when an error is detected."
msgstr "Utlöses av någon av funktionerna när ett fel upptäcks."

msgid "Dialects and Formatting Parameters"
msgstr "Dialekter och formateringsparametrar"

msgid ""
"To make it easier to specify the format of input and output records, "
"specific formatting parameters are grouped together into dialects.  A "
"dialect is a subclass of the :class:`Dialect` class containing various "
"attributes describing the format of the CSV file.  When creating :class:"
"`reader` or :class:`writer` objects, the programmer can specify a string or "
"a subclass of the :class:`Dialect` class as the dialect parameter.  In "
"addition to, or instead of, the *dialect* parameter, the programmer can also "
"specify individual formatting parameters, which have the same names as the "
"attributes defined below for the :class:`Dialect` class."
msgstr ""
"För att göra det enklare att ange formatet för in- och utdataposter "
"grupperas specifika formateringsparametrar i dialekter.  En dialekt är en "
"underklass till klassen :class:`Dialect` som innehåller olika attribut som "
"beskriver CSV-filens format.  När programmeraren skapar :class:`reader`- "
"eller :class:`writer`-objekt kan han ange en sträng eller en underklass av "
"klassen :class:`Dialect` som dialektparameter.  Förutom, eller i stället "
"för, parametern *dialekt* kan programmeraren också ange individuella "
"formateringsparametrar, som har samma namn som de attribut som definieras "
"nedan för klassen :class:`Dialect`."

msgid "Dialects support the following attributes:"
msgstr "Dialekter stöder följande attribut:"

msgid ""
"A one-character string used to separate fields.  It defaults to ``','``."
msgstr ""
"En sträng med ett tecken som används för att separera fält.  Standardvärdet "
"är ``','``."

msgid ""
"Controls how instances of *quotechar* appearing inside a field should "
"themselves be quoted.  When :const:`True`, the character is doubled. When :"
"const:`False`, the *escapechar* is used as a prefix to the *quotechar*.  It "
"defaults to :const:`True`."
msgstr ""
"Styr hur förekomster av *quotechar* som visas inuti ett fält själva ska "
"citeras.  När :const:`True`, dubbleras tecknet. När :const:`False` används "
"*escapechar* som prefix till *quotechar*.  Standardvärdet är :const:`True`."

msgid ""
"On output, if *doublequote* is :const:`False` and no *escapechar* is set, :"
"exc:`Error` is raised if a *quotechar* is found in a field."
msgstr ""
"Om *doublequote* är :const:`False` och ingen *escapechar* har angetts, "
"kommer :exc:`Error` att visas om ett *quotechar* hittas i ett fält."

msgid ""
"A one-character string used by the writer to escape characters that require "
"escaping:"
msgstr ""
"En enteckenssträng som används av skribenten för att undkomma tecken som "
"behöver undkommas:"

msgid ""
"the *delimiter*, the *quotechar*, ``'\\r'``, ``'\\n'`` and any of the "
"characters in *lineterminator* are escaped if *quoting* is set to :const:"
"`QUOTE_NONE`;"
msgstr ""
"*delimiter*, *quotechar*, ``'\\r'``, ``'\\n'`` och alla tecken i "
"*lineterminator* undviks om *quoting* är satt till :const:`QUOTE_NONE`;"

msgid "the *quotechar* is escaped if *doublequote* is :const:`False`;"
msgstr "*quotechar* escapas om *doublequote* är :const:`False`;"

msgid "the *escapechar* itself."
msgstr "själva *escapechar*."

msgid ""
"On reading, the *escapechar* removes any special meaning from the following "
"character. It defaults to :const:`None`, which disables escaping."
msgstr ""
"Vid läsning tar *escapechar* bort all speciell betydelse från följande "
"tecken. Standardvärdet är :const:`None`, vilket inaktiverar escaping."

msgid "An empty *escapechar* is not allowed."
msgstr "En tom *escapechar* är inte tillåten."

msgid ""
"The string used to terminate lines produced by the :class:`writer`. It "
"defaults to ``'\\r\\n'``."
msgstr ""
"Den sträng som används för att avsluta rader som produceras av :class:"
"`writer`. Standardvärdet är ``'\\r\\n'``."

msgid ""
"The :class:`reader` is hard-coded to recognise either ``'\\r'`` or ``'\\n'`` "
"as end-of-line, and ignores *lineterminator*. This behavior may change in "
"the future."
msgstr ""
":class:`reader` är hårdkodad att känna igen antingen ``'\\r'`` eller "
"``'\\n'`` som radavslut, och ignorerar *lineterminator*. Detta beteende kan "
"komma att ändras i framtiden."

msgid ""
"A one-character string used to quote fields containing special characters, "
"such as the *delimiter* or the *quotechar*, or which contain new-line "
"characters (``'\\r'``, ``'\\n'`` or any of the characters in "
"*lineterminator*). It defaults to ``'\"'``. Can be set to ``None`` to "
"prevent escaping ``'\"'`` if *quoting* is set to :const:`QUOTE_NONE`."
msgstr ""
"En sträng med ett tecken som används för att citera fält som innehåller "
"specialtecken, t.ex. *delimiter* eller *quotechar*, eller som innehåller "
"tecken för ny rad (``'\\r'``, ``'\\n'`` eller något av tecknen i "
"*lineterminator*). Standardvärdet är ```\"'``. Kan sättas till ``None`` för "
"att förhindra escaping av ``'\"'`` om *quoting* är satt till :const:"
"`QUOTE_NONE`."

msgid "An empty *quotechar* is not allowed."
msgstr "En tom *quotechar* är inte tillåten."

msgid ""
"Controls when quotes should be generated by the writer and recognised by the "
"reader.  It can take on any of the :ref:`QUOTE_\\* constants <csv-"
"constants>` and defaults to :const:`QUOTE_MINIMAL` if *quotechar* is not "
"``None``, and :const:`QUOTE_NONE` otherwise."
msgstr ""
"Styr när citat ska genereras av skribenten och kännas igen av läsaren.  Den "
"kan ta någon av :ref:`QUOTE_\\*-konstanterna <csv-constants>` och "
"standardvärdet är :const:`QUOTE_MINIMAL` om *quotechar* inte är ``None``, "
"och :const:`QUOTE_NONE` annars."

msgid ""
"When :const:`True`, spaces immediately following the *delimiter* are "
"ignored. The default is :const:`False`."
msgstr ""
"När :const:`True` ignoreras mellanslag omedelbart efter *delimiter*. "
"Standardvärdet är :const:`False`."

msgid ""
"When ``True``, raise exception :exc:`Error` on bad CSV input. The default is "
"``False``."
msgstr ""
"När ``True``, skapa undantag :exc:`Error`` vid felaktig CSV-data. "
"Standardvärdet är ``False``."

msgid "Reader Objects"
msgstr "Läsobjekt"

msgid ""
"Reader objects (:class:`DictReader` instances and objects returned by the :"
"func:`reader` function) have the following public methods:"
msgstr ""
"Läsarobjekt (:class:`DictReader`-instanser och objekt som returneras av "
"funktionen :func:`reader`) har följande publika metoder:"

msgid ""
"Return the next row of the reader's iterable object as a list (if the object "
"was returned from :func:`reader`) or a dict (if it is a :class:`DictReader` "
"instance), parsed according to the current :class:`Dialect`.  Usually you "
"should call this as ``next(reader)``."
msgstr ""
"Returnerar nästa rad i läsarens iterabla objekt som en lista (om objektet "
"returnerades från :func:`reader`) eller en dict (om det är en :class:"
"`DictReader`-instans), tolkad enligt aktuell :class:`Dialect`.  Vanligtvis "
"bör du anropa detta som ``next(reader)``."

msgid "Reader objects have the following public attributes:"
msgstr "Läsarobjekt har följande publika attribut:"

msgid "A read-only description of the dialect in use by the parser."
msgstr "En skrivskyddad beskrivning av den dialekt som används av parsern."

msgid ""
"The number of lines read from the source iterator. This is not the same as "
"the number of records returned, as records can span multiple lines."
msgstr ""
"Antalet rader som lästs från källans iterator. Detta är inte samma sak som "
"antalet poster som returneras, eftersom poster kan sträcka sig över flera "
"rader."

msgid "DictReader objects have the following public attribute:"
msgstr "DictReader-objekt har följande publika attribut:"

msgid ""
"If not passed as a parameter when creating the object, this attribute is "
"initialized upon first access or when the first record is read from the file."
msgstr ""
"Om attributet inte skickas som en parameter när objektet skapas initieras "
"det vid första åtkomst eller när den första posten läses från filen."

msgid "Writer Objects"
msgstr "Writer-objekt"

msgid ""
":class:`writer` objects (:class:`DictWriter` instances and objects returned "
"by the :func:`writer` function) have the following public methods.  A *row* "
"must be an iterable of strings or numbers for :class:`writer` objects and a "
"dictionary mapping fieldnames to strings or numbers (by passing them "
"through :func:`str` first) for :class:`DictWriter` objects.  Note that "
"complex numbers are written out surrounded by parens. This may cause some "
"problems for other programs which read CSV files (assuming they support "
"complex numbers at all)."
msgstr ""
":class:`writer`-objekt (:class:`DictWriter`-instanser och objekt som "
"returneras av funktionen :func:`writer`) har följande publika metoder.  En "
"*row* måste vara en iterabel av strängar eller tal för :class:`writer`-"
"objekt och en dictionary som mappar fältnamn till strängar eller tal (genom "
"att först skicka dem genom :func:`str`) för :class:`DictWriter`-objekt.  "
"Observera att komplexa tal skrivs ut omgivna av parenteser. Detta kan orsaka "
"vissa problem för andra program som läser CSV-filer (förutsatt att de stöder "
"komplexa tal överhuvudtaget)."

msgid ""
"Write the *row* parameter to the writer's file object, formatted according "
"to the current :class:`Dialect`. Return the return value of the call to the "
"*write* method of the underlying file object."
msgstr ""
"Skriv parametern *row* till skrivarens filobjekt, formaterad enligt aktuell :"
"class:`Dialect`. Returnera returvärdet för anropet till *write*-metoden i "
"det underliggande filobjektet."

msgid "Added support of arbitrary iterables."
msgstr "Lagt till stöd för godtyckliga iterabler."

msgid ""
"Write all elements in *rows* (an iterable of *row* objects as described "
"above) to the writer's file object, formatted according to the current "
"dialect."
msgstr ""
"Skriv alla element i *rows* (en iterabel av *row*-objekt enligt "
"beskrivningen ovan) till skribentens filobjekt, formaterat enligt den "
"aktuella dialekten."

msgid "Writer objects have the following public attribute:"
msgstr "Writer-objekt har följande publika attribut:"

msgid "A read-only description of the dialect in use by the writer."
msgstr "En skrivskyddad beskrivning av den dialekt som används av skribenten."

msgid "DictWriter objects have the following public method:"
msgstr "DictWriter-objekt har följande publika metod:"

msgid ""
"Write a row with the field names (as specified in the constructor) to the "
"writer's file object, formatted according to the current dialect. Return the "
"return value of the :meth:`csvwriter.writerow` call used internally."
msgstr ""
"Skriver en rad med fältnamnen (som anges i konstruktorn) till skrivarens "
"filobjekt, formaterad enligt den aktuella dialekten. Returnerar returvärdet "
"för :meth:`csvwriter.writerow`-anropet som används internt."

msgid ""
":meth:`writeheader` now also returns the value returned by the :meth:"
"`csvwriter.writerow` method it uses internally."
msgstr ""
":meth:`writeheader` returnerar nu också det värde som returneras av :meth:"
"`csvwriter.writerow`-metoden som den använder internt."

msgid "Examples"
msgstr "Exempel"

msgid "The simplest example of reading a CSV file::"
msgstr "Det enklaste exemplet på läsning av en CSV-fil::"

msgid ""
"import csv\n"
"with open('some.csv', newline='') as f:\n"
"    reader = csv.reader(f)\n"
"    for row in reader:\n"
"        print(row)"
msgstr ""
"import csv\n"
"med open('some.csv', newline='') som f:\n"
"    läsare = csv.läsare(f)\n"
"    för rad i reader:\n"
"        print(rad)"

msgid "Reading a file with an alternate format::"
msgstr "Läsa en fil med ett alternativt format::"

msgid ""
"import csv\n"
"with open('passwd', newline='') as f:\n"
"    reader = csv.reader(f, delimiter=':', quoting=csv.QUOTE_NONE)\n"
"    for row in reader:\n"
"        print(row)"
msgstr ""
"import csv\n"
"med open('passwd', newline='') som f:\n"
"    reader = csv.reader(f, avgränsare=':', citering=csv.QUOTE_NONE)\n"
"    för rad i läsaren:\n"
"        print(rad)"

msgid "The corresponding simplest possible writing example is::"
msgstr "Det motsvarande enklaste möjliga skrivningsexemplet är::"

msgid ""
"import csv\n"
"with open('some.csv', 'w', newline='') as f:\n"
"    writer = csv.writer(f)\n"
"    writer.writerows(someiterable)"
msgstr ""
"import csv\n"
"med open('some.csv', 'w', newline='') som f:\n"
"    writer = csv.writer(f)\n"
"    writer.writerows(someiterable)"

msgid ""
"Since :func:`open` is used to open a CSV file for reading, the file will by "
"default be decoded into unicode using the system default encoding (see :func:"
"`locale.getencoding`).  To decode a file using a different encoding, use the "
"``encoding`` argument of open::"
msgstr ""
"Eftersom :func:`open` används för att öppna en CSV-fil för läsning, kommer "
"filen som standard att avkodas till unicode med hjälp av systemets "
"standardkodning (se :func:`locale.getencoding`).  Om du vill avkoda en fil "
"med en annan kodning använder du argumentet ``encoding`` i open::"

msgid ""
"import csv\n"
"with open('some.csv', newline='', encoding='utf-8') as f:\n"
"    reader = csv.reader(f)\n"
"    for row in reader:\n"
"        print(row)"
msgstr ""
"import csv\n"
"with open('some.csv', newline='', encoding='utf-8') as f:\n"
"    reader = csv.reader(f)\n"
"    for row in reader:\n"
"        print(row)"

msgid ""
"The same applies to writing in something other than the system default "
"encoding: specify the encoding argument when opening the output file."
msgstr ""
"Detsamma gäller om du vill skriva i något annat än systemets "
"standardkodning: ange kodningsargumentet när du öppnar utdatafilen."

msgid "Registering a new dialect::"
msgstr "Registrering av en ny dialekt::"

msgid ""
"import csv\n"
"csv.register_dialect('unixpwd', delimiter=':', quoting=csv.QUOTE_NONE)\n"
"with open('passwd', newline='') as f:\n"
"    reader = csv.reader(f, 'unixpwd')"
msgstr ""
"import csv\n"
"csv.register_dialect('unixpwd', delimiter=':', quoting=csv.QUOTE_NONE)\n"
"med open('passwd', newline='') som f:\n"
"    läsare = csv.läsare(f, 'unixpwd')"

msgid ""
"A slightly more advanced use of the reader --- catching and reporting "
"errors::"
msgstr ""
"En lite mer avancerad användning av läsaren --- att fånga upp och rapportera "
"fel::"

msgid ""
"import csv, sys\n"
"filename = 'some.csv'\n"
"with open(filename, newline='') as f:\n"
"    reader = csv.reader(f)\n"
"    try:\n"
"        for row in reader:\n"
"            print(row)\n"
"    except csv.Error as e:\n"
"        sys.exit(f'file {filename}, line {reader.line_num}: {e}')"
msgstr ""
"import csv, sys\n"
"filnamn = 'några.csv'\n"
"med open(filnamn, newline='') som f:\n"
"    läsare = csv.läsare(f)\n"
"    försök:\n"
"        för rad i reader:\n"
"            print(rad)\n"
"    except csv.Error as e:\n"
"        sys.exit(f'fil {filename}, rad {reader.line_num}: {e}')"

msgid ""
"And while the module doesn't directly support parsing strings, it can easily "
"be done::"
msgstr ""
"Och även om modulen inte direkt stöder parsning av strängar, kan det enkelt "
"göras::"

msgid ""
"import csv\n"
"for row in csv.reader(['one,two,three']):\n"
"    print(row)"
msgstr ""
"import csv\n"
"for row in csv.reader(['one,two,three']):\n"
"    print(row)"

msgid "Footnotes"
msgstr "Fotnoter"

msgid ""
"If ``newline=''`` is not specified, newlines embedded inside quoted fields "
"will not be interpreted correctly, and on platforms that use ``\\r\\n`` "
"linendings on write an extra ``\\r`` will be added.  It should always be "
"safe to specify ``newline=''``, since the csv module does its own (:term:"
"`universal <universal newlines>`) newline handling."
msgstr ""
"Om ``newline=''`` inte anges kommer nya rader som är inbäddade i citerade "
"fält inte att tolkas korrekt, och på plattformar som använder ``r\\n``-rader "
"vid skrivning kommer en extra ``r\\`` att läggas till.  Det bör alltid vara "
"säkert att ange ``newline=''``, eftersom csv-modulen gör sin egen (:term:"
"`universal <universal newlines>``) hantering av nya rader."

msgid "csv"
msgstr "csv"

msgid "data"
msgstr "data"

msgid "tabular"
msgstr "tabular"

msgid "universal newlines"
msgstr "universella nya rader"

msgid "csv.reader function"
msgstr "csv.reader-funktion"
