# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!platform` ---  Access to underlying platform's identifying data"
msgstr ""

msgid "**Source code:** :source:`Lib/platform.py`"
msgstr ""

msgid ""
"Specific platforms listed alphabetically, with Linux included in the Unix "
"section."
msgstr ""

msgid "Cross platform"
msgstr ""

msgid ""
"Queries the given executable (defaults to the Python interpreter binary) for "
"various architecture information."
msgstr ""

msgid ""
"Returns a tuple ``(bits, linkage)`` which contain information about the bit "
"architecture and the linkage format used for the executable. Both values are "
"returned as strings."
msgstr ""

msgid ""
"Values that cannot be determined are returned as given by the parameter "
"presets. If bits is given as ``''``, the ``sizeof(pointer)`` (or "
"``sizeof(long)`` on Python version < 1.5.2) is used as indicator for the "
"supported pointer size."
msgstr ""

msgid ""
"The function relies on the system's :file:`file` command to do the actual "
"work. This is available on most if not all Unix  platforms and some non-Unix "
"platforms and then only if the executable points to the Python interpreter.  "
"Reasonable defaults are used when the above needs are not met."
msgstr ""

msgid ""
"On macOS (and perhaps other platforms), executable files may be universal "
"files containing multiple architectures."
msgstr ""

msgid ""
"To get at the \"64-bitness\" of the current interpreter, it is more reliable "
"to query the :data:`sys.maxsize` attribute::"
msgstr ""

msgid "is_64bits = sys.maxsize > 2**32"
msgstr ""

msgid ""
"Returns the machine type, e.g. ``'AMD64'``. An empty string is returned if "
"the value cannot be determined."
msgstr ""

msgid ""
"Returns the computer's network name (may not be fully qualified!). An empty "
"string is returned if the value cannot be determined."
msgstr ""

msgid ""
"Returns a single string identifying the underlying platform with as much "
"useful information as possible."
msgstr ""

msgid ""
"The output is intended to be *human readable* rather than machine parseable. "
"It may look different on different platforms and this is intended."
msgstr ""

msgid ""
"If *aliased* is true, the function will use aliases for various platforms "
"that report system names which differ from their common names, for example "
"SunOS will be reported as Solaris.  The :func:`system_alias` function is "
"used to implement this."
msgstr ""

msgid ""
"Setting *terse* to true causes the function to return only the absolute "
"minimum information needed to identify the platform."
msgstr ""

msgid ""
"On macOS, the function now uses :func:`mac_ver`, if it returns a non-empty "
"release string, to get the macOS version rather than the darwin version."
msgstr ""

msgid "Returns the (real) processor name, e.g. ``'amdk6'``."
msgstr ""

msgid ""
"An empty string is returned if the value cannot be determined. Note that "
"many platforms do not provide this information or simply return the same "
"value as for :func:`machine`.  NetBSD does this."
msgstr ""

msgid ""
"Returns a tuple ``(buildno, builddate)`` stating the Python build number and "
"date as strings."
msgstr ""

msgid "Returns a string identifying the compiler used for compiling Python."
msgstr ""

msgid "Returns a string identifying the Python implementation SCM branch."
msgstr ""

msgid ""
"Returns a string identifying the Python implementation. Possible return "
"values are: 'CPython', 'IronPython', 'Jython', 'PyPy'."
msgstr ""

msgid "Returns a string identifying the Python implementation SCM revision."
msgstr ""

msgid "Returns the Python version as string ``'major.minor.patchlevel'``."
msgstr ""

msgid ""
"Note that unlike the Python ``sys.version``, the returned value will always "
"include the patchlevel (it defaults to 0)."
msgstr ""

msgid ""
"Returns the Python version as tuple ``(major, minor, patchlevel)`` of "
"strings."
msgstr ""

msgid ""
"Note that unlike the Python ``sys.version``, the returned value will always "
"include the patchlevel (it defaults to ``'0'``)."
msgstr ""

msgid ""
"Returns the system's release, e.g. ``'2.2.0'`` or ``'NT'``. An empty string "
"is returned if the value cannot be determined."
msgstr ""

msgid ""
"Returns the system/OS name, such as ``'Linux'``, ``'Darwin'``, ``'Java'``, "
"``'Windows'``. An empty string is returned if the value cannot be determined."
msgstr ""

msgid ""
"On iOS and Android, this returns the user-facing OS name (i.e, ``'iOS``, "
"``'iPadOS'`` or ``'Android'``). To obtain the kernel name (``'Darwin'`` or "
"``'Linux'``), use :func:`os.uname`."
msgstr ""

msgid ""
"Returns ``(system, release, version)`` aliased to common marketing names "
"used for some systems.  It also does some reordering of the information in "
"some cases where it would otherwise cause confusion."
msgstr ""

msgid ""
"Returns the system's release version, e.g. ``'#3 on degas'``. An empty "
"string is returned if the value cannot be determined."
msgstr ""

msgid ""
"On iOS and Android, this is the user-facing OS version. To obtain the Darwin "
"or Linux kernel version, use :func:`os.uname`."
msgstr ""

msgid ""
"Fairly portable uname interface. Returns a :func:`~collections.namedtuple` "
"containing six attributes: :attr:`system`, :attr:`node`, :attr:`release`, :"
"attr:`version`, :attr:`machine`, and :attr:`processor`."
msgstr ""

msgid ":attr:`processor` is resolved late, on demand."
msgstr ""

msgid ""
"Note: the first two attribute names differ from the names presented by :func:"
"`os.uname`, where they are named :attr:`!sysname` and :attr:`!nodename`."
msgstr ""

msgid "Entries which cannot be determined are set to ``''``."
msgstr ""

msgid "Result changed from a tuple to a :func:`~collections.namedtuple`."
msgstr ""

msgid ":attr:`processor` is resolved late instead of immediately."
msgstr ""

msgid "Java platform"
msgstr ""

msgid "Version interface for Jython."
msgstr ""

msgid ""
"Returns a tuple ``(release, vendor, vminfo, osinfo)`` with *vminfo* being a "
"tuple ``(vm_name, vm_release, vm_vendor)`` and *osinfo* being a tuple "
"``(os_name, os_version, os_arch)``. Values which cannot be determined are "
"set to the defaults given as parameters (which all default to ``''``)."
msgstr ""

msgid ""
"It was largely untested, had a confusing API, and was only useful for Jython "
"support."
msgstr ""

msgid "Windows platform"
msgstr ""

msgid ""
"Get additional version information from the Windows Registry and return a "
"tuple ``(release, version, csd, ptype)`` referring to OS release, version "
"number, CSD level (service pack) and OS type (multi/single processor). "
"Values which cannot be determined are set to the defaults given as "
"parameters (which all default to an empty string)."
msgstr ""

msgid ""
"As a hint: *ptype* is ``'Uniprocessor Free'`` on single processor NT "
"machines and ``'Multiprocessor Free'`` on multi processor machines. The "
"``'Free'`` refers to the OS version being free of debugging code. It could "
"also state ``'Checked'`` which means the OS version uses debugging code, i."
"e. code that checks arguments, ranges, etc."
msgstr ""

msgid ""
"Returns a string representing the current Windows edition, or ``None`` if "
"the value cannot be determined.  Possible values include but are not limited "
"to ``'Enterprise'``, ``'IoTUAP'``, ``'ServerStandard'``, and "
"``'nanoserver'``."
msgstr ""

msgid ""
"Return ``True`` if the Windows edition returned by :func:`win32_edition` is "
"recognized as an IoT edition."
msgstr ""

msgid "macOS platform"
msgstr ""

msgid ""
"Get macOS version information and return it as tuple ``(release, "
"versioninfo, machine)`` with *versioninfo* being a tuple ``(version, "
"dev_stage, non_release_version)``."
msgstr ""

msgid ""
"Entries which cannot be determined are set to ``''``.  All tuple entries are "
"strings."
msgstr ""

msgid "iOS platform"
msgstr ""

msgid ""
"Get iOS version information and return it as a :func:`~collections."
"namedtuple` with the following attributes:"
msgstr ""

msgid "``system`` is the OS name; either ``'iOS'`` or ``'iPadOS'``."
msgstr ""

msgid "``release`` is the iOS version number as a string (e.g., ``'17.2'``)."
msgstr ""

msgid ""
"``model`` is the device model identifier; this will be a string like "
"``'iPhone13,2'`` for a physical device, or ``'iPhone'`` on a simulator."
msgstr ""

msgid ""
"``is_simulator`` is a boolean describing if the app is running on a "
"simulator or a physical device."
msgstr ""

msgid ""
"Entries which cannot be determined are set to the defaults given as "
"parameters."
msgstr ""

msgid "Unix platforms"
msgstr ""

msgid ""
"Tries to determine the libc version against which the file executable "
"(defaults to the Python interpreter) is linked.  Returns a tuple of strings "
"``(lib, version)`` which default to the given parameters in case the lookup "
"fails."
msgstr ""

msgid ""
"Note that this function has intimate knowledge of how different libc "
"versions add symbols to the executable is probably only usable for "
"executables compiled using :program:`gcc`."
msgstr ""

msgid "The file is read and scanned in chunks of *chunksize* bytes."
msgstr ""

msgid "Linux platforms"
msgstr ""

msgid ""
"Get operating system identification from ``os-release`` file and return it "
"as a dict. The ``os-release`` file is a `freedesktop.org standard <https://"
"www.freedesktop.org/software/systemd/man/os-release.html>`_ and is available "
"in most Linux distributions. A noticeable exception is Android and Android-"
"based distributions."
msgstr ""

msgid ""
"Raises :exc:`OSError` or subclass when neither ``/etc/os-release`` nor ``/"
"usr/lib/os-release`` can be read."
msgstr ""

msgid ""
"On success, the function returns a dictionary where keys and values are "
"strings. Values have their special characters like ``\"`` and ``$`` "
"unquoted. The fields ``NAME``, ``ID``, and ``PRETTY_NAME`` are always "
"defined according to the standard. All other fields are optional. Vendors "
"may include additional fields."
msgstr ""

msgid ""
"Note that fields like ``NAME``, ``VERSION``, and ``VARIANT`` are strings "
"suitable for presentation to users. Programs should use fields like ``ID``, "
"``ID_LIKE``, ``VERSION_ID``, or ``VARIANT_ID`` to identify Linux "
"distributions."
msgstr ""

msgid "Example::"
msgstr ""

msgid ""
"def get_like_distro():\n"
"    info = platform.freedesktop_os_release()\n"
"    ids = [info[\"ID\"]]\n"
"    if \"ID_LIKE\" in info:\n"
"        # ids are space separated and ordered by precedence\n"
"        ids.extend(info[\"ID_LIKE\"].split())\n"
"    return ids"
msgstr ""

msgid "Android platform"
msgstr ""

msgid ""
"Get Android device information. Returns a :func:`~collections.namedtuple` "
"with the following attributes. Values which cannot be determined are set to "
"the defaults given as parameters."
msgstr ""

msgid "``release`` - Android version, as a string (e.g. ``\"14\"``)."
msgstr ""

msgid ""
"``api_level`` - API level of the running device, as an integer (e.g. ``34`` "
"for Android 14). To get the API level which Python was built against, see :"
"func:`sys.getandroidapilevel`."
msgstr ""

msgid ""
"``manufacturer`` - `Manufacturer name <https://developer.android.com/"
"reference/android/os/Build#MANUFACTURER>`__."
msgstr ""

msgid ""
"``model`` - `Model name <https://developer.android.com/reference/android/os/"
"Build#MODEL>`__ – typically the marketing name or model number."
msgstr ""

msgid ""
"``device`` - `Device name <https://developer.android.com/reference/android/"
"os/Build#DEVICE>`__ – typically the model number or a codename."
msgstr ""

msgid ""
"``is_emulator`` - ``True`` if the device is an emulator; ``False`` if it's a "
"physical device."
msgstr ""

msgid ""
"Google maintains a `list of known model and device names <https://storage."
"googleapis.com/play_public/supported_devices.html>`__."
msgstr ""

msgid "Command-line usage"
msgstr ""

msgid ""
":mod:`platform` can also be invoked directly using the :option:`-m` switch "
"of the interpreter::"
msgstr ""

msgid "python -m platform [--terse] [--nonaliased] [{nonaliased,terse} ...]"
msgstr ""

msgid "The following options are accepted:"
msgstr ""

msgid ""
"Print terse information about the platform. This is equivalent to calling :"
"func:`platform.platform` with the *terse* argument set to ``True``."
msgstr ""

msgid ""
"Print platform information without system/OS name aliasing. This is "
"equivalent to calling :func:`platform.platform` with the *aliased* argument "
"set to ``True``."
msgstr ""

msgid ""
"You can also pass one or more positional arguments (``terse``, "
"``nonaliased``) to explicitly control the output format. These behave "
"similarly to their corresponding options."
msgstr ""

msgid "Miscellaneous"
msgstr ""

msgid ""
"Clear out the internal cache of information, such as the :func:`uname`. This "
"is typically useful when the platform's :func:`node` is changed by an "
"external process and one needs to retrieve the updated value."
msgstr ""
