# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Using Python on Unix platforms"
msgstr ""

msgid "Getting and installing the latest version of Python"
msgstr ""

msgid "On Linux"
msgstr ""

msgid ""
"Python comes preinstalled on most Linux distributions, and is available as a "
"package on all others.  However there are certain features you might want to "
"use that are not available on your distro's package.  You can compile the "
"latest version of Python from source."
msgstr ""

msgid ""
"In the event that the latest version of Python doesn't come preinstalled and "
"isn't in the repositories as well, you can make packages for your own "
"distro.  Have a look at the following links:"
msgstr ""

msgid "https://www.debian.org/doc/manuals/maint-guide/first.en.html"
msgstr ""

msgid "for Debian users"
msgstr ""

msgid "https://en.opensuse.org/Portal:Packaging"
msgstr ""

msgid "for OpenSuse users"
msgstr ""

msgid ""
"https://docs.fedoraproject.org/en-US/package-maintainers/"
"Packaging_Tutorial_GNU_Hello/"
msgstr ""

msgid "for Fedora users"
msgstr ""

msgid "https://slackbook.org/html/package-management-making-packages.html"
msgstr ""

msgid "for Slackware users"
msgstr ""

msgid "Installing IDLE"
msgstr ""

msgid "In some cases, IDLE might not be included in your Python installation."
msgstr ""

msgid "For Debian and Ubuntu users::"
msgstr ""

msgid ""
"sudo apt update\n"
"sudo apt install idle"
msgstr ""

msgid "For Fedora, RHEL, and CentOS users::"
msgstr ""

msgid "sudo dnf install python3-idle"
msgstr ""

msgid "For SUSE and OpenSUSE users::"
msgstr ""

msgid "sudo zypper install python3-idle"
msgstr ""

msgid "For Alpine Linux users::"
msgstr ""

msgid "sudo apk add python3-idle"
msgstr ""

msgid "On FreeBSD and OpenBSD"
msgstr ""

msgid "FreeBSD users, to add the package use::"
msgstr ""

msgid "pkg install python3"
msgstr ""

msgid "OpenBSD users, to add the package use::"
msgstr ""

msgid ""
"pkg_add -r python\n"
"\n"
"pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/<insert your "
"architecture here>/python-<version>.tgz"
msgstr ""

msgid "For example i386 users get the 2.5.1 version of Python using::"
msgstr ""

msgid ""
"pkg_add ftp://ftp.openbsd.org/pub/OpenBSD/4.2/packages/i386/python-2.5.1p2."
"tgz"
msgstr ""

msgid "Building Python"
msgstr ""

msgid ""
"If you want to compile CPython yourself, first thing you should do is get "
"the `source <https://www.python.org/downloads/source/>`_. You can download "
"either the latest release's source or just grab a fresh `clone <https://"
"devguide.python.org/setup/#get-the-source-code>`_.  (If you want to "
"contribute patches, you will need a clone.)"
msgstr ""

msgid "The build process consists of the usual commands::"
msgstr ""

msgid ""
"./configure\n"
"make\n"
"make install"
msgstr ""

msgid ""
":ref:`Configuration options <configure-options>` and caveats for specific "
"Unix platforms are extensively documented in the :source:`README.rst` file "
"in the root of the Python source tree."
msgstr ""

msgid ""
"``make install`` can overwrite or masquerade the :file:`python3` binary. "
"``make altinstall`` is therefore recommended instead of ``make install`` "
"since it only installs :file:`{exec_prefix}/bin/python{version}`."
msgstr ""

msgid "Python-related paths and files"
msgstr ""

msgid ""
"These are subject to difference depending on local installation "
"conventions; :option:`prefix <--prefix>` and :option:`exec_prefix <--exec-"
"prefix>` are installation-dependent and should be interpreted as for GNU "
"software; they may be the same."
msgstr ""

msgid ""
"For example, on most Linux systems, the default for both is :file:`/usr`."
msgstr ""

msgid "File/directory"
msgstr ""

msgid "Meaning"
msgstr ""

msgid ":file:`{exec_prefix}/bin/python3`"
msgstr ""

msgid "Recommended location of the interpreter."
msgstr ""

msgid ""
":file:`{prefix}/lib/python{version}`, :file:`{exec_prefix}/lib/"
"python{version}`"
msgstr ""

msgid ""
"Recommended locations of the directories containing the standard modules."
msgstr ""

msgid ""
":file:`{prefix}/include/python{version}`, :file:`{exec_prefix}/include/"
"python{version}`"
msgstr ""

msgid ""
"Recommended locations of the directories containing the include files needed "
"for developing Python extensions and embedding the interpreter."
msgstr ""

msgid "Miscellaneous"
msgstr ""

msgid ""
"To easily use Python scripts on Unix, you need to make them executable, e.g. "
"with"
msgstr ""

msgid "$ chmod +x script"
msgstr ""

msgid ""
"and put an appropriate Shebang line at the top of the script.  A good choice "
"is usually ::"
msgstr ""

msgid "#!/usr/bin/env python3"
msgstr ""

msgid ""
"which searches for the Python interpreter in the whole :envvar:`PATH`.  "
"However, some Unices may not have the :program:`env` command, so you may "
"need to hardcode ``/usr/bin/python3`` as the interpreter path."
msgstr ""

msgid ""
"To use shell commands in your Python scripts, look at the :mod:`subprocess` "
"module."
msgstr ""

msgid "Custom OpenSSL"
msgstr ""

msgid ""
"To use your vendor's OpenSSL configuration and system trust store, locate "
"the directory with ``openssl.cnf`` file or symlink in ``/etc``. On most "
"distribution the file is either in ``/etc/ssl`` or ``/etc/pki/tls``. The "
"directory should also contain a ``cert.pem`` file and/or a ``certs`` "
"directory."
msgstr ""

msgid ""
"$ find /etc/ -name openssl.cnf -printf \"%h\\n\"\n"
"/etc/ssl"
msgstr ""

msgid ""
"Download, build, and install OpenSSL. Make sure you use ``install_sw`` and "
"not ``install``. The ``install_sw`` target does not override ``openssl.cnf``."
msgstr ""

msgid ""
"$ curl -O https://www.openssl.org/source/openssl-VERSION.tar.gz\n"
"$ tar xzf openssl-VERSION\n"
"$ pushd openssl-VERSION\n"
"$ ./config \\\n"
"    --prefix=/usr/local/custom-openssl \\\n"
"    --libdir=lib \\\n"
"    --openssldir=/etc/ssl\n"
"$ make -j1 depend\n"
"$ make -j8\n"
"$ make install_sw\n"
"$ popd"
msgstr ""

msgid ""
"Build Python with custom OpenSSL (see the configure ``--with-openssl`` and "
"``--with-openssl-rpath`` options)"
msgstr ""

msgid ""
"$ pushd python-3.x.x\n"
"$ ./configure -C \\\n"
"    --with-openssl=/usr/local/custom-openssl \\\n"
"    --with-openssl-rpath=auto \\\n"
"    --prefix=/usr/local/python-3.x.x\n"
"$ make -j8\n"
"$ make altinstall"
msgstr ""

msgid ""
"Patch releases of OpenSSL have a backwards compatible ABI. You don't need to "
"recompile Python to update OpenSSL. It's sufficient to replace the custom "
"OpenSSL installation with a newer version."
msgstr ""
