# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!traceback` --- Print or retrieve a stack traceback"
msgstr ":mod:`!traceback` --- Skriv ut eller hämta en stack traceback"

msgid "**Source code:** :source:`Lib/traceback.py`"
msgstr "**Källkod:** :source:`Lib/traceback.py`"

msgid ""
"This module provides a standard interface to extract, format and print stack "
"traces of Python programs. It is more flexible than the interpreter's "
"default traceback display, and therefore makes it possible to configure "
"certain aspects of the output. Finally, it contains a utility for capturing "
"enough information about an exception to print it later, without the need to "
"save a reference to the actual exception. Since exceptions can be the roots "
"of large objects graph, this utility can significantly improve memory "
"management."
msgstr ""
"Denna modul tillhandahåller ett standardgränssnitt för att extrahera, "
"formatera och skriva ut stackspår från Python-program. Det är mer flexibelt "
"än tolkens standardvisning av spårning, och gör det därför möjligt att "
"konfigurera vissa aspekter av utdata. Slutligen innehåller den ett verktyg "
"för att fånga tillräckligt med information om ett undantag för att skriva ut "
"det senare, utan att behöva spara en referens till det faktiska undantaget. "
"Eftersom undantag kan vara roten till stora objektgrafer kan detta verktyg "
"förbättra minneshanteringen avsevärt."

msgid ""
"The module uses :ref:`traceback objects <traceback-objects>` --- these are "
"objects of type :class:`types.TracebackType`, which are assigned to the :"
"attr:`~BaseException.__traceback__` field of :class:`BaseException` "
"instances."
msgstr ""
"Modulen använder :ref:`traceback-objekt <traceback-objects>` --- dessa är "
"objekt av typen :class:`types.TracebackType`, som tilldelas fältet :attr:"
"`~BaseException.__traceback__` i :class:`BaseException`-instanser."

msgid "Module :mod:`faulthandler`"
msgstr "Modul :mod:`faulthandler`"

msgid ""
"Used to dump Python tracebacks explicitly, on a fault, after a timeout, or "
"on a user signal."
msgstr ""
"Används för att dumpa Python-spårningar explicit, vid ett fel, efter en "
"timeout eller vid en användarsignal."

msgid "Module :mod:`pdb`"
msgstr "Modul :mod:`pdb`"

msgid "Interactive source code debugger for Python programs."
msgstr "Interaktiv källkodsfelsökare för Python-program."

msgid "The module's API can be divided into two parts:"
msgstr "Modulens API kan delas in i två delar:"

msgid ""
"Module-level functions offering basic functionality, which are useful for "
"interactive inspection of exceptions and tracebacks."
msgstr ""
"Funktioner på modulnivå som erbjuder grundläggande funktionalitet och som är "
"användbara för interaktiv inspektion av undantag och spårningar."

msgid ""
":class:`TracebackException` class and its helper classes :class:"
"`StackSummary` and :class:`FrameSummary`. These offer both more flexibility "
"in the output generated and the ability to store the information necessary "
"for later formatting without holding references to actual exception and "
"traceback objects."
msgstr ""
"klassen :class:`TracebackException` och dess hjälpklasser :class:"
"`StackSummary` och :class:`FrameSummary`. Dessa ger både större flexibilitet "
"i den utdata som genereras och möjlighet att lagra den information som "
"behövs för senare formatering utan att hålla referenser till faktiska "
"undantag och spårningsobjekt."

msgid ""
"Output is colorized by default and can be :ref:`controlled using environment "
"variables <using-on-controlling-color>`."
msgstr ""
"Utdata är färgade som standard och kan :ref:`kontrolleras med hjälp av "
"miljövariabler <using-on-controlling-color>`."

msgid "Module-Level Functions"
msgstr "Funktioner på modulnivå"

msgid ""
"Print up to *limit* stack trace entries from :ref:`traceback object "
"<traceback-objects>` *tb* (starting from the caller's frame) if *limit* is "
"positive.  Otherwise, print the last ``abs(limit)`` entries.  If *limit* is "
"omitted or ``None``, all entries are printed.  If *file* is omitted or "
"``None``, the output goes to :data:`sys.stderr`; otherwise it should be an "
"open :term:`file <file object>` or :term:`file-like object` to receive the "
"output."
msgstr ""
"Skriv ut upp till *limit* stackspårningsposter från :ref:`traceback-objekt "
"<traceback-objects>` *tb* (med början från anroparens ram) om *limit* är "
"positiv.  I annat fall skrivs de sista ``abs(limit)``-posterna ut.  Om "
"*limit* utelämnas eller är ``None`` skrivs alla poster ut.  Om *file* "
"utelämnas eller ``None`` går utdata till :data:`sys.stderr`; annars bör det "
"vara en öppen :term:`file <file object>` eller :term:`file-liknande objekt` "
"som tar emot utdata."

msgid ""
"The meaning of the *limit* parameter is different than the meaning of :const:"
"`sys.tracebacklimit`. A negative *limit* value corresponds to a positive "
"value of :const:`!sys.tracebacklimit`, whereas the behaviour of a positive "
"*limit* value cannot be achieved with :const:`!sys.tracebacklimit`."
msgstr ""
"Betydelsen av parametern *limit* är annorlunda än betydelsen av :const:`sys."
"tracebacklimit`. Ett negativt *limit*-värde motsvarar ett positivt värde på :"
"const:`!sys.tracebacklimit`, medan beteendet hos ett positivt *limit*-värde "
"inte kan uppnås med :const:`!sys.tracebacklimit`."

msgid "Added negative *limit* support."
msgstr "Stöd för negativ *limit* har lagts till."

msgid ""
"Print exception information and stack trace entries from :ref:`traceback "
"object <traceback-objects>` *tb* to *file*. This differs from :func:"
"`print_tb` in the following ways:"
msgstr ""
"Skriver ut undantagsinformation och stackspårningsposter från :ref:"
"`traceback object <traceback-objects>` *tb* till *file*. Detta skiljer sig "
"från :func:`print_tb` på följande sätt:"

msgid ""
"if *tb* is not ``None``, it prints a header ``Traceback (most recent call "
"last):``"
msgstr ""
"om *tb* inte är ``None``, skrivs en rubrik ut ``Traceback (senaste anropet "
"senast):``"

msgid "it prints the exception type and *value* after the stack trace"
msgstr "den skriver ut undantagstypen och *värdet* efter stackspårningen"

msgid ""
"if *type(value)* is :exc:`SyntaxError` and *value* has the appropriate "
"format, it prints the line where the syntax error occurred with a caret "
"indicating the approximate position of the error."
msgstr ""
"om *typ(värde)* är :exc:`SyntaxError` och *värde* har rätt format, skrivs "
"den rad ut där syntaxfelet inträffade med en caret som anger felets "
"ungefärliga position."

msgid ""
"Since Python 3.10, instead of passing *value* and *tb*, an exception object "
"can be passed as the first argument. If *value* and *tb* are provided, the "
"first argument is ignored in order to provide backwards compatibility."
msgstr ""
"Sedan Python 3.10, istället för att skicka *value* och *tb*, kan ett "
"exception-objekt skickas som det första argumentet. Om *value* och *tb* "
"anges ignoreras det första argumentet för att ge bakåtkompatibilitet."

msgid ""
"The optional *limit* argument has the same meaning as for :func:`print_tb`. "
"If *chain* is true (the default), then chained exceptions (the :attr:"
"`~BaseException.__cause__` or :attr:`~BaseException.__context__` attributes "
"of the exception) will be printed as well, like the interpreter itself does "
"when printing an unhandled exception."
msgstr ""
"Det valfria argumentet *limit* har samma betydelse som för :func:`print_tb`. "
"Om *chain* är true (standard) kommer även kedjade undantag (attributen :attr:"
"`~BaseException.__cause__` eller :attr:`~BaseException.__context__` för "
"undantaget) att skrivas ut, precis som tolken själv gör när den skriver ut "
"ett ohanterat undantag."

msgid "The *etype* argument is ignored and inferred from the type of *value*."
msgstr "Argumentet *etype* ignoreras och härleds från typen av *value*."

msgid ""
"The *etype* parameter has been renamed to *exc* and is now positional-only."
msgstr ""
"Parametern *etype* har bytt namn till *exc* och är nu endast positionell."

msgid ""
"This is a shorthand for ``print_exception(sys.exception(), limit=limit, "
"file=file, chain=chain)``."
msgstr ""
"Detta är en förkortning av ``print_exception(sys.exception(), limit=limit, "
"file=file, chain=chain)``."

msgid ""
"This is a shorthand for ``print_exception(sys.last_exc, limit=limit, "
"file=file, chain=chain)``.  In general it will work only after an exception "
"has reached an interactive prompt (see :data:`sys.last_exc`)."
msgstr ""
"Detta är en förkortning av ``print_exception(sys.last_exc, limit=limit, "
"file=file, chain=chain)``.  I allmänhet fungerar det bara efter att ett "
"undantag har nått en interaktiv prompt (se :data:`sys.last_exc`)."

msgid ""
"Print up to *limit* stack trace entries (starting from the invocation point) "
"if *limit* is positive.  Otherwise, print the last ``abs(limit)`` entries.  "
"If *limit* is omitted or ``None``, all entries are printed. The optional *f* "
"argument can be used to specify an alternate :ref:`stack frame <frame-"
"objects>` to start.  The optional *file* argument has the same meaning as "
"for :func:`print_tb`."
msgstr ""
"Skriv ut upp till *limit* stackspårningsposter (med början från "
"anropspunkten) om *limit* är positiv.  Annars skrivs de sista ``abs(limit)``-"
"posterna ut.  Om *limit* utelämnas eller ``None`` skrivs alla poster ut. Det "
"valfria *f*-argumentet kan användas för att ange en alternativ :ref:`stack "
"frame <frame-objects>` att starta.  Det valfria *file*-argumentet har samma "
"betydelse som för :func:`print_tb`."

msgid ""
"Return a :class:`StackSummary` object representing a list of \"pre-"
"processed\" stack trace entries extracted from the :ref:`traceback object "
"<traceback-objects>` *tb*.  It is useful for alternate formatting of stack "
"traces.  The optional *limit* argument has the same meaning as for :func:"
"`print_tb`.  A \"pre-processed\" stack trace entry is a :class:"
"`FrameSummary` object containing attributes :attr:`~FrameSummary.filename`, :"
"attr:`~FrameSummary.lineno`, :attr:`~FrameSummary.name`, and :attr:"
"`~FrameSummary.line` representing the information that is usually printed "
"for a stack trace."
msgstr ""
"Returnerar ett :class:`StackSummary`-objekt som representerar en lista med "
"\"förbehandlade\" stackspårningsposter som extraherats från :ref:`traceback-"
"objektet <traceback-objects>` *tb*.  Det är användbart för alternativ "
"formatering av stackspårningar.  Det valfria argumentet *limit* har samma "
"betydelse som för :func:`print_tb`.  En \"förbehandlad\" stackspårningspost "
"är ett :class:`FrameSummary`-objekt som innehåller attributen :attr:"
"`~FrameSummary.filename`, :attr:`~FrameSummary.lineno`, :attr:`~FrameSummary."
"name` och :attr:`~FrameSummary.line` som representerar den information som "
"vanligtvis skrivs ut för en stackspårning."

msgid ""
"Extract the raw traceback from the current :ref:`stack frame <frame-"
"objects>`.  The return value has the same format as for :func:`extract_tb`.  "
"The optional *f* and *limit* arguments have the same meaning as for :func:"
"`print_stack`."
msgstr ""
"Extraherar den råa tracebacken från den aktuella :ref:`stack frame <frame-"
"objects>`.  Returvärdet har samma format som för :func:`extract_tb`.  De "
"valfria argumenten *f* och *limit* har samma betydelse som för :func:"
"`print_stack`."

msgid ""
"Print the list of tuples as returned by :func:`extract_tb` or :func:"
"`extract_stack` as a formatted stack trace to the given file. If *file* is "
"``None``, the output is written to :data:`sys.stderr`."
msgstr ""
"Skriver ut listan med tupler som returneras av :func:`extract_tb` eller :"
"func:`extract_stack` som ett formaterat stackspår till den angivna filen. Om "
"*file* är ``None`` skrivs utdata till :data:`sys.stderr`."

msgid ""
"Given a list of tuples or :class:`FrameSummary` objects as returned by :func:"
"`extract_tb` or :func:`extract_stack`, return a list of strings ready for "
"printing.  Each string in the resulting list corresponds to the item with "
"the same index in the argument list.  Each string ends in a newline; the "
"strings may contain internal newlines as well, for those items whose source "
"text line is not ``None``."
msgstr ""
"Ger en lista med tupler eller :class:`FrameSummary`-objekt som returneras "
"av :func:`extract_tb` eller :func:`extract_stack`, returnerar en lista med "
"strängar redo för utskrift.  Varje sträng i den resulterande listan "
"motsvarar objektet med samma index i argumentlistan.  Varje sträng slutar "
"med en ny rad; strängarna kan även innehålla interna nya rader för de objekt "
"vars källtextrad inte är ``None``."

msgid ""
"Format the exception part of a traceback using an exception value such as "
"given by :data:`sys.last_value`.  The return value is a list of strings, "
"each ending in a newline.  The list contains the exception's message, which "
"is normally a single string; however, for :exc:`SyntaxError` exceptions, it "
"contains several lines that (when printed) display detailed information "
"about where the syntax error occurred. Following the message, the list "
"contains the exception's :attr:`notes <BaseException.__notes__>`."
msgstr ""
"Formatera undantagsdelen av en spårning med hjälp av ett undantagsvärde som "
"anges av :data:`sys.last_value`.  Returvärdet är en lista med strängar som "
"var och en slutar med en ny rad.  Listan innehåller undantagets meddelande, "
"som normalt är en enda sträng, men för :exc:`SyntaxError`-undantag "
"innehåller den flera rader som (när de skrivs ut) visar detaljerad "
"information om var syntaxfelet inträffade. Efter meddelandet innehåller "
"listan undantagets :attr:`notes <BaseException.__notes__>`."

msgid ""
"Since Python 3.10, instead of passing *value*, an exception object can be "
"passed as the first argument.  If *value* is provided, the first argument is "
"ignored in order to provide backwards compatibility."
msgstr ""
"Sedan Python 3.10 kan ett exception-objekt skickas som första argument "
"istället för *value*.  Om *value* anges ignoreras det första argumentet för "
"att ge bakåtkompatibilitet."

msgid ""
"When *show_group* is ``True``, and the exception is an instance of :exc:"
"`BaseExceptionGroup`, the nested exceptions are included as well, "
"recursively, with indentation relative to their nesting depth."
msgstr ""
"När *show_group* är ``True``, och undantaget är en instans av :exc:"
"`BaseExceptionGroup`, inkluderas även de nästlade undantagen, rekursivt, med "
"indragning i förhållande till deras nästlingsdjup."

msgid ""
"The returned list now includes any :attr:`notes <BaseException.__notes__>` "
"attached to the exception."
msgstr ""
"Den returnerade listan innehåller nu alla :attr:`notes <BaseException."
"__notes__>` som är kopplade till undantaget."

msgid "*show_group* parameter was added."
msgstr "*parametern show_group* har lagts till."

msgid ""
"Format a stack trace and the exception information.  The arguments  have the "
"same meaning as the corresponding arguments to :func:`print_exception`.  The "
"return value is a list of strings, each ending in a newline and some "
"containing internal newlines.  When these lines are concatenated and "
"printed, exactly the same text is printed as does :func:`print_exception`."
msgstr ""
"Formaterar en stackspårning och information om undantaget.  Argumenten har "
"samma betydelse som motsvarande argument i :func:`print_exception`.  "
"Returvärdet är en lista med strängar som var och en slutar med en ny rad och "
"vissa innehåller interna nya rader.  När dessa rader sammanfogas och skrivs "
"ut, skrivs exakt samma text ut som i :func:`print_exception`."

msgid ""
"This function's behavior and signature were modified to match :func:"
"`print_exception`."
msgstr ""
"Den här funktionens beteende och signatur har ändrats för att matcha :func:"
"`print_exception`."

msgid ""
"This is like ``print_exc(limit)`` but returns a string instead of printing "
"to a file."
msgstr ""
"Detta är som ``print_exc(limit)`` men returnerar en sträng istället för att "
"skriva ut till en fil."

msgid "A shorthand for ``format_list(extract_tb(tb, limit))``."
msgstr "En förkortning för ``format_list(extract_tb(tb, limit))``."

msgid "A shorthand for ``format_list(extract_stack(f, limit))``."
msgstr "En förkortning för ``format_list(extract_stack(f, limit))``."

msgid ""
"Clears the local variables of all the stack frames in a :ref:`traceback "
"<traceback-objects>` *tb* by calling the :meth:`~frame.clear` method of "
"each :ref:`frame object <frame-objects>`."
msgstr ""
"Rensar de lokala variablerna för alla stackramar i en :ref:`traceback "
"<traceback-objects>` *tb* genom att anropa metoden :meth:`~frame.clear` för "
"varje :ref:`frame-objekt <frame-objects>`."

msgid ""
"Walk a stack following :attr:`f.f_back <frame.f_back>` from the given frame, "
"yielding the frame and line number for each frame. If *f* is ``None``, the "
"current stack is used. This helper is used with :meth:`StackSummary.extract`."
msgstr ""
"Går igenom en stack enligt :attr:`f.f_back <frame.f_back>` från den angivna "
"ramen, vilket ger ram- och radnummer för varje ram. Om *f* är ``None`` "
"används den aktuella stacken. Denna hjälp används med :meth:`StackSummary."
"extract`."

msgid ""
"This function previously returned a generator that would walk the stack when "
"first iterated over. The generator returned now is the state of the stack "
"when ``walk_stack`` is called."
msgstr ""
"Denna funktion returnerade tidigare en generator som skulle gå igenom "
"stacken när den först itererades över. Den generator som returneras nu är "
"stackens tillstånd när ``walk_stack`` anropas."

msgid ""
"Walk a traceback following :attr:`~traceback.tb_next` yielding the frame and "
"line number for each frame. This helper is used with :meth:`StackSummary."
"extract`."
msgstr ""
"Går igenom en spårning enligt :attr:`~traceback.tb_next` och ger bildrutan "
"och radnumret för varje bildruta. Detta hjälpmedel används med :meth:"
"`StackSummary.extract`."

msgid ":class:`!TracebackException` Objects"
msgstr ":class:`!TracebackException`-objekt"

msgid ""
":class:`!TracebackException` objects are created from actual exceptions to "
"capture data for later printing.  They offer a more lightweight method of "
"storing this information by avoiding holding references to :ref:"
"`traceback<traceback-objects>` and :ref:`frame<frame-objects>` objects. In "
"addition, they expose more options to configure the output compared to the "
"module-level functions described above."
msgstr ""
":class:`!TracebackException`-objekt skapas från faktiska undantag för att "
"fånga data för senare utskrift.  De erbjuder en mer lättviktig metod för att "
"lagra denna information genom att undvika att hålla referenser till :ref:"
"`traceback<traceback-objects>` och :ref:`frame<frame-objects>` objekt. "
"Dessutom ger de fler alternativ för att konfigurera utdata jämfört med de "
"funktioner på modulnivå som beskrivs ovan."

msgid ""
"Capture an exception for later rendering. The meaning of *limit*, "
"*lookup_lines* and *capture_locals* are as for the :class:`StackSummary` "
"class."
msgstr ""
"Fånga ett undantag för senare rendering. Betydelsen av *limit*, "
"*lookup_lines* och *capture_locals* är densamma som för klassen :class:"
"`StackSummary`."

msgid ""
"If *compact* is true, only data that is required by :class:`!"
"TracebackException`'s :meth:`format` method is saved in the class "
"attributes. In particular, the :attr:`__context__` field is calculated only "
"if :attr:`__cause__` is ``None`` and :attr:`__suppress_context__` is false."
msgstr ""
"Om *compact* är true, sparas endast data som krävs av :class:`!"
"TracebackException`:s :meth:`format`-metod i klassens attribut. I synnerhet "
"beräknas fältet :attr:`__context__` endast om :attr:`__cause__` är ``None`` "
"och :attr:`__suppress_context__` är false."

msgid ""
"Note that when locals are captured, they are also shown in the traceback."
msgstr ""
"Observera att när lokala funktioner fångas upp visas de också i traceback."

msgid ""
"*max_group_width* and *max_group_depth* control the formatting of exception "
"groups (see :exc:`BaseExceptionGroup`). The depth refers to the nesting "
"level of the group, and the width refers to the size of a single exception "
"group's exceptions array. The formatted output is truncated when either "
"limit is exceeded."
msgstr ""
"*max_group_width* och *max_group_depth* styr formateringen av "
"undantagsgrupper (se :exc:`BaseExceptionGroup`). Djupet avser gruppens "
"nestningsnivå och bredden avser storleken på en enskild undantagsgrupps "
"undantagsarray. Den formaterade utdata trunkeras när någon av gränserna "
"överskrids."

msgid "Added the *compact* parameter."
msgstr "Parametern *kompakt* har lagts till."

msgid "Added the *max_group_width* and *max_group_depth* parameters."
msgstr "Parametrarna *max_group_width* och *max_group_depth* har lagts till."

msgid ""
"A :class:`!TracebackException` of the original :attr:`~BaseException."
"__cause__`."
msgstr ""
"En :class:`!TracebackException` av den ursprungliga :attr:`~BaseException."
"__cause__`."

msgid ""
"A :class:`!TracebackException` of the original :attr:`~BaseException."
"__context__`."
msgstr ""
"En :class:`!TracebackException` av den ursprungliga :attr:`~BaseException."
"__context__`."

msgid ""
"If ``self`` represents an :exc:`ExceptionGroup`, this field holds a list of :"
"class:`!TracebackException` instances representing the nested exceptions. "
"Otherwise it is ``None``."
msgstr ""
"Om ``self`` representerar en :exc:`ExceptionGroup`, innehåller detta fält en "
"lista av :class:`!TracebackException`-instanser som representerar de "
"nästlade undantagen. Annars är det ``None``."

msgid ""
"The :attr:`~BaseException.__suppress_context__` value from the original "
"exception."
msgstr ""
"Värdet :attr:`~BaseException.__suppress_context__` från det ursprungliga "
"undantaget."

msgid ""
"The :attr:`~BaseException.__notes__` value from the original exception, or "
"``None`` if the exception does not have any notes. If it is not ``None`` is "
"it formatted in the traceback after the exception string."
msgstr ""
"Värdet :attr:`~BaseException.__notes__` från det ursprungliga undantaget, "
"eller ``None`` om undantaget inte har några anteckningar. Om det inte är "
"``None`` formateras det i tracebacken efter undantagssträngen."

msgid "A :class:`StackSummary` representing the traceback."
msgstr "En :class:`StackSummary` som representerar spårningen."

msgid "The class of the original traceback."
msgstr "Klassen för den ursprungliga spårningen."

msgid "String display of the class of the original exception."
msgstr "Strängvisning av klassen för det ursprungliga undantaget."

msgid "For syntax errors - the file name where the error occurred."
msgstr "För syntaxfel - filnamnet där felet uppstod."

msgid "For syntax errors - the line number where the error occurred."
msgstr "För syntaxfel - radnumret där felet uppstod."

msgid ""
"For syntax errors - the end line number where the error occurred. Can be "
"``None`` if not present."
msgstr ""
"För syntaxfel - numret på slutraden där felet inträffade. Kan vara ``None`` "
"om det inte finns."

msgid "For syntax errors - the text where the error occurred."
msgstr "För syntaxfel - den text där felet inträffade."

msgid "For syntax errors - the offset into the text where the error occurred."
msgstr "För syntaxfel - den offset i texten där felet uppstod."

msgid ""
"For syntax errors - the end offset into the text where the error occurred. "
"Can be ``None`` if not present."
msgstr ""
"För syntaxfel - slutoffset i texten där felet uppstod. Kan vara ``None`` om "
"det inte finns."

msgid "For syntax errors - the compiler error message."
msgstr "För syntaxfel - kompilatorns felmeddelande."

msgid ""
"Capture an exception for later rendering. *limit*, *lookup_lines* and "
"*capture_locals* are as for the :class:`StackSummary` class."
msgstr ""
"Fånga ett undantag för senare rendering. *limit*, *lookup_lines* och "
"*capture_locals* är som för klassen :class:`StackSummary`."

msgid ""
"Print to *file* (default ``sys.stderr``) the exception information returned "
"by :meth:`format`."
msgstr ""
"Skriv ut undantagsinformationen som returneras av :meth:`format` till *fil* "
"(standard ``sys.stderr``)."

msgid "Format the exception."
msgstr "Formatera undantaget."

msgid ""
"If *chain* is not ``True``, :attr:`__cause__` and :attr:`__context__` will "
"not be formatted."
msgstr ""
"Om *chain* inte är ``True``, kommer :attr:`__cause__` och :attr:"
"`__context__` inte att formateras."

msgid ""
"The return value is a generator of strings, each ending in a newline and "
"some containing internal newlines. :func:`~traceback.print_exception` is a "
"wrapper around this method which just prints the lines to a file."
msgstr ""
"Returvärdet är en generator av strängar, var och en slutar med en ny rad och "
"vissa innehåller interna nya rader. :func:`~traceback.print_exception` är "
"ett omslag runt denna metod som bara skriver ut raderna till en fil."

msgid "Format the exception part of the traceback."
msgstr "Formatera undantagsdelen av tracebacken."

msgid "The return value is a generator of strings, each ending in a newline."
msgstr ""
"Returvärdet är en generator av strängar som var och en slutar med en ny rad."

msgid ""
"When *show_group* is ``False``, the generator emits the exception's message "
"followed by its notes (if it has any). The exception message is normally a "
"single string; however, for :exc:`SyntaxError` exceptions, it consists of "
"several lines that (when printed) display detailed information about where "
"the syntax error occurred."
msgstr ""
"När *show_group* är ``False``, avger generatorn undantagets meddelande följt "
"av dess anteckningar (om det har några). Undantagsmeddelandet är normalt en "
"enda sträng, men för :exc:`SyntaxError`-undantag består det av flera rader "
"som (när de skrivs ut) visar detaljerad information om var syntaxfelet "
"uppstod."

msgid ""
"The exception's :attr:`notes <BaseException.__notes__>` are now included in "
"the output."
msgstr ""
"Undantagets :attr:`notes <BaseException.__notes__>` inkluderas nu i utdata."

msgid "Added the *show_group* parameter."
msgstr "Parametern *show_group* har lagts till."

msgid ":class:`!StackSummary` Objects"
msgstr ":class:`!StackSummary` Objekt"

msgid ""
":class:`!StackSummary` objects represent a call stack ready for formatting."
msgstr ""
":class:`!StackSummary`-objekt representerar en anropsstack som är redo för "
"formatering."

msgid ""
"Construct a :class:`!StackSummary` object from a frame generator (such as is "
"returned by :func:`~traceback.walk_stack` or :func:`~traceback.walk_tb`)."
msgstr ""
"Konstruera ett :class:`!StackSummary`-objekt från en ramgenerator (t.ex. den "
"som returneras av :func:`~traceback.walk_stack` eller :func:`~traceback."
"walk_tb`)."

msgid ""
"If *limit* is supplied, only this many frames are taken from *frame_gen*. If "
"*lookup_lines* is ``False``, the returned :class:`FrameSummary` objects will "
"not have read their lines in yet, making the cost of creating the :class:`!"
"StackSummary` cheaper (which may be valuable if it may not actually get "
"formatted). If *capture_locals* is ``True`` the local variables in each :"
"class:`!FrameSummary` are captured as object representations."
msgstr ""
"Om *limit* anges kommer endast så många ramar att hämtas från *frame_gen*. "
"Om *lookup_lines* är ``False``, kommer de returnerade :class:`FrameSummary`-"
"objekten inte att ha läst in sina rader ännu, vilket gör kostnaden för att "
"skapa :class:`!StackSummary` billigare (vilket kan vara värdefullt om det "
"kanske inte faktiskt formateras). Om *capture_locals* är ``True`` fångas de "
"lokala variablerna i varje :class:`!FrameSummary` som objektrepresentationer."

msgid ""
"Exceptions raised from :func:`repr` on a local variable (when "
"*capture_locals* is ``True``) are no longer propagated to the caller."
msgstr ""
"Undantag från :func:`repr` på en lokal variabel (när *capture_locals* är "
"``True``) sprids inte längre till den som anropar."

msgid ""
"Construct a :class:`!StackSummary` object from a supplied list of :class:"
"`FrameSummary` objects or old-style list of tuples.  Each tuple should be a "
"4-tuple with *filename*, *lineno*, *name*, *line* as the elements."
msgstr ""
"Konstruerar ett :class:`!StackSummary`-objekt från en medföljande lista av :"
"class:`FrameSummary`-objekt eller en gammaldags lista av tuplar.  Varje "
"tupel bör vara en 4-tupel med *filnamn*, *lineno*, *namn*, *linje* som "
"element."

msgid ""
"Returns a list of strings ready for printing.  Each string in the resulting "
"list corresponds to a single :ref:`frame <frame-objects>` from the stack. "
"Each string ends in a newline; the strings may contain internal newlines as "
"well, for those items with source text lines."
msgstr ""
"Returnerar en lista med strängar som är klara för utskrift.  Varje sträng i "
"den resulterande listan motsvarar en enda :ref:`frame <frame-objects>` från "
"stacken. Varje sträng slutar med en ny rad; strängarna kan även innehålla "
"interna nya rader, för de objekt som har källtextrader."

msgid ""
"For long sequences of the same frame and line, the first few repetitions are "
"shown, followed by a summary line stating the exact number of further "
"repetitions."
msgstr ""
"För långa sekvenser med samma ram och linje visas de första repetitionerna, "
"följt av en sammanfattande rad som anger det exakta antalet ytterligare "
"repetitioner."

msgid "Long sequences of repeated frames are now abbreviated."
msgstr "Långa sekvenser av upprepade bildrutor förkortas nu."

msgid ""
"Returns a string for printing one of the :ref:`frames <frame-objects>` "
"involved in the stack. This method is called for each :class:`FrameSummary` "
"object to be printed by :meth:`StackSummary.format`. If it returns ``None``, "
"the frame is omitted from the output."
msgstr ""
"Returnerar en sträng för utskrift av en av de :ref:`frames <frame-objects>` "
"som ingår i stacken. Denna metod anropas för varje :class:`FrameSummary`-"
"objekt som ska skrivas ut med :meth:`StackSummary.format`. Om den returnerar "
"``None``, utelämnas ramen från utskriften."

msgid ":class:`!FrameSummary` Objects"
msgstr ":class:`!FrameSummary` Objekt"

msgid ""
"A :class:`!FrameSummary` object represents a single :ref:`frame <frame-"
"objects>` in a :ref:`traceback <traceback-objects>`."
msgstr ""
"Ett :class:`!FrameSummary`-objekt representerar en enda :ref:`frame <frame-"
"objects>` i en :ref:`traceback <traceback-objects>`."

msgid ""
"Represents a single :ref:`frame <frame-objects>` in the :ref:`traceback "
"<traceback-objects>` or stack that is being formatted or printed. It may "
"optionally have a stringified version of the frame's locals included in it. "
"If *lookup_line* is ``False``, the source code is not looked up until the :"
"class:`!FrameSummary` has the :attr:`~FrameSummary.line` attribute accessed "
"(which also happens when casting it to a :class:`tuple`). :attr:"
"`~FrameSummary.line` may be directly provided, and will prevent line lookups "
"happening at all. *locals* is an optional local variable mapping, and if "
"supplied the variable representations are stored in the summary for later "
"display."
msgstr ""
"Representerar en enda :ref:`frame <frame-objects>` i :ref:`traceback "
"<traceback-objects>` eller stack som formateras eller skrivs ut. Den kan "
"eventuellt ha en strängad version av ramens lokala information inkluderad i "
"sig. Om *lookup_line* är ``False``, kommer källkoden inte att sökas upp "
"förrän :class:`!FrameSummary` har :attr:`~FrameSummary.line` attributet "
"åtkomligt (vilket också händer när den kastas till en :class:`tuple`). :attr:"
"`~FrameSummary.line` kan anges direkt, och förhindrar att linjesökningar "
"sker överhuvudtaget. *locals* är en valfri lokal variabelmappning, och om "
"den anges lagras variabelrepresentationerna i sammanfattningen för senare "
"visning."

msgid ":class:`!FrameSummary` instances have the following attributes:"
msgstr ":class:`!FrameSummary`-instanser har följande attribut:"

msgid ""
"The filename of the source code for this frame. Equivalent to accessing :"
"attr:`f.f_code.co_filename <codeobject.co_filename>` on a :ref:`frame object "
"<frame-objects>` *f*."
msgstr ""
"Filnamnet på källkoden för den här ramen. Motsvarar åtkomst till :attr:`f."
"f_code.co_filename <codeobject.co_filename>` på en :ref:`frame object <frame-"
"objects>` *f*."

msgid "The line number of the source code for this frame."
msgstr "Radnumret i källkoden för den här ramen."

msgid ""
"Equivalent to accessing :attr:`f.f_code.co_name <codeobject.co_name>` on a :"
"ref:`frame object <frame-objects>` *f*."
msgstr ""
"Motsvarar åtkomst till :attr:`f.f_code.co_name <codeobject.co_name>` på en :"
"ref:`frame object <frame-objects>` *f*."

msgid ""
"A string representing the source code for this frame, with leading and "
"trailing whitespace stripped. If the source is not available, it is ``None``."
msgstr ""
"En sträng som representerar källkoden för den här ramen, med inledande och "
"avslutande blanksteg borttagna. Om källan inte är tillgänglig är den "
"``None``."

msgid ""
"The last line number of the source code for this frame. By default, it is "
"set to ``lineno`` and indexation starts from 1."
msgstr ""
"Det sista radnumret i källkoden för den här ramen. Som standard är det "
"inställt på ``lineno`` och indexeringen börjar från 1."

msgid "The default value changed from ``None`` to ``lineno``."
msgstr "Standardvärdet ändrades från ``None`` till ``lineno``."

msgid ""
"The column number of the source code for this frame. By default, it is "
"``None`` and indexation starts from 0."
msgstr ""
"Kolumnnumret för källkoden för den här ramen. Som standard är det ``None`` "
"och indexeringen börjar från 0."

msgid ""
"The last column number of the source code for this frame. By default, it is "
"``None`` and indexation starts from 0."
msgstr ""
"Det sista kolumnnumret i källkoden för den här ramen. Som standard är det "
"``None`` och indexeringen börjar från 0."

msgid "Examples of Using the Module-Level Functions"
msgstr "Exempel på användning av funktioner på modulnivå"

msgid ""
"This simple example implements a basic read-eval-print loop, similar to (but "
"less useful than) the standard Python interactive interpreter loop.  For a "
"more complete implementation of the interpreter loop, refer to the :mod:"
"`code` module. ::"
msgstr ""
"Detta enkla exempel implementerar en grundläggande read-eval-print-loop, som "
"liknar (men är mindre användbar än) Pythons interaktiva interpreter-loop.  "
"För en mer komplett implementering av tolkslingan, se modulen :mod:`code`. ::"

msgid ""
"import sys, traceback\n"
"\n"
"def run_user_code(envdir):\n"
"    source = input(\">>> \")\n"
"    try:\n"
"        exec(source, envdir)\n"
"    except Exception:\n"
"        print(\"Exception in user code:\")\n"
"        print(\"-\"*60)\n"
"        traceback.print_exc(file=sys.stdout)\n"
"        print(\"-\"*60)\n"
"\n"
"envdir = {}\n"
"while True:\n"
"    run_user_code(envdir)"
msgstr ""
"import sys, traceback\n"
"\n"
"def run_user_code(envdir):\n"
"    source = input(\">>> \")\n"
"    try:\n"
"        exec(source, envdir)\n"
"    except Exception:\n"
"        print(\"Exception in user code:\")\n"
"        print(\"-\"*60)\n"
"        traceback.print_exc(file=sys.stdout)\n"
"        print(\"-\"*60)\n"
"\n"
"envdir = {}\n"
"while True:\n"
"    run_user_code(envdir)"

msgid ""
"The following example demonstrates the different ways to print and format "
"the exception and traceback:"
msgstr ""
"Följande exempel visar de olika sätten att skriva ut och formatera undantag "
"och spårning:"

msgid ""
"import sys, traceback\n"
"\n"
"def lumberjack():\n"
"    bright_side_of_life()\n"
"\n"
"def bright_side_of_life():\n"
"    return tuple()[0]\n"
"\n"
"try:\n"
"    lumberjack()\n"
"except IndexError as exc:\n"
"    print(\"*** print_tb:\")\n"
"    traceback.print_tb(exc.__traceback__, limit=1, file=sys.stdout)\n"
"    print(\"*** print_exception:\")\n"
"    traceback.print_exception(exc, limit=2, file=sys.stdout)\n"
"    print(\"*** print_exc:\")\n"
"    traceback.print_exc(limit=2, file=sys.stdout)\n"
"    print(\"*** format_exc, first and last line:\")\n"
"    formatted_lines = traceback.format_exc().splitlines()\n"
"    print(formatted_lines[0])\n"
"    print(formatted_lines[-1])\n"
"    print(\"*** format_exception:\")\n"
"    print(repr(traceback.format_exception(exc)))\n"
"    print(\"*** extract_tb:\")\n"
"    print(repr(traceback.extract_tb(exc.__traceback__)))\n"
"    print(\"*** format_tb:\")\n"
"    print(repr(traceback.format_tb(exc.__traceback__)))\n"
"    print(\"*** tb_lineno:\", exc.__traceback__.tb_lineno)"
msgstr ""
"import sys, traceback\n"
"\n"
"def lumberjack():\n"
"    bright_side_of_life()\n"
"\n"
"def bright_side_of_life():\n"
"    return tuple()[0]\n"
"\n"
"try:\n"
"    lumberjack()\n"
"except IndexError as exc:\n"
"    print(\"*** print_tb:\")\n"
"    traceback.print_tb(exc.__traceback__, limit=1, file=sys.stdout)\n"
"    print(\"*** print_exception:\")\n"
"    traceback.print_exception(exc, limit=2, file=sys.stdout)\n"
"    print(\"*** print_exc:\")\n"
"    traceback.print_exc(limit=2, file=sys.stdout)\n"
"    print(\"*** format_exc, first and last line:\")\n"
"    formatted_lines = traceback.format_exc().splitlines()\n"
"    print(formatted_lines[0])\n"
"    print(formatted_lines[-1])\n"
"    print(\"*** format_exception:\")\n"
"    print(repr(traceback.format_exception(exc)))\n"
"    print(\"*** extract_tb:\")\n"
"    print(repr(traceback.extract_tb(exc.__traceback__)))\n"
"    print(\"*** format_tb:\")\n"
"    print(repr(traceback.format_tb(exc.__traceback__)))\n"
"    print(\"*** tb_lineno:\", exc.__traceback__.tb_lineno)"

msgid "The output for the example would look similar to this:"
msgstr "Utdata för exemplet skulle se ut ungefär så här:"

msgid ""
"*** print_tb:\n"
"  File \"<doctest...>\", line 10, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"*** print_exception:\n"
"Traceback (most recent call last):\n"
"  File \"<doctest...>\", line 10, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<doctest...>\", line 4, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"IndexError: tuple index out of range\n"
"*** print_exc:\n"
"Traceback (most recent call last):\n"
"  File \"<doctest...>\", line 10, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<doctest...>\", line 4, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"IndexError: tuple index out of range\n"
"*** format_exc, first and last line:\n"
"Traceback (most recent call last):\n"
"IndexError: tuple index out of range\n"
"*** format_exception:\n"
"['Traceback (most recent call last):\\n',\n"
" '  File \"<doctest default[0]>\", line 10, in <module>\\n    "
"lumberjack()\\n    ~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 4, in lumberjack\\n    "
"bright_side_of_life()\\n    ~~~~~~~~~~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 7, in bright_side_of_life\\n    "
"return tuple()[0]\\n           ~~~~~~~^^^\\n',\n"
" 'IndexError: tuple index out of range\\n']\n"
"*** extract_tb:\n"
"[<FrameSummary file <doctest...>, line 10 in <module>>,\n"
" <FrameSummary file <doctest...>, line 4 in lumberjack>,\n"
" <FrameSummary file <doctest...>, line 7 in bright_side_of_life>]\n"
"*** format_tb:\n"
"['  File \"<doctest default[0]>\", line 10, in <module>\\n    "
"lumberjack()\\n    ~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 4, in lumberjack\\n    "
"bright_side_of_life()\\n    ~~~~~~~~~~~~~~~~~~~^^\\n',\n"
" '  File \"<doctest default[0]>\", line 7, in bright_side_of_life\\n    "
"return tuple()[0]\\n           ~~~~~~~^^^\\n']\n"
"*** tb_lineno: 10"
msgstr ""
"*** print_tb:\n"
"  Fil \"<doctest...>\", rad 10, i <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"*** print_exception:\n"
"Traceback (senaste anropet sist):\n"
"  Fil \"<doctest...>\", rad 10, i <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  Fil \"<doctest...>\", rad 4, i lumberjack\n"
"    ljusa_sidan_av_livet()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"IndexError: tuple-index utanför intervallet\n"
"*** print_exc:\n"
"Traceback (senaste anropet sist):\n"
"  Fil \"<doctest...>\", rad 10, i <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  Fil \"<doctest...>\", rad 4, i lumberjack\n"
"    ljusa_sidan_av_livet()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"IndexError: tuple-index utanför intervallet\n"
"*** format_exc, första och sista raden:\n"
"Traceback (senaste anropet senast):\n"
"IndexError: tuple-index utanför intervallet\n"
"*** format_exception:\n"
"['Traceback (senaste anropet senast):\\n',\n"
" ' Fil \"<doctest default[0]>\", rad 10, i <module>\\n lumberjack()\\n "
"~~~~~~~~~~^^\\n',\n"
" ' Fil \"<doctest default[0]>\", rad 4, i lumberjack\\n "
"bright_side_of_life()\\n ~~~~~~~~~~~~~~~~~~~^^\\n',\n"
" ' Fil \"<doctest default[0]>\", rad 7, i bright_side_of_life\\n return "
"tuple()[0]\\n ~~~~~~~^^^\\n',\n"
" 'IndexError: tuple-index utanför intervallet\\n']\n"
"*** extrahera_tb:\n"
"[&lt;FrameSummary-fil <doctest...>, rad 10 i <module>&gt;,\n"
" &lt;FrameSummary file <doctest...>, line 4 in lumberjack&gt;,\n"
" &lt;FrameSummary file <doctest...>, rad 7 i bright_side_of_life&gt;]\n"
"*** format_tb:\n"
"[' Fil \"<doctest default[0]>\", rad 10, i <module>\\n lumberjack()\\n "
"~~~~~~~~~~^^\\n',\n"
" ' Fil \"<doctest default[0]>\", rad 4, i lumberjack\\n "
"bright_side_of_life()\\n ~~~~~~~~~~~~~~~~~~~^^\\n',\n"
" ' Fil \"<doctest default[0]>\", rad 7, i bright_side_of_life\\n return "
"tuple()[0]\\n ~~~~~~~^^^\\n']\n"
"*** tb_lineno: 10"

msgid ""
"The following example shows the different ways to print and format the "
"stack::"
msgstr ""
"Följande exempel visar de olika sätten att skriva ut och formatera stacken::"

msgid ""
">>> import traceback\n"
">>> def another_function():\n"
"...     lumberstack()\n"
"...\n"
">>> def lumberstack():\n"
"...     traceback.print_stack()\n"
"...     print(repr(traceback.extract_stack()))\n"
"...     print(repr(traceback.format_stack()))\n"
"...\n"
">>> another_function()\n"
"  File \"<doctest>\", line 10, in <module>\n"
"    another_function()\n"
"  File \"<doctest>\", line 3, in another_function\n"
"    lumberstack()\n"
"  File \"<doctest>\", line 6, in lumberstack\n"
"    traceback.print_stack()\n"
"[('<doctest>', 10, '<module>', 'another_function()'),\n"
" ('<doctest>', 3, 'another_function', 'lumberstack()'),\n"
" ('<doctest>', 7, 'lumberstack', 'print(repr(traceback.extract_stack()))')]\n"
"['  File \"<doctest>\", line 10, in <module>\\n    another_function()\\n',\n"
" '  File \"<doctest>\", line 3, in another_function\\n    "
"lumberstack()\\n',\n"
" '  File \"<doctest>\", line 8, in lumberstack\\n    print(repr(traceback."
"format_stack()))\\n']"
msgstr ""
">>> import traceback\n"
">>> def another_function():\n"
"...     lumberstack()\n"
"...\n"
">>> def lumberstack():\n"
"...     traceback.print_stack()\n"
"...     print(repr(traceback.extract_stack()))\n"
"...     print(repr(traceback.format_stack()))\n"
"...\n"
">>> another_function()\n"
"  File \"<doctest>\", line 10, in <module>\n"
"    another_function()\n"
"  File \"<doctest>\", line 3, in another_function\n"
"    lumberstack()\n"
"  File \"<doctest>\", line 6, in lumberstack\n"
"    traceback.print_stack()\n"
"[('<doctest>', 10, '<module>', 'another_function()'),\n"
" ('<doctest>', 3, 'another_function', 'lumberstack()'),\n"
" ('<doctest>', 7, 'lumberstack', 'print(repr(traceback.extract_stack()))')]\n"
"['  File \"<doctest>\", line 10, in <module>\\n    another_function()\\n',\n"
" '  File \"<doctest>\", line 3, in another_function\\n    "
"lumberstack()\\n',\n"
" '  File \"<doctest>\", line 8, in lumberstack\\n    print(repr(traceback."
"format_stack()))\\n']"

msgid "This last example demonstrates the final few formatting functions:"
msgstr "I det sista exemplet visas de sista formateringsfunktionerna:"

msgid ""
">>> import traceback\n"
">>> traceback.format_list([('spam.py', 3, '<module>', 'spam.eggs()'),\n"
"...                        ('eggs.py', 42, 'eggs', 'return \"bacon\"')])\n"
"['  File \"spam.py\", line 3, in <module>\\n    spam.eggs()\\n',\n"
" '  File \"eggs.py\", line 42, in eggs\\n    return \"bacon\"\\n']\n"
">>> an_error = IndexError('tuple index out of range')\n"
">>> traceback.format_exception_only(an_error)\n"
"['IndexError: tuple index out of range\\n']"
msgstr ""
"&gt;&gt;&gt; import traceback\n"
"&gt;&gt;&gt; traceback.format_list([('spam.py', 3, '<module>', 'spam."
"eggs()'),\n"
"... ('eggs.py', 42, 'eggs', 'return \"bacon\"')])\n"
"[' Fil \"spam.py\", rad 3, i <module>\\n spam.eggs()\\n',\n"
" ' Fil \"eggs.py\", rad 42, i eggs\\n return \"bacon\"\\n']\n"
"&gt;&gt;&gt; an_error = IndexError('tuple index out of range')\n"
"&gt;&gt;&gt; traceback.format_exception_only(an_error)\n"
"['IndexError: tuple index out of range\\n']"

msgid "Examples of Using :class:`TracebackException`"
msgstr "Exempel på användning av :class:`TracebackException`"

msgid "With the helper class, we have more options::"
msgstr "Med hjälpklassen har vi fler alternativ::"

msgid ""
">>> import sys\n"
">>> from traceback import TracebackException\n"
">>>\n"
">>> def lumberjack():\n"
"...     bright_side_of_life()\n"
"...\n"
">>> def bright_side_of_life():\n"
"...     t = \"bright\", \"side\", \"of\", \"life\"\n"
"...     return t[5]\n"
"...\n"
">>> try:\n"
"...     lumberjack()\n"
"... except IndexError as e:\n"
"...     exc = e\n"
"...\n"
">>> try:\n"
"...     try:\n"
"...         lumberjack()\n"
"...     except:\n"
"...         1/0\n"
"... except Exception as e:\n"
"...     chained_exc = e\n"
"...\n"
">>> # limit works as with the module-level functions\n"
">>> TracebackException.from_exception(exc, limit=-2).print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 6, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-1>\", line 10, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"IndexError: tuple index out of range\n"
"\n"
">>> # capture_locals adds local variables in frames\n"
">>> TracebackException.from_exception(exc, limit=-2, capture_locals=True)."
"print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 6, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-1>\", line 10, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"    t = (\"bright\", \"side\", \"of\", \"life\")\n"
"IndexError: tuple index out of range\n"
"\n"
">>> # The *chain* kwarg to print() controls whether chained\n"
">>> # exceptions are displayed\n"
">>> TracebackException.from_exception(chained_exc).print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 4, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<python-input-8>\", line 7, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-8>\", line 11, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"IndexError: tuple index out of range\n"
"\n"
"During handling of the above exception, another exception occurred:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 6, in <module>\n"
"    1/0\n"
"    ~^~\n"
"ZeroDivisionError: division by zero\n"
"\n"
">>> TracebackException.from_exception(chained_exc).print(chain=False)\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 6, in <module>\n"
"    1/0\n"
"    ~^~\n"
"ZeroDivisionError: division by zero"
msgstr ""
">>> import sys\n"
">>> from traceback import TracebackException\n"
">>>\n"
">>> def lumberjack():\n"
"...     bright_side_of_life()\n"
"...\n"
">>> def bright_side_of_life():\n"
"...     t = \"bright\", \"side\", \"of\", \"life\"\n"
"...     return t[5]\n"
"...\n"
">>> try:\n"
"...     lumberjack()\n"
"... except IndexError as e:\n"
"...     exc = e\n"
"...\n"
">>> try:\n"
"...     try:\n"
"...         lumberjack()\n"
"...     except:\n"
"...         1/0\n"
"... except Exception as e:\n"
"...     chained_exc = e\n"
"...\n"
">>> # limit works as with the module-level functions\n"
">>> TracebackException.from_exception(exc, limit=-2).print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 6, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-1>\", line 10, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"IndexError: tuple index out of range\n"
"\n"
">>> # capture_locals adds local variables in frames\n"
">>> TracebackException.from_exception(exc, limit=-2, capture_locals=True)."
"print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 6, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-1>\", line 10, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"    t = (\"bright\", \"side\", \"of\", \"life\")\n"
"IndexError: tuple index out of range\n"
"\n"
">>> # The *chain* kwarg to print() controls whether chained\n"
">>> # exceptions are displayed\n"
">>> TracebackException.from_exception(chained_exc).print()\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 4, in <module>\n"
"    lumberjack()\n"
"    ~~~~~~~~~~^^\n"
"  File \"<python-input-8>\", line 7, in lumberjack\n"
"    bright_side_of_life()\n"
"    ~~~~~~~~~~~~~~~~~~~^^\n"
"  File \"<python-input-8>\", line 11, in bright_side_of_life\n"
"    return t[5]\n"
"           ~^^^\n"
"IndexError: tuple index out of range\n"
"\n"
"During handling of the above exception, another exception occurred:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 6, in <module>\n"
"    1/0\n"
"    ~^~\n"
"ZeroDivisionError: division by zero\n"
"\n"
">>> TracebackException.from_exception(chained_exc).print(chain=False)\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-19>\", line 6, in <module>\n"
"    1/0\n"
"    ~^~\n"
"ZeroDivisionError: division by zero"

msgid "object"
msgstr "objekt"

msgid "traceback"
msgstr "spårning"

msgid "^ (caret)"
msgstr "^ (caret)"

msgid "marker"
msgstr "markör"
