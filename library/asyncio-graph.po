# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Call Graph Introspection"
msgstr "Introspektion av anropsgrafen"

msgid "**Source code:** :source:`Lib/asyncio/graph.py`"
msgstr "**Källkod:** :source:`Lib/asyncio/graph.py`"

msgid ""
"asyncio has powerful runtime call graph introspection utilities to trace the "
"entire call graph of a running *coroutine* or *task*, or a suspended "
"*future*.  These utilities and the underlying machinery can be used from "
"within a Python program or by external profilers and debuggers."
msgstr ""
"asyncio har kraftfulla verktyg för introspektion av anropsgrafen under "
"körning för att spåra hela anropsgrafen för en körande *coroutine* eller "
"*task*, eller en suspenderad *future*.  Dessa verktyg och det underliggande "
"maskineriet kan användas inifrån ett Python-program eller av externa "
"profilerare och debuggers."

msgid ""
"Print the async call graph for the current task or the provided :class:"
"`Task` or :class:`Future`."
msgstr ""
"Skriv ut grafen för asynkrona anrop för den aktuella uppgiften eller den "
"angivna :class:`Task` eller :class:`Future`."

msgid ""
"This function prints entries starting from the top frame and going down "
"towards the invocation point."
msgstr ""
"Denna funktion skriver ut poster med början från den övre ramen och nedåt "
"mot anropspunkten."

msgid ""
"The function receives an optional *future* argument. If not passed, the "
"current running task will be used."
msgstr ""
"Funktionen tar emot ett valfritt *future*-argument. Om det inte skickas med "
"kommer den aktuella körningen att användas."

msgid ""
"If the function is called on *the current task*, the optional keyword-only "
"*depth* argument can be used to skip the specified number of frames from top "
"of the stack."
msgstr ""
"Om funktionen anropas på *den aktuella uppgiften* kan det valfria argumentet "
"*depth*, som endast innehåller nyckelord, användas för att hoppa över det "
"angivna antalet bildrutor från toppen av stacken."

msgid ""
"If the optional keyword-only *limit* argument is provided, each call stack "
"in the resulting graph is truncated to include at most ``abs(limit)`` "
"entries. If *limit* is positive, the entries left are the closest to the "
"invocation point. If *limit* is negative, the topmost entries are left. If "
"*limit* is omitted or ``None``, all entries are present. If *limit* is "
"``0``, the call stack is not printed at all, only \"awaited by\" information "
"is printed."
msgstr ""
"Om det valfria argumentet *limit*, som endast innehåller nyckelord, anges, "
"trunkeras varje anropsstack i den resulterande grafen så att den innehåller "
"högst ``abs(limit)`` poster. Om *limit* är positiv, är de poster som lämnas "
"kvar de som ligger närmast anropspunkten. Om *limit* är negativ, lämnas de "
"översta posterna. Om *limit* utelämnas eller är ``None`` finns alla poster "
"kvar. Om *limit* är ``0`` skrivs inte anropsstacken ut alls, endast "
"\"awaited by\"-information skrivs ut."

msgid ""
"If *file* is omitted or ``None``, the function will print to :data:`sys."
"stdout`."
msgstr ""
"Om *file* utelämnas eller ``None``, kommer funktionen att skriva ut till :"
"data:`sys.stdout`."

msgid "**Example:**"
msgstr "**Exempel:**"

msgid "The following Python code:"
msgstr "Följande Python-kod:"

msgid ""
"import asyncio\n"
"\n"
"async def test():\n"
"    asyncio.print_call_graph()\n"
"\n"
"async def main():\n"
"    async with asyncio.TaskGroup() as g:\n"
"        g.create_task(test(), name='test')\n"
"\n"
"asyncio.run(main())"
msgstr ""
"import asyncio\n"
"\n"
"async def test():\n"
"    asyncio.print_call_graph()\n"
"\n"
"async def main():\n"
"    async with asyncio.TaskGroup() as g:\n"
"        g.create_task(test(), name='test')\n"
"\n"
"asyncio.run(main())"

msgid "will print::"
msgstr "kommer att skriva ut::"

msgid ""
"* Task(name='test', id=0x1039f0fe0)\n"
"+ Call stack:\n"
"|   File 't2.py', line 4, in async test()\n"
"+ Awaited by:\n"
"   * Task(name='Task-1', id=0x103a5e060)\n"
"      + Call stack:\n"
"      |   File 'taskgroups.py', line 107, in async TaskGroup.__aexit__()\n"
"      |   File 't2.py', line 7, in async main()"
msgstr ""
"* Uppgift(name='test', id=0x1039f0fe0)\n"
"+ Anropsstack:\n"
"| Fil 't2.py', rad 4, i async test()\n"
"+ Väntas av:\n"
"   * Task(name='Task-1', id=0x103a5e060)\n"
"      + Anropsstack:\n"
"      | Fil 'taskgroups.py', rad 107, i async TaskGroup.__aexit__()\n"
"      | Fil 't2.py', rad 7, i async main()"

msgid ""
"Like :func:`print_call_graph`, but returns a string. If *future* is ``None`` "
"and there's no current task, the function returns an empty string."
msgstr ""
"Som :func:`print_call_graph`, men returnerar en sträng. Om *future* är "
"``None`` och det inte finns någon aktuell uppgift, returnerar funktionen en "
"tom sträng."

msgid ""
"Capture the async call graph for the current task or the provided :class:"
"`Task` or :class:`Future`."
msgstr ""
"Fångar async-anropsgrafen för den aktuella uppgiften eller den angivna :"
"class:`Task` eller :class:`Future`."

msgid ""
"The function receives an optional *future* argument. If not passed, the "
"current running task will be used. If there's no current task, the function "
"returns ``None``."
msgstr ""
"Funktionen tar emot ett valfritt *future*-argument. Om det inte skickas med "
"kommer den aktuella körningen att användas. Om det inte finns någon aktuell "
"uppgift returnerar funktionen ``None``."

msgid "Returns a ``FutureCallGraph`` data class object:"
msgstr "Returnerar ett dataklassobjekt av typen ``FutureCallGraph``:"

msgid "``FutureCallGraph(future, call_stack, awaited_by)``"
msgstr "``FutureCallGraph(framtid, call_stack, väntat_by)``"

msgid ""
"Where *future* is a reference to a :class:`Future` or a :class:`Task` (or "
"their subclasses.)"
msgstr ""
"Där *future* är en referens till en :class:`Future` eller en :class:`Task` "
"(eller deras underklasser.)"

msgid "``call_stack`` is a tuple of ``FrameCallGraphEntry`` objects."
msgstr "``call_stack`` är en tupel av ``FrameCallGraphEntry`` objekt."

msgid "``awaited_by`` is a tuple of ``FutureCallGraph`` objects."
msgstr "``awaited_by`` är en tupel av ``FutureCallGraph`` objekt."

msgid "``FrameCallGraphEntry(frame)``"
msgstr "``FrameCallGraphEntry(ram)``"

msgid ""
"Where *frame* is a frame object of a regular Python function in the call "
"stack."
msgstr ""
"Där *frame* är ett frame-objekt för en vanlig Python-funktion i "
"anropsstacken."

msgid "Low level utility functions"
msgstr "Nyttofunktioner på låg nivå"

msgid ""
"To introspect an async call graph asyncio requires cooperation from control "
"flow structures, such as :func:`shield` or :class:`TaskGroup`. Any time an "
"intermediate :class:`Future` object with low-level APIs like :meth:`Future."
"add_done_callback() <asyncio.Future.add_done_callback>` is involved, the "
"following two functions should be used to inform asyncio about how exactly "
"such intermediate future objects are connected with the tasks they wrap or "
"control."
msgstr ""
"För att introspektera en asynkron anropsgraf kräver asyncio samarbete från "
"kontrollflödesstrukturer, såsom :func:`shield` eller :class:`TaskGroup`. "
"Varje gång ett mellanliggande :class:`Future`-objekt med lågnivå-API:er som :"
"meth:`Future.add_done_callback() <asyncio.Future.add_done_callback>` är "
"inblandat, bör följande två funktioner användas för att informera asyncio om "
"exakt hur sådana mellanliggande future-objekt är kopplade till de uppgifter "
"de omsluter eller kontrollerar."

msgid "Record that *future* is awaited on by *waiter*."
msgstr "Registrera att *framtiden* inväntas av *vaktmästaren*."

msgid ""
"Both *future* and *waiter* must be instances of :class:`Future` or :class:"
"`Task` or their subclasses, otherwise the call would have no effect."
msgstr ""
"Både *future* och *waiter* måste vara instanser av :class:`Future` eller :"
"class:`Task` eller deras subklasser, annars har anropet ingen effekt."

msgid ""
"A call to ``future_add_to_awaited_by()`` must be followed by an eventual "
"call to the :func:`future_discard_from_awaited_by` function with the same "
"arguments."
msgstr ""
"Ett anrop till ``future_add_to_awaited_by()`` måste följas av ett eventuellt "
"anrop till funktionen :func:`future_discard_from_awaited_by` med samma "
"argument."

msgid "Record that *future* is no longer awaited on by *waiter*."
msgstr "Registrera att *framtiden* inte längre inväntas av *vaktmästaren*."
