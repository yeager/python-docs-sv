# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!enum` --- Support for enumerations"
msgstr ":mod:`!enum` --- Stöd för uppräkningar"

msgid "**Source code:** :source:`Lib/enum.py`"
msgstr "**Källkod:** :source:`Lib/enum.py`"

msgid ""
"This page contains the API reference information. For tutorial information "
"and discussion of more advanced topics, see"
msgstr ""
"Den här sidan innehåller API-referensinformation. För information om "
"handledning och diskussion om mer avancerade ämnen, se"

msgid ":ref:`Basic Tutorial <enum-basic-tutorial>`"
msgstr ":ref:``Basic Tutorial <enum-basic-tutorial>``"

msgid ":ref:`Advanced Tutorial <enum-advanced-tutorial>`"
msgstr ":ref:`Avancerad handledning <enum-advanced-tutorial>`"

msgid ":ref:`Enum Cookbook <enum-cookbook>`"
msgstr ":ref:`Enum Cookbook <enum-cookbook>`"

msgid "An enumeration:"
msgstr "En uppräkning:"

msgid "is a set of symbolic names (members) bound to unique values"
msgstr ""
"är en uppsättning symboliska namn (medlemmar) som är bundna till unika värden"

msgid ""
"can be iterated over to return its canonical (i.e. non-alias) members in "
"definition order"
msgstr ""
"kan itereras över för att returnera dess kanoniska (dvs. icke-alias) "
"medlemmar i definitionsordning"

msgid "uses *call* syntax to return members by value"
msgstr "använder *call*-syntax för att returnera medlemmar med värde"

msgid "uses *index* syntax to return members by name"
msgstr "använder *index*-syntax för att returnera medlemmar efter namn"

msgid ""
"Enumerations are created either by using :keyword:`class` syntax, or by "
"using function-call syntax::"
msgstr ""
"Uppräkningar skapas antingen med hjälp av syntaxen :keyword:`class` eller "
"med hjälp av syntaxen för funktionsanrop::"

msgid ""
">>> from enum import Enum\n"
"\n"
">>> # class syntax\n"
">>> class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 3\n"
"\n"
">>> # functional syntax\n"
">>> Color = Enum('Color', [('RED', 1), ('GREEN', 2), ('BLUE', 3)])"
msgstr ""
">>> from enum import Enum\n"
"\n"
">>> # klass syntax\n"
">>> klass Färg(Enum):\n"
"...     RED = 1\n"
"...     GRÖN = 2\n"
"...     BLÅ = 3\n"
"\n"
">>> # funktionell syntax\n"
">>> Färg = Enum('Färg', [('RÖD', 1), ('GRÖN', 2), ('BLÅ', 3)])"

msgid ""
"Even though we can use :keyword:`class` syntax to create Enums, Enums are "
"not normal Python classes.  See :ref:`How are Enums different? <enum-class-"
"differences>` for more details."
msgstr ""
"Även om vi kan använda :keyword:`class` syntax för att skapa Enums, är Enums "
"inte vanliga Python-klasser.  Se :ref:`Hur är Enums annorlunda? <enum-class-"
"differences>` för mer information."

msgid "Nomenclature"
msgstr "Nomenklatur"

msgid "The class :class:`!Color` is an *enumeration* (or *enum*)"
msgstr "Klassen :class:`!Color` är en *enumeration* (eller *enum*)"

msgid ""
"The attributes :attr:`!Color.RED`, :attr:`!Color.GREEN`, etc., are "
"*enumeration members* (or *members*) and are functionally constants."
msgstr ""
"Attributen :attr:`!Color.RED`, :attr:`!Color.GREEN`, etc., är "
"*enumerationsmedlemmar* (eller *medlemmar*) och är funktionellt konstanter."

msgid ""
"The enum members have *names* and *values* (the name of :attr:`!Color.RED` "
"is ``RED``, the value of :attr:`!Color.BLUE` is ``3``, etc.)"
msgstr ""
"Enum-medlemmarna har *namn* och *värden* (namnet på :attr:`!Color.RED` är "
"``RED``, värdet på :attr:`!Color.BLUE` är ``3``, etc.)"

msgid "Module Contents"
msgstr "Modulens innehåll"

msgid ":class:`EnumType`"
msgstr ":class:`EnumType`"

msgid "The ``type`` for Enum and its subclasses."
msgstr "``typ`` för Enum och dess underklasser."

msgid ":class:`Enum`"
msgstr ":class:`Enum`"

msgid "Base class for creating enumerated constants."
msgstr "Basklass för att skapa uppräknade konstanter."

msgid ":class:`IntEnum`"
msgstr ":class:`IntEnum`"

msgid ""
"Base class for creating enumerated constants that are also subclasses of :"
"class:`int`. (`Notes`_)"
msgstr ""
"Basklass för att skapa uppräknade konstanter som också är underklasser till :"
"class:`int`. (`Noter`_)"

msgid ":class:`StrEnum`"
msgstr ":class:`StrEnum`"

msgid ""
"Base class for creating enumerated constants that are also subclasses of :"
"class:`str`. (`Notes`_)"
msgstr ""
"Basklass för att skapa uppräknade konstanter som också är underklasser till :"
"class:`str`. (`Noter`_)"

msgid ":class:`Flag`"
msgstr ":class:`Flagga`"

msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operations without losing their :class:`Flag` membership."
msgstr ""
"Basklass för att skapa uppräknade konstanter som kan kombineras med bitvisa "
"operationer utan att förlora sitt medlemskap i :class:`Flag`."

msgid ":class:`IntFlag`"
msgstr ":class:`IntFlag`"

msgid ""
"Base class for creating enumerated constants that can be combined using the "
"bitwise operators without losing their :class:`IntFlag` membership. :class:"
"`IntFlag` members are also subclasses of :class:`int`. (`Notes`_)"
msgstr ""
"Basklass för att skapa uppräknade konstanter som kan kombineras med bitvisa "
"operatorer utan att förlora sitt medlemskap i :class:`IntFlag`. Medlemmar i :"
"class:`IntFlag` är också underklasser till :class:`int`. (`Noter`_)"

msgid ":class:`ReprEnum`"
msgstr ":class:`ReprEnum`"

msgid ""
"Used by :class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag` to keep "
"the :class:`str() <str>` of the mixed-in type."
msgstr ""
"Används av :class:`IntEnum`, :class:`StrEnum` och :class:`IntFlag` för att "
"hålla :class:`str() <str>` av typen mixed-in."

msgid ":class:`EnumCheck`"
msgstr ":class:`EnumCheck`"

msgid ""
"An enumeration with the values ``CONTINUOUS``, ``NAMED_FLAGS``, and "
"``UNIQUE``, for use with :func:`verify` to ensure various constraints are "
"met by a given enumeration."
msgstr ""
"En uppräkning med värdena ``CONTINUOUS``, ``NAMED_FLAGS`` och ``UNIQUE``, "
"för användning med :func:`verify` för att säkerställa att olika "
"begränsningar uppfylls av en given uppräkning."

msgid ":class:`FlagBoundary`"
msgstr ":class:`FlaggBegränsning`"

msgid ""
"An enumeration with the values ``STRICT``, ``CONFORM``, ``EJECT``, and "
"``KEEP`` which allows for more fine-grained control over how invalid values "
"are dealt with in an enumeration."
msgstr ""
"En uppräkning med värdena ``STRICT``, ``CONFORM``, ``EJECT`` och ``KEEP`` "
"som ger möjlighet till mer finkornig kontroll över hur ogiltiga värden "
"hanteras i en uppräkning."

msgid ":class:`EnumDict`"
msgstr ":class:`EnumDict`"

msgid "A subclass of :class:`dict` for use when subclassing :class:`EnumType`."
msgstr ""
"En underklass av :class:`dict` för användning vid underklassning av :class:"
"`EnumType`."

msgid ":class:`auto`"
msgstr ":class:`auto`"

msgid ""
"Instances are replaced with an appropriate value for Enum members. :class:"
"`StrEnum` defaults to the lower-cased version of the member name, while "
"other Enums default to 1 and increase from there."
msgstr ""
"Instanser ersätts med ett lämpligt värde för Enum-medlemmar. :class:"
"`StrEnum` har som standard den gemena versionen av medlemsnamnet, medan "
"andra Enum har som standard 1 och ökar därifrån."

msgid ":func:`~enum.property`"
msgstr ":func:`~enum.property`"

msgid ""
"Allows :class:`Enum` members to have attributes without conflicting with "
"member names.  The ``value`` and ``name`` attributes are implemented this "
"way."
msgstr ""
"Tillåter :class:`Enum`-medlemmar att ha attribut utan att det står i "
"konflikt med medlemsnamnen.  Attributen ``value`` och ``name`` är "
"implementerade på detta sätt."

msgid ":func:`unique`"
msgstr ":func:`unique`"

msgid ""
"Enum class decorator that ensures only one name is bound to any one value."
msgstr ""
"Enum-klassdekorator som säkerställer att endast ett namn är bundet till ett "
"värde."

msgid ":func:`verify`"
msgstr ":func:`verifiera`"

msgid ""
"Enum class decorator that checks user-selectable constraints on an "
"enumeration."
msgstr ""
"Enum-klassdekorator som kontrollerar användarvalbara begränsningar för en "
"uppräkning."

msgid ":func:`member`"
msgstr ":func:`medlem`"

msgid "Make ``obj`` a member.  Can be used as a decorator."
msgstr "Gör ``obj`` till en medlem.  Kan användas som dekorator."

msgid ":func:`nonmember`"
msgstr ":func:`icke-medlem`"

msgid "Do not make ``obj`` a member.  Can be used as a decorator."
msgstr "Gör inte ``obj`` till en medlem.  Kan användas som dekorator."

msgid ":func:`global_enum`"
msgstr ":func:`global_enum`"

msgid ""
"Modify the :class:`str() <str>` and :func:`repr` of an enum to show its "
"members as belonging to the module instead of its class, and export the enum "
"members to the global namespace."
msgstr ""
"Modifiera :class:`str() <str>` och :func:`repr` för en enum så att dess "
"medlemmar visas som tillhörande modulen istället för klassen, och exportera "
"enum-medlemmarna till det globala namnområdet."

msgid ":func:`show_flag_values`"
msgstr ":func:`visa_flagg_värden`"

msgid "Return a list of all power-of-two integers contained in a flag."
msgstr "Returnerar en lista över alla tvåpotenstal som ingår i en flagga."

msgid "``Flag``, ``IntFlag``, ``auto``"
msgstr "``Flag``, ``IntFlag``, ``auto``"

msgid ""
"``StrEnum``, ``EnumCheck``, ``ReprEnum``, ``FlagBoundary``, ``property``, "
"``member``, ``nonmember``, ``global_enum``, ``show_flag_values``"
msgstr ""
"``StrEnum``, ``EnumCheck``, ``ReprEnum``, ``FlagBoundary``, ``property``, "
"``member``, ``nonmember``, ``global_enum``, ``show_flag_values``"

msgid "``EnumDict``"
msgstr "``EnumDict``"

msgid "Data Types"
msgstr "Datatyper"

msgid ""
"*EnumType* is the :term:`metaclass` for *enum* enumerations.  It is possible "
"to subclass *EnumType* -- see :ref:`Subclassing EnumType <enumtype-"
"examples>` for details."
msgstr ""
"*EnumType* är :term:`metaklass` för *enum* uppräkningar.  Det är möjligt att "
"subklassa *EnumType* -- se :ref:`Subclassing EnumType <enumtype-examples>` "
"för detaljer."

msgid ""
"``EnumType`` is responsible for setting the correct :meth:`!__repr__`, :meth:"
"`!__str__`, :meth:`!__format__`, and :meth:`!__reduce__` methods on the "
"final *enum*, as well as creating the enum members, properly handling "
"duplicates, providing iteration over the enum class, etc."
msgstr ""
"``EnumType`` är ansvarig för att ställa in rätt :meth:`!__repr__`, :meth:`!"
"__str__`, :meth:`!__format__`, och :meth:`!__reduce__` metoder på den "
"slutliga *enum*, samt skapa enum medlemmar, korrekt hantering av dubbletter, "
"tillhandahålla iteration över enum klassen, etc."

msgid "This method is called in two different ways:"
msgstr "Denna metod kan användas på två olika sätt:"

msgid "to look up an existing member:"
msgstr "för att söka upp en befintlig medlem:"

msgid "cls"
msgstr "cls"

msgid "The enum class being called."
msgstr "Den enumklass som anropas."

msgid "value"
msgstr "värde"

msgid "The value to lookup."
msgstr "Det värde som ska sökas upp."

msgid ""
"to use the ``cls`` enum to create a new enum (only if the existing enum does "
"not have any members):"
msgstr ""
"för att använda ``cls`` enum för att skapa en ny enum (endast om den "
"befintliga enum inte har några medlemmar):"

msgid "The name of the new Enum to create."
msgstr "Namnet på den nya Enum som ska skapas."

msgid "names"
msgstr "namn"

msgid "The names/values of the members for the new Enum."
msgstr "Namnen/värdena på medlemmarna för det nya Enum."

msgid "module"
msgstr "modul"

msgid "The name of the module the new Enum is created in."
msgstr "Namnet på den modul som det nya Enum skapas i."

msgid "qualname"
msgstr "kvalitetsnamn"

msgid "The actual location in the module where this Enum can be found."
msgstr "Den faktiska platsen i modulen där denna Enum finns."

msgid "type"
msgstr "typ"

msgid "A mix-in type for the new Enum."
msgstr "En mix-in-typ för det nya Enum."

msgid "start"
msgstr "börja"

msgid "The first integer value for the Enum (used by :class:`auto`)."
msgstr "Det första heltalsvärdet för Enum (används av :class:`auto`)."

msgid "boundary"
msgstr "avgränsning"

msgid ""
"How to handle out-of-range values from bit operations (:class:`Flag` only)."
msgstr ""
"Hur man hanterar värden utanför intervallet från bitoperationer (:class:"
"`Flag` only)."

msgid "Returns ``True`` if member belongs to the ``cls``::"
msgstr "Returnerar ``True`` om medlemmen tillhör ``cls``::"

msgid ""
">>> some_var = Color.RED\n"
">>> some_var in Color\n"
"True\n"
">>> Color.RED.value in Color\n"
"True"
msgstr ""
">>> some_var = Färg.RED\n"
">>> någon_var i Färg\n"
"Sant\n"
">>> Färg.RED.värde i Färg\n"
"True"

msgid ""
"Before Python 3.12, a ``TypeError`` is raised if a non-Enum-member is used "
"in a containment check."
msgstr ""
"Före Python 3.12 uppstår ett ``TypeError`` om en icke-Enum-medlem används i "
"en kontroll av inneslutning."

msgid ""
"Returns ``['__class__', '__doc__', '__members__', '__module__']`` and the "
"names of the members in *cls*::"
msgstr ""
"Returnerar ``['__class__', '__doc__', '__members__', '__module__']`` och "
"namnen på medlemmarna i *cls*::"

msgid ""
">>> dir(Color)\n"
"['BLUE', 'GREEN', 'RED', '__class__', '__contains__', '__doc__', "
"'__getitem__', '__init_subclass__', '__iter__', '__len__', '__members__', "
"'__module__', '__name__', '__qualname__']"
msgstr ""
">>> dir(Färg)\n"
"['BLUE', 'GREEN', 'RED', '__class__', '__contains__', '__doc__', "
"'__getitem__', '__init_subclass__', '__iter__', '__len__', '__members__', "
"'__module__', '__name__', '__qualname__']"

msgid ""
"Returns the Enum member in *cls* matching *name*, or raises a :exc:"
"`KeyError`::"
msgstr ""
"Returnerar Enum-medlemmen i *cls* som matchar *namn*, eller ger upphov till "
"ett :exc:`KeyError`::"

msgid ""
">>> Color['BLUE']\n"
"<Color.BLUE: 3>"
msgstr ""
">>> Färg['BLUE']\n"
"<Färg.BLÅ: 3>"

msgid "Returns each member in *cls* in definition order::"
msgstr "Returnerar varje medlem i *cls* i definitionsordning::"

msgid ""
">>> list(Color)\n"
"[<Color.RED: 1>, <Color.GREEN: 2>, <Color.BLUE: 3>]"
msgstr ""
">>> list(Färg)\n"
"[<Färg.RÖD: 1>, <Färg.GRÖN: 2>, <Färg.BLÅ: 3>]"

msgid "Returns the number of member in *cls*::"
msgstr "Returnerar antalet medlemmar i *cls*::"

msgid ""
">>> len(Color)\n"
"3"
msgstr ""
">>> len(Färg)\n"
"3"

msgid "Returns a mapping of every enum name to its member, including aliases"
msgstr ""
"Returnerar en mappning av varje enumnamn till dess medlem, inklusive alias"

msgid "Returns each member in *cls* in reverse definition order::"
msgstr "Returnerar varje medlem i *cls* i omvänd definitionsordning::"

msgid ""
">>> list(reversed(Color))\n"
"[<Color.BLUE: 3>, <Color.GREEN: 2>, <Color.RED: 1>]"
msgstr ""
">>> list(reversed(Färg))\n"
"[<Color.BLUE: 3>, <Color.GREEN: 2>, <Color.RED: 1>]"

msgid ""
"Adds a new name as an alias to an existing member.  Raises a :exc:"
"`NameError` if the name is already assigned to a different member."
msgstr ""
"Lägger till ett nytt namn som alias till en befintlig medlem.  Utlöser ett :"
"exc:`NameError` om namnet redan är tilldelat en annan medlem."

msgid ""
"Adds a new value as an alias to an existing member.  Raises a :exc:"
"`ValueError` if the value is already linked with a different member."
msgstr ""
"Lägger till ett nytt värde som ett alias till en befintlig medlem.  Utlöser "
"ett :exc:`ValueError` om värdet redan är länkat till en annan medlem."

msgid ""
"Before 3.11 ``EnumType`` was called ``EnumMeta``, which is still available "
"as an alias."
msgstr ""
"Före 3.11 hette ``EnumType`` ``EnumMeta``, vilket fortfarande finns som "
"alias."

msgid "*Enum* is the base class for all *enum* enumerations."
msgstr "*Enum* är basklassen för alla *enum*-uppräkningar."

msgid "The name used to define the ``Enum`` member::"
msgstr "Det namn som används för att definiera medlemmen ``Enum``::"

msgid ""
">>> Color.BLUE.name\n"
"'BLUE'"
msgstr ""
">>> Färg.BLUE.namn\n"
"'BLÅ'"

msgid "The value given to the ``Enum`` member::"
msgstr "Det värde som ges till ``Enum``-medlemmen::"

msgid ""
">>> Color.RED.value\n"
"1"
msgstr ""
">>> Färg.RED.värde\n"
"1"

msgid "Value of the member, can be set in :meth:`~Enum.__new__`."
msgstr "Värde för medlemmen, kan ställas in i :meth:`~Enum.__new__`."

msgid "Enum member values"
msgstr "Enum-medlemsvärden"

msgid ""
"Member values can be anything: :class:`int`, :class:`str`, etc.  If the "
"exact value is unimportant you may use :class:`auto` instances and an "
"appropriate value will be chosen for you.  See :class:`auto` for the details."
msgstr ""
"Medlemsvärden kan vara vad som helst: :class:`int`, :class:`str`, etc.  Om "
"det exakta värdet är oviktigt kan du använda :class:`auto`-instanser och ett "
"lämpligt värde kommer att väljas åt dig.  Se :class:`auto` för mer "
"information."

msgid ""
"While mutable/unhashable values, such as :class:`dict`, :class:`list` or a "
"mutable :class:`~dataclasses.dataclass`, can be used, they will have a "
"quadratic performance impact during creation relative to the total number of "
"mutable/unhashable values in the enum."
msgstr ""
"Även om muterbara/ohashbara värden, som :class:`dict`, :class:`list` eller "
"en muterbar :class:`~dataclasses.dataclass`, kan användas, kommer de att ha "
"en kvadratisk prestandapåverkan under skapandet i förhållande till det "
"totala antalet muterbara/ohashbara värden i enum."

msgid "Name of the member."
msgstr "Ledamotens namn."

msgid ""
"No longer used, kept for backward compatibility. (class attribute, removed "
"during class creation)."
msgstr ""
"Används inte längre, men behålls för bakåtkompatibilitet. (klassattribut, "
"tas bort när klassen skapas)."

msgid ""
"``_ignore_`` is only used during creation and is removed from the "
"enumeration once creation is complete."
msgstr ""
"``_ignore_`` används endast under skapandet och tas bort från uppräkningen "
"när skapandet är klart."

msgid ""
"``_ignore_`` is a list of names that will not become members, and whose "
"names will also be removed from the completed enumeration.  See :ref:"
"`TimePeriod <enum-time-period>` for an example."
msgstr ""
"``_ignore_`` är en lista med namn som inte kommer att bli medlemmar, och "
"vars namn också kommer att tas bort från den färdiga uppräkningen.  Se :ref:"
"`TimePeriod <enum-time-period>` för ett exempel."

msgid ""
"Returns ``['__class__', '__doc__', '__module__', 'name', 'value']`` and any "
"public methods defined on *self.__class__*::"
msgstr ""
"Returnerar ``['__class__', '__doc__', '__module__', 'name', 'value']`` och "
"alla offentliga metoder som definieras på *self.__class__*::"

msgid ""
">>> from datetime import date\n"
">>> class Weekday(Enum):\n"
"...     MONDAY = 1\n"
"...     TUESDAY = 2\n"
"...     WEDNESDAY = 3\n"
"...     THURSDAY = 4\n"
"...     FRIDAY = 5\n"
"...     SATURDAY = 6\n"
"...     SUNDAY = 7\n"
"...     @classmethod\n"
"...     def today(cls):\n"
"...         print('today is %s' % cls(date.today().isoweekday()).name)\n"
"...\n"
">>> dir(Weekday.SATURDAY)\n"
"['__class__', '__doc__', '__eq__', '__hash__', '__module__', 'name', "
"'today', 'value']"
msgstr ""
">>> from datetime import datum\n"
">>> klass Veckodag(Enum):\n"
"...     MÅNDAG = 1\n"
"...     TISDAG = 2\n"
"...     ONSDAG = 3\n"
"...     TORSDAG = 4\n"
"...     FREDAG = 5\n"
"...     LÖRDAG = 6\n"
"...     SÖNDAG = 7\n"
"...     @klassmetod\n"
"... def idag(cls):\n"
"... print('idag är %s' % cls(date.today().isoweekday()).name)\n"
"...\n"
">>> dir(Veckodag.LÖRDAG)\n"
"['__class__', '__doc__', '__eq__', '__hash__', '__module__', 'name', "
"'today', 'value']"

msgid "name"
msgstr "namn"

msgid "The name of the member being defined (e.g. 'RED')."
msgstr "Namnet på den medlem som ska definieras (t.ex. \"RED\")."

msgid "The start value for the Enum; the default is 1."
msgstr "Startvärdet för Enum; standardvärdet är 1."

msgid "count"
msgstr "antal"

msgid "The number of members currently defined, not including this one."
msgstr "Antalet medlemmar som för närvarande är definierade, exklusive denna."

msgid "last_values"
msgstr "senaste_värden"

msgid "A list of the previous values."
msgstr "En lista över tidigare värden."

msgid ""
"A *staticmethod* that is used to determine the next value returned by :class:"
"`auto`::"
msgstr ""
"En *statisk metod* som används för att bestämma nästa värde som returneras "
"av :class:`auto`::"

msgid ""
">>> from enum import auto\n"
">>> class PowersOfThree(Enum):\n"
"...     @staticmethod\n"
"...     def _generate_next_value_(name, start, count, last_values):\n"
"...         return 3 ** (count + 1)\n"
"...     FIRST = auto()\n"
"...     SECOND = auto()\n"
"...\n"
">>> PowersOfThree.SECOND.value\n"
"9"
msgstr ""
">>> from enum import auto\n"
">>> class PowersOfThree(Enum):\n"
"...     @staticmethod\n"
"...     def _generate_next_value_(name, start, count, last_values):\n"
"...         return 3 ** (count + 1)\n"
"...     FIRST = auto()\n"
"...     SECOND = auto()\n"
"...\n"
">>> PowersOfThree.SECOND.value\n"
"9"

msgid ""
"By default, does nothing.  If multiple values are given in the member "
"assignment, those values become separate arguments to ``__init__``; e.g."
msgstr ""
"Som standard gör den ingenting.  Om flera värden anges i "
"medlemstilldelningen, blir dessa värden separata argument till ``__init__``; "
"t.ex."

msgid ""
"``Weekday.__init__()`` would be called as ``Weekday.__init__(self, 1, "
"'Mon')``"
msgstr ""
"``Weekday.__init__()`` skulle kallas som ``Weekday.__init__(self, 1, 'Mon')``"

msgid ""
"A *classmethod* that is used to further configure subsequent subclasses. By "
"default, does nothing."
msgstr ""
"En *klassmetod* som används för att ytterligare konfigurera efterföljande "
"underklasser. Som standard gör den ingenting."

msgid ""
"A *classmethod* for looking up values not found in *cls*.  By default it "
"does nothing, but can be overridden to implement custom search behavior::"
msgstr ""
"En *klassmetod* för att leta upp värden som inte finns i *cls*.  Som "
"standard gör den ingenting, men kan åsidosättas för att implementera "
"anpassat sökbeteende::"

msgid ""
">>> from enum import StrEnum\n"
">>> class Build(StrEnum):\n"
"...     DEBUG = auto()\n"
"...     OPTIMIZED = auto()\n"
"...     @classmethod\n"
"...     def _missing_(cls, value):\n"
"...         value = value.lower()\n"
"...         for member in cls:\n"
"...             if member.value == value:\n"
"...                 return member\n"
"...         return None\n"
"...\n"
">>> Build.DEBUG.value\n"
"'debug'\n"
">>> Build('deBUG')\n"
"<Build.DEBUG: 'debug'>"
msgstr ""
">>> from enum import StrEnum\n"
">>> klass Bygg(StrEnum):\n"
"...     DEBUG = auto()\n"
"...     OPTIMIZED = auto()\n"
"...     @klassmetod\n"
"... def _missing_(cls, värde):\n"
"... värde = värde.lower()\n"
"... för medlem i cls:\n"
"... if medlem.värde == värde:\n"
"... return medlem\n"
"... return Ingen\n"
"...\n"
">>> Build.DEBUG.värde\n"
"'debug'\n"
">>> Bygg('deBUG')\n"
"<Build.DEBUG: 'debug'>"

msgid ""
"By default, doesn't exist.  If specified, either in the enum class "
"definition or in a mixin class (such as ``int``), all values given in the "
"member assignment will be passed; e.g."
msgstr ""
"Existerar inte som standard.  Om det anges, antingen i enum-"
"klassdefinitionen eller i en mixin-klass (t.ex. ``int``), kommer alla värden "
"som anges i medlemstilldelningen att skickas; t.ex."

msgid ""
"results in the call ``int('1a', 16)`` and a value of ``26`` for the member."
msgstr ""
"resulterar i anropet ``int('1a', 16)`` och ett värde på ``26`` för medlemmen."

msgid ""
"When writing a custom ``__new__``, do not use ``super().__new__`` -- call "
"the appropriate ``__new__`` instead."
msgstr ""
"När du skriver en egen ``__new__`` ska du inte använda ``super().__new__`` - "
"anropa istället lämplig ``__new__``."

msgid ""
"Returns the string used for *repr()* calls.  By default, returns the *Enum* "
"name, member name, and value, but can be overridden::"
msgstr ""
"Returnerar den sträng som används för *repr()*-anrop.  Som standard "
"returneras *Enum*-namnet, medlemsnamnet och värdet, men kan åsidosättas::"

msgid ""
">>> class OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"...     def __repr__(self):\n"
"...         cls_name = self.__class__.__name__\n"
"...         return f'{cls_name}.{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle."
"ALTERNATE}\"\n"
"(OtherStyle.ALTERNATE, 'OtherStyle.ALTERNATE', 'OtherStyle.ALTERNATE')"
msgstr ""
">>> klass OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"... def __repr__(self):\n"
"... cls_name = self.__class__.__name__\n"
"... return f'{cls_name}.{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle."
"ALTERNATE}\"\n"
"(OtherStyle.ALTERNATE, 'OtherStyle.ALTERNATE', 'OtherStyle.ALTERNATE')"

msgid ""
"Returns the string used for *str()* calls.  By default, returns the *Enum* "
"name and member name, but can be overridden::"
msgstr ""
"Returnerar den sträng som används för *str()*-anrop.  Som standard "
"returneras *Enum*-namnet och medlemsnamnet, men kan åsidosättas::"

msgid ""
">>> class OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"...     def __str__(self):\n"
"...         return f'{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle."
"ALTERNATE}\"\n"
"(<OtherStyle.ALTERNATE: 1>, 'ALTERNATE', 'ALTERNATE')"
msgstr ""
">>> klass OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"... def __str__(self):\n"
"... return f'{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle."
"ALTERNATE}\"\n"
"(<OtherStyle.ALTERNATE: 1>, 'ALTERNATE', 'ALTERNATE')"

msgid ""
"Returns the string used for *format()* and *f-string* calls.  By default, "
"returns :meth:`__str__` return value, but can be overridden::"
msgstr ""
"Returnerar strängen som används för *format()* och *f-string*-anrop.  "
"Returnerar som standard :meth:`__str__` returvärde, men kan åsidosättas::"

msgid ""
">>> class OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"...     def __format__(self, spec):\n"
"...         return f'{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle."
"ALTERNATE}\"\n"
"(<OtherStyle.ALTERNATE: 1>, 'OtherStyle.ALTERNATE', 'ALTERNATE')"
msgstr ""
">>> klass OtherStyle(Enum):\n"
"...     ALTERNATE = auto()\n"
"...     OTHER = auto()\n"
"...     SOMETHING_ELSE = auto()\n"
"... def __format__(self, spec):\n"
"... return f'{self.name}'\n"
"...\n"
">>> OtherStyle.ALTERNATE, str(OtherStyle.ALTERNATE), f\"{OtherStyle."
"ALTERNATE}\"\n"
"(<OtherStyle.ALTERNATE: 1>, 'OtherStyle.ALTERNATE', 'ALTERNATE')"

msgid ""
"Using :class:`auto` with :class:`Enum` results in integers of increasing "
"value, starting with ``1``."
msgstr ""
"Att använda :class:`auto` med :class:`Enum` resulterar i heltal med ökande "
"värde, med början på ``1``."

msgid "Added :ref:`enum-dataclass-support`"
msgstr "Lagt till :ref:`enum-dataklass-support`"

msgid ""
"*IntEnum* is the same as :class:`Enum`, but its members are also integers "
"and can be used anywhere that an integer can be used.  If any integer "
"operation is performed with an *IntEnum* member, the resulting value loses "
"its enumeration status."
msgstr ""
"*IntEnum* är samma sak som :class:`Enum`, men dess medlemmar är också heltal "
"och kan användas var som helst där ett heltal kan användas.  Om någon "
"heltalsoperation utförs med en *IntEnum*-medlem förlorar det resulterande "
"värdet sin uppräkningsstatus."

msgid ""
"Using :class:`auto` with :class:`IntEnum` results in integers of increasing "
"value, starting with ``1``."
msgstr ""
"Att använda :class:`auto` med :class:`IntEnum` resulterar i heltal med "
"ökande värde, med början på ``1``."

msgid ""
":meth:`~object.__str__` is now :meth:`!int.__str__` to better support the "
"*replacement of existing constants* use-case. :meth:`~object.__format__` was "
"already :meth:`!int.__format__` for that same reason."
msgstr ""
":meth:`~object.__str__` är nu :meth:`!int.__str__` för att bättre stödja "
"användningsfallet *ersättning av befintliga konstanter*. :meth:`~object."
"__format__` var redan :meth:`!int.__format__` av samma anledning."

msgid ""
"*StrEnum* is the same as :class:`Enum`, but its members are also strings and "
"can be used in most of the same places that a string can be used. The result "
"of any string operation performed on or with a *StrEnum* member is not part "
"of the enumeration."
msgstr ""
"*StrEnum* är samma sak som :class:`Enum`, men dess medlemmar är också "
"strängar och kan användas på de flesta av de ställen där en sträng kan "
"användas. Resultatet av en strängoperation som utförs på eller med en "
"*StrEnum*-medlem är inte en del av uppräkningen."

msgid ""
"There are places in the stdlib that check for an exact :class:`str` instead "
"of a :class:`str` subclass (i.e. ``type(unknown) == str`` instead of "
"``isinstance(unknown, str)``), and in those locations you will need to use "
"``str(MyStrEnum.MY_MEMBER)``."
msgstr ""
"Det finns ställen i stdlib som kontrollerar för en exakt :class:`str` "
"istället för en :class:`str` underklass (t.ex. ``type(unknown) == str`` "
"istället för ``isinstance(unknown, str)``), och på dessa ställen måste du "
"använda ``str(MyStrEnum.MY_MEMBER)``."

msgid ""
"Using :class:`auto` with :class:`StrEnum` results in the lower-cased member "
"name as the value."
msgstr ""
"Om du använder :class:`auto` med :class:`StrEnum` får du det gemena "
"medlemsnamnet som värde."

msgid ""
":meth:`~object.__str__` is :meth:`!str.__str__` to better support the "
"*replacement of existing constants* use-case.  :meth:`~object.__format__` is "
"likewise :meth:`!str.__format__` for that same reason."
msgstr ""
":meth:`~object.__str__` är :meth:`!str.__str__` för att bättre stödja "
"användningsfallet *ersättning av befintliga konstanter*. :meth:`~object."
"__format__` är likaså :meth:`!str.__format__` av samma anledning."

msgid ""
"``Flag`` is the same as :class:`Enum`, but its members support the bitwise "
"operators ``&`` (*AND*), ``|`` (*OR*), ``^`` (*XOR*), and ``~`` (*INVERT*); "
"the results of those operations are (aliases of) members of the enumeration."
msgstr ""
"``Flag`` är samma sak som :class:`Enum`, men dess medlemmar stöder de "
"bitvisa operatorerna ``&`` (*AND*), ``|`` (*OR*), ``^`` (*XOR*) och ``~`` "
"(*INVERT*); resultaten av dessa operationer är (alias för) medlemmar i "
"uppräkningen."

msgid "Returns *True* if value is in self::"
msgstr "Returnerar *True* om värdet finns i self::"

msgid ""
">>> from enum import Flag, auto\n"
">>> class Color(Flag):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> purple = Color.RED | Color.BLUE\n"
">>> white = Color.RED | Color.GREEN | Color.BLUE\n"
">>> Color.GREEN in purple\n"
"False\n"
">>> Color.GREEN in white\n"
"True\n"
">>> purple in white\n"
"True\n"
">>> white in purple\n"
"False"
msgstr ""
">>> from enum import Flag, auto\n"
">>> klass Färg(Flag):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLÅ = auto()\n"
"...\n"
">>> lila = Färg.RED | Färg.BLUE\n"
">>> vit = Färg.RÖD | Färg.GRÖN | Färg.BLÅ\n"
">>> Color.GREEN i lila\n"
"Falsk\n"
">>> Färg.GRÖN i vit\n"
"Sant\n"
">>> lila i vit\n"
"Sant\n"
">>> vit i lila\n"
"Falskt"

msgid "Returns all contained non-alias members::"
msgstr "Returnerar alla ingående icke-alias-medlemmar::"

msgid ""
">>> list(Color.RED)\n"
"[<Color.RED: 1>]\n"
">>> list(purple)\n"
"[<Color.RED: 1>, <Color.BLUE: 4>]"
msgstr ""
">>> list(Färg.RED)\n"
"[<Färg.RÖD: 1>]\n"
">>> list(lila)\n"
"[<Färg.RED: 1>, <Färg.BLUE: 4>]"

msgid "Returns number of members in flag::"
msgstr "Returnerar antalet medlemmar i flag::"

msgid ""
">>> len(Color.GREEN)\n"
"1\n"
">>> len(white)\n"
"3"
msgstr ""
">>> len(Färg.GRÖN)\n"
"1\n"
">>> len(vit)\n"
"3"

msgid "Returns *True* if any members in flag, *False* otherwise::"
msgstr "Returnerar *True* om några medlemmar i flaggan, *False* annars::"

msgid ""
">>> bool(Color.GREEN)\n"
"True\n"
">>> bool(white)\n"
"True\n"
">>> black = Color(0)\n"
">>> bool(black)\n"
"False"
msgstr ""
">>> bool(Färg.GRÖN)\n"
"Sant\n"
">>> bool(vit)\n"
"Sant\n"
">>> svart = Färg(0)\n"
">>> bool(svart)\n"
"Falsk"

msgid "Returns current flag binary or'ed with other::"
msgstr "Returnerar aktuell flagga binärt eller'ed med andra::"

msgid ""
">>> Color.RED | Color.GREEN\n"
"<Color.RED|GREEN: 3>"
msgstr ""
">>> Färg.RED | Färg.GREEN\n"
"<Färg.RED|GREEN: 3>"

msgid "Returns current flag binary and'ed with other::"
msgstr "Returnerar aktuell flagga binärt och'ed med andra::"

msgid ""
">>> purple & white\n"
"<Color.RED|BLUE: 5>\n"
">>> purple & Color.GREEN\n"
"<Color: 0>"
msgstr ""
"&gt;&gt;&gt; lila &amp; vitt\n"
"<Color.RED|BLUE: 5>\n"
"&gt;&gt;&gt; lila &amp; Färg.GRÖN\n"
"<Color: 0>"

msgid "Returns current flag binary xor'ed with other::"
msgstr "Returnerar aktuell flagga binärt xor'ed med andra::"

msgid ""
">>> purple ^ white\n"
"<Color.GREEN: 2>\n"
">>> purple ^ Color.GREEN\n"
"<Color.RED|GREEN|BLUE: 7>"
msgstr ""
">>> lila ^ vit\n"
"<Färg.GRÖN: 2>\n"
">>> lila ^ Färg.GRÖN\n"
"<Färg.RED|GREEN|BLUE: 7>"

msgid "Returns all the flags in *type(self)* that are not in *self*::"
msgstr "Returnerar alla flaggor i *type(self)* som inte finns i *self*::"

msgid ""
">>> ~white\n"
"<Color: 0>\n"
">>> ~purple\n"
"<Color.GREEN: 2>\n"
">>> ~Color.RED\n"
"<Color.GREEN|BLUE: 6>"
msgstr ""
"&gt;&gt;&gt; ~vit\n"
"<Color: 0>\n"
"&gt;&gt;&gt; ~lila\n"
"<Color.GREEN: 2>\n"
"&gt;&gt;&gt; ~Färg.röd\n"
"<Color.GREEN|BLUE: 6>"

msgid ""
"Function used to format any remaining unnamed numeric values.  Default is "
"the value's repr; common choices are :func:`hex` and :func:`oct`."
msgstr ""
"Funktion som används för att formatera eventuella återstående icke namngivna "
"numeriska värden.  Standard är värdets repr; vanliga val är :func:`hex` och :"
"func:`oct`."

msgid ""
"Using :class:`auto` with :class:`Flag` results in integers that are powers "
"of two, starting with ``1``."
msgstr ""
"Om du använder :class:`auto` med :class:`Flag` får du heltal som är potenser "
"av två, med början på ``1``."

msgid "The *repr()* of zero-valued flags has changed.  It is now:"
msgstr "*repr()* för nollvärdesflaggor har ändrats.  Det är det nu:"

msgid ""
"``IntFlag`` is the same as :class:`Flag`, but its members are also integers "
"and can be used anywhere that an integer can be used."
msgstr ""
"``IntFlag`` är samma sak som :class:`Flag`, men dess medlemmar är också "
"heltal och kan användas överallt där ett heltal kan användas."

msgid ""
"If any integer operation is performed with an *IntFlag* member, the result "
"is not an *IntFlag*::"
msgstr ""
"Om en heltalsoperation utförs med en *IntFlag*-medlem är resultatet inte en "
"*IntFlag*::"

msgid ""
">>> Color.RED + 2\n"
"3"
msgstr ""
">>> Färg.RED + 2\n"
"3"

msgid "If a :class:`Flag` operation is performed with an *IntFlag* member and:"
msgstr "Om en :class:`Flag`-operation utförs med en *IntFlag*-medlem och:"

msgid "the result is a valid *IntFlag*: an *IntFlag* is returned"
msgstr "resultatet är en giltig *IntFlag*: en *IntFlag* returneras"

msgid ""
"the result is not a valid *IntFlag*: the result depends on the :class:"
"`FlagBoundary` setting"
msgstr ""
"resultatet är inte en giltig *IntFlag*: resultatet beror på inställningen :"
"class:`FlagBoundary`"

msgid "The :func:`repr` of unnamed zero-valued flags has changed.  It is now::"
msgstr ""
":func:`repr` av icke namngivna nollvärderade flaggor har ändrats.  Den är "
"nu::"

msgid ""
">>> Color(0)\n"
"<Color: 0>"
msgstr ""
"&gt;&gt;&gt; Färg(0)\n"
"<Color: 0>"

msgid ""
"Using :class:`auto` with :class:`IntFlag` results in integers that are "
"powers of two, starting with ``1``."
msgstr ""
"Om du använder :class:`auto` med :class:`IntFlag` får du heltal som är "
"potenser av två, med början på ``1``."

msgid ""
":meth:`~object.__str__` is now :meth:`!int.__str__` to better support the "
"*replacement of existing constants* use-case.  :meth:`~object.__format__` "
"was already :meth:`!int.__format__` for that same reason."
msgstr ""
":meth:`~object.__str__` är nu :meth:`!int.__str__` för att bättre stödja "
"användningsfallet *ersättning av befintliga konstanter*. :meth:`~object."
"__format__` var redan :meth:`!int.__format__` av samma anledning."

msgid ""
"Inversion of an :class:`!IntFlag` now returns a positive value that is the "
"union of all flags not in the given flag, rather than a negative value. This "
"matches the existing :class:`Flag` behavior."
msgstr ""
"Inversion av en :class:`!IntFlag` returnerar nu ett positivt värde som är en "
"sammanslagning av alla flaggor som inte ingår i den givna flaggan, istället "
"för ett negativt värde. Detta matchar det befintliga :class:`Flag`-beteendet."

msgid ""
":class:`!ReprEnum` uses the :meth:`repr() <Enum.__repr__>` of :class:`Enum`, "
"but the :class:`str() <str>` of the mixed-in data type:"
msgstr ""
":class:`!ReprEnum` använder :meth:`repr() <Enum.__repr__>` av :class:`Enum`, "
"men :class:`str() <str>` av den blandade datatypen:"

msgid ":meth:`!int.__str__` for :class:`IntEnum` and :class:`IntFlag`"
msgstr ":meth:`!int.__str__` för :class:`IntEnum` och :class:`IntFlag`"

msgid ":meth:`!str.__str__` for :class:`StrEnum`"
msgstr ":meth:`!str.__str__` for :class:`StrEnum`"

msgid ""
"Inherit from :class:`!ReprEnum` to keep the :class:`str() <str>` / :func:"
"`format` of the mixed-in data type instead of using the :class:`Enum`-"
"default :meth:`str() <Enum.__str__>`."
msgstr ""
"Ärv från :class:`!ReprEnum` för att behålla :class:`str() <str>` / :func:"
"`format` för den blandade datatypen istället för att använda :class:`Enum`-"
"standard :meth:`str() <Enum.__str__>`."

msgid ""
"*EnumCheck* contains the options used by the :func:`verify` decorator to "
"ensure various constraints; failed constraints result in a :exc:`ValueError`."
msgstr ""
"*EnumCheck* innehåller de alternativ som används av :func:`verify`-"
"dekoratorn för att säkerställa olika begränsningar; misslyckade "
"begränsningar resulterar i ett :exc:`ValueError`."

msgid "Ensure that each value has only one name::"
msgstr "Se till att varje värde bara har ett namn::"

msgid ""
">>> from enum import Enum, verify, UNIQUE\n"
">>> @verify(UNIQUE)\n"
"... class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 3\n"
"...     CRIMSON = 1\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: aliases found in <enum 'Color'>: CRIMSON -> RED"
msgstr ""
">>> from enum import Enum, verifiera, UNIQUE\n"
">>> @verifiera(UNIQUE)\n"
"... klass Färg(Enum):\n"
"...     RED = 1\n"
"...     GRÖN = 2\n"
"...     BLÅ = 3\n"
"...     CRIMSON = 1\n"
"Återkoppling (senaste anropet senast):\n"
"...\n"
"ValueError: alias hittades i <enum 'Color'>: CRIMSON -> RÖD"

msgid ""
"Ensure that there are no missing values between the lowest-valued member and "
"the highest-valued member::"
msgstr ""
"Se till att det inte saknas några värden mellan den lägst värderade "
"medlemmen och den högst värderade medlemmen::"

msgid ""
">>> from enum import Enum, verify, CONTINUOUS\n"
">>> @verify(CONTINUOUS)\n"
"... class Color(Enum):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 5\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: invalid enum 'Color': missing values 3, 4"
msgstr ""
">>> from enum import Enum, verifiera, KONTINUERLIG\n"
">>> @verifiera(KONTINUERLIG)\n"
"... klass Färg(Enum):\n"
"...     RED = 1\n"
"...     GRÖN = 2\n"
"...     BLÅ = 5\n"
"Traceback (senaste anropet senast):\n"
"...\n"
"ValueError: ogiltigt enum 'Color': saknar värdena 3, 4"

msgid ""
"Ensure that any flag groups/masks contain only named flags -- useful when "
"values are specified instead of being generated by :func:`auto`::"
msgstr ""
"Se till att alla flagggrupper/masker endast innehåller namngivna flaggor -- "
"användbart när värden anges istället för att genereras av :func:`auto`::"

msgid ""
">>> from enum import Flag, verify, NAMED_FLAGS\n"
">>> @verify(NAMED_FLAGS)\n"
"... class Color(Flag):\n"
"...     RED = 1\n"
"...     GREEN = 2\n"
"...     BLUE = 4\n"
"...     WHITE = 15\n"
"...     NEON = 31\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: invalid Flag 'Color': aliases WHITE and NEON are missing "
"combined values of 0x18 [use enum.show_flag_values(value) for details]"
msgstr ""
">>> from enum import Flag, verifiera, NAMED_FLAGS\n"
">>> @verifiera(NAMED_FLAGS)\n"
"... klass Färg(Flag):\n"
"...     RED = 1\n"
"...     GRÖN = 2\n"
"...     BLÅ = 4\n"
"...     VIT = 15\n"
"...     NEON = 31\n"
"Återkoppling (senaste anropet senast):\n"
"...\n"
"ValueError: ogiltig flagga 'Color': aliasen WHITE och NEON saknar "
"kombinerade värden på 0x18 [använd enum.show_flag_values(value) för detaljer]"

msgid ""
"CONTINUOUS and NAMED_FLAGS are designed to work with integer-valued members."
msgstr ""
"CONTINUOUS och NAMED_FLAGS är utformade för att fungera med heltalsvärderade "
"medlemmar."

msgid ""
"``FlagBoundary`` controls how out-of-range values are handled in :class:"
"`Flag` and its subclasses."
msgstr ""
"``FlagBoundary`` styr hur värden utanför intervallet hanteras i :class:"
"`Flag` och dess underklasser."

msgid ""
"Out-of-range values cause a :exc:`ValueError` to be raised. This is the "
"default for :class:`Flag`::"
msgstr ""
"Värden utanför intervallet ger upphov till ett :exc:`ValueError`. Detta är "
"standardvärdet för :class:`Flag`::"

msgid ""
">>> from enum import Flag, STRICT, auto\n"
">>> class StrictFlag(Flag, boundary=STRICT):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> StrictFlag(2**2 + 2**4)\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: <flag 'StrictFlag'> invalid value 20\n"
"    given 0b0 10100\n"
"  allowed 0b0 00111"
msgstr ""
">>> from enum import Flag, STRICT, auto\n"
">>> class StrictFlag(Flag, boundary=STRICT):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLÅ = auto()\n"
"...\n"
">>> StrictFlag(2**2 + 2**4)\n"
"Traceback (senaste anropet sist):\n"
"...\n"
"ValueError: <flag 'StrictFlag'> ogiltigt värde 20\n"
"    givet 0b0 10100\n"
"  tillåtet 0b0 00111"

msgid ""
"Out-of-range values have invalid values removed, leaving a valid :class:"
"`Flag` value::"
msgstr ""
"Värden utanför intervallet har ogiltiga värden borttagna, vilket lämnar ett "
"giltigt :class:`Flag`-värde::"

msgid ""
">>> from enum import Flag, CONFORM, auto\n"
">>> class ConformFlag(Flag, boundary=CONFORM):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> ConformFlag(2**2 + 2**4)\n"
"<ConformFlag.BLUE: 4>"
msgstr ""
">>> from enum import Flag, CONFORM, auto\n"
">>> class ConformFlag(Flag, boundary=CONFORM):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLÅ = auto()\n"
"...\n"
">>> ConformFlag(2**2 + 2**4)\n"
"<KonformFlag.BLÅ: 4>"

msgid ""
"Out-of-range values lose their :class:`Flag` membership and revert to :class:"
"`int`."
msgstr ""
"Värden utanför intervallet förlorar sitt medlemskap i :class:`Flag` och "
"återgår till :class:`int`."

msgid ""
"Out-of-range values are kept, and the :class:`Flag` membership is kept. This "
"is the default for :class:`IntFlag`::"
msgstr ""
"Värden utanför intervallet behålls och medlemskapet i :class:`Flag` behålls. "
"Detta är standardinställningen för :class:`IntFlag`::"

msgid ""
">>> from enum import Flag, KEEP, auto\n"
">>> class KeepFlag(Flag, boundary=KEEP):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLUE = auto()\n"
"...\n"
">>> KeepFlag(2**2 + 2**4)\n"
"<KeepFlag.BLUE|16: 20>"
msgstr ""
">>> from enum import Flag, KEEP, auto\n"
">>> class KeepFlag(Flag, boundary=KEEP):\n"
"...     RED = auto()\n"
"...     GREEN = auto()\n"
"...     BLÅ = auto()\n"
"...\n"
">>> KeepFlag(2**2 + 2**4)\n"
"<KeepFlag.BLUE|16: 20>"

msgid ""
"*EnumDict* is a subclass of :class:`dict` that is used as the namespace for "
"defining enum classes (see :ref:`prepare`). It is exposed to allow "
"subclasses of :class:`EnumType` with advanced behavior like having multiple "
"values per member. It should be called with the name of the enum class being "
"created, otherwise private names and internal classes will not be handled "
"correctly."
msgstr ""
"*EnumDict* är en subklass av :class:`dict` som används som namnrymd för att "
"definiera enumklasser (se :ref:`prepare`). Den är exponerad för att tillåta "
"subklasser av :class:`EnumType` med avancerat beteende som att ha flera "
"värden per medlem. Den bör anropas med namnet på den enumklass som skapas, "
"annars kommer privata namn och interna klasser inte att hanteras korrekt."

msgid ""
"Note that only the :class:`~collections.abc.MutableMapping` interface (:meth:"
"`~object.__setitem__` and :meth:`~dict.update`) is overridden. It may be "
"possible to bypass the checks using other :class:`!dict` operations like :"
"meth:`|= <object.__ior__>`."
msgstr ""
"Observera att endast gränssnittet :class:`~collections.abc.MutableMapping` (:"
"meth:`~object.__setitem__` och :meth:`~dict.update`) åsidosätts. Det kan "
"vara möjligt att kringgå kontrollerna genom att använda andra :class:`!dict`-"
"operationer som :meth:`|= <object.__ior__>`."

msgid "A list of member names."
msgstr "En lista med medlemmarnas namn."

msgid "Supported ``__dunder__`` names"
msgstr "Namn som stöds för ``__dunder__``"

msgid ""
":attr:`~EnumType.__members__` is a read-only ordered mapping of "
"``member_name``:``member`` items.  It is only available on the class."
msgstr ""
":attr:`~EnumType.__members__` är en skrivskyddad ordnad mappning av "
"``member_name``:``member`` objekt.  Den är endast tillgänglig för klassen."

msgid ""
":meth:`~Enum.__new__`, if specified, must create and return the enum "
"members; it is also a very good idea to set the member's :attr:`!_value_` "
"appropriately. Once all the members are created it is no longer used."
msgstr ""
":meth:`~Enum.__new__`, om det anges, måste skapa och returnera enum-"
"medlemmarna; det är också en mycket bra idé att ställa in medlemmens :attr:`!"
"_value_` på lämpligt sätt. När alla medlemmar är skapade används den inte "
"längre."

msgid "Supported ``_sunder_`` names"
msgstr "Namn med stöd för ``_sunder_``"

msgid ""
":meth:`~EnumType._add_alias_` -- adds a new name as an alias to an existing "
"member."
msgstr ""
":meth:`~EnumType._add_alias_` -- lägger till ett nytt namn som alias till en "
"befintlig medlem."

msgid ""
":meth:`~EnumType._add_value_alias_` -- adds a new value as an alias to an "
"existing member."
msgstr ""
":meth:`~EnumType._add_value_alias_` -- lägger till ett nytt värde som ett "
"alias till en befintlig medlem."

msgid ":attr:`~Enum._name_` -- name of the member"
msgstr ":attr:`~Enum._name_` -- namnet på medlemmen"

msgid ":attr:`~Enum._value_` -- value of the member; can be set in ``__new__``"
msgstr ""
":attr:`~Enum._value_` -- medlemmens värde; kan ställas in i ``__new__``"

msgid ""
":meth:`~Enum._missing_` -- a lookup function used when a value is not found; "
"may be overridden"
msgstr ""
":meth:`~Enum._missing_` -- en uppslagningsfunktion som används när ett värde "
"inte hittas; kan åsidosättas"

msgid ""
":attr:`~Enum._ignore_` -- a list of names, either as a :class:`list` or a :"
"class:`str`, that will not be transformed into members, and will be removed "
"from the final class"
msgstr ""
":attr:`~Enum._ignore_` -- en lista med namn, antingen som en :class:`list` "
"eller en :class:`str`, som inte kommer att omvandlas till medlemmar och som "
"kommer att tas bort från den slutliga klassen"

msgid ""
":attr:`~Enum._order_` -- no longer used, kept for backward compatibility "
"(class attribute, removed during class creation)"
msgstr ""
":attr:`~Enum._order_` -- används inte längre, behålls för "
"bakåtkompatibilitet (klassattribut, tas bort när klassen skapas)"

msgid ""
":meth:`~Enum._generate_next_value_` -- used to get an appropriate value for "
"an enum member; may be overridden"
msgstr ""
":meth:`~Enum._generate_next_value_` -- används för att få ett lämpligt värde "
"för en enum-medlem; kan åsidosättas"

msgid ""
"For standard :class:`Enum` classes the next value chosen is the highest "
"value seen incremented by one."
msgstr ""
"För standardklasserna :class:`Enum` är nästa värde som väljs det högsta "
"värde som setts, ökat med ett."

msgid ""
"For :class:`Flag` classes the next value chosen will be the next highest "
"power-of-two."
msgstr ""
"För klasserna :class:`Flag` kommer nästa värde som väljs att vara den näst "
"högsta tvåpotensen."

msgid ""
"While ``_sunder_`` names are generally reserved for the further development "
"of the :class:`Enum` class and can not be used, some are explicitly allowed:"
msgstr ""
"Även om ``_sunder_``-namn i allmänhet är reserverade för vidareutveckling av "
"klassen :class:`Enum` och inte kan användas, är vissa uttryckligen tillåtna:"

msgid ""
"``_repr_*`` (e.g. ``_repr_html_``), as used in `IPython's rich display`_"
msgstr ""
"``_repr_*`` (t.ex. ``_repr_html_``), som används i `IPythons rika display`_"

msgid "``_missing_``, ``_order_``, ``_generate_next_value_``"
msgstr "``_missing_``, ``_order_``, ``_generate_next_value_``"

msgid "``_ignore_``"
msgstr "``_ignore_``"

msgid "``_add_alias_``, ``_add_value_alias_``, ``_repr_*``"
msgstr "``_add_alias_``, ``_add_value_alias_``, ``_repr_*``"

msgid "Utilities and Decorators"
msgstr "Verktyg och dekoratörer"

msgid ""
"*auto* can be used in place of a value.  If used, the *Enum* machinery will "
"call an :class:`Enum`'s :meth:`~Enum._generate_next_value_` to get an "
"appropriate value. For :class:`Enum` and :class:`IntEnum` that appropriate "
"value will be the last value plus one; for :class:`Flag` and :class:"
"`IntFlag` it will be the first power-of-two greater than the highest value; "
"for :class:`StrEnum` it will be the lower-cased version of the member's "
"name.  Care must be taken if mixing *auto()* with manually specified values."
msgstr ""
"*auto* kan användas i stället för ett värde.  Om det används kommer *Enum*-"
"maskineriet att anropa :class:`Enum`:s :meth:`~Enum._generate_next_value_` "
"för att få ett lämpligt värde. För :class:`Enum` och :class:`IntEnum` kommer "
"det lämpliga värdet att vara det sista värdet plus ett; för :class:`Flag` "
"och :class:`IntFlag` kommer det att vara den första tvåpotensen större än "
"det högsta värdet; för :class:`StrEnum` kommer det att vara den gemena "
"versionen av medlemmens namn.  Försiktighet måste iakttas om *auto()* "
"blandas med manuellt angivna värden."

msgid ""
"*auto* instances are only resolved when at the top level of an assignment:"
msgstr ""
"*auto*-instanser löses endast när de befinner sig på den högsta nivån i ett "
"uppdrag:"

msgid "``FIRST = auto()`` will work (auto() is replaced with ``1``);"
msgstr "``FIRST = auto()`` kommer att fungera (auto() ersätts med ``1``);"

msgid ""
"``SECOND = auto(), -2`` will work (auto is replaced with ``2``, so ``2, -2`` "
"is used to create the ``SECOND`` enum member;"
msgstr ""
"``SECOND = auto(), -2`` kommer att fungera (auto ersätts med ``2``, så ``2, "
"-2`` används för att skapa enummedlemmen ``SECOND``;"

msgid ""
"``THREE = [auto(), -3]`` will *not* work (``<auto instance>, -3`` is used to "
"create the ``THREE`` enum member)"
msgstr ""
"``THREE = [auto(), -3]`` kommer *inte* att fungera (``<auto instance>, -3`` "
"används för att skapa enummedlemmen ``THREE``)"

msgid ""
"In prior versions, ``auto()`` had to be the only thing on the assignment "
"line to work properly."
msgstr ""
"I tidigare versioner var ``auto()`` tvungen att vara det enda på "
"tilldelningsraden för att fungera korrekt."

msgid ""
"``_generate_next_value_`` can be overridden to customize the values used by "
"*auto*."
msgstr ""
"``_generate_next_value_`` kan åsidosättas för att anpassa de värden som "
"används av *auto*."

msgid ""
"in 3.13 the default ``_generate_next_value_`` will always return the highest "
"member value incremented by 1, and will fail if any member is an "
"incompatible type."
msgstr ""
"i 3.13 kommer standardinställningen ``_generate_next_value_`` alltid att "
"returnera det högsta medlemsvärdet ökat med 1, och kommer att misslyckas om "
"någon medlem är en inkompatibel typ."

msgid ""
"A decorator similar to the built-in *property*, but specifically for "
"enumerations.  It allows member attributes to have the same names as members "
"themselves."
msgstr ""
"En dekorator som liknar den inbyggda *property*, men som är specifik för "
"uppräkningar.  Den gör det möjligt för medlemsattribut att ha samma namn som "
"medlemmarna själva."

msgid ""
"the *property* and the member must be defined in separate classes; for "
"example, the *value* and *name* attributes are defined in the *Enum* class, "
"and *Enum* subclasses can define members with the names ``value`` and "
"``name``."
msgstr ""
"*egenskapen* och medlemmen måste definieras i separata klasser; till exempel "
"definieras attributen *värde* och *namn* i klassen *Enum*, och underklasser "
"till *Enum* kan definiera medlemmar med namnen ``värde`` och ``namn``."

msgid ""
"A :keyword:`class` decorator specifically for enumerations.  It searches an "
"enumeration's :attr:`~EnumType.__members__`, gathering any aliases it finds; "
"if any are found :exc:`ValueError` is raised with the details::"
msgstr ""
"En :keyword:`class`-dekorator speciellt för uppräkningar.  Den söker igenom "
"en uppräknings :attr:`~EnumType.__members__` och samlar in alla alias som "
"den hittar; om några hittas :exc:`ValueError` skapas med detaljerna::"

msgid ""
">>> from enum import Enum, unique\n"
">>> @unique\n"
"... class Mistake(Enum):\n"
"...     ONE = 1\n"
"...     TWO = 2\n"
"...     THREE = 3\n"
"...     FOUR = 3\n"
"...\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: duplicate values found in <enum 'Mistake'>: FOUR -> THREE"
msgstr ""
">>> from enum import Enum, unik\n"
">>> @unique\n"
"... klass Misstag(Enum):\n"
"...     ONE = 1\n"
"...     TVÅ = 2\n"
"...     TRE = 3\n"
"...     FOUR = 3\n"
"...\n"
"Återkoppling (senaste anropet senast):\n"
"...\n"
"ValueError: duplicerade värden hittades i <enum 'Misstag'>: FOUR -> THREE"

msgid ""
"A :keyword:`class` decorator specifically for enumerations.  Members from :"
"class:`EnumCheck` are used to specify which constraints should be checked on "
"the decorated enumeration."
msgstr ""
"En :keyword:`class`-dekorator speciellt för uppräkningar.  Medlemmar från :"
"class:`EnumCheck` används för att ange vilka begränsningar som ska "
"kontrolleras på den dekorerade uppräkningen."

msgid "A decorator for use in enums: its target will become a member."
msgstr "En dekorator för användning i enumer: dess mål blir en medlem."

msgid "A decorator for use in enums: its target will not become a member."
msgstr ""
"En dekorator för användning i enumer: dess mål kommer inte att bli medlem."

msgid ""
"A decorator to change the :class:`str() <str>` and :func:`repr` of an enum "
"to show its members as belonging to the module instead of its class. Should "
"only be used when the enum members are exported to the module global "
"namespace (see :class:`re.RegexFlag` for an example)."
msgstr ""
"En dekorator för att ändra :class:`str() <str>` och :func:`repr` för ett "
"enum så att dess medlemmar visas som tillhörande modulen istället för dess "
"klass. Bör endast användas när enum-medlemmarna exporteras till modulens "
"globala namnrymd (se :class:`re.RegexFlag` för ett exempel)."

msgid "Return a list of all power-of-two integers contained in a flag *value*."
msgstr "Returnerar en lista med alla tvåpotenstal som ingår i flaggan *value*."

msgid "Notes"
msgstr "Anteckningar"

msgid ":class:`IntEnum`, :class:`StrEnum`, and :class:`IntFlag`"
msgstr ":class:`IntEnum`, :class:`StrEnum`, och :class:`IntFlag`"

msgid ""
"These three enum types are designed to be drop-in replacements for existing "
"integer- and string-based values; as such, they have extra limitations:"
msgstr ""
"Dessa tre enumtyper är utformade för att ersätta befintliga heltals- och "
"strängbaserade värden, och de har därför extra begränsningar:"

msgid "``__str__`` uses the value and not the name of the enum member"
msgstr "``__str__`` använder värdet och inte namnet på enum-medlemmen"

msgid ""
"``__format__``, because it uses ``__str__``, will also use the value of the "
"enum member instead of its name"
msgstr ""
"eftersom ``__format__`` använder ``__str__`` använder den också värdet på "
"enum-medlemmen i stället för dess namn"

msgid ""
"If you do not need/want those limitations, you can either create your own "
"base class by mixing in the ``int`` or ``str`` type yourself::"
msgstr ""
"Om du inte behöver/vill ha dessa begränsningar kan du antingen skapa din "
"egen basklass genom att själv blanda in typen ``int`` eller ``str``::"

msgid ""
">>> from enum import Enum\n"
">>> class MyIntEnum(int, Enum):\n"
"...     pass"
msgstr ""
">>> from enum import Enum\n"
">>> klass MyIntEnum(int, Enum):\n"
"... pass"

msgid "or you can reassign the appropriate :meth:`str`, etc., in your enum::"
msgstr "eller så kan du omfördela lämplig :meth:`str`, etc., i din enum::"

msgid ""
">>> from enum import Enum, IntEnum\n"
">>> class MyIntEnum(IntEnum):\n"
"...     __str__ = Enum.__str__"
msgstr ""
">>> from enum import Enum, IntEnum\n"
">>> klass MyIntEnum(IntEnum):\n"
"...     __str__ = Enum.__str__"
