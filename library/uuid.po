# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!uuid` --- UUID objects according to :rfc:`9562`"
msgstr ""

msgid "**Source code:** :source:`Lib/uuid.py`"
msgstr ""

msgid ""
"This module provides immutable :class:`UUID` objects (the :class:`UUID` "
"class) and :ref:`functions <uuid-factory-functions>` for generating UUIDs "
"corresponding to a specific UUID version as specified in :rfc:`9562` (which "
"supersedes :rfc:`4122`), for example, :func:`uuid1` for UUID version 1, :"
"func:`uuid3` for UUID version 3, and so on. Note that UUID version 2 is "
"deliberately omitted as it is outside the scope of the RFC."
msgstr ""

msgid ""
"If all you want is a unique ID, you should probably call :func:`uuid1` or :"
"func:`uuid4`.  Note that :func:`uuid1` may compromise privacy since it "
"creates a UUID containing the computer's network address.  :func:`uuid4` "
"creates a random UUID."
msgstr ""

msgid ""
"Depending on support from the underlying platform, :func:`uuid1` may or may "
"not return a \"safe\" UUID.  A safe UUID is one which is generated using "
"synchronization methods that ensure no two processes can obtain the same "
"UUID.  All instances of :class:`UUID` have an :attr:`~UUID.is_safe` "
"attribute which relays any information about the UUID's safety, using this "
"enumeration:"
msgstr ""

msgid "The UUID was generated by the platform in a multiprocessing-safe way."
msgstr ""

msgid "The UUID was not generated in a multiprocessing-safe way."
msgstr ""

msgid ""
"The platform does not provide information on whether the UUID was generated "
"safely or not."
msgstr ""

msgid ""
"Create a UUID from either a string of 32 hexadecimal digits, a string of 16 "
"bytes in big-endian order as the *bytes* argument, a string of 16 bytes in "
"little-endian order as the *bytes_le* argument, a tuple of six integers (32-"
"bit *time_low*, 16-bit *time_mid*, 16-bit *time_hi_version*, 8-bit "
"*clock_seq_hi_variant*, 8-bit *clock_seq_low*, 48-bit *node*) as the "
"*fields* argument, or a single 128-bit integer as the *int* argument. When a "
"string of hex digits is given, curly braces, hyphens, and a URN prefix are "
"all optional.  For example, these expressions all yield the same UUID::"
msgstr ""

msgid ""
"UUID('{12345678-1234-5678-1234-567812345678}')\n"
"UUID('12345678123456781234567812345678')\n"
"UUID('urn:uuid:12345678-1234-5678-1234-567812345678')\n"
"UUID(bytes=b'\\x12\\x34\\x56\\x78'*4)\n"
"UUID(bytes_le=b'\\x78\\x56\\x34\\x12\\x34\\x12\\x78\\x56' +\n"
"              b'\\x12\\x34\\x56\\x78\\x12\\x34\\x56\\x78')\n"
"UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))\n"
"UUID(int=0x12345678123456781234567812345678)"
msgstr ""

msgid ""
"Exactly one of *hex*, *bytes*, *bytes_le*, *fields*, or *int* must be given. "
"The *version* argument is optional; if given, the resulting UUID will have "
"its variant and version number set according to :rfc:`9562`, overriding bits "
"in the given *hex*, *bytes*, *bytes_le*, *fields*, or *int*."
msgstr ""

msgid ""
"Comparison of UUID objects are made by way of comparing their :attr:`UUID."
"int` attributes.  Comparison with a non-UUID object raises a :exc:"
"`TypeError`."
msgstr ""

msgid ""
"``str(uuid)`` returns a string in the form "
"``12345678-1234-5678-1234-567812345678`` where the 32 hexadecimal digits "
"represent the UUID."
msgstr ""

msgid ":class:`UUID` instances have these read-only attributes:"
msgstr ""

msgid ""
"The UUID as a 16-byte string (containing the six integer fields in big-"
"endian byte order)."
msgstr ""

msgid ""
"The UUID as a 16-byte string (with *time_low*, *time_mid*, and "
"*time_hi_version* in little-endian byte order)."
msgstr ""

msgid ""
"A tuple of the six integer fields of the UUID, which are also available as "
"six individual attributes and two derived attributes:"
msgstr ""

msgid "Field"
msgstr ""

msgid "Meaning"
msgstr ""

msgid "The first 32 bits of the UUID. Only relevant to version 1."
msgstr ""

msgid "The next 16 bits of the UUID. Only relevant to version 1."
msgstr ""

msgid "The next 8 bits of the UUID. Only relevant to versions 1 and 6."
msgstr ""

msgid "The last 48 bits of the UUID. Only relevant to version 1."
msgstr ""

msgid ""
"The 60-bit timestamp as a count of 100-nanosecond intervals since Gregorian "
"epoch (1582-10-15 00:00:00) for versions 1 and 6, or the 48-bit timestamp in "
"milliseconds since Unix epoch (1970-01-01 00:00:00) for version 7."
msgstr ""

msgid "The 14-bit sequence number. Only relevant to versions 1 and 6."
msgstr ""

msgid "The UUID as a 32-character lowercase hexadecimal string."
msgstr ""

msgid "The UUID as a 128-bit integer."
msgstr ""

msgid "The UUID as a URN as specified in :rfc:`9562`."
msgstr ""

msgid ""
"The UUID variant, which determines the internal layout of the UUID. This "
"will be one of the constants :const:`RESERVED_NCS`, :const:`RFC_4122`, :"
"const:`RESERVED_MICROSOFT`, or :const:`RESERVED_FUTURE`."
msgstr ""

msgid ""
"The UUID version number (1 through 8, meaningful only when the variant is :"
"const:`RFC_4122`)."
msgstr ""

msgid "Added UUID versions 6, 7 and 8."
msgstr ""

msgid ""
"An enumeration of :class:`SafeUUID` which indicates whether the platform "
"generated the UUID in a multiprocessing-safe way."
msgstr ""

msgid "The :mod:`uuid` module defines the following functions:"
msgstr ""

msgid ""
"Get the hardware address as a 48-bit positive integer.  The first time this "
"runs, it may launch a separate program, which could be quite slow.  If all "
"attempts to obtain the hardware address fail, we choose a random 48-bit "
"number with the multicast bit (least significant bit of the first octet) set "
"to 1 as recommended in :rfc:`4122`.  \"Hardware address\" means the MAC "
"address of a network interface.  On a machine with multiple network "
"interfaces, universally administered MAC addresses (i.e. where the second "
"least significant bit of the first octet is *unset*) will be preferred over "
"locally administered MAC addresses, but with no other ordering guarantees."
msgstr ""

msgid ""
"Universally administered MAC addresses are preferred over locally "
"administered MAC addresses, since the former are guaranteed to be globally "
"unique, while the latter are not."
msgstr ""

msgid ""
"Generate a UUID from a host ID, sequence number, and the current time "
"according to :rfc:`RFC 9562, §5.1 <9562#section-5.1>`."
msgstr ""

msgid ""
"When *node* is not specified, :func:`getnode` is used to obtain the hardware "
"address as a 48-bit positive integer. When a sequence number *clock_seq* is "
"not specified, a pseudo-random 14-bit positive integer is generated."
msgstr ""

msgid ""
"If *node* or *clock_seq* exceed their expected bit count, only their least "
"significant bits are kept."
msgstr ""

msgid ""
"Generate a UUID based on the MD5 hash of a namespace identifier (which is a "
"UUID) and a name (which is a :class:`bytes` object or a string that will be "
"encoded using UTF-8) according to :rfc:`RFC 9562, §5.3 <9562#section-5.3>`."
msgstr ""

msgid ""
"Generate a random UUID in a cryptographically-secure method according to :"
"rfc:`RFC 9562, §5.4 <9562#section-5.4>`."
msgstr ""

msgid ""
"Generate a UUID based on the SHA-1 hash of a namespace identifier (which is "
"a UUID) and a name (which is a :class:`bytes` object or a string that will "
"be encoded using UTF-8) according to :rfc:`RFC 9562, §5.5 "
"<9562#section-5.5>`."
msgstr ""

msgid ""
"Generate a UUID from a sequence number and the current time according to :"
"rfc:`RFC 9562, §5.6 <9562#section-5.6>`."
msgstr ""

msgid "This is an alternative to :func:`uuid1` to improve database locality."
msgstr ""

msgid ""
"Generate a time-based UUID according to :rfc:`RFC 9562, §5.7 "
"<9562#section-5.7>`."
msgstr ""

msgid ""
"For portability across platforms lacking sub-millisecond precision, UUIDs "
"produced by this function embed a 48-bit timestamp and use a 42-bit counter "
"to guarantee monotonicity within a millisecond."
msgstr ""

msgid ""
"Generate a pseudo-random UUID according to :rfc:`RFC 9562, §5.8 "
"<9562#section-5.8>`."
msgstr ""

msgid ""
"When specified, the parameters *a*, *b* and *c* are expected to be positive "
"integers of 48, 12 and 62 bits respectively. If they exceed their expected "
"bit count, only their least significant bits are kept; non-specified "
"arguments are substituted for a pseudo-random integer of appropriate size."
msgstr ""

msgid ""
"By default, *a*, *b* and *c* are not generated by a cryptographically secure "
"pseudo-random number generator (CSPRNG). Use :func:`uuid4` when a UUID needs "
"to be used in a security-sensitive context."
msgstr ""

msgid ""
"The :mod:`uuid` module defines the following namespace identifiers for use "
"with :func:`uuid3` or :func:`uuid5`."
msgstr ""

msgid ""
"When this namespace is specified, the *name* string is a fully qualified "
"domain name."
msgstr ""

msgid "When this namespace is specified, the *name* string is a URL."
msgstr ""

msgid "When this namespace is specified, the *name* string is an ISO OID."
msgstr ""

msgid ""
"When this namespace is specified, the *name* string is an X.500 DN in DER or "
"a text output format."
msgstr ""

msgid ""
"The :mod:`uuid` module defines the following constants for the possible "
"values of the :attr:`~UUID.variant` attribute:"
msgstr ""

msgid "Reserved for NCS compatibility."
msgstr ""

msgid ""
"Specifies the UUID layout given in :rfc:`4122`. This constant is kept for "
"backward compatibility even though :rfc:`4122` has been superseded by :rfc:"
"`9562`."
msgstr ""

msgid "Reserved for Microsoft compatibility."
msgstr ""

msgid "Reserved for future definition."
msgstr ""

msgid "The :mod:`uuid` module defines the special Nil and Max UUID values:"
msgstr ""

msgid ""
"A special form of UUID that is specified to have all 128 bits set to zero "
"according to :rfc:`RFC 9562, §5.9 <9562#section-5.9>`."
msgstr ""

msgid ""
"A special form of UUID that is specified to have all 128 bits set to one "
"according to :rfc:`RFC 9562, §5.10 <9562#section-5.10>`."
msgstr ""

msgid ":rfc:`9562` - A Universally Unique IDentifier (UUID) URN Namespace"
msgstr ""

msgid ""
"This specification defines a Uniform Resource Name namespace for UUIDs, the "
"internal format of UUIDs, and methods of generating UUIDs."
msgstr ""

msgid "Command-Line Usage"
msgstr ""

msgid ""
"The :mod:`uuid` module can be executed as a script from the command line."
msgstr ""

msgid ""
"python -m uuid [-h] [-u {uuid1,uuid3,uuid4,uuid5,uuid6,uuid7,uuid8}] [-n "
"NAMESPACE] [-N NAME]"
msgstr ""

msgid "The following options are accepted:"
msgstr ""

msgid "Show the help message and exit."
msgstr ""

msgid ""
"Specify the function name to use to generate the uuid. By default :func:"
"`uuid4` is used."
msgstr ""

msgid "Allow generating UUID versions 6, 7 and 8."
msgstr ""

msgid ""
"The namespace is a ``UUID``, or ``@ns`` where ``ns`` is a well-known "
"predefined UUID addressed by namespace name. Such as ``@dns``, ``@url``, "
"``@oid``, and ``@x500``. Only required for :func:`uuid3` / :func:`uuid5` "
"functions."
msgstr ""

msgid ""
"The name used as part of generating the uuid. Only required for :func:"
"`uuid3` / :func:`uuid5` functions."
msgstr ""

msgid "Generate *num* fresh UUIDs."
msgstr ""

msgid "Example"
msgstr ""

msgid "Here are some examples of typical usage of the :mod:`uuid` module::"
msgstr ""

msgid ""
">>> import uuid\n"
"\n"
">>> # make a UUID based on the host ID and current time\n"
">>> uuid.uuid1()\n"
"UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')\n"
"\n"
">>> # make a UUID using an MD5 hash of a namespace UUID and a name\n"
">>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')\n"
"UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')\n"
"\n"
">>> # make a random UUID\n"
">>> uuid.uuid4()\n"
"UUID('16fd2706-8baf-433b-82eb-8c7fada847da')\n"
"\n"
">>> # make a UUID using a SHA-1 hash of a namespace UUID and a name\n"
">>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')\n"
"UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')\n"
"\n"
">>> # make a UUID from a string of hex digits (braces and hyphens ignored)\n"
">>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')\n"
"\n"
">>> # convert a UUID to a string of hex digits in standard form\n"
">>> str(x)\n"
"'00010203-0405-0607-0809-0a0b0c0d0e0f'\n"
"\n"
">>> # get the raw 16 bytes of the UUID\n"
">>> x.bytes\n"
"b'\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'\n"
"\n"
">>> # make a UUID from a 16-byte string\n"
">>> uuid.UUID(bytes=x.bytes)\n"
"UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')\n"
"\n"
">>> # get the Nil UUID\n"
">>> uuid.NIL\n"
"UUID('00000000-0000-0000-0000-000000000000')\n"
"\n"
">>> # get the Max UUID\n"
">>> uuid.MAX\n"
"UUID('ffffffff-ffff-ffff-ffff-ffffffffffff')\n"
"\n"
">>> # get UUIDv7 creation (local) time as a timestamp in milliseconds\n"
">>> u = uuid.uuid7()\n"
">>> u.time\n"
"1743936859822\n"
">>> # get UUIDv7 creation (local) time as a datetime object\n"
">>> import datetime as dt\n"
">>> dt.datetime.fromtimestamp(u.time / 1000)\n"
"datetime.datetime(...)"
msgstr ""

msgid "Command-Line Example"
msgstr ""

msgid ""
"Here are some examples of typical usage of the :mod:`uuid` command-line "
"interface:"
msgstr ""

msgid ""
"# generate a random UUID - by default uuid4() is used\n"
"$ python -m uuid\n"
"\n"
"# generate a UUID using uuid1()\n"
"$ python -m uuid -u uuid1\n"
"\n"
"# generate a UUID using uuid5\n"
"$ python -m uuid -u uuid5 -n @url -N example.com\n"
"\n"
"# generate 42 random UUIDs\n"
"$ python -m uuid -C 42"
msgstr ""
