# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 20:38+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Extending/Embedding FAQ"
msgstr "Frågor och svar om utbyggnad och inbäddning"

msgid "Contents"
msgstr "Innehåll"

msgid "Can I create my own functions in C?"
msgstr "Kan jag skapa mina egna funktioner i C?"

msgid ""
"Yes, you can create built-in modules containing functions, variables, "
"exceptions and even new types in C.  This is explained in the document :ref:"
"`extending-index`."
msgstr ""
"Ja, du kan skapa inbyggda moduler som innehåller funktioner, variabler, "
"undantag och till och med nya typer i C. Detta förklaras i dokumentet :ref:"
"`extending-index`."

msgid "Most intermediate or advanced Python books will also cover this topic."
msgstr ""
"De flesta Python-böcker på mellan- eller avancerad nivå tar också upp detta "
"ämne."

msgid "Can I create my own functions in C++?"
msgstr "Kan jag skapa mina egna funktioner i C++?"

msgid ""
"Yes, using the C compatibility features found in C++.  Place ``extern "
"\"C\" { ... }`` around the Python include files and put ``extern \"C\"`` "
"before each function that is going to be called by the Python interpreter.  "
"Global or static C++ objects with constructors are probably not a good idea."
msgstr ""
"Ja, med hjälp av C-kompatibilitetsfunktionerna som finns i C++.  Placera "
"``extern \"C\" { ... }`` runt Python-inkluderingsfilerna och sätt ``extern "
"\"C\" `` före varje funktion som kommer att anropas av Python-tolken.  "
"Globala eller statiska C++-objekt med konstruktörer är förmodligen inte en "
"bra idé."

msgid "Writing C is hard; are there any alternatives?"
msgstr "Att skriva C är svårt; finns det några alternativ?"

msgid ""
"There are a number of alternatives to writing your own C extensions, "
"depending on what you're trying to do. :ref:`Recommended third party tools "
"<c-api-tools>` offer both simpler and more sophisticated approaches to "
"creating C and C++ extensions for Python."
msgstr ""
"Det finns ett antal alternativ till att skriva dina egna C-tillägg, beroende "
"på vad du försöker göra. :ref:`Recommended third party tools <c-api-tools>` "
"erbjuder både enklare och mer sofistikerade metoder för att skapa C- och C++-"
"tillägg för Python."

msgid "How can I execute arbitrary Python statements from C?"
msgstr "Hur kan jag köra godtyckliga Python-satser från C?"

msgid ""
"The highest-level function to do this is :c:func:`PyRun_SimpleString` which "
"takes a single string argument to be executed in the context of the module "
"``__main__`` and returns ``0`` for success and ``-1`` when an exception "
"occurred (including :exc:`SyntaxError`).  If you want more control, use :c:"
"func:`PyRun_String`; see the source for :c:func:`PyRun_SimpleString` in "
"``Python/pythonrun.c``."
msgstr ""
"Funktionen på högsta nivå för att göra detta är :c:func:`PyRun_SimpleString` "
"som tar ett enda strängargument som ska köras i kontexten för modulen "
"``__main__`` och returnerar ``0`` för framgång och ``-1`` när ett undantag "
"inträffade (inklusive :exc:`SyntaxError``).  Om du vill ha mer kontroll kan "
"du använda :c:func:`PyRun_String`; se källan för :c:func:"
"`PyRun_SimpleString` i ``Python/pythonrun.c``."

msgid "How can I evaluate an arbitrary Python expression from C?"
msgstr "Hur kan jag utvärdera ett godtyckligt Python-uttryck från C?"

msgid ""
"Call the function :c:func:`PyRun_String` from the previous question with the "
"start symbol :c:data:`Py_eval_input`; it parses an expression, evaluates it "
"and returns its value."
msgstr ""
"Anropa funktionen :c:func:`PyRun_String` från föregående fråga med "
"startsymbolen :c:data:`Py_eval_input`; den tolkar ett uttryck, utvärderar "
"det och returnerar dess värde."

msgid "How do I extract C values from a Python object?"
msgstr "Hur extraherar jag C-värden från ett Python-objekt?"

msgid ""
"That depends on the object's type.  If it's a tuple, :c:func:`PyTuple_Size` "
"returns its length and :c:func:`PyTuple_GetItem` returns the item at a "
"specified index.  Lists have similar functions, :c:func:`PyList_Size` and :c:"
"func:`PyList_GetItem`."
msgstr ""
"Det beror på objektets typ.  Om det är en tupel returnerar :c:func:"
"`PyTuple_Size` dess längd och :c:func:`PyTuple_GetItem` returnerar objektet "
"vid ett angivet index.  Listor har liknande funktioner, :c:func:"
"`PyList_Size` och :c:func:`PyList_GetItem`."

msgid ""
"For bytes, :c:func:`PyBytes_Size` returns its length and :c:func:"
"`PyBytes_AsStringAndSize` provides a pointer to its value and its length.  "
"Note that Python bytes objects may contain null bytes so C's :c:func:`!"
"strlen` should not be used."
msgstr ""
"För byte returnerar :c:func:`PyBytes_Size` dess längd och :c:func:"
"`PyBytes_AsStringAndSize` ger en pekare till dess värde och dess längd.  "
"Observera att Python bytes-objekt kan innehålla null bytes så C:s :c:func:`!"
"strlen` bör inte användas."

msgid ""
"To test the type of an object, first make sure it isn't ``NULL``, and then "
"use :c:func:`PyBytes_Check`, :c:func:`PyTuple_Check`, :c:func:"
"`PyList_Check`, etc."
msgstr ""
"För att testa typen av ett objekt, se först till att det inte är ``NULL``, "
"och använd sedan :c:func:`PyBytes_Check`, :c:func:`PyTuple_Check`, :c:func:"
"`PyList_Check`, etc."

msgid ""
"There is also a high-level API to Python objects which is provided by the so-"
"called 'abstract' interface -- read ``Include/abstract.h`` for further "
"details.  It allows interfacing with any kind of Python sequence using calls "
"like :c:func:`PySequence_Length`, :c:func:`PySequence_GetItem`, etc. as well "
"as many other useful protocols such as numbers (:c:func:`PyNumber_Index` et "
"al.) and mappings in the PyMapping APIs."
msgstr ""
"Det finns också ett högnivå-API för Python-objekt som tillhandahålls av det "
"så kallade \"abstrakta\" gränssnittet - läs ``Include/abstract.h`` för "
"ytterligare detaljer.  Det möjliggör gränssnitt mot alla typer av Python-"
"sekvenser med hjälp av anrop som :c:func:`PySequence_Length`, :c:func:"
"`PySequence_GetItem`, etc. samt många andra användbara protokoll som nummer "
"(:c:func:`PyNumber_Index` et al.) och mappningar i PyMapping API."

msgid "How do I use Py_BuildValue() to create a tuple of arbitrary length?"
msgstr ""
"Hur använder jag Py_BuildValue() för att skapa en tupel av godtycklig längd?"

msgid "You can't.  Use :c:func:`PyTuple_Pack` instead."
msgstr "Det kan du inte göra.  Använd :c:func:`PyTuple_Pack` istället."

msgid "How do I call an object's method from C?"
msgstr "Hur anropar jag ett objekts metod från C?"

msgid ""
"The :c:func:`PyObject_CallMethod` function can be used to call an arbitrary "
"method of an object.  The parameters are the object, the name of the method "
"to call, a format string like that used with :c:func:`Py_BuildValue`, and "
"the argument values::"
msgstr ""
"Funktionen :c:func:`PyObject_CallMethod` kan användas för att anropa en "
"godtycklig metod för ett objekt.  Parametrarna är objektet, namnet på den "
"metod som skall anropas, en formatsträng som den som används med :c:func:"
"`Py_BuildValue`, och argumentvärdena::"

msgid ""
"PyObject *\n"
"PyObject_CallMethod(PyObject *object, const char *method_name,\n"
"                    const char *arg_format, ...);"
msgstr ""
"PyObject * PyObject\n"
"PyObject_CallMethod(PyObject *object, const char *method_name,\n"
"                    const char *arg_format, ...);"

msgid ""
"This works for any object that has methods -- whether built-in or user-"
"defined. You are responsible for eventually :c:func:`Py_DECREF`\\ 'ing the "
"return value."
msgstr ""
"Detta fungerar för alla objekt som har metoder - oavsett om de är inbyggda "
"eller användardefinierade. Du är ansvarig för att så småningom :c:func:"
"`Py_DECREF`'a returvärdet."

msgid ""
"To call, e.g., a file object's \"seek\" method with arguments 10, 0 "
"(assuming the file object pointer is \"f\")::"
msgstr ""
"Så här anropar du t.ex. ett filobjekts metod \"seek\" med argumenten 10, 0 "
"(förutsatt att filobjektets pekare är \"f\")::"

msgid ""
"res = PyObject_CallMethod(f, \"seek\", \"(ii)\", 10, 0);\n"
"if (res == NULL) {\n"
"        ... an exception occurred ...\n"
"}\n"
"else {\n"
"        Py_DECREF(res);\n"
"}"
msgstr ""
"res = PyObject_CallMethod(f, \"seek\", \"(ii)\", 10, 0);\n"
"if (res == NULL) {\n"
"        ... ett undantag inträffade ...\n"
"}\n"
"else {\n"
"        Py_DECREF(res);\n"
"}"

msgid ""
"Note that since :c:func:`PyObject_CallObject` *always* wants a tuple for the "
"argument list, to call a function without arguments, pass \"()\" for the "
"format, and to call a function with one argument, surround the argument in "
"parentheses, e.g. \"(i)\"."
msgstr ""
"Observera att eftersom :c:func:`PyObject_CallObject` *alltid* vill ha en "
"tupel för argumentlistan, ska du för att anropa en funktion utan argument "
"ange \"()\" för formatet, och för att anropa en funktion med ett argument "
"ska du omge argumentet med parenteser, t.ex. \"(i)\"."

msgid ""
"How do I catch the output from PyErr_Print() (or anything that prints to "
"stdout/stderr)?"
msgstr ""
"Hur fångar jag utdata från PyErr_Print() (eller något som skrivs ut till "
"stdout/stderr)?"

msgid ""
"In Python code, define an object that supports the ``write()`` method.  "
"Assign this object to :data:`sys.stdout` and :data:`sys.stderr`.  Call "
"print_error, or just allow the standard traceback mechanism to work. Then, "
"the output will go wherever your ``write()`` method sends it."
msgstr ""
"I Python-kod definierar du ett objekt som stöder metoden ``write()``.  "
"Tilldela detta objekt till :data:`sys.stdout` och :data:`sys.stderr`.  "
"Anropa print_error, eller låt bara standardmekanismen för spårning fungera. "
"Sedan kommer utdata att gå dit din ``write()``-metod skickar den."

msgid "The easiest way to do this is to use the :class:`io.StringIO` class:"
msgstr ""
"Det enklaste sättet att göra detta är att använda :class:`io.StringIO`-"
"klassen:"

msgid ""
">>> import io, sys\n"
">>> sys.stdout = io.StringIO()\n"
">>> print('foo')\n"
">>> print('hello world!')\n"
">>> sys.stderr.write(sys.stdout.getvalue())\n"
"foo\n"
"hello world!"
msgstr ""
">>> import io, sys\n"
">>> sys.stdout = io.StringIO()\n"
">>> print('foo')\n"
">>> print('hello world!')\n"
">>> sys.stderr.write(sys.stdout.getvalue())\n"
"foo\n"
"hej världen!"

msgid "A custom object to do the same would look like this:"
msgstr "Ett anpassat objekt för att göra samma sak skulle se ut så här:"

msgid ""
">>> import io, sys\n"
">>> class StdoutCatcher(io.TextIOBase):\n"
"...     def __init__(self):\n"
"...         self.data = []\n"
"...     def write(self, stuff):\n"
"...         self.data.append(stuff)\n"
"...\n"
">>> import sys\n"
">>> sys.stdout = StdoutCatcher()\n"
">>> print('foo')\n"
">>> print('hello world!')\n"
">>> sys.stderr.write(''.join(sys.stdout.data))\n"
"foo\n"
"hello world!"
msgstr ""
">>> import io, sys\n"
">>> klass StdoutCatcher(io.TextIOBase):\n"
"... def __init__(self):\n"
"... self.data = []\n"
"... def write(self, stuff):\n"
"... self.data.append(stuff)\n"
"...\n"
">>> import sys\n"
">>> sys.stdout = StdoutCatcher()\n"
">>> print('foo')\n"
">>> print('hello world!')\n"
">>> sys.stderr.write(''.join(sys.stdout.data))\n"
"foo\n"
"hej världen!"

msgid "How do I access a module written in Python from C?"
msgstr "Hur kommer jag åt en modul som är skriven i Python från C?"

msgid "You can get a pointer to the module object as follows::"
msgstr "Du kan få en pekare till modulobjektet på följande sätt::"

msgid "module = PyImport_ImportModule(\"<modulename>\");"
msgstr "module = PyImport_ImportModule(\"<modulename>\");"

msgid ""
"If the module hasn't been imported yet (i.e. it is not yet present in :data:"
"`sys.modules`), this initializes the module; otherwise it simply returns the "
"value of ``sys.modules[\"<modulename>\"]``.  Note that it doesn't enter the "
"module into any namespace -- it only ensures it has been initialized and is "
"stored in :data:`sys.modules`."
msgstr ""
"Om modulen inte har importerats ännu (dvs. den finns ännu inte i :data:`sys."
"modules`), initieras modulen; annars returneras helt enkelt värdet av ``sys."
"modules[\"<modulename>\"]``.  Observera att modulen inte skrivs in i något "
"namnområde -- den säkerställer bara att den har initialiserats och lagras i :"
"data:`sys.modules`."

msgid ""
"You can then access the module's attributes (i.e. any name defined in the "
"module) as follows::"
msgstr ""
"Du kan sedan komma åt modulens attribut (dvs. alla namn som definieras i "
"modulen) på följande sätt::"

msgid "attr = PyObject_GetAttrString(module, \"<attrname>\");"
msgstr "attr = PyObject_GetAttrString(module, \"<attrname>\");"

msgid ""
"Calling :c:func:`PyObject_SetAttrString` to assign to variables in the "
"module also works."
msgstr ""
"Att anropa :c:func:`PyObject_SetAttrString` för att tilldela variabler i "
"modulen fungerar också."

msgid "How do I interface to C++ objects from Python?"
msgstr "Hur skapar jag gränssnitt till C++-objekt från Python?"

msgid ""
"Depending on your requirements, there are many approaches.  To do this "
"manually, begin by reading :ref:`the \"Extending and Embedding\" document "
"<extending-index>`.  Realize that for the Python run-time system, there "
"isn't a whole lot of difference between C and C++ -- so the strategy of "
"building a new Python type around a C structure (pointer) type will also "
"work for C++ objects."
msgstr ""
"Beroende på dina krav finns det många tillvägagångssätt.  För att göra detta "
"manuellt, börja med att läsa :ref:`dokumentet \"Extending and Embedding\" "
"<extending-index>`.  Inse att för Pythons körtidssystem är det inte så stor "
"skillnad mellan C och C++ - så strategin att bygga en ny Python-typ runt en "
"C-strukturtyp (pekare) fungerar också för C++-objekt."

msgid "For C++ libraries, see :ref:`c-wrapper-software`."
msgstr "För C++-bibliotek, se :ref:`c-wrapper-software`."

msgid "I added a module using the Setup file and the make fails; why?"
msgstr ""
"Jag lade till en modul med hjälp av installationsfilen och make misslyckas; "
"varför?"

msgid ""
"Setup must end in a newline, if there is no newline there, the build process "
"fails.  (Fixing this requires some ugly shell script hackery, and this bug "
"is so minor that it doesn't seem worth the effort.)"
msgstr ""
"Setup måste sluta med en ny rad, om det inte finns någon ny rad där "
"misslyckas byggprocessen.  (För att åtgärda detta krävs en del fula "
"skalskript, och den här buggen är så liten att det inte verkar värt besväret)"

msgid "How do I debug an extension?"
msgstr "Hur felsöker jag ett tillägg?"

msgid ""
"When using GDB with dynamically loaded extensions, you can't set a "
"breakpoint in your extension until your extension is loaded."
msgstr ""
"När du använder GDB med dynamiskt laddade tillägg kan du inte ställa in en "
"brytpunkt i ditt tillägg förrän ditt tillägg är laddat."

msgid "In your ``.gdbinit`` file (or interactively), add the command:"
msgstr "I filen ``.gdbinit`` (eller interaktivt) lägger du till kommandot:"

msgid "br _PyImport_LoadDynamicModule"
msgstr "br _PyImport_LoadDynamicModule"

msgid "Then, when you run GDB:"
msgstr "När du sedan kör GDB:"

msgid ""
"$ gdb /local/bin/python\n"
"gdb) run myscript.py\n"
"gdb) continue # repeat until your extension is loaded\n"
"gdb) finish   # so that your extension is loaded\n"
"gdb) br myfunction.c:50\n"
"gdb) continue"
msgstr ""
"$ gdb /lokal/bin/python\n"
"gdb) kör myscript.py\n"
"gdb) continue # upprepa tills din förlängning är laddad\n"
"gdb) finish # så att ditt tillägg är laddat\n"
"gdb) br myfunction.c:50\n"
"gdb) fortsätt"

msgid ""
"I want to compile a Python module on my Linux system, but some files are "
"missing. Why?"
msgstr ""
"Jag vill kompilera en Python-modul på mitt Linux-system, men vissa filer "
"saknas. Hur kommer det sig?"

msgid ""
"Most packaged versions of Python omit some files required for compiling "
"Python extensions."
msgstr ""
"De flesta paketerade versioner av Python utelämnar vissa filer som krävs för "
"att kompilera Python-tillägg."

msgid "For Red Hat, install the python3-devel RPM to get the necessary files."
msgstr ""
"För Red Hat installerar du python3-devel RPM för att få de nödvändiga "
"filerna."

msgid "For Debian, run ``apt-get install python3-dev``."
msgstr "För Debian, kör ``apt-get install python3-dev``."

msgid "How do I tell \"incomplete input\" from \"invalid input\"?"
msgstr ""
"Hur skiljer jag \"ofullständiga uppgifter\" från \"ogiltiga uppgifter\"?"

msgid ""
"Sometimes you want to emulate the Python interactive interpreter's behavior, "
"where it gives you a continuation prompt when the input is incomplete (e.g. "
"you typed the start of an \"if\" statement or you didn't close your "
"parentheses or triple string quotes), but it gives you a syntax error "
"message immediately when the input is invalid."
msgstr ""
"Ibland vill man efterlikna Pythons interaktiva tolk, där man får en "
"fortsättningsprompt när inmatningen är ofullständig (t.ex. om man har "
"skrivit början på en \"if\"-sats eller inte stängt parenteserna eller de "
"tredubbla strängcitaten), men ett syntaxfelmeddelande direkt när inmatningen "
"är ogiltig."

msgid ""
"In Python you can use the :mod:`codeop` module, which approximates the "
"parser's behavior sufficiently.  IDLE uses this, for example."
msgstr ""
"I Python kan du använda modulen :mod:`codeop`, som approximerar parserns "
"beteende på ett tillfredsställande sätt.  IDLE använder till exempel detta."

msgid ""
"The easiest way to do it in C is to call :c:func:`PyRun_InteractiveLoop` "
"(perhaps in a separate thread) and let the Python interpreter handle the "
"input for you. You can also set the :c:func:`PyOS_ReadlineFunctionPointer` "
"to point at your custom input function. See ``Modules/readline.c`` and "
"``Parser/myreadline.c`` for more hints."
msgstr ""
"Det enklaste sättet att göra det i C är att anropa :c:func:"
"`PyRun_InteractiveLoop` (kanske i en separat tråd) och låta Python-tolken "
"hantera inmatningen åt dig. Du kan också ställa in :c:func:"
"`PyOS_ReadlineFunctionPointer` för att peka på din anpassade "
"inmatningsfunktion. Se ``Modules/readline.c`` och ``Parser/myreadline.c`` "
"för fler tips."

msgid "How do I find undefined g++ symbols __builtin_new or __pure_virtual?"
msgstr ""
"Hur hittar jag odefinierade G++-symboler __builtin_new eller __pure_virtual?"

msgid ""
"To dynamically load g++ extension modules, you must recompile Python, relink "
"it using g++ (change LINKCC in the Python Modules Makefile), and link your "
"extension module using g++ (e.g., ``g++ -shared -o mymodule.so mymodule.o``)."
msgstr ""
"För att dynamiskt ladda g++-tilläggsmoduler måste du kompilera om Python, "
"länka om det med g++ (ändra LINKCC i Python Modules Makefile) och länka din "
"tilläggsmodul med g++ (t.ex. ``g++ -shared -o mymodule.so mymodule.o``)."

msgid ""
"Can I create an object class with some methods implemented in C and others "
"in Python (e.g. through inheritance)?"
msgstr ""
"Kan jag skapa en objektklass där vissa metoder är implementerade i C och "
"andra i Python (t.ex. genom arv)?"

msgid ""
"Yes, you can inherit from built-in classes such as :class:`int`, :class:"
"`list`, :class:`dict`, etc."
msgstr ""
"Ja, du kan ärva från inbyggda klasser som :class:`int`, :class:`list`, :"
"class:`dict`, etc."

msgid ""
"The Boost Python Library (BPL, https://www.boost.org/libs/python/doc/index."
"html) provides a way of doing this from C++ (i.e. you can inherit from an "
"extension class written in C++ using the BPL)."
msgstr ""
"Boost Python Library (BPL, https://www.boost.org/libs/python/doc/index.html) "
"erbjuder ett sätt att göra detta från C++ (dvs. du kan ärva från en "
"tilläggsklass skriven i C++ med hjälp av BPL)."
