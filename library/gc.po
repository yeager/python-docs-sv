# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 20:38+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!gc` --- Garbage Collector interface"
msgstr ":mod:`!gc` --- Gränssnitt för skräpsamlare"

msgid ""
"This module provides an interface to the optional garbage collector.  It "
"provides the ability to disable the collector, tune the collection "
"frequency, and set debugging options.  It also provides access to "
"unreachable objects that the collector found but cannot free.  Since the "
"collector supplements the reference counting already used in Python, you can "
"disable the collector if you are sure your program does not create reference "
"cycles.  Automatic collection can be disabled by calling ``gc.disable()``.  "
"To debug a leaking program call ``gc.set_debug(gc.DEBUG_LEAK)``. Notice that "
"this includes ``gc.DEBUG_SAVEALL``, causing garbage-collected objects to be "
"saved in gc.garbage for inspection."
msgstr ""
"Den här modulen ger ett gränssnitt till den valfria skräpsamlaren.  Den gör "
"det möjligt att inaktivera uppsamlaren, ställa in uppsamlingsfrekvensen och "
"ange felsökningsalternativ.  Den ger också tillgång till onåbara objekt som "
"uppsamlaren har hittat men inte kan frigöra.  Eftersom uppsamlaren "
"kompletterar den referensräkning som redan används i Python, kan du "
"inaktivera uppsamlaren om du är säker på att ditt program inte skapar "
"referenscykler.  Automatisk insamling kan avaktiveras genom att anropa ``gc."
"disable()``.  För att debugga ett läckande program anropa ``gc.set_debug(gc."
"DEBUG_LEAK)``. Observera att detta inkluderar ``gc.DEBUG_SAVEALL``, vilket "
"gör att skräpinsamlade objekt sparas i gc.garbage för inspektion."

msgid "The :mod:`gc` module provides the following functions:"
msgstr "Modulen :mod:`gc` tillhandahåller följande funktioner:"

msgid "Enable automatic garbage collection."
msgstr "Aktivera automatisk skräpplockning."

msgid "Disable automatic garbage collection."
msgstr "Avaktivera automatisk skräpplockning."

msgid "Return ``True`` if automatic collection is enabled."
msgstr "Returnerar ``True`` om automatisk insamling är aktiverad."

msgid ""
"Perform a collection.  The optional argument *generation* may be an integer "
"specifying which generation to collect (from 0 to 2).  A :exc:`ValueError` "
"is raised if the generation number is invalid. The sum of collected objects "
"and uncollectable objects is returned."
msgstr ""
"Utför en insamling.  Det valfria argumentet *generation* kan vara ett heltal "
"som anger vilken generation som ska samlas in (från 0 till 2).  Ett :exc:"
"`ValueError` uppstår om generationsnumret är ogiltigt. Summan av hämtade "
"objekt och ej hämtningsbara objekt returneras."

msgid ""
"Calling ``gc.collect(0)`` will perform a GC collection on the young "
"generation."
msgstr ""
"Om du ringer ``gc.collect(0)`` kommer du att utföra en GC-kollektion på den "
"unga generationen."

msgid ""
"Calling ``gc.collect(1)`` will perform a GC collection on the young "
"generation and an increment of the old generation."
msgstr ""
"Om du anropar ``gc.collect(1)`` kommer du att utföra en GC-samling på den "
"unga generationen och en ökning av den gamla generationen."

msgid ""
"Calling ``gc.collect(2)`` or ``gc.collect()`` performs a full collection"
msgstr ""
"Anrop av ``gc.collect(2)`` eller ``gc.collect()`` utför en fullständig "
"insamling"

msgid ""
"The free lists maintained for a number of built-in types are cleared "
"whenever a full collection or collection of the highest generation (2) is "
"run.  Not all items in some free lists may be freed due to the particular "
"implementation, in particular :class:`float`."
msgstr ""
"De fria listor som upprätthålls för ett antal inbyggda typer rensas när en "
"fullständig samling eller samling av den högsta generationen (2) körs.  Det "
"är inte säkert att alla objekt i vissa fria listor blir fria på grund av den "
"speciella implementeringen, i synnerhet :class:`float`."

msgid ""
"The effect of calling ``gc.collect()`` while the interpreter is already "
"performing a collection is undefined."
msgstr ""
"Effekten av att anropa ``gc.collect()`` medan tolken redan utför en "
"insamling är odefinierad."

msgid "``generation=1`` performs an increment of collection."
msgstr "``generation=1`` utför en inkrementering av insamlingen."

msgid ""
"Set the garbage collection debugging flags. Debugging information will be "
"written to ``sys.stderr``.  See below for a list of debugging flags which "
"can be combined using bit operations to control debugging."
msgstr ""
"Ställ in felsökningsflaggorna för skräpplockning. Felsökningsinformation "
"kommer att skrivas till ``sys.stderr``.  Se nedan för en lista över "
"felsökningsflaggor som kan kombineras med bitoperationer för att styra "
"felsökningen."

msgid "Return the debugging flags currently set."
msgstr "Returnerar de felsökningsflaggor som för närvarande är inställda."

msgid ""
"Returns a list of all objects tracked by the collector, excluding the list "
"returned. If *generation* is not ``None``, return only the objects as "
"follows:"
msgstr ""
"Returnerar en lista över alla objekt som spåras av samlaren, exklusive den "
"returnerade listan. Om *generation* inte är ``None``, returneras endast "
"objekten enligt följande:"

msgid "0: All objects in the young generation"
msgstr "0: Alla objekt i den unga generationen"

msgid "1: No objects, as there is no generation 1 (as of Python 3.14)"
msgstr ""
"1: Inga objekt, eftersom det inte finns någon generation 1 (från och med "
"Python 3.14)"

msgid "2: All objects in the old generation"
msgstr "2: Alla objekt i den gamla generationen"

msgid "New *generation* parameter."
msgstr "Ny *generation* parameter."

msgid "Generation 1 is removed"
msgstr "Generation 1 är borttagen"

msgid ""
"Raises an :ref:`auditing event <auditing>` ``gc.get_objects`` with argument "
"``generation``."
msgstr ""
"Utlöser en :ref:`auditing event <auditing>` ``gc.get_objects`` med "
"argumentet ``generation``."

msgid ""
"Return a list of three per-generation dictionaries containing collection "
"statistics since interpreter start.  The number of keys may change in the "
"future, but currently each dictionary will contain the following items:"
msgstr ""
"Returnerar en lista med tre ordböcker per generation som innehåller "
"samlingsstatistik sedan tolken startade.  Antalet nycklar kan komma att "
"ändras i framtiden, men för närvarande innehåller varje ordbok följande "
"poster:"

msgid "``collections`` is the number of times this generation was collected;"
msgstr "``collections`` är antalet gånger som denna generation har samlats in;"

msgid ""
"``collected`` is the total number of objects collected inside this "
"generation;"
msgstr ""
"``collected`` är det totala antalet objekt som samlats in under denna "
"generation;"

msgid ""
"``uncollectable`` is the total number of objects which were found to be "
"uncollectable (and were therefore moved to the :data:`garbage` list) inside "
"this generation."
msgstr ""
"``uncollectable`` är det totala antalet objekt som befanns vara omöjliga att "
"samla in (och som därför flyttades till :data:`garbage`-listan) i denna "
"generation."

msgid ""
"Set the garbage collection thresholds (the collection frequency). Setting "
"*threshold0* to zero disables collection."
msgstr ""
"Ställ in tröskelvärdena för sophämtning (hämtningsfrekvensen). Om "
"*threshold0* sätts till noll avaktiveras insamlingen."

msgid ""
"The GC classifies objects into two generations depending on whether they "
"have survived a collection. New objects are placed in the young generation. "
"If an object survives a collection it is moved into the old generation."
msgstr ""
"GC klassificerar föremål i två generationer beroende på om de har överlevt "
"en samling eller inte. Nya föremål placeras i den unga generationen. Om ett "
"föremål överlever en insamling flyttas det till den gamla generationen."

msgid ""
"In order to decide when to run, the collector keeps track of the number of "
"object allocations and deallocations since the last collection.  When the "
"number of allocations minus the number of deallocations exceeds "
"*threshold0*, collection starts. For each collection, all the objects in the "
"young generation and some fraction of the old generation is collected."
msgstr ""
"För att bestämma när insamlingen ska starta håller insamlaren reda på "
"antalet objektallokeringar och -deallokeringar sedan den senaste "
"insamlingen.  När antalet allokeringar minus antalet deallokeringar "
"överstiger *tröskelvärde0* startar insamlingen. För varje insamling samlas "
"alla objekt i den unga generationen och en del av den gamla generationen in."

msgid ""
"In the free-threaded build, the increase in process memory usage is also "
"checked before running the collector.  If the memory usage has not increased "
"by 10% since the last collection and the net number of object allocations "
"has not exceeded 40 times *threshold0*, the collection is not run."
msgstr ""
"I den fritt trådade versionen kontrolleras även ökningen av "
"processminnesanvändningen innan insamlingsverktyget körs.  Om "
"minnesanvändningen inte har ökat med 10% ssedan den senaste insamlingen och "
"nettoantalet objektallokeringar inte har överstigit 40 gånger "
"*tröskelvärde0*, körs inte insamlingen."

msgid ""
"The fraction of the old generation that is collected is **inversely** "
"proportional to *threshold1*. The larger *threshold1* is, the slower objects "
"in the old generation are collected. For the default value of 10, 1% of the "
"old generation is scanned during each collection."
msgstr ""
"Den andel av den gamla generationen som samlas in är **omvänt** "
"proportionell mot *tröskelvärde1*. Ju större *threshold1* är, desto "
"långsammare samlas objekt i den gamla generationen in. För standardvärdet 10 "
"skannas 1% of av den gamla generationen under varje insamling."

msgid "*threshold2* is ignored."
msgstr "*tröskelvärde2* ignoreras."

msgid ""
"See `Garbage collector design <https://devguide.python.org/"
"garbage_collector>`_ for more information."
msgstr ""
"Se `Garbage collector design <https://devguide.python.org/"
"garbage_collector>`_ för mer information."

msgid "*threshold2* is ignored"
msgstr "*tröskelvärde2* ignoreras"

msgid ""
"Return the current collection  counts as a tuple of ``(count0, count1, "
"count2)``."
msgstr ""
"Returnera den aktuella samlingens antal som en tupel av ``(count0, count1, "
"count2)``."

msgid ""
"Return the current collection thresholds as a tuple of ``(threshold0, "
"threshold1, threshold2)``."
msgstr ""
"Returnera de aktuella tröskelvärdena för samlingen som en tupel av "
"``(tröskel0, tröskel1, tröskel2)``."

msgid ""
"Return the list of objects that directly refer to any of objs. This function "
"will only locate those containers which support garbage collection; "
"extension types which do refer to other objects but do not support garbage "
"collection will not be found."
msgstr ""
"Returnerar listan över objekt som direkt refererar till något av objs. Denna "
"funktion kommer endast att hitta de behållare som stöder garbage collection; "
"extension types som refererar till andra objekt men inte stöder garbage "
"collection kommer inte att hittas."

msgid ""
"Note that objects which have already been dereferenced, but which live in "
"cycles and have not yet been collected by the garbage collector can be "
"listed among the resulting referrers.  To get only currently live objects, "
"call :func:`collect` before calling :func:`get_referrers`."
msgstr ""
"Observera att objekt som redan har avrefererats, men som lever i cykler och "
"ännu inte har samlats in av skräpsamlaren, kan listas bland de resulterande "
"referenterna.  Om du bara vill få fram objekt som lever för närvarande, "
"anropa :func:`collect` innan du anropar :func:`get_referrers`."

msgid ""
"Care must be taken when using objects returned by :func:`get_referrers` "
"because some of them could still be under construction and hence in a "
"temporarily invalid state. Avoid using :func:`get_referrers` for any purpose "
"other than debugging."
msgstr ""
"Försiktighet måste iakttas när du använder objekt som returneras av :func:"
"`get_referrers` eftersom vissa av dem fortfarande kan vara under "
"konstruktion och därmed i ett tillfälligt ogiltigt tillstånd. Undvik att "
"använda :func:`get_referrers` för något annat ändamål än felsökning."

msgid ""
"Raises an :ref:`auditing event <auditing>` ``gc.get_referrers`` with "
"argument ``objs``."
msgstr ""
"Utlöser en :ref:`auditing event <auditing>` ``gc.get_referrers`` med "
"argumentet ``objs``."

msgid ""
"Return a list of objects directly referred to by any of the arguments. The "
"referents returned are those objects visited by the arguments' C-level :c:"
"member:`~PyTypeObject.tp_traverse` methods (if any), and may not be all "
"objects actually directly reachable.  :c:member:`~PyTypeObject.tp_traverse` "
"methods are supported only by objects that support garbage collection, and "
"are only required to visit objects that may be involved in a cycle.  So, for "
"example, if an integer is directly reachable from an argument, that integer "
"object may or may not appear in the result list."
msgstr ""
"Returnerar en lista med objekt som direkt refereras till av något av "
"argumenten. De referenser som returneras är de objekt som besöks av "
"argumentens C-nivå :c:member:`~PyTypeObject.tp_traverse`-metoder (om sådana "
"finns), och kanske inte alla objekt som faktiskt är direkt nåbara. :c:member:"
"`~PyTypeObject.tp_traverse`-metoder stöds endast av objekt som stöder "
"garbage collection, och behöver endast besöka objekt som kan vara inblandade "
"i en cykel.  Om t.ex. ett heltal är direkt nåbart från ett argument, kan det "
"hända att detta heltalsobjekt inte finns med i resultatlistan."

msgid ""
"Raises an :ref:`auditing event <auditing>` ``gc.get_referents`` with "
"argument ``objs``."
msgstr ""
"Utlöser en :ref:`auditing event <auditing>` ``gc.get_referents`` med "
"argumentet ``objs``."

msgid ""
"Returns ``True`` if the object is currently tracked by the garbage "
"collector, ``False`` otherwise.  As a general rule, instances of atomic "
"types aren't tracked and instances of non-atomic types (containers, user-"
"defined objects...) are.  However, some type-specific optimizations can be "
"present in order to suppress the garbage collector footprint of simple "
"instances (e.g. dicts containing only atomic keys and values)::"
msgstr ""
"Returnerar ``True`` om objektet för närvarande spåras av skräpsamlaren, "
"annars ``False``.  Som en allmän regel spåras inte instanser av atomära "
"typer och instanser av icke-atomära typer (behållare, användardefinierade "
"objekt ...) spåras.  Vissa typspecifika optimeringar kan dock finnas för att "
"minska skräpsamlarens fotavtryck för enkla instanser (t.ex. dikter som "
"endast innehåller atomiska nycklar och värden)::"

msgid ""
">>> gc.is_tracked(0)\n"
"False\n"
">>> gc.is_tracked(\"a\")\n"
"False\n"
">>> gc.is_tracked([])\n"
"True\n"
">>> gc.is_tracked({})\n"
"False\n"
">>> gc.is_tracked({\"a\": 1})\n"
"True"
msgstr ""
">>> gc.is_tracked(0)\n"
"Falsk\n"
">>> gc.is_tracked(\"a\")\n"
"Falsk\n"
">>> gc.is_tracked([])\n"
"Sant\n"
">>> gc.is_tracked({})\n"
"Falsk\n"
">>> gc.is_tracked({\"a\": 1})\n"
"Sant"

msgid ""
"Returns ``True`` if the given object has been finalized by the garbage "
"collector, ``False`` otherwise. ::"
msgstr ""
"Returnerar ``True`` om det angivna objektet har slutförts av skräpsamlaren, "
"``False`` annars. ::"

msgid ""
">>> x = None\n"
">>> class Lazarus:\n"
"...     def __del__(self):\n"
"...         global x\n"
"...         x = self\n"
"...\n"
">>> lazarus = Lazarus()\n"
">>> gc.is_finalized(lazarus)\n"
"False\n"
">>> del lazarus\n"
">>> gc.is_finalized(x)\n"
"True"
msgstr ""
">>> x = Ingen\n"
">>> klass Lazarus:\n"
"... def __del__(self):\n"
"... global x\n"
"... x = själv\n"
"...\n"
">>> lazarus = Lazarus()\n"
">>> gc.is_finalized(lazarus)\n"
"Falsk\n"
">>> del lazarus\n"
">>> gc.is_finalized(x)\n"
"Sant"

msgid ""
"Freeze all the objects tracked by the garbage collector; move them to a "
"permanent generation and ignore them in all the future collections."
msgstr ""
"Frys alla objekt som spåras av skräpsamlaren; flytta dem till en permanent "
"generation och ignorera dem i alla framtida samlingar."

msgid ""
"If a process will ``fork()`` without ``exec()``, avoiding unnecessary copy-"
"on-write in child processes will maximize memory sharing and reduce overall "
"memory usage. This requires both avoiding creation of freed \"holes\" in "
"memory pages in the parent process and ensuring that GC collections in child "
"processes won't touch the ``gc_refs`` counter of long-lived objects "
"originating in the parent process. To accomplish both, call ``gc.disable()`` "
"early in the parent process, ``gc.freeze()`` right before ``fork()``, and "
"``gc.enable()`` early in child processes."
msgstr ""
"Om en process kommer att ``fork()`` utan ``exec()``, kommer undvikande av "
"onödig copy-on-write i barnprocesser att maximera minnesdelning och minska "
"den totala minnesanvändningen. Detta kräver både att man undviker att skapa "
"frigjorda \"hål\" i minnessidor i den överordnade processen och att man ser "
"till att GC-samlingar i underordnade processer inte rör ``gc_refs``-räknaren "
"för långlivade objekt som härrör från den överordnade processen. För att "
"åstadkomma båda, anropa ``gc.disable()`` tidigt i den överordnade processen, "
"``gc.freeze()`` strax före ``fork()`` och ``gc.enable()`` tidigt i "
"underordnade processer."

msgid ""
"Unfreeze the objects in the permanent generation, put them back into the "
"oldest generation."
msgstr ""
"Frigör objekten i den permanenta generationen, lägg tillbaka dem i den "
"äldsta generationen."

msgid "Return the number of objects in the permanent generation."
msgstr "Returnera antalet objekt i den permanenta generationen."

msgid ""
"The following variables are provided for read-only access (you can mutate "
"the values but should not rebind them):"
msgstr ""
"Följande variabler tillhandahålls för skrivskyddad åtkomst (du kan ändra "
"värdena men bör inte binda om dem):"

msgid ""
"A list of objects which the collector found to be unreachable but could not "
"be freed (uncollectable objects).  Starting with Python 3.4, this list "
"should be empty most of the time, except when using instances of C extension "
"types with a non-``NULL`` ``tp_del`` slot."
msgstr ""
"En lista över objekt som samlaren fann vara oåtkomliga men som inte kunde "
"frigöras (ej insamlingsbara objekt).  Från och med Python 3.4 bör denna "
"lista vara tom för det mesta, förutom när man använder instanser av C-"
"tilläggstyper med en icke-``NULL`` ``tp_del`` slot."

msgid ""
"If :const:`DEBUG_SAVEALL` is set, then all unreachable objects will be added "
"to this list rather than freed."
msgstr ""
"Om :const:`DEBUG_SAVEALL` är inställd kommer alla oåtkomliga objekt att "
"läggas till i listan i stället för att frigöras."

msgid ""
"If this list is non-empty at :term:`interpreter shutdown`, a :exc:"
"`ResourceWarning` is emitted, which is silent by default.  If :const:"
"`DEBUG_UNCOLLECTABLE` is set, in addition all uncollectable objects are "
"printed."
msgstr ""
"Om listan inte är tom vid :term:`tolkens avstängning`, skickas en :exc:"
"`ResourceWarning`, som är tyst som standard.  Om :const:"
"`DEBUG_UNCOLLECTABLE` är inställt, skrivs dessutom alla objekt som inte kan "
"hämtas ut."

msgid ""
"Following :pep:`442`, objects with a :meth:`~object.__del__` method don't "
"end up in :data:`gc.garbage` anymore."
msgstr ""
"Efter :pep:`442`, hamnar objekt med en :meth:`~object.__del__`-metod inte "
"längre i :data:`gc.garbage`."

msgid ""
"A list of callbacks that will be invoked by the garbage collector before and "
"after collection.  The callbacks will be called with two arguments, *phase* "
"and *info*."
msgstr ""
"En lista över callbacks som anropas av garbage collector före och efter "
"insamlingen.  Återkallelserna kommer att anropas med två argument, *phase* "
"och *info*."

msgid "*phase* can be one of two values:"
msgstr "*phase* kan ha ett av två värden:"

msgid "\"start\": The garbage collection is about to start."
msgstr "\"start\": Skräpplockningen ska snart börja."

msgid "\"stop\": The garbage collection has finished."
msgstr "\"stopp\": Skräpplockningen har avslutats."

msgid ""
"*info* is a dict providing more information for the callback.  The following "
"keys are currently defined:"
msgstr ""
"*info* är ett dict som ger mer information om återuppringningen.  Följande "
"nycklar är för närvarande definierade:"

msgid "\"generation\": The oldest generation being collected."
msgstr "\"generation\": Den äldsta generationen som samlas in."

msgid ""
"\"collected\": When *phase* is \"stop\", the number of objects successfully "
"collected."
msgstr ""
"\"insamlade\": När *fas* är \"stop\", antalet objekt som framgångsrikt "
"samlats in."

msgid ""
"\"uncollectable\": When *phase* is \"stop\", the number of objects that "
"could not be collected and were put in :data:`garbage`."
msgstr ""
"\"ej insamlingsbara\": När *fas* är \"stop\", antalet objekt som inte kunde "
"samlas in och som placerades i :data:`garbage`."

msgid ""
"Applications can add their own callbacks to this list.  The primary use "
"cases are:"
msgstr ""
"Applikationer kan lägga till sina egna callbacks i denna lista.  De primära "
"användningsfallen är:"

msgid ""
"Gathering statistics about garbage collection, such as how often various "
"generations are collected, and how long the collection takes."
msgstr ""
"Samla in statistik om garbage collection, t.ex. hur ofta olika generationer "
"samlas in och hur lång tid insamlingen tar."

msgid ""
"Allowing applications to identify and clear their own uncollectable types "
"when they appear in :data:`garbage`."
msgstr ""
"Tillåter applikationer att identifiera och rensa sina egna typer som inte "
"går att samla in när de visas i :data:`garbage`."

msgid "The following constants are provided for use with :func:`set_debug`:"
msgstr ""
"Följande konstanter tillhandahålls för användning med :func:`set_debug`:"

msgid ""
"Print statistics during collection.  This information can be useful when "
"tuning the collection frequency."
msgstr ""
"Skriv ut statistik under insamlingen.  Denna information kan vara användbar "
"när du ställer in insamlingsfrekvensen."

msgid "Print information on collectable objects found."
msgstr "Skriv ut information om upphittade samlarobjekt."

msgid ""
"Print information of uncollectable objects found (objects which are not "
"reachable but cannot be freed by the collector).  These objects will be "
"added to the ``garbage`` list."
msgstr ""
"Skriv ut information om icke insamlingsbara objekt som hittats (objekt som "
"inte kan nås men som inte kan frigöras av insamlaren).  Dessa objekt kommer "
"att läggas till i listan ``garbage``."

msgid ""
"Also print the contents of the :data:`garbage` list at :term:`interpreter "
"shutdown`, if it isn't empty."
msgstr ""
"Skriv även ut innehållet i :data:`garbage`-listan vid :term:`interpreter "
"shutdown`, om den inte är tom."

msgid ""
"When set, all unreachable objects found will be appended to *garbage* rather "
"than being freed.  This can be useful for debugging a leaking program."
msgstr ""
"När den är inställd kommer alla oåtkomliga objekt som hittas att läggas till "
"*garbage* i stället för att frigöras.  Detta kan vara användbart vid "
"felsökning av ett läckande program."

msgid ""
"The debugging flags necessary for the collector to print information about a "
"leaking program (equal to ``DEBUG_COLLECTABLE | DEBUG_UNCOLLECTABLE | "
"DEBUG_SAVEALL``)."
msgstr ""
"De felsökningsflaggor som krävs för att samlaren ska kunna skriva ut "
"information om ett program som läcker (lika med ``DEBUG_COLLECTABLE | "
"DEBUG_UNCOLLECTABLE | DEBUG_SAVEALL``)."
