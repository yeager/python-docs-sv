# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's New In Python 3.10"
msgstr "Vad är nytt i Python 3.10"

msgid "Editor"
msgstr "Redigerare"

msgid "Pablo Galindo Salgado"
msgstr "Pablo Galindo Salgado"

msgid ""
"This article explains the new features in Python 3.10, compared to 3.9. "
"Python 3.10 was released on October 4, 2021. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"I den här artikeln förklaras de nya funktionerna i Python 3.10 jämfört med "
"3.9. Python 3.10 släpptes den 4 oktober 2021. För fullständig information, "
"se :ref:`changelog <changelog>`."

msgid "Summary -- Release highlights"
msgstr "Sammanfattning -- Release highlights"

msgid "New syntax features:"
msgstr "Nya syntaxfunktioner:"

msgid ":pep:`634`, Structural Pattern Matching: Specification"
msgstr ":pep:`634`, Matchning av strukturella mönster: Specifikation"

msgid ":pep:`635`, Structural Pattern Matching: Motivation and Rationale"
msgstr ""
":pep:`635`, Matchning av strukturella mönster: Motivation och motivering"

msgid ":pep:`636`, Structural Pattern Matching: Tutorial"
msgstr ":pep:`636`, Matchning av strukturella mönster: handledning"

msgid ""
":issue:`12782`, Parenthesized context managers are now officially allowed."
msgstr ""
":issue:`12782`, Kontexthanterare med parentes är nu officiellt tillåtna."

msgid "New features in the standard library:"
msgstr "Nya funktioner i standardbiblioteket:"

msgid ":pep:`618`, Add Optional Length-Checking To zip."
msgstr ":pep:`618`, Lägg till valfri längdkontroll till zip."

msgid "Interpreter improvements:"
msgstr "Förbättringar av tolkar:"

msgid ":pep:`626`, Precise line numbers for debugging and other tools."
msgstr ":pep:`626`, Exakta radnummer för felsökning och andra verktyg."

msgid "New typing features:"
msgstr "Nya funktioner för skrivning:"

msgid ":pep:`604`, Allow writing union types as X | Y"
msgstr ":pep:`604`, Tillåt att skriva unionstyper som X | Y"

msgid ":pep:`612`, Parameter Specification Variables"
msgstr ":pep:`612`, Parameter Specifikation Variabler"

msgid ":pep:`613`, Explicit Type Aliases"
msgstr ":pep:`613`, Explicita typ-alias"

msgid ":pep:`647`, User-Defined Type Guards"
msgstr ":pep:`647`, Användardefinierade typskydd"

msgid "Important deprecations, removals or restrictions:"
msgstr "Viktiga avskrivningar, borttagningar eller begränsningar:"

msgid ":pep:`644`, Require OpenSSL 1.1.1 or newer"
msgstr ":pep:`644`, Kräver OpenSSL 1.1.1 eller nyare"

msgid ":pep:`632`, Deprecate distutils module."
msgstr ":pep:`632`, Utgå ur distutils modul."

msgid ""
":pep:`623`, Deprecate and prepare for the removal of the wstr member in "
"PyUnicodeObject."
msgstr ""
":pep:`623`, Avveckla och förbered för borttagandet av wstr-medlemmen i "
"PyUnicodeObject."

msgid ":pep:`624`, Remove Py_UNICODE encoder APIs"
msgstr ":pep:`624`, Ta bort API:er för Py_UNICODE-kodare"

msgid ":pep:`597`, Add optional EncodingWarning"
msgstr ":pep:`597`, Lägg till valfri EncodingWarning"

msgid "New Features"
msgstr "Nya funktioner"

msgid "Parenthesized context managers"
msgstr "Förvaltare av kontext inom parentes"

msgid ""
"Using enclosing parentheses for continuation across multiple lines in "
"context managers is now supported. This allows formatting a long collection "
"of context managers in multiple lines in a similar way as it was previously "
"possible with import statements. For instance, all these examples are now "
"valid:"
msgstr ""
"Nu finns det stöd för att använda omslutande parenteser för fortsättning "
"över flera rader i kontexthanterare. Detta gör det möjligt att formatera en "
"lång samling kontexthanterare på flera rader på ett liknande sätt som det "
"tidigare var möjligt med import-satser. Till exempel är alla dessa exempel "
"nu giltiga:"

msgid ""
"with (CtxManager() as example):\n"
"    ...\n"
"\n"
"with (\n"
"    CtxManager1(),\n"
"    CtxManager2()\n"
"):\n"
"    ...\n"
"\n"
"with (CtxManager1() as example,\n"
"      CtxManager2()):\n"
"    ...\n"
"\n"
"with (CtxManager1(),\n"
"      CtxManager2() as example):\n"
"    ...\n"
"\n"
"with (\n"
"    CtxManager1() as example1,\n"
"    CtxManager2() as example2\n"
"):\n"
"    ..."
msgstr ""
"med (CtxManager() som exempel):\n"
"    ...\n"
"\n"
"med (\n"
"    CtxManager1(),\n"
"    CtxManager2()\n"
"):\n"
"    ...\n"
"\n"
"med (CtxManager1() som exempel,\n"
"      CtxManager2()):\n"
"    ...\n"
"\n"
"med (CtxManager1(),\n"
"      CtxManager2() som exempel):\n"
"    ...\n"
"\n"
"med (\n"
"    CtxManager1() som exempel1,\n"
"    CtxManager2() som exempel2\n"
"):\n"
"    ..."

msgid ""
"it is also possible to use a trailing comma at the end of the enclosed group:"
msgstr ""
"det är också möjligt att använda ett efterföljande kommatecken i slutet av "
"den bifogade gruppen:"

msgid ""
"with (\n"
"    CtxManager1() as example1,\n"
"    CtxManager2() as example2,\n"
"    CtxManager3() as example3,\n"
"):\n"
"    ..."
msgstr ""
"med (\n"
"    CtxManager1() som exempel1,\n"
"    CtxManager2() som exempel2,\n"
"    CtxManager3() som exempel3,\n"
"):\n"
"    ..."

msgid ""
"This new syntax uses the non LL(1) capacities of the new parser. Check :pep:"
"`617` for more details."
msgstr ""
"Denna nya syntax använder den nya parserns kapacitet som inte är LL(1). Se :"
"pep:`617` för mer information."

msgid ""
"(Contributed by Guido van Rossum, Pablo Galindo and Lysandros Nikolaou in :"
"issue:`12782` and :issue:`40334`.)"
msgstr ""
"(Bidrag från Guido van Rossum, Pablo Galindo och Lysandros Nikolaou i :issue:"
"`12782` och :issue:`40334`.)"

msgid "Better error messages"
msgstr "Bättre felmeddelanden"

msgid "SyntaxErrors"
msgstr "Syntaxfel"

msgid ""
"When parsing code that contains unclosed parentheses or brackets the "
"interpreter now includes the location of the unclosed bracket of parentheses "
"instead of displaying *SyntaxError: unexpected EOF while parsing* or "
"pointing to some incorrect location. For instance, consider the following "
"code (notice the unclosed '{'):"
msgstr ""
"Vid parsning av kod som innehåller oavslutade parenteser eller hakparenteser "
"inkluderar tolken nu platsen för den oavslutade parentesen eller "
"hakparentesen istället för att visa *SyntaxError: unexpected EOF while "
"parsing* eller peka på någon felaktig plats. Tänk till exempel på följande "
"kod (lägg märke till det oavslutade '{'):"

msgid ""
"expected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4,\n"
"            38: 4, 39: 4, 45: 5, 46: 5, 47: 5, 48: 5, 49: 5, 54: 6,\n"
"some_other_code = foo()"
msgstr ""
"expected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4,\n"
"            38: 4, 39: 4, 45: 5, 46: 5, 47: 5, 48: 5, 49: 5, 54: 6,\n"
"någon_annan_kod = foo()"

msgid ""
"Previous versions of the interpreter reported confusing places as the "
"location of the syntax error:"
msgstr ""
"Tidigare versioner av tolken rapporterade förvirrande platser som platsen "
"för syntaxfelet:"

msgid ""
"File \"example.py\", line 3\n"
"    some_other_code = foo()\n"
"                    ^\n"
"SyntaxError: invalid syntax"
msgstr ""
"Fil \"example.py\", rad 3\n"
"    någon_annan_kod = foo()\n"
"                    ^\n"
"SyntaxError: ogiltig syntax"

msgid "but in Python 3.10 a more informative error is emitted:"
msgstr "men i Python 3.10 avges ett mer informativt fel:"

msgid ""
"File \"example.py\", line 1\n"
"    expected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4,\n"
"               ^\n"
"SyntaxError: '{' was never closed"
msgstr ""
"Fil \"exempel.py\", rad 1\n"
"    expected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4,\n"
"               ^\n"
"SyntaxError: '{' stängdes aldrig"

msgid ""
"In a similar way, errors involving unclosed string literals (single and "
"triple quoted) now point to the start of the string instead of reporting EOF/"
"EOL."
msgstr ""
"På liknande sätt pekar fel som involverar oavslutade stränglitteraler "
"(enkel- och trippelciterade) nu på början av strängen istället för att "
"rapportera EOF/EOL."

msgid ""
"These improvements are inspired by previous work in the PyPy interpreter."
msgstr "Dessa förbättringar är inspirerade av tidigare arbete med PyPy-tolken."

msgid ""
"(Contributed by Pablo Galindo in :issue:`42864` and Batuhan Taskaya in :"
"issue:`40176`.)"
msgstr ""
"(Bidrag från Pablo Galindo i :issue:`42864` och Batuhan Taskaya i :issue:"
"`40176`.)"

msgid ""
":exc:`SyntaxError` exceptions raised by the interpreter will now highlight "
"the full error range of the expression that constitutes the syntax error "
"itself, instead of just where the problem is detected. In this way, instead "
"of displaying (before Python 3.10):"
msgstr ""
":exc:`SyntaxError` undantag som tolken gör kommer nu att markera hela "
"felområdet för det uttryck som utgör själva syntaxfelet, istället för bara "
"där problemet upptäcks. På detta sätt, istället för att visa (före Python "
"3.10):"

msgid ""
">>> foo(x, z for z in range(10), t, w)\n"
"  File \"<stdin>\", line 1\n"
"    foo(x, z for z in range(10), t, w)\n"
"           ^\n"
"SyntaxError: Generator expression must be parenthesized"
msgstr ""
"&gt;&gt;&gt; foo(x, z för z i intervall(10), t, w)\n"
"  Fil \"<stdin>\", rad 1\n"
"    foo(x, z för z i intervall(10), t, w)\n"
"           ^\n"
"Syntaxfel: Generatoruttrycket måste vara inom parentes"

msgid "now Python 3.10 will display the exception as:"
msgstr "nu kommer Python 3.10 att visa undantaget som:"

msgid ""
">>> foo(x, z for z in range(10), t, w)\n"
"  File \"<stdin>\", line 1\n"
"    foo(x, z for z in range(10), t, w)\n"
"           ^^^^^^^^^^^^^^^^^^^^\n"
"SyntaxError: Generator expression must be parenthesized"
msgstr ""
"&gt;&gt;&gt; foo(x, z för z i intervall(10), t, w)\n"
"  Fil \"<stdin>\", rad 1\n"
"    foo(x, z för z inom intervall(10), t, w)\n"
"           ^^^^^^^^^^^^^^^^^^^^\n"
"Syntaxfel: Generatoruttryck måste vara inom parentes"

msgid "This improvement was contributed by Pablo Galindo in :issue:`43914`."
msgstr "Denna förbättring har gjorts av Pablo Galindo i :issue:`43914`."

msgid ""
"A considerable amount of new specialized messages for :exc:`SyntaxError` "
"exceptions have been incorporated. Some of the most notable ones are as "
"follows:"
msgstr ""
"En avsevärd mängd nya specialmeddelanden för :exc:`SyntaxError`-undantag har "
"införts. Några av de mest anmärkningsvärda är följande:"

msgid "Missing ``:`` before blocks:"
msgstr "Saknar ``:`` före block:"

msgid ""
">>> if rocket.position > event_horizon\n"
"  File \"<stdin>\", line 1\n"
"    if rocket.position > event_horizon\n"
"                                      ^\n"
"SyntaxError: expected ':'"
msgstr ""
"&gt;&gt;&gt; if rocket.position &gt; event_horizon\n"
"  Fil \"<stdin>\", rad 1\n"
"    om raket.position &gt; händelsehorisont\n"
"                                      ^\n"
"SyntaxError: förväntat ':'"

msgid "(Contributed by Pablo Galindo in :issue:`42997`.)"
msgstr "(Bidrag från Pablo Galindo i :issue:`42997`.)"

msgid "Unparenthesised tuples in comprehensions targets:"
msgstr "Oparenthesiserade tupler i förståelsemål:"

msgid ""
">>> {x,y for x,y in zip('abcd', '1234')}\n"
"  File \"<stdin>\", line 1\n"
"    {x,y for x,y in zip('abcd', '1234')}\n"
"     ^\n"
"SyntaxError: did you forget parentheses around the comprehension target?"
msgstr ""
"&gt;&gt;&gt; {x,y för x,y i zip('abcd', '1234')}\n"
"  Fil \"<stdin>\", rad 1\n"
"    {x,y för x,y i zip('abcd', '1234')}\n"
"     ^\n"
"SyntaxError: glömde du parentesen runt förståelsemålet?"

msgid "(Contributed by Pablo Galindo in :issue:`43017`.)"
msgstr "(Bidrag från Pablo Galindo i :issue:`43017`.)"

msgid "Missing commas in collection literals and between expressions:"
msgstr "Kommatecken saknas i samlingslitteraler och mellan uttryck:"

msgid ""
">>> items = {\n"
"... x: 1,\n"
"... y: 2\n"
"... z: 3,\n"
"  File \"<stdin>\", line 3\n"
"    y: 2\n"
"       ^\n"
"SyntaxError: invalid syntax. Perhaps you forgot a comma?"
msgstr ""
"&gt;&gt;&gt; objekt = {\n"
"... x: 1,\n"
"... y: 2\n"
"... z: 3,\n"
"  Fil \"<stdin>\", rad 3\n"
"    y: 2\n"
"       ^\n"
"SyntaxError: ogiltig syntax. Du kanske glömde ett kommatecken?"

msgid "(Contributed by Pablo Galindo in :issue:`43822`.)"
msgstr "(Bidrag från Pablo Galindo i :issue:`43822`.)"

msgid "Multiple Exception types without parentheses:"
msgstr "Flera undantagstyper utan parenteser:"

msgid ""
">>> try:\n"
"...     build_dyson_sphere()\n"
"... except NotEnoughScienceError, NotEnoughResourcesError:\n"
"  File \"<stdin>\", line 3\n"
"    except NotEnoughScienceError, NotEnoughResourcesError:\n"
"           ^\n"
"SyntaxError: multiple exception types must be parenthesized"
msgstr ""
"&gt;&gt;&gt; försök:\n"
"... build_dyson_sphere()\n"
"... förutom NotEnoughScienceError, NotEnoughResourcesError:\n"
"  Fil \"<stdin>\", rad 3\n"
"    except NotEnoughScienceError, NotEnoughResourcesError:\n"
"           ^\n"
"SyntaxError: flera undantagstyper måste vara inom parentes"

msgid "(Contributed by Pablo Galindo in :issue:`43149`.)"
msgstr "(Bidrag från Pablo Galindo i :issue:`43149`.)"

msgid "Missing ``:`` and values in dictionary literals:"
msgstr "Saknar ``:`` och värden i ordboksliteraler:"

msgid ""
">>> values = {\n"
"... x: 1,\n"
"... y: 2,\n"
"... z:\n"
"... }\n"
"  File \"<stdin>\", line 4\n"
"    z:\n"
"     ^\n"
"SyntaxError: expression expected after dictionary key and ':'\n"
"\n"
">>> values = {x:1, y:2, z w:3}\n"
"  File \"<stdin>\", line 1\n"
"    values = {x:1, y:2, z w:3}\n"
"                        ^\n"
"SyntaxError: ':' expected after dictionary key"
msgstr ""
"&gt;&gt;&gt; värden = {\n"
"... x: 1,\n"
"... y: 2,\n"
"... z:\n"
"... }\n"
"  Fil \"<stdin>\", rad 4\n"
"    z:\n"
"     ^\n"
"SyntaxError: uttryck förväntat efter ordboksnyckel och ':'\n"
"\n"
"&gt;&gt;&gt; värden = {x:1, y:2, z w:3}\n"
"  Fil \"<stdin>\", rad 1\n"
"    värden = {x:1, y:2, z w:3} ^&gt; värden = {x:1, y:2, z w:3}\n"
"                        ^\n"
"SyntaxError: ':' väntas efter nyckel i ordlistan"

msgid "(Contributed by Pablo Galindo in :issue:`43823`.)"
msgstr "(Bidrag från Pablo Galindo i :issue:`43823`.)"

msgid "``try`` blocks without ``except`` or ``finally`` blocks:"
msgstr "``try``-block utan ``except`` eller ``finally``-block:"

msgid ""
">>> try:\n"
"...     x = 2\n"
"... something = 3\n"
"  File \"<stdin>\", line 3\n"
"    something  = 3\n"
"    ^^^^^^^^^\n"
"SyntaxError: expected 'except' or 'finally' block"
msgstr ""
"&gt;&gt;&gt; försök:\n"
"... x = 2\n"
"... något = 3\n"
"  Fil \"<stdin>\", rad 3\n"
"    något = 3\n"
"    ^^^^^^^^^\n"
"SyntaxError: förväntat 'except' eller 'finally' block"

msgid "(Contributed by Pablo Galindo in :issue:`44305`.)"
msgstr "(Bidrag från Pablo Galindo i :issue:`44305`.)"

msgid "Usage of ``=`` instead of ``==`` in comparisons:"
msgstr "Användning av ``=`` istället för ``==`` i jämförelser:"

msgid ""
">>> if rocket.position = event_horizon:\n"
"  File \"<stdin>\", line 1\n"
"    if rocket.position = event_horizon:\n"
"                       ^\n"
"SyntaxError: cannot assign to attribute here. Maybe you meant '==' instead "
"of '='?"
msgstr ""
"&gt;&gt;&gt; if rocket.position = event_horizon:\n"
"  Fil \"<stdin>\", rad 1\n"
"    if rocket.position = event_horizon:\n"
"                       ^\n"
"SyntaxError: kan inte tilldela till attribut här. Du kanske menade '==' "
"istället för '='?"

msgid "(Contributed by Pablo Galindo in :issue:`43797`.)"
msgstr "(Bidrag från Pablo Galindo i :issue:`43797`.)"

msgid "Usage of ``*`` in f-strings:"
msgstr "Användning av ``*`` i f-strängar:"

msgid ""
">>> f\"Black holes {*all_black_holes} and revelations\"\n"
"  File \"<stdin>\", line 1\n"
"    (*all_black_holes)\n"
"     ^\n"
"SyntaxError: f-string: cannot use starred expression here"
msgstr ""
"&gt;&gt;&gt; f\"Svarta hål {*all_black_holes} och avslöjanden\"\n"
"  Fil \"<stdin>\", rad 1\n"
"    (*alla_svarta_hål)\n"
"     ^\n"
"SyntaxError: f-string: kan inte använda ett stjärnmärkt uttryck här"

msgid "(Contributed by Pablo Galindo in :issue:`41064`.)"
msgstr "(Bidrag från Pablo Galindo i :issue:`41064`.)"

msgid "IndentationErrors"
msgstr "Indragningsfel"

msgid ""
"Many :exc:`IndentationError` exceptions now have more context regarding what "
"kind of block was expecting an indentation, including the location of the "
"statement:"
msgstr ""
"Många :exc:`IndentationError`-undantag har nu mer kontext när det gäller "
"vilken typ av block som förväntade sig en indragning, inklusive platsen för "
"uttalandet:"

msgid ""
">>> def foo():\n"
"...    if lel:\n"
"...    x = 2\n"
"  File \"<stdin>\", line 3\n"
"    x = 2\n"
"    ^\n"
"IndentationError: expected an indented block after 'if' statement in line 2"
msgstr ""
"&gt;&gt;&gt; def foo():\n"
"... om lel:\n"
"... x = 2\n"
"  Fil \"<stdin>\", rad 3\n"
"    x = 2\n"
"    ^\n"
"IndentationError: förväntat indraget block efter \"if\"-satsen på rad 2"

msgid "AttributeErrors"
msgstr "AttributFel"

msgid ""
"When printing :exc:`AttributeError`, :c:func:`!PyErr_Display` will offer "
"suggestions of similar attribute names in the object that the exception was "
"raised from:"
msgstr ""
"Vid utskrift av :exc:`AttributeError` kommer :c:func:`!PyErr_Display` att ge "
"förslag på liknande attributnamn i det objekt som undantaget uppstod från:"

msgid ""
">>> collections.namedtoplo\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"AttributeError: module 'collections' has no attribute 'namedtoplo'. Did you "
"mean: namedtuple?"
msgstr ""
"&gt;&gt;&gt; samlingar.namedtoplo\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i <module>\n"
"AttributeError: modulen 'collections' har inget attribut 'namedtoplo'. "
"Menade du: namedtuple?"

msgid "(Contributed by Pablo Galindo in :issue:`38530`.)"
msgstr "(Bidrag från Pablo Galindo i :issue:`38530`.)"

msgid ""
"Notice this won't work if :c:func:`!PyErr_Display` is not called to display "
"the error which can happen if some other custom error display function is "
"used. This is a common scenario in some REPLs like IPython."
msgstr ""
"Observera att detta inte kommer att fungera om :c:func:`!PyErr_Display` inte "
"anropas för att visa felet, vilket kan hända om någon annan anpassad "
"felvisningsfunktion används. Detta är ett vanligt scenario i vissa REPLs som "
"IPython."

msgid "NameErrors"
msgstr "NamnFel"

msgid ""
"When printing :exc:`NameError` raised by the interpreter, :c:func:`!"
"PyErr_Display` will offer suggestions of similar variable names in the "
"function that the exception was raised from:"
msgstr ""
"Vid utskrift av :exc:`NameError` som uppstått i tolken kommer :c:func:`!"
"PyErr_Display` att ge förslag på liknande variabelnamn i den funktion som "
"undantaget uppstått i:"

msgid ""
">>> schwarzschild_black_hole = None\n"
">>> schwarschild_black_hole\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"NameError: name 'schwarschild_black_hole' is not defined. Did you mean: "
"schwarzschild_black_hole?"
msgstr ""
"&gt;&gt;&gt; schwarzschild_black_hole = Ingen\n"
"&gt;&gt;&gt; schwarschild_svart_hål\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i <module>\n"
"NameError: namnet 'schwarschild_black_hole' är inte definierat. Menade du: "
"schwarzschild_black_hole?"

msgid ""
"Notice this won't work if :c:func:`!PyErr_Display` is not called to display "
"the error, which can happen if some other custom error display function is "
"used. This is a common scenario in some REPLs like IPython."
msgstr ""
"Observera att detta inte kommer att fungera om :c:func:`!PyErr_Display` inte "
"anropas för att visa felet, vilket kan hända om någon annan anpassad "
"felvisningsfunktion används. Detta är ett vanligt scenario i vissa REPLs som "
"IPython."

msgid "PEP 626: Precise line numbers for debugging and other tools"
msgstr "PEP 626: Exakta radnummer för felsökning och andra verktyg"

msgid ""
"PEP 626 brings more precise and reliable line numbers for debugging, "
"profiling and coverage tools. Tracing events, with the correct line number, "
"are generated for all lines of code executed and only for lines of code that "
"are executed."
msgstr ""
"PEP 626 ger mer exakta och tillförlitliga radnummer för verktyg för "
"felsökning, profilering och täckning. Spårningshändelser med korrekt "
"radnummer genereras för alla rader med kod som exekveras och endast för "
"rader med kod som exekveras."

msgid ""
"The :attr:`~frame.f_lineno` attribute of frame objects will always contain "
"the expected line number."
msgstr ""
"Attributet :attr:`~frame.f_lineno` för frame-objekt kommer alltid att "
"innehålla det förväntade radnumret."

msgid ""
"The :attr:`~codeobject.co_lnotab` attribute of :ref:`code objects <code-"
"objects>` is deprecated and will be removed in 3.12. Code that needs to "
"convert from offset to line number should use the new :meth:`~codeobject."
"co_lines` method instead."
msgstr ""
"Attributet :attr:`~codeobject.co_lnotab` i :ref:``code objects <code-"
"objects>` är föråldrat och kommer att tas bort i 3.12. Kod som behöver "
"konvertera från offset till radnummer bör använda den nya metoden :meth:"
"`~codeobject.co_lines` istället."

msgid "PEP 634: Structural Pattern Matching"
msgstr "PEP 634: Matchning av strukturella mönster"

msgid ""
"Structural pattern matching has been added in the form of a *match "
"statement* and *case statements* of patterns with associated actions. "
"Patterns consist of sequences, mappings, primitive data types as well as "
"class instances. Pattern matching enables programs to extract information "
"from complex data types, branch on the structure of data, and apply specific "
"actions based on different forms of data."
msgstr ""
"Strukturell mönstermatchning har lagts till i form av en *match statement* "
"och *case statements* av mönster med tillhörande åtgärder. Mönster består av "
"sekvenser, mappningar, primitiva datatyper samt klassinstanser. "
"Mönstermatchning gör det möjligt för program att extrahera information från "
"komplexa datatyper, förgrena sig till datastrukturen och tillämpa specifika "
"åtgärder baserat på olika former av data."

msgid "Syntax and operations"
msgstr "Syntax och operationer"

msgid "The generic syntax of pattern matching is::"
msgstr "Den generiska syntaxen för mönstermatchning är::"

msgid ""
"match subject:\n"
"    case <pattern_1>:\n"
"        <action_1>\n"
"    case <pattern_2>:\n"
"        <action_2>\n"
"    case <pattern_3>:\n"
"        <action_3>\n"
"    case _:\n"
"        <action_wildcard>"
msgstr ""
"matcha ämne:\n"
"    fall <mönster_1>:\n"
"        <åtgärd_1>\n"
"    fall <mönster_2>:\n"
"        <åtgärd_2>\n"
"    fall <mönster_3>:\n"
"        <handling_3>\n"
"    fall _:\n"
"        <handling_viltkort>"

msgid ""
"A match statement takes an expression and compares its value to successive "
"patterns given as one or more case blocks.  Specifically, pattern matching "
"operates by:"
msgstr ""
"En match-sats tar ett uttryck och jämför dess värde med på varandra följande "
"mönster som anges i ett eller flera case-block.  Specifikt fungerar "
"mönstermatchning genom att:"

msgid "using data with type and shape (the ``subject``)"
msgstr "använda data med typ och form (``ämnet``)"

msgid "evaluating the ``subject`` in the ``match`` statement"
msgstr "utvärdering av ``ämnet`` i ``match``-satsen"

msgid ""
"comparing the subject with each pattern in a ``case`` statement from top to "
"bottom until a match is confirmed."
msgstr ""
"jämför objektet med varje mönster i en \"fall\"-förklaring uppifrån och ner "
"tills en matchning bekräftas."

msgid "executing the action associated with the pattern of the confirmed match"
msgstr ""
"utföra den åtgärd som är associerad med mönstret för den bekräftade "
"matchningen"

msgid ""
"If an exact match is not confirmed, the last case, a wildcard ``_``, if "
"provided, will be used as the matching case. If an exact match is not "
"confirmed and a wildcard case does not exist, the entire match block is a no-"
"op."
msgstr ""
"Om en exakt matchning inte bekräftas kommer det sista fallet, ett "
"jokertecken ``_``, om det anges, att användas som matchningsfall. Om en "
"exakt matchning inte bekräftas och ett jokerteckenfall inte finns, är hela "
"matchningsblocket en no-op."

msgid "Declarative approach"
msgstr "Deklarativ metod"

msgid ""
"Readers may be aware of pattern matching through the simple example of "
"matching a subject (data object) to a literal (pattern) with the switch "
"statement found in C, Java or JavaScript (and many other languages). Often "
"the switch statement is used for comparison of an object/expression with "
"case statements containing literals."
msgstr ""
"Läsarna kanske känner till mönstermatchning genom det enkla exemplet att "
"matcha ett subjekt (dataobjekt) mot en bokstav (mönster) med switch-satsen "
"som finns i C, Java eller JavaScript (och många andra språk). Ofta används "
"switch-satsen för att jämföra ett objekt/uttryck med case-satser som "
"innehåller literaler."

msgid ""
"More powerful examples of pattern matching can be found in languages such as "
"Scala and Elixir. With structural pattern matching, the approach is "
"\"declarative\" and explicitly states the conditions (the patterns) for data "
"to match."
msgstr ""
"Mer kraftfulla exempel på mönstermatchning finns i språk som Scala och "
"Elixir. Med strukturell mönstermatchning är tillvägagångssättet "
"\"deklarativt\" och anger uttryckligen villkoren (mönstren) för att data ska "
"matcha."

msgid ""
"While an \"imperative\" series of instructions using nested \"if\" "
"statements could be used to accomplish something similar to structural "
"pattern matching, it is less clear than the \"declarative\" approach. "
"Instead the \"declarative\" approach states the conditions to meet for a "
"match and is more readable through its explicit patterns. While structural "
"pattern matching can be used in its simplest form comparing a variable to a "
"literal in a case statement, its true value for Python lies in its handling "
"of the subject's type and shape."
msgstr ""
"Även om en \"imperativ\" serie instruktioner med nästlade \"if\"-satser kan "
"användas för att åstadkomma något som liknar strukturell mönstermatchning, "
"är den mindre tydlig än den \"deklarativa\" metoden. Istället anger den "
"\"deklarativa\" metoden de villkor som ska uppfyllas för en matchning och är "
"mer läsbar genom sina explicita mönster. Strukturell mönstermatchning kan "
"användas i sin enklaste form för att jämföra en variabel med en bokstav i en "
"case-sats, men dess verkliga värde för Python ligger i hanteringen av ämnets "
"typ och form."

msgid "Simple pattern: match to a literal"
msgstr "Enkelt mönster: matcha till en bokstav"

msgid ""
"Let's look at this example as pattern matching in its simplest form: a "
"value, the subject, being matched to several literals, the patterns. In the "
"example below, ``status`` is the subject of the match statement. The "
"patterns are each of the case statements, where literals represent request "
"status codes. The associated action to the case is executed after a match::"
msgstr ""
"Låt oss se på det här exemplet som mönstermatchning i sin enklaste form: ett "
"värde, ämnet, matchas mot flera litterala värden, mönstren. I exemplet nedan "
"är ``status`` subjektet i matchningssatsen. Mönstren är var och en av "
"fallbeskrivningarna, där bokstäverna representerar statuskoder för begäran. "
"Den åtgärd som är kopplad till fallet utförs efter en matchning::"

msgid ""
"def http_error(status):\n"
"    match status:\n"
"        case 400:\n"
"            return \"Bad request\"\n"
"        case 404:\n"
"            return \"Not found\"\n"
"        case 418:\n"
"            return \"I'm a teapot\"\n"
"        case _:\n"
"            return \"Something's wrong with the internet\""
msgstr ""
"def http_error(status):\n"
"    matcha status:\n"
"        fall 400:\n"
"            returnera \"Dålig förfrågan\"\n"
"        fall 404:\n"
"            returnera \"Hittades inte\"\n"
"        fall 418:\n"
"            returnera \"Jag är en tekanna\"\n"
"        fall _:\n"
"            returnerar \"Något är fel med internet\""

msgid ""
"If the above function is passed a ``status`` of 418, \"I'm a teapot\" is "
"returned. If the above function is passed a ``status`` of 500, the case "
"statement with ``_`` will match as a wildcard, and \"Something's wrong with "
"the internet\" is returned. Note the last block: the variable name, ``_``, "
"acts as a *wildcard* and insures the subject will always match. The use of "
"``_`` is optional."
msgstr ""
"Om ovanstående funktion får en ``status`` på 418 returneras \"I'm a "
"teapot\". Om ovanstående funktion får en ``status`` på 500, kommer case-"
"satsen med ``_`` att matchas som ett jokertecken och \"Något är fel med "
"internet\" returneras. Observera det sista blocket: variabelnamnet ``_`` "
"fungerar som ett *jokertecken* och säkerställer att ämnet alltid kommer att "
"matcha. Användningen av ``_`` är valfri."

msgid ""
"You can combine several literals in a single pattern using ``|`` (\"or\")::"
msgstr ""
"Du kan kombinera flera literaler i ett enda mönster med hjälp av ``|`` "
"(\"eller\")::"

msgid ""
"case 401 | 403 | 404:\n"
"    return \"Not allowed\""
msgstr ""
"fall 401 | 403 | 404:\n"
"    return \"Inte tillåtet\""

msgid "Behavior without the wildcard"
msgstr "Beteende utan jokertecken"

msgid ""
"If we modify the above example by removing the last case block, the example "
"becomes::"
msgstr ""
"Om vi ändrar ovanstående exempel genom att ta bort det sista fallblocket "
"blir exemplet::"

msgid ""
"def http_error(status):\n"
"    match status:\n"
"        case 400:\n"
"            return \"Bad request\"\n"
"        case 404:\n"
"            return \"Not found\"\n"
"        case 418:\n"
"            return \"I'm a teapot\""
msgstr ""
"def http_error(status):\n"
"    matcha status:\n"
"        fall 400:\n"
"            returnera \"Dålig förfrågan\"\n"
"        fall 404:\n"
"            returnera \"Hittades inte\"\n"
"        fall 418:\n"
"            returnera \"Jag är en tekanna\""

msgid ""
"Without the use of ``_`` in a case statement, a match may not exist. If no "
"match exists, the behavior is a no-op. For example, if ``status`` of 500 is "
"passed, a no-op occurs."
msgstr ""
"Utan användning av ``_`` i en case-sats kan det hända att det inte finns "
"någon matchning. Om det inte finns någon matchning är beteendet en no-op. Om "
"t.ex. ``status`` 500 skickas, inträffar en no-op."

msgid "Patterns with a literal and variable"
msgstr "Mönster med bokstav och variabel"

msgid ""
"Patterns can look like unpacking assignments, and a pattern may be used to "
"bind variables. In this example, a data point can be unpacked to its x-"
"coordinate and y-coordinate::"
msgstr ""
"Mönster kan se ut som uppackningsuppdrag, och ett mönster kan användas för "
"att binda variabler. I det här exemplet kan en datapunkt packas upp till "
"dess x-koordinat och y-koordinat::"

msgid ""
"# point is an (x, y) tuple\n"
"match point:\n"
"    case (0, 0):\n"
"        print(\"Origin\")\n"
"    case (0, y):\n"
"        print(f\"Y={y}\")\n"
"    case (x, 0):\n"
"        print(f\"X={x}\")\n"
"    case (x, y):\n"
"        print(f\"X={x}, Y={y}\")\n"
"    case _:\n"
"        raise ValueError(\"Not a point\")"
msgstr ""
"# punkten är en (x, y) tupel\n"
"matcha punkten:\n"
"    fall (0, 0):\n"
"        print(\"Ursprung\")\n"
"    fall (0, y):\n"
"        print(f\"Y={y}\")\n"
"    fall (x, 0):\n"
"        print(f\"X={x}\")\n"
"    fall (x, y):\n"
"        print(f\"X={x}, Y={y}\")\n"
"    fall _:\n"
"        raise ValueError(\"Inte en punkt\")"

msgid ""
"The first pattern has two literals, ``(0, 0)``, and may be thought of as an "
"extension of the literal pattern shown above. The next two patterns combine "
"a literal and a variable, and the variable *binds* a value from the subject "
"(``point``).  The fourth pattern captures two values, which makes it "
"conceptually similar to the unpacking assignment ``(x, y) = point``."
msgstr ""
"Det första mönstret har två literaler, ``(0, 0)``, och kan ses som en "
"utvidgning av det literala mönstret som visas ovan. De två följande mönstren "
"kombinerar en bokstav och en variabel, och variabeln *binder* ett värde från "
"subjektet (``point``).  Det fjärde mönstret fångar upp två värden, vilket "
"gör att det konceptuellt liknar uppackningsuppgiften ``(x, y) = point``."

msgid "Patterns and classes"
msgstr "Mönster och klasser"

msgid ""
"If you are using classes to structure your data, you can use as a pattern "
"the class name followed by an argument list resembling a constructor. This "
"pattern has the ability to capture instance attributes into variables::"
msgstr ""
"Om du använder klasser för att strukturera dina data kan du som mönster "
"använda klassnamnet följt av en argumentlista som liknar en konstruktor. Det "
"här mönstret har möjlighet att fånga upp instansattribut i variabler::"

msgid ""
"class Point:\n"
"    def __init__(self, x, y):\n"
"        self.x = x\n"
"        self.y = y\n"
"\n"
"def location(point):\n"
"    match point:\n"
"        case Point(x=0, y=0):\n"
"            print(\"Origin is the point's location.\")\n"
"        case Point(x=0, y=y):\n"
"            print(f\"Y={y} and the point is on the y-axis.\")\n"
"        case Point(x=x, y=0):\n"
"            print(f\"X={x} and the point is on the x-axis.\")\n"
"        case Point():\n"
"            print(\"The point is located somewhere else on the plane.\")\n"
"        case _:\n"
"            print(\"Not a point\")"
msgstr ""
"klass Punkt:\n"
"    def __init__(self, x, y):\n"
"        self.x = x\n"
"        self.y = y\n"
"\n"
"def location(punkt):\n"
"    matcha punkt:\n"
"        fall Punkt(x=0, y=0):\n"
"            print(\"Ursprung är punktens position.\")\n"
"        fall Punkt(x=0, y=y):\n"
"            print(f\"Y={y} och punkten ligger på y-axeln.\")\n"
"        fall Punkt(x=x, y=0):\n"
"            print(f\"X={x} och punkten ligger på x-axeln.\")\n"
"        fall Punkt():\n"
"            print(\"Punkten är placerad någon annanstans på planet.\")\n"
"        fall _:\n"
"            print(\"Inte en punkt\")"

msgid "Patterns with positional parameters"
msgstr "Mönster med positionella parametrar"

msgid ""
"You can use positional parameters with some builtin classes that provide an "
"ordering for their attributes (e.g. dataclasses). You can also define a "
"specific position for attributes in patterns by setting the "
"``__match_args__`` special attribute in your classes. If it's set to (\"x\", "
"\"y\"), the following patterns are all equivalent (and all bind the ``y`` "
"attribute to the ``var`` variable)::"
msgstr ""
"Du kan använda positionella parametrar med vissa inbyggda klasser som ger en "
"ordning för sina attribut (t.ex. dataklasser). Du kan också definiera en "
"specifik position för attribut i mönster genom att ställa in "
"specialattributet ``__match_args__`` i dina klasser. Om det är inställt på "
"(\"x\", \"y\") är följande mönster alla likvärdiga (och alla binder "
"attributet ``y`` till variabeln ``var``)::"

msgid ""
"Point(1, var)\n"
"Point(1, y=var)\n"
"Point(x=1, y=var)\n"
"Point(y=var, x=1)"
msgstr ""
"Punkt(1, var)\n"
"Punkt(1, y=var)\n"
"Punkt(x=1, y=var)\n"
"Punkt(y=var, x=1)"

msgid "Nested patterns"
msgstr "Nästlade mönster"

msgid ""
"Patterns can be arbitrarily nested.  For example, if our data is a short "
"list of points, it could be matched like this::"
msgstr ""
"Mönster kan vara godtyckligt nästlade.  Om våra data till exempel är en kort "
"lista med punkter, kan de matchas så här::"

msgid ""
"match points:\n"
"    case []:\n"
"        print(\"No points in the list.\")\n"
"    case [Point(0, 0)]:\n"
"        print(\"The origin is the only point in the list.\")\n"
"    case [Point(x, y)]:\n"
"        print(f\"A single point {x}, {y} is in the list.\")\n"
"    case [Point(0, y1), Point(0, y2)]:\n"
"        print(f\"Two points on the Y axis at {y1}, {y2} are in the list.\")\n"
"    case _:\n"
"        print(\"Something else is found in the list.\")"
msgstr ""
"matchningspunkter:\n"
"    fall []:\n"
"        print(\"Inga punkter i listan.\")\n"
"    fall [Punkt(0, 0)]:\n"
"        print(\"Ursprunget är den enda punkten i listan.\")\n"
"    fall [Punkt(x, y)]:\n"
"        print(f\"En enda punkt {x}, {y} finns i listan.\")\n"
"    fall [Punkt(0, y1), Punkt(0, y2)]:\n"
"        print(f\"Två punkter på Y-axeln vid {y1}, {y2} finns i listan.\")\n"
"    fall _:\n"
"        print(\"Något annat finns i listan.\")"

msgid "Complex patterns and the wildcard"
msgstr "Komplexa mönster och jokertecken"

msgid ""
"To this point, the examples have used ``_`` alone in the last case "
"statement. A wildcard can be used in more complex patterns, such as "
"``('error', code, _)``. For example::"
msgstr ""
"Hittills har exemplen använt ``_`` enbart i den sista fallbeskrivningen. Ett "
"jokertecken kan användas i mer komplexa mönster, till exempel ``('error', "
"code, _)``. Till exempel::"

msgid ""
"match test_variable:\n"
"    case ('warning', code, 40):\n"
"        print(\"A warning has been received.\")\n"
"    case ('error', code, _):\n"
"        print(f\"An error {code} occurred.\")"
msgstr ""
"matcha test_variabel:\n"
"    fall (\"varning\", kod, 40):\n"
"        print(\"En varning har mottagits.\")\n"
"    fall (\"error\", kod, _):\n"
"        print(f\"Ett fel {code} inträffade.\")"

msgid ""
"In the above case, ``test_variable`` will match for ('error', code, 100) and "
"('error', code, 800)."
msgstr ""
"I ovanstående fall kommer ``test_variable`` att matcha för ('error', kod, "
"100) och ('error', kod, 800)."

msgid "Guard"
msgstr "Guard"

msgid ""
"We can add an ``if`` clause to a pattern, known as a \"guard\".  If the "
"guard is false, ``match`` goes on to try the next case block.  Note that "
"value capture happens before the guard is evaluated::"
msgstr ""
"Vi kan lägga till en \"om\"-klausul i ett mönster, en s.k. \"guard\".  Om "
"guarden är falsk går ``match`` vidare till att prova nästa fallblock.  "
"Observera att värdeinfångning sker innan guarden utvärderas::"

msgid ""
"match point:\n"
"    case Point(x, y) if x == y:\n"
"        print(f\"The point is located on the diagonal Y=X at {x}.\")\n"
"    case Point(x, y):\n"
"        print(f\"Point is not on the diagonal.\")"
msgstr ""
"matcha punkt:\n"
"    case Point(x, y) if x == y:\n"
"        print(f\"Punkten ligger på diagonalen Y=X vid {x}.\")\n"
"    fall Punkt(x, y):\n"
"        print(f\"Punkten ligger inte på diagonalen.\")"

msgid "Other Key Features"
msgstr "Andra viktiga funktioner"

msgid "Several other key features:"
msgstr "Flera andra viktiga funktioner:"

msgid ""
"Like unpacking assignments, tuple and list patterns have exactly the same "
"meaning and actually match arbitrary sequences. Technically, the subject "
"must be a sequence. Therefore, an important exception is that patterns don't "
"match iterators. Also, to prevent a common mistake, sequence patterns don't "
"match strings."
msgstr ""
"Precis som uppackningsuppdrag har tuple- och listmönster exakt samma "
"betydelse och matchar faktiskt godtyckliga sekvenser. Tekniskt sett måste "
"ämnet vara en sekvens. Därför är ett viktigt undantag att mönster inte "
"matchar iteratorer. För att förhindra ett vanligt misstag matchar inte "
"heller sekvensmönster strängar."

msgid ""
"Sequence patterns support wildcards: ``[x, y, *rest]`` and ``(x, y, *rest)`` "
"work similar to wildcards in unpacking assignments.  The name after ``*`` "
"may also be ``_``, so ``(x, y, *_)`` matches a sequence of at least two "
"items without binding the remaining items."
msgstr ""
"Sekvensmönster har stöd för jokertecken: ``[x, y, *rest]`` och ``(x, y, "
"*rest)`` fungerar på samma sätt som jokertecken i uppackningsuppdrag.  "
"Namnet efter ``*`` kan också vara ``_``, så ``(x, y, *_)`` matchar en "
"sekvens med minst två objekt utan att binda de återstående objekten."

msgid ""
"Mapping patterns: ``{\"bandwidth\": b, \"latency\": l}`` captures the "
"``\"bandwidth\"`` and ``\"latency\"`` values from a dict.  Unlike sequence "
"patterns, extra keys are ignored.  A wildcard ``**rest`` is also supported.  "
"(But ``**_`` would be redundant, so is not allowed.)"
msgstr ""
"Mappningsmönster: ``{\"bandwidth\": b, \"latency\": l}`` fångar värdena "
"``\"bandwidth\"`` och ``\"latency\"`` från en dict.  Till skillnad från "
"sekvensmönster ignoreras extra nycklar.  Ett jokertecken ``**rest`` stöds "
"också.  (Men ``**_`` skulle vara överflödigt och är därför inte tillåtet)"

msgid "Subpatterns may be captured using the ``as`` keyword::"
msgstr "Undermönster kan fångas upp med hjälp av nyckelordet ``as``::"

msgid "case (Point(x1, y1), Point(x2, y2) as p2): ..."
msgstr "case (Punkt(x1, y1), Punkt(x2, y2) som p2): ..."

msgid ""
"This binds x1, y1, x2, y2 like you would expect without the ``as`` clause, "
"and p2 to the entire second item of the subject."
msgstr ""
"Detta binder x1, y1, x2, y2 som du skulle förvänta dig utan klausulen "
"``som``, och p2 till hela den andra posten i ämnet."

msgid ""
"Most literals are compared by equality. However, the singletons ``True``, "
"``False`` and ``None`` are compared by identity."
msgstr ""
"De flesta literaler jämförs med likhet. Singletonerna ``True``, ``False`` "
"och ``None`` jämförs dock med identitet."

msgid ""
"Named constants may be used in patterns.  These named constants must be "
"dotted names to prevent the constant from being interpreted as a capture "
"variable::"
msgstr ""
"Namngivna konstanter kan användas i mönster.  Dessa namngivna konstanter "
"måste vara punkterade namn för att förhindra att konstanten tolkas som en "
"fångstvariabel::"

msgid ""
"from enum import Enum\n"
"class Color(Enum):\n"
"    RED = 0\n"
"    GREEN = 1\n"
"    BLUE = 2\n"
"\n"
"color = Color.GREEN\n"
"match color:\n"
"    case Color.RED:\n"
"        print(\"I see red!\")\n"
"    case Color.GREEN:\n"
"        print(\"Grass is green\")\n"
"    case Color.BLUE:\n"
"        print(\"I'm feeling the blues :(\")"
msgstr ""
"from enum import Enum\n"
"klass Färg(Enum):\n"
"    RED = 0\n"
"    GRÖN = 1\n"
"    BLÅ = 2\n"
"\n"
"färg = Färg.GRÖN\n"
"matcha färg:\n"
"    fall Färg.RÖD:\n"
"        print(\"Jag ser rött!\")\n"
"    fall Färg.GRÖN:\n"
"        print(\"Gräs är grönt\")\n"
"    fall Färg.BLÅ:\n"
"        print(\"Jag känner mig bluesig :(\")"

msgid ""
"For the full specification see :pep:`634`.  Motivation and rationale are in :"
"pep:`635`, and a longer tutorial is in :pep:`636`."
msgstr ""
"För fullständig specifikation se :pep:`634`.  Motivering och skäl finns i :"
"pep:`635`, och en längre handledning finns i :pep:`636`."

msgid "Optional ``EncodingWarning`` and ``encoding=\"locale\"`` option"
msgstr ""
"Valfritt alternativ för ``EncodingWarning`` och ``encoding=\"locale\"``"

msgid ""
"The default encoding of :class:`~io.TextIOWrapper` and :func:`open` is "
"platform and locale dependent. Since UTF-8 is used on most Unix platforms, "
"omitting ``encoding`` option when opening UTF-8 files (e.g. JSON, YAML, "
"TOML, Markdown) is a very common bug. For example::"
msgstr ""
"Standardkodningen för :class:`~io.TextIOWrapper` och :func:`open` är "
"plattforms- och lokalberoende. Eftersom UTF-8 används på de flesta Unix-"
"plattformar är det ett mycket vanligt fel att utelämna alternativet "
"``encoding`` när UTF-8-filer öppnas (t.ex. JSON, YAML, TOML, Markdown). Till "
"exempel::"

msgid ""
"# BUG: \"rb\" mode or encoding=\"utf-8\" should be used.\n"
"with open(\"data.json\") as f:\n"
"    data = json.load(f)"
msgstr ""
"# BUG: \"rb\"-läge eller encoding=\"utf-8\" ska användas.\n"
"med open(\"data.json\") som f:\n"
"    data = json.load(f)"

msgid ""
"To find this type of bug, an optional ``EncodingWarning`` is added. It is "
"emitted when :data:`sys.flags.warn_default_encoding <sys.flags>` is true and "
"locale-specific default encoding is used."
msgstr ""
"För att hitta den här typen av fel läggs en valfri ``EncodingWarning`` till. "
"Den skickas ut när :data:`sys.flags.warn_default_encoding <sys.flags>` är "
"true och en lokalspecifik standardkodning används."

msgid ""
"``-X warn_default_encoding`` option and :envvar:`PYTHONWARNDEFAULTENCODING` "
"are added to enable the warning."
msgstr ""
"alternativet ``-X warn_default_encoding`` och :envvar:"
"`PYTHONWARNDEFAULTENCODING` läggs till för att aktivera varningen."

msgid "See :ref:`io-text-encoding` for more information."
msgstr "Se :ref:`io-text-encoding` för mer information."

msgid "New Features Related to Type Hints"
msgstr "Nya funktioner relaterade till typtips"

msgid ""
"This section covers major changes affecting :pep:`484` type hints and the :"
"mod:`typing` module."
msgstr ""
"Detta avsnitt behandlar större ändringar som påverkar :pep:`484` typtips och "
"modulen :mod:`typing`."

msgid "PEP 604: New Type Union Operator"
msgstr "PEP 604: Ny typ av union-operator"

msgid ""
"A new type union operator was introduced which enables the syntax ``X | Y``. "
"This provides a cleaner way of expressing 'either type X or type Y' instead "
"of using :class:`typing.Union`, especially in type hints."
msgstr ""
"En ny typunionoperator introducerades som möjliggör syntaxen ``X | Y``. "
"Detta ger ett renare sätt att uttrycka \"antingen typ X eller typ Y\" "
"istället för att använda :class:`typing.Union`, särskilt i typtips."

msgid ""
"In previous versions of Python, to apply a type hint for functions accepting "
"arguments of multiple types, :class:`typing.Union` was used::"
msgstr ""
"I tidigare versioner av Python användes :class:`typing.Union` för att "
"tillämpa en typhint för funktioner som accepterar argument av flera typer:"

msgid ""
"def square(number: Union[int, float]) -> Union[int, float]:\n"
"    return number ** 2"
msgstr ""
"def square(number: Union[int, float]) -> Union[int, float]:\n"
"    returnerar tal ** 2"

msgid "Type hints can now be written in a more succinct manner::"
msgstr "Typtips kan nu skrivas på ett mer kortfattat sätt::"

msgid ""
"def square(number: int | float) -> int | float:\n"
"    return number ** 2"
msgstr ""
"def square(number: int | float) -> int | float:\n"
"    returnerar nummer ** 2"

msgid ""
"This new syntax is also accepted as the second argument to :func:"
"`isinstance` and :func:`issubclass`::"
msgstr ""
"Denna nya syntax accepteras också som det andra argumentet till :func:"
"`isinstance` och :func:`issubclass`::"

msgid ""
">>> isinstance(1, int | str)\n"
"True"
msgstr ""
">>> isinstance(1, int | str)\n"
"Sant"

msgid "See :ref:`types-union` and :pep:`604` for more details."
msgstr "Se :ref:`types-union` och :pep:`604` för mer information."

msgid ""
"(Contributed by Maggie Moss and Philippe Prados in :issue:`41428`, with "
"additions by Yurii Karabas and Serhiy Storchaka in :issue:`44490`.)"
msgstr ""
"(Bidrag från Maggie Moss och Philippe Prados i :issue:`41428`, med tillägg "
"från Yurii Karabas och Serhiy Storchaka i :issue:`44490`.)"

msgid "PEP 612: Parameter Specification Variables"
msgstr "PEP 612: Variabler för parameterspecifikation"

msgid ""
"Two new options to improve the information provided to static type checkers "
"for :pep:`484`\\ 's ``Callable`` have been added to the :mod:`typing` module."
msgstr ""
"Två nya alternativ för att förbättra informationen som tillhandahålls till "
"statiska typkontrollanter för :pep:`484`'s ``Callable`` har lagts till i "
"modulen :mod:`typing`."

msgid ""
"The first is the parameter specification variable.  They are used to forward "
"the parameter types of one callable to another callable -- a pattern "
"commonly found in higher order functions and decorators.  Examples of usage "
"can be found in :class:`typing.ParamSpec`. Previously, there was no easy way "
"to type annotate dependency of parameter types in such a precise manner."
msgstr ""
"Den första är variabeln för parameterspecifikation.  De används för att "
"vidarebefordra parametertyperna för en anropsbar till en annan anropsbar -- "
"ett mönster som är vanligt förekommande i högre ordningens funktioner och "
"dekoratorer.  Exempel på användning finns i :class:`typing.ParamSpec`. "
"Tidigare fanns det inget enkelt sätt att typannotera beroendet av "
"parametertyper på ett så exakt sätt."

msgid ""
"The second option is the new ``Concatenate`` operator. It's used in "
"conjunction with parameter specification variables to type annotate a higher "
"order callable which adds or removes parameters of another callable.  "
"Examples of usage can be found in :class:`typing.Concatenate`."
msgstr ""
"Det andra alternativet är den nya operatorn ``Concatenate``. Den används "
"tillsammans med parameterspecifikationsvariabler för att typannotera en "
"högre ordningens anropsbarhet som lägger till eller tar bort parametrar från "
"en annan anropsbarhet.  Exempel på användning finns i :class:`typing."
"Concatenate`."

msgid ""
"See :class:`typing.Callable`, :class:`typing.ParamSpec`, :class:`typing."
"Concatenate`, :class:`typing.ParamSpecArgs`, :class:`typing."
"ParamSpecKwargs`, and :pep:`612` for more details."
msgstr ""
"Se :class:`typing.Callable`, :class:`typing.ParamSpec`, :class:`typing."
"Concatenate`, :class:`typing.ParamSpecArgs`, :class:`typing.ParamSpecKwargs` "
"och :pep:`612` för mer information."

msgid ""
"(Contributed by Ken Jin in :issue:`41559`, with minor enhancements by Jelle "
"Zijlstra in :issue:`43783`.  PEP written by Mark Mendoza.)"
msgstr ""
"(Bidrag från Ken Jin i :issue:`41559`, med mindre förbättringar av Jelle "
"Zijlstra i :issue:`43783`.  PEP skriven av Mark Mendoza.)"

msgid "PEP 613: TypeAlias"
msgstr "PEP 613: TypAlias"

msgid ""
":pep:`484` introduced the concept of type aliases, only requiring them to be "
"top-level unannotated assignments. This simplicity sometimes made it "
"difficult for type checkers to distinguish between type aliases and ordinary "
"assignments, especially when forward references or invalid types were "
"involved. Compare::"
msgstr ""
":pep:`484` introducerade konceptet med typalias, men krävde bara att de "
"skulle vara oannoterade tilldelningar på högsta nivån. Denna enkelhet gjorde "
"det ibland svårt för typkontrollanter att skilja mellan typaliaser och "
"vanliga tilldelningar, särskilt när framåtriktade referenser eller ogiltiga "
"typer var inblandade. Jämför::"

msgid ""
"StrCache = 'Cache[str]'  # a type alias\n"
"LOG_PREFIX = 'LOG[DEBUG]'  # a module constant"
msgstr ""
"StrCache = 'Cache[str]' # ett typalias\n"
"LOG_PREFIX = 'LOG[DEBUG]' # en modulkonstant"

msgid ""
"Now the :mod:`typing` module has a special value :data:`~typing.TypeAlias` "
"which lets you declare type aliases more explicitly::"
msgstr ""
"Nu har modulen :mod:`typing` ett speciellt värde :data:`~typing.TypeAlias` "
"som gör att du kan deklarera typaliaser mer explicit::"

msgid ""
"StrCache: TypeAlias = 'Cache[str]'  # a type alias\n"
"LOG_PREFIX = 'LOG[DEBUG]'  # a module constant"
msgstr ""
"StrCache: TypeAlias = 'Cache[str]' # ett alias för en typ\n"
"LOG_PREFIX = 'LOG[DEBUG]' # en modulkonstant"

msgid "See :pep:`613` for more details."
msgstr "Se :pep:`613` för mer information."

msgid "(Contributed by Mikhail Golubev in :issue:`41923`.)"
msgstr "(Bidrag från Mikhail Golubev i :issue:`41923`.)"

msgid "PEP 647: User-Defined Type Guards"
msgstr "PEP 647: Användardefinierade typskydd"

msgid ""
":data:`~typing.TypeGuard` has been added to the :mod:`typing` module to "
"annotate type guard functions and improve information provided to static "
"type checkers during type narrowing.  For more information, please see :data:"
"`~typing.TypeGuard`\\ 's documentation, and :pep:`647`."
msgstr ""
":data:`~typing.TypeGuard` har lagts till i modulen :mod:`typing` för att "
"kommentera typskyddsfunktioner och förbättra informationen till statiska "
"typkontroller under typbegränsning.  Mer information finns i dokumentationen "
"för :data:`~typing.TypeGuard` och i :pep:`647`."

msgid ""
"(Contributed by Ken Jin and Guido van Rossum in :issue:`43766`. PEP written "
"by Eric Traut.)"
msgstr ""
"(Bidrag från Ken Jin och Guido van Rossum i :issue:`43766`. PEP skriven av "
"Eric Traut.)"

msgid "Other Language Changes"
msgstr "Andra språkliga förändringar"

msgid ""
"The :class:`int` type has a new method :meth:`int.bit_count`, returning the "
"number of ones in the binary expansion of a given integer, also known as the "
"population count. (Contributed by Niklas Fiekas in :issue:`29882`.)"
msgstr ""
"Typen :class:`int` har fått en ny metod :meth:`int.bit_count`, som "
"returnerar antalet ettor i den binära expansionen av ett givet heltal, även "
"känt som populationsantalet. (Bidrag från Niklas Fiekas i :issue:`29882`.)"

msgid ""
"The views returned by :meth:`dict.keys`, :meth:`dict.values` and :meth:`dict."
"items` now all have a ``mapping`` attribute that gives a :class:`types."
"MappingProxyType` object wrapping the original dictionary. (Contributed by "
"Dennis Sweeney in :issue:`40890`.)"
msgstr ""
"De vyer som returneras av :meth:`dict.keys`, :meth:`dict.values` och :meth:"
"`dict.items` har nu alla ett ``mapping``-attribut som ger ett :class:`types."
"MappingProxyType``-objekt som omsluter den ursprungliga ordlistan. (Bidrag "
"från Dennis Sweeney i :issue:`40890`.)"

msgid ""
":pep:`618`: The :func:`zip` function now has an optional ``strict`` flag, "
"used to require that all the iterables have an equal length."
msgstr ""
":pep:`618`: Funktionen :func:`zip` har nu en valfri flagga ``strict``, som "
"används för att kräva att alla iterabler har samma längd."

msgid ""
"Builtin and extension functions that take integer arguments no longer "
"accept :class:`~decimal.Decimal`\\ s, :class:`~fractions.Fraction`\\ s and "
"other objects that can be converted to integers only with a loss (e.g. that "
"have the :meth:`~object.__int__` method but do not have the :meth:`~object."
"__index__` method). (Contributed by Serhiy Storchaka in :issue:`37999`.)"
msgstr ""
"Inbyggda funktioner och tilläggsfunktioner som tar heltalsargument "
"accepterar inte längre :class:`~decimal.Decimal`` s, :class:`~fractions."
"Fraction`` s och andra objekt som kan konverteras till heltal endast med "
"förlust (t.ex. som har metoden :meth:`~object.__int__` men inte har metoden :"
"meth:`~object.__index__`). (Bidrag från Serhiy Storchaka i :issue:`37999`.)"

msgid ""
"If :func:`object.__ipow__` returns :data:`NotImplemented`, the operator will "
"correctly fall back to :func:`object.__pow__` and :func:`object.__rpow__` as "
"expected. (Contributed by Alex Shkop in :issue:`38302`.)"
msgstr ""
"Om :func:`object.__ipow__` returnerar :data:`NotImplemented`, kommer "
"operatoren att falla tillbaka till :func:`object.__pow__` och :func:`object."
"__rpow__` som förväntat. (Bidrag från Alex Shkop i :issue:`38302`.)"

msgid ""
"Assignment expressions can now be used unparenthesized within set literals "
"and set comprehensions, as well as in sequence indexes (but not slices)."
msgstr ""
"Tilldelningsuttryck kan nu användas utan parentes inom set-literaler och set-"
"komprehensioner, samt i sekvensindex (men inte i slices)."

msgid ""
"Functions have a new ``__builtins__`` attribute which is used to look for "
"builtin symbols when a function is executed, instead of looking into "
"``__globals__['__builtins__']``. The attribute is initialized from "
"``__globals__[\"__builtins__\"]`` if it exists, else from the current "
"builtins. (Contributed by Mark Shannon in :issue:`42990`.)"
msgstr ""
"Funktioner har ett nytt attribut ``__builtins__`` som används för att leta "
"efter inbyggda symboler när en funktion exekveras, istället för att leta i "
"``__globals__['__builtins__']``. Attributet initialiseras från "
"``__globals__[\"__builtins__\"]`` om det finns, annars från de aktuella "
"builtins. (Bidrag från Mark Shannon i :issue:`42990`.)"

msgid ""
"Two new builtin functions -- :func:`aiter` and :func:`anext` have been added "
"to provide asynchronous counterparts to :func:`iter` and :func:`next`, "
"respectively. (Contributed by Joshua Bronson, Daniel Pope, and Justin Wang "
"in :issue:`31861`.)"
msgstr ""
"Två nya inbyggda funktioner -- :func:`aiter` och :func:`anext` har lagts "
"till för att tillhandahålla asynkrona motsvarigheter till :func:`iter` "
"respektive :func:`next`. (Bidrag från Joshua Bronson, Daniel Pope och Justin "
"Wang i :issue:`31861`.)"

msgid ""
"Static methods (:func:`@staticmethod <staticmethod>`) and class methods (:"
"func:`@classmethod <classmethod>`) now inherit the method attributes "
"(``__module__``, ``__name__``, ``__qualname__``, ``__doc__``, "
"``__annotations__``) and have a new ``__wrapped__`` attribute. Moreover, "
"static methods are now callable as regular functions. (Contributed by Victor "
"Stinner in :issue:`43682`.)"
msgstr ""
"Statiska metoder (:func:`@staticmethod <staticmethod>`) och klassmetoder (:"
"func:`@classmethod <classmethod>`) ärver nu metodattributen (``__module__``, "
"``__name__``, ``__qualname__``, ``__doc__``, ``__annotations__``) och har "
"ett nytt attribut ``__wrapped__``. Dessutom är statiska metoder nu "
"anropsbara som vanliga funktioner. (Bidrag från Victor Stinner i :issue:"
"`43682`.)"

msgid ""
"Annotations for complex targets (everything beside ``simple name`` targets "
"defined by :pep:`526`) no longer cause any runtime effects with ``from "
"__future__ import annotations``. (Contributed by Batuhan Taskaya in :issue:"
"`42737`.)"
msgstr ""
"Anteckningar för komplexa mål (allt förutom mål med ``enkla namn`` "
"definierade av :pep:`526``) orsakar inte längre några körtidseffekter med "
"``from __future__ import annotations``. (Bidrag från Batuhan Taskaya i :"
"issue:`42737`.)"

msgid ""
"Class and module objects now lazy-create empty annotations dicts on demand. "
"The annotations dicts are stored in the object’s ``__dict__`` for backwards "
"compatibility.  This improves the best practices for working with "
"``__annotations__``; for more information, please see :ref:`annotations-"
"howto`. (Contributed by Larry Hastings in :issue:`43901`.)"
msgstr ""
"Klass- och modulobjekt skapar nu tomma annotationsdikter på begäran. "
"Dikterna med anteckningar lagras i objektets ``__dict__`` för "
"bakåtkompatibilitet.  Detta förbättrar de bästa metoderna för att arbeta med "
"``__annotations__``; för mer information, se :ref:`annotations-howto`. "
"(Bidrag från Larry Hastings i :issue:`43901`.)"

msgid ""
"Annotations consist of ``yield``, ``yield from``, ``await`` or named "
"expressions are now forbidden under ``from __future__ import annotations`` "
"due to their side effects. (Contributed by Batuhan Taskaya in :issue:"
"`42725`.)"
msgstr ""
"Annoteringar som består av ``yield``, ``yield from``, ``await`` eller "
"namngivna uttryck är nu förbjudna under ``from __future__ import "
"annotations`` på grund av deras bieffekter. (Bidrag från Batuhan Taskaya i :"
"issue:`42725`.)"

msgid ""
"Usage of unbound variables, ``super()`` and other expressions that might "
"alter the processing of symbol table as annotations are now rendered "
"effectless under ``from __future__ import annotations``. (Contributed by "
"Batuhan Taskaya in :issue:`42725`.)"
msgstr ""
"Användning av obundna variabler, ``super()`` och andra uttryck som kan ändra "
"behandlingen av symboltabellen som annoteringar görs nu verkningslösa under "
"``from __future__ import annotations``. (Bidrag från Batuhan Taskaya i :"
"issue:`42725`.)"

msgid ""
"Hashes of NaN values of both :class:`float` type and :class:`decimal."
"Decimal` type now depend on object identity. Formerly, they always hashed to "
"``0`` even though NaN values are not equal to one another. This caused "
"potentially quadratic runtime behavior due to excessive hash collisions when "
"creating dictionaries and sets containing multiple NaNs. (Contributed by "
"Raymond Hettinger in :issue:`43475`.)"
msgstr ""
"Hashar av NaN-värden av både typen :class:`float` och typen :class:`decimal."
"Decimal` beror nu på objektets identitet. Tidigare hashades de alltid till "
"``0`` trots att NaN-värden inte är lika med varandra. Detta orsakade "
"potentiellt kvadratiskt körtidsbeteende på grund av överdrivna "
"hashkollisioner när man skapade ordböcker och uppsättningar som innehöll "
"flera NaN-värden. (Bidrag från Raymond Hettinger i :issue:`43475`.)"

msgid ""
"A :exc:`SyntaxError` (instead of a :exc:`NameError`) will be raised when "
"deleting the :const:`__debug__` constant.  (Contributed by Donghee Na in :"
"issue:`45000`.)"
msgstr ""
"Ett :exc:`SyntaxError` (istället för ett :exc:`NameError`) kommer att visas "
"när konstanten :const:`__debug__` tas bort.  (Bidrag från Donghee Na i :"
"issue:`45000`.)"

msgid ""
":exc:`SyntaxError` exceptions now have ``end_lineno`` and ``end_offset`` "
"attributes.  They will be ``None`` if not determined. (Contributed by Pablo "
"Galindo in :issue:`43914`.)"
msgstr ""
":exc:`SyntaxError`-undantag har nu attributen ``end_lineno`` och "
"``end_offset``.  De kommer att vara ``None`` om de inte bestäms. (Bidrag "
"från Pablo Galindo i :issue:`43914`.)"

msgid "New Modules"
msgstr "Nya moduler"

msgid "None."
msgstr "Ingen."

msgid "Improved Modules"
msgstr "Förbättrade moduler"

msgid "asyncio"
msgstr "asyncio"

msgid ""
"Add missing :meth:`~asyncio.events.AbstractEventLoop."
"connect_accepted_socket` method. (Contributed by Alex Grönholm in :issue:"
"`41332`.)"
msgstr ""
"Lägg till saknad :meth:`~asyncio.events.AbstractEventLoop."
"connect_accepted_socket` metod. (Bidrag från Alex Grönholm i :issue:`41332`.)"

msgid "argparse"
msgstr "argparse"

msgid ""
"Misleading phrase \"optional arguments\" was replaced with \"options\" in "
"argparse help. Some tests might require adaptation if they rely on exact "
"output match. (Contributed by Raymond Hettinger in :issue:`9694`.)"
msgstr ""
"Missvisande fras \"valfria argument\" ersattes med \"alternativ\" i argparse-"
"hjälpen. Vissa tester kan kräva anpassning om de förlitar sig på exakt "
"matchning av utdata. (Bidrag från Raymond Hettinger i :issue:`9694`.)"

msgid "array"
msgstr "array"

msgid ""
"The :meth:`~array.array.index` method of :class:`array.array` now has "
"optional *start* and *stop* parameters. (Contributed by Anders Lorentsen and "
"Zackery Spytz in :issue:`31956`.)"
msgstr ""
"Metoden :meth:`~array.array.index` i :class:`array.array` har nu valfria "
"parametrar *start* och *stop*. (Bidrag från Anders Lorentsen och Zackery "
"Spytz i :issue:`31956`.)"

msgid "asynchat, asyncore, smtpd"
msgstr "asynchat, asyncore, smtpd"

msgid ""
"These modules have been marked as deprecated in their module documentation "
"since Python 3.6.  An import-time :class:`DeprecationWarning` has now been "
"added to all three of these modules."
msgstr ""
"Dessa moduler har markerats som föråldrade i sin moduldokumentation sedan "
"Python 3.6.  En import-tid :class:`DeprecationWarning` har nu lagts till för "
"alla dessa tre moduler."

msgid "base64"
msgstr "bas64"

msgid ""
"Add :func:`base64.b32hexencode` and :func:`base64.b32hexdecode` to support "
"the Base32 Encoding with Extended Hex Alphabet."
msgstr ""
"Lägg till :func:`base64.b32hexencode` och :func:`base64.b32hexdecode` för "
"att stödja Base32-kodning med utökat Hex-alfabet."

msgid "bdb"
msgstr "bdb"

msgid ""
"Add :meth:`~bdb.Breakpoint.clearBreakpoints` to reset all set breakpoints. "
"(Contributed by Irit Katriel in :issue:`24160`.)"
msgstr ""
"Lägg till :meth:`~bdb.Breakpoint.clearBreakpoints` för att återställa alla "
"inställda brytpunkter. (Bidrag från Irit Katriel i :issue:`24160`.)"

msgid "bisect"
msgstr "halvera"

msgid ""
"Added the possibility of providing a *key* function to the APIs in the :mod:"
"`bisect` module. (Contributed by Raymond Hettinger in :issue:`4356`.)"
msgstr ""
"Lagt till möjligheten att tillhandahålla en *nyckel*-funktion till API:erna "
"i modulen :mod:`bisect`. (Bidrag från Raymond Hettinger i :issue:`4356`.)"

msgid "codecs"
msgstr "codecs"

msgid ""
"Add a :func:`codecs.unregister` function to unregister a codec search "
"function. (Contributed by Hai Shi in :issue:`41842`.)"
msgstr ""
"Lägg till en :func:`codecs.unregister`-funktion för att avregistrera en "
"codec-sökfunktion. (Bidrag från Hai Shi i :issue:`41842`.)"

msgid "collections.abc"
msgstr "samlingar.abc"

msgid ""
"The ``__args__`` of the :ref:`parameterized generic <types-genericalias>` "
"for :class:`collections.abc.Callable` are now consistent with :data:`typing."
"Callable`. :class:`collections.abc.Callable` generic now flattens type "
"parameters, similar to what :data:`typing.Callable` currently does.  This "
"means that ``collections.abc.Callable[[int, str], str]`` will have "
"``__args__`` of ``(int, str, str)``; previously this was ``([int, str], "
"str)``.  To allow this change, :class:`types.GenericAlias` can now be "
"subclassed, and a subclass will be returned when subscripting the :class:"
"`collections.abc.Callable` type.  Note that a :exc:`TypeError` may be raised "
"for invalid forms of parameterizing :class:`collections.abc.Callable` which "
"may have passed silently in Python 3.9. (Contributed by Ken Jin in :issue:"
"`42195`.)"
msgstr ""
"``__args__`` av :ref:`parameterized generic <types-genericalias>`` för :"
"class:`collections.abc.Callable`` är nu konsekvent med :data:`typing."
"Callable`. :class:`collections.abc.Callable` generic plattar nu ut typ "
"parametrar, liknande vad :data:`typing.Callable` för närvarande gör.  Detta "
"innebär att ``collections.abc.Callable[[int, str], str]`` kommer att ha "
"``__args__`` av ``(int, str, str)``; tidigare var detta ``([int, str], "
"str)``.  För att möjliggöra denna ändring kan :class:`types.GenericAlias` nu "
"underklassas, och en underklass kommer att returneras vid subskription av "
"typen :class:`collections.abc.Callable`.  Observera att ett :exc:`TypeError` "
"kan uppstå för ogiltiga former av parametrisering av :class:`collections.abc."
"Callable` som kan ha passerat tyst i Python 3.9. (Bidrag från Ken Jin i :"
"issue:`42195`.)"

msgid "contextlib"
msgstr "contextlib"

msgid ""
"Add a :func:`contextlib.aclosing` context manager to safely close async "
"generators and objects representing asynchronously released resources. "
"(Contributed by Joongi Kim and John Belmonte in :issue:`41229`.)"
msgstr ""
"Lägg till en :func:`contextlib.aclosing` kontexthanterare för att säkert "
"stänga asynkrona generatorer och objekt som representerar asynkront "
"frigjorda resurser. (Bidrag från Joongi Kim och John Belmonte i :issue:"
"`41229`.)"

msgid ""
"Add asynchronous context manager support to :func:`contextlib.nullcontext`. "
"(Contributed by Tom Gringauz in :issue:`41543`.)"
msgstr ""
"Lägg till stöd för asynkron kontexthanterare till :func:`contextlib."
"nullcontext`. (Bidrag från Tom Gringauz i :issue:`41543`.)"

msgid ""
"Add :class:`~contextlib.AsyncContextDecorator`, for supporting usage of "
"async context managers as decorators."
msgstr ""
"Lägg till :class:`~contextlib.AsyncContextDecorator`, för att stödja "
"användning av asynkrona kontexthanterare som dekoratorer."

msgid "curses"
msgstr "förbannelser"

msgid ""
"The extended color functions added in ncurses 6.1 will be used transparently "
"by :func:`curses.color_content`, :func:`curses.init_color`, :func:`curses."
"init_pair`, and :func:`curses.pair_content`. A new function, :func:`curses."
"has_extended_color_support`, indicates whether extended color support is "
"provided by the underlying ncurses library. (Contributed by Jeffrey "
"Kintscher and Hans Petter Jansson in :issue:`36982`.)"
msgstr ""
"De utökade färgfunktionerna som lades till i ncurses 6.1 kommer att användas "
"transparent av :func:`curses.color_content`, :func:`curses.init_color`, :"
"func:`curses.init_pair` och :func:`curses.pair_content`. En ny funktion, :"
"func:`curses.has_extended_color_support`, anger om utökat färgstöd "
"tillhandahålls av det underliggande ncurses-biblioteket. (Bidrag från "
"Jeffrey Kintscher och Hans Petter Jansson i :issue:`36982`.)"

msgid ""
"The ``BUTTON5_*`` constants are now exposed in the :mod:`curses` module if "
"they are provided by the underlying curses library. (Contributed by Zackery "
"Spytz in :issue:`39273`.)"
msgstr ""
"Konstanterna ``BUTTON5_*`` exponeras nu i modulen :mod:`curses` om de "
"tillhandahålls av det underliggande curses-biblioteket. (Bidrag från Zackery "
"Spytz i :issue:`39273`.)"

msgid "dataclasses"
msgstr "dataklasser"

msgid "__slots__"
msgstr "__slots__"

msgid ""
"Added ``slots`` parameter in :func:`dataclasses.dataclass` decorator. "
"(Contributed by Yurii Karabas in :issue:`42269`)"
msgstr ""
"Lagt till parametern ``slots`` i :func:`dataclasses.dataclass`-dekoratorn. "
"(Bidrag från Yurii Karabas i :issue:`42269`)"

msgid "Keyword-only fields"
msgstr "Fält med endast sökord"

msgid ""
"dataclasses now supports fields that are keyword-only in the generated "
"__init__ method.  There are a number of ways of specifying keyword-only "
"fields."
msgstr ""
"dataclasses stöder nu fält som är nyckelordsbundna i den genererade __init__-"
"metoden.  Det finns ett antal olika sätt att ange fält som endast innehåller "
"nyckelord."

msgid "You can say that every field is keyword-only:"
msgstr "Du kan säga att varje fält är nyckelordsbaserat:"

msgid ""
"from dataclasses import dataclass\n"
"\n"
"@dataclass(kw_only=True)\n"
"class Birthday:\n"
"    name: str\n"
"    birthday: datetime.date"
msgstr ""
"from dataclasses import dataclass\n"
"\n"
"@dataklass(kw_only=True)\n"
"klass Födelsedag:\n"
"    name: str\n"
"    födelsedag: datetime.date"

msgid ""
"Both ``name`` and ``birthday`` are keyword-only parameters to the generated "
"__init__ method."
msgstr ""
"Både ``name`` och ``birthday`` är keyword-only-parametrar till den "
"genererade __init__-metoden."

msgid "You can specify keyword-only on a per-field basis:"
msgstr "Du kan ange endast nyckelord för varje fält:"

msgid ""
"from dataclasses import dataclass, field\n"
"\n"
"@dataclass\n"
"class Birthday:\n"
"    name: str\n"
"    birthday: datetime.date = field(kw_only=True)"
msgstr ""
"from dataclasses import dataclass, fält\n"
"\n"
"@dataklass\n"
"klass Födelsedag:\n"
"    name: str\n"
"    birthday: datetime.date = field(kw_only=True)"

msgid ""
"Here only ``birthday`` is keyword-only.  If you set ``kw_only`` on "
"individual fields, be aware that there are rules about re-ordering fields "
"due to keyword-only fields needing to follow non-keyword-only fields.  See "
"the full dataclasses documentation for details."
msgstr ""
"Här är det bara ``födelsedag`` som är nyckelordsbundet.  Om du anger "
"``kw_only`` för enskilda fält bör du vara medveten om att det finns regler "
"för omordning av fält på grund av att fält med enbart nyckelord måste följa "
"fält utan nyckelord.  Se den fullständiga dokumentationen för dataclasses "
"för mer information."

msgid ""
"You can also specify that all fields following a KW_ONLY marker are keyword-"
"only.  This will probably be the most common usage:"
msgstr ""
"Du kan också ange att alla fält som följer en KW_ONLY-markör endast "
"innehåller nyckelord.  Detta är förmodligen den vanligaste användningen:"

msgid ""
"from dataclasses import dataclass, KW_ONLY\n"
"\n"
"@dataclass\n"
"class Point:\n"
"    x: float\n"
"    y: float\n"
"    _: KW_ONLY\n"
"    z: float = 0.0\n"
"    t: float = 0.0"
msgstr ""
"from dataclasses import dataclass, KW_ONLY\n"
"\n"
"@dataklass\n"
"klass Punkt:\n"
"    x: float\n"
"    y: float\n"
"    _: KW_ONLY\n"
"    z: float = 0,0\n"
"    t: float = 0.0"

msgid ""
"Here, ``z`` and ``t`` are keyword-only parameters, while ``x`` and ``y`` are "
"not. (Contributed by Eric V. Smith in :issue:`43532`.)"
msgstr ""
"Här är ``z`` och ``t`` parametrar som endast innehåller nyckelord, medan "
"``x`` och ``y`` inte är det. (Bidrag från Eric V. Smith i :issue:`43532`.)"

msgid "distutils"
msgstr "distutils"

msgid ""
"The entire ``distutils`` package is deprecated, to be removed in Python "
"3.12. Its functionality for specifying package builds has already been "
"completely replaced by third-party packages ``setuptools`` and "
"``packaging``, and most other commonly used APIs are available elsewhere in "
"the standard library (such as :mod:`platform`, :mod:`shutil`, :mod:"
"`subprocess` or :mod:`sysconfig`). There are no plans to migrate any other "
"functionality from ``distutils``, and applications that are using other "
"functions should plan to make private copies of the code. Refer to :pep:"
"`632` for discussion."
msgstr ""
"Hela paketet ``distutils`` är föråldrat och kommer att tas bort i Python "
"3.12. Dess funktionalitet för att specificera paketbyggnader har redan helt "
"ersatts av tredjepartspaketen ``setuptools`` och ``packaging``, och de "
"flesta andra vanligt förekommande API:er finns tillgängliga på andra ställen "
"i standardbiblioteket (t.ex. :mod:`platform`, :mod:`shutil`, :mod:"
"`subprocess` eller :mod:`sysconfig`). Det finns inga planer på att migrera "
"någon annan funktionalitet från ``distutils``, och program som använder "
"andra funktioner bör planera för att göra privata kopior av koden. Se :pep:"
"`632` för diskussion."

msgid ""
"The ``bdist_wininst`` command deprecated in Python 3.8 has been removed. The "
"``bdist_wheel`` command is now recommended to distribute binary packages on "
"Windows. (Contributed by Victor Stinner in :issue:`42802`.)"
msgstr ""
"Kommandot ``bdist_wininst`` som är föråldrat i Python 3.8 har tagits bort. "
"Kommandot ``bdist_wheel`` rekommenderas nu för att distribuera binära paket "
"på Windows. (Bidrag från Victor Stinner i :issue:`42802`.)"

msgid "doctest"
msgstr "doktest"

msgid ""
"When a module does not define ``__loader__``, fall back to ``__spec__."
"loader``. (Contributed by Brett Cannon in :issue:`42133`.)"
msgstr ""
"När en modul inte definierar ``__loader__``, fall tillbaka till ``__spec__."
"loader``. (Bidrag från Brett Cannon i :issue:`42133`.)"

msgid "encodings"
msgstr "kodningar"

msgid ""
":func:`encodings.normalize_encoding` now ignores non-ASCII characters. "
"(Contributed by Hai Shi in :issue:`39337`.)"
msgstr ""
":func:`encodings.normalize_encoding` ignorerar nu icke-ASCII-tecken. (Bidrag "
"från Hai Shi i :issue:`39337`.)"

msgid "enum"
msgstr "enum"

msgid ""
":class:`~enum.Enum` :func:`~object.__repr__` now returns ``enum_name."
"member_name`` and :func:`~object.__str__` now returns ``member_name``.  "
"Stdlib enums available as module constants have a :func:`repr` of "
"``module_name.member_name``. (Contributed by Ethan Furman in :issue:`40066`.)"
msgstr ""
":class:`~enum.Enum` :func:`~object.__repr__` returnerar nu ``enum_name."
"member_name`` och :func:`~object.__str__` returnerar nu ``member_name``.  "
"Stdlib-enumer som är tillgängliga som modulkonstanter har en :func:`repr` på "
"``module_name.member_name``. (Bidrag från Ethan Furman i :issue:`40066`.)"

msgid ""
"Add :class:`enum.StrEnum` for enums where all members are strings. "
"(Contributed by Ethan Furman in :issue:`41816`.)"
msgstr ""
"Lägg till :class:`enum.StrEnum` för enumer där alla medlemmar är strängar. "
"(Bidrag från Ethan Furman i :issue:`41816`.)"

msgid "fileinput"
msgstr "filinmatning"

msgid ""
"Add *encoding* and *errors* parameters in :func:`fileinput.input` and :class:"
"`fileinput.FileInput`. (Contributed by Inada Naoki in :issue:`43712`.)"
msgstr ""
"Lägg till parametrarna *encoding* och *errors* i :func:`fileinput.input` "
"och :class:`fileinput.FileInput`. (Bidrag från Inada Naoki i :issue:`43712`.)"

msgid ""
":func:`fileinput.hook_compressed` now returns :class:`~io.TextIOWrapper` "
"object when *mode* is \"r\" and file is compressed, like uncompressed files. "
"(Contributed by Inada Naoki in :issue:`5758`.)"
msgstr ""
":func:`fileinput.hook_compressed` returnerar nu :class:`~io.TextIOWrapper`-"
"objekt när *mode* är \"r\" och filen är komprimerad, precis som "
"okomprimerade filer. (Bidrag från Inada Naoki i :issue:`5758`.)"

msgid "faulthandler"
msgstr "felhanterare"

msgid ""
"The :mod:`faulthandler` module now detects if a fatal error occurs during a "
"garbage collector collection. (Contributed by Victor Stinner in :issue:"
"`44466`.)"
msgstr ""
"Modulen :mod:`faulthandler` upptäcker nu om ett allvarligt fel inträffar "
"under en garbage collector-insamling. (Bidrag från Victor Stinner i :issue:"
"`44466`.)"

msgid "gc"
msgstr "gc"

msgid ""
"Add audit hooks for :func:`gc.get_objects`, :func:`gc.get_referrers` and :"
"func:`gc.get_referents`. (Contributed by Pablo Galindo in :issue:`43439`.)"
msgstr ""
"Lägg till revisionskrokar för :func:`gc.get_objects`, :func:`gc."
"get_referrers` och :func:`gc.get_referents`. (Bidrag från Pablo Galindo i :"
"issue:`43439`.)"

msgid "glob"
msgstr "klot"

msgid ""
"Add the *root_dir* and *dir_fd* parameters in :func:`~glob.glob` and :func:"
"`~glob.iglob` which allow to specify the root directory for searching. "
"(Contributed by Serhiy Storchaka in :issue:`38144`.)"
msgstr ""
"Lägg till parametrarna *root_dir* och *dir_fd* i :func:`~glob.glob` och :"
"func:`~glob.iglob` som gör det möjligt att ange rotkatalogen för sökning. "
"(Bidrag från Serhiy Storchaka i :issue:`38144`.)"

msgid "hashlib"
msgstr "hashlib"

msgid ""
"The hashlib module requires OpenSSL 1.1.1 or newer. (Contributed by "
"Christian Heimes in :pep:`644` and :issue:`43669`.)"
msgstr ""
"Modulen hashlib kräver OpenSSL 1.1.1 eller nyare. (Bidrag från Christian "
"Heimes i :pep:`644` och :issue:`43669`.)"

msgid ""
"The hashlib module has preliminary support for OpenSSL 3.0.0. (Contributed "
"by Christian Heimes in :issue:`38820` and other issues.)"
msgstr ""
"Modulen hashlib har preliminärt stöd för OpenSSL 3.0.0. (Bidrag från "
"Christian Heimes i :issue:`38820` och andra frågor)"

msgid ""
"The pure-Python fallback of :func:`~hashlib.pbkdf2_hmac` is deprecated. In "
"the future PBKDF2-HMAC will only be available when Python has been built "
"with OpenSSL support. (Contributed by Christian Heimes in :issue:`43880`.)"
msgstr ""
"Den rena Python-fallbacken :func:`~hashlib.pbkdf2_hmac` är föråldrad. I "
"framtiden kommer PBKDF2-HMAC endast att vara tillgängligt när Python har "
"byggts med OpenSSL-stöd. (Bidrag från Christian Heimes i :issue:`43880`.)"

msgid "hmac"
msgstr "hmac"

msgid ""
"The hmac module now uses OpenSSL's HMAC implementation internally. "
"(Contributed by Christian Heimes in :issue:`40645`.)"
msgstr ""
"Modulen hmac använder nu OpenSSL:s HMAC-implementering internt. (Bidrag från "
"Christian Heimes i :issue:`40645`.)"

msgid "IDLE and idlelib"
msgstr "IDLE och idlelib"

msgid ""
"Make IDLE invoke :func:`sys.excepthook` (when started without '-n'). User "
"hooks were previously ignored.  (Contributed by Ken Hilton in :issue:"
"`43008`.)"
msgstr ""
"Få IDLE att anropa :func:`sys.excepthook` (när den startas utan '-n'). "
"Användarkrokar ignorerades tidigare.  (Bidrag från Ken Hilton i :issue:"
"`43008`.)"

msgid ""
"Rearrange the settings dialog.  Split the General tab into Windows and Shell/"
"Ed tabs.  Move help sources, which extend the Help menu, to the Extensions "
"tab.  Make space for new options and shorten the dialog. The latter makes "
"the dialog better fit small screens.  (Contributed by Terry Jan Reedy in :"
"issue:`40468`.)  Move the indent space setting from the Font tab to the new "
"Windows tab.  (Contributed by Mark Roseman and Terry Jan Reedy in :issue:"
"`33962`.)"
msgstr ""
"Omorganisera dialogrutan för inställningar.  Dela upp fliken Allmänt i "
"flikarna Windows och Shell/Ed.  Flytta hjälpkällor, som utökar Hjälp-menyn, "
"till fliken Tillägg.  Gör plats för nya alternativ och förkorta dialogrutan. "
"Det senare gör att dialogrutan passar bättre på små skärmar.  (Bidrag från "
"Terry Jan Reedy i :issue:`40468`.) Flytta inställningen för "
"indragningsutrymme från fliken Font till den nya fliken Windows.  (Bidrag "
"från Mark Roseman och Terry Jan Reedy i :issue:`33962`.)"

msgid "The changes above were backported to a 3.9 maintenance release."
msgstr ""
"Ändringarna ovan har bakåtportionerats till en underhållsversion av 3.9."

msgid ""
"Add a Shell sidebar.  Move the primary prompt ('>>>') to the sidebar. Add "
"secondary prompts ('...') to the sidebar.  Left click and optional drag "
"selects one or more lines of text, as with the editor line number sidebar.  "
"Right click after selecting text lines displays a context menu with 'copy "
"with prompts'.  This zips together prompts from the sidebar with lines from "
"the selected text.  This option also appears on the context menu for the "
"text.  (Contributed by Tal Einat in :issue:`37903`.)"
msgstr ""
"Lägg till ett Shell-sidofält.  Flytta den primära prompten ('>>>') till "
"sidofältet. Lägg till sekundära uppmaningar ('...') i sidofältet.  "
"Vänsterklick och valfri dragning markerar en eller flera textrader, precis "
"som i sidofältet för radnummer i editorn.  Om du högerklickar efter att ha "
"valt textrader visas en snabbmeny med \"Kopiera med prompter\".  Då "
"sammanfogas anvisningarna från sidofältet med raderna i den markerade "
"texten.  Det här alternativet visas också på snabbmenyn för texten.  (Bidrag "
"från Tal Einat i :issue:`37903`.)"

msgid ""
"Use spaces instead of tabs to indent interactive code.  This makes "
"interactive code entries 'look right'.  Making this feasible was a major "
"motivation for adding the shell sidebar.  (Contributed by Terry Jan Reedy "
"in :issue:`37892`.)"
msgstr ""
"Använd mellanslag i stället för tabbar för att dra in interaktiv kod.  Detta "
"gör att interaktiva kodposter \"ser rätt ut\".  Att göra detta genomförbart "
"var en viktig motivation för att lägga till sidofältet för skal.  (Bidrag "
"från Terry Jan Reedy i :issue:`37892`.)"

msgid ""
"Highlight the new :ref:`soft keywords <soft-keywords>` :keyword:`match`, :"
"keyword:`case <match>`, and :keyword:`_ <wildcard-patterns>` in pattern-"
"matching statements. However, this highlighting is not perfect and will be "
"incorrect in some rare cases, including some ``_``-s in ``case`` patterns.  "
"(Contributed by Tal Einat in :issue:`44010`.)"
msgstr ""
"Markera de nya :ref:`mjuka nyckelorden <soft-keywords>` :keyword:`match`, :"
"keyword:`case <match>` och :keyword:`_ <wildcard-patterns>` i "
"mönstermatchningssatser. Denna markering är dock inte perfekt och kommer att "
"vara felaktig i vissa sällsynta fall, inklusive vissa ``_``-s i ``case``-"
"mönster.  (Bidrag från Tal Einat i :issue:`44010`.)"

msgid "New in 3.10 maintenance releases."
msgstr "Nytt i underhållsversioner av 3.10."

msgid ""
"Apply syntax highlighting to ``.pyi`` files. (Contributed by Alex Waygood "
"and Terry Jan Reedy in :issue:`45447`.)"
msgstr ""
"Tillämpa syntaxmarkering på ``.pyi``-filer. (Bidrag från Alex Waygood och "
"Terry Jan Reedy i :issue:`45447`.)"

msgid ""
"Include prompts when saving Shell with inputs and outputs. (Contributed by "
"Terry Jan Reedy in :gh:`95191`.)"
msgstr ""
"Inkludera uppmaningar när du sparar Shell med in- och utgångar. (Bidrag från "
"Terry Jan Reedy i :gh:`95191`.)"

msgid "importlib.metadata"
msgstr "importlib.metadata"

msgid ""
"Feature parity with ``importlib_metadata`` 4.6 (`history <https://importlib-"
"metadata.readthedocs.io/en/latest/history.html>`_)."
msgstr ""
"Funktionsparitet med ``importlib_metadata`` 4.6 (`historik <https://"
"importlib-metadata.readthedocs.io/en/latest/history.html>`_)."

msgid ""
":ref:`importlib.metadata entry points <entry-points>` now provide a nicer "
"experience for selecting entry points by group and name through a new :ref:"
"`importlib.metadata.EntryPoints <entry-points>` class. See the Compatibility "
"Note in the docs for more info on the deprecation and usage."
msgstr ""
":ref:`importlib.metadata entry points <entry-points>` ger nu en trevligare "
"upplevelse för att välja entry points efter grupp och namn genom en ny :ref:"
"`importlib.metadata.EntryPoints <entry-points>`-klass. Se Compatibility Note "
"i dokumentationen för mer information om borttagandet och användningen."

msgid ""
"Added :ref:`importlib.metadata.packages_distributions() <package-"
"distributions>` for resolving top-level Python modules and packages to "
"their :ref:`importlib.metadata.Distribution <distributions>`."
msgstr ""
"Lagt till :ref:`importlib.metadata.packages_distributions() <package-"
"distributions>` för att lösa Python-moduler och -paket på toppnivå till "
"deras :ref:`importlib.metadata.Distribution <distributions>`."

msgid "inspect"
msgstr "inspektera"

msgid ""
"Add :func:`inspect.get_annotations`, which safely computes the annotations "
"defined on an object. It works around the quirks of accessing the "
"annotations on various types of objects, and makes very few assumptions "
"about the object it examines. :func:`inspect.get_annotations` can also "
"correctly un-stringize stringized annotations.  :func:`inspect."
"get_annotations` is now considered best practice for accessing the "
"annotations dict defined on any Python object; for more information on best "
"practices for working with annotations, please see :ref:`annotations-howto`. "
"Relatedly, :func:`inspect.signature`, :func:`inspect.Signature."
"from_callable`, and :func:`!inspect.Signature.from_function` now call :func:"
"`inspect.get_annotations` to retrieve annotations. This means :func:`inspect."
"signature` and :func:`inspect.Signature.from_callable` can also now un-"
"stringize stringized annotations. (Contributed by Larry Hastings in :issue:"
"`43817`.)"
msgstr ""
"Lägg till :func:`inspect.get_annotations`, som på ett säkert sätt beräknar "
"de annoteringar som definierats för ett objekt. Den arbetar runt egenheterna "
"med att komma åt annoteringarna på olika typer av objekt, och gör mycket få "
"antaganden om objektet den undersöker. :func:`inspect.get_annotations` kan "
"också korrekt avstränga strängade annoteringar. :func:`inspect."
"get_annotations` anses nu vara bästa praxis för att komma åt "
"annoteringsdikten som definieras på alla Python-objekt; för mer information "
"om bästa praxis för att arbeta med annoteringar, se :ref:`annotations-"
"howto`. Relaterat, :func:`inspect.signature`, :func:`inspect.Signature."
"from_callable`, och :func:`!inspect.Signature.from_function` anropar nu :"
"func:`inspect.get_annotations` för att hämta annoteringar. Detta innebär "
"att :func:`inspect.signature` och :func:`inspect.Signature.from_callable` nu "
"även kan avstränga strängade annoteringar. (Bidrag från Larry Hastings i :"
"issue:`43817`.)"

msgid "itertools"
msgstr "itertools"

msgid ""
"Add :func:`itertools.pairwise`. (Contributed by Raymond Hettinger in :issue:"
"`38200`.)"
msgstr ""
"Lägg till :func:`itertools.pairwise`. (Bidrag från Raymond Hettinger i :"
"issue:`38200`.)"

msgid "linecache"
msgstr "linecache"

msgid "os"
msgstr "os"

msgid ""
"Add :func:`os.cpu_count` support for VxWorks RTOS. (Contributed by Peixing "
"Xin in :issue:`41440`.)"
msgstr ""
"Lägg till :func:`os.cpu_count` stöd för VxWorks RTOS. (Bidrag från Peixing "
"Xin i :issue:`41440`.)"

msgid ""
"Add a new function :func:`os.eventfd` and related helpers to wrap the "
"``eventfd2`` syscall on Linux. (Contributed by Christian Heimes in :issue:"
"`41001`.)"
msgstr ""
"Lägg till en ny funktion :func:`os.eventfd` och relaterade hjälpfunktioner "
"för att paketera syscallen ``eventfd2`` på Linux. (Bidrag från Christian "
"Heimes i :issue:`41001`.)"

msgid ""
"Add :func:`os.splice` that allows to move data between two file descriptors "
"without copying between kernel address space and user address space, where "
"one of the file descriptors must refer to a pipe. (Contributed by Pablo "
"Galindo in :issue:`41625`.)"
msgstr ""
"Lägg till :func:`os.splice` som gör det möjligt att flytta data mellan två "
"filbeskrivare utan att kopiera mellan kärnans adressrymd och användarens "
"adressrymd, där en av filbeskrivarna måste referera till en pipe. (Bidrag "
"från Pablo Galindo i :issue:`41625`.)"

msgid ""
"Add :const:`~os.O_EVTONLY`, :const:`~os.O_FSYNC`, :const:`~os.O_SYMLINK` "
"and :const:`~os.O_NOFOLLOW_ANY` for macOS. (Contributed by Donghee Na in :"
"issue:`43106`.)"
msgstr ""
"Lägg till :const:`~os.O_EVTONLY`, :const:`~os.O_FSYNC`, :const:`~os."
"O_SYMLINK` och :const:`~os.O_NOFOLLOW_ANY` för macOS. (Bidrag från Donghee "
"Na i :issue:`43106`.)"

msgid "os.path"
msgstr "os.sökväg"

msgid ""
":func:`os.path.realpath` now accepts a *strict* keyword-only argument. When "
"set to ``True``, :exc:`OSError` is raised if a path doesn't exist or a "
"symlink loop is encountered. (Contributed by Barney Gale in :issue:`43757`.)"
msgstr ""
":func:`os.path.realpath` accepterar nu ett *strikt* argument som endast "
"innehåller nyckelord. När den är inställd på ``True``, :exc:`OSError`` tas "
"upp om en sökväg inte existerar eller om en symlänk-loop påträffas. (Bidrag "
"från Barney Gale i :issue:`43757`.)"

msgid "pathlib"
msgstr "sökväg"

msgid ""
"Add slice support to :attr:`PurePath.parents <pathlib.PurePath.parents>`. "
"(Contributed by Joshua Cannon in :issue:`35498`.)"
msgstr ""
"Lägg till stöd för slice i :attr:`PurePath.parents <pathlib.PurePath."
"parents>`. (Bidrag från Joshua Cannon i :issue:`35498`.)"

msgid ""
"Add negative indexing support to :attr:`PurePath.parents <pathlib.PurePath."
"parents>`. (Contributed by Yaroslav Pankovych in :issue:`21041`.)"
msgstr ""
"Lägg till stöd för negativ indexering till :attr:`PurePath.parents <pathlib."
"PurePath.parents>`. (Bidrag från Yaroslav Pankovych i :issue:`21041`.)"

msgid ""
"Add :meth:`Path.hardlink_to <pathlib.Path.hardlink_to>` method that "
"supersedes :meth:`!link_to`. The new method has the same argument order as :"
"meth:`~pathlib.Path.symlink_to`. (Contributed by Barney Gale in :issue:"
"`39950`.)"
msgstr ""
"Lägg till :meth:`Path.hardlink_to <pathlib.Path.hardlink_to>` metod som "
"ersätter :meth:`!link_to`. Den nya metoden har samma argumentordning som :"
"meth:`~pathlib.Path.symlink_to`. (Bidrag från Barney Gale i :issue:`39950`.)"

msgid ""
":meth:`pathlib.Path.stat` and :meth:`~pathlib.Path.chmod` now accept a "
"*follow_symlinks* keyword-only argument for consistency with corresponding "
"functions in the :mod:`os` module. (Contributed by Barney Gale in :issue:"
"`39906`.)"
msgstr ""
":meth:`pathlib.Path.stat` och :meth:`~pathlib.Path.chmod` accepterar nu ett "
"*follow_symlinks* nyckelordsargument för överensstämmelse med motsvarande "
"funktioner i modulen :mod:`os`. (Bidrag från Barney Gale i :issue:`39906`.)"

msgid "platform"
msgstr "plattform"

msgid ""
"Add :func:`platform.freedesktop_os_release` to retrieve operation system "
"identification from `freedesktop.org os-release <https://www.freedesktop.org/"
"software/systemd/man/os-release.html>`_ standard file. (Contributed by "
"Christian Heimes in :issue:`28468`.)"
msgstr ""
"Lägg till :func:`platform.freedesktop_os_release` för att hämta "
"identifiering av operativsystem från standardfilen `freedesktop.org os-"
"release <https://www.freedesktop.org/software/systemd/man/os-release."
"html>`_. (Bidrag från Christian Heimes i :issue:`28468`.)"

msgid "pprint"
msgstr "tryck"

msgid ""
":func:`pprint.pprint` now accepts a new ``underscore_numbers`` keyword "
"argument. (Contributed by sblondon in :issue:`42914`.)"
msgstr ""
":func:`pprint.pprint` accepterar nu ett nytt ``underscore_numbers`` "
"nyckelordsargument. (Bidrag från sblondon i :issue:`42914`.)"

msgid ""
":mod:`pprint` can now pretty-print :class:`dataclasses.dataclass` instances. "
"(Contributed by Lewis Gaul in :issue:`43080`.)"
msgstr ""
":mod:`pprint` kan nu pretty-printa :class:`dataclasses.dataclass`-instanser. "
"(Bidrag från Lewis Gaul i :issue:`43080`.)"

msgid "py_compile"
msgstr "py_kompilera"

msgid ""
"Add ``--quiet`` option to command-line interface of :mod:`py_compile`. "
"(Contributed by Gregory Schevchenko in :issue:`38731`.)"
msgstr ""
"Lägg till alternativet ``--quiet`` i kommandoradsgränssnittet för :mod:"
"`py_compile`. (Bidrag från Gregory Schevchenko i :issue:`38731`.)"

msgid "pyclbr"
msgstr "pyclbr"

msgid ""
"Add an ``end_lineno`` attribute to the ``Function`` and ``Class`` objects in "
"the tree returned by :func:`pyclbr.readmodule` and :func:`pyclbr."
"readmodule_ex`.  It matches the existing (start) ``lineno``. (Contributed by "
"Aviral Srivastava in :issue:`38307`.)"
msgstr ""
"Lägg till ett ``end_lineno`` attribut till ``Function`` och ``Class`` "
"objekten i trädet som returneras av :func:`pyclbr.readmodule` och :func:"
"`pyclbr.readmodule_ex`.  Den matchar den befintliga (start) ``lineno``. "
"(Bidrag från Aviral Srivastava i :issue:`38307`.)"

msgid "shelve"
msgstr "hylla"

msgid ""
"The :mod:`shelve` module now uses :const:`pickle.DEFAULT_PROTOCOL` by "
"default instead of :mod:`pickle` protocol ``3`` when creating shelves. "
"(Contributed by Zackery Spytz in :issue:`34204`.)"
msgstr ""
"Modulen :mod:`shelve` använder nu :const:`pickle.DEFAULT_PROTOCOL` som "
"standard istället för :mod:`pickle` protocol ``3`` när hyllor skapas. "
"(Bidrag från Zackery Spytz i :issue:`34204`.)"

msgid "statistics"
msgstr "statistik"

msgid ""
"Add :func:`~statistics.covariance`, Pearson's :func:`~statistics."
"correlation`, and simple :func:`~statistics.linear_regression` functions. "
"(Contributed by Tymoteusz Wołodźko in :issue:`38490`.)"
msgstr ""
"Lägg till :func:`~statistics.covariance`, Pearsons :func:`~statistics."
"correlation` och enkla :func:`~statistics.linear_regression` funktioner. "
"(Bidrag från Tymoteusz Wołodźko i :issue:`38490`.)"

msgid "site"
msgstr "plats"

msgid "socket"
msgstr "kortplats"

msgid ""
"The exception :exc:`socket.timeout` is now an alias of :exc:`TimeoutError`. "
"(Contributed by Christian Heimes in :issue:`42413`.)"
msgstr ""
"Undantaget :exc:`socket.timeout` är nu ett alias för :exc:`TimeoutError`. "
"(Bidrag från Christian Heimes i :issue:`42413`.)"

msgid ""
"Add option to create MPTCP sockets with ``IPPROTO_MPTCP`` (Contributed by "
"Rui Cunha in :issue:`43571`.)"
msgstr ""
"Lägg till alternativ för att skapa MPTCP-sockets med ``IPPROTO_MPTCP`` "
"(Bidrag från Rui Cunha i :issue:`43571`.)"

msgid ""
"Add ``IP_RECVTOS`` option to receive the type of service (ToS) or DSCP/ECN "
"fields (Contributed by Georg Sauthoff in :issue:`44077`.)"
msgstr ""
"Lägg till alternativet ``IP_RECVTOS`` för att ta emot fälten Type of Service "
"(ToS) eller DSCP/ECN (Bidrag från Georg Sauthoff i :issue:`44077`.)"

msgid "ssl"
msgstr "ssl"

msgid ""
"The ssl module requires OpenSSL 1.1.1 or newer. (Contributed by Christian "
"Heimes in :pep:`644` and :issue:`43669`.)"
msgstr ""
"Modulen ssl kräver OpenSSL 1.1.1 eller nyare. (Bidrag från Christian Heimes "
"i :pep:`644` och :issue:`43669`.)"

msgid ""
"The ssl module has preliminary support for OpenSSL 3.0.0 and new option :"
"const:`~ssl.OP_IGNORE_UNEXPECTED_EOF`. (Contributed by Christian Heimes in :"
"issue:`38820`, :issue:`43794`, :issue:`43788`, :issue:`43791`, :issue:"
"`43799`, :issue:`43920`, :issue:`43789`, and :issue:`43811`.)"
msgstr ""
"Modulen ssl har preliminärt stöd för OpenSSL 3.0.0 och det nya alternativet :"
"const:`~ssl.OP_IGNORE_UNEXPECTED_EOF`. (Bidrag från Christian Heimes i :"
"issue:`38820`, :issue:`43794`, :issue:`43788`, :issue:`43791`, :issue:"
"`43799`, :issue:`43920`, :issue:`43789` och :issue:`43811`.)"

msgid ""
"Deprecated function and use of deprecated constants now result in a :exc:"
"`DeprecationWarning`. :attr:`ssl.SSLContext.options` has :data:`~ssl."
"OP_NO_SSLv2` and :data:`~ssl.OP_NO_SSLv3` set by default and therefore "
"cannot warn about setting the flag again. The :ref:`deprecation section "
"<whatsnew310-deprecated>` has a list of deprecated features. (Contributed by "
"Christian Heimes in :issue:`43880`.)"
msgstr ""
"Föråldrad funktion och användning av föråldrade konstanter resulterar nu i "
"en :exc:`DeprecationWarning`. :attr:`ssl.SSLContext.options` har :data:`~ssl."
"OP_NO_SSLv2` och :data:`~ssl.OP_NO_SSLv3` inställda som standard och kan "
"därför inte varna för att ställa in flaggan igen. I :ref:``deprecation "
"section <whatsnew310-deprecated>` finns en lista över föråldrade funktioner. "
"(Bidrag från Christian Heimes i :issue:`43880`.)"

msgid ""
"The ssl module now has more secure default settings. Ciphers without forward "
"secrecy or SHA-1 MAC are disabled by default. Security level 2 prohibits "
"weak RSA, DH, and ECC keys with less than 112 bits of security. :class:`~ssl."
"SSLContext` defaults to minimum protocol version TLS 1.2. Settings are based "
"on Hynek Schlawack's research. (Contributed by Christian Heimes in :issue:"
"`43998`.)"
msgstr ""
"Ssl-modulen har nu säkrare standardinställningar. Ciphers utan forward "
"secrecy eller SHA-1 MAC är inaktiverade som standard. Säkerhetsnivå 2 "
"förbjuder svaga RSA-, DH- och ECC-nycklar med mindre än 112 bitars "
"säkerhet. :class:`~ssl.SSLContext` har som standard den lägsta "
"protokollversionen TLS 1.2. Inställningarna är baserade på Hynek Schlawacks "
"forskning. (Bidrag från Christian Heimes i :issue:`43998`.)"

msgid ""
"The deprecated protocols SSL 3.0, TLS 1.0, and TLS 1.1 are no longer "
"officially supported. Python does not block them actively. However OpenSSL "
"build options, distro configurations, vendor patches, and cipher suites may "
"prevent a successful handshake."
msgstr ""
"De föråldrade protokollen SSL 3.0, TLS 1.0 och TLS 1.1 stöds inte längre "
"officiellt. Python blockerar dem inte aktivt. Men OpenSSL-byggalternativ, "
"distrokonfigurationer, leverantörspatchar och chiffersviter kan förhindra en "
"framgångsrik handskakning."

msgid ""
"Add a *timeout* parameter to the :func:`ssl.get_server_certificate` "
"function. (Contributed by Zackery Spytz in :issue:`31870`.)"
msgstr ""
"Lägg till en *timeout*-parameter till funktionen :func:`ssl."
"get_server_certificate`. (Bidrag från Zackery Spytz i :issue:`31870`.)"

msgid ""
"The ssl module uses heap-types and multi-phase initialization. (Contributed "
"by Christian Heimes in :issue:`42333`.)"
msgstr ""
"Modulen ssl använder heap-types och initialisering i flera faser. (Bidrag "
"från Christian Heimes i :issue:`42333`.)"

msgid ""
"A new verify flag :const:`~ssl.VERIFY_X509_PARTIAL_CHAIN` has been added. "
"(Contributed by l0x in :issue:`40849`.)"
msgstr ""
"En ny verifieringsflagga :const:`~ssl.VERIFY_X509_PARTIAL_CHAIN` har lagts "
"till. (Bidrag från l0x i :issue:`40849`.)"

msgid "sqlite3"
msgstr "sqlite3"

msgid ""
"Add audit events for :func:`~sqlite3.connect/handle`, :meth:`~sqlite3."
"Connection.enable_load_extension`, and :meth:`~sqlite3.Connection."
"load_extension`. (Contributed by Erlend E. Aasland in :issue:`43762`.)"
msgstr ""
"Lägg till granskningshändelser för :func:`~sqlite3.connect/handle`, :meth:"
"`~sqlite3.Connection.enable_load_extension`, och :meth:`~sqlite3.Connection."
"load_extension`. (Bidrag från Erlend E. Aasland i :issue:`43762`.)"

msgid "sys"
msgstr "system"

msgid ""
"Add :data:`sys.orig_argv` attribute: the list of the original command line "
"arguments passed to the Python executable. (Contributed by Victor Stinner "
"in :issue:`23427`.)"
msgstr ""
"Lägg till :data:`sys.orig_argv`-attribut: listan över de ursprungliga "
"kommandoradsargumenten som skickas till Python-körprogrammet. (Bidrag från "
"Victor Stinner i :issue:`23427`.)"

msgid ""
"Add :data:`sys.stdlib_module_names`, containing the list of the standard "
"library module names. (Contributed by Victor Stinner in :issue:`42955`.)"
msgstr ""
"Lägg till :data:`sys.stdlib_module_names`, som innehåller en lista över "
"standardbibliotekets modulnamn. (Bidrag från Victor Stinner i :issue:"
"`42955`.)"

msgid "_thread"
msgstr "_tråd"

msgid ""
":func:`_thread.interrupt_main` now takes an optional signal number to "
"simulate (the default is still :const:`signal.SIGINT`). (Contributed by "
"Antoine Pitrou in :issue:`43356`.)"
msgstr ""
":func:`_thread.interrupt_main` tar nu ett valfritt signalnummer att simulera "
"(standard är fortfarande :const:`signal.SIGINT`). (Bidrag från Antoine "
"Pitrou i :issue:`43356`.)"

msgid "threading"
msgstr "gängning"

msgid ""
"Add :func:`threading.gettrace` and :func:`threading.getprofile` to retrieve "
"the functions set by :func:`threading.settrace` and :func:`threading."
"setprofile` respectively. (Contributed by Mario Corchero in :issue:`42251`.)"
msgstr ""
"Lägg till :func:`threading.gettrace` och :func:`threading.getprofile` för "
"att hämta de funktioner som ställts in av :func:`threading.settrace` "
"respektive :func:`threading.setprofile`. (Bidrag från Mario Corchero i :"
"issue:`42251`.)"

msgid ""
"Add :data:`threading.__excepthook__` to allow retrieving the original value "
"of :func:`threading.excepthook` in case it is set to a broken or a different "
"value. (Contributed by Mario Corchero in :issue:`42308`.)"
msgstr ""
"Lägg till :data:`threading.__excepthook__` för att tillåta hämtning av "
"originalvärdet för :func:`threading.excepthook` om det är inställt på ett "
"trasigt eller ett annat värde. (Bidrag från Mario Corchero i :issue:`42308`.)"

msgid "traceback"
msgstr "spårning"

msgid ""
"The :func:`~traceback.format_exception`, :func:`~traceback."
"format_exception_only`, and :func:`~traceback.print_exception` functions can "
"now take an exception object as a positional-only argument. (Contributed by "
"Zackery Spytz and Matthias Bussonnier in :issue:`26389`.)"
msgstr ""
"Funktionerna :func:`~traceback.format_exception`, :func:`~traceback."
"format_exception_only` och :func:`~traceback.print_exception` kan nu ta ett "
"undantagsobjekt som ett endast positionellt argument. (Bidrag från Zackery "
"Spytz och Matthias Bussonnier i :issue:`26389`.)"

msgid "types"
msgstr "typer"

msgid ""
"Reintroduce the :data:`types.EllipsisType`, :data:`types.NoneType` and :data:"
"`types.NotImplementedType` classes, providing a new set of types readily "
"interpretable by type checkers. (Contributed by Bas van Beek in :issue:"
"`41810`.)"
msgstr ""
"Återinför klasserna :data:`types.EllipsisType`, :data:`types.NoneType` och :"
"data:`types.NotImplementedType`, vilket ger en ny uppsättning typer som lätt "
"kan tolkas av typkontrollanter. (Bidrag från Bas van Beek i :issue:`41810`.)"

msgid "typing"
msgstr "maskinskrivning"

msgid "For major changes, see :ref:`new-feat-related-type-hints`."
msgstr "För större ändringar, se :ref:`nya-feat-relaterade-typ-tips`."

msgid ""
"The behavior of :class:`typing.Literal` was changed to conform with :pep:"
"`586` and to match the behavior of static type checkers specified in the PEP."
msgstr ""
"Beteendet för :class:`typing.Literal` ändrades för att överensstämma med :"
"pep:`586` och för att matcha beteendet hos statiska typkontrollanter som "
"anges i PEP."

msgid "``Literal`` now de-duplicates parameters."
msgstr "``Literal`` avduplicerar nu parametrar."

msgid ""
"Equality comparisons between ``Literal`` objects are now order independent."
msgstr "Jämlikhetsjämförelser mellan ``Literal``-objekt är nu orderoberoende."

msgid ""
"``Literal`` comparisons now respect types.  For example, ``Literal[0] == "
"Literal[False]`` previously evaluated to ``True``.  It is now ``False``.  To "
"support this change, the internally used type cache now supports "
"differentiating types."
msgstr ""
"jämförelser av ``Literal`` respekterar nu typer.  Till exempel, ``Literal[0] "
"== Literal[False]`` utvärderades tidigare till ``True``.  Nu är det "
"``False``.  För att stödja denna förändring stöder den internt använda "
"typcachen nu differentierande typer."

msgid ""
"``Literal`` objects will now raise a :exc:`TypeError` exception during "
"equality comparisons if any of their parameters are not :term:`hashable`. "
"Note that declaring ``Literal`` with unhashable parameters will not throw an "
"error::"
msgstr ""
"``Literal`` objekt kommer nu att ge upphov till ett :exc:`TypeError` "
"undantag under jämlikhetsjämförelser om någon av deras parametrar inte är :"
"term:`hashable`. Notera att deklaration av ``Literal`` med parametrar som "
"inte kan hashas inte kommer att ge upphov till ett fel::"

msgid ""
">>> from typing import Literal\n"
">>> Literal[{0}]\n"
">>> Literal[{0}] == Literal[{False}]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: unhashable type: 'set'"
msgstr ""
"&gt;&gt;&gt; från typing import Literal\n"
"&gt;&gt;&gt; Literal[{0}]\n"
"&gt;&gt;&gt; Litteral[{0}] == Litteral[{False}]\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i <module>\n"
"TypeError: ohashbar typ: 'set'"

msgid "(Contributed by Yurii Karabas in :issue:`42345`.)"
msgstr "(Bidrag från Yurii Karabas i :issue:`42345`.)"

msgid ""
"Add new function :func:`typing.is_typeddict` to introspect if an annotation "
"is a :class:`typing.TypedDict`. (Contributed by Patrick Reader in :issue:"
"`41792`.)"
msgstr ""
"Lägg till ny funktion :func:`typing.is_typeddict` för att introspektera om "
"en annotering är en :class:`typing.TypedDict`. (Bidrag från Patrick Reader "
"i :issue:`41792`.)"

msgid ""
"Subclasses of ``typing.Protocol`` which only have data variables declared "
"will now raise a ``TypeError`` when checked with ``isinstance`` unless they "
"are decorated with :func:`~typing.runtime_checkable`.  Previously, these "
"checks passed silently.  Users should decorate their subclasses with the :"
"func:`!runtime_checkable` decorator if they want runtime protocols. "
"(Contributed by Yurii Karabas in :issue:`38908`.)"
msgstr ""
"Subklasser av ``typing.Protocol`` som endast har datavariabler deklarerade "
"kommer nu att ge upphov till ett ``TypeError`` när de kontrolleras med "
"``isinstance`` om de inte är dekorerade med :func:`~typing."
"runtime_checkable`.  Tidigare passerade dessa kontroller tyst.  Användare "
"bör dekorera sina subklasser med :func:`!runtime_checkable` dekoratorn om de "
"vill ha runtime protokoll. (Bidrag från Yurii Karabas i :issue:`38908`.)"

msgid ""
"Importing from the ``typing.io`` and ``typing.re`` submodules will now emit :"
"exc:`DeprecationWarning`.  These submodules have been deprecated since "
"Python 3.8 and will be removed in a future version of Python.  Anything "
"belonging to those submodules should be imported directly from :mod:`typing` "
"instead. (Contributed by Sebastian Rittau in :issue:`38291`.)"
msgstr ""
"Import från submodulerna ``typing.io`` och ``typing.re`` kommer nu att ge :"
"exc:`DeprecationWarning`.  Dessa undermoduler har varit föråldrade sedan "
"Python 3.8 och kommer att tas bort i en framtida version av Python.  Allt "
"som hör till dessa undermoduler bör importeras direkt från :mod:`typing` "
"istället. (Bidrag från Sebastian Rittau i :issue:`38291`.)"

msgid "unittest"
msgstr "unittest"

msgid ""
"Add new method :meth:`~unittest.TestCase.assertNoLogs` to complement the "
"existing :meth:`~unittest.TestCase.assertLogs`. (Contributed by Kit Yan Choi "
"in :issue:`39385`.)"
msgstr ""
"Lägg till en ny metod :meth:`~unittest.TestCase.assertNoLogs` som komplement "
"till den befintliga :meth:`~unittest.TestCase.assertLogs`. (Bidrag från Kit "
"Yan Choi i :issue:`39385`.)"

msgid "urllib.parse"
msgstr "urllib.parse"

msgid ""
"Python versions earlier than Python 3.10 allowed using both ``;`` and ``&`` "
"as query parameter separators in :func:`urllib.parse.parse_qs` and :func:"
"`urllib.parse.parse_qsl`.  Due to security concerns, and to conform with "
"newer W3C recommendations, this has been changed to allow only a single "
"separator key, with ``&`` as the default.  This change also affects :func:`!"
"cgi.parse` and :func:`!cgi.parse_multipart` as they use the affected "
"functions internally.  For more details, please see their respective "
"documentation. (Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin "
"in :issue:`42967`.)"
msgstr ""
"Python-versioner tidigare än Python 3.10 tillät användning av både ``;`` och "
"``&`` som separatorer för frågeparametrar i :func:`urllib.parse.parse_qs` "
"och :func:`urllib.parse.parse_qsl`.  På grund av säkerhetsproblem och för "
"att överensstämma med nyare W3C-rekommendationer har detta ändrats så att "
"endast en enda separatornyckel tillåts, med ``&`` som standard.  Denna "
"ändring påverkar även :func:`!cgi.parse` och :func:`!cgi.parse_multipart` "
"eftersom de använder de berörda funktionerna internt.  För mer information, "
"vänligen se deras respektive dokumentation. (Bidrag från Adam Goldschmidt, "
"Senthil Kumaran och Ken Jin i :issue:`42967`.)"

msgid ""
"The presence of newline or tab characters in parts of a URL allows for some "
"forms of attacks. Following the WHATWG specification that updates :rfc:"
"`3986`, ASCII newline ``\\n``, ``\\r`` and tab ``\\t`` characters are "
"stripped from the URL by the parser in :mod:`urllib.parse` preventing such "
"attacks. The removal characters are controlled by a new module level "
"variable ``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE``. (See :gh:`88048`)"
msgstr ""
"Förekomsten av newline- eller tabb-tecken i delar av en URL möjliggör vissa "
"former av attacker. I enlighet med WHATWG-specifikationen som uppdaterar :"
"rfc:`3986`, tas ASCII newline ``n``, ``\\r`` och tabb ``t``-tecken bort från "
"URL:en av parsern i :mod:`urllib.parse` för att förhindra sådana attacker. "
"De borttagna tecknen styrs av en ny variabel på modulnivå, ``urllib.parse."
"_UNSAFE_URL_BYTES_TO_REMOVE``. (Se :gh:`88048`)"

msgid "xml"
msgstr "xml"

msgid ""
"Add a :class:`~xml.sax.handler.LexicalHandler` class to the :mod:`xml.sax."
"handler` module. (Contributed by Jonathan Gossage and Zackery Spytz in :"
"issue:`35018`.)"
msgstr ""
"Lägg till en :class:`~xml.sax.handler.LexicalHandler`-klass till :mod:`xml."
"sax.handler`-modulen. (Bidrag från Jonathan Gossage och Zackery Spytz i :"
"issue:`35018`.)"

msgid "zipimport"
msgstr "zipimport"

msgid ""
"Add methods related to :pep:`451`: :meth:`~zipimport.zipimporter."
"find_spec`, :meth:`zipimport.zipimporter.create_module`, and :meth:"
"`zipimport.zipimporter.exec_module`. (Contributed by Brett Cannon in :issue:"
"`42131`.)"
msgstr ""
"Lägg till metoder relaterade till :pep:`451`: :meth:`~zipimport.zipimporter."
"find_spec`, :meth:`zipimport.zipimporter.create_module` och :meth:`zipimport."
"zipimporter.exec_module`. (Bidrag från Brett Cannon i :issue:`42131`.)"

msgid ""
"Add :meth:`~zipimport.zipimporter.invalidate_caches` method. (Contributed by "
"Desmond Cheong in :issue:`14678`.)"
msgstr ""
"Lägg till metoden :meth:`~zipimport.zipimporter.invalidate_caches`. (Bidrag "
"från Desmond Cheong i :issue:`14678`.)"

msgid "Optimizations"
msgstr "Optimeringar"

msgid ""
"Constructors :func:`str`, :func:`bytes` and :func:`bytearray` are now faster "
"(around 30--40% for small objects). (Contributed by Serhiy Storchaka in :"
"issue:`41334`.)"
msgstr ""
"Konstruktörerna :func:`str`, :func:`bytes` och :func:`bytearray` är nu "
"snabbare (runt 30--40% feller små objekt). (Bidrag från Serhiy Storchaka i :"
"issue:`41334`.)"

msgid ""
"The :mod:`runpy` module now imports fewer modules. The ``python3 -m module-"
"name`` command startup time is 1.4x faster in average. On Linux, ``python3 -"
"I -m module-name`` imports 69 modules on Python 3.9, whereas it only imports "
"51 modules (-18) on Python 3.10. (Contributed by Victor Stinner in :issue:"
"`41006` and :issue:`41718`.)"
msgstr ""
"Modulen :mod:`runpy` importerar nu färre moduler. Starttiden för kommandot "
"``python3 -m modul-namn`` är i genomsnitt 1,4x snabbare. På Linux importerar "
"``python3 -I -m module-name`` 69 moduler i Python 3.9, medan det bara "
"importerar 51 moduler (-18) i Python 3.10. (Bidrag från Victor Stinner i :"
"issue:`41006` och :issue:`41718`.)"

msgid ""
"The ``LOAD_ATTR`` instruction now uses new \"per opcode cache\" mechanism.  "
"It is about 36% faster now for regular attributes and 44% faster for slots. "
"(Contributed by Pablo Galindo and Yury Selivanov in :issue:`42093` and Guido "
"van Rossum in :issue:`42927`, based on ideas implemented originally in PyPy "
"and MicroPython.)"
msgstr ""
"Instruktionen ``LOAD_ATTR`` använder nu den nya \"per opcode cache\"-"
"mekanismen.  Det är ungefär 36% faster nu för vanliga attribut och 44% "
"faster för slots. (Bidrag från Pablo Galindo och Yury Selivanov i :issue:"
"`42093` och Guido van Rossum i :issue:`42927`, baserat på idéer som "
"ursprungligen implementerades i PyPy och MicroPython)"

msgid ""
"When building Python with :option:`--enable-optimizations` now ``-fno-"
"semantic-interposition`` is added to both the compile and link line. This "
"speeds builds of the Python interpreter created with :option:`--enable-"
"shared` with ``gcc`` by up to 30%. See `this article <https://developers."
"redhat.com/blog/2020/06/25/red-hat-enterprise-linux-8-2-brings-faster-"
"python-3-8-run-speeds/>`_ for more details. (Contributed by Victor Stinner "
"and Pablo Galindo in :issue:`38980`.)"
msgstr ""
"När Python byggs med :option:`--enable-optimizations` läggs nu ``-fno-"
"semantic-interposition`` till på både kompilerings- och länkningsraden. "
"Detta påskyndar byggandet av Python-tolken som skapats med :option:`--enable-"
"shared` med ``gcc`` med upp till 30%. Se `den här artikeln <https://"
"developers.redhat.com/blog/2020/06/25/red-hat-enterprise-linux-8-2-brings-"
"faster-python-3-8-run-speeds/>`_ för mer information. (Bidrag från Victor "
"Stinner och Pablo Galindo i :issue:`38980`.)"

msgid ""
"Use a new output buffer management code for :mod:`bz2` / :mod:`lzma` / :mod:"
"`zlib` modules, and add ``.readall()`` function to ``_compression."
"DecompressReader`` class. bz2 decompression is now 1.09x ~ 1.17x faster, "
"lzma decompression 1.20x ~ 1.32x faster, ``GzipFile.read(-1)`` 1.11x ~ 1.18x "
"faster. (Contributed by Ma Lin, reviewed by Gregory P. Smith, in :issue:"
"`41486`)"
msgstr ""
"Använd en ny kod för hantering av utdatabufferten för modulerna :mod:"
"`bz2` / :mod:`lzma` / :mod:`zlib` och lägg till funktionen ``.readall()`` i "
"klassen ``_compression.DecompressReader``. bz2-dekomprimering är nu 1,09x ~ "
"1,17x snabbare, lzma-dekomprimering 1,20x ~ 1,32x snabbare, ``GzipFile."
"read(-1)`` 1,11x ~ 1,18x snabbare. (Bidrag från Ma Lin, granskad av Gregory "
"P. Smith, i :issue:`41486`)"

msgid ""
"When using stringized annotations, annotations dicts for functions are no "
"longer created when the function is created.  Instead, they are stored as a "
"tuple of strings, and the function object lazily converts this into the "
"annotations dict on demand.  This optimization cuts the CPU time needed to "
"define an annotated function by half. (Contributed by Yurii Karabas and "
"Inada Naoki in :issue:`42202`.)"
msgstr ""
"Vid användning av strängformade annoteringar skapas inte längre "
"annotationsdict för funktioner när funktionen skapas.  Istället lagras de "
"som en tupel av strängar, och funktionsobjektet konverterar detta till "
"annotationsdikten på begäran.  Denna optimering halverar den CPU-tid som "
"krävs för att definiera en annoterad funktion. (Bidrag från Yurii Karabas "
"och Inada Naoki i :issue:`42202`.)"

msgid ""
"Substring search functions such as ``str1 in str2`` and ``str2.find(str1)`` "
"now sometimes use Crochemore & Perrin's \"Two-Way\" string searching "
"algorithm to avoid quadratic behavior on long strings.  (Contributed by "
"Dennis Sweeney in :issue:`41972`)"
msgstr ""
"Sökfunktioner för delsträngar som ``str1 i str2`` och ``str2.find(str1)`` "
"använder nu ibland Crochemore & Perrins \"Two-Way\" strängsökningsalgoritm "
"för att undvika kvadratiskt beteende på långa strängar.  (Bidrag från Dennis "
"Sweeney i :issue:`41972`)"

msgid ""
"Add micro-optimizations to ``_PyType_Lookup()`` to improve type attribute "
"cache lookup performance in the common case of cache hits. This makes the "
"interpreter 1.04 times faster on average. (Contributed by Dino Viehland in :"
"issue:`43452`.)"
msgstr ""
"Lägg till mikrooptimeringar till ``_PyType_Lookup()`` för att förbättra "
"prestanda för typattributcacheuppslagning i det vanliga fallet med "
"cacheträffar. Detta gör tolken 1,04 gånger snabbare i genomsnitt. (Bidrag "
"från Dino Viehland i :issue:`43452`.)"

msgid ""
"The following built-in functions now support the faster :pep:`590` "
"vectorcall calling convention: :func:`map`, :func:`filter`, :func:"
"`reversed`, :func:`bool` and :func:`float`. (Contributed by Donghee Na and "
"Jeroen Demeyer in :issue:`43575`, :issue:`43287`, :issue:`41922`, :issue:"
"`41873` and :issue:`41870`.)"
msgstr ""
"Följande inbyggda funktioner stöder nu den snabbare :pep:`590` vectorcall-"
"anropskonventionen: :func:`map`, :func:`filter`, :func:`reversed`, :func:"
"`bool` och :func:`float`. (Bidrag från Donghee Na och Jeroen Demeyer i :"
"issue:`43575`, :issue:`43287`, :issue:`41922`, :issue:`41873` och :issue:"
"`41870`.)"

msgid ""
":class:`~bz2.BZ2File` performance is improved by removing internal "
"``RLock``. This makes :class:`!BZ2File` thread unsafe in the face of "
"multiple simultaneous readers or writers, just like its equivalent classes "
"in :mod:`gzip` and :mod:`lzma` have always been.  (Contributed by Inada "
"Naoki in :issue:`43785`.)"
msgstr ""
":class:`~bz2.BZ2File` prestanda förbättras genom att ta bort interna "
"``RLock``. Detta gör :class:`!BZ2File` trådosäker mot flera samtidiga läsare "
"eller skrivare, precis som dess motsvarande klasser i :mod:`gzip` och :mod:"
"`lzma` alltid har varit.  (Bidrag från Inada Naoki i :issue:`43785`.)"

msgid "Deprecated"
msgstr "Föråldrat"

msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  Starting in this release, a "
"deprecation warning is raised if the numeric literal is immediately followed "
"by one of keywords :keyword:`and`, :keyword:`else`, :keyword:`for`, :keyword:"
"`if`, :keyword:`in`, :keyword:`is` and :keyword:`or`. In future releases it "
"will be changed to syntax warning, and finally to syntax error. (Contributed "
"by Serhiy Storchaka in :issue:`43833`.)"
msgstr ""
"För närvarande accepterar Python numeriska literaler omedelbart följt av "
"nyckelord, till exempel ``0in x``, ``1or x``, ``0if 1else 2``.  Det tillåter "
"förvirrande och tvetydiga uttryck som ``[0x1for x in y]`` (som kan tolkas "
"som ``[0x1 for x in y]`` eller ``[0x1f or x in y]``).  Från och med den här "
"utgåvan kommer en deprecation-varning att utfärdas om den numeriska "
"litteralen omedelbart följs av ett av nyckelorden :keyword:`and`, :keyword:"
"`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :keyword:`is` och :"
"keyword:`or`. I framtida versioner kommer det att ändras till syntaxvarning "
"och slutligen till syntaxfel. (Bidrag från Serhiy Storchaka i :issue:"
"`43833`.)"

msgid ""
"Starting in this release, there will be a concerted effort to begin cleaning "
"up old import semantics that were kept for Python 2.7 compatibility. "
"Specifically, :meth:`!find_loader`/:meth:`!find_module` (superseded by :meth:"
"`~importlib.abc.MetaPathFinder.find_spec`), :meth:`~importlib.abc.Loader."
"load_module` (superseded by :meth:`~importlib.abc.Loader.exec_module`), :"
"meth:`!module_repr` (which the import system takes care of for you), the "
"``__package__`` attribute (superseded by ``__spec__.parent``), the "
"``__loader__`` attribute (superseded by ``__spec__.loader``), and the "
"``__cached__`` attribute (superseded by ``__spec__.cached``) will slowly be "
"removed (as well as other classes and methods in :mod:`importlib`). :exc:"
"`ImportWarning` and/or :exc:`DeprecationWarning` will be raised as "
"appropriate to help identify code which needs updating during this "
"transition."
msgstr ""
"Från och med den här utgåvan kommer det att finnas en samlad ansträngning "
"för att börja städa upp gammal importsemantik som behölls för Python 2.7-"
"kompatibilitet. I synnerhet :meth:`!find_loader`/:meth:`!find_module` "
"(ersatt av :meth:`~importlib.abc.MetaPathFinder.find_spec`), :meth:"
"`~importlib.abc.Loader.load_module` (ersatt av :meth:`~importlib.abc.Loader."
"exec_module`), :meth:`!module_repr` (som importsystemet tar hand om åt dig), "
"attributet ``__package__`` (ersatt av ``__spec__.parent``), attributet "
"``__loader__`` (ersatt av ``__spec__.loader``) och attributet ``__cached__`` "
"(ersatt av ``__spec__.cached``) kommer långsamt att tas bort (liksom andra "
"klasser och metoder i :mod:`importlib`). :exc:`ImportWarning` och/eller :exc:"
"`DeprecationWarning` kommer att visas på lämpligt sätt för att hjälpa till "
"att identifiera kod som behöver uppdateras under denna övergång."

msgid ""
"The entire ``distutils`` namespace is deprecated, to be removed in Python "
"3.12. Refer to the :ref:`module changes <distutils-deprecated>` section for "
"more information."
msgstr ""
"Hela namnrymden ``distutils`` är föråldrad och kommer att tas bort i Python "
"3.12. Se avsnittet :ref:``Moduländringar <distutils-deprecated>` för mer "
"information."

msgid ""
"Non-integer arguments to :func:`random.randrange` are deprecated. The :exc:"
"`ValueError` is deprecated in favor of a :exc:`TypeError`. (Contributed by "
"Serhiy Storchaka and Raymond Hettinger in :issue:`37319`.)"
msgstr ""
"Argument som inte är heltal till :func:`random.randrange` är föråldrade. :"
"exc:`ValueError` är avfört till förmån för :exc:`TypeError`. (Bidrag från "
"Serhiy Storchaka och Raymond Hettinger i :issue:`37319`.)"

msgid ""
"The various ``load_module()`` methods of :mod:`importlib` have been "
"documented as deprecated since Python 3.6, but will now also trigger a :exc:"
"`DeprecationWarning`. Use :meth:`~importlib.abc.Loader.exec_module` instead. "
"(Contributed by Brett Cannon in :issue:`26131`.)"
msgstr ""
"De olika ``load_module()``-metoderna i :mod:`importlib` har dokumenterats "
"som föråldrade sedan Python 3.6, men kommer nu också att utlösa en :exc:"
"`DeprecationWarning`. Använd :meth:`~importlib.abc.Loader.exec_module` "
"istället. (Bidrag från Brett Cannon i :issue:`26131`.)"

msgid ""
":meth:`!zimport.zipimporter.load_module` has been deprecated in preference "
"for :meth:`~zipimport.zipimporter.exec_module`. (Contributed by Brett Cannon "
"in :issue:`26131`.)"
msgstr ""
":meth:`!zimport.zipimporter.load_module` har utgått till förmån för :meth:"
"`~zipimport.zipimporter.exec_module`. (Bidrag från Brett Cannon i :issue:"
"`26131`.)"

msgid ""
"The use of :meth:`~importlib.abc.Loader.load_module` by the import system "
"now triggers an :exc:`ImportWarning` as :meth:`~importlib.abc.Loader."
"exec_module` is preferred. (Contributed by Brett Cannon in :issue:`26131`.)"
msgstr ""
"Importsystemets användning av :meth:`~importlib.abc.Loader.load_module` "
"utlöser nu en :exc:`ImportWarning` eftersom :meth:`~importlib.abc.Loader."
"exec_module` är att föredra. (Bidrag från Brett Cannon i :issue:`26131`.)"

msgid ""
"The use of :meth:`!importlib.abc.MetaPathFinder.find_module` and :meth:`!"
"importlib.abc.PathEntryFinder.find_module` by the import system now trigger "
"an :exc:`ImportWarning` as :meth:`importlib.abc.MetaPathFinder.find_spec` "
"and :meth:`importlib.abc.PathEntryFinder.find_spec` are preferred, "
"respectively. You can use :func:`importlib.util.spec_from_loader` to help in "
"porting. (Contributed by Brett Cannon in :issue:`42134`.)"
msgstr ""
"Importsystemets användning av :meth:`!importlib.abc.MetaPathFinder."
"find_module` och :meth:`!importlib.abc.PathEntryFinder.find_module` utlöser "
"nu en :exc:`ImportWarning` eftersom :meth:`importlib.abc.MetaPathFinder."
"find_spec` respektive :meth:`importlib.abc.PathEntryFinder.find_spec` "
"föredras. Du kan använda :func:`importlib.util.spec_from_loader` för att "
"hjälpa till med portningen. (Bidrag från Brett Cannon i :issue:`42134`.)"

msgid ""
"The use of :meth:`!importlib.abc.PathEntryFinder.find_loader` by the import "
"system now triggers an :exc:`ImportWarning` as :meth:`importlib.abc."
"PathEntryFinder.find_spec` is preferred. You can use :func:`importlib.util."
"spec_from_loader` to help in porting. (Contributed by Brett Cannon in :issue:"
"`43672`.)"
msgstr ""
"Importsystemets användning av :meth:`!importlib.abc.PathEntryFinder."
"find_loader` utlöser nu en :exc:`ImportWarning` eftersom :meth:`importlib."
"abc.PathEntryFinder.find_spec` är att föredra. Du kan använda :func:"
"`importlib.util.spec_from_loader` för att hjälpa till med porteringen. "
"(Bidrag från Brett Cannon i :issue:`43672`.)"

msgid ""
"The various implementations of :meth:`!importlib.abc.MetaPathFinder."
"find_module` ( :meth:`!importlib.machinery.BuiltinImporter.find_module`, :"
"meth:`!importlib.machinery.FrozenImporter.find_module`, :meth:`!importlib."
"machinery.WindowsRegistryFinder.find_module`, :meth:`!importlib.machinery."
"PathFinder.find_module`, :meth:`!importlib.abc.MetaPathFinder."
"find_module` ), :meth:`!importlib.abc.PathEntryFinder.find_module` ( :meth:`!"
"importlib.machinery.FileFinder.find_module` ), and :meth:`!importlib.abc."
"PathEntryFinder.find_loader` ( :meth:`!importlib.machinery.FileFinder."
"find_loader` ) now raise :exc:`DeprecationWarning` and are slated for "
"removal in Python 3.12 (previously they were documented as deprecated in "
"Python 3.4). (Contributed by Brett Cannon in :issue:`42135`.)"
msgstr ""
"De olika implementationerna av :meth:`!importlib.abc.MetaPathFinder."
"find_module` ( :meth:`!importlib.machinery.BuiltinImporter.find_module`, :"
"meth:`!importlib.machinery.FrozenImporter.find_module`, :meth:`!importlib."
"machinery.WindowsRegistryFinder.find_module`.FrozenImporter.find_module`, :"
"meth:`!importlib.machinery.WindowsRegistryFinder.find_module`, :meth:`!"
"importlib.machinery.PathFinder.find_module`, :meth:`!importlib.abc."
"MetaPathFinder.find_module` ), :meth:`!importlib.abc.PathEntryFinder."
"find_module` ( :meth:`!importlib.machinery.FileFinder.find_module` ), och :"
"meth:`!importlib.abc.PathEntryFinder.find_loader` ( :meth:`!importlib."
"machinery.FileFinder.find_loader` ) ger nu upphov till :exc:"
"`DeprecationWarning` och kommer att tas bort i Python 3.12 (tidigare "
"dokumenterades de som föråldrade i Python 3.4). (Bidrag från Brett Cannon i :"
"issue:`42135`.)"

msgid ""
":class:`!importlib.abc.Finder` is deprecated (including its sole method, :"
"meth:`!find_module`). Both :class:`importlib.abc.MetaPathFinder` and :class:"
"`importlib.abc.PathEntryFinder` no longer inherit from the class. Users "
"should inherit from one of these two classes as appropriate instead. "
"(Contributed by Brett Cannon in :issue:`42135`.)"
msgstr ""
":class:`!importlib.abc.Finder` är utfasad (inklusive dess enda metod, :meth:"
"`!find_module`). Både :class:`importlib.abc.MetaPathFinder` och :class:"
"`importlib.abc.PathEntryFinder` ärver inte längre från klassen. Användare "
"bör i stället ärva från en av dessa två klasser på lämpligt sätt. (Bidrag "
"från Brett Cannon i :issue:`42135`.)"

msgid ""
"The deprecations of :mod:`!imp`, :func:`!importlib.find_loader`, :func:`!"
"importlib.util.set_package_wrapper`, :func:`!importlib.util."
"set_loader_wrapper`, :func:`!importlib.util.module_for_loader`, :class:`!"
"pkgutil.ImpImporter`, and :class:`!pkgutil.ImpLoader` have all been updated "
"to list Python 3.12 as the slated version of removal (they began raising :"
"exc:`DeprecationWarning` in previous versions of Python). (Contributed by "
"Brett Cannon in :issue:`43720`.)"
msgstr ""
"Avvecklingen av :mod:`!imp`, :func:`!importlib.find_loader`, :func:`!"
"importlib.util.set_package_wrapper`, :func:`!importlib.util."
"set_loader_wrapper`, :func:`!importlib.util.module_for_loader`, :class:`!"
"pkgutil.ImpImporter`, och :class:`!pkgutil.ImpLoader` har alla uppdaterats "
"för att lista Python 3.12 som den planerade versionen av borttagning (de "
"började höja :exc:`DeprecationWarning` i tidigare versioner av Python). "
"(Bidrag från Brett Cannon i :issue:`43720`.)"

msgid ""
"The import system now uses the ``__spec__`` attribute on modules before "
"falling back on :meth:`!module_repr` for a module's ``__repr__()`` method. "
"Removal of the use of ``module_repr()`` is scheduled for Python 3.12. "
"(Contributed by Brett Cannon in :issue:`42137`.)"
msgstr ""
"Importsystemet använder nu attributet ``__spec__`` på moduler innan det "
"faller tillbaka på :meth:`!module_repr` för en moduls ``__repr__()``-metod. "
"Borttagandet av användningen av ``module_repr()`` är planerat till Python "
"3.12. (Bidrag från Brett Cannon i :issue:`42137`.)"

msgid ""
":meth:`!importlib.abc.Loader.module_repr`, :meth:`!importlib.machinery."
"FrozenLoader.module_repr`, and :meth:`!importlib.machinery.BuiltinLoader."
"module_repr` are deprecated and slated for removal in Python 3.12. "
"(Contributed by Brett Cannon in :issue:`42136`.)"
msgstr ""
":meth:`!importlib.abc.Loader.module_repr`, :meth:`!importlib.machinery."
"FrozenLoader.module_repr`, and :meth:`!importlib.machinery.BuiltinLoader."
"module_repr` are deprecated and slated for removal in Python 3.12. (Bidrag "
"från Brett Cannon i :issue:`42136`.)"

msgid ""
"``sqlite3.OptimizedUnicode`` has been undocumented and obsolete since Python "
"3.3, when it was made an alias to :class:`str`.  It is now deprecated, "
"scheduled for removal in Python 3.12. (Contributed by Erlend E. Aasland in :"
"issue:`42264`.)"
msgstr ""
"``sqlite3.OptimizedUnicode`` har varit odokumenterad och föråldrad sedan "
"Python 3.3, då den gjordes till ett alias till :class:`str`.  Det är nu "
"föråldrat och planeras att tas bort i Python 3.12. (Bidrag från Erlend E. "
"Aasland i :issue:`42264`.)"

msgid ""
"The undocumented built-in function ``sqlite3.enable_shared_cache`` is now "
"deprecated, scheduled for removal in Python 3.12.  Its use is strongly "
"discouraged by the SQLite3 documentation.  See `the SQLite3 docs <https://"
"sqlite.org/c3ref/enable_shared_cache.html>`_ for more details. If a shared "
"cache must be used, open the database in URI mode using the ``cache=shared`` "
"query parameter. (Contributed by Erlend E. Aasland in :issue:`24464`.)"
msgstr ""
"Den odokumenterade inbyggda funktionen ``sqlite3.enable_shared_cache`` är nu "
"föråldrad och planeras att tas bort i Python 3.12.  Dess användning avråds "
"starkt av SQLite3-dokumentationen.  Se ` SQLite3-dokumentationen <https://"
"sqlite.org/c3ref/enable_shared_cache.html>`_ för mer information. Om en "
"delad cache måste användas, öppna databasen i URI-läge med hjälp av "
"frågeparametern ``cache=shared``. (Bidrag från Erlend E. Aasland i :issue:"
"`24464`.)"

msgid "The following ``threading`` methods are now deprecated:"
msgstr "Följande ``threading``-metoder är nu föråldrade:"

msgid "``threading.currentThread`` => :func:`threading.current_thread`"
msgstr "``threading.currentThread`` => :func:`threading.current_thread`"

msgid "``threading.activeCount`` => :func:`threading.active_count`"
msgstr "``threading.activeCount`` => :func:`threading.active_count`"

msgid ""
"``threading.Condition.notifyAll`` => :meth:`threading.Condition.notify_all`"
msgstr ""
"``threading.Condition.notifyAll`` => :meth:`threading.Condition.notify_all`"

msgid "``threading.Event.isSet`` => :meth:`threading.Event.is_set`"
msgstr "``threading.Event.isSet`` => :meth:`threading.Event.is_set`"

msgid "``threading.Thread.setName`` => :attr:`threading.Thread.name`"
msgstr "``threading.Thread.setName`` => :attr:`threading.Thread.name`"

msgid "``threading.thread.getName`` => :attr:`threading.Thread.name`"
msgstr "``threading.thread.getName`` => :attr:`threading.Thread.name`"

msgid "``threading.Thread.isDaemon`` => :attr:`threading.Thread.daemon`"
msgstr "``threading.Thread.isDaemon`` => :attr:`threading.Thread.daemon`"

msgid "``threading.Thread.setDaemon`` => :attr:`threading.Thread.daemon`"
msgstr "``threading.Thread.setDaemon`` => :attr:`threading.Thread.daemon`"

msgid "(Contributed by Jelle Zijlstra in :gh:`87889`.)"
msgstr "(Bidrag från Jelle Zijlstra i :gh:`87889`.)"

msgid ""
":meth:`!pathlib.Path.link_to` is deprecated and slated for removal in Python "
"3.12. Use :meth:`pathlib.Path.hardlink_to` instead. (Contributed by Barney "
"Gale in :issue:`39950`.)"
msgstr ""
":meth:`!pathlib.Path.link_to` är föråldrad och kommer att tas bort i Python "
"3.12. Använd :meth:`pathlib.Path.hardlink_to` istället. (Bidrag från Barney "
"Gale i :issue:`39950`.)"

msgid ""
"``cgi.log()`` is deprecated and slated for removal in Python 3.12. "
"(Contributed by Inada Naoki in :issue:`41139`.)"
msgstr ""
"``cgi.log()`` är föråldrad och ska tas bort i Python 3.12. (Bidrag från "
"Inada Naoki i :issue:`41139`.)"

msgid ""
"The following :mod:`ssl` features have been deprecated since Python 3.6, "
"Python 3.7, or OpenSSL 1.1.0 and will be removed in 3.11:"
msgstr ""
"Följande :mod:`ssl`-funktioner har blivit föråldrade sedan Python 3.6, "
"Python 3.7 eller OpenSSL 1.1.0 och kommer att tas bort i 3.11:"

msgid ""
":data:`!OP_NO_SSLv2`, :data:`!OP_NO_SSLv3`, :data:`!OP_NO_TLSv1`, :data:`!"
"OP_NO_TLSv1_1`, :data:`!OP_NO_TLSv1_2`, and :data:`!OP_NO_TLSv1_3` are "
"replaced by :attr:`~ssl.SSLContext.minimum_version` and :attr:`~ssl."
"SSLContext.maximum_version`."
msgstr ""
":data:`!OP_NO_SSLv2`, :data:`!OP_NO_SSLv3`, :data:`!OP_NO_TLSv1`, :data:`!"
"OP_NO_TLSv1_1`, :data:`!OP_NO_TLSv1_2` och :data:`!OP_NO_TLSv1_3` ersätts "
"av :attr:`~ssl.SSLContext.minimum_version` och :attr:`~ssl.SSLContext."
"maximum_version`."

msgid ""
":data:`!PROTOCOL_SSLv2`, :data:`!PROTOCOL_SSLv3`, :data:`!PROTOCOL_SSLv23`, :"
"data:`!PROTOCOL_TLSv1`, :data:`!PROTOCOL_TLSv1_1`, :data:`!"
"PROTOCOL_TLSv1_2`, and :const:`!PROTOCOL_TLS` are deprecated in favor of :"
"const:`~ssl.PROTOCOL_TLS_CLIENT` and :const:`~ssl.PROTOCOL_TLS_SERVER`"
msgstr ""
":data:`!PROTOCOL_SSLv2`, :data:`!PROTOCOL_SSLv3`, :data:`!PROTOCOL_SSLv23`, :"
"data:`!PROTOCOL_TLSv1`, :data:`!PROTOCOL_TLSv1_1`, :data:`!"
"PROTOCOL_TLSv1_2`, och :const:`!PROTOCOL_TLS` är föråldrade till förmån för :"
"const:`~ssl.PROTOCOL_TLS_CLIENT` och :const:`~ssl.PROTOCOL_TLS_SERVER`"

msgid ":func:`!wrap_socket` is replaced by :meth:`ssl.SSLContext.wrap_socket`"
msgstr ":func:`!wrap_socket` ersätts av :meth:`ssl.SSLContext.wrap_socket`"

msgid ":func:`!match_hostname`"
msgstr ":func:`!match_hostname`"

msgid ":func:`!RAND_pseudo_bytes`, :func:`!RAND_egd`"
msgstr ":func:`!RAND_pseudo_bytes`, :func:`!RAND_egd`"

msgid ""
"NPN features like :meth:`ssl.SSLSocket.selected_npn_protocol` and :meth:`ssl."
"SSLContext.set_npn_protocols` are replaced by ALPN."
msgstr ""
"NPN-funktioner som :meth:`ssl.SSLSocket.selected_npn_protocol` och :meth:"
"`ssl.SSLContext.set_npn_protocols` ersätts av ALPN."

msgid ""
"The threading debug (:envvar:`!PYTHONTHREADDEBUG` environment variable) is "
"deprecated in Python 3.10 and will be removed in Python 3.12. This feature "
"requires a :ref:`debug build of Python <debug-build>`. (Contributed by "
"Victor Stinner in :issue:`44584`.)"
msgstr ""
"Threading debug (:envvar:`!PYTHONTHREADDEBUG` miljövariabel) är föråldrad i "
"Python 3.10 och kommer att tas bort i Python 3.12. Denna funktion kräver :"
"ref:`debug build av Python <debug-build>`. (Bidrag från Victor Stinner i :"
"issue:`44584`.)"

msgid ""
"Importing from the ``typing.io`` and ``typing.re`` submodules will now emit :"
"exc:`DeprecationWarning`.  These submodules will be removed in a future "
"version of Python.  Anything belonging to these submodules should be "
"imported directly from :mod:`typing` instead. (Contributed by Sebastian "
"Rittau in :issue:`38291`.)"
msgstr ""
"Import från undermodulerna ``typing.io`` och ``typing.re`` kommer nu att ge "
"upphov till :exc:`DeprecationWarning`.  Dessa submoduler kommer att tas bort "
"i en framtida version av Python.  Allt som hör till dessa undermoduler bör "
"importeras direkt från :mod:`typing` istället. (Bidrag från Sebastian Rittau "
"i :issue:`38291`.)"

msgid "Removed"
msgstr "Borttagen"

msgid ""
"Removed special methods ``__int__``, ``__float__``, ``__floordiv__``, "
"``__mod__``, ``__divmod__``, ``__rfloordiv__``, ``__rmod__`` and "
"``__rdivmod__`` of the :class:`complex` class.  They always raised a :exc:"
"`TypeError`. (Contributed by Serhiy Storchaka in :issue:`41974`.)"
msgstr ""
"Tog bort specialmetoderna ``__int__``, ``__float__``, ``__floordiv__``, "
"``__mod__``, ``__divmod__``, ``__rfloordiv__``, ``__rmod__`` och "
"``__rdivmod__`` i klassen :class:`complex`.  De gav alltid upphov till ett :"
"exc:`TypeError`. (Bidrag från Serhiy Storchaka i :issue:`41974`.)"

msgid ""
"The ``ParserBase.error()`` method from the private and undocumented "
"``_markupbase`` module has been removed.  :class:`html.parser.HTMLParser` is "
"the only subclass of ``ParserBase`` and its ``error()`` implementation was "
"already removed in Python 3.5. (Contributed by Berker Peksag in :issue:"
"`31844`.)"
msgstr ""
"Metoden ``ParserBase.error()`` från den privata och odokumenterade modulen "
"``_markupbase`` har tagits bort. :class:`html.parser.HTMLParser` är den enda "
"underklassen till ``ParserBase`` och dess ``error()`` implementation togs "
"bort redan i Python 3.5. (Bidrag från Berker Peksag i :issue:`31844`.)"

msgid ""
"Removed the ``unicodedata.ucnhash_CAPI`` attribute which was an internal "
"PyCapsule object. The related private ``_PyUnicode_Name_CAPI`` structure was "
"moved to the internal C API. (Contributed by Victor Stinner in :issue:"
"`42157`.)"
msgstr ""
"Tog bort attributet ``unicodedata.ucnhash_CAPI`` som var ett internt "
"PyCapsule-objekt. Den relaterade privata ``_PyUnicode_Name_CAPI`` strukturen "
"flyttades till det interna C API. (Bidrag från Victor Stinner i :issue:"
"`42157`.)"

msgid ""
"Removed the ``parser`` module, which was deprecated in 3.9 due to the switch "
"to the new PEG parser, as well as all the C source and header files that "
"were only being used by the old parser, including ``node.h``, ``parser.h``, "
"``graminit.h`` and ``grammar.h``."
msgstr ""
"Tog bort modulen ``parser``, som blev föråldrad i 3.9 på grund av bytet till "
"den nya PEG-parsern, samt alla C-käll- och headerfiler som bara användes av "
"den gamla parsern, inklusive ``node.h``, ``parser.h``, ``graminit.h`` och "
"``grammar.h``."

msgid ""
"Removed the Public C API functions ``PyParser_SimpleParseStringFlags``, "
"``PyParser_SimpleParseStringFlagsFilename``, "
"``PyParser_SimpleParseFileFlags`` and ``PyNode_Compile`` that were "
"deprecated in 3.9 due to the switch to the new PEG parser."
msgstr ""
"Tog bort de offentliga C API-funktionerna "
"``PyParser_SimpleParseStringFlags``, "
"``PyParser_SimpleParseStringFlagsFilename``, "
"``PyParser_SimpleParseFileFlags`` och ``PyNode_Compile`` som var föråldrade "
"i 3.9 på grund av bytet till den nya PEG-parsern."

msgid ""
"Removed the ``formatter`` module, which was deprecated in Python 3.4. It is "
"somewhat obsolete, little used, and not tested. It was originally scheduled "
"to be removed in Python 3.6, but such removals were delayed until after "
"Python 2.7 EOL. Existing users should copy whatever classes they use into "
"their code. (Contributed by Donghee Na and Terry J. Reedy in :issue:`42299`.)"
msgstr ""
"Tog bort modulen ``formatter``, som blev föråldrad i Python 3.4. Den är "
"något föråldrad, används lite och är inte testad. Den var ursprungligen "
"planerad att tas bort i Python 3.6, men sådana borttagningar försenades till "
"efter Python 2.7 EOL. Befintliga användare bör kopiera de klasser de "
"använder till sin kod. (Bidrag från Donghee Na och Terry J. Reedy i :issue:"
"`42299`.)"

msgid ""
"Removed the :c:func:`!PyModule_GetWarningsModule` function that was useless "
"now due to the :mod:`!_warnings` module was converted to a builtin module in "
"2.6. (Contributed by Hai Shi in :issue:`42599`.)"
msgstr ""
"Tog bort :c:func:`!PyModule_GetWarningsModule`-funktionen som var värdelös "
"nu på grund av att :mod:`!_warnings`-modulen konverterades till en inbyggd "
"modul i 2.6. (Bidrag från Hai Shi i :issue:`42599`.)"

msgid ""
"Remove deprecated aliases to :ref:`collections-abstract-base-classes` from "
"the :mod:`collections` module. (Contributed by Victor Stinner in :issue:"
"`37324`.)"
msgstr ""
"Ta bort föråldrade alias till :ref:`collections-abstract-base-classes` från "
"modulen :mod:`collections`. (Bidrag från Victor Stinner i :issue:`37324`.)"

msgid ""
"The ``loop`` parameter has been removed from most of :mod:`asyncio`\\ 's :"
"doc:`high-level API <../library/asyncio-api-index>` following deprecation in "
"Python 3.8.  The motivation behind this change is multifold:"
msgstr ""
"Parametern ``loop`` har tagits bort från de flesta av :mod:`asyncios :doc:"
"`högnivå-API <../library/asyncio-api-index>` efter att ha utgått i Python "
"3.8.  Motivationen bakom denna förändring är mångfaldig:"

msgid "This simplifies the high-level API."
msgstr "Detta förenklar API:et på hög nivå."

msgid ""
"The functions in the high-level API have been implicitly getting the current "
"thread's running event loop since Python 3.7.  There isn't a need to pass "
"the event loop to the API in most normal use cases."
msgstr ""
"Funktionerna i API:et på hög nivå har implicit hämtat den aktuella trådens "
"löpande händelseslinga sedan Python 3.7.  Det finns inget behov av att "
"skicka händelseslingan till API i de flesta normala användningsfall."

msgid ""
"Event loop passing is error-prone especially when dealing with loops running "
"in different threads."
msgstr ""
"Event loop passing är felbenäget, särskilt när det handlar om loopar som "
"körs i olika trådar."

msgid ""
"Note that the low-level API will still accept ``loop``. See :ref:`changes-"
"python-api` for examples of how to replace existing code."
msgstr ""
"Observera att API:et på låg nivå fortfarande accepterar ``loop``. Se :ref:"
"`changes-python-api` för exempel på hur man ersätter befintlig kod."

msgid ""
"(Contributed by Yurii Karabas, Andrew Svetlov, Yury Selivanov and Kyle "
"Stanley in :issue:`42392`.)"
msgstr ""
"(Bidrag från Yurii Karabas, Andrew Svetlov, Yury Selivanov och Kyle Stanley "
"i :issue:`42392`.)"

msgid "Porting to Python 3.10"
msgstr "Portning till Python 3.10"

msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"I det här avsnittet listas tidigare beskrivna ändringar och andra buggfixar "
"som kan kräva ändringar i din kod."

msgid "Changes in the Python syntax"
msgstr "Ändringar i Python-syntaxen"

msgid ""
"Deprecation warning is now emitted when compiling previously valid syntax if "
"the numeric literal is immediately followed by a keyword (like in ``0in "
"x``). In future releases it will be changed to syntax warning, and finally "
"to a syntax error.  To get rid of the warning and make the code compatible "
"with future releases just add a space between the numeric literal and the "
"following keyword. (Contributed by Serhiy Storchaka in :issue:`43833`.)"
msgstr ""
"Deprecation-varning avges nu vid kompilering av tidigare giltig syntax om "
"den numeriska litteralen omedelbart följs av ett nyckelord (som i ``0in "
"x``). I framtida versioner kommer den att ändras till en syntaxvarning och "
"slutligen till ett syntaxfel.  För att bli av med varningen och göra koden "
"kompatibel med framtida versioner lägger du bara till ett mellanslag mellan "
"den numeriska litteralen och följande nyckelord. (Bidrag från Serhiy "
"Storchaka i :issue:`43833`.)"

msgid "Changes in the Python API"
msgstr "Ändringar i Python API"

msgid ""
"The *etype* parameters of the :func:`~traceback.format_exception`, :func:"
"`~traceback.format_exception_only`, and :func:`~traceback.print_exception` "
"functions in the :mod:`traceback` module have been renamed to *exc*. "
"(Contributed by Zackery Spytz and Matthias Bussonnier in :issue:`26389`.)"
msgstr ""
"Parametrarna *etype* i funktionerna :func:`~traceback.format_exception`, :"
"func:`~traceback.format_exception_only` och :func:`~traceback."
"print_exception` i modulen :mod:`traceback` har bytt namn till *exc*. "
"(Bidrag från Zackery Spytz och Matthias Bussonnier i :issue:`26389`.)"

msgid ""
":mod:`atexit`: At Python exit, if a callback registered with :func:`atexit."
"register` fails, its exception is now logged. Previously, only some "
"exceptions were logged, and the last exception was always silently ignored. "
"(Contributed by Victor Stinner in :issue:`42639`.)"
msgstr ""
":mod:`atexit`: Vid Python-exit, om en callback registrerad med :func:`atexit."
"register` misslyckas, loggas nu dess undantag. Tidigare loggades bara vissa "
"undantag, och det sista undantaget ignorerades alltid tyst. (Bidrag från "
"Victor Stinner i :issue:`42639`.)"

msgid ""
":class:`collections.abc.Callable` generic now flattens type parameters, "
"similar to what :data:`typing.Callable` currently does.  This means that "
"``collections.abc.Callable[[int, str], str]`` will have ``__args__`` of "
"``(int, str, str)``; previously this was ``([int, str], str)``.  Code which "
"accesses the arguments via :func:`typing.get_args` or ``__args__`` need to "
"account for this change.  Furthermore, :exc:`TypeError` may be raised for "
"invalid forms of parameterizing :class:`collections.abc.Callable` which may "
"have passed silently in Python 3.9. (Contributed by Ken Jin in :issue:"
"`42195`.)"
msgstr ""
":class:`collections.abc.Callable` generic plattar nu till typ-parametrar, "
"liknande vad :data:`typing.Callable` gör för närvarande.  Detta innebär att "
"``collections.abc.Callable[[int, str], str]`` kommer att ha ``__args__`` av "
"``(int, str, str)``; tidigare var detta ``([int, str], str)``.  Kod som "
"kommer åt argumenten via :func:`typing.get_args` eller ``__args__`` måste ta "
"hänsyn till denna ändring.  Dessutom kan :exc:`TypeError` uppstå för "
"ogiltiga former av parametrisering av :class:`collections.abc.Callable` som "
"kan ha passerat tyst i Python 3.9. (Bidrag från Ken Jin i :issue:`42195`.)"

msgid ""
":meth:`socket.htons` and :meth:`socket.ntohs` now raise :exc:`OverflowError` "
"instead of :exc:`DeprecationWarning` if the given parameter will not fit in "
"a 16-bit unsigned integer. (Contributed by Erlend E. Aasland in :issue:"
"`42393`.)"
msgstr ""
":meth:`socket.htons` och :meth:`socket.ntohs` ger nu :exc:`OverflowError` "
"istället för :exc:`DeprecationWarning` om den givna parametern inte ryms i "
"ett 16-bitars osignerat heltal. (Bidrag från Erlend E. Aasland i :issue:"
"`42393`.)"

msgid ""
"The ``loop`` parameter has been removed from most of :mod:`asyncio`\\ 's :"
"doc:`high-level API <../library/asyncio-api-index>` following deprecation in "
"Python 3.8."
msgstr ""
"Parametern ``loop`` har tagits bort från de flesta av :mod:`asyncio`'s :doc:"
"`high-level API <../library/asyncio-api-index>` efter att ha utgått i Python "
"3.8."

msgid "A coroutine that currently looks like this::"
msgstr "En coroutine som för närvarande ser ut så här::"

msgid ""
"async def foo(loop):\n"
"    await asyncio.sleep(1, loop=loop)"
msgstr ""
"async def foo(loop):\n"
"    await asyncio.sleep(1, loop=loop)"

msgid "Should be replaced with this::"
msgstr "Bör ersättas med detta::"

msgid ""
"async def foo():\n"
"    await asyncio.sleep(1)"
msgstr ""
"async def foo():\n"
"    await asyncio.sleep(1)"

msgid ""
"If ``foo()`` was specifically designed *not* to run in the current thread's "
"running event loop (e.g. running in another thread's event loop), consider "
"using :func:`asyncio.run_coroutine_threadsafe` instead."
msgstr ""
"Om ``foo()`` specifikt utformats för att *inte* köras i den aktuella trådens "
"pågående händelseslinga (t.ex. körs i en annan tråds händelseslinga), "
"överväg att använda :func:`asyncio.run_coroutine_threadsafe` istället."

msgid ""
"The :data:`types.FunctionType` constructor now inherits the current builtins "
"if the *globals* dictionary has no ``\"__builtins__\"`` key, rather than "
"using ``{\"None\": None}`` as builtins: same behavior as :func:`eval` and :"
"func:`exec` functions.  Defining a function with ``def function(...): ...`` "
"in Python is not affected, globals cannot be overridden with this syntax: it "
"also inherits the current builtins. (Contributed by Victor Stinner in :issue:"
"`42990`.)"
msgstr ""
"Konstruktorn :data:`types.FunctionType` ärver nu de aktuella inbyggda "
"funktionerna om *globals*-ordlistan inte har någon ``\"__builtins__\"``-"
"nyckel, istället för att använda ``{\"None\": None}`` som inbyggda "
"funktioner: samma beteende som funktionerna :func:`eval` och :func:`exec`.  "
"Definiera en funktion med ``def function(...): ...`` i Python påverkas inte, "
"globaler kan inte åsidosättas med denna syntax: den ärver också de aktuella "
"inbyggda funktionerna. (Bidrag från Victor Stinner i :issue:`42990`.)"

msgid "Changes in the C API"
msgstr "Förändringar i C API"

msgid ""
"The C API functions ``PyParser_SimpleParseStringFlags``, "
"``PyParser_SimpleParseStringFlagsFilename``, "
"``PyParser_SimpleParseFileFlags``, ``PyNode_Compile`` and the type used by "
"these functions, ``struct _node``, were removed due to the switch to the new "
"PEG parser."
msgstr ""
"C API-funktionerna ``PyParser_SimpleParseStringFlags``, "
"``PyParser_SimpleParseStringFlagsFilename``, "
"``PyParser_SimpleParseFileFlags``, ``PyNode_Compile`` och den typ som "
"används av dessa funktioner, ``struct _node``, togs bort på grund av bytet "
"till den nya PEG-parsern."

msgid ""
"Source should be now be compiled directly to a code object using, for "
"example, :c:func:`Py_CompileString`. The resulting code object can then be "
"evaluated using, for example, :c:func:`PyEval_EvalCode`."
msgstr ""
"Källan bör nu kompileras direkt till ett kodobjekt med hjälp av t.ex. :c:"
"func:`Py_CompileString`. Det resulterande kodobjektet kan sedan utvärderas "
"med hjälp av till exempel :c:func:`PyEval_EvalCode`."

msgid "Specifically:"
msgstr "Specifikt:"

msgid ""
"A call to ``PyParser_SimpleParseStringFlags`` followed by ``PyNode_Compile`` "
"can be replaced by calling :c:func:`Py_CompileString`."
msgstr ""
"Ett anrop till ``PyParser_SimpleParseStringFlags`` följt av "
"``PyNode_Compile`` kan ersättas med ett anrop till :c:func:"
"`Py_CompileString`."

msgid ""
"There is no direct replacement for ``PyParser_SimpleParseFileFlags``. To "
"compile code from a ``FILE *`` argument, you will need to read the file in C "
"and pass the resulting buffer to :c:func:`Py_CompileString`."
msgstr ""
"Det finns ingen direkt ersättning för ``PyParser_SimpleParseFileFlags``. För "
"att kompilera kod från ett ``FILE *``-argument måste du läsa filen i C och "
"skicka den resulterande bufferten till :c:func:`Py_CompileString`."

msgid ""
"To compile a file given a ``char *`` filename, explicitly open the file, "
"read it and compile the result. One way to do this is using the :py:mod:`io` "
"module with :c:func:`PyImport_ImportModule`, :c:func:`PyObject_CallMethod`, :"
"c:func:`PyBytes_AsString` and :c:func:`Py_CompileString`, as sketched below. "
"(Declarations and error handling are omitted.) ::"
msgstr ""
"För att kompilera en fil som ges ett ``char *`` filnamn, öppna filen "
"explicit, läs den och kompilera resultatet. Ett sätt att göra detta är att "
"använda modulen :py:mod:`io` med :c:func:`PyImport_ImportModule`, :c:func:"
"`PyObject_CallMethod`, :c:func:`PyBytes_AsString` och :c:func:"
"`Py_CompileString`, enligt skissen nedan. (Deklarationer och felhantering är "
"utelämnade.) ::"

msgid ""
"io_module = Import_ImportModule(\"io\");\n"
"fileobject = PyObject_CallMethod(io_module, \"open\", \"ss\", filename, "
"\"rb\");\n"
"source_bytes_object = PyObject_CallMethod(fileobject, \"read\", \"\");\n"
"result = PyObject_CallMethod(fileobject, \"close\", \"\");\n"
"source_buf = PyBytes_AsString(source_bytes_object);\n"
"code = Py_CompileString(source_buf, filename, Py_file_input);"
msgstr ""
"io_module = Import_ImportModule(\"io\");\n"
"fileobject = PyObject_CallMethod(io_module, \"open\", \"ss\", filnamn, "
"\"rb\");\n"
"source_bytes_object = PyObject_CallMethod(fileobject, \"read\", \"\");\n"
"result = PyObject_CallMethod(fileobject, \"close\", \"\");\n"
"source_buf = PyBytes_AsString(source_bytes_object);\n"
"kod = Py_CompileString(source_buf, filnamn, Py_file_input);"

msgid ""
"For ``FrameObject`` objects, the :attr:`~frame.f_lasti` member now "
"represents a wordcode offset instead of a simple offset into the bytecode "
"string. This means that this number needs to be multiplied by 2 to be used "
"with APIs that expect a byte offset instead (like :c:func:`PyCode_Addr2Line` "
"for example). Notice as well that the :attr:`!f_lasti` member of "
"``FrameObject`` objects is not considered stable: please use :c:func:"
"`PyFrame_GetLineNumber` instead."
msgstr ""
"För ``FrameObject``-objekt representerar medlemmen :attr:`~frame.f_lasti`` "
"nu en ordkod-offset istället för en enkel offset i bytecode-strängen. Detta "
"innebär att detta tal måste multipliceras med 2 för att kunna användas med "
"API:er som förväntar sig en byte-offset istället (som till exempel :c:func:"
"`PyCode_Addr2Line`). Observera också att :attr:`!f_lasti`-medlemmen i "
"``FrameObject``-objekt inte anses vara stabil: använd :c:func:"
"`PyFrame_GetLineNumber` istället."

msgid "CPython bytecode changes"
msgstr "CPython bytecode-ändringar"

msgid ""
"The ``MAKE_FUNCTION`` instruction now accepts either a dict or a tuple of "
"strings as the function's annotations. (Contributed by Yurii Karabas and "
"Inada Naoki in :issue:`42202`.)"
msgstr ""
"Instruktionen ``MAKE_FUNCTION`` accepterar nu antingen en dict eller en "
"tupel av strängar som funktionens annoteringar. (Bidrag från Yurii Karabas "
"och Inada Naoki i :issue:`42202`.)"

msgid "Build Changes"
msgstr "Förändringar i byggning"

msgid ""
":pep:`644`: Python now requires OpenSSL 1.1.1 or newer. OpenSSL 1.0.2 is no "
"longer supported. (Contributed by Christian Heimes in :issue:`43669`.)"
msgstr ""
":pep:`644`: Python kräver nu OpenSSL 1.1.1 eller nyare. OpenSSL 1.0.2 stöds "
"inte längre. (Bidrag från Christian Heimes i :issue:`43669`.)"

msgid ""
"The C99 functions :c:func:`snprintf` and :c:func:`vsnprintf` are now "
"required to build Python. (Contributed by Victor Stinner in :issue:`36020`.)"
msgstr ""
"C99-funktionerna :c:func:`snprintf` och :c:func:`vsnprintf` krävs nu för att "
"bygga Python. (Bidrag från Victor Stinner i :issue:`36020`.)"

msgid ""
":mod:`sqlite3` requires SQLite 3.7.15 or higher. (Contributed by Sergey "
"Fedoseev and Erlend E. Aasland in :issue:`40744` and :issue:`40810`.)"
msgstr ""
":mod:`sqlite3` kräver SQLite 3.7.15 eller senare. (Bidrag från Sergey "
"Fedoseev och Erlend E. Aasland i :issue:`40744` och :issue:`40810`.)"

msgid ""
"The :mod:`atexit` module must now always be built as a built-in module. "
"(Contributed by Victor Stinner in :issue:`42639`.)"
msgstr ""
"Modulen :mod:`atexit` måste nu alltid byggas som en inbyggd modul. (Bidrag "
"från Victor Stinner i :issue:`42639`.)"

msgid ""
"Add :option:`--disable-test-modules` option to the ``configure`` script: "
"don't build nor install test modules. (Contributed by Xavier de Gaye, Thomas "
"Petazzoni and Peixing Xin in :issue:`27640`.)"
msgstr ""
"Lägg till :option:`--disable-test-modules` option till ``configure``-"
"skriptet: bygg eller installera inte testmoduler. (Bidrag från Xavier de "
"Gaye, Thomas Petazzoni och Peixing Xin i :issue:`27640`.)"

msgid ""
"Add :option:`--with-wheel-pkg-dir=PATH option <--with-wheel-pkg-dir>` to the "
"``./configure`` script. If specified, the :mod:`ensurepip` module looks for "
"``setuptools`` and ``pip`` wheel packages in this directory: if both are "
"present, these wheel packages are used instead of ensurepip bundled wheel "
"packages."
msgstr ""
"Lägg till :option:`--with-wheel-pkg-dir=PATH option <--with-wheel-pkg-dir>` "
"till skriptet ``./configure``. Om det anges kommer modulen :mod:`ensurepip` "
"att leta efter hjulpaketen ``setuptools`` och ``pip`` i den här katalogen: "
"om båda finns där kommer dessa hjulpaket att användas istället för de "
"hjulpaket som ingår i ensurepip."

msgid ""
"Some Linux distribution packaging policies recommend against bundling "
"dependencies. For example, Fedora installs wheel packages in the ``/usr/"
"share/python-wheels/`` directory and don't install the ``ensurepip."
"_bundled`` package."
msgstr ""
"Vissa Linux-distributioners paketeringspolicyer rekommenderar att man inte "
"buntar beroenden. Till exempel installerar Fedora wheel-paket i katalogen ``/"
"usr/share/python-wheels/`` och installerar inte paketet ``ensurepip."
"_bundled``."

msgid "(Contributed by Victor Stinner in :issue:`42856`.)"
msgstr "(Bidrag från Victor Stinner i :issue:`42856`.)"

msgid ""
"Add a new :option:`configure --without-static-libpython option <--without-"
"static-libpython>` to not build the ``libpythonMAJOR.MINOR.a`` static "
"library and not install the ``python.o`` object file."
msgstr ""
"Lägg till ett nytt :option:`configure --without-static-libpython option <--"
"without-static-libpython>` för att inte bygga det statiska biblioteket "
"``libpythonMAJOR.MINOR.a`` och inte installera objektfilen ``python.o``."

msgid "(Contributed by Victor Stinner in :issue:`43103`.)"
msgstr "(Bidrag från Victor Stinner i :issue:`43103`.)"

msgid ""
"The ``configure`` script now uses the ``pkg-config`` utility, if available, "
"to detect the location of Tcl/Tk headers and libraries.  As before, those "
"locations can be explicitly specified with the ``--with-tcltk-includes`` and "
"``--with-tcltk-libs`` configuration options. (Contributed by Manolis "
"Stamatogiannakis in :issue:`42603`.)"
msgstr ""
"Skriptet ``configure`` använder nu verktyget ``pkg-config``, om det finns "
"tillgängligt, för att upptäcka platsen för Tcl/Tk-huvuden och -bibliotek.  "
"Som tidigare kan dessa platser uttryckligen anges med "
"konfigurationsalternativen ``--with-tcltk-includes`` och ``--with-tcltk-"
"libs``. (Bidrag från Manolis Stamatogiannakis i :issue:`42603`.)"

msgid ""
"Add :option:`--with-openssl-rpath` option to ``configure`` script. The "
"option simplifies building Python with a custom OpenSSL installation, e.g. "
"``./configure --with-openssl=/path/to/openssl --with-openssl-rpath=auto``. "
"(Contributed by Christian Heimes in :issue:`43466`.)"
msgstr ""
"Lägg till :option:`--with-openssl-rpath`-alternativet till ``configure``-"
"skriptet. Alternativet förenklar byggandet av Python med en anpassad OpenSSL-"
"installation, t.ex. ``./configure --with-openssl=/path/to/openssl --with-"
"openssl-rpath=auto``. (Bidrag från Christian Heimes i :issue:`43466`.)"

msgid "C API Changes"
msgstr "Ändringar i C API"

msgid "PEP 652: Maintaining the Stable ABI"
msgstr "PEP 652: Upprätthålla en stabil ABI"

msgid ""
"The Stable ABI (Application Binary Interface) for extension modules or "
"embedding Python is now explicitly defined. :ref:`stable` describes C API "
"and ABI stability guarantees along with best practices for using the Stable "
"ABI."
msgstr ""
"Det stabila ABI:t (Application Binary Interface) för tilläggsmoduler eller "
"inbäddning av Python är nu uttryckligen definierat. :ref:`stable` beskriver "
"stabilitetsgarantier för C API och ABI samt bästa praxis för användning av "
"det stabila ABI:t."

msgid "(Contributed by Petr Viktorin in :pep:`652` and :issue:`43795`.)"
msgstr "(Bidrag från Petr Viktorin i :pep:`652` och :issue:`43795`.)"

msgid ""
"The result of :c:func:`PyNumber_Index` now always has exact type :class:"
"`int`. Previously, the result could have been an instance of a subclass of "
"``int``. (Contributed by Serhiy Storchaka in :issue:`40792`.)"
msgstr ""
"Resultatet av :c:func:`PyNumber_Index` har nu alltid exakt typ :class:`int`. "
"Tidigare kunde resultatet ha varit en instans av en underklass av ``int``. "
"(Bidrag från Serhiy Storchaka i :issue:`40792`.)"

msgid ""
"Add a new :c:member:`~PyConfig.orig_argv` member to the :c:type:`PyConfig` "
"structure: the list of the original command line arguments passed to the "
"Python executable. (Contributed by Victor Stinner in :issue:`23427`.)"
msgstr ""
"Lägg till en ny :c:member:`~PyConfig.orig_argv`-medlem i :c:type:`PyConfig`-"
"strukturen: listan över de ursprungliga kommandoradsargumenten som skickas "
"till Python-körprogrammet. (Bidrag från Victor Stinner i :issue:`23427`.)"

msgid ""
"The :c:func:`PyDateTime_DATE_GET_TZINFO` and :c:func:"
"`PyDateTime_TIME_GET_TZINFO` macros have been added for accessing the "
"``tzinfo`` attributes of :class:`datetime.datetime` and :class:`datetime."
"time` objects. (Contributed by Zackery Spytz in :issue:`30155`.)"
msgstr ""
"Makrot :c:func:`PyDateTime_DATE_GET_TZINFO` och :c:func:"
"`PyDateTime_TIME_GET_TZINFO` har lagts till för åtkomst till attributen "
"``tzinfo`` för objekten :class:`datetime.datetime` och :class:`datetime."
"time`. (Bidrag från Zackery Spytz i :issue:`30155`.)"

msgid ""
"Add a :c:func:`PyCodec_Unregister` function to unregister a codec search "
"function. (Contributed by Hai Shi in :issue:`41842`.)"
msgstr ""
"Lägg till en :c:func:`PyCodec_Unregister`-funktion för att avregistrera en "
"codec-sökfunktion. (Bidrag från Hai Shi i :issue:`41842`.)"

msgid ""
"The :c:func:`PyIter_Send` function was added to allow sending value into "
"iterator without raising ``StopIteration`` exception. (Contributed by "
"Vladimir Matveev in :issue:`41756`.)"
msgstr ""
"Funktionen :c:func:`PyIter_Send` lades till för att göra det möjligt att "
"skicka värde till iteratorn utan att utlösa ``StopIteration`` undantag. "
"(Bidrag från Vladimir Matveev i :issue:`41756`.)"

msgid ""
"Add :c:func:`PyUnicode_AsUTF8AndSize` to the limited C API. (Contributed by "
"Alex Gaynor in :issue:`41784`.)"
msgstr ""
"Lägg till :c:func:`PyUnicode_AsUTF8AndSize` till det begränsade C API:et. "
"(Bidrag från Alex Gaynor i :issue:`41784`.)"

msgid ""
"Add :c:func:`PyModule_AddObjectRef` function: similar to :c:func:"
"`PyModule_AddObject` but don't steal a reference to the value on success. "
"(Contributed by Victor Stinner in :issue:`1635741`.)"
msgstr ""
"Lägg till :c:func:`PyModule_AddObjectRef` funktion: liknande :c:func:"
"`PyModule_AddObject` men stjäl inte en referens till värdet vid framgång. "
"(Bidrag från Victor Stinner i :issue:`1635741`.)"

msgid ""
"Add :c:func:`Py_NewRef` and :c:func:`Py_XNewRef` functions to increment the "
"reference count of an object and return the object. (Contributed by Victor "
"Stinner in :issue:`42262`.)"
msgstr ""
"Lägg till funktionerna :c:func:`Py_NewRef` och :c:func:`Py_XNewRef` för att "
"öka referensantalet för ett objekt och returnera objektet. (Bidrag från "
"Victor Stinner i :issue:`42262`.)"

msgid ""
"The :c:func:`PyType_FromSpecWithBases` and :c:func:"
"`PyType_FromModuleAndSpec` functions now accept a single class as the "
"*bases* argument. (Contributed by Serhiy Storchaka in :issue:`42423`.)"
msgstr ""
"Funktionerna :c:func:`PyType_FromSpecWithBases` och :c:func:"
"`PyType_FromModuleAndSpec` accepterar nu en enda klass som argument *bases*. "
"(Bidrag från Serhiy Storchaka i :issue:`42423`.)"

msgid ""
"The :c:func:`PyType_FromModuleAndSpec` function now accepts NULL ``tp_doc`` "
"slot. (Contributed by Hai Shi in :issue:`41832`.)"
msgstr ""
"Funktionen :c:func:`PyType_FromModuleAndSpec` accepterar nu NULL ``tp_doc`` "
"slot. (Bidrag från Hai Shi i :issue:`41832`.)"

msgid ""
"The :c:func:`PyType_GetSlot` function can accept :ref:`static types <static-"
"types>`. (Contributed by Hai Shi and Petr Viktorin in :issue:`41073`.)"
msgstr ""
"Funktionen :c:func:`PyType_GetSlot` kan acceptera :ref:`statiska typer "
"<static-types>`. (Bidrag från Hai Shi och Petr Viktorin i :issue:`41073`.)"

msgid ""
"Add a new :c:func:`PySet_CheckExact` function to the C-API to check if an "
"object is an instance of :class:`set` but not an instance of a subtype. "
"(Contributed by Pablo Galindo in :issue:`43277`.)"
msgstr ""
"Lägg till en ny :c:func:`PySet_CheckExact`-funktion i C-API för att "
"kontrollera om ett objekt är en instans av :class:`set` men inte en instans "
"av en subtyp. (Bidrag från Pablo Galindo i :issue:`43277`.)"

msgid ""
"Add :c:func:`PyErr_SetInterruptEx` which allows passing a signal number to "
"simulate. (Contributed by Antoine Pitrou in :issue:`43356`.)"
msgstr ""
"Lägg till :c:func:`PyErr_SetInterruptEx` som gör det möjligt att skicka ett "
"signalnummer att simulera. (Bidrag från Antoine Pitrou i :issue:`43356`.)"

msgid ""
"The limited C API is now supported if :ref:`Python is built in debug mode "
"<debug-build>` (if the ``Py_DEBUG`` macro is defined). In the limited C API, "
"the :c:func:`Py_INCREF` and :c:func:`Py_DECREF` functions are now "
"implemented as opaque function calls, rather than accessing directly the :c:"
"member:`PyObject.ob_refcnt` member, if Python is built in debug mode and the "
"``Py_LIMITED_API`` macro targets Python 3.10 or newer. It became possible to "
"support the limited C API in debug mode because the :c:type:`PyObject` "
"structure is the same in release and debug mode since Python 3.8 (see :issue:"
"`36465`)."
msgstr ""
"Det begränsade C API:et stöds nu om :ref:`Python är byggt i felsökningsläge "
"<debug-build>` (om makrot ``Py_DEBUG`` är definierat). I det begränsade C "
"API:et implementeras nu funktionerna :c:func:`Py_INCREF` och :c:func:"
"`Py_DECREF` som opaka funktionsanrop, istället för att direkt komma åt "
"medlemmen :c:member:`PyObject.ob_refcnt`, om Python är byggt i "
"felsökningsläge och makrot ``Py_LIMITED_API`` riktar sig mot Python 3.10 "
"eller senare. Det blev möjligt att stödja det begränsade C API:et i "
"felsökningsläge eftersom :c:type:`PyObject`-strukturen är densamma i "
"release- och felsökningsläge sedan Python 3.8 (se :issue:`36465`)."

msgid ""
"The limited C API is still not supported in the :option:`--with-trace-refs` "
"special build (``Py_TRACE_REFS`` macro). (Contributed by Victor Stinner in :"
"issue:`43688`.)"
msgstr ""
"Det begränsade C-API:et stöds fortfarande inte i specialbygget :option:`--"
"with-trace-refs` (makrot ``Py_TRACE_REFS``). (Bidrag från Victor Stinner i :"
"issue:`43688`.)"

msgid ""
"Add the :c:func:`Py_Is(x, y) <Py_Is>` function to test if the *x* object is "
"the *y* object, the same as ``x is y`` in Python. Add also the :c:func:"
"`Py_IsNone`, :c:func:`Py_IsTrue`, :c:func:`Py_IsFalse` functions to test if "
"an object is, respectively, the ``None`` singleton, the ``True`` singleton "
"or the ``False`` singleton. (Contributed by Victor Stinner in :issue:"
"`43753`.)"
msgstr ""
"Lägg till funktionen :c:func:`Py_Is(x, y) <Py_Is>` för att testa om objektet "
"*x* är objektet *y*, samma sak som ``x är y`` i Python. Lägg också till "
"funktionerna :c:func:`Py_IsNone`, :c:func:`Py_IsTrue`, :c:func:`Py_IsFalse` "
"för att testa om ett objekt är ``None`` singleton, ``True`` singleton eller "
"``False`` singleton. (Bidrag från Victor Stinner i :issue:`43753`.)"

msgid ""
"Add new functions to control the garbage collector from C code: :c:func:"
"`PyGC_Enable()`, :c:func:`PyGC_Disable()`, :c:func:`PyGC_IsEnabled()`. These "
"functions allow to activate, deactivate and query the state of the garbage "
"collector from C code without having to import the :mod:`gc` module."
msgstr ""
"Lägg till nya funktioner för att styra garbage collector från C-kod: :c:func:"
"`PyGC_Enable()`, :c:func:`PyGC_Disable()`, :c:func:`PyGC_IsEnabled()`. Dessa "
"funktioner gör det möjligt att aktivera, avaktivera och fråga om "
"skräpsamlarens tillstånd från C-kod utan att behöva importera modulen :mod:"
"`gc`."

msgid ""
"Add a new :c:macro:`Py_TPFLAGS_DISALLOW_INSTANTIATION` type flag to disallow "
"creating type instances. (Contributed by Victor Stinner in :issue:`43916`.)"
msgstr ""
"Lägg till en ny :c:macro:`Py_TPFLAGS_DISALLOW_INSTANTIATION` typflagga för "
"att inte tillåta skapande av typinstanser. (Bidrag från Victor Stinner i :"
"issue:`43916`.)"

msgid ""
"Add a new :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` type flag for creating "
"immutable type objects: type attributes cannot be set nor deleted. "
"(Contributed by Victor Stinner and Erlend E. Aasland in :issue:`43908`.)"
msgstr ""
"Lägg till en ny :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` typflagga för att skapa "
"oföränderliga typobjekt: typattribut kan inte ställas in eller tas bort. "
"(Bidrag från Victor Stinner och Erlend E. Aasland i :issue:`43908`.)"

msgid ""
"The ``PY_SSIZE_T_CLEAN`` macro must now be defined to use :c:func:"
"`PyArg_ParseTuple` and :c:func:`Py_BuildValue` formats which use ``#``: "
"``es#``, ``et#``, ``s#``, ``u#``, ``y#``, ``z#``, ``U#`` and ``Z#``. See :"
"ref:`arg-parsing` and :pep:`353`. (Contributed by Victor Stinner in :issue:"
"`40943`.)"
msgstr ""
"Makrot ``PY_SSIZE_T_CLEAN`` måste nu definieras för att använda formaten :c:"
"func:`PyArg_ParseTuple` och :c:func:`Py_BuildValue` som använder ``#``: "
"``es#``, ``et#``, ``s#``, ``u#``, ``y#``, ``z#``, ``U#`` och ``Z#``. Se :ref:"
"`arg-parsing` och :pep:`353`. (Bidrag från Victor Stinner i :issue:`40943`.)"

msgid ""
"Since :c:func:`Py_REFCNT()` is changed to the inline static function, "
"``Py_REFCNT(obj) = new_refcnt`` must be replaced with ``Py_SET_REFCNT(obj, "
"new_refcnt)``: see :c:func:`Py_SET_REFCNT()` (available since Python 3.9). "
"For backward compatibility, this macro can be used::"
msgstr ""
"Eftersom :c:func:`Py_REFCNT()` ändras till en inline statisk funktion, måste "
"``Py_REFCNT(obj) = new_refcnt`` ersättas med ``Py_SET_REFCNT(obj, "
"new_refcnt)``: se :c:func:`Py_SET_REFCNT()` (tillgänglig sedan Python 3.9). "
"För bakåtkompatibilitet kan detta makro användas::"

msgid ""
"#if PY_VERSION_HEX < 0x030900A4\n"
"#  define Py_SET_REFCNT(obj, refcnt) ((Py_REFCNT(obj) = (refcnt)), (void)0)\n"
"#endif"
msgstr ""
"#if PY_VERSION_HEX < 0x030900A4\n"
"# define Py_SET_REFCNT(obj, refcnt) ((Py_REFCNT(obj) = (refcnt)), (void)0)\n"
"#endif"

msgid "(Contributed by Victor Stinner in :issue:`39573`.)"
msgstr "(Bidrag från Victor Stinner i :issue:`39573`.)"

msgid ""
"Calling :c:func:`PyDict_GetItem` without :term:`GIL` held had been allowed "
"for historical reason. It is no longer allowed. (Contributed by Victor "
"Stinner in :issue:`40839`.)"
msgstr ""
"Att anropa :c:func:`PyDict_GetItem` utan :term:`GIL` hade varit tillåtet av "
"historiska skäl. Det är inte längre tillåtet. (Bidrag från Victor Stinner i :"
"issue:`40839`.)"

msgid ""
"``PyUnicode_FromUnicode(NULL, size)`` and "
"``PyUnicode_FromStringAndSize(NULL, size)`` raise ``DeprecationWarning`` "
"now.  Use :c:func:`PyUnicode_New` to allocate Unicode object without initial "
"data. (Contributed by Inada Naoki in :issue:`36346`.)"
msgstr ""
"``PyUnicode_FromUnicode(NULL, size)`` och "
"``PyUnicode_FromStringAndSize(NULL, size)`` ger upphov till "
"``DeprecationWarning`` nu.  Använd :c:func:`PyUnicode_New` för att allokera "
"Unicode-objekt utan initiala data. (Bidrag från Inada Naoki i :issue:"
"`36346`.)"

msgid ""
"The private ``_PyUnicode_Name_CAPI`` structure of the PyCapsule API "
"``unicodedata.ucnhash_CAPI`` has been moved to the internal C API. "
"(Contributed by Victor Stinner in :issue:`42157`.)"
msgstr ""
"Den privata ``_PyUnicode_Name_CAPI``-strukturen i PyCapsule API "
"``unicodedata.ucnhash_CAPI`` har flyttats till det interna C API. (Bidrag "
"från Victor Stinner i :issue:`42157`.)"

msgid ""
":c:func:`Py_GetPath`, :c:func:`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, :c:"
"func:`Py_GetProgramFullPath`, :c:func:`Py_GetPythonHome` and :c:func:"
"`Py_GetProgramName` functions now return ``NULL`` if called before :c:func:"
"`Py_Initialize` (before Python is initialized). Use the new :ref:`init-"
"config` API to get the :ref:`init-path-config`. (Contributed by Victor "
"Stinner in :issue:`42260`.)"
msgstr ""
":c:func:`Py_GetPath`, :c:func:`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, :c:"
"func:`Py_GetProgramFullPath`, :c:func:`Py_GetPythonHome` och :c:func:"
"`Py_GetProgramName` returnerar nu ``NULL`` om de anropas före :c:func:"
"`Py_Initialize` (innan Python har initialiserats). Använd det nya API:et :"
"ref:`init-config` för att hämta :ref:`init-path-config`. (Bidrag från Victor "
"Stinner i :issue:`42260`.)"

msgid ""
":c:func:`PyList_SET_ITEM`, :c:func:`PyTuple_SET_ITEM` and :c:func:"
"`PyCell_SET` macros can no longer be used as l-value or r-value. For "
"example, ``x = PyList_SET_ITEM(a, b, c)`` and ``PyList_SET_ITEM(a, b, c) = "
"x`` now fail with a compiler error. It prevents bugs like ``if "
"(PyList_SET_ITEM (a, b, c) < 0) ...`` test. (Contributed by Zackery Spytz "
"and Victor Stinner in :issue:`30459`.)"
msgstr ""
"makron :c:func:`PyList_SET_ITEM`, :c:func:`PyTuple_SET_ITEM` och :c:func:"
"`PyCell_SET` kan inte längre användas som l-värde eller r-värde. Till "
"exempel, ``x = PyList_SET_ITEM(a, b, c)`` och ``PyList_SET_ITEM(a, b, c) = "
"x`` misslyckas nu med ett kompilatorfel. Det förhindrar buggar som ``if "
"(PyList_SET_ITEM (a, b, c) < 0) ...`` test. (Bidrag från Zackery Spytz och "
"Victor Stinner i :issue:`30459`.)"

msgid ""
"The non-limited API files ``odictobject.h``, ``parser_interface.h``, "
"``picklebufobject.h``, ``pyarena.h``, ``pyctype.h``, ``pydebug.h``, ``pyfpe."
"h``, and ``pytime.h`` have been moved to the ``Include/cpython`` directory. "
"These files must not be included directly, as they are already included in "
"``Python.h``; see :ref:`api-includes`. If they have been included directly, "
"consider including ``Python.h`` instead. (Contributed by Nicholas Sim in :"
"issue:`35134`.)"
msgstr ""
"De icke-begränsade API-filerna ``odictobject.h``, ``parser_interface.h``, "
"``picklebufobject.h``, ``pyarena.h``, ``pyctype.h``, ``pydebug.h``, ``pyfpe."
"h`` och ``pytime.h`` har flyttats till katalogen ``Include/cpython``. Dessa "
"filer får inte inkluderas direkt, eftersom de redan är inkluderade i "
"``Python.h``; se :ref:`api-includes``. Om de har inkluderats direkt, överväg "
"att inkludera ``Python.h`` istället. (Bidrag från Nicholas Sim i :issue:"
"`35134`.)"

msgid ""
"Use the :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` type flag to create immutable "
"type objects. Do not rely on :c:macro:`Py_TPFLAGS_HEAPTYPE` to decide if a "
"type object is mutable or not; check if :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` "
"is set instead. (Contributed by Victor Stinner and Erlend E. Aasland in :"
"issue:`43908`.)"
msgstr ""
"Använd typflaggan :c:macro:`Py_TPFLAGS_IMMUTABLETYPE` för att skapa "
"oföränderliga typobjekt. Lita inte på :c:macro:`Py_TPFLAGS_HEAPTYPE` för att "
"avgöra om ett typobjekt är föränderligt eller inte; kontrollera om :c:macro:"
"`Py_TPFLAGS_IMMUTABLETYPE` är satt istället. (Bidrag från Victor Stinner och "
"Erlend E. Aasland i :issue:`43908`.)"

msgid ""
"The undocumented function ``Py_FrozenMain`` has been removed from the "
"limited API. The function is mainly useful for custom builds of Python. "
"(Contributed by Petr Viktorin in :issue:`26241`.)"
msgstr ""
"Den odokumenterade funktionen ``Py_FrozenMain`` har tagits bort från det "
"begränsade API:et. Funktionen är främst användbar för specialbyggda Python. "
"(Bidrag från Petr Viktorin i :issue:`26241`.)"

msgid ""
"The ``PyUnicode_InternImmortal()`` function is now deprecated and will be "
"removed in Python 3.12: use :c:func:`PyUnicode_InternInPlace` instead. "
"(Contributed by Victor Stinner in :issue:`41692`.)"
msgstr ""
"Funktionen ``PyUnicode_InternImmortal()`` är nu föråldrad och kommer att tas "
"bort i Python 3.12: använd :c:func:`PyUnicode_InternInPlace` istället. "
"(Bidrag från Victor Stinner i :issue:`41692`.)"

msgid ""
"Removed ``Py_UNICODE_str*`` functions manipulating ``Py_UNICODE*`` strings. "
"(Contributed by Inada Naoki in :issue:`41123`.)"
msgstr ""
"Tog bort ``Py_UNICODE_str*`` funktioner som manipulerar ``Py_UNICODE*`` "
"strängar. (Bidrag från Inada Naoki i :issue:`41123`.)"

msgid ""
"``Py_UNICODE_strlen``: use :c:func:`PyUnicode_GetLength` or :c:macro:"
"`PyUnicode_GET_LENGTH`"
msgstr ""
"``Py_UNICODE_strlen``: använd :c:func:`PyUnicode_GetLength` eller :c:macro:"
"`PyUnicode_GET_LENGTH`"

msgid ""
"``Py_UNICODE_strcat``: use :c:func:`PyUnicode_CopyCharacters` or :c:func:"
"`PyUnicode_FromFormat`"
msgstr ""
"``Py_UNICODE_strcat``: använd :c:func:`PyUnicode_CopyCharacters` eller :c:"
"func:`PyUnicode_FromFormat`"

msgid ""
"``Py_UNICODE_strcpy``, ``Py_UNICODE_strncpy``: use :c:func:"
"`PyUnicode_CopyCharacters` or :c:func:`PyUnicode_Substring`"
msgstr ""
"``Py_UNICODE_strcpy``, ``Py_UNICODE_strncpy``: använd :c:func:"
"`PyUnicode_CopyCharacters` eller :c:func:`PyUnicode_Substring`"

msgid "``Py_UNICODE_strcmp``: use :c:func:`PyUnicode_Compare`"
msgstr "``Py_UNICODE_strcmp``: använd :c:func:`PyUnicode_Compare`"

msgid "``Py_UNICODE_strncmp``: use :c:func:`PyUnicode_Tailmatch`"
msgstr "``Py_UNICODE_strncmp``: Använd :c:func:`PyUnicode_Tailmatch``"

msgid ""
"``Py_UNICODE_strchr``, ``Py_UNICODE_strrchr``: use :c:func:"
"`PyUnicode_FindChar`"
msgstr ""
"``Py_UNICODE_strchr``, ``Py_UNICODE_strrchr``: use :c:func:"
"`PyUnicode_FindChar`"

msgid ""
"Removed ``PyUnicode_GetMax()``. Please migrate to new (:pep:`393`) APIs. "
"(Contributed by Inada Naoki in :issue:`41103`.)"
msgstr ""
"Tog bort ``PyUnicode_GetMax()``. Vänligen migrera till nya (:pep:`393`) API:"
"er. (Bidrag från Inada Naoki i :issue:`41103`.)"

msgid ""
"Removed ``PyLong_FromUnicode()``. Please migrate to :c:func:"
"`PyLong_FromUnicodeObject`. (Contributed by Inada Naoki in :issue:`41103`.)"
msgstr ""
"Tog bort ``PyLong_FromUnicode()``. Vänligen migrera till :c:func:"
"`PyLong_FromUnicodeObject`. (Bidrag från Inada Naoki i :issue:`41103`.)"

msgid ""
"Removed ``PyUnicode_AsUnicodeCopy()``. Please use :c:func:"
"`PyUnicode_AsUCS4Copy` or :c:func:`PyUnicode_AsWideCharString` (Contributed "
"by Inada Naoki in :issue:`41103`.)"
msgstr ""
"Tog bort ``PyUnicode_AsUnicodeCopy()``. Använd :c:func:"
"`PyUnicode_AsUCS4Copy` eller :c:func:`PyUnicode_AsWideCharString` (Bidrag "
"från Inada Naoki i :issue:`41103`.)"

msgid ""
"Removed ``_Py_CheckRecursionLimit`` variable: it has been replaced by "
"``ceval.recursion_limit`` of the :c:type:`PyInterpreterState` structure. "
"(Contributed by Victor Stinner in :issue:`41834`.)"
msgstr ""
"Tog bort variabeln ``_Py_CheckRecursionLimit``: den har ersatts av ``ceval."
"recursion_limit`` i :c:type:`PyInterpreterState`-strukturen. (Bidrag från "
"Victor Stinner i :issue:`41834`.)"

msgid ""
"Removed undocumented macros ``Py_ALLOW_RECURSION`` and "
"``Py_END_ALLOW_RECURSION`` and the ``recursion_critical`` field of the :c:"
"type:`PyInterpreterState` structure. (Contributed by Serhiy Storchaka in :"
"issue:`41936`.)"
msgstr ""
"Tog bort odokumenterade makron ``Py_ALLOW_RECURSION`` och "
"``Py_END_ALLOW_RECURSION`` samt fältet ``recursion_critical`` i :c:type:"
"`PyInterpreterState`-strukturen. (Bidrag från Serhiy Storchaka i :issue:"
"`41936`.)"

msgid ""
"Removed the undocumented ``PyOS_InitInterrupts()`` function. Initializing "
"Python already implicitly installs signal handlers: see :c:member:`PyConfig."
"install_signal_handlers`. (Contributed by Victor Stinner in :issue:`41713`.)"
msgstr ""
"Tog bort den odokumenterade funktionen ``PyOS_InitInterrupts()``. "
"Initialisering av Python installerar redan implicit signalhanterare: se :c:"
"member:`PyConfig.install_signal_handlers`. (Bidrag från Victor Stinner i :"
"issue:`41713`.)"

msgid ""
"Remove the ``PyAST_Validate()`` function. It is no longer possible to build "
"a AST object (``mod_ty`` type) with the public C API. The function was "
"already excluded from the limited C API (:pep:`384`). (Contributed by Victor "
"Stinner in :issue:`43244`.)"
msgstr ""
"Ta bort funktionen ``PyAST_Validate()``. Det är inte längre möjligt att "
"bygga ett AST-objekt (typ ``mod_ty``) med det publika C API:et. Funktionen "
"var redan utesluten från det begränsade C API:et (:pep:`384`). (Bidrag från "
"Victor Stinner i :issue:`43244`.)"

msgid "Remove the ``symtable.h`` header file and the undocumented functions:"
msgstr "Ta bort huvudfilen ``symtable.h`` och de odokumenterade funktionerna:"

msgid "``PyST_GetScope()``"
msgstr "``PyST_GetScope()``"

msgid "``PySymtable_Build()``"
msgstr "``PySymtable_Build()``"

msgid "``PySymtable_BuildObject()``"
msgstr "``PySymtable_BuildObject()``"

msgid "``PySymtable_Free()``"
msgstr "``PySymtable_Free()``"

msgid "``Py_SymtableString()``"
msgstr "``Py_SymtableString()``"

msgid "``Py_SymtableStringObject()``"
msgstr "``Py_SymtableStringObject()``"

msgid ""
"The ``Py_SymtableString()`` function was part the stable ABI by mistake but "
"it could not be used, because the ``symtable.h`` header file was excluded "
"from the limited C API."
msgstr ""
"Funktionen ``Py_SymtableString()`` ingick av misstag i det stabila ABI:t men "
"kunde inte användas eftersom huvudfilen ``symtable.h`` inte ingick i det "
"begränsade C API:t."

msgid ""
"Use Python :mod:`symtable` module instead. (Contributed by Victor Stinner "
"in :issue:`43244`.)"
msgstr ""
"Använd Python :mod:`symtable`-modulen istället. (Bidrag från Victor Stinner "
"i :issue:`43244`.)"

msgid ""
"Remove :c:func:`PyOS_ReadlineFunctionPointer` from the limited C API headers "
"and from ``python3.dll``, the library that provides the stable ABI on "
"Windows. Since the function takes a ``FILE*`` argument, its ABI stability "
"cannot be guaranteed. (Contributed by Petr Viktorin in :issue:`43868`.)"
msgstr ""
"Ta bort :c:func:`PyOS_ReadlineFunctionPointer` från de begränsade C API-"
"rubrikerna och från ``python3.dll``, biblioteket som tillhandahåller det "
"stabila ABI:t på Windows. Eftersom funktionen tar ett ``FILE*``-argument kan "
"dess ABI-stabilitet inte garanteras. (Bidrag från Petr Viktorin i :issue:"
"`43868`.)"

msgid ""
"Remove ``ast.h``, ``asdl.h``, and ``Python-ast.h`` header files. These "
"functions were undocumented and excluded from the limited C API. Most names "
"defined by these header files were not prefixed by ``Py`` and so could "
"create names conflicts. For example, ``Python-ast.h`` defined a ``Yield`` "
"macro which was conflict with the ``Yield`` name used by the Windows "
"``<winbase.h>`` header. Use the Python :mod:`ast` module instead. "
"(Contributed by Victor Stinner in :issue:`43244`.)"
msgstr ""
"Ta bort huvudfilerna ``ast.h``, ``asdl.h`` och ``Python-ast.h``. Dessa "
"funktioner var odokumenterade och exkluderade från det begränsade C API:et. "
"De flesta namn som definierades av dessa header-filer hade inte ``Py`` som "
"prefix och kunde därför skapa namnkonflikter. Till exempel definierade "
"``Python-ast.h`` ett ``Yield``-makro som var i konflikt med ``Yield``-namnet "
"som används av Windows ``<winbase.h>``-headern. Använd Python :mod:`ast`-"
"modulen istället. (Bidrag från Victor Stinner i :issue:`43244`.)"

msgid ""
"Remove the compiler and parser functions using ``struct _mod`` type, because "
"the public AST C API was removed:"
msgstr ""
"Ta bort kompilator- och parserfunktionerna som använder typen ``struct "
"_mod``, eftersom det offentliga AST C API:et togs bort:"

msgid "``PyAST_Compile()``"
msgstr "``PyAST_Compile()``"

msgid "``PyAST_CompileEx()``"
msgstr "``PyAST_CompileEx()``"

msgid "``PyAST_CompileObject()``"
msgstr "``PyAST_CompileObject()``"

msgid "``PyFuture_FromAST()``"
msgstr "``PyFuture_FromAST()``"

msgid "``PyFuture_FromASTObject()``"
msgstr "``PyFuture_FromASTObject()``"

msgid "``PyParser_ASTFromFile()``"
msgstr "``PyParser_ASTFromFile()``"

msgid "``PyParser_ASTFromFileObject()``"
msgstr "``PyParser_ASTFromFileObject()``"

msgid "``PyParser_ASTFromFilename()``"
msgstr "``PyParser_ASTFromFilename()``"

msgid "``PyParser_ASTFromString()``"
msgstr "``PyParser_ASTFromString()``"

msgid "``PyParser_ASTFromStringObject()``"
msgstr "``PyParser_ASTFromStringObject()``"

msgid ""
"These functions were undocumented and excluded from the limited C API. "
"(Contributed by Victor Stinner in :issue:`43244`.)"
msgstr ""
"Dessa funktioner var odokumenterade och exkluderade från det begränsade C "
"API:et. (Bidrag från Victor Stinner i :issue:`43244`.)"

msgid "Remove the ``pyarena.h`` header file with functions:"
msgstr "Ta bort huvudfilen ``pyarena.h`` med funktioner:"

msgid "``PyArena_New()``"
msgstr "``PyArena_New()``"

msgid "``PyArena_Free()``"
msgstr "``PyArena_Free()``"

msgid "``PyArena_Malloc()``"
msgstr "``PyArena_Malloc()``"

msgid "``PyArena_AddPyObject()``"
msgstr "``PyArena_AddPyObject()``"

msgid ""
"These functions were undocumented, excluded from the limited C API, and were "
"only used internally by the compiler. (Contributed by Victor Stinner in :"
"issue:`43244`.)"
msgstr ""
"Dessa funktioner var odokumenterade, exkluderade från det begränsade C API:"
"et och användes endast internt av kompilatorn. (Bidrag från Victor Stinner "
"i :issue:`43244`.)"

msgid ""
"The ``PyThreadState.use_tracing`` member has been removed to optimize "
"Python. (Contributed by Mark Shannon in :issue:`43760`.)"
msgstr ""
"Medlemmen ``PyThreadState.use_tracing`` har tagits bort för att optimera "
"Python. (Bidrag från Mark Shannon i :issue:`43760`.)"

msgid "Notable security feature in 3.10.7"
msgstr "Anmärkningsvärd säkerhetsfunktion i 3.10.7"

msgid ""
"Converting between :class:`int` and :class:`str` in bases other than 2 "
"(binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal) "
"now raises a :exc:`ValueError` if the number of digits in string form is "
"above a limit to avoid potential denial of service attacks due to the "
"algorithmic complexity. This is a mitigation for :cve:`2020-10735`. This "
"limit can be configured or disabled by environment variable, command line "
"flag, or :mod:`sys` APIs. See the :ref:`integer string conversion length "
"limitation <int_max_str_digits>` documentation.  The default limit is 4300 "
"digits in string form."
msgstr ""
"Konvertering mellan :class:`int` och :class:`str` i andra baser än 2 "
"(binär), 4, 8 (oktal), 16 (hexadecimal) eller 32 såsom bas 10 (decimal) ger "
"nu upphov till ett :exc:`ValueError` om antalet siffror i strängform är över "
"en gräns för att undvika potentiella överbelastningsattacker på grund av den "
"algoritmiska komplexiteten. Detta är en begränsning av :cve:`2020-10735`. "
"Den här gränsen kan konfigureras eller inaktiveras med hjälp av en "
"miljövariabel, kommandoradsflagga eller :mod:`sys` API:er. Se "
"dokumentationen :ref:`Längdsbegränsning för konvertering av heltalssträngar "
"<int_max_str_digits>`.  Standardgränsen är 4300 siffror i strängform."

msgid "Notable security feature in 3.10.8"
msgstr "Anmärkningsvärd säkerhetsfunktion i 3.10.8"

msgid ""
"The deprecated :mod:`!mailcap` module now refuses to inject unsafe text "
"(filenames, MIME types, parameters) into shell commands. Instead of using "
"such text, it will warn and act as if a match was not found (or for test "
"commands, as if the test failed). (Contributed by Petr Viktorin in :gh:"
"`98966`.)"
msgstr ""
"Den föråldrade modulen :mod:`!mailcap` vägrar nu att injicera osäker text "
"(filnamn, MIME-typer, parametrar) i skalkommandon. Istället för att använda "
"sådan text kommer den att varna och agera som om en matchning inte hittades "
"(eller för testkommandon, som om testet misslyckades). (Bidrag från Petr "
"Viktorin i :gh:`98966`.)"

msgid "Notable changes in 3.10.12"
msgstr "Noterbara ändringar i 3.10.12"

msgid "tarfile"
msgstr "tarfil"

msgid ""
"The extraction methods in :mod:`tarfile`, and :func:`shutil.unpack_archive`, "
"have a new a *filter* argument that allows limiting tar features than may be "
"surprising or dangerous, such as creating files outside the destination "
"directory. See :ref:`tarfile-extraction-filter` for details. In Python 3.12, "
"use without the *filter* argument will show a :exc:`DeprecationWarning`. In "
"Python 3.14, the default will switch to ``'data'``. (Contributed by Petr "
"Viktorin in :pep:`706`.)"
msgstr ""
"Extraktionsmetoderna i :mod:`tarfile` och :func:`shutil.unpack_archive` har "
"ett nytt *filter*-argument som gör det möjligt att begränsa tarfunktioner "
"som kan vara överraskande eller farliga, t.ex. att skapa filer utanför "
"destinationskatalogen. Se :ref:`tarfile-extraction-filter` för detaljer. I "
"Python 3.12 kommer användning utan *filter*-argumentet att visa en :exc:"
"`DeprecationWarning`. I Python 3.14 kommer standardinställningen att ändras "
"till ``'data'``. (Bidrag från Petr Viktorin i :pep:`706`.)"
