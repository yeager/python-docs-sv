# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's New in Python 2.5"
msgstr "Vad är nytt i Python 2.5"

msgid "Author"
msgstr "Författare"

msgid "A.M. Kuchling"
msgstr "A.M. Kuchling"

msgid ""
"This article explains the new features in Python 2.5.  The final release of "
"Python 2.5 is scheduled for August 2006; :pep:`356` describes the planned "
"release schedule.  Python 2.5 was released on September 19, 2006."
msgstr ""
"Den här artikeln förklarar de nya funktionerna i Python 2.5.  Den slutliga "
"utgåvan av Python 2.5 är planerad till augusti 2006; :pep:`356` beskriver "
"det planerade utgivningsschemat.  Python 2.5 släpptes den 19 september 2006."

msgid ""
"The changes in Python 2.5 are an interesting mix of language and library "
"improvements. The library enhancements will be more important to Python's "
"user community, I think, because several widely useful packages were added.  "
"New modules include ElementTree for XML processing (:mod:`xml.etree`), the "
"SQLite database module (:mod:`sqlite`), and the :mod:`ctypes` module for "
"calling C functions."
msgstr ""
"Förändringarna i Python 2.5 är en intressant blandning av språk- och "
"biblioteksförbättringar. Biblioteksförbättringarna kommer att vara viktigare "
"för Pythons användargrupp, tror jag, eftersom flera mycket användbara paket "
"har lagts till.  Bland de nya modulerna finns ElementTree för XML-"
"bearbetning (:mod:`xml.etree`), databasmodulen SQLite (:mod:`sqlite`) och "
"modulen :mod:`ctypes` för anrop av C-funktioner."

msgid ""
"The language changes are of middling significance.  Some pleasant new "
"features were added, but most of them aren't features that you'll use every "
"day. Conditional expressions were finally added to the language using a "
"novel syntax; see section :ref:`pep-308`.  The new ':keyword:`with`' "
"statement will make writing cleanup code easier (section :ref:`pep-343`).  "
"Values can now be passed into generators (section :ref:`pep-342`).  Imports "
"are now visible as either absolute or relative (section :ref:`pep-328`).  "
"Some corner cases of exception handling are handled better (section :ref:"
"`pep-341`).  All these improvements are worthwhile, but they're improvements "
"to one specific language feature or another; none of them are broad "
"modifications to Python's semantics."
msgstr ""
"De språkliga förändringarna är av medelstor betydelse.  Några trevliga nya "
"funktioner har lagts till, men de flesta av dem är inte funktioner som du "
"kommer att använda varje dag. Villkorliga uttryck har äntligen lagts till i "
"språket med hjälp av en ny syntax; se avsnitt :ref:`pep-308`.  Den nya ':"
"keyword:`with`'-satsen gör det enklare att skriva uppstädningskod (avsnitt :"
"ref:`pep-343`).  Värden kan nu skickas in i generatorer (sektion :ref:"
"`pep-342`).  Importer är nu synliga som antingen absoluta eller relativa "
"(sektion :ref:`pep-328`).  Vissa hörnfall av undantagshantering hanteras "
"bättre (sektion :ref:`pep-341`).  Alla dessa förbättringar är värdefulla, "
"men de är förbättringar av en eller annan specifik språkfunktion; ingen av "
"dem är breda modifieringar av Pythons semantik."

msgid ""
"As well as the language and library additions, other improvements and "
"bugfixes were made throughout the source tree.  A search through the SVN "
"change logs finds there were 353 patches applied and 458 bugs fixed between "
"Python 2.4 and 2.5.  (Both figures are likely to be underestimates.)"
msgstr ""
"Förutom språk- och bibliotekstilläggen gjordes andra förbättringar och "
"buggfixar i hela källträdet.  En sökning genom SVN-ändringsloggarna visar "
"att det fanns 353 korrigeringar som tillämpades och 458 buggar fixade mellan "
"Python 2.4 och 2.5.  (Båda siffrorna är sannolikt underskattningar)"

msgid ""
"This article doesn't try to be a complete specification of the new features; "
"instead changes are briefly introduced using helpful examples.  For full "
"details, you should always refer to the documentation for Python 2.5 at "
"https://docs.python.org. If you want to understand the complete "
"implementation and design rationale, refer to the PEP for a particular new "
"feature."
msgstr ""
"Den här artikeln försöker inte vara en fullständig specifikation av de nya "
"funktionerna, utan ändringarna presenteras kortfattat med hjälp av "
"användbara exempel.  För fullständiga detaljer bör du alltid hänvisa till "
"dokumentationen för Python 2.5 på https://docs.python.org. Om du vill förstå "
"den fullständiga implementeringen och designrationaliteten, se PEP för en "
"viss ny funktion."

msgid ""
"Comments, suggestions, and error reports for this document are welcome; "
"please e-mail them to the author or open a bug in the Python bug tracker."
msgstr ""
"Kommentarer, förslag och felrapporter för detta dokument är välkomna; skicka "
"dem till författaren eller öppna en bugg i Pythons buggspårare."

msgid "PEP 308: Conditional Expressions"
msgstr "PEP 308: Villkorliga uttryck"

msgid ""
"For a long time, people have been requesting a way to write conditional "
"expressions, which are expressions that return value A or value B depending "
"on whether a Boolean value is true or false.  A conditional expression lets "
"you write a single assignment statement that has the same effect as the "
"following::"
msgstr ""
"Under lång tid har det efterfrågats ett sätt att skriva villkorliga uttryck, "
"dvs. uttryck som returnerar värde A eller värde B beroende på om ett "
"booleskt värde är sant eller falskt.  Med ett villkorligt uttryck kan du "
"skriva en enda assignment-sats som har samma effekt som följande::"

msgid ""
"if condition:\n"
"    x = true_value\n"
"else:\n"
"    x = false_value"
msgstr ""
"om villkor:\n"
"    x = sant_värde\n"
"annat:\n"
"    x = falskt_värde"

msgid ""
"There have been endless tedious discussions of syntax on both python-dev and "
"comp.lang.python.  A vote was even held that found the majority of voters "
"wanted conditional expressions in some form, but there was no syntax that "
"was preferred by a clear majority. Candidates included C's ``cond ? true_v : "
"false_v``, ``if cond then true_v else false_v``, and 16 other variations."
msgstr ""
"Det har varit oändliga tråkiga diskussioner om syntax på både python-dev och "
"comp.lang.python.  En omröstning hölls till och med som visade att "
"majoriteten av de röstande ville ha villkorliga uttryck i någon form, men "
"det fanns ingen syntax som föredrogs av en klar majoritet. Bland "
"kandidaterna fanns C:s ``cond ? true_v : false_v``, ``if cond then true_v "
"else false_v`` och 16 andra varianter."

msgid "Guido van Rossum eventually chose a surprising syntax::"
msgstr "Guido van Rossum valde till slut en överraskande syntax::"

msgid "x = true_value if condition else false_value"
msgstr "x = sant_värde if villkor else falskt_värde"

msgid ""
"Evaluation is still lazy as in existing Boolean expressions, so the order of "
"evaluation jumps around a bit.  The *condition* expression in the middle is "
"evaluated first, and the *true_value* expression is evaluated only if the "
"condition was true.  Similarly, the *false_value* expression is only "
"evaluated when the condition is false."
msgstr ""
"Utvärderingen är fortfarande lat som i befintliga booleska uttryck, så "
"utvärderingsordningen hoppar runt lite.  Uttrycket *condition* i mitten "
"utvärderas först, och uttrycket *true_value* utvärderas endast om villkoret "
"var sant.  På samma sätt utvärderas *false_value*-uttrycket endast om "
"villkoret är falskt."

msgid ""
"This syntax may seem strange and backwards; why does the condition go in the "
"*middle* of the expression, and not in the front as in C's ``c ? x : y``?  "
"The decision was checked by applying the new syntax to the modules in the "
"standard library and seeing how the resulting code read.  In many cases "
"where a conditional expression is used, one value seems to be the 'common "
"case' and one value is an 'exceptional case', used only on rarer occasions "
"when the condition isn't met.  The conditional syntax makes this pattern a "
"bit more obvious::"
msgstr ""
"Syntaxen kan verka konstig och bakvänd; varför placeras villkoret i *mitt* "
"av uttrycket och inte längst fram som i C:s ``c ? x : y``?  Beslutet "
"kontrollerades genom att tillämpa den nya syntaxen på modulerna i "
"standardbiblioteket och se hur den resulterande koden lästes.  I många fall "
"där ett villkorligt uttryck används verkar ett värde vara det \"vanliga "
"fallet\" och ett värde vara ett \"undantagsfall\", som bara används vid "
"sällsynta tillfällen när villkoret inte uppfylls.  Den villkorliga syntaxen "
"gör detta mönster lite mer uppenbart::"

msgid "contents = ((doc + '\\n') if doc else '')"
msgstr "innehåll = ((doc + '\\n') if doc else '')"

msgid ""
"I read the above statement as meaning \"here *contents* is  usually assigned "
"a value of ``doc+'\\n'``; sometimes  *doc* is empty, in which special case "
"an empty string is returned.\"   I doubt I will use conditional expressions "
"very often where there  isn't a clear common and uncommon case."
msgstr ""
"Jag läser ovanstående uttalande som \"här *contents* tilldelas vanligtvis "
"ett värde av ``doc+'\\n'``; ibland *doc* är tom, i vilket specialfall en tom "
"sträng returneras.\"   Jag tvivlar på att jag kommer att använda villkorliga "
"uttryck mycket ofta där det inte finns ett tydligt vanligt och ovanligt fall."

msgid ""
"There was some discussion of whether the language should require surrounding "
"conditional expressions with parentheses.  The decision was made to *not* "
"require parentheses in the Python language's grammar, but as a matter of "
"style I think you should always use them. Consider these two statements::"
msgstr ""
"Det diskuterades om språket skulle kräva att villkorliga uttryck omgärdas av "
"parenteser.  Beslutet blev att *inte* kräva parenteser i Pythonspråkets "
"grammatik, men som en stilfråga tycker jag att man alltid ska använda dem. "
"Tänk på dessa två uttalanden::"

msgid ""
"# First version -- no parens\n"
"level = 1 if logging else 0\n"
"\n"
"# Second version -- with parens\n"
"level = (1 if logging else 0)"
msgstr ""
"# Första versionen -- inga parenteser\n"
"level = 1 if logging else 0\n"
"\n"
"# Andra versionen -- med parenteser\n"
"nivå = (1 om loggning annars 0)"

msgid ""
"In the first version, I think a reader's eye might group the statement into "
"'level = 1', 'if logging', 'else 0', and think that the condition decides "
"whether the assignment to *level* is performed.  The second version reads "
"better, in my opinion, because it makes it clear that the assignment is "
"always performed and the choice is being made between two values."
msgstr ""
"I den första versionen tror jag att läsarens öga kan gruppera satsen i "
"\"nivå = 1\", \"if loggning\", \"else 0\", och tro att villkoret avgör om "
"tilldelningen till *nivå* utförs.  Den andra versionen läser bättre, enligt "
"min mening, eftersom den gör det tydligt att tilldelningen alltid utförs och "
"att valet görs mellan två värden."

msgid ""
"Another reason for including the brackets: a few odd combinations of list "
"comprehensions and lambdas could look like incorrect conditional "
"expressions. See :pep:`308` for some examples.  If you put parentheses "
"around your conditional expressions, you won't run into this case."
msgstr ""
"Ett annat skäl till att inkludera parenteserna: några udda kombinationer av "
"listförståelser och lambdas kan se ut som felaktiga villkorliga uttryck. Se :"
"pep:`308` för några exempel.  Om du sätter parenteser runt dina villkorliga "
"uttryck kommer du inte att stöta på det här fallet."

msgid ":pep:`308` - Conditional Expressions"
msgstr ":pep:`308` - Villkorliga uttryck"

msgid ""
"PEP written by Guido van Rossum and Raymond D. Hettinger; implemented by "
"Thomas Wouters."
msgstr ""
"PEP skriven av Guido van Rossum och Raymond D. Hettinger; implementerad av "
"Thomas Wouters."

msgid "PEP 309: Partial Function Application"
msgstr "PEP 309: Tillämpning av partiell funktion"

msgid ""
"The :mod:`functools` module is intended to contain tools for functional-"
"style programming."
msgstr ""
"Modulen :mod:`functools` är avsedd att innehålla verktyg för programmering i "
"funktionell stil."

msgid ""
"One useful tool in this module is the :func:`partial` function. For programs "
"written in a functional style, you'll sometimes want to construct variants "
"of existing functions that have some of the parameters filled in.  Consider "
"a Python function ``f(a, b, c)``; you could create a new function ``g(b, "
"c)`` that was equivalent to ``f(1, b, c)``.  This is called \"partial "
"function application\"."
msgstr ""
"Ett användbart verktyg i den här modulen är funktionen :func:`partial`. För "
"program som är skrivna i en funktionell stil vill du ibland konstruera "
"varianter av befintliga funktioner som har några av parametrarna ifyllda.  "
"Tänk på en Python-funktion ``f(a, b, c)``; du kan skapa en ny funktion "
"``g(b, c)`` som är likvärdig med ``f(1, b, c)``.  Detta kallas \"partiell "
"funktionstillämpning\"."

msgid ""
":func:`partial` takes the arguments ``(function, arg1, arg2, ... "
"kwarg1=value1, kwarg2=value2)``.  The resulting object is callable, so you "
"can just call it to invoke *function* with the filled-in arguments."
msgstr ""
":func:`partial` tar argumenten ``(function, arg1, arg2, ... kwarg1=värde1, "
"kwarg2=värde2)``.  Det resulterande objektet är anropsbart, så du kan bara "
"anropa det för att anropa *function* med de ifyllda argumenten."

msgid "Here's a small but realistic example::"
msgstr "Här är ett litet men realistiskt exempel::"

msgid ""
"import functools\n"
"\n"
"def log (message, subsystem):\n"
"    \"Write the contents of 'message' to the specified subsystem.\"\n"
"    print '%s: %s' % (subsystem, message)\n"
"    ...\n"
"\n"
"server_log = functools.partial(log, subsystem='server')\n"
"server_log('Unable to open socket')"
msgstr ""
"import functools\n"
"\n"
"def log (message, subsystem):\n"
"    \"Write the contents of 'message' to the specified subsystem.\"\n"
"    print '%s: %s' % (subsystem, message)\n"
"    ...\n"
"\n"
"server_log = functools.partial(log, subsystem='server')\n"
"server_log('Unable to open socket')"

msgid ""
"Here's another example, from a program that uses PyGTK.  Here a context-"
"sensitive pop-up menu is being constructed dynamically.  The callback "
"provided for the menu option is a partially applied version of the :meth:"
"`open_item` method, where the first argument has been provided. ::"
msgstr ""
"Här är ett annat exempel, från ett program som använder PyGTK.  Här "
"konstrueras en kontextkänslig popup-meny dynamiskt.  Callbacken som "
"tillhandahålls för menyalternativet är en delvis tillämpad version av "
"metoden :meth:`open_item`, där det första argumentet har tillhandahållits. ::"

msgid ""
"...\n"
"class Application:\n"
"    def open_item(self, path):\n"
"       ...\n"
"    def init (self):\n"
"        open_func = functools.partial(self.open_item, item_path)\n"
"        popup_menu.append( (\"Open\", open_func, 1) )"
msgstr ""
"...\n"
"klass Applikation:\n"
"    def open_item(self, path):\n"
"       ...\n"
"    def init (self):\n"
"        open_func = functools.partial(self.open_item, item_path)\n"
"        popup_menu.append( (\"Öppna\", open_func, 1) )"

msgid ""
"Another function in the :mod:`functools` module is the "
"``update_wrapper(wrapper, wrapped)`` function that helps you write well-"
"behaved decorators.  :func:`update_wrapper` copies the name, module, and "
"docstring attribute to a wrapper function so that tracebacks inside the "
"wrapped function are easier to understand.  For example, you might write::"
msgstr ""
"En annan funktion i modulen :mod:`functools` är funktionen "
"``update_wrapper(wrapper, wrapped)`` som hjälper dig att skriva välskötta "
"dekoratorer. :func:`update_wrapper` kopierar attributen namn, modul och "
"docstring till en wrapper-funktion så att spårningar inuti den omslutna "
"funktionen blir lättare att förstå.  Du kan till exempel skriva::"

msgid ""
"def my_decorator(f):\n"
"    def wrapper(*args, **kwds):\n"
"        print 'Calling decorated function'\n"
"        return f(*args, **kwds)\n"
"    functools.update_wrapper(wrapper, f)\n"
"    return wrapper"
msgstr ""
"def my_decorator(f):\n"
"    def wrapper(*args, **kwds):\n"
"        print 'Anropar dekorerad funktion'\n"
"        return f(*args, **kwds)\n"
"    functools.update_wrapper(wrapper, f)\n"
"    returnerar omslag"

msgid ""
":func:`wraps` is a decorator that can be used inside your own decorators to "
"copy the wrapped function's information.  An alternate  version of the "
"previous example would be::"
msgstr ""
":func:`wraps` är en dekorator som kan användas i dina egna dekoratorer för "
"att kopiera den omslutna funktionens information.  En alternativ version av "
"det tidigare exemplet skulle vara::"

msgid ""
"def my_decorator(f):\n"
"    @functools.wraps(f)\n"
"    def wrapper(*args, **kwds):\n"
"        print 'Calling decorated function'\n"
"        return f(*args, **kwds)\n"
"    return wrapper"
msgstr ""
"def min_dekoratör(f):\n"
"    @functools.wraps(f)\n"
"    def wrapper(*args, **kwds):\n"
"        print 'Anropar dekorerad funktion'\n"
"        returnera f(*args, **kwds)\n"
"    returnera omslag"

msgid ":pep:`309` - Partial Function Application"
msgstr ":pep:`309` - Tillämpning av partiell funktion"

msgid ""
"PEP proposed and written by Peter Harris; implemented by Hye-Shik Chang and "
"Nick Coghlan, with adaptations by Raymond Hettinger."
msgstr ""
"PEP föreslagen och skriven av Peter Harris; implementerad av Hye-Shik Chang "
"och Nick Coghlan, med anpassningar av Raymond Hettinger."

msgid "PEP 314: Metadata for Python Software Packages v1.1"
msgstr "PEP 314: Metadata för Python-programvarupaket v1.1"

msgid ""
"Some simple dependency support was added to Distutils.  The :func:`setup` "
"function now has ``requires``, ``provides``, and ``obsoletes`` keyword "
"parameters.  When you build a source distribution using the ``sdist`` "
"command, the dependency information will be recorded in the :file:`PKG-INFO` "
"file."
msgstr ""
"Ett enkelt stöd för beroenden har lagts till i Distutils.  Funktionen :func:"
"`setup` har nu nyckelordsparametrarna ``requires``, ``provides`` och "
"``obsoletes``.  När du bygger en källdistribution med kommandot ``sdist`` "
"kommer beroendeinformationen att registreras i filen :file:`PKG-INFO`."

msgid ""
"Another new keyword parameter is ``download_url``, which should be set to a "
"URL for the package's source code.  This means it's now possible to look up "
"an entry in the package index, determine the dependencies for a package, and "
"download the required packages. ::"
msgstr ""
"En annan ny nyckelordsparameter är ``download_url``, som bör ställas in på "
"en URL för paketets källkod.  Detta innebär att det nu är möjligt att slå "
"upp en post i paketindexet, bestämma beroendena för ett paket och hämta de "
"paket som krävs:"

msgid ""
"VERSION = '1.0'\n"
"setup(name='PyPackage',\n"
"      version=VERSION,\n"
"      requires=['numarray', 'zlib (>=1.1.4)'],\n"
"      obsoletes=['OldPackage']\n"
"      download_url=('http://www.example.com/pypackage/dist/pkg-%s.tar.gz'\n"
"                    % VERSION),\n"
"     )"
msgstr ""
"VERSION = '1.0'\n"
"setup(name='PyPackage',\n"
"      version=VERSION,\n"
"      kräver=['numarray', 'zlib (>=1.1.4)'],\n"
"      obsoletes=['OldPackage']\n"
"      download_url=('http://www.example.com/pypackage/dist/pkg-%s.tar.gz'\n"
"                    % VERSION),\n"
"     )"

msgid ""
"Another new enhancement to the Python package index at https://pypi.org is "
"storing source and binary archives for a package.  The new :command:`upload` "
"Distutils command will upload a package to the repository."
msgstr ""
"En annan ny förbättring av Python-paketindexet på https://pypi.org är "
"lagring av käll- och binärarkiv för ett paket.  Det nya kommandot :command:"
"`upload` Distutils laddar upp ett paket till arkivet."

msgid ""
"Before a package can be uploaded, you must be able to build a distribution "
"using the :command:`sdist` Distutils command.  Once that works, you can run "
"``python setup.py upload`` to add your package to the PyPI archive.  "
"Optionally you can GPG-sign the package by supplying the :option:`!--sign` "
"and :option:`!--identity` options."
msgstr ""
"Innan ett paket kan laddas upp måste du kunna bygga en distribution med "
"hjälp av kommandot :command:`sdist` Distutils.  När det fungerar kan du köra "
"``python setup.py upload`` för att lägga till ditt paket i PyPI-arkivet.  "
"Eventuellt kan du GPG-signera paketet genom att ange alternativen :option:"
"`!--sign` och :option:`!--identity`."

msgid ""
"Package uploading was implemented by Martin von Löwis and Richard Jones."
msgstr "Paketuppladdningen genomfördes av Martin von Löwis och Richard Jones."

msgid ":pep:`314` - Metadata for Python Software Packages v1.1"
msgstr ":pep:`314` - Metadata för Python-programvarupaket v1.1"

msgid ""
"PEP proposed and written by A.M. Kuchling, Richard Jones, and Fred Drake; "
"implemented by Richard Jones and Fred Drake."
msgstr ""
"PEP föreslogs och skrevs av A.M. Kuchling, Richard Jones och Fred Drake; "
"implementerades av Richard Jones och Fred Drake."

msgid "PEP 328: Absolute and Relative Imports"
msgstr "PEP 328: Absolut och relativ import"

msgid ""
"The simpler part of :pep:`328` was implemented in Python 2.4: parentheses "
"could now be used to enclose the names imported from a module using the "
"``from ... import ...`` statement, making it easier to import many different "
"names."
msgstr ""
"Den enklare delen av :pep:`328` implementerades i Python 2.4: parenteser kan "
"nu användas för att omsluta de namn som importeras från en modul med hjälp "
"av ``from ... import ...``-satsen, vilket gör det enklare att importera "
"många olika namn."

msgid ""
"The more complicated part has been implemented in Python 2.5: importing a "
"module can be specified to use absolute or package-relative imports.  The "
"plan is to move toward making absolute imports the default in future "
"versions of Python."
msgstr ""
"Den mer komplicerade delen har implementerats i Python 2.5: import av en "
"modul kan specificeras för att använda absolut eller paketrelativ import.  "
"Planen är att gå mot att göra absolut import till standard i framtida "
"versioner av Python."

msgid "Let's say you have a package directory like this::"
msgstr "Låt oss säga att du har en paketkatalog så här::"

msgid ""
"pkg/\n"
"pkg/__init__.py\n"
"pkg/main.py\n"
"pkg/string.py"
msgstr ""
"pkg/\n"
"pkg/__init__.py\n"
"pkg/main.py\n"
"pkg/string.py"

msgid ""
"This defines a package named :mod:`pkg` containing the :mod:`pkg.main` and :"
"mod:`pkg.string` submodules."
msgstr ""
"Detta definierar ett paket med namnet :mod:`pkg` som innehåller "
"undermodulerna :mod:`pkg.main` och :mod:`pkg.string`."

msgid ""
"Consider the code in the :file:`main.py` module.  What happens if it "
"executes the statement ``import string``?  In Python 2.4 and earlier, it "
"will first look in the package's directory to perform a relative import, "
"finds :file:`pkg/string.py`, imports the contents of that file as the :mod:"
"`pkg.string` module, and that module is bound to the name ``string`` in the :"
"mod:`pkg.main` module's namespace."
msgstr ""
"Betrakta koden i modulen :file:`main.py`.  Vad händer om den exekverar "
"satsen ``import string``?  I Python 2.4 och tidigare letar den först i "
"paketets katalog för att utföra en relativ import, hittar :file:`pkg/string."
"py`, importerar innehållet i den filen som modulen :mod:`pkg.string`, och "
"den modulen är bunden till namnet ``string`` i modulen :mod:`pkg.main`:s "
"namnrymd."

msgid ""
"That's fine if :mod:`pkg.string` was what you wanted.  But what if you "
"wanted Python's standard :mod:`string` module?  There's no clean way to "
"ignore :mod:`pkg.string` and look for the standard module; generally you had "
"to look at the contents of ``sys.modules``, which is slightly unclean.    "
"Holger Krekel's :mod:`py.std` package provides a tidier way to perform "
"imports from the standard library, ``import py; py.std.string.join()``, but "
"that package isn't available on all Python installations."
msgstr ""
"Det är bra om :mod:`pkg.string` var vad du ville ha.  Men vad händer om du "
"vill ha Pythons standardmodul :mod:`string`?  Det finns inget rent sätt att "
"ignorera :mod:`pkg.string` och leta efter standardmodulen; i allmänhet måste "
"du titta på innehållet i ``sys.modules``, vilket är något orent.    Holger "
"Krekels :mod:`py.std`-paket ger ett snyggare sätt att utföra import från "
"standardbiblioteket, ``import py; py.std.string.join()``, men det paketet är "
"inte tillgängligt på alla Python-installationer."

msgid ""
"Reading code which relies on relative imports is also less clear, because a "
"reader may be confused about which module, :mod:`string` or :mod:`pkg."
"string`, is intended to be used.  Python users soon learned not to duplicate "
"the names of standard library modules in the names of their packages' "
"submodules, but you can't protect against having your submodule's name being "
"used for a new module added in a future version of Python."
msgstr ""
"Att läsa kod som förlitar sig på relativ import är också mindre tydligt, "
"eftersom en läsare kan bli förvirrad över vilken modul, :mod:`string` eller :"
"mod:`pkg.string`, som är avsedd att användas.  Python-användare lärde sig "
"snart att inte duplicera namnen på standardbiblioteksmoduler i namnen på "
"sina pakets undermoduler, men du kan inte skydda dig mot att din undermoduls "
"namn används för en ny modul som läggs till i en framtida version av Python."

msgid ""
"In Python 2.5, you can switch :keyword:`import`'s behaviour to  absolute "
"imports using a ``from __future__ import absolute_import`` directive.  This "
"absolute-import behaviour will become the default in a future version "
"(probably Python 2.7).  Once absolute imports  are the default, ``import "
"string`` will always find the standard library's version. It's suggested "
"that users should begin using absolute imports as much as possible, so it's "
"preferable to begin writing ``from pkg import string`` in your code."
msgstr ""
"I Python 2.5 kan du byta :keyword:`import` beteende till absolut import med "
"hjälp av ett ``from __future__ import absolute_import`` direktiv.  Detta "
"absoluta importbeteende kommer att bli standard i en framtida version "
"(förmodligen Python 2.7).  När absolut import är standard, kommer ``import "
"string`` alltid att hitta standardbibliotekets version. Det föreslås att "
"användare ska börja använda absolut import så mycket som möjligt, så det är "
"att föredra att börja skriva ``from pkg import string`` i din kod."

msgid ""
"Relative imports are still possible by adding a leading period  to the "
"module name when using the ``from ... import`` form::"
msgstr ""
"Relativ import är fortfarande möjlig genom att lägga till en inledande punkt "
"i modulnamnet när du använder formuläret ``from ... import``::"

msgid ""
"# Import names from pkg.string\n"
"from .string import name1, name2\n"
"# Import pkg.string\n"
"from . import string"
msgstr ""
"# Import names from pkg.string\n"
"from .string import name1, name2\n"
"# Import pkg.string\n"
"from . import string"

msgid ""
"This imports the :mod:`string` module relative to the current package, so "
"in :mod:`pkg.main` this will import *name1* and *name2* from :mod:`pkg."
"string`. Additional leading periods perform the relative import starting "
"from the parent of the current package.  For example, code in the :mod:`A.B."
"C` module can do::"
msgstr ""
"Detta importerar modulen :mod:`string` relativt det aktuella paketet, så i :"
"mod:`pkg.main` kommer detta att importera *namn1* och *namn2* från :mod:`pkg."
"string`. Ytterligare inledande punkter utför den relativa importen med "
"början från det aktuella paketets överordnade enhet.  Till exempel kan kod i "
"modulen :mod:`A.B.C` göra::"

msgid ""
"from . import D                 # Imports A.B.D\n"
"from .. import E                # Imports A.E\n"
"from ..F import G               # Imports A.F.G"
msgstr ""
"from . import D # Import A.B.D\n"
"från .. import E # Import A.E\n"
"från ..F import G # Import A.F.G"

msgid ""
"Leading periods cannot be used with the ``import modname``  form of the "
"import statement, only the ``from ... import`` form."
msgstr ""
"Ledande punkter kan inte användas med formen ``import modname`` av import-"
"satsen, endast med formen ``from ... import``."

msgid ":pep:`328` - Imports: Multi-Line and Absolute/Relative"
msgstr ":pep:`328` - Import: Flera rader och absolut/relativ"

msgid "PEP written by Aahz; implemented by Thomas Wouters."
msgstr "PEP skriven av Aahz; implementerad av Thomas Wouters."

msgid "https://pylib.readthedocs.io/"
msgstr "https://pylib.readthedocs.io/"

msgid ""
"The py library by Holger Krekel, which contains the :mod:`py.std` package."
msgstr "Py-biblioteket av Holger Krekel, som innehåller paketet :mod:`py.std`."

msgid "PEP 338: Executing Modules as Scripts"
msgstr "PEP 338: Exekvera moduler som skript"

msgid ""
"The :option:`-m` switch added in Python 2.4 to execute a module as a script "
"gained a few more abilities.  Instead of being implemented in C code inside "
"the Python interpreter, the switch now uses an implementation in a new "
"module, :mod:`runpy`."
msgstr ""
"Omkopplaren :option:`-m` som lades till i Python 2.4 för att exekvera en "
"modul som ett skript har fått några fler förmågor.  Istället för att "
"implementeras i C-kod inuti Python-tolken använder bytet nu en "
"implementering i en ny modul, :mod:`runpy`."

msgid ""
"The :mod:`runpy` module implements a more sophisticated import mechanism so "
"that it's now possible to run modules in a package such as :mod:`pychecker."
"checker`. The module also supports alternative import mechanisms such as "
"the :mod:`zipimport` module.  This means you can add a .zip archive's path "
"to ``sys.path`` and then use the :option:`-m` switch to execute code from "
"the archive."
msgstr ""
"Modulen :mod:`runpy` implementerar en mer sofistikerad importmekanism så att "
"det nu är möjligt att köra moduler i ett paket som :mod:`pychecker.checker`. "
"Modulen stöder även alternativa importmekanismer som modulen :mod:"
"`zipimport`.  Det innebär att du kan lägga till sökvägen till ett .zip-arkiv "
"i ``sys.path`` och sedan använda :option:`-m` för att exekvera kod från "
"arkivet."

msgid ":pep:`338` - Executing modules as scripts"
msgstr ":pep:`338` - Exekvera moduler som skript"

msgid "PEP written and  implemented by Nick Coghlan."
msgstr "PEP skrivet och genomfört av Nick Coghlan."

msgid "PEP 341: Unified try/except/finally"
msgstr "PEP 341: Unifierad try/except/finally"

msgid ""
"Until Python 2.5, the :keyword:`try` statement came in two flavours. You "
"could use a :keyword:`finally` block to ensure that code is always executed, "
"or one or more :keyword:`except` blocks to catch  specific exceptions.  You "
"couldn't combine both :keyword:`!except` blocks and a :keyword:`!finally` "
"block, because generating the right bytecode for the combined version was "
"complicated and it wasn't clear what the semantics of the combined statement "
"should be."
msgstr ""
"Fram till Python 2.5 fanns :keyword:`try`-satsen i två varianter. Du kan "
"använda ett :keyword:`finally`-block för att säkerställa att koden alltid "
"körs, eller ett eller flera :keyword:`except`-block för att fånga specifika "
"undantag.  Det gick inte att kombinera både :keyword:`!except`-block och "
"ett :keyword:`!finally`-block, eftersom det var komplicerat att generera "
"rätt bytecode för den kombinerade versionen och det var oklart vad "
"semantiken i den kombinerade satsen skulle vara."

msgid ""
"Guido van Rossum spent some time working with Java, which does support the "
"equivalent of combining :keyword:`except` blocks and a :keyword:`finally` "
"block, and this clarified what the statement should mean.  In Python 2.5, "
"you can now write::"
msgstr ""
"Guido van Rossum tillbringade en del tid med att arbeta med Java, som stöder "
"motsvarande kombination av :keyword:`except`-block och ett :keyword:"
"`finally`-block, och detta klargjorde vad uttalandet skulle betyda.  I "
"Python 2.5 kan man nu skriva::"

msgid ""
"try:\n"
"    block-1 ...\n"
"except Exception1:\n"
"    handler-1 ...\n"
"except Exception2:\n"
"    handler-2 ...\n"
"else:\n"
"    else-block\n"
"finally:\n"
"    final-block"
msgstr ""
"försök:\n"
"    block-1 ...\n"
"utom Exception1:\n"
"    hanterare-1 ...\n"
"utom Undantag2:\n"
"    handläggare-2 ...\n"
"else:\n"
"    else-block\n"
"slutligen:\n"
"    final-block"

msgid ""
"The code in *block-1* is executed.  If the code raises an exception, the "
"various :keyword:`except` blocks are tested: if the exception is of class :"
"class:`Exception1`, *handler-1* is executed; otherwise if it's of class :"
"class:`Exception2`, *handler-2* is executed, and so forth.  If no exception "
"is raised, the *else-block* is executed."
msgstr ""
"Koden i *block-1* exekveras.  Om koden ger upphov till ett undantag, testas "
"de olika :keyword:`except`-blocken: om undantaget är av klass :class:"
"`Exception1`, utförs *handler-1*; annars om det är av klass :class:"
"`Exception2`, utförs *handler-2*, och så vidare.  Om inget undantag uppstår "
"körs *else-blocket*."

msgid ""
"No matter what happened previously, the *final-block* is executed once the "
"code block is complete and any raised exceptions handled. Even if there's an "
"error in an exception handler or the *else-block* and a new exception is "
"raised, the code in the *final-block* is still run."
msgstr ""
"Oavsett vad som hänt tidigare körs *final-block* när kodblocket är färdigt "
"och eventuella undantag har hanterats. Även om det uppstår ett fel i en "
"undantagshanterare eller i *else-blocket* och ett nytt undantag uppstår, "
"körs koden i *final-blocket* ändå."

msgid ":pep:`341` - Unifying try-except and try-finally"
msgstr ":pep:`341` - Förenande av try-except och try-finally"

msgid "PEP written by Georg Brandl;  implementation by Thomas Lee."
msgstr "PEP skriven av Georg Brandl; implementation av Thomas Lee."

msgid "PEP 342: New Generator Features"
msgstr "PEP 342: Nya generatorfunktioner"

msgid ""
"Python 2.5 adds a simple way to pass values *into* a generator. As "
"introduced in Python 2.3, generators only produce output; once a generator's "
"code was invoked to create an iterator, there was no way to pass any new "
"information into the function when its execution is resumed.  Sometimes the "
"ability to pass in some information would be useful.  Hackish solutions to "
"this include making the generator's code look at a global variable and then "
"changing the global variable's value, or passing in some mutable object that "
"callers then modify."
msgstr ""
"Python 2.5 lägger till ett enkelt sätt att skicka värden *in* en generator. "
"Som introducerades i Python 2.3 producerar generatorer bara utdata; när en "
"generators kod har åberopats för att skapa en iterator fanns det inget sätt "
"att skicka någon ny information till funktionen när dess exekvering "
"återupptogs.  Ibland skulle det vara användbart att kunna skicka in lite "
"information.  Hackiga lösningar på detta inkluderar att låta generatorns kod "
"titta på en global variabel och sedan ändra den globala variabelns värde, "
"eller skicka in något mutabelt objekt som anroparna sedan ändrar."

msgid "To refresh your memory of basic generators, here's a simple example::"
msgstr ""
"För att friska upp minnet av grundläggande generatorer följer här ett enkelt "
"exempel::"

msgid ""
"def counter (maximum):\n"
"    i = 0\n"
"    while i < maximum:\n"
"        yield i\n"
"        i += 1"
msgstr ""
"def räknare (max):\n"
"    i = 0\n"
"    medan i < maximum:\n"
"        ge i\n"
"        i += 1"

msgid ""
"When you call ``counter(10)``, the result is an iterator that returns the "
"values from 0 up to 9.  On encountering the :keyword:`yield` statement, the "
"iterator returns the provided value and suspends the function's execution, "
"preserving the local variables. Execution resumes on the following call to "
"the iterator's :meth:`next` method, picking up after the :keyword:`!yield` "
"statement."
msgstr ""
"När du anropar ``counter(10)`` blir resultatet en iterator som returnerar "
"värdena från 0 upp till 9.  När du stöter på :keyword:`yield`-satsen "
"returnerar iteratorn det angivna värdet och avbryter funktionens exekvering, "
"varvid de lokala variablerna bevaras. Exekveringen återupptas vid följande "
"anrop till iteratorns :meth:`next`-metod, som tar vid efter :keyword:`!"
"yield`-satsen."

msgid ""
"In Python 2.3, :keyword:`yield` was a statement; it didn't return any "
"value.  In 2.5, :keyword:`!yield` is now an expression, returning a value "
"that can be assigned to a variable or otherwise operated on::"
msgstr ""
"I Python 2.3 var :keyword:`yield` ett uttalande; det returnerade inte något "
"värde.  I 2.5 är :keyword:`!yield` nu ett uttryck som returnerar ett värde "
"som kan tilldelas en variabel eller på annat sätt användas:"

msgid "val = (yield i)"
msgstr "val = (avkastning i)"

msgid ""
"I recommend that you always put parentheses around a :keyword:`yield` "
"expression when you're doing something with the returned value, as in the "
"above example. The parentheses aren't always necessary, but it's easier to "
"always add them instead of having to remember when they're needed."
msgstr ""
"Jag rekommenderar att du alltid sätter parenteser runt ett :keyword:`yield`-"
"uttryck när du gör något med det returnerade värdet, som i exemplet ovan. "
"Parenteserna är inte alltid nödvändiga, men det är lättare att alltid lägga "
"till dem istället för att behöva komma ihåg när de behövs."

msgid ""
"(:pep:`342` explains the exact rules, which are that a :keyword:`yield`\\ -"
"expression must always be parenthesized except when it occurs at the top-"
"level expression on the right-hand side of an assignment.  This means you "
"can write ``val = yield i`` but have to use parentheses when there's an "
"operation, as in ``val = (yield i) + 12``.)"
msgstr ""
"(:pep:`342` förklarar de exakta reglerna, som är att ett :keyword:`yield` -"
"uttryck alltid måste vara inom parentes utom när det förekommer i "
"toppnivåuttrycket på höger sida av en tilldelning.  Det betyder att du kan "
"skriva ``val = yield i`` men måste använda parenteser när det finns en "
"operation, som i ``val = (yield i) + 12``)"

msgid ""
"Values are sent into a generator by calling its ``send(value)`` method.  The "
"generator's code is then resumed and the :keyword:`yield` expression returns "
"the specified *value*.  If the regular :meth:`next` method is called, the :"
"keyword:`!yield` returns :const:`None`."
msgstr ""
"Värden skickas till en generator genom att anropa dess metod "
"``send(value)``.  Generatorns kod återupptas sedan och uttrycket :keyword:"
"`yield` returnerar det angivna *värdet*.  Om den vanliga metoden :meth:"
"`next` anropas returnerar :keyword:`!yield` :const:`None`."

msgid ""
"Here's the previous example, modified to allow changing the value of the "
"internal counter. ::"
msgstr ""
"Här är det föregående exemplet, modifierat så att det går att ändra värdet "
"på den interna räknaren:"

msgid ""
"def counter (maximum):\n"
"    i = 0\n"
"    while i < maximum:\n"
"        val = (yield i)\n"
"        # If value provided, change counter\n"
"        if val is not None:\n"
"            i = val\n"
"        else:\n"
"            i += 1"
msgstr ""
"def räknare (max):\n"
"    i = 0\n"
"    medan i < maximum:\n"
"        val = (avkastning i)\n"
"        # Om värde anges, ändra räknaren\n"
"        om val inte är None:\n"
"            i = val\n"
"        i annat fall\n"
"            i += 1"

msgid "And here's an example of changing the counter::"
msgstr "Och här är ett exempel på hur man ändrar räknaren::"

msgid ""
">>> it = counter(10)\n"
">>> print it.next()\n"
"0\n"
">>> print it.next()\n"
"1\n"
">>> print it.send(8)\n"
"8\n"
">>> print it.next()\n"
"9\n"
">>> print it.next()\n"
"Traceback (most recent call last):\n"
"  File \"t.py\", line 15, in ?\n"
"    print it.next()\n"
"StopIteration"
msgstr ""
">>> det = räknare(10)\n"
">>> Skriv ut det.nästa()\n"
"0\n"
">>> Skriv ut den.nästa()\n"
"1\n"
">>> Skriv ut den.skicka(8)\n"
"8\n"
">>> Skriv ut den.nästa()\n"
"9\n"
">>> skriv ut det.nästa()\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"t.py\", rad 15, i ?\n"
"    skriv ut den.nästa()\n"
"Stoppa iteration"

msgid ""
":keyword:`yield` will usually return :const:`None`, so you should always "
"check for this case.  Don't just use its value in expressions unless you're "
"sure that the :meth:`send` method will be the only method used to resume "
"your generator function."
msgstr ""
":keyword:`yield` kommer vanligtvis att returnera :const:`None`, så du bör "
"alltid kontrollera för detta fall.  Använd inte bara dess värde i uttryck om "
"du inte är säker på att metoden :meth:`send` kommer att vara den enda metod "
"som används för att återuppta din generatorfunktion."

msgid ""
"In addition to :meth:`send`, there are two other new methods on generators:"
msgstr "Förutom :meth:`send` finns det två andra nya metoder för generatorer:"

msgid ""
"``throw(type, value=None, traceback=None)`` is used to raise an exception "
"inside the generator; the exception is raised by the :keyword:`yield` "
"expression where the generator's execution is paused."
msgstr ""
"``throw(type, value=None, traceback=None)`` används för att skapa ett "
"undantag inuti generatorn; undantaget skapas av :keyword:`yield`-uttrycket "
"där generatorns exekvering pausas."

msgid ""
":meth:`close` raises a new :exc:`GeneratorExit` exception inside the "
"generator to terminate the iteration.  On receiving this exception, the "
"generator's code must either raise :exc:`GeneratorExit` or :exc:"
"`StopIteration`.  Catching the :exc:`GeneratorExit` exception and returning "
"a value is illegal and will trigger a :exc:`RuntimeError`; if the function "
"raises some other exception, that exception is propagated to the caller.  :"
"meth:`close` will also be called by Python's garbage collector when the "
"generator is garbage-collected."
msgstr ""
":meth:`close` ger upphov till ett nytt :exc:`GeneratorExit` undantag inuti "
"generatorn för att avsluta iterationen.  När detta undantag tas emot måste "
"generatorns kod antingen ge upphov till :exc:`GeneratorExit` eller :exc:"
"`StopIteration`.  Att fånga upp undantaget :exc:`GeneratorExit` och "
"returnera ett värde är olagligt och kommer att utlösa ett :exc:"
"`RuntimeError`; om funktionen ger upphov till något annat undantag, kommer "
"det undantaget att spridas till den som anropar. :meth:`close` kommer också "
"att anropas av Pythons skräpsamlare när generatorn är skräpsamlad."

msgid ""
"If you need to run cleanup code when a :exc:`GeneratorExit` occurs, I "
"suggest using a ``try: ... finally:`` suite instead of  catching :exc:"
"`GeneratorExit`."
msgstr ""
"Om du behöver köra upprensningskod när en :exc:`GeneratorExit` inträffar "
"föreslår jag att du använder en ``try: ... finally:`` svit istället för att "
"fånga :exc:`GeneratorExit`."

msgid ""
"The cumulative effect of these changes is to turn generators from one-way "
"producers of information into both producers and consumers."
msgstr ""
"Den sammantagna effekten av dessa förändringar är att generatorer förvandlas "
"från enkelriktade producenter av information till både producenter och "
"konsumenter."

msgid ""
"Generators also become *coroutines*, a more generalized form of subroutines. "
"Subroutines are entered at one point and exited at another point (the top of "
"the function, and a :keyword:`return` statement), but coroutines can be "
"entered, exited, and resumed at many different points (the :keyword:`yield` "
"statements). We'll have to figure out patterns for using coroutines "
"effectively in Python."
msgstr ""
"Generatorer blir också *koroutiner*, en mer generaliserad form av "
"subrutiner. Subrutiner startas vid en punkt och avslutas vid en annan punkt "
"(toppen av funktionen och ett :keyword:`return`-slutsats), men coroutines "
"kan startas, avslutas och återupptas vid många olika punkter (:keyword:"
"`yield`-slutsatserna). Vi måste räkna ut mönster för att använda coroutines "
"effektivt i Python."

msgid ""
"The addition of the :meth:`close` method has one side effect that isn't "
"obvious. :meth:`close` is called when a generator is garbage-collected, so "
"this means the generator's code gets one last chance to run before the "
"generator is destroyed. This last chance means that ``try...finally`` "
"statements in generators can now be guaranteed to work; the :keyword:"
"`finally` clause will now always get a chance to run.  The syntactic "
"restriction that you couldn't mix :keyword:`yield` statements with a ``try..."
"finally`` suite has therefore been removed.  This seems like a minor bit of "
"language trivia, but using generators and ``try...finally`` is actually "
"necessary in order to implement the :keyword:`with` statement described by :"
"pep:`343`.  I'll look at this new statement in the following  section."
msgstr ""
"Tillägget av metoden :meth:`close` har en bieffekt som inte är uppenbar. :"
"meth:`close` anropas när en generator samlas in, så det betyder att "
"generatorns kod får en sista chans att köras innan generatorn förstörs. "
"Denna sista chans innebär att ``try...finally``-satser i generatorer nu kan "
"garanteras fungera; :keyword:`finally`-satsen kommer nu alltid att få en "
"chans att köras.  Den syntaktiska begränsningen att man inte kunde blanda :"
"keyword:`yield`-satser med en ``try...finally``-svit har därför tagits "
"bort.  Det här verkar vara en liten språktrivia, men att använda generatorer "
"och ``try...finally`` är faktiskt nödvändigt för att implementera :keyword:"
"`with`-satsen som beskrivs av :pep:`343``.  Jag kommer att titta på detta "
"nya uttalande i följande avsnitt."

msgid ""
"Another even more esoteric effect of this change: previously, the :attr:"
"`gi_frame` attribute of a generator was always a frame object. It's now "
"possible for :attr:`gi_frame` to be ``None`` once the generator has been "
"exhausted."
msgstr ""
"En annan ännu mer esoterisk effekt av denna ändring: tidigare var "
"attributet :attr:`gi_frame` för en generator alltid ett ramobjekt. Det är nu "
"möjligt för :attr:`gi_frame` att vara ``None`` när generatorn har uttömts."

msgid ":pep:`342` - Coroutines via Enhanced Generators"
msgstr ":pep:`342` - Coroutines via förbättrade generatorer"

msgid ""
"PEP written by  Guido van Rossum and Phillip J. Eby; implemented by Phillip "
"J. Eby.  Includes examples of  some fancier uses of generators as coroutines."
msgstr ""
"PEP skriven av Guido van Rossum och Phillip J. Eby; implementerad av Phillip "
"J. Eby.  Innehåller exempel på några mer avancerade användningar av "
"generatorer som coroutines."

msgid ""
"Earlier versions of these features were proposed in  :pep:`288` by Raymond "
"Hettinger and :pep:`325` by Samuele Pedroni."
msgstr ""
"Tidigare versioner av dessa funktioner föreslogs i :pep:`288` av Raymond "
"Hettinger och :pep:`325` av Samuele Pedroni."

msgid "https://en.wikipedia.org/wiki/Coroutine"
msgstr "https://en.wikipedia.org/wiki/Coroutine"

msgid "The Wikipedia entry for  coroutines."
msgstr "Wikipedia-artikeln om coroutines."

msgid ""
"https://web.archive.org/web/20160321211320/http://www.sidhe.org/~dan/blog/"
"archives/000178.html"
msgstr ""
"https://web.archive.org/web/20160321211320/http://www.sidhe.org/~dan/blog/"
"archives/000178.html"

msgid ""
"An explanation of coroutines from a Perl point of view, written by Dan "
"Sugalski."
msgstr ""
"En förklaring av coroutines från en Perl-synvinkel, skriven av Dan Sugalski."

msgid "PEP 343: The 'with' statement"
msgstr "PEP 343: Uttalandet \"med"

msgid ""
"The ':keyword:`with`' statement clarifies code that previously would use "
"``try...finally`` blocks to ensure that clean-up code is executed.  In this "
"section, I'll discuss the statement as it will commonly be used.  In the "
"next section, I'll examine the implementation details and show how to write "
"objects for use with this statement."
msgstr ""
"Satsen ':keyword:`with`' förtydligar kod som tidigare skulle använda ``try..."
"finally``-block för att säkerställa att uppstädningskoden körs.  I det här "
"avsnittet diskuterar jag uttalandet som det vanligtvis kommer att användas.  "
"I nästa avsnitt undersöker jag implementeringsdetaljerna och visar hur man "
"skriver objekt som kan användas med den här satsen."

msgid ""
"The ':keyword:`with`' statement is a new control-flow structure whose basic "
"structure is::"
msgstr ""
"':nyckelord:`med`' är en ny kontrollflödesstruktur vars grundstruktur är::"

msgid ""
"with expression [as variable]:\n"
"    with-block"
msgstr ""
"med uttryck [som variabel]:\n"
"    med-blockera"

msgid ""
"The expression is evaluated, and it should result in an object that supports "
"the context management protocol (that is, has :meth:`~object.__enter__` and :"
"meth:`~object.__exit__` methods."
msgstr ""
"Uttrycket utvärderas och bör resultera i ett objekt som stöder protokollet "
"för kontexthantering (dvs. har metoderna :meth:`~object.__enter__` och :meth:"
"`~object.__exit__`)."

msgid ""
"The object's :meth:`~object.__enter__` is called before *with-block* is "
"executed and therefore can run set-up code. It also may return a value that "
"is bound to the name *variable*, if given.  (Note carefully that *variable* "
"is *not* assigned the result of *expression*.)"
msgstr ""
"Objektets :meth:`~object.__enter__` anropas innan *with-block* exekveras och "
"kan därför köra installationskod. Den kan också returnera ett värde som är "
"bundet till namnet *variable*, om det anges.  (Observera noga att *variable* "
"*inte* tilldelas resultatet av *expression*)"

msgid ""
"After execution of the *with-block* is finished, the object's :meth:`~object."
"__exit__` method is called, even if the block raised an exception, and can "
"therefore run clean-up code."
msgstr ""
"Efter att *with-blocket* har exekverats anropas objektets metod :meth:"
"`~object.__exit__`, även om blocket gav upphov till ett undantag, och kan "
"därför köra uppstädningskod."

msgid ""
"To enable the statement in Python 2.5, you need to add the following "
"directive to your module::"
msgstr ""
"För att aktivera uttalandet i Python 2.5 måste du lägga till följande "
"direktiv i din modul::"

msgid "from __future__ import with_statement"
msgstr "from __future__ import med_uttalande"

msgid "The statement will always be enabled in Python 2.6."
msgstr "Uttalandet kommer alltid att vara aktiverat i Python 2.6."

msgid ""
"Some standard Python objects now support the context management protocol and "
"can be used with the ':keyword:`with`' statement. File objects are one "
"example::"
msgstr ""
"Vissa standard Python-objekt har nu stöd för kontexthanteringsprotokollet "
"och kan användas med ':keyword:`with`'. Filobjekt är ett exempel::"

msgid ""
"with open('/etc/passwd', 'r') as f:\n"
"    for line in f:\n"
"        print line\n"
"        ... more processing code ..."
msgstr ""
"med open('/etc/passwd', 'r') som f:\n"
"    för rad i f:\n"
"        skriv ut rad\n"
"        ... mer bearbetningskod ..."

msgid ""
"After this statement has executed, the file object in *f* will have been "
"automatically closed, even if the :keyword:`for` loop raised an exception "
"part-way through the block."
msgstr ""
"Efter att denna sats har exekverats kommer filobjektet i *f* att ha stängts "
"automatiskt, även om :keyword:`for` -loopen gjorde ett undantag halvvägs "
"genom blocket."

msgid ""
"In this case, *f* is the same object created by :func:`open`, because :meth:"
"`~object.__enter__` returns *self*."
msgstr ""
"I det här fallet är *f* samma objekt som skapades av :func:`open`, eftersom :"
"meth:`~object.__enter__` returnerar *self*."

msgid ""
"The :mod:`threading` module's locks and condition variables  also support "
"the ':keyword:`with`' statement::"
msgstr ""
"Modulen :mod:`threading`:s lås och villkorvariabler stöder också ':keyword:"
"`with`'-satsen::"

msgid ""
"lock = threading.Lock()\n"
"with lock:\n"
"    # Critical section of code\n"
"    ..."
msgstr ""
"lock = threading.Lock()\n"
"med lock:\n"
"    # Kritisk del av koden\n"
"    ..."

msgid ""
"The lock is acquired before the block is executed and always released once  "
"the block is complete."
msgstr ""
"Låset förvärvas innan blocket exekveras och släpps alltid när blocket är "
"klart."

msgid ""
"The new :func:`localcontext` function in the :mod:`decimal` module makes it "
"easy to save and restore the current decimal context, which encapsulates the "
"desired precision and rounding characteristics for computations::"
msgstr ""
"Den nya funktionen :func:`localcontext` i modulen :mod:`decimal` gör det "
"enkelt att spara och återställa den aktuella decimalkontexten, som "
"innehåller önskad precision och avrundningsegenskaper för beräkningar::"

msgid ""
"from decimal import Decimal, Context, localcontext\n"
"\n"
"# Displays with default precision of 28 digits\n"
"v = Decimal('578')\n"
"print v.sqrt()\n"
"\n"
"with localcontext(Context(prec=16)):\n"
"    # All code in this block uses a precision of 16 digits.\n"
"    # The original context is restored on exiting the block.\n"
"    print v.sqrt()"
msgstr ""
"från decimal importera Decimal, Context, localcontext\n"
"\n"
"# Visar med standardprecision på 28 siffror\n"
"v = Decimal('578')\n"
"print v.sqrt()\n"
"\n"
"med localcontext(Context(prec=16)):\n"
"    # All kod i detta block använder en precision på 16 siffror.\n"
"    # Den ursprungliga kontexten återställs när blocket avslutas.\n"
"    skriv ut v.sqrt()"

msgid "Writing Context Managers"
msgstr "Skriva för kontextansvariga"

msgid ""
"Under the hood, the ':keyword:`with`' statement is fairly complicated. Most "
"people will only use ':keyword:`!with`' in company with existing objects and "
"don't need to know these details, so you can skip the rest of this section "
"if you like.  Authors of new objects will need to understand the details of "
"the underlying implementation and should keep reading."
msgstr ""
"Under huven är ':keyword:`with`'-satsen ganska komplicerad. De flesta "
"människor kommer bara att använda ':keyword:`!with`' i samband med "
"befintliga objekt och behöver inte känna till dessa detaljer, så du kan "
"hoppa över resten av det här avsnittet om du vill.  Författare till nya "
"objekt kommer att behöva förstå detaljerna i den underliggande "
"implementationen och bör fortsätta läsa."

msgid "A high-level explanation of the context management protocol is:"
msgstr "En förklaring på hög nivå av protokollet för kontexthantering är:"

msgid ""
"The expression is evaluated and should result in an object called a "
"\"context manager\".  The context manager must have :meth:`~object."
"__enter__` and :meth:`~object.__exit__` methods."
msgstr ""
"Uttrycket utvärderas och bör resultera i ett objekt som kallas \"context "
"manager\".  Kontexthanteraren måste ha metoderna :meth:`~object.__enter__` "
"och :meth:`~object.__exit__`."

msgid ""
"The context manager's :meth:`~object.__enter__` method is called.  The value "
"returned is assigned to *VAR*.  If no ``'as VAR'`` clause is present, the "
"value is simply discarded."
msgstr ""
"Kontexthanterarens metod :meth:`~object.__enter__` anropas.  Det värde som "
"returneras tilldelas *VAR*.  Om ingen ``'as VAR'``-klausul finns, kasseras "
"värdet helt enkelt."

msgid "The code in *BLOCK* is executed."
msgstr "Koden i *BLOCK* utförs."

msgid ""
"If *BLOCK* raises an exception, the ``__exit__(type, value, traceback)`` is "
"called with the exception details, the same values returned by :func:`sys."
"exc_info`.  The method's return value controls whether the exception is re-"
"raised: any false value re-raises the exception, and ``True`` will result in "
"suppressing it.  You'll only rarely want to suppress the exception, because "
"if you do the author of the code containing the ':keyword:`with`' statement "
"will never realize anything went wrong."
msgstr ""
"Om *BLOCK* ger upphov till ett undantag anropas ``__exit__(type, value, "
"traceback)`` med undantagsdetaljerna, samma värden som returneras av :func:"
"`sys.exc_info`.  Metodens returvärde styr om undantaget ska tas upp igen: "
"alla falska värden tar upp undantaget igen, och ``True`` resulterar i att "
"det undertrycks.  Du kommer bara sällan att vilja undertrycka undantaget, "
"för om du gör det kommer författaren till koden som innehåller ':keyword:"
"`with`'-uttalandet aldrig att inse att något gick fel."

msgid ""
"If *BLOCK* didn't raise an exception,  the :meth:`~object.__exit__` method "
"is still called, but *type*, *value*, and *traceback* are all ``None``."
msgstr ""
"Om *BLOCK* inte gav upphov till ett undantag anropas fortfarande metoden :"
"meth:`~object.__exit__`, men *type*, *value* och *traceback* är alla "
"``None``."

msgid ""
"Let's think through an example.  I won't present detailed code but will only "
"sketch the methods necessary for a database that supports transactions."
msgstr ""
"Låt oss tänka igenom ett exempel.  Jag kommer inte att presentera detaljerad "
"kod utan bara skissa på de metoder som krävs för en databas som stöder "
"transaktioner."

msgid ""
"(For people unfamiliar with database terminology: a set of changes to the "
"database are grouped into a transaction.  Transactions can be either "
"committed, meaning that all the changes are written into the database, or "
"rolled back, meaning that the changes are all discarded and the database is "
"unchanged.  See any database textbook for more information.)"
msgstr ""
"(För den som inte är bekant med databasterminologi: en uppsättning ändringar "
"i databasen grupperas i en transaktion.  Transaktioner kan antingen "
"bekräftas, vilket innebär att alla ändringar skrivs in i databasen, eller "
"rullas tillbaka, vilket innebär att alla ändringar tas bort och att "
"databasen är oförändrad.  Se en databasbok för mer information)"

msgid ""
"Let's assume there's an object representing a database connection. Our goal "
"will be to let the user write code like this::"
msgstr ""
"Låt oss anta att det finns ett objekt som representerar en "
"databasanslutning. Vårt mål kommer att vara att låta användaren skriva kod "
"som denna::"

msgid ""
"db_connection = DatabaseConnection()\n"
"with db_connection as cursor:\n"
"    cursor.execute('insert into ...')\n"
"    cursor.execute('delete from ...')\n"
"    # ... more operations ..."
msgstr ""
"db_connection = Databasanslutning()\n"
"med db_connection som cursor:\n"
"    cursor.execute('insert into ...')\n"
"    cursor.execute('ta bort från ...')\n"
"    # ... fler operationer ..."

msgid ""
"The transaction should be committed if the code in the block runs flawlessly "
"or rolled back if there's an exception. Here's the basic interface for :"
"class:`DatabaseConnection` that I'll assume::"
msgstr ""
"Transaktionen bör genomföras om koden i blocket körs felfritt eller rullas "
"tillbaka om det finns ett undantag. Här är det grundläggande gränssnittet "
"för :class:`DatabaseConnection` som jag kommer att anta::"

msgid ""
"class DatabaseConnection:\n"
"    # Database interface\n"
"    def cursor (self):\n"
"        \"Returns a cursor object and starts a new transaction\"\n"
"    def commit (self):\n"
"        \"Commits current transaction\"\n"
"    def rollback (self):\n"
"        \"Rolls back current transaction\""
msgstr ""
"klass DatabaseConnection:\n"
"    # Databasgränssnitt\n"
"    def cursor (self):\n"
"        \"Returnerar ett cursor-objekt och startar en ny transaktion\"\n"
"    def commit (self):\n"
"        \"Commitar aktuell transaktion\"\n"
"    def rollback (self):\n"
"        \"Rullar tillbaka aktuell transaktion\""

msgid ""
"The :meth:`~object.__enter__` method is pretty easy, having only to start a "
"new transaction.  For this application the resulting cursor object would be "
"a useful result, so the method will return it.  The user can then add ``as "
"cursor`` to their ':keyword:`with`' statement to bind the cursor to a "
"variable name. ::"
msgstr ""
"Metoden :meth:`~object.__enter__` är ganska enkel, det räcker med att starta "
"en ny transaktion.  För den här applikationen skulle det resulterande "
"markörobjektet vara ett användbart resultat, så metoden returnerar det.  "
"Användaren kan sedan lägga till ``as cursor`` i sin ':keyword:`with`'-sats "
"för att binda markören till ett variabelnamn. ::"

msgid ""
"class DatabaseConnection:\n"
"    ...\n"
"    def __enter__ (self):\n"
"        # Code to start a new transaction\n"
"        cursor = self.cursor()\n"
"        return cursor"
msgstr ""
"klass DatabaseConnection:\n"
"    ...\n"
"    def __enter__ (self):\n"
"        # Kod för att starta en ny transaktion\n"
"        cursor = self.cursor()\n"
"        returnera cursor"

msgid ""
"The :meth:`~object.__exit__` method is the most complicated because it's "
"where most of the work has to be done.  The method has to check if an "
"exception occurred.  If there was no exception, the transaction is "
"committed.  The transaction is rolled back if there was an exception."
msgstr ""
"Metoden :meth:`~object.__exit__` är den mest komplicerade eftersom det är "
"där det mesta av arbetet måste göras.  Metoden måste kontrollera om ett "
"undantag inträffade.  Om det inte inträffade något undantag genomförs "
"transaktionen.  Transaktionen rullas tillbaka om det inträffade ett undantag."

msgid ""
"In the code below, execution will just fall off the end of the function, "
"returning the default value of ``None``.  ``None`` is false, so the "
"exception will be re-raised automatically.  If you wished, you could be more "
"explicit and add a :keyword:`return` statement at the marked location. ::"
msgstr ""
"I koden nedan kommer exekveringen bara att falla av i slutet av funktionen "
"och returnera standardvärdet ``None``.  ``None`` är falskt, så undantaget "
"kommer att återkallas automatiskt.  Om du vill kan du vara mer explicit och "
"lägga till en :keyword:`return`-sats på den markerade platsen. ::"

msgid ""
"class DatabaseConnection:\n"
"    ...\n"
"    def __exit__ (self, type, value, tb):\n"
"        if tb is None:\n"
"            # No exception, so commit\n"
"            self.commit()\n"
"        else:\n"
"            # Exception occurred, so rollback.\n"
"            self.rollback()\n"
"            # return False"
msgstr ""
"klass DatabaseConnection:\n"
"    ...\n"
"    def __exit__ (self, type, value, tb):\n"
"        om tb är None:\n"
"            # Inget undantag, så commit\n"
"            self.commit()\n"
"        else:\n"
"            # Undantag inträffade, så rollback.\n"
"            self.rollback()\n"
"            # return False"

msgid "The contextlib module"
msgstr "Modulen contextlib"

msgid ""
"The new :mod:`contextlib` module provides some functions and a decorator "
"that are useful for writing objects for use with the ':keyword:`with`' "
"statement."
msgstr ""
"Den nya modulen :mod:`contextlib` innehåller några funktioner och en "
"dekorator som är användbara för att skriva objekt som kan användas med ':"
"keyword:`with`'."

msgid ""
"The decorator is called :func:`contextmanager`, and lets you write a single "
"generator function instead of defining a new class.  The generator should "
"yield exactly one value.  The code up to the :keyword:`yield` will be "
"executed as the :meth:`~object.__enter__` method, and the value yielded will "
"be the method's return value that will get bound to the variable in the ':"
"keyword:`with`' statement's :keyword:`!as` clause, if any.  The code after "
"the :keyword:`yield` will be executed in the :meth:`~object.__exit__` "
"method.  Any exception raised in the block will be raised by the :keyword:`!"
"yield` statement."
msgstr ""
"Dekoratorn heter :func:`contextmanager` och gör att du kan skriva en enda "
"generatorfunktion istället för att definiera en ny klass.  Generatorn ska ge "
"exakt ett värde.  Koden fram till :keyword:`yield` kommer att exekveras som :"
"meth:`~object.__enter__`-metoden, och värdet som genereras kommer att vara "
"metodens returvärde som kommer att bindas till variabeln i ':keyword:`with`'-"
"satsens :keyword:`!as`-klausul, om någon.  Koden efter :keyword:`yield` "
"kommer att exekveras i metoden :meth:`~object.__exit__`.  Alla undantag som "
"uppstår i blocket kommer att uppstå i :keyword:`!yield`-satsen."

msgid ""
"Our database example from the previous section could be written  using this "
"decorator as::"
msgstr ""
"Vårt databasexempel från föregående avsnitt kan skrivas med hjälp av denna "
"dekorator som::"

msgid ""
"from contextlib import contextmanager\n"
"\n"
"@contextmanager\n"
"def db_transaction (connection):\n"
"    cursor = connection.cursor()\n"
"    try:\n"
"        yield cursor\n"
"    except:\n"
"        connection.rollback()\n"
"        raise\n"
"    else:\n"
"        connection.commit()\n"
"\n"
"db = DatabaseConnection()\n"
"with db_transaction(db) as cursor:\n"
"    ..."
msgstr ""
"från contextlib import contextmanager\n"
"\n"
"@kontexthanterare\n"
"def db_transaction (anslutning):\n"
"    cursor = anslutning.cursor()\n"
"    försök:\n"
"        ge cursor\n"
"    except:\n"
"        anslutning.rollback()\n"
"        höja\n"
"    else:\n"
"        anslutning.commit()\n"
"\n"
"db = Databasanslutning()\n"
"med db_transaction(db) som cursor:\n"
"    ..."

msgid ""
"The :mod:`contextlib` module also has a ``nested(mgr1, mgr2, ...)`` function "
"that combines a number of context managers so you don't need to write nested "
"':keyword:`with`' statements.  In this example, the single ':keyword:`!"
"with`' statement both starts a database transaction and acquires a thread "
"lock::"
msgstr ""
"Modulen :mod:`contextlib` har också en funktion ``nested(mgr1, mgr2, ...)`` "
"som kombinerar ett antal kontexthanterare så att du inte behöver skriva "
"nästlade ':keyword:`with`'-satser.  I det här exemplet startar en enda ':"
"keyword:`!with`'-sats både en databastransaktion och förvärvar ett trådlås:"

msgid ""
"lock = threading.Lock()\n"
"with nested (db_transaction(db), lock) as (cursor, locked):\n"
"    ..."
msgstr ""
"lock = threading.Lock()\n"
"med nested (db_transaction(db), lock) som (cursor, locked):\n"
"    ..."

msgid ""
"Finally, the ``closing(object)`` function returns *object* so that it can be "
"bound to a variable, and calls ``object.close`` at the end of the block. ::"
msgstr ""
"Slutligen returnerar funktionen ``closing(object)`` *object* så att det kan "
"bindas till en variabel och anropar ``object.close`` i slutet av blocket. ::"

msgid ""
"import urllib, sys\n"
"from contextlib import closing\n"
"\n"
"with closing(urllib.urlopen('http://www.yahoo.com')) as f:\n"
"    for line in f:\n"
"        sys.stdout.write(line)"
msgstr ""
"import urllib, sys\n"
"from contextlib import closing\n"
"\n"
"with closing(urllib.urlopen('http://www.yahoo.com')) as f:\n"
"    for line in f:\n"
"        sys.stdout.write(line)"

msgid ":pep:`343` - The \"with\" statement"
msgstr ":pep:`343` - Uttalandet \"med\""

msgid ""
"PEP written by Guido van Rossum and Nick Coghlan; implemented by Mike Bland, "
"Guido van Rossum, and Neal Norwitz.  The PEP shows the code generated for a "
"':keyword:`with`' statement, which can be helpful in learning how the "
"statement works."
msgstr ""
"PEP skriven av Guido van Rossum och Nick Coghlan; implementerad av Mike "
"Bland, Guido van Rossum och Neal Norwitz.  PEP:n visar koden som genereras "
"för en ':keyword:`with`'-sats, vilket kan vara till hjälp för att lära sig "
"hur satsen fungerar."

msgid "The documentation  for the :mod:`contextlib` module."
msgstr "Dokumentationen för modulen :mod:`contextlib`."

msgid "PEP 352: Exceptions as New-Style Classes"
msgstr "PEP 352: Undantag som klasser av ny typ"

msgid ""
"Exception classes can now be new-style classes, not just classic classes, "
"and the built-in :exc:`Exception` class and all the standard built-in "
"exceptions (:exc:`NameError`, :exc:`ValueError`, etc.) are now new-style "
"classes."
msgstr ""
"Undantagsklasser kan nu vara klasser av ny typ, inte bara klassiska klasser, "
"och den inbyggda klassen :exc:`Exception` och alla de inbyggda "
"standardundantagen (:exc:`NameError`, :exc:`ValueError`, etc.) är nu klasser "
"av ny typ."

msgid ""
"The inheritance hierarchy for exceptions has been rearranged a bit. In 2.5, "
"the inheritance relationships are::"
msgstr ""
"Arvshierarkin för undantag har omarrangerats en aning. I 2.5 är "
"arvsförhållandena::"

msgid ""
"BaseException       # New in Python 2.5\n"
"|- KeyboardInterrupt\n"
"|- SystemExit\n"
"|- Exception\n"
"   |- (all other current built-in exceptions)"
msgstr ""
"BaseException # Nytt i Python 2.5\n"
"|- KeyboardInterrupt\n"
"|- SystemExit\n"
"|- Undantag\n"
"   |- (alla andra nuvarande inbyggda undantag)"

msgid ""
"This rearrangement was done because people often want to catch all "
"exceptions that indicate program errors.  :exc:`KeyboardInterrupt` and :exc:"
"`SystemExit` aren't errors, though, and usually represent an explicit action "
"such as the user hitting :kbd:`Control-C` or code calling :func:`sys.exit`.  "
"A bare ``except:`` will catch all exceptions, so you commonly need to list :"
"exc:`KeyboardInterrupt` and :exc:`SystemExit` in order to re-raise them.  "
"The usual pattern is::"
msgstr ""
"Denna omorganisering gjordes eftersom människor ofta vill fånga alla "
"undantag som indikerar programfel. :exc:`KeyboardInterrupt` och :exc:"
"`SystemExit` är dock inte fel, och representerar vanligtvis en explicit "
"åtgärd som att användaren trycker på :kbd:`Control-C` eller att koden "
"anropar :func:`sys.exit`.  En ren ``except:`` fångar alla undantag, så du "
"behöver ofta lista :exc:`KeyboardInterrupt` och :exc:`SystemExit` för att "
"kunna ta upp dem igen.  Det vanliga mönstret är::"

msgid ""
"try:\n"
"    ...\n"
"except (KeyboardInterrupt, SystemExit):\n"
"    raise\n"
"except:\n"
"    # Log error...\n"
"    # Continue running program..."
msgstr ""
"försök:\n"
"    ...\n"
"except (KeyboardInterrupt, SystemExit):\n"
"    höja\n"
"utom:\n"
"    # Logga fel ...\n"
"    # Fortsätt köra programmet..."

msgid ""
"In Python 2.5, you can now write ``except Exception`` to achieve the same "
"result, catching all the exceptions that usually indicate errors  but "
"leaving :exc:`KeyboardInterrupt` and :exc:`SystemExit` alone.  As in "
"previous versions, a bare ``except:`` still catches all exceptions."
msgstr ""
"I Python 2.5 kan du nu skriva ``except Exception`` för att uppnå samma "
"resultat, fånga alla undantag som vanligtvis indikerar fel men lämna :exc:"
"`KeyboardInterrupt` och :exc:`SystemExit` ifred.  Precis som i tidigare "
"versioner fångar en ren ``except:`` fortfarande alla undantag."

msgid ""
"The goal for Python 3.0 is to require any class raised as an exception to "
"derive from :exc:`BaseException` or some descendant of :exc:`BaseException`, "
"and future releases in the Python 2.x series may begin to enforce this "
"constraint. Therefore, I suggest you begin making all your exception classes "
"derive from :exc:`Exception` now.  It's been suggested that the bare "
"``except:`` form should be removed in Python 3.0, but Guido van Rossum "
"hasn't decided whether to do this or not."
msgstr ""
"Målet för Python 3.0 är att kräva att alla klasser som tas upp som undantag "
"härstammar från :exc:`BaseException` eller någon ättling till :exc:"
"`BaseException`, och framtida utgåvor i Python 2.x-serien kan börja tillämpa "
"denna begränsning. Därför föreslår jag att du börjar göra alla dina "
"undantagsklasser härledda från :exc:`Exception` nu.  Det har föreslagits att "
"den nakna ``except:``-formen ska tas bort i Python 3.0, men Guido van Rossum "
"har inte bestämt sig för om detta ska göras eller inte."

msgid ""
"Raising of strings as exceptions, as in the statement ``raise \"Error "
"occurred\"``, is deprecated in Python 2.5 and will trigger a warning.  The "
"aim is to be able to remove the string-exception feature in a few releases."
msgstr ""
"Att lyfta strängar som undantag, som i uttalandet ``raise \"Error "
"occurred\"``, är föråldrat i Python 2.5 och kommer att utlösa en varning.  "
"Målet är att kunna ta bort string-exception-funktionen i några utgåvor."

msgid ":pep:`352` - Required Superclass for Exceptions"
msgstr ":pep:`352` - Obligatorisk superklass för undantag"

msgid ""
"PEP written by  Brett Cannon and Guido van Rossum; implemented by Brett "
"Cannon."
msgstr ""
"PEP skriven av Brett Cannon och Guido van Rossum; implementerad av Brett "
"Cannon."

msgid "PEP 353: Using ssize_t as the index type"
msgstr "PEP 353: Använda ssize_t som indextyp"

msgid ""
"A wide-ranging change to Python's C API, using a new  :c:type:`Py_ssize_t` "
"type definition instead of :c:expr:`int`,  will permit the interpreter to "
"handle more data on 64-bit platforms. This change doesn't affect Python's "
"capacity on 32-bit platforms."
msgstr ""
"En omfattande ändring av Pythons C API, där en ny typdefinition :c:type:"
"`Py_ssize_t` används istället för :c:expr:`int`, gör att tolken kan hantera "
"mer data på 64-bitars plattformar. Denna förändring påverkar inte Pythons "
"kapacitet på 32-bitars plattformar."

msgid ""
"Various pieces of the Python interpreter used C's :c:expr:`int` type to "
"store sizes or counts; for example, the number of items in a list or tuple "
"were stored in an :c:expr:`int`.  The C compilers for most 64-bit platforms "
"still define :c:expr:`int` as a 32-bit type, so that meant that lists could "
"only hold up to ``2**31 - 1`` = 2147483647 items. (There are actually a few "
"different programming models that 64-bit C compilers can use -- see https://"
"unix.org/version2/whatsnew/lp64_wp.html for a discussion -- but the most "
"commonly available model leaves :c:expr:`int` as 32 bits.)"
msgstr ""
"Olika delar av Python-tolken använde C:s :c:expr:`int`-typ för att lagra "
"storlekar eller räkningar; till exempel lagrades antalet objekt i en lista "
"eller tupel i en :c:expr:`int`.  C-kompilatorerna för de flesta 64-bitars "
"plattformar definierar fortfarande :c:expr:`int` som en 32-bitars typ, så "
"det innebar att listor bara kunde innehålla upp till ``2**31 - 1`` = "
"2147483647 objekt. (Det finns faktiskt några olika programmeringsmodeller "
"som 64-bitars C-kompilatorer kan använda - se https://unix.org/version2/"
"whatsnew/lp64_wp.html för en diskussion - men den vanligaste modellen "
"lämnar :c:expr:`int` som 32 bitar)"

msgid ""
"A limit of 2147483647 items doesn't really matter on a 32-bit platform "
"because you'll run out of memory before hitting the length limit. Each list "
"item requires space for a pointer, which is 4 bytes, plus space for a :c:"
"type:`PyObject` representing the item.  2147483647\\*4 is already more bytes "
"than a 32-bit address space can contain."
msgstr ""
"En gräns på 2147483647 objekt spelar egentligen ingen roll på en 32-bitars "
"plattform eftersom du får slut på minne innan du når längdgränsen. Varje "
"listobjekt kräver utrymme för en pekare, som är 4 byte, plus utrymme för en :"
"c:type:`PyObject` som representerar objektet.  2147483647\\*4 är redan fler "
"byte än vad ett 32-bitars adressutrymme kan innehålla."

msgid ""
"It's possible to address that much memory on a 64-bit platform, however.  "
"The pointers for a list that size would only require 16 GiB of space, so "
"it's not unreasonable that Python programmers might construct lists that "
"large. Therefore, the Python interpreter had to be changed to use some type "
"other than :c:expr:`int`, and this will be a 64-bit type on 64-bit "
"platforms.  The change will cause incompatibilities on 64-bit machines, so "
"it was deemed worth making the transition now, while the number of 64-bit "
"users is still relatively small. (In 5 or 10 years, we may *all* be on 64-"
"bit machines, and the transition would be more painful then.)"
msgstr ""
"Det är dock möjligt att adressera så mycket minne på en 64-bitars "
"plattform.  Pekarna för en lista av den storleken skulle bara kräva 16 GiB "
"utrymme, så det är inte orimligt att Python-programmerare kan konstruera "
"listor som är så stora. Därför måste Python-tolken ändras så att den "
"använder någon annan typ än :c:expr:`int`, och detta kommer att vara en 64-"
"bitars typ på 64-bitars plattformar.  Ändringen kommer att orsaka "
"inkompatibilitet på 64-bitars maskiner, så det ansågs värt att göra "
"övergången nu, medan antalet 64-bitars användare fortfarande är relativt "
"litet. (Om 5 eller 10 år kanske vi *alla* använder 64-bitars maskiner, och "
"övergången skulle då vara mer smärtsam)"

msgid ""
"This change most strongly affects authors of C extension modules.   Python "
"strings and container types such as lists and tuples  now use :c:type:"
"`Py_ssize_t` to store their size.   Functions such as :c:func:`PyList_Size`  "
"now return :c:type:`Py_ssize_t`.  Code in extension modules may therefore "
"need to have some variables changed to :c:type:`Py_ssize_t`."
msgstr ""
"Denna ändring påverkar främst författare av C-tilläggsmoduler.   Python-"
"strängar och containertyper som listor och tupler använder nu :c:type:"
"`Py_ssize_t` för att lagra sin storlek.   Funktioner som :c:func:"
"`PyList_Size` returnerar nu :c:type:`Py_ssize_t`.  Kod i tilläggsmoduler kan "
"därför behöva få vissa variabler ändrade till :c:type:`Py_ssize_t`."

msgid ""
"The :c:func:`PyArg_ParseTuple` and :c:func:`Py_BuildValue` functions have a "
"new conversion code, ``n``, for :c:type:`Py_ssize_t`.   :c:func:"
"`PyArg_ParseTuple`'s ``s#`` and ``t#`` still output :c:expr:`int` by "
"default, but you can define the macro  :c:macro:`PY_SSIZE_T_CLEAN` before "
"including :file:`Python.h`  to make them return :c:type:`Py_ssize_t`."
msgstr ""
"Funktionerna :c:func:`PyArg_ParseTuple` och :c:func:`Py_BuildValue` har en "
"ny konverteringskod, ``n``, för :c:type:`Py_ssize_t`.   :c:func:"
"`PyArg_ParseTuple` ``s#`` och ``t#`` ger fortfarande ut :c:expr:`int` som "
"standard, men du kan definiera makrot :c:macro:`PY_SSIZE_T_CLEAN` innan du "
"inkluderar :file:`Python.h` för att få dem att returnera :c:type:"
"`Py_ssize_t`."

msgid ""
":pep:`353` has a section on conversion guidelines that  extension authors "
"should read to learn about supporting 64-bit platforms."
msgstr ""
":pep:`353` har ett avsnitt om riktlinjer för konvertering som författare av "
"tillägg bör läsa för att lära sig mer om stöd för 64-bitars plattformar."

msgid ":pep:`353` - Using ssize_t as the index type"
msgstr ":pep:`353` - Använda ssize_t som indextyp"

msgid "PEP written and implemented by Martin von Löwis."
msgstr "PEP skrivet och implementerat av Martin von Löwis."

msgid "PEP 357: The '__index__' method"
msgstr "PEP 357: Metoden \"__index__"

msgid ""
"The NumPy developers had a problem that could only be solved by adding a new "
"special method, :meth:`__index__`.  When using slice notation, as in "
"``[start:stop:step]``, the values of the *start*, *stop*, and *step* indexes "
"must all be either integers or long integers.  NumPy defines a variety of "
"specialized integer types corresponding to unsigned and signed integers of "
"8, 16, 32, and 64 bits, but there was no way to signal that these types "
"could be used as slice indexes."
msgstr ""
"NumPy-utvecklarna hade ett problem som bara kunde lösas genom att lägga till "
"en ny specialmetod, :meth:`__index__`.  När man använder slice-notation, som "
"i ``[start:stop:step]``, måste värdena för indexen *start*, *stop* och "
"*step* alla vara antingen heltal eller långa heltal.  NumPy definierar en "
"mängd specialiserade heltalstyper som motsvarar osignerade och signerade "
"heltal på 8, 16, 32 och 64 bitar, men det fanns inget sätt att signalera att "
"dessa typer kunde användas som slice-index."

msgid ""
"Slicing can't just use the existing :meth:`__int__` method because that "
"method is also used to implement coercion to integers.  If slicing used :"
"meth:`__int__`, floating-point numbers would also become legal slice indexes "
"and that's clearly an undesirable behaviour."
msgstr ""
"Slicing kan inte bara använda den befintliga metoden :meth:`__int__` "
"eftersom den metoden också används för att implementera coercion till "
"heltal.  Om slicing använde :meth:`__int__` skulle även flyttal bli lagliga "
"slice-index och det är helt klart ett oönskat beteende."

msgid ""
"Instead, a new special method called :meth:`__index__` was added.  It takes "
"no arguments and returns an integer giving the slice index to use.  For "
"example::"
msgstr ""
"Istället har en ny specialmetod som heter :meth:`__index__` lagts till.  Den "
"tar inga argument och returnerar ett heltal som anger vilket slice-index som "
"ska användas.  Till exempel::"

msgid ""
"class C:\n"
"    def __index__ (self):\n"
"        return self.value"
msgstr ""
"klass C:\n"
"    def __index__ (self):\n"
"        return self.value"

msgid ""
"The return value must be either a Python integer or long integer. The "
"interpreter will check that the type returned is correct, and raises a :exc:"
"`TypeError` if this requirement isn't met."
msgstr ""
"Returvärdet måste vara antingen ett Python heltal eller ett långt heltal. "
"Tolken kommer att kontrollera att typen som returneras är korrekt, och ger "
"ett :exc:`TypeError` om detta krav inte uppfylls."

msgid ""
"A corresponding :c:member:`~PyNumberMethods.nb_index` slot was added to the "
"C-level :c:type:`PyNumberMethods` structure to let C extensions implement "
"this protocol. ``PyNumber_Index(obj)`` can be used in extension code to call "
"the :meth:`__index__` function and retrieve its result."
msgstr ""
"En motsvarande :c:member:`~PyNumberMethods.nb_index` slot lades till i C-"
"nivå :c:type:`PyNumberMethods` strukturen för att låta C-tillägg "
"implementera detta protokoll. ``PyNumber_Index(obj)`` kan användas i "
"tilläggskod för att anropa funktionen :meth:`__index__` och hämta dess "
"resultat."

msgid ":pep:`357` - Allowing Any Object to be Used for Slicing"
msgstr ":pep:`357` - Tillåter att vilket objekt som helst används för skivning"

msgid "PEP written  and implemented by Travis Oliphant."
msgstr "PEP skrivet och genomfört av Travis Oliphant."

msgid "Other Language Changes"
msgstr "Andra språkliga förändringar"

msgid ""
"Here are all of the changes that Python 2.5 makes to the core Python "
"language."
msgstr "Här är alla ändringar som Python 2.5 gör i kärnan i Python-språket."

msgid ""
"The :class:`dict` type has a new hook for letting subclasses provide a "
"default value when a key isn't contained in the dictionary. When a key isn't "
"found, the dictionary's ``__missing__(key)`` method will be called.  This "
"hook is used to implement the new :class:`defaultdict` class in the :mod:"
"`collections` module.  The following example defines a dictionary  that "
"returns zero for any missing key::"
msgstr ""
"Typen :class:`dict` har en ny krok för att låta underklasser tillhandahålla "
"ett standardvärde när en nyckel inte finns i ordboken. När en nyckel inte "
"hittas anropas dictionariets metod ``__missing__(key)``.  Den här kroken "
"används för att implementera den nya klassen :class:`defaultdict` i modulen :"
"mod:`collections`.  I följande exempel definieras en ordbok som returnerar "
"noll om någon nyckel saknas::"

msgid ""
"class zerodict (dict):\n"
"    def __missing__ (self, key):\n"
"        return 0\n"
"\n"
"d = zerodict({1:1, 2:2})\n"
"print d[1], d[2]   # Prints 1, 2\n"
"print d[3], d[4]   # Prints 0, 0"
msgstr ""
"klass zerodict (dikt):\n"
"    def __missing__ (self, key):\n"
"        return 0\n"
"\n"
"d = zerodict({1:1, 2:2})\n"
"print d[1], d[2] # Skriver ut 1, 2\n"
"print d[3], d[4] # Skriver ut 0, 0"

msgid ""
"Both 8-bit and Unicode strings have new ``partition(sep)``  and "
"``rpartition(sep)`` methods that simplify a common use case."
msgstr ""
"Både 8-bitars och Unicode-strängar har nya ``partition(sep)`` och "
"``rpartition(sep)`` metoder som förenklar ett vanligt användningsfall."

msgid ""
"The ``find(S)`` method is often used to get an index which is then used to "
"slice the string and obtain the pieces that are before and after the "
"separator. ``partition(sep)`` condenses this pattern into a single method "
"call that returns a 3-tuple containing the substring before the separator, "
"the separator itself, and the substring after the separator.  If the "
"separator isn't found, the first element of the tuple is the entire string "
"and the other two elements are empty.  ``rpartition(sep)`` also returns a 3-"
"tuple but starts searching from the end of the string; the ``r`` stands for "
"'reverse'."
msgstr ""
"Metoden ``find(S)`` används ofta för att få ett index som sedan används för "
"att skära upp strängen och få de delar som finns före och efter separatorn. "
"``partition(sep)`` kondenserar det här mönstret till ett enda metodanrop som "
"returnerar en 3-tupel som innehåller delsträngen före separatorn, själva "
"separatorn och delsträngen efter separatorn.  Om separatorn inte hittas är "
"det första elementet i tupeln hela strängen och de andra två elementen är "
"tomma.  ``rpartition(sep)`` returnerar också en 3-tupel men börjar söka från "
"slutet av strängen; ``r`` står för \"reverse\" (omvänd)."

msgid "Some examples::"
msgstr "Några exempel::"

msgid ""
">>> ('http://www.python.org').partition('://')\n"
"('http', '://', 'www.python.org')\n"
">>> ('file:/usr/share/doc/index.html').partition('://')\n"
"('file:/usr/share/doc/index.html', '', '')\n"
">>> (u'Subject: a quick question').partition(':')\n"
"(u'Subject', u':', u' a quick question')\n"
">>> 'www.python.org'.rpartition('.')\n"
"('www.python', '.', 'org')\n"
">>> 'www.python.org'.rpartition(':')\n"
"('', '', 'www.python.org')"
msgstr ""
">>> ('http://www.python.org').partition('://')\n"
"('http', '://', 'www.python.org')\n"
">>> ('file:/usr/share/doc/index.html').partition('://')\n"
"('file:/usr/share/doc/index.html', '', '')\n"
">>> (u'Ämne: en snabb fråga').partition(':')\n"
"(u'Ämne', u':', u' en snabb fråga')\n"
">>> 'www.python.org'.rpartition('.')\n"
"('www.python', '.', 'org')\n"
">>> 'www.python.org'.rpartition(':')\n"
"('', '', 'www.python.org')"

msgid ""
"(Implemented by Fredrik Lundh following a suggestion by Raymond Hettinger.)"
msgstr ""
"(Implementerat av Fredrik Lundh efter ett förslag av Raymond Hettinger)"

msgid ""
"The :meth:`startswith` and :meth:`endswith` methods of string types now "
"accept tuples of strings to check for. ::"
msgstr ""
"Metoderna :meth:`startswith` och :meth:`endswith` för strängtyper accepterar "
"nu tuples av strängar att kontrollera för. ::"

msgid ""
"def is_image_file (filename):\n"
"    return filename.endswith(('.gif', '.jpg', '.tiff'))"
msgstr ""
"def is_image_file (filnamn):\n"
"    return filnamn.endswith(('.gif', '.jpg', '.tiff'))"

msgid "(Implemented by Georg Brandl following a suggestion by Tom Lynn.)"
msgstr "(Implementerat av Georg Brandl efter ett förslag av Tom Lynn.)"

msgid ""
"The :func:`min` and :func:`max` built-in functions gained a ``key`` keyword "
"parameter analogous to the ``key`` argument for :meth:`sort`.  This "
"parameter supplies a function that takes a single argument and is called for "
"every value in the list; :func:`min`/:func:`max` will return the element "
"with the smallest/largest return value from this function. For example, to "
"find the longest string in a list, you can do::"
msgstr ""
"De inbyggda funktionerna :func:`min` och :func:`max` har fått en "
"nyckelordsparameter ``key`` som är analog med argumentet ``key`` för :meth:"
"`sort`.  Denna parameter tillhandahåller en funktion som tar ett enda "
"argument och anropas för varje värde i listan; :func:`min`/:func:`max` "
"returnerar elementet med det minsta/största returvärdet från denna funktion. "
"Om du till exempel vill hitta den längsta strängen i en lista kan du göra så "
"här::"

msgid ""
"L = ['medium', 'longest', 'short']\n"
"# Prints 'longest'\n"
"print max(L, key=len)\n"
"# Prints 'short', because lexicographically 'short' has the largest value\n"
"print max(L)"
msgstr ""
"L = ['medium', 'longest', 'short']\n"
"# Skriver ut 'längsta'\n"
"print max(L, nyckel=len)\n"
"# Skriver ut 'short', eftersom 'short' lexikografiskt sett har det största "
"värdet\n"
"print max(L)"

msgid "(Contributed by Steven Bethard and Raymond Hettinger.)"
msgstr "(Bidrag från Steven Bethard och Raymond Hettinger.)"

msgid ""
"Two new built-in functions, :func:`any` and :func:`all`, evaluate whether an "
"iterator contains any true or false values.  :func:`any` returns :const:"
"`True` if any value returned by the iterator is true; otherwise it will "
"return :const:`False`.  :func:`all` returns :const:`True` only if all of the "
"values returned by the iterator evaluate as true. (Suggested by Guido van "
"Rossum, and implemented by Raymond Hettinger.)"
msgstr ""
"Två nya inbyggda funktioner, :func:`any` och :func:`all`, utvärderar om en "
"iterator innehåller några sanna eller falska värden. :func:`any` returnerar :"
"const:`True` om något värde som returneras av iteratorn är sant; annars "
"returnerar den :const:`False`. :func:`all` returnerar :const:`True` endast "
"om alla värden som returneras av iteratorn utvärderas som sanna. (Föreslagen "
"av Guido van Rossum, och implementerad av Raymond Hettinger.)"

msgid ""
"The result of a class's :meth:`__hash__` method can now be either a long "
"integer or a regular integer.  If a long integer is returned, the hash of "
"that value is taken.  In earlier versions the hash value was required to be "
"a regular integer, but in 2.5 the :func:`id` built-in was changed to always "
"return non-negative numbers, and users often seem to use ``id(self)`` in :"
"meth:`__hash__` methods (though this is discouraged)."
msgstr ""
"Resultatet av en klass :meth:`__hash__`-metod kan nu vara antingen ett långt "
"heltal eller ett vanligt heltal.  Om ett långt heltal returneras tas "
"hashvärdet för det värdet.  I tidigare versioner krävdes det att hashvärdet "
"var ett vanligt heltal, men i 2.5 ändrades :func:`id` inbyggd så att den "
"alltid returnerar icke-negativa tal, och användare verkar ofta använda "
"``id(self)`` i :meth:`__hash__`-metoder (även om detta avråds)."

msgid ""
"ASCII is now the default encoding for modules.  It's now  a syntax error if "
"a module contains string literals with 8-bit characters but doesn't have an "
"encoding declaration.  In Python 2.4 this triggered a warning, not a syntax "
"error.  See :pep:`263`  for how to declare a module's encoding; for example, "
"you might add  a line like this near the top of the source file::"
msgstr ""
"ASCII är nu standardkodning för moduler.  Det är nu ett syntaxfel om en "
"modul innehåller stränglitteraler med 8-bitars tecken men inte har en "
"kodningsdeklaration.  I Python 2.4 utlöste detta en varning, inte ett "
"syntaxfel.  Se :pep:`263` för hur man deklarerar en moduls kodning; till "
"exempel kan du lägga till en rad som denna längst upp i källfilen::"

msgid "# -*- coding: latin1 -*-"
msgstr "# -*- kodning: latin1 -*-"

msgid ""
"A new warning, :class:`UnicodeWarning`, is triggered when  you attempt to "
"compare a Unicode string and an 8-bit string  that can't be converted to "
"Unicode using the default ASCII encoding.   The result of the comparison is "
"false::"
msgstr ""
"En ny varning, :class:`UnicodeWarning`, utlöses när du försöker jämföra en "
"Unicode-sträng med en 8-bitarssträng som inte kan konverteras till Unicode "
"med standardkodningen ASCII.   Resultatet av jämförelsen är false::"

msgid ""
">>> chr(128) == unichr(128)   # Can't convert chr(128) to Unicode\n"
"__main__:1: UnicodeWarning: Unicode equal comparison failed\n"
"  to convert both arguments to Unicode - interpreting them\n"
"  as being unequal\n"
"False\n"
">>> chr(127) == unichr(127)   # chr(127) can be converted\n"
"True"
msgstr ""
">>> chr(128) == unichr(128) # Kan inte konvertera chr(128) till Unicode\n"
"__main__:1: UnicodeWarning: Jämförelse av Unicode-likheter misslyckades\n"
"  att konvertera båda argumenten till Unicode - tolkar dem\n"
"  som att de var ojämlika\n"
"Falsk\n"
">>> chr(127) == unichr(127) # chr(127) kan konverteras\n"
"Sant"

msgid ""
"Previously this would raise a :class:`UnicodeDecodeError` exception, but in "
"2.5 this could result in puzzling problems when accessing a dictionary.  If "
"you looked up ``unichr(128)`` and ``chr(128)`` was being used as a key, "
"you'd get a :class:`UnicodeDecodeError` exception.  Other changes in 2.5 "
"resulted in this exception being raised instead of suppressed by the code "
"in :file:`dictobject.c` that implements dictionaries."
msgstr ""
"Tidigare skulle detta ge upphov till ett :class:`UnicodeDecodeError`-"
"undantag, men i 2.5 kunde detta resultera i förbryllande problem vid åtkomst "
"till en ordbok.  Om du slog upp ``unichr(128)`` och ``chr(128)`` användes "
"som nyckel, skulle du få ett :class:`UnicodeDecodeError`-undantag.  Andra "
"ändringar i 2.5 resulterade i att detta undantag togs upp istället för att "
"undertryckas av koden i :file:`dictobject.c` som implementerar dictionaries."

msgid ""
"Raising an exception for such a comparison is strictly correct, but the "
"change might have broken code, so instead  :class:`UnicodeWarning` was "
"introduced."
msgstr ""
"Att skapa ett undantag för en sådan jämförelse är helt korrekt, men "
"ändringen kan ha brutit kod, så istället infördes :class:`UnicodeWarning`."

msgid "(Implemented by Marc-André Lemburg.)"
msgstr "(Implementerad av Marc-André Lemburg.)"

msgid ""
"One error that Python programmers sometimes make is forgetting to include "
"an :file:`__init__.py` module in a package directory. Debugging this mistake "
"can be confusing, and usually requires running Python with the :option:`-v` "
"switch to log all the paths searched. In Python 2.5, a new :exc:"
"`ImportWarning` warning is triggered when an import would have picked up a "
"directory as a package but no :file:`__init__.py` was found.  This warning "
"is silently ignored by default; provide the :option:`-Wd <-W>` option when "
"running the Python executable to display the warning message. (Implemented "
"by Thomas Wouters.)"
msgstr ""
"Ett fel som Python-programmerare ibland gör är att glömma att inkludera en :"
"file:`__init__.py`-modul i en paketkatalog. Att felsöka detta misstag kan "
"vara förvirrande och kräver vanligtvis att Python körs med :option:`-v` för "
"att logga alla sökvägar. I Python 2.5 utlöses en ny :exc:`ImportWarning`-"
"varning när en import skulle ha hämtat en katalog som ett paket men ingen :"
"file:`__init__.py` hittades.  Denna varning ignoreras tyst som standard; "
"ange alternativet :option:`-Wd <-W>` när du kör den körbara Python-filen för "
"att visa varningsmeddelandet. (Implementerad av Thomas Wouters.)"

msgid ""
"The list of base classes in a class definition can now be empty.   As an "
"example, this is now legal::"
msgstr ""
"Listan över basklasser i en klassdefinition kan nu vara tom.   Som ett "
"exempel är detta nu lagligt::"

msgid ""
"class C():\n"
"    pass"
msgstr ""
"klass C():\n"
"    pass"

msgid "(Implemented by Brett Cannon.)"
msgstr "(Implementerat av Brett Cannon.)"

msgid "Interactive Interpreter Changes"
msgstr "Förändringar för interaktiv tolk"

msgid ""
"In the interactive interpreter, ``quit`` and ``exit``  have long been "
"strings so that new users get a somewhat helpful message when they try to "
"quit::"
msgstr ""
"I den interaktiva tolken har ``quit`` och ``exit`` länge varit strängar så "
"att nya användare får ett något hjälpsamt meddelande när de försöker "
"avsluta::"

msgid ""
">>> quit\n"
"'Use Ctrl-D (i.e. EOF) to exit.'"
msgstr ""
">>> Avsluta\n"
"\"Använd Ctrl-D (dvs. EOF) för att avsluta"

msgid ""
"In Python 2.5, ``quit`` and ``exit`` are now objects that still produce "
"string representations of themselves, but are also callable. Newbies who try "
"``quit()`` or ``exit()`` will now exit the interpreter as they expect.  "
"(Implemented by Georg Brandl.)"
msgstr ""
"I Python 2.5 är ``quit`` och ``exit`` nu objekt som fortfarande producerar "
"strängrepresentationer av sig själva, men som också är anropsbara. Nybörjare "
"som försöker ``quit()`` eller ``exit()`` kommer nu att avsluta tolken som de "
"förväntar sig.  (Implementerat av Georg Brandl.)"

msgid ""
"The Python executable now accepts the standard long options  :option:`--"
"help` and :option:`--version`; on Windows,  it also accepts the :option:`/? "
"<-?>` option for displaying a help message. (Implemented by Georg Brandl.)"
msgstr ""
"Den körbara Python-filen accepterar nu de långa standardalternativen :option:"
"`--help` och :option:`--version`; på Windows accepterar den även "
"alternativet :option:`/? <-?>` för att visa ett hjälpmeddelande. "
"(Implementerat av Georg Brandl.)"

msgid "Optimizations"
msgstr "Optimeringar"

msgid ""
"Several of the optimizations were developed at the NeedForSpeed sprint, an "
"event held in Reykjavik, Iceland, from May 21--28 2006. The sprint focused "
"on speed enhancements to the CPython implementation and was funded by EWT "
"LLC with local support from CCP Games.  Those optimizations added at this "
"sprint are specially marked in the following list."
msgstr ""
"Flera av optimeringarna utvecklades vid NeedForSpeed-sprinten, ett evenemang "
"som hölls i Reykjavik, Island, 21-28 maj 2006. Sprinten fokuserade på "
"hastighetsförbättringar av CPython-implementeringen och finansierades av EWT "
"LLC med lokalt stöd från CCP Games.  De optimeringar som lades till vid "
"denna sprint är särskilt markerade i följande lista."

msgid ""
"When they were introduced  in Python 2.4, the built-in :class:`set` and :"
"class:`frozenset` types were built on top of Python's dictionary type.   In "
"2.5 the internal data structure has been customized for implementing sets, "
"and as a result sets will use a third less memory and are somewhat faster. "
"(Implemented by Raymond Hettinger.)"
msgstr ""
"När de introducerades i Python 2.4 byggdes de inbyggda typerna :class:`set` "
"och :class:`frozenset` ovanpå Pythons dictionary-typ.   I 2.5 har den "
"interna datastrukturen anpassats för att implementera set, och som ett "
"resultat kommer set att använda en tredjedel mindre minne och är något "
"snabbare. (Implementerat av Raymond Hettinger.)"

msgid ""
"The speed of some Unicode operations, such as finding substrings, string "
"splitting, and character map encoding and decoding, has been improved. "
"(Substring search and splitting improvements were added by Fredrik Lundh and "
"Andrew Dalke at the NeedForSpeed sprint. Character maps were improved by "
"Walter Dörwald and Martin von Löwis.)"
msgstr ""
"Hastigheten för vissa Unicode-operationer, som att hitta substrängar, "
"strängdelning och kodning och avkodning av teckenkartor, har förbättrats. "
"(Förbättringar av sökning och delning av delsträngar lades till av Fredrik "
"Lundh och Andrew Dalke vid NeedForSpeed-sprintet. Teckenkartor förbättrades "
"av Walter Dörwald och Martin von Löwis)"

msgid ""
"The ``long(str, base)`` function is now faster on long digit strings because "
"fewer intermediate results are calculated.  The peak is for strings of "
"around 800--1000 digits where  the function is 6 times faster. (Contributed "
"by Alan McIntyre and committed at the NeedForSpeed sprint.)"
msgstr ""
"Funktionen ``long(str, base)`` är nu snabbare på långa siffersträngar "
"eftersom färre mellanresultat beräknas.  Toppen är för strängar med cirka "
"800--1000 siffror där funktionen är 6 gånger snabbare. (Bidrag från Alan "
"McIntyre och utfört vid NeedForSpeed-sprinten.)"

msgid ""
"It's now illegal to mix iterating over a file  with ``for line in file`` and "
"calling  the file object's :meth:`read`/:meth:`readline`/:meth:`readlines` "
"methods.  Iteration uses an internal buffer and the  :meth:`!read\\*` "
"methods don't use that buffer.   Instead they would return the data "
"following the buffer, causing the data to appear out of order.  Mixing "
"iteration and these methods will now trigger a :exc:`ValueError` from the :"
"meth:`!read\\*` method. (Implemented by Thomas Wouters.)"
msgstr ""
"Det är nu olagligt att blanda iteration över en fil med ``for line in file`` "
"och anrop av filobjektets :meth:`read`/:meth:`readline`/:meth:`readlines`-"
"metoder.  Iteration använder en intern buffert och metoderna :meth:`!"
"read\\*` använder inte den bufferten.   Istället skulle de returnera data "
"som följer efter bufferten, vilket gör att data visas i fel ordning.  Att "
"blanda iteration och dessa metoder kommer nu att utlösa ett :exc:"
"`ValueError` från metoden :meth:`!read\\*`. (Implementerad av Thomas "
"Wouters.)"

msgid ""
"The :mod:`struct` module now compiles structure format  strings into an "
"internal representation and caches this representation, yielding a 20% "
"speedup. (Contributed by Bob Ippolito at the NeedForSpeed sprint.)"
msgstr ""
"Modulen :mod:`struct` sammanställer nu strängar i strukturformat till en "
"intern representation och cachar denna representation, vilket ger en 20% "
"speedup. (Bidrag från Bob Ippolito vid NeedForSpeed-sprinten.)"

msgid ""
"The :mod:`re` module got a 1 or 2% speedup by switching to  Python's "
"allocator functions instead of the system's  :c:func:`malloc` and :c:func:"
"`free`. (Contributed by Jack Diederich at the NeedForSpeed sprint.)"
msgstr ""
"Modulen :mod:`re` fick en 1 eller 2% speedup genom att byta till Pythons "
"allokeringsfunktioner istället för systemets :c:func:`malloc` och :c:func:"
"`free`. (Bidrag från Jack Diederich vid NeedForSpeed-sprinten.)"

msgid ""
"The code generator's peephole optimizer now performs simple constant folding "
"in expressions.  If you write something like ``a = 2+3``, the code generator "
"will do the arithmetic and produce code corresponding to ``a = 5``.  "
"(Proposed and implemented  by Raymond Hettinger.)"
msgstr ""
"Kodgeneratorns peephole-optimerare utför nu enkel konstantvikning i "
"uttryck.  Om du skriver något i stil med ``a = 2+3`` kommer kodgeneratorn "
"att göra uträkningen och producera kod som motsvarar ``a = 5``.  (Föreslagen "
"och implementerad av Raymond Hettinger.)"

msgid ""
"Function calls are now faster because code objects now keep  the most "
"recently finished frame (a \"zombie frame\") in an internal field of the "
"code object, reusing it the next time the code object is invoked.  (Original "
"patch by Michael Hudson, modified by Armin Rigo and Richard Jones; committed "
"at the NeedForSpeed sprint.)  Frame objects are also slightly smaller, which "
"may improve cache locality and reduce memory usage a bit.  (Contributed by "
"Neal Norwitz.)"
msgstr ""
"Funktionsanrop är nu snabbare eftersom kodobjekt nu behåller den senast "
"avslutade ramen (en \"zombieram\") i ett internt fält i kodobjektet och "
"återanvänder den nästa gång kodobjektet anropas.  (Ursprunglig patch av "
"Michael Hudson, modifierad av Armin Rigo och Richard Jones; utförd vid "
"NeedForSpeed-sprinten.)  Frame-objekten är också något mindre, vilket kan "
"förbättra cachelokaliteten och minska minnesanvändningen något.  (Bidrag "
"från Neal Norwitz.)"

msgid ""
"Python's built-in exceptions are now new-style classes, a change that speeds "
"up instantiation considerably.  Exception handling in Python 2.5 is "
"therefore about 30% faster than in 2.4. (Contributed by Richard Jones, Georg "
"Brandl and Sean Reifschneider at the NeedForSpeed sprint.)"
msgstr ""
"Pythons inbyggda undantag är nu new-style classes, en förändring som snabbar "
"upp instantiering avsevärt.  Undantagshanteringen i Python 2.5 är därför "
"ungefär 30% fsnabbare än i 2.4. (Bidrag från Richard Jones, Georg Brandl och "
"Sean Reifschneider vid NeedForSpeed-sprinten.)"

msgid ""
"Importing now caches the paths tried, recording whether  they exist or not "
"so that the interpreter makes fewer  :c:func:`open` and :c:func:`stat` calls "
"on startup. (Contributed by Martin von Löwis and Georg Brandl.)"
msgstr ""
"Importering cachar nu de sökvägar som prövas och registrerar om de finns "
"eller inte så att tolken gör färre :c:func:`open`- och :c:func:`stat`-anrop "
"vid start. (Bidrag från Martin von Löwis och Georg Brandl.)"

msgid "New, Improved, and Removed Modules"
msgstr "Nya, förbättrade och borttagna moduler"

msgid ""
"The standard library received many enhancements and bug fixes in Python 2.5. "
"Here's a partial list of the most notable changes, sorted alphabetically by "
"module name. Consult the :file:`Misc/NEWS` file in the source tree for a "
"more complete list of changes, or look through the SVN logs for all the "
"details."
msgstr ""
"Standardbiblioteket fick många förbättringar och buggfixar i Python 2.5. Här "
"är en partiell lista över de mest anmärkningsvärda ändringarna, sorterade "
"alfabetiskt efter modulnamn. Se filen :file:`Misc/NEWS` i källträdet för en "
"mer komplett lista över ändringar, eller titta igenom SVN-loggarna för alla "
"detaljer."

msgid ""
"The :mod:`!audioop` module now supports the a-LAW encoding, and the code for "
"u-LAW encoding has been improved.  (Contributed by Lars Immisch.)"
msgstr ""
"Modulen :mod:`!audioop` har nu stöd för a-LAW-kodning och koden för u-LAW-"
"kodning har förbättrats.  (Bidrag från Lars Immisch.)"

msgid ""
"The :mod:`codecs` module gained support for incremental codecs.  The :func:"
"`codec.lookup` function now returns a :class:`CodecInfo` instance instead of "
"a tuple. :class:`CodecInfo` instances behave like a 4-tuple to preserve "
"backward compatibility but also have the attributes :attr:`encode`, :attr:"
"`decode`, :attr:`incrementalencoder`, :attr:`incrementaldecoder`, :attr:"
"`streamwriter`, and :attr:`streamreader`.  Incremental codecs  can receive "
"input and produce output in multiple chunks; the output is the same as if "
"the entire input was fed to the non-incremental codec. See the :mod:`codecs` "
"module documentation for details. (Designed and implemented by Walter "
"Dörwald.)"
msgstr ""
"Modulen :mod:`codecs` har fått stöd för inkrementella codecs.  Funktionen :"
"func:`codec.lookup` returnerar nu en :class:`CodecInfo`-instans istället för "
"en tupel. :class:`CodecInfo`-instanser beter sig som en 4-tupel för att "
"bevara bakåtkompatibilitet men har också attributen :attr:`encode`, :attr:"
"`decode`, :attr:`incrementalencoder`, :attr:`incrementaldecoder`, :attr:"
"`streamwriter` och :attr:`streamreader`.  Inkrementella codecs kan ta emot "
"indata och producera utdata i flera delar; utdata är samma som om hela "
"indata hade matats till en icke-inkrementell codec. Se dokumentationen för "
"modulen :mod:`codecs` för mer information. (Designad och implementerad av "
"Walter Dörwald.)"

msgid ""
"The :mod:`collections` module gained a new type, :class:`defaultdict`, that "
"subclasses the standard :class:`dict` type.  The new type mostly behaves "
"like a dictionary but constructs a default value when a key isn't present, "
"automatically adding it to the dictionary for the requested key value."
msgstr ""
"Modulen :mod:`collections` har fått en ny typ, :class:`defaultdict`, som är "
"en underklass till standardtypen :class:`dict`.  Den nya typen beter sig "
"mestadels som en ordbok men konstruerar ett standardvärde när en nyckel inte "
"finns, och lägger automatiskt till det i ordboken för det begärda "
"nyckelvärdet."

msgid ""
"The first argument to :class:`defaultdict`'s constructor is a factory "
"function that gets called whenever a key is requested but not found. This "
"factory function receives no arguments, so you can use built-in type "
"constructors such as :func:`list` or :func:`int`.  For example,  you can "
"make an index of words based on their initial letter like this::"
msgstr ""
"Det första argumentet till :class:`defaultdict`:s konstruktör är en "
"fabriksfunktion som anropas när en nyckel begärs men inte hittas. Denna "
"fabriksfunktion tar inte emot några argument, så du kan använda inbyggda "
"typkonstruktörer som :func:`list` eller :func:`int`.  Du kan t.ex. skapa ett "
"index över ord baserat på deras begynnelsebokstav på följande sätt::"

msgid ""
"words = \"\"\"Nel mezzo del cammin di nostra vita\n"
"mi ritrovai per una selva oscura\n"
"che la diritta via era smarrita\"\"\".lower().split()\n"
"\n"
"index = defaultdict(list)\n"
"\n"
"for w in words:\n"
"    init_letter = w[0]\n"
"    index[init_letter].append(w)"
msgstr ""
"words = \"\"\"Nel mezzo del cammin di nostra vita\n"
"min ritrovai per una selva oscura\n"
"som jag inte hade en aning om\"\"\".lower().split()\n"
"\n"
"index = defaultdict(lista)\n"
"\n"
"för w i ord:\n"
"    init_letter = w[0]\n"
"    index[init_letter].append(w)"

msgid "Printing ``index`` results in the following output::"
msgstr "Utskrift av ``index`` resulterar i följande utdata::"

msgid ""
"defaultdict(<type 'list'>, {'c': ['cammin', 'che'], 'e': ['era'],\n"
"        'd': ['del', 'di', 'diritta'], 'm': ['mezzo', 'mi'],\n"
"        'l': ['la'], 'o': ['oscura'], 'n': ['nel', 'nostra'],\n"
"        'p': ['per'], 's': ['selva', 'smarrita'],\n"
"        'r': ['ritrovai'], 'u': ['una'], 'v': ['vita', 'via']}"
msgstr ""
"defaultdict(<type 'list'>, {'c': ['cammin', 'che'], 'e': ['era'],\n"
"        'd': ['del', 'di', 'diritta'], 'm': ['mezzo', 'mi'],\n"
"        'l': [\"la\"], \"o\": [\"oscura\"], \"n\": [\"nel\", \"nostra\"],\n"
"        'p': [\"per\"], \"s\": [\"selva\", \"smarrita\"],\n"
"        'r': [\"ritrovai\"], \"u\": [\"una\"], \"v\": [\"vita\", \"via\"]}"

msgid "(Contributed by Guido van Rossum.)"
msgstr "(Bidrag från Guido van Rossum.)"

msgid ""
"The :class:`deque` double-ended queue type supplied by the :mod:"
"`collections` module now has a ``remove(value)`` method that removes the "
"first occurrence of *value* in the queue, raising :exc:`ValueError` if the "
"value isn't found. (Contributed by Raymond Hettinger.)"
msgstr ""
"Den dubbelsidiga kötypen :class:`deque` som tillhandahålls av modulen :mod:"
"`collections` har nu en metod ``remove(value)`` som tar bort den första "
"förekomsten av *värde* i kön och ger upphov till :exc:`ValueError` om värdet "
"inte hittas. (Bidrag från Raymond Hettinger.)"

msgid ""
"New module: The :mod:`contextlib` module contains helper functions for use "
"with the new ':keyword:`with`' statement.  See section :ref:`contextlibmod` "
"for more about this module."
msgstr ""
"Ny modul: Modulen :mod:`contextlib` innehåller hjälpfunktioner för "
"användning med den nya ':keyword:`with`'-satsen.  Se avsnitt :ref:"
"`contextlibmod` för mer information om denna modul."

msgid ""
"New module: The :mod:`cProfile` module is a C implementation of  the "
"existing :mod:`profile` module that has much lower overhead. The module's "
"interface is the same as :mod:`profile`: you run ``cProfile.run('main()')`` "
"to profile a function, can save profile data to a file, etc.  It's not yet "
"known if the Hotshot profiler, which is also written in C but doesn't match "
"the :mod:`profile` module's interface, will continue to be maintained in "
"future versions of Python.  (Contributed by Armin Rigo.)"
msgstr ""
"Ny modul: Modulen :mod:`cProfile` är en C-implementering av den befintliga "
"modulen :mod:`profile` som har mycket lägre overhead. Modulens gränssnitt är "
"detsamma som :mod:`profile`: du kör ``cProfile.run('main()')`` för att "
"profilera en funktion, kan spara profildata till en fil, etc.  Det är ännu "
"inte känt om Hotshot-profileraren, som också är skriven i C men inte "
"matchar :mod:`profile`-modulens gränssnitt, kommer att fortsätta att "
"underhållas i framtida versioner av Python.  (Bidrag från Armin Rigo.)"

msgid ""
"Also, the :mod:`pstats` module for analyzing the data measured by the "
"profiler now supports directing the output to any file object by supplying a "
"*stream* argument to the :class:`Stats` constructor. (Contributed by Skip "
"Montanaro.)"
msgstr ""
"Modulen :mod:`pstats` för analys av data som uppmätts av profileraren stöder "
"nu också styrning av utdata till valfritt filobjekt genom att tillhandahålla "
"ett *stream*-argument till konstruktören :class:`Stats`. (Bidrag från Skip "
"Montanaro.)"

msgid ""
"The :mod:`csv` module, which parses files in comma-separated value format, "
"received several enhancements and a number of bugfixes.  You can now set the "
"maximum size in bytes of a field by calling the ``csv."
"field_size_limit(new_limit)`` function; omitting the *new_limit* argument "
"will return the currently set limit.  The :class:`reader` class now has a :"
"attr:`line_num` attribute that counts the number of physical lines read from "
"the source; records can span multiple physical lines, so :attr:`line_num` is "
"not the same as the number of records read."
msgstr ""
"Modulen :mod:`csv`, som analyserar filer i formatet kommaseparerade värden, "
"har fått flera förbättringar och ett antal buggfixar.  Du kan nu ange den "
"maximala storleken i byte för ett fält genom att anropa funktionen ``csv."
"field_size_limit(new_limit)``; om du utelämnar argumentet *new_limit* "
"returneras den aktuella gränsen.  Klassen :class:`reader` har nu ett "
"attribut :attr:`line_num` som räknar antalet fysiska rader som lästs från "
"källan; poster kan sträcka sig över flera fysiska rader, så :attr:`line_num` "
"är inte detsamma som antalet lästa poster."

msgid ""
"The CSV parser is now stricter about multi-line quoted fields. Previously, "
"if a line ended within a quoted field without a terminating newline "
"character, a newline would be inserted into the returned field. This "
"behavior caused problems when reading files that contained carriage return "
"characters within fields, so the code was changed to return the field "
"without inserting newlines. As a consequence, if newlines embedded within "
"fields are important, the input should be split into lines in a manner that "
"preserves the newline characters."
msgstr ""
"CSV-parsern är nu striktare när det gäller citerade fält med flera rader. "
"Tidigare, om en rad slutade inom ett citerat fält utan ett avslutande ny rad-"
"tecken, skulle en ny rad infogas i det returnerade fältet. Detta beteende "
"orsakade problem vid läsning av filer som innehöll vagnreturtecken i fälten, "
"så koden ändrades så att fältet returnerades utan att nya rader infogades. "
"Detta innebär att om det är viktigt med nya rader inbäddade i fält, bör "
"inmatningen delas upp i rader på ett sätt som bevarar de nya raderna."

msgid "(Contributed by Skip Montanaro and Andrew McNamara.)"
msgstr "(Bidrag från Skip Montanaro och Andrew McNamara.)"

msgid ""
"The :class:`~datetime.datetime` class in the :mod:`datetime`  module now has "
"a ``strptime(string, format)``  method for parsing date strings, contributed "
"by Josh Spoerri. It uses the same format characters as :func:`time.strptime` "
"and :func:`time.strftime`::"
msgstr ""
"Klassen :class:`~datetime.datetime` i modulen :mod:`datetime` har nu en "
"``strptime(string, format)``-metod för parsning av datumsträngar, bidrag "
"från Josh Spoerri. Den använder samma formattecken som :func:`time.strptime` "
"och :func:`time.strftime`::"

msgid ""
"from datetime import datetime\n"
"\n"
"ts = datetime.strptime('10:13:15 2006-03-07',\n"
"                       '%H:%M:%S %Y-%m-%d')"
msgstr ""
"från datetime import datetime\n"
"\n"
"ts = datetime.strptime('10:13:15 2006-03-07',\n"
"                       '%H:%M:%S %Y-%m-%d')"

msgid ""
"The :meth:`SequenceMatcher.get_matching_blocks` method in the :mod:`difflib` "
"module now guarantees to return a minimal list of blocks describing matching "
"subsequences.  Previously, the algorithm would occasionally break a block of "
"matching elements into two list entries. (Enhancement by Tim Peters.)"
msgstr ""
"Metoden :meth:`SequenceMatcher.get_matching_blocks` i modulen :mod:`difflib` "
"garanterar nu att den returnerar en minimal lista med block som beskriver "
"matchande undersekvenser.  Tidigare kunde algoritmen ibland dela upp ett "
"block med matchande element i två listposter. (Förbättring av Tim Peters.)"

msgid ""
"The :mod:`doctest` module gained a ``SKIP`` option that keeps an example "
"from being executed at all.  This is intended for code snippets that are "
"usage examples intended for the reader and aren't actually test cases."
msgstr ""
"Modulen :mod:`doctest` har fått ett ``SKIP``-alternativ som hindrar ett "
"exempel från att exekveras överhuvudtaget.  Detta är avsett för kodsnuttar "
"som är användningsexempel avsedda för läsaren och som inte egentligen är "
"testfall."

msgid ""
"An *encoding* parameter was added to the :func:`testfile` function and the :"
"class:`DocFileSuite` class to specify the file's encoding.  This makes it "
"easier to use non-ASCII characters in  tests contained within a docstring. "
"(Contributed by Bjorn Tillenius.)"
msgstr ""
"En parameter *encoding* har lagts till i funktionen :func:`testfile` och "
"klassen :class:`DocFileSuite` för att ange filens kodning.  Detta gör det "
"enklare att använda icke-ASCII-tecken i tester som ingår i en "
"dokumentsträng. (Bidrag från Bjorn Tillenius.)"

msgid ""
"The :mod:`email` package has been updated to version 4.0. (Contributed by "
"Barry Warsaw.)"
msgstr ""
"Paketet :mod:`email` har uppdaterats till version 4.0. (Bidrag från Barry "
"Warsaw.)"

msgid ""
"The :mod:`fileinput` module was made more flexible. Unicode filenames are "
"now supported, and a *mode* parameter that defaults to ``\"r\"`` was added "
"to the :func:`input` function to allow opening files in binary or :term:"
"`universal newlines` mode.  Another new parameter, *openhook*, lets you use "
"a function other than :func:`open`  to open the input files.  Once you're "
"iterating over the set of files, the :class:`FileInput` object's new :meth:"
"`~fileinput.fileno` returns the file descriptor for the currently opened "
"file. (Contributed by Georg Brandl.)"
msgstr ""
"Modulen :mod:`fileinput` har gjorts mer flexibel. Unicode-filnamn stöds nu "
"och en *mode*-parameter med standardvärdet ``\"r\"`` lades till i "
"funktionen :func:`input` för att göra det möjligt att öppna filer i binärt "
"eller :term:`universal newlines`-läge.  En annan ny parameter, *openhook*, "
"låter dig använda en annan funktion än :func:`open` för att öppna "
"indatafilerna.  När du har itererat över filuppsättningen returnerar :class:"
"`FileInput`-objektets nya :meth:`~fileinput.fileno` filbeskrivaren för den "
"aktuella öppnade filen. (Bidrag från Georg Brandl.)"

msgid ""
"In the :mod:`gc` module, the new :func:`get_count` function returns a 3-"
"tuple containing the current collection counts for the three GC "
"generations.  This is accounting information for the garbage collector; when "
"these counts reach a specified threshold, a garbage collection sweep will be "
"made.  The existing :func:`gc.collect` function now takes an optional "
"*generation* argument of 0, 1, or 2 to specify which generation to collect. "
"(Contributed by Barry Warsaw.)"
msgstr ""
"I modulen :mod:`gc` returnerar den nya funktionen :func:`get_count` en 3-"
"tupel som innehåller det aktuella antalet insamlingar för de tre GC-"
"generationerna.  Detta är redovisningsinformation för skräpsamlaren; när "
"dessa räkningar når ett angivet tröskelvärde kommer en skräpsamling att "
"göras.  Den befintliga funktionen :func:`gc.collect` tar nu ett valfritt "
"*generation*-argument på 0, 1 eller 2 för att ange vilken generation som ska "
"samlas in. (Bidrag från Barry Warsaw.)"

msgid ""
"The :func:`nsmallest` and  :func:`nlargest` functions in the :mod:`heapq` "
"module  now support a ``key`` keyword parameter similar to the one provided "
"by the :func:`min`/:func:`max` functions and the :meth:`sort` methods.  For "
"example::"
msgstr ""
"Funktionerna :func:`nsmallest` och :func:`nlargest` i modulen :mod:`heapq` "
"har nu stöd för nyckelordsparametern ``key``, liknande den som finns i "
"funktionerna :func:`min`/:func:`max` och metoderna :meth:`sort`.  Till "
"exempel::"

msgid ""
">>> import heapq\n"
">>> L = [\"short\", 'medium', 'longest', 'longer still']\n"
">>> heapq.nsmallest(2, L)  # Return two lowest elements, lexicographically\n"
"['longer still', 'longest']\n"
">>> heapq.nsmallest(2, L, key=len)   # Return two shortest elements\n"
"['short', 'medium']"
msgstr ""
">>> import heapq\n"
">>> L = [\"short\", 'medium', 'longest', 'longer still']\n"
">>> heapq.nsmallest(2, L)  # Return two lowest elements, lexicographically\n"
"['longer still', 'longest']\n"
">>> heapq.nsmallest(2, L, key=len)   # Return two shortest elements\n"
"['short', 'medium']"

msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Bidrag från Raymond Hettinger.)"

msgid ""
"The :func:`itertools.islice` function now accepts ``None`` for the start and "
"step arguments.  This makes it more compatible with the attributes of slice "
"objects, so that you can now write the following::"
msgstr ""
"Funktionen :func:`itertools.islice` accepterar nu ``None`` för start- och "
"stegargumenten.  Detta gör den mer kompatibel med attributen för slice-"
"objekt, så att du nu kan skriva följande::"

msgid ""
"s = slice(5)     # Create slice object\n"
"itertools.islice(iterable, s.start, s.stop, s.step)"
msgstr ""
"s = slice(5) # Skapa ett slice-objekt\n"
"itertools.islice(iterabel, s.start, s.stop, s.steg)"

msgid ""
"The :func:`format` function in the :mod:`locale` module has been modified "
"and two new functions were added, :func:`format_string` and :func:`currency`."
msgstr ""
"Funktionen :func:`format` i modulen :mod:`locale` har ändrats och två nya "
"funktioner har lagts till, :func:`format_string` och :func:`currency`."

msgid ""
"The :func:`format` function's *val* parameter could previously be a string "
"as long as no more than one %char specifier appeared; now the parameter must "
"be exactly one %char specifier with no surrounding text.  An optional "
"*monetary* parameter was also added which, if ``True``, will use the "
"locale's rules for formatting currency in placing a separator between groups "
"of three digits."
msgstr ""
"Funktionen :func:`format` parameter *val* kunde tidigare vara en sträng så "
"länge det inte fanns mer än en %char-angivelse; nu måste parametern vara "
"exakt en %char-angivelse utan omgivande text.  En valfri *monetary*-"
"parameter har också lagts till som, om den är ``True``, kommer att använda "
"lokalens regler för formatering av valuta för att placera en separator "
"mellan grupper om tre siffror."

msgid ""
"To format strings with multiple %char specifiers, use the new :func:"
"`format_string` function that works like :func:`format` but also supports "
"mixing %char specifiers with arbitrary text."
msgstr ""
"För att formatera strängar med flera %char-angivelser, använd den nya "
"funktionen :func:`format_string` som fungerar som :func:`format` men som "
"också stöder blandning av %char-angivelser med godtycklig text."

msgid ""
"A new :func:`currency` function was also added that formats a number "
"according to the current locale's settings."
msgstr ""
"En ny :func:`currency`-funktion har också lagts till som formaterar ett tal "
"enligt den aktuella lokalens inställningar."

msgid "(Contributed by Georg Brandl.)"
msgstr "(Bidrag från Georg Brandl.)"

msgid ""
"The :mod:`mailbox` module underwent a massive rewrite to add the capability "
"to modify mailboxes in addition to reading them.  A new set of classes that "
"include :class:`mbox`, :class:`MH`, and :class:`Maildir` are used to read "
"mailboxes, and have an ``add(message)`` method to add messages, "
"``remove(key)`` to remove messages, and :meth:`lock`/:meth:`unlock` to lock/"
"unlock the mailbox. The following example converts a maildir-format mailbox "
"into an mbox-format one::"
msgstr ""
"Modulen :mod:`mailbox` genomgick en omfattande omskrivning för att lägga "
"till möjligheten att modifiera brevlådor utöver att läsa dem.  En ny "
"uppsättning klasser som inkluderar :class:`mbox`, :class:`MH` och :class:"
"`Maildir` används för att läsa brevlådor och har en metod ``add(message)`` "
"för att lägga till meddelanden, ``remove(key)`` för att ta bort meddelanden "
"och :meth:`lock`/:meth:`unlock` för att låsa/låsa upp brevlådan. I följande "
"exempel konverteras en brevlåda i maildir-format till en brevlåda i mbox-"
"format::"

msgid ""
"import mailbox\n"
"\n"
"# 'factory=None' uses email.Message.Message as the class representing\n"
"# individual messages.\n"
"src = mailbox.Maildir('maildir', factory=None)\n"
"dest = mailbox.mbox('/tmp/mbox')\n"
"\n"
"for msg in src:\n"
"    dest.add(msg)"
msgstr ""
"import mailbox\n"
"\n"
"# 'factory=None' uses email.Message.Message as the class representing\n"
"# individual messages.\n"
"src = mailbox.Maildir('maildir', factory=None)\n"
"dest = mailbox.mbox('/tmp/mbox')\n"
"\n"
"for msg in src:\n"
"    dest.add(msg)"

msgid ""
"(Contributed by Gregory K. Johnson.  Funding was provided by Google's 2005 "
"Summer of Code.)"
msgstr ""
"(Bidrag från Gregory K. Johnson.  Finansiering tillhandahölls av Googles "
"Summer of Code 2005)"

msgid ""
"New module: the :mod:`!msilib` module allows creating Microsoft Installer :"
"file:`.msi` files and CAB files.  Some support for reading the :file:`.msi` "
"database is also included. (Contributed by Martin von Löwis.)"
msgstr ""
"Ny modul: Modulen :mod:`!msilib` gör det möjligt att skapa Microsoft "
"Installer :file:`.msi`-filer och CAB-filer.  Visst stöd för att läsa :file:`."
"msi`-databasen ingår också. (Bidrag från Martin von Löwis.)"

msgid ""
"The :mod:`!nis` module now supports accessing domains other than the system "
"default domain by supplying a *domain* argument to the :func:`!nis.match` "
"and :func:`!nis.maps` functions. (Contributed by Ben Bell.)"
msgstr ""
"Modulen :mod:`!nis` stöder nu åtkomst till andra domäner än systemets "
"standarddomän genom att ange ett *domän*-argument till funktionerna :func:`!"
"nis.match` och :func:`!nis.maps`. (Bidrag från Ben Bell.)"

msgid ""
"The :mod:`operator` module's :func:`itemgetter`  and :func:`attrgetter` "
"functions now support multiple fields.   A call such as ``operator."
"attrgetter('a', 'b')`` will return a function  that retrieves the :attr:`a` "
"and :attr:`b` attributes.  Combining  this new feature with the :meth:`sort` "
"method's ``key`` parameter  lets you easily sort lists using multiple "
"fields. (Contributed by Raymond Hettinger.)"
msgstr ""
"Modulerna :mod:`operator`:s funktioner :func:`itemgetter` och :func:"
"`attrgetter` har nu stöd för flera fält.   Ett anrop som ``operator."
"attrgetter('a', 'b')`` kommer att returnera en funktion som hämtar "
"attributen :attr:`a` och :attr:`b`.  Genom att kombinera den här nya "
"funktionen med :meth:`sort`-metodens ``key``-parameter kan du enkelt sortera "
"listor med flera fält. (Bidrag från Raymond Hettinger.)"

msgid ""
"The :mod:`optparse` module was updated to version 1.5.1 of the Optik "
"library. The :class:`OptionParser` class gained an :attr:`epilog` attribute, "
"a string that will be printed after the help message, and a :meth:`destroy` "
"method to break reference cycles created by the object. (Contributed by Greg "
"Ward.)"
msgstr ""
"Modulen :mod:`optparse` uppdaterades till version 1.5.1 av Optik-"
"biblioteket. Klassen :class:`OptionParser` fick ett attribut :attr:`epilog`, "
"en sträng som skrivs ut efter hjälpmeddelandet, och en metod :meth:`destroy` "
"för att bryta referenscykler som skapas av objektet. (Bidrag från Greg Ward.)"

msgid ""
"The :mod:`os` module underwent several changes.  The :attr:"
"`stat_float_times` variable now defaults to true, meaning that :func:`os."
"stat` will now return time values as floats.  (This doesn't necessarily mean "
"that :func:`os.stat` will return times that are precise to fractions of a "
"second; not all systems support such precision.)"
msgstr ""
"Modulen :mod:`os` har genomgått flera förändringar.  Variabeln :attr:"
"`stat_float_times` har nu standardvärdet true, vilket innebär att :func:`os."
"stat` nu kommer att returnera tidsvärden som floats.  (Detta betyder inte "
"nödvändigtvis att :func:`os.stat` kommer att returnera tider som är exakta "
"till bråkdelar av en sekund; inte alla system stöder sådan precision)"

msgid ""
"Constants named :const:`os.SEEK_SET`, :const:`os.SEEK_CUR`, and :const:`os."
"SEEK_END` have been added; these are the parameters to the :func:`os.lseek` "
"function.  Two new constants for locking are :const:`os.O_SHLOCK` and :const:"
"`os.O_EXLOCK`."
msgstr ""
"Konstanter med namnen :const:`os.SEEK_SET`, :const:`os.SEEK_CUR` och :const:"
"`os.SEEK_END` har lagts till; dessa är parametrarna för funktionen :func:`os."
"lseek`.  Två nya konstanter för låsning är :const:`os.O_SHLOCK` och :const:"
"`os.O_EXLOCK`."

msgid ""
"Two new functions, :func:`wait3` and :func:`wait4`, were added.  They're "
"similar the :func:`waitpid` function which waits for a child process to exit "
"and returns a tuple of the process ID and its exit status, but :func:`wait3` "
"and :func:`wait4` return additional information.  :func:`wait3` doesn't take "
"a process ID as input, so it waits for any child process to exit and returns "
"a 3-tuple of *process-id*, *exit-status*, *resource-usage* as returned from "
"the :func:`resource.getrusage` function. ``wait4(pid)`` does take a process "
"ID. (Contributed by Chad J. Schroeder.)"
msgstr ""
"Två nya funktioner, :func:`wait3` och :func:`wait4`, har lagts till.  De "
"liknar funktionen :func:`waitpid` som väntar på att en underordnad process "
"ska avslutas och returnerar en tupel av process-ID och dess "
"avslutningsstatus, men :func:`wait3` och :func:`wait4` returnerar "
"ytterligare information.  :func:`wait3` tar inte emot något process-ID som "
"indata, så den väntar på att en underordnad process ska avslutas och "
"returnerar en 3-tupel av *process-id*, *exit-status*, *resource-usage* som "
"returneras från funktionen :func:`resource.getrusage`. ``wait4(pid)`` tar "
"ett process-ID. (Bidrag från Chad J. Schroeder.)"

msgid ""
"On FreeBSD, the :func:`os.stat` function now returns  times with nanosecond "
"resolution, and the returned object now has :attr:`st_gen` and :attr:"
"`st_birthtime`. The :attr:`st_flags` attribute is also available, if the "
"platform supports it. (Contributed by Antti Louko and  Diego Pettenò.)"
msgstr ""
"På FreeBSD returnerar funktionen :func:`os.stat` nu tider med nanosekunders "
"upplösning och det returnerade objektet har nu attributen :attr:`st_gen` "
"och :attr:`st_birthtime`. Attributet :attr:`st_flags` är också tillgängligt, "
"om plattformen stöder det. (Bidrag från Antti Louko och Diego Pettenò.)"

msgid ""
"The Python debugger provided by the :mod:`pdb` module can now store lists of "
"commands to execute when a breakpoint is reached and execution stops.  Once "
"breakpoint #1 has been created, enter ``commands 1`` and enter a series of "
"commands to be executed, finishing the list with ``end``.  The command list "
"can include commands that resume execution, such as ``continue`` or "
"``next``. (Contributed by Grégoire Dooms.)"
msgstr ""
"Python-felsökaren som tillhandahålls av modulen :mod:`pdb` kan nu lagra "
"listor med kommandon som ska utföras när en brytpunkt nås och exekveringen "
"stoppas.  När brytpunkt #1 har skapats, ange ``kommandon 1`` och ange en "
"serie kommandon som ska köras, avsluta listan med ``end``.  Kommandolistan "
"kan innehålla kommandon som återupptar exekveringen, t.ex. ``continue`` "
"eller ``next``. (Bidrag från Grégoire Dooms.)"

msgid ""
"The :mod:`pickle` and :mod:`!cPickle` modules no longer accept a return "
"value of ``None`` from the :meth:`~object.__reduce__` method; the method "
"must return a tuple of arguments instead.  The ability to return ``None`` "
"was deprecated in Python 2.4, so this completes the removal of the feature."
msgstr ""
"Modulerna :mod:`pickle` och :mod:`!cPickle` accepterar inte längre ett "
"returvärde på ``None`` från metoden :meth:`~object.__reduce__`; metoden "
"måste returnera en tupel av argument istället.  Möjligheten att returnera "
"``None`` försvann i Python 2.4, så detta avslutar borttagandet av funktionen."

msgid ""
"The :mod:`pkgutil` module, containing various utility functions for finding "
"packages, was enhanced to support :pep:`302`'s import hooks and now also "
"works for packages stored in ZIP-format archives. (Contributed by Phillip J. "
"Eby.)"
msgstr ""
"Modulen :mod:`pkgutil`, som innehåller olika verktygsfunktioner för att "
"hitta paket, har förbättrats för att stödja :pep:`302`:s importkrokar och "
"fungerar nu även för paket som lagras i ZIP-formatarkiv. (Bidrag från "
"Phillip J. Eby.)"

msgid ""
"The pybench benchmark suite by Marc-André Lemburg is now included in the :"
"file:`Tools/pybench` directory.  The pybench suite is an improvement on the "
"commonly used :file:`pystone.py` program because pybench provides a more "
"detailed measurement of the interpreter's speed.  It times particular "
"operations such as function calls, tuple slicing, method lookups, and "
"numeric operations, instead of performing many different operations and "
"reducing the result to a single number as :file:`pystone.py` does."
msgstr ""
"Benchmark-sviten pybench av Marc-André Lemburg ingår nu i katalogen :file:"
"`Tools/pybench`.  Pybench-sviten är en förbättring jämfört med det vanligt "
"förekommande programmet :file:`pystone.py` eftersom pybench ger en mer "
"detaljerad mätning av tolkens hastighet.  Den tidsbestämmer särskilda "
"operationer som funktionsanrop, tuple-slicing, metoduppslagningar och "
"numeriska operationer, i stället för att utföra många olika operationer och "
"reducera resultatet till ett enda tal som :file:`pystone.py` gör."

msgid ""
"The :mod:`pyexpat` module now uses version 2.0 of the Expat parser. "
"(Contributed by Trent Mick.)"
msgstr ""
"Modulen :mod:`pyexpat` använder nu version 2.0 av Expat-parsern. (Bidrag "
"från Trent Mick.)"

msgid ""
"The :class:`~queue.Queue` class provided by the :mod:`Queue` module gained "
"two new methods.  :meth:`join` blocks until all items in the queue have been "
"retrieved and all processing work on the items  have been completed.  Worker "
"threads call the other new method,  :meth:`task_done`, to signal that "
"processing for an item has been completed.  (Contributed by Raymond "
"Hettinger.)"
msgstr ""
"Klassen :class:`~queue.Queue` som tillhandahålls av modulen :mod:`Queue` har "
"fått två nya metoder. :meth:`join` blockerar tills alla objekt i kön har "
"hämtats och all bearbetning av objekten har slutförts.  Arbetstrådar anropar "
"den andra nya metoden, :meth:`task_done`, för att signalera att "
"bearbetningen av ett objekt har slutförts.  (Bidrag från Raymond Hettinger.)"

msgid ""
"The old :mod:`regex` and :mod:`regsub` modules, which have been  deprecated "
"ever since Python 2.0, have finally been deleted.   Other deleted modules: :"
"mod:`statcache`, :mod:`tzparse`, :mod:`whrandom`."
msgstr ""
"De gamla modulerna :mod:`regex` och :mod:`regsub`, som har varit föråldrade "
"ända sedan Python 2.0, har slutligen tagits bort.   Andra borttagna "
"moduler: :mod:`statcache`, :mod:`tzparse`, :mod:`whrandom`."

msgid ""
"Also deleted: the :file:`lib-old` directory, which includes ancient modules "
"such as :mod:`dircmp` and :mod:`ni`, was removed.  :file:`lib-old` wasn't on "
"the default ``sys.path``, so unless your programs explicitly added the "
"directory to ``sys.path``, this removal shouldn't affect your code."
msgstr ""
"Borttagen: katalogen :file:`lib-old`, som innehåller gamla moduler som :mod:"
"`dircmp` och :mod:`ni`, har tagits bort. :file:`lib-old` fanns inte med i "
"standardinställningen ``sys.path``, så om inte dina program uttryckligen har "
"lagt till katalogen i ``sys.path`` bör borttagningen inte påverka din kod."

msgid ""
"The :mod:`rlcompleter` module is no longer  dependent on importing the :mod:"
"`readline` module and therefore now works on non-Unix platforms. (Patch from "
"Robert Kiendl.)"
msgstr ""
"Modulen :mod:`rlcompleter` är inte längre beroende av att modulen :mod:"
"`readline` importeras och fungerar därför nu på plattformar som inte är "
"Unix. (Patch från Robert Kiendl.)"

msgid ""
"The :mod:`SimpleXMLRPCServer <xmlrpc.server>` and :mod:`DocXMLRPCServer "
"<xmlrpc.server>`  classes now have a :attr:`rpc_paths` attribute that "
"constrains XML-RPC operations to a limited set of URL paths; the default is "
"to allow only ``'/'`` and ``'/RPC2'``.  Setting :attr:`rpc_paths` to "
"``None`` or an empty tuple disables  this path checking."
msgstr ""
"Klasserna :mod:`SimpleXMLRPCServer <xmlrpc.server>` och :mod:"
"`DocXMLRPCServer <xmlrpc.server>` har nu ett attribut :attr:`rpc_paths` som "
"begränsar XML-RPC-operationer till en begränsad uppsättning URL-sökvägar; "
"standard är att endast tillåta ``'/'`` och ``'/RPC2'``.  Om :attr:"
"`rpc_paths` sätts till ``None`` eller en tom tupel inaktiveras denna "
"sökvägskontroll."

msgid ""
"The :mod:`socket` module now supports :const:`AF_NETLINK` sockets on Linux, "
"thanks to a patch from Philippe Biondi.   Netlink sockets are a Linux-"
"specific mechanism for communications between a user-space process and "
"kernel code; an introductory  article about them is at https://www."
"linuxjournal.com/article/7356. In Python code, netlink addresses are "
"represented as a tuple of 2 integers, ``(pid, group_mask)``."
msgstr ""
"Modulen :mod:`socket` har nu stöd för :const:`AF_NETLINK`-sockets på Linux, "
"tack vare en patch från Philippe Biondi.   Netlink-sockets är en Linux-"
"specifik mekanism för kommunikation mellan en process i användarrymden och "
"kärnkoden; en inledande artikel om dem finns på https://www.linuxjournal.com/"
"article/7356. I Python-kod representeras netlink-adresser som en tupel av 2 "
"heltal, ``(pid, group_mask)``."

msgid ""
"Two new methods on socket objects, ``recv_into(buffer)`` and "
"``recvfrom_into(buffer)``, store the received data in an object  that "
"supports the buffer protocol instead of returning the data as a string.  "
"This means you can put the data directly into an array or a memory-mapped "
"file."
msgstr ""
"Två nya metoder för socket-objekt, ``recv_into(buffer)`` och "
"``recvfrom_into(buffer)``, lagrar de mottagna data i ett objekt som stöder "
"buffertprotokollet istället för att returnera data som en sträng.  Detta "
"innebär att du kan lägga in data direkt i en array eller en minnesmappad fil."

msgid ""
"Socket objects also gained :meth:`getfamily`, :meth:`gettype`, and :meth:"
"`getproto` accessor methods to retrieve the family, type, and protocol "
"values for the socket."
msgstr ""
"Socket-objekt har också accessormetoderna :meth:`getfamily`, :meth:`gettype` "
"och :meth:`getproto` för att hämta värden för familj, typ och protokoll för "
"sockeln."

msgid ""
"New module: the :mod:`!spwd` module provides functions for accessing the "
"shadow password database on systems that support  shadow passwords."
msgstr ""
"Ny modul: Modulen :mod:`!spwd` innehåller funktioner för att komma åt "
"databasen med skugglösenord på system som stöder skugglösenord."

msgid ""
"The :mod:`struct` is now faster because it  compiles format strings into :"
"class:`Struct` objects with :meth:`pack` and :meth:`unpack` methods.  This "
"is similar to how the :mod:`re` module lets you create compiled regular "
"expression objects.  You can still use the module-level  :func:`pack` and :"
"func:`unpack` functions; they'll create  :class:`Struct` objects and cache "
"them.  Or you can use  :class:`Struct` instances directly::"
msgstr ""
"Modulen :mod:`struct` är nu snabbare eftersom den kompilerar formatsträngar "
"till :class:`Struct`-objekt med metoderna :meth:`pack` och :meth:`unpack`.  "
"Detta liknar hur modulen :mod:`re` låter dig skapa kompilerade objekt för "
"reguljära uttryck.  Du kan fortfarande använda modulnivåfunktionerna :func:"
"`pack` och :func:`unpack`; de skapar :class:`Struct`-objekt och cachar dem.  "
"Eller så kan du använda :class:`Struct`-instanser direkt::"

msgid ""
"s = struct.Struct('ih3s')\n"
"\n"
"data = s.pack(1972, 187, 'abc')\n"
"year, number, name = s.unpack(data)"
msgstr ""
"s = struct.Struct('ih3s')\n"
"\n"
"data = s.pack(1972, 187, 'abc')\n"
"år, nummer, namn = s.unpack(data)"

msgid ""
"You can also pack and unpack data to and from buffer objects directly using "
"the ``pack_into(buffer, offset, v1, v2, ...)`` and ``unpack_from(buffer, "
"offset)`` methods.  This lets you store data directly into an array or a "
"memory-mapped file."
msgstr ""
"Du kan också packa och packa upp data till och från buffertobjekt direkt med "
"hjälp av metoderna ``pack_into(buffert, offset, v1, v2, ...)`` och "
"``unpack_from(buffert, offset)``.  På så sätt kan du lagra data direkt i en "
"array eller en minnesmappad fil."

msgid ""
"(:class:`Struct` objects were implemented by Bob Ippolito at the "
"NeedForSpeed sprint.  Support for buffer objects was added by Martin Blais, "
"also at the NeedForSpeed sprint.)"
msgstr ""
"(:class:`Struct`-objekt implementerades av Bob Ippolito vid NeedForSpeed-"
"sprinten.  Stöd för buffertobjekt lades till av Martin Blais, också vid "
"NeedForSpeed-sprintet)"

msgid ""
"The Python developers switched from CVS to Subversion during the 2.5 "
"development process.  Information about the exact build version is available "
"as the ``sys.subversion`` variable, a 3-tuple of ``(interpreter-name, branch-"
"name, revision-range)``.  For example, at the time of writing my copy of 2.5 "
"was reporting ``('CPython', 'trunk', '45313:45315')``."
msgstr ""
"Python-utvecklarna bytte från CVS till Subversion under utvecklingsprocessen "
"för 2.5.  Information om den exakta byggversionen finns tillgänglig som "
"variabeln ``sys.subversion``, en 3-tupel av ``(tolknamn, grennamn, "
"revisionsintervall)``.  Till exempel rapporterade min kopia av 2.5 vid "
"tidpunkten för skrivandet ``('CPython', 'trunk', '45313:45315')``."

msgid ""
"This information is also available to C extensions via the :c:func:"
"`Py_GetBuildInfo` function that returns a  string of build information like "
"this: ``\"trunk:45355:45356M, Apr 13 2006, 07:42:19\"``.   (Contributed by "
"Barry Warsaw.)"
msgstr ""
"Den här informationen är också tillgänglig för C-tillägg via funktionen :c:"
"func:`Py_GetBuildInfo` som returnerar en sträng med bygginformation som den "
"här: ``\"trunk:45355:45356M, Apr 13 2006, 07:42:19\"``.   (Bidrag från Barry "
"Warsaw.)"

msgid ""
"Another new function, :func:`sys._current_frames`, returns the current stack "
"frames for all running threads as a dictionary mapping thread identifiers to "
"the topmost stack frame currently active in that thread at the time the "
"function is called.  (Contributed by Tim Peters.)"
msgstr ""
"En annan ny funktion, :func:`sys._current_frames`, returnerar de aktuella "
"stackramarna för alla trådar som körs som en ordbok som mappar "
"trådidentifierare till den översta stackram som är aktiv i tråden när "
"funktionen anropas.  (Bidrag från Tim Peters.)"

msgid ""
"The :class:`TarFile` class in the :mod:`tarfile` module now has an :meth:"
"`extractall` method that extracts all members from the archive into the "
"current working directory.  It's also possible to set a different directory "
"as the extraction target, and to unpack only a subset of the archive's "
"members."
msgstr ""
"Klassen :class:`TarFile` i modulen :mod:`tarfile` har nu en metod :meth:"
"`extractall` som extraherar alla medlemmar från arkivet till den aktuella "
"arbetskatalogen.  Det är också möjligt att ange en annan katalog som "
"extraktionsmål och att endast packa upp en delmängd av arkivets medlemmar."

msgid ""
"The compression used for a tarfile opened in stream mode can now be "
"autodetected using the mode ``'r|*'``. (Contributed by Lars Gustäbel.)"
msgstr ""
"Komprimeringen som används för en tarfil som öppnas i stream-läge kan nu "
"autodetekteras med hjälp av läget ``'r|*'``. (Bidrag från Lars Gustäbel.)"

msgid ""
"The :mod:`threading` module now lets you set the stack size used when new "
"threads are created. The ``stack_size([*size*])`` function returns the "
"currently configured stack size, and supplying the optional *size* parameter "
"sets a new value.  Not all platforms support changing the stack size, but "
"Windows, POSIX threading, and OS/2 all do. (Contributed by Andrew MacIntyre.)"
msgstr ""
"Med modulen :mod:`threading` kan du nu ställa in den stackstorlek som "
"används när nya trådar skapas. Funktionen ``stack_size([*size*])`` "
"returnerar den aktuella konfigurerade stackstorleken och genom att ange den "
"valfria parametern *size* anges ett nytt värde.  Det är inte alla "
"plattformar som stöder ändring av stackstorleken, men Windows, POSIX "
"threading och OS/2 gör det. (Bidrag från Andrew MacIntyre.)"

msgid ""
"The :mod:`unicodedata` module has been updated to use version 4.1.0 of the "
"Unicode character database.  Version 3.2.0 is required  by some "
"specifications, so it's still available as  :data:`unicodedata.ucd_3_2_0`."
msgstr ""
"Modulen :mod:`unicodedata` har uppdaterats för att använda version 4.1.0 av "
"Unicodes teckendatabas.  Version 3.2.0 krävs av vissa specifikationer, så "
"den är fortfarande tillgänglig som :data:`unicodedata.ucd_3_2_0`."

msgid ""
"New module: the  :mod:`uuid` module generates  universally unique "
"identifiers (UUIDs) according to :rfc:`4122`.  The RFC defines several "
"different UUID versions that are generated from a starting string, from "
"system properties, or purely randomly.  This module contains a :class:`UUID` "
"class and  functions named :func:`uuid1`, :func:`uuid3`, :func:`uuid4`,  "
"and  :func:`uuid5` to generate different versions of UUID.  (Version 2 "
"UUIDs  are not specified in :rfc:`4122` and are not supported by this "
"module.) ::"
msgstr ""
"Ny modul: Modulen :mod:`uuid` genererar universellt unika identifierare "
"(UUID) enligt :rfc:`4122`.  RFC definierar flera olika UUID-versioner som "
"genereras från en startsträng, från systemegenskaper eller helt "
"slumpmässigt.  Denna modul innehåller en :class:`UUID`-klass och funktioner "
"med namnen :func:`uuid1`, :func:`uuid3`, :func:`uuid4` och :func:`uuid5` för "
"att generera olika versioner av UUID.  (Version 2 av UUID anges inte i :rfc:"
"`4122` och stöds inte av den här modulen) ::"

msgid ""
">>> import uuid\n"
">>> # make a UUID based on the host ID and current time\n"
">>> uuid.uuid1()\n"
"UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')\n"
"\n"
">>> # make a UUID using an MD5 hash of a namespace UUID and a name\n"
">>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')\n"
"UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')\n"
"\n"
">>> # make a random UUID\n"
">>> uuid.uuid4()\n"
"UUID('16fd2706-8baf-433b-82eb-8c7fada847da')\n"
"\n"
">>> # make a UUID using a SHA-1 hash of a namespace UUID and a name\n"
">>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')\n"
"UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')"
msgstr ""
">>> import uuid\n"
">>> # make a UUID based on the host ID and current time\n"
">>> uuid.uuid1()\n"
"UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')\n"
"\n"
">>> # make a UUID using an MD5 hash of a namespace UUID and a name\n"
">>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')\n"
"UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')\n"
"\n"
">>> # make a random UUID\n"
">>> uuid.uuid4()\n"
"UUID('16fd2706-8baf-433b-82eb-8c7fada847da')\n"
"\n"
">>> # make a UUID using a SHA-1 hash of a namespace UUID and a name\n"
">>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')\n"
"UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')"

msgid "(Contributed by Ka-Ping Yee.)"
msgstr "(Bidrag från Ka-Ping Yee.)"

msgid ""
"The :mod:`weakref` module's :class:`WeakKeyDictionary` and :class:"
"`WeakValueDictionary` types gained new methods for iterating over the weak "
"references contained in the dictionary.  :meth:`iterkeyrefs` and :meth:"
"`keyrefs` methods were added to :class:`WeakKeyDictionary`, and :meth:"
"`itervaluerefs` and :meth:`valuerefs` were added to :class:"
"`WeakValueDictionary`.  (Contributed by Fred L. Drake, Jr.)"
msgstr ""
"Modulens :mod:`weakref`-typer :class:`WeakKeyDictionary` och :class:"
"`WeakValueDictionary` fick nya metoder för att iterera över de svaga "
"referenser som finns i ordboken. Metoderna :meth:`iterkeyrefs` och :meth:"
"`keyrefs` lades till i :class:`WeakKeyDictionary`, och :meth:`itervaluerefs` "
"och :meth:`valuerefs` lades till i :class:`WeakValueDictionary`.  (Bidrag "
"från Fred L. Drake, Jr.)"

msgid ""
"The :mod:`webbrowser` module received a number of enhancements. It's now "
"usable as a script with ``python -m webbrowser``, taking a URL as the "
"argument; there are a number of switches  to control the behaviour (:option:"
"`!-n` for a new browser window,  :option:`!-t` for a new tab).  New module-"
"level functions, :func:`open_new` and :func:`open_new_tab`, were added  to "
"support this.  The module's :func:`open` function supports an additional "
"feature, an *autoraise* parameter that signals whether to raise the open "
"window when possible. A number of additional browsers were added to the "
"supported list such as Firefox, Opera, Konqueror, and elinks.  (Contributed "
"by Oleg Broytmann and Georg Brandl.)"
msgstr ""
"Modulen :mod:`webbrowser` har fått ett antal förbättringar. Den kan nu "
"användas som ett skript med ``python -m webbrowser``, med en URL som "
"argument; det finns ett antal omkopplare för att styra beteendet (:option:`!-"
"n` för ett nytt webbläsarfönster, :option:`!-t` för en ny flik).  Nya "
"funktioner på modulnivå, :func:`open_new` och :func:`open_new_tab`, har "
"lagts till för att stödja detta.  Modulens funktion :func:`open` har stöd "
"för ytterligare en funktion, en *autoraise*-parameter som signalerar om det "
"öppna fönstret ska höjas när det är möjligt. Ett antal ytterligare "
"webbläsare lades till i listan över webbläsare som stöds, t.ex. Firefox, "
"Opera, Konqueror och elinks.  (Bidrag från Oleg Broytmann och Georg Brandl.)"

msgid ""
"The :mod:`xmlrpclib <xmlrpc.client>` module now supports returning  :class:"
"`~datetime.datetime` objects for the XML-RPC date type.  Supply  "
"``use_datetime=True`` to the :func:`~xmlrpc.client.loads` function or the :"
"class:`!Unmarshaller` class to enable this feature. (Contributed by Skip "
"Montanaro.)"
msgstr ""
"Modulen :mod:`xmlrpclib <xmlrpc.client>` stöder nu returnering av :class:"
"`~datetime.datetime`-objekt för XML-RPC:s datatyp.  Tillför "
"``use_datetime=True`` till :func:`~xmlrpc.client.loads`-funktionen eller :"
"class:`!Unmarshaller`-klassen för att aktivera den här funktionen. (Bidrag "
"från Skip Montanaro.)"

msgid ""
"The :mod:`zipfile` module now supports the ZIP64 version of the  format, "
"meaning that a .zip archive can now be larger than 4 GiB and can contain "
"individual files larger than 4 GiB.  (Contributed by Ronald Oussoren.)"
msgstr ""
"Modulen :mod:`zipfile` stöder nu ZIP64-versionen av formatet, vilket innebär "
"att ett .zip-arkiv nu kan vara större än 4 GiB och kan innehålla enskilda "
"filer som är större än 4 GiB.  (Bidrag från Ronald Oussoren.)"

msgid ""
"The :mod:`zlib` module's :class:`Compress` and :class:`Decompress` objects "
"now support a :meth:`copy` method that makes a copy of the  object's "
"internal state and returns a new  :class:`Compress` or :class:`Decompress` "
"object. (Contributed by Chris AtLee.)"
msgstr ""
":mod:`zlib`-modulens :class:`Compress`- och :class:`Decompress`-objekt "
"stöder nu en :meth:`copy`-metod som gör en kopia av objektets interna "
"tillstånd och returnerar ett nytt :class:`Compress`- eller :class:"
"`Decompress`-objekt. (Bidrag från Chris AtLee.)"

msgid "The ctypes package"
msgstr "Paketet ctypes"

msgid ""
"The :mod:`ctypes` package, written by Thomas Heller, has been added  to the "
"standard library.  :mod:`ctypes` lets you call arbitrary functions  in "
"shared libraries or DLLs.  Long-time users may remember the :mod:`!dl` "
"module, which provides functions for loading shared libraries and calling "
"functions in them. The :mod:`ctypes` package is much fancier."
msgstr ""
"Paketet :mod:`ctypes`, skrivet av Thomas Heller, har lagts till i "
"standardbiblioteket. Med :mod:`ctypes` kan du anropa godtyckliga funktioner "
"i delade bibliotek eller DLL:er.  Långvariga användare kanske minns modulen :"
"mod:`!dl`, som innehåller funktioner för att ladda delade bibliotek och "
"anropa funktioner i dem. Paketet :mod:`ctypes` är mycket mer avancerat."

msgid ""
"To load a shared library or DLL, you must create an instance of the :class:"
"`CDLL` class and provide the name or path of the shared library or DLL. Once "
"that's done, you can call arbitrary functions by accessing them as "
"attributes of the :class:`CDLL` object.   ::"
msgstr ""
"För att ladda ett delat bibliotek eller en DLL måste du skapa en instans av "
"klassen :class:`CDLL` och ange namnet på eller sökvägen till det delade "
"biblioteket eller DLL:en. När det är gjort kan du anropa godtyckliga "
"funktioner genom att komma åt dem som attribut till :class:`CDLL`-"
"objektet. ::"

msgid ""
"import ctypes\n"
"\n"
"libc = ctypes.CDLL('libc.so.6')\n"
"result = libc.printf(\"Line of output\\n\")"
msgstr ""
"import ctypes\n"
"\n"
"libc = ctypes.CDLL('libc.so.6')\n"
"result = libc.printf(\"Line of output\\n\")"

msgid ""
"Type constructors for the various C types are provided: :func:`c_int`, :func:"
"`c_float`, :func:`c_double`, :func:`c_char_p` (equivalent to :c:expr:`char "
"\\*`), and so forth.  Unlike Python's types, the C versions are all mutable; "
"you can assign to their :attr:`value` attribute to change the wrapped "
"value.  Python integers and strings will be automatically converted to the "
"corresponding C types, but for other types you  must call the correct type "
"constructor.  (And I mean *must*;  getting it wrong will often result in the "
"interpreter crashing with a segmentation fault.)"
msgstr ""
"Typkonstruktörer för de olika C-typerna tillhandahålls: :func:`c_int`, :func:"
"`c_float`, :func:`c_double`, :func:`c_char_p` (motsvarande :c:expr:`char "
"\\*`), och så vidare.  Till skillnad från Pythons typer är C-versionerna "
"alla mutabla; du kan tilldela deras :attr:`value`-attribut för att ändra det "
"omslutna värdet.  Pythons heltal och strängar kommer automatiskt att "
"konverteras till motsvarande C-typer, men för andra typer måste du anropa "
"rätt typkonstruktör.  (Och jag menar *måste*; om du gör fel resulterar det "
"ofta i att tolken kraschar med ett segmenteringsfel)"

msgid ""
"You shouldn't use :func:`c_char_p` with a Python string when the C function "
"will be modifying the memory area, because Python strings are  supposed to "
"be immutable; breaking this rule will cause puzzling bugs.  When you need a "
"modifiable memory area, use :func:`create_string_buffer`::"
msgstr ""
"Du bör inte använda :func:`c_char_p` med en Python-sträng när C-funktionen "
"kommer att ändra minnesområdet, eftersom Python-strängar ska vara "
"oföränderliga; att bryta mot denna regel kommer att orsaka förbryllande "
"buggar.  När du behöver en modifierbar minnesarea, använd :func:"
"`create_string_buffer`::"

msgid ""
"s = \"this is a string\"\n"
"buf = ctypes.create_string_buffer(s)\n"
"libc.strfry(buf)"
msgstr ""
"s = \"detta är en sträng\"\n"
"buf = ctypes.skapa_sträng_buffer(s)\n"
"libc.strfry(buf)"

msgid ""
"C functions are assumed to return integers, but you can set the :attr:"
"`restype` attribute of the function object to  change this::"
msgstr ""
"C-funktioner antas returnera heltal, men du kan ställa in attributet :attr:"
"`restype` för funktionsobjektet för att ändra detta::"

msgid ""
">>> libc.atof('2.71828')\n"
"-1783957616\n"
">>> libc.atof.restype = ctypes.c_double\n"
">>> libc.atof('2.71828')\n"
"2.71828"
msgstr ""
">>> libc.atof('2.71828')\n"
"-1783957616\n"
">>> libc.atof.restype = ctypes.c_double\n"
">>> libc.atof('2.71828')\n"
"2.71828"

msgid ""
":mod:`ctypes` also provides a wrapper for Python's C API  as the ``ctypes."
"pythonapi`` object.  This object does *not*  release the global interpreter "
"lock before calling a function, because the lock must be held when calling "
"into the interpreter's code.   There's a :class:`~ctypes.py_object` type "
"constructor that will create a  :c:expr:`PyObject *` pointer.  A simple "
"usage::"
msgstr ""
":mod:`ctypes` tillhandahåller också en omslagslösning för Pythons C API i "
"form av objektet ``ctypes.pythonapi``.  Det här objektet släpper *inte* det "
"globala tolklåset innan en funktion anropas, eftersom låset måste hållas "
"kvar när tolkens kod anropas.   Det finns en konstruktör av typen :class:"
"`~ctypes.py_object` som skapar en pekare av typen :c:expr:`PyObject *`.  En "
"enkel användning::"

msgid ""
"import ctypes\n"
"\n"
"d = {}\n"
"ctypes.pythonapi.PyObject_SetItem(ctypes.py_object(d),\n"
"          ctypes.py_object(\"abc\"),  ctypes.py_object(1))\n"
"# d is now {'abc', 1}."
msgstr ""
"import ctypes\n"
"\n"
"d = {}\n"
"ctypes.pythonapi.PyObject_SetItem(ctypes.py_object(d),\n"
"          ctypes.py_object(\"abc\"),  ctypes.py_object(1))\n"
"# d is now {'abc', 1}."

msgid ""
"Don't forget to use :func:`~ctypes.py_object`; if it's omitted you end  up "
"with a segmentation fault."
msgstr ""
"Glöm inte att använda :func:`~ctypes.py_object`; om det utelämnas får du ett "
"segmenteringsfel."

msgid ""
":mod:`ctypes` has been around for a while, but people still write  and "
"distribution hand-coded extension modules because you can't rely on :mod:"
"`ctypes` being present. Perhaps developers will begin to write  Python "
"wrappers atop a library accessed through :mod:`ctypes` instead of extension "
"modules, now that :mod:`ctypes` is included with core Python."
msgstr ""
":mod:`ctypes` har funnits ett tag, men folk skriver och distribuerar "
"fortfarande handkodade tilläggsmoduler eftersom man inte kan lita på att :"
"mod:`ctypes` finns. Kanske kommer utvecklare att börja skriva Pythonomslag "
"ovanpå ett bibliotek som nås via :mod:`ctypes` istället för tilläggsmoduler, "
"nu när :mod:`ctypes` ingår i Pythons kärna."

msgid ""
"https://web.archive.org/web/20180410025338/http://starship.python.net/crew/"
"theller/ctypes/"
msgstr ""
"https://web.archive.org/web/20180410025338/http://starship.python.net/crew/"
"theller/ctypes/"

msgid "The pre-stdlib ctypes web page, with a tutorial, reference, and FAQ."
msgstr "Webbsidan pre-stdlib ctypes, med en handledning, referens och FAQ."

msgid "The documentation  for the :mod:`ctypes` module."
msgstr "Dokumentationen för modulen :mod:`ctypes`."

msgid "The ElementTree package"
msgstr "ElementTree-paketet"

msgid ""
"A subset of Fredrik Lundh's ElementTree library for processing XML has been "
"added to the standard library as :mod:`xml.etree`.  The available modules "
"are :mod:`ElementTree`, :mod:`ElementPath`, and :mod:`ElementInclude` from "
"ElementTree 1.2.6.    The :mod:`cElementTree` accelerator module is also "
"included."
msgstr ""
"En delmängd av Fredrik Lundhs ElementTree-bibliotek för bearbetning av XML "
"har lagts till i standardbiblioteket som :mod:`xml.etree`.  De tillgängliga "
"modulerna är :mod:`ElementTree`, :mod:`ElementPath` och :mod:"
"`ElementInclude` från ElementTree 1.2.6.    Acceleratormodulen :mod:"
"`cElementTree` ingår också."

msgid ""
"The rest of this section will provide a brief overview of using ElementTree. "
"Full documentation for ElementTree is available at https://web.archive.org/"
"web/20201124024954/http://effbot.org/zone/element-index.htm."
msgstr ""
"I resten av detta avsnitt ges en kort översikt över hur du använder "
"ElementTree. Fullständig dokumentation för ElementTree finns på https://web."
"archive.org/web/20201124024954/http://effbot.org/zone/element-index.htm."

msgid ""
"ElementTree represents an XML document as a tree of element nodes. The text "
"content of the document is stored as the :attr:`text` and :attr:`tail` "
"attributes of  (This is one of the major differences between ElementTree and "
"the Document Object Model; in the DOM there are many different types of "
"node, including :class:`TextNode`.)"
msgstr ""
"ElementTree representerar ett XML-dokument som ett träd med elementnoder. "
"Dokumentets textinnehåll lagras som attributen :attr:`text` och :attr:`tail` "
"i (Detta är en av de största skillnaderna mellan ElementTree och Document "
"Object Model; i DOM finns det många olika typer av noder, inklusive :class:"
"`TextNode`)"

msgid ""
"The most commonly used parsing function is :func:`parse`, that takes either "
"a string (assumed to contain a filename) or a file-like object and returns "
"an :class:`ElementTree` instance::"
msgstr ""
"Den vanligaste parsingfunktionen är :func:`parse`, som tar antingen en "
"sträng (som antas innehålla ett filnamn) eller ett filliknande objekt och "
"returnerar en :class:`ElementTree`-instans::"

msgid ""
"from xml.etree import ElementTree as ET\n"
"\n"
"tree = ET.parse('ex-1.xml')\n"
"\n"
"feed = urllib.urlopen(\n"
"          'http://planet.python.org/rss10.xml')\n"
"tree = ET.parse(feed)"
msgstr ""
"from xml.etree import ElementTree as ET\n"
"\n"
"träd = ET.parse('ex-1.xml')\n"
"\n"
"feed = urllib.urlopen(\n"
"          'http://planet.python.org/rss10.xml')\n"
"träd = ET.parse(feed)"

msgid ""
"Once you have an :class:`ElementTree` instance, you can call its :meth:"
"`getroot` method to get the root :class:`Element` node."
msgstr ""
"När du har en :class:`ElementTree`-instans kan du anropa dess :meth:"
"`getroot`-metod för att hämta rotnoden :class:`Element`."

msgid ""
"There's also an :func:`XML` function that takes a string literal and returns "
"an :class:`Element` node (not an :class:`ElementTree`).   This function "
"provides a tidy way to incorporate XML fragments, approaching the "
"convenience of an XML literal::"
msgstr ""
"Det finns också en :func:`XML`-funktion som tar en sträng och returnerar en :"
"class:`Element`-nod (inte en :class:`ElementTree`).   Denna funktion ger ett "
"snyggt sätt att införliva XML-fragment och närmar sig bekvämligheten med en "
"XML-litteral::"

msgid ""
"svg = ET.XML(\"\"\"<svg width=\"10px\" version=\"1.0\">\n"
"             </svg>\"\"\")\n"
"svg.set('height', '320px')\n"
"svg.append(elem1)"
msgstr ""
"svg = ET.XML(\"\"\"<svg width=\"10px\" version=\"1.0\">\n"
"             </svg>\"\"\")\n"
"svg.set('höjd', '320px')\n"
"svg.append(elem1)"

msgid ""
"Each XML element supports some dictionary-like and some list-like access "
"methods.  Dictionary-like operations are used to access attribute values, "
"and list-like operations are used to access child nodes."
msgstr ""
"Varje XML-element stöder vissa ordboksliknande och vissa listliknande "
"åtkomstmetoder.  Ordboksliknande åtgärder används för att komma åt "
"attributvärden och listliknande åtgärder används för att komma åt "
"underordnade noder."

msgid "Operation"
msgstr "Operation"

msgid "Result"
msgstr "Resultat"

msgid "``elem[n]``"
msgstr "``elem[n]```"

msgid "Returns n'th child element."
msgstr "Returnerar det n:te underordnade elementet."

msgid "``elem[m:n]``"
msgstr "``elem[m:n]```"

msgid "Returns list of m'th through n'th child elements."
msgstr "Returnerar listan med m'th till n'th underordnade element."

msgid "``len(elem)``"
msgstr "``len(elem)```"

msgid "Returns number of child elements."
msgstr "Returnerar antalet underordnade element."

msgid "``list(elem)``"
msgstr "``list(elem)```"

msgid "Returns list of child elements."
msgstr "Returnerar en lista med underordnade element."

msgid "``elem.append(elem2)``"
msgstr "``elem.append(elem2)``"

msgid "Adds *elem2* as a child."
msgstr "Lägger till *elem2* som ett barn."

msgid "``elem.insert(index, elem2)``"
msgstr "``elem.insert(index, elem2)``"

msgid "Inserts *elem2* at the specified location."
msgstr "Infogar *elem2* på den angivna platsen."

msgid "``del elem[n]``"
msgstr "``del elem[n]```"

msgid "Deletes n'th child element."
msgstr "Raderar det n:te underordnade elementet."

msgid "``elem.keys()``"
msgstr "``elem.nycklar()``"

msgid "Returns list of attribute names."
msgstr "Returnerar en lista med attributnamn."

msgid "``elem.get(name)``"
msgstr "``elem.get(namn)``"

msgid "Returns value of attribute *name*."
msgstr "Returnerar värdet för attributet *name*."

msgid "``elem.set(name, value)``"
msgstr "``elem.set(namn, värde)``"

msgid "Sets new value for attribute *name*."
msgstr "Ställer in ett nytt värde för attributet *name*."

msgid "``elem.attrib``"
msgstr "``elem.attrib``"

msgid "Retrieves the dictionary containing attributes."
msgstr "Hämtar ordlistan som innehåller attribut."

msgid "``del elem.attrib[name]``"
msgstr "``del elem.attrib[namn]``"

msgid "Deletes attribute *name*."
msgstr "Raderar attributet *namn*."

msgid ""
"Comments and processing instructions are also represented as :class:"
"`Element` nodes.  To check if a node is a comment or processing "
"instructions::"
msgstr ""
"Kommentarer och bearbetningsinstruktioner representeras också som :class:"
"`Element`-noder.  För att kontrollera om en nod är en kommentar eller en "
"bearbetningsinstruktion::"

msgid ""
"if elem.tag is ET.Comment:\n"
"    ...\n"
"elif elem.tag is ET.ProcessingInstruction:\n"
"    ..."
msgstr ""
"om elem.tag är ET.Comment:\n"
"    ...\n"
"elif elem.tag är ET.ProcessingInstruction:\n"
"    ..."

msgid ""
"To generate XML output, you should call the :meth:`ElementTree.write` "
"method. Like :func:`parse`, it can take either a string or a file-like "
"object::"
msgstr ""
"För att generera XML-utdata bör du anropa metoden :meth:`ElementTree.write`. "
"Precis som :func:`parse` kan den ta antingen en sträng eller ett filliknande "
"objekt::"

msgid ""
"# Encoding is US-ASCII\n"
"tree.write('output.xml')\n"
"\n"
"# Encoding is UTF-8\n"
"f = open('output.xml', 'w')\n"
"tree.write(f, encoding='utf-8')"
msgstr ""
"# Kodning är US-ASCII\n"
"tree.write('output.xml')\n"
"\n"
"# Kodningen är UTF-8\n"
"f = open('output.xml', 'w')\n"
"tree.write(f, kodning='utf-8')"

msgid ""
"(Caution: the default encoding used for output is ASCII.  For general XML "
"work, where an element's name may contain arbitrary Unicode characters, "
"ASCII isn't a very useful encoding because it will raise an exception if an "
"element's name contains any characters with values greater than 127.  "
"Therefore, it's best to specify a different encoding such as UTF-8 that can "
"handle any Unicode character.)"
msgstr ""
"(Observera att standardkodningen för utdata är ASCII.  För allmänt XML-"
"arbete, där ett elements namn kan innehålla godtyckliga Unicode-tecken, är "
"ASCII inte en särskilt användbar kodning eftersom den kommer att ge upphov "
"till ett undantag om ett elements namn innehåller tecken med värden som är "
"större än 127.  Därför är det bäst att ange en annan kodning, t.ex. UTF-8, "
"som kan hantera alla Unicode-tecken)"

msgid ""
"This section is only a partial description of the ElementTree interfaces. "
"Please read the package's official documentation for more details."
msgstr ""
"Detta avsnitt är endast en partiell beskrivning av ElementTree-gränssnitten. "
"Läs paketets officiella dokumentation för mer information."

msgid ""
"https://web.archive.org/web/20201124024954/http://effbot.org/zone/element-"
"index.htm"
msgstr ""
"https://web.archive.org/web/20201124024954/http://effbot.org/zone/element-"
"index.htm"

msgid "Official documentation for ElementTree."
msgstr "Officiell dokumentation för ElementTree."

msgid "The hashlib package"
msgstr "Paketet hashlib"

msgid ""
"A new :mod:`hashlib` module, written by Gregory P. Smith,  has been added to "
"replace the :mod:`!md5` and :mod:`!sha` modules.  :mod:`hashlib` adds "
"support for additional secure hashes (SHA-224, SHA-256, SHA-384, and "
"SHA-512). When available, the module uses OpenSSL for fast platform "
"optimized implementations of algorithms."
msgstr ""
"En ny :mod:`hashlib`-modul, skriven av Gregory P. Smith, har lagts till för "
"att ersätta :mod:`!md5`- och :mod:`!sha`-modulerna. :mod:`hashlib` lägger "
"till stöd för ytterligare säkra hashar (SHA-224, SHA-256, SHA-384 och "
"SHA-512). När modulen är tillgänglig använder den OpenSSL för snabba "
"plattformsoptimerade implementeringar av algoritmer."

msgid ""
"The old :mod:`!md5` and :mod:`!sha` modules still exist as wrappers around "
"hashlib to preserve backwards compatibility.  The new module's interface is "
"very close to that of the old modules, but not identical. The most "
"significant difference is that the constructor functions for creating new "
"hashing objects are named differently. ::"
msgstr ""
"De gamla modulerna :mod:`!md5` och :mod:`!sha` finns fortfarande kvar som "
"omslag runt hashlib för att bevara bakåtkompatibilitet.  Den nya modulens "
"gränssnitt ligger mycket nära de gamla modulernas, men är inte identiskt. "
"Den mest betydande skillnaden är att konstruktörsfunktionerna för att skapa "
"nya hashingobjekt har olika namn. ::"

msgid ""
"# Old versions\n"
"h = md5.md5()\n"
"h = md5.new()\n"
"\n"
"# New version\n"
"h = hashlib.md5()\n"
"\n"
"# Old versions\n"
"h = sha.sha()\n"
"h = sha.new()\n"
"\n"
"# New version\n"
"h = hashlib.sha1()\n"
"\n"
"# Hash that weren't previously available\n"
"h = hashlib.sha224()\n"
"h = hashlib.sha256()\n"
"h = hashlib.sha384()\n"
"h = hashlib.sha512()\n"
"\n"
"# Alternative form\n"
"h = hashlib.new('md5')          # Provide algorithm as a string"
msgstr ""
"# Gamla versioner\n"
"h = md5.md5()\n"
"h = md5.new()\n"
"\n"
"# Ny version\n"
"h = hashlib.md5()\n"
"\n"
"# Gamla versioner\n"
"h = sha.sha()\n"
"h = sha.new()\n"
"\n"
"# Ny version\n"
"h = hashlib.sha1()\n"
"\n"
"# Hash som inte var tillgängliga tidigare\n"
"h = hashlib.sha224()\n"
"h = hashlib.sha256()\n"
"h = hashlib.sha384()\n"
"h = hashlib.sha512()\n"
"\n"
"# Alternativ form\n"
"h = hashlib.new('md5') # Ange algoritmen som en sträng"

msgid ""
"Once a hash object has been created, its methods are the same as before: "
"``update(string)`` hashes the specified string into the  current digest "
"state, :meth:`digest` and :meth:`hexdigest` return the digest value as a "
"binary string or a string of hex digits, and :meth:`copy` returns a new "
"hashing object with the same digest state."
msgstr ""
"När ett hash-objekt har skapats är dess metoder desamma som tidigare: "
"``update(string)`` hashar den angivna strängen till det aktuella digest-"
"läget, :meth:`digest` och :meth:`hexdigest` returnerar digest-värdet som en "
"binär sträng eller en sträng med hex-siffror, och :meth:`copy` returnerar "
"ett nytt hash-objekt med samma digest-läge."

msgid "The documentation  for the :mod:`hashlib` module."
msgstr "Dokumentationen för modulen :mod:`hashlib`."

msgid "The sqlite3 package"
msgstr "Paketet sqlite3"

msgid ""
"The pysqlite module (https://www.pysqlite.org), a wrapper for the SQLite "
"embedded database, has been added to the standard library under the package "
"name :mod:`sqlite3`."
msgstr ""
"Modulen pysqlite (https://www.pysqlite.org), ett omslag för den inbäddade "
"databasen SQLite, har lagts till i standardbiblioteket under paketnamnet :"
"mod:`sqlite3`."

msgid ""
"SQLite is a C library that provides a lightweight disk-based database that "
"doesn't require a separate server process and allows accessing the database "
"using a nonstandard variant of the SQL query language. Some applications can "
"use SQLite for internal data storage.  It's also possible to prototype an "
"application using SQLite and then port the code to a larger database such as "
"PostgreSQL or Oracle."
msgstr ""
"SQLite är ett C-bibliotek som tillhandahåller en lättviktig diskbaserad "
"databas som inte kräver en separat serverprocess och som gör det möjligt att "
"komma åt databasen med en icke-standardvariant av frågespråket SQL. Vissa "
"applikationer kan använda SQLite för intern datalagring.  Det är också "
"möjligt att prototypa en applikation med SQLite och sedan porta koden till "
"en större databas som PostgreSQL eller Oracle."

msgid ""
"pysqlite was written by Gerhard Häring and provides a SQL interface "
"compliant with the DB-API 2.0 specification described by :pep:`249`."
msgstr ""
"pysqlite skrevs av Gerhard Häring och tillhandahåller ett SQL-gränssnitt som "
"överensstämmer med DB-API 2.0-specifikationen som beskrivs av :pep:`249`."

msgid ""
"If you're compiling the Python source yourself, note that the source tree "
"doesn't include the SQLite code, only the wrapper module. You'll need to "
"have the SQLite libraries and headers installed before compiling Python, and "
"the build process will compile the module when the necessary headers are "
"available."
msgstr ""
"Om du kompilerar Python-källan själv bör du notera att källträdet inte "
"innehåller SQLite-koden, utan endast omslagsmodulen. Du måste ha SQLite-"
"biblioteken och headers installerade innan du kompilerar Python, och "
"byggprocessen kommer att kompilera modulen när de nödvändiga headers är "
"tillgängliga."

msgid ""
"To use the module, you must first create a :class:`Connection` object that "
"represents the database.  Here the data will be stored in the :file:`/tmp/"
"example` file::"
msgstr ""
"För att använda modulen måste du först skapa ett :class:`Connection`-objekt "
"som representerar databasen.  Här kommer data att lagras i :file:`/tmp/"
"example`-filen::"

msgid "conn = sqlite3.connect('/tmp/example')"
msgstr "conn = sqlite3.connect('/tmp/example')"

msgid ""
"You can also supply the special name ``:memory:`` to create a database in "
"RAM."
msgstr ""
"Du kan också ange det speciella namnet ``:memory:`` för att skapa en databas "
"i RAM."

msgid ""
"Once you have a :class:`Connection`, you can create a :class:`Cursor`  "
"object and call its :meth:`execute` method to perform SQL commands::"
msgstr ""
"När du har en :class:`Connection` kan du skapa ett :class:`Cursor`-objekt "
"och anropa dess :meth:`execute`-metod för att utföra SQL-kommandon::"

msgid ""
"c = conn.cursor()\n"
"\n"
"# Create table\n"
"c.execute('''create table stocks\n"
"(date text, trans text, symbol text,\n"
" qty real, price real)''')\n"
"\n"
"# Insert a row of data\n"
"c.execute(\"\"\"insert into stocks\n"
"          values ('2006-01-05','BUY','RHAT',100,35.14)\"\"\")"
msgstr ""
"c = conn.cursor()\n"
"\n"
"# Skapa tabell\n"
"c.execute('''skapa tabell aktier\n"
"(datum text, trans text, symbol text,\n"
" qty real, price real)''')\n"
"\n"
"# Infoga en rad med data\n"
"c.execute(\"\"\"infoga i aktier\n"
"          values ('2006-01-05','BUY','RHAT',100,35.14)\"\"\")"

msgid ""
"Usually your SQL operations will need to use values from Python variables.  "
"You shouldn't assemble your query using Python's string operations because "
"doing so is insecure; it makes your program vulnerable to an SQL injection "
"attack."
msgstr ""
"Vanligtvis kommer dina SQL-operationer att behöva använda värden från Python-"
"variabler.  Du bör inte sätta ihop din fråga med hjälp av Pythons "
"strängoperationer eftersom det är osäkert; det gör ditt program sårbart för "
"en SQL-injektionsattack."

msgid ""
"Instead, use the DB-API's parameter substitution.  Put ``?`` as a "
"placeholder wherever you want to use a value, and then provide a tuple of "
"values as the second argument to the cursor's :meth:`execute` method.  "
"(Other database modules may use a different placeholder, such as ``%s`` or "
"``:1``.) For example::"
msgstr ""
"Använd istället DB-API:s parametersubstitution.  Sätt ``?`` som en "
"platshållare där du vill använda ett värde och tillhandahåll sedan en tupel "
"av värden som det andra argumentet till markörens :meth:`execute`-metod.  "
"(Andra databasmoduler kan använda en annan platshållare, t.ex. ``%s`` eller "
"``:1``) Till exempel::"

msgid ""
"# Never do this -- insecure!\n"
"symbol = 'IBM'\n"
"c.execute(\"... where symbol = '%s'\" % symbol)\n"
"\n"
"# Do this instead\n"
"t = (symbol,)\n"
"c.execute('select * from stocks where symbol=?', t)\n"
"\n"
"# Larger example\n"
"for t in (('2006-03-28', 'BUY', 'IBM', 1000, 45.00),\n"
"          ('2006-04-05', 'BUY', 'MSOFT', 1000, 72.00),\n"
"          ('2006-04-06', 'SELL', 'IBM', 500, 53.00),\n"
"         ):\n"
"    c.execute('insert into stocks values (?,?,?,?,?)', t)"
msgstr ""
"# Gör aldrig detta -- osäkert!\n"
"symbol = 'IBM'\n"
"c.execute(\"... där symbol = '%s'\" % symbol)\n"
"\n"
"# Gör så här istället\n"
"t = (symbol,)\n"
"c.execute('select * from stocks where symbol=?', t)\n"
"\n"
"# Större exempel\n"
"for t in (('2006-03-28', 'BUY', 'IBM', 1000, 45.00),\n"
"          ('2006-04-05', 'BUY', 'MSOFT', 1000, 72.00),\n"
"          ('2006-04-06', 'SÄLJ', 'IBM', 500, 53,00),\n"
"         ):\n"
"    c.execute('insert into stocks values (?,?,?,?,?,?)', t)"

msgid ""
"To retrieve data after executing a SELECT statement, you can either  treat "
"the cursor as an iterator, call the cursor's :meth:`fetchone` method to "
"retrieve a single matching row,  or call :meth:`fetchall` to get a list of "
"the matching rows."
msgstr ""
"Om du vill hämta data efter att ha kört en SELECT-sats kan du antingen "
"behandla markören som en iterator, anropa markörens metod :meth:`fetchone` "
"för att hämta en enda matchande rad eller anropa :meth:`fetchall` för att "
"hämta en lista över matchande rader."

msgid "This example uses the iterator form::"
msgstr "I detta exempel används iteratorn form::"

msgid ""
">>> c = conn.cursor()\n"
">>> c.execute('select * from stocks order by price')\n"
">>> for row in c:\n"
"...    print row\n"
"...\n"
"(u'2006-01-05', u'BUY', u'RHAT', 100, 35.140000000000001)\n"
"(u'2006-03-28', u'BUY', u'IBM', 1000, 45.0)\n"
"(u'2006-04-06', u'SELL', u'IBM', 500, 53.0)\n"
"(u'2006-04-05', u'BUY', u'MSOFT', 1000, 72.0)\n"
">>>"
msgstr ""
">>> c = conn.cursor()\n"
">>> c.execute('select * from stocks order by price')\n"
">>> för rad i c:\n"
"... skriv ut rad\n"
"...\n"
"(u'2006-01-05', u'BUY', u'RHAT', 100, 35.140000000000001)\n"
"(u'2006-03-28', u'BUY', u'IBM', 1000, 45,0)\n"
"(u'2006-04-06', u'SELL', u'IBM', 500, 53,0)\n"
"(u'2006-04-05', u'BUY', u'MSOFT', 1000, 72,0)\n"
">>>"

msgid ""
"For more information about the SQL dialect supported by SQLite, see https://"
"www.sqlite.org."
msgstr ""
"För mer information om SQL-dialekten som stöds av SQLite, se https://www."
"sqlite.org."

msgid "https://www.pysqlite.org"
msgstr "https://www.pysqlite.org"

msgid "The pysqlite web page."
msgstr "Webbsidan för pysqlite."

msgid "https://www.sqlite.org"
msgstr "https://www.sqlite.org"

msgid ""
"The SQLite web page; the documentation describes the syntax and the "
"available data types for the supported SQL dialect."
msgstr ""
"SQLite-webbsidan; dokumentationen beskriver syntaxen och de tillgängliga "
"datatyperna för den SQL-dialekt som stöds."

msgid "The documentation  for the :mod:`sqlite3` module."
msgstr "Dokumentationen för modulen :mod:`sqlite3`."

msgid ":pep:`249` - Database API Specification 2.0"
msgstr ":pep:`249` - API-specifikation för databaser 2.0"

msgid "PEP written by Marc-André Lemburg."
msgstr "PEP skriven av Marc-André Lemburg."

msgid "The wsgiref package"
msgstr "Paketet wsgiref"

msgid ""
"The Web Server Gateway Interface (WSGI) v1.0 defines a standard interface "
"between web servers and Python web applications and is described in :pep:"
"`333`. The :mod:`wsgiref` package is a reference implementation of the WSGI "
"specification."
msgstr ""
"Web Server Gateway Interface (WSGI) v1.0 definierar ett standardgränssnitt "
"mellan webbservrar och Python webbapplikationer och beskrivs i :pep:`333`. "
"Paketet :mod:`wsgiref` är en referensimplementering av WSGI-specifikationen."

msgid ""
"The package includes a basic HTTP server that will run a WSGI application; "
"this server is useful for debugging but isn't intended for  production use.  "
"Setting up a server takes only a few lines of code::"
msgstr ""
"Paketet innehåller en grundläggande HTTP-server som kör en WSGI-applikation; "
"den här servern är användbar för felsökning men är inte avsedd för "
"produktionsanvändning.  Att konfigurera en server tar bara några rader kod::"

msgid ""
"from wsgiref import simple_server\n"
"\n"
"wsgi_app = ...\n"
"\n"
"host = ''\n"
"port = 8000\n"
"httpd = simple_server.make_server(host, port, wsgi_app)\n"
"httpd.serve_forever()"
msgstr ""
"from wsgiref import simple_server\n"
"\n"
"wsgi_app = ...\n"
"\n"
"host = ''\n"
"port = 8000\n"
"httpd = simple_server.make_server(host, port, wsgi_app)\n"
"httpd.serve_forever()"

msgid ""
"https://web.archive.org/web/20160331090247/http://wsgi.readthedocs.org/en/"
"latest/"
msgstr ""
"https://web.archive.org/web/20160331090247/http://wsgi.readthedocs.org/en/"
"latest/"

msgid "A central web site for WSGI-related resources."
msgstr "En central webbplats för WSGI-relaterade resurser."

msgid ":pep:`333` - Python Web Server Gateway Interface v1.0"
msgstr ":pep:`333` - Python Web Server Gateway-gränssnitt v1.0"

msgid "PEP written by Phillip J. Eby."
msgstr "PEP skriven av Phillip J. Eby."

msgid "Build and C API Changes"
msgstr "Ändringar i Build och C API"

msgid "Changes to Python's build process and to the C API include:"
msgstr "Ändringar i Pythons byggprocess och i C API inkluderar:"

msgid ""
"The Python source tree was converted from CVS to Subversion,  in a complex "
"migration procedure that was supervised and flawlessly carried out by Martin "
"von Löwis.  The procedure was developed as :pep:`347`."
msgstr ""
"Pythons källträd konverterades från CVS till Subversion, i en komplex "
"migreringsprocedur som övervakades och genomfördes felfritt av Martin von "
"Löwis.  Proceduren utvecklades som :pep:`347`."

msgid ""
"Coverity, a company that markets a source code analysis tool called Prevent, "
"provided the results of their examination of the Python source code.  The "
"analysis found about 60 bugs that  were quickly fixed.  Many of the bugs "
"were refcounting problems, often occurring in error-handling code.  See "
"https://scan.coverity.com for the statistics."
msgstr ""
"Coverity, ett företag som marknadsför ett verktyg för källkodsanalys kallat "
"Prevent, har redovisat resultatet av sin undersökning av Pythons källkod.  "
"Analysen visade att det fanns ett 60-tal buggar som snabbt åtgärdades.  "
"Många av buggarna var problem med återräkning och uppstod ofta i "
"felhanteringskod.  Se https://scan.coverity.com för statistik."

msgid ""
"The largest change to the C API came from :pep:`353`, which modifies the "
"interpreter to use a :c:type:`Py_ssize_t` type definition instead of :c:expr:"
"`int`.  See the earlier section :ref:`pep-353` for a discussion of this "
"change."
msgstr ""
"Den största ändringen i C API:et kom från :pep:`353`, som ändrar tolken så "
"att den använder en :c:type:`Py_ssize_t`-typdefinition istället för :c:expr:"
"`int`.  Se det tidigare avsnittet :ref:`pep-353` för en diskussion om denna "
"ändring."

msgid ""
"The design of the bytecode compiler has changed a great deal,  no longer "
"generating bytecode by traversing the parse tree.  Instead the parse tree is "
"converted to an abstract syntax tree (or AST), and it is  the abstract "
"syntax tree that's traversed to produce the bytecode."
msgstr ""
"Bytekodkompilatorns design har ändrats en hel del. Den genererar inte längre "
"bytekod genom att genomkorsa parseträdet.  Istället konverteras parseträdet "
"till ett abstrakt syntaxträd (eller AST), och det är det abstrakta "
"syntaxträdet som genomkorsas för att producera bytekoden."

msgid ""
"It's possible for Python code to obtain AST objects by using the :func:"
"`compile` built-in and specifying ``_ast.PyCF_ONLY_AST`` as the value of "
"the  *flags* parameter::"
msgstr ""
"Det är möjligt för Python-kod att få AST-objekt genom att använda den "
"inbyggda :func:`compile` och ange ``_ast.PyCF_ONLY_AST`` som värdet på "
"parametern *flags*::"

msgid ""
"from _ast import PyCF_ONLY_AST\n"
"ast = compile(\"\"\"a=0\n"
"for i in range(10):\n"
"    a += i\n"
"\"\"\", \"<string>\", 'exec', PyCF_ONLY_AST)\n"
"\n"
"assignment = ast.body[0]\n"
"for_loop = ast.body[1]"
msgstr ""
"from _ast import PyCF_ONLY_AST\n"
"ast = kompilera(\"\"\"a=0\n"
"för i i intervall(10):\n"
"    a += i\n"
"\"\"\", \"<string>\", 'exec', PyCF_ONLY_AST)\n"
"\n"
"uppdrag = ast.body[0]\n"
"for_loop = ast.body[1]"

msgid ""
"No official documentation has been written for the AST code yet, but :pep:"
"`339` discusses the design.  To start learning about the code, read the "
"definition of the various AST nodes in :file:`Parser/Python.asdl`.  A Python "
"script reads this file and generates a set of C structure definitions in :"
"file:`Include/Python-ast.h`.  The :c:func:`PyParser_ASTFromString` and :c:"
"func:`!PyParser_ASTFromFile`, defined in :file:`Include/pythonrun.h`, take "
"Python source as input and return the root of an AST representing the "
"contents. This AST can then be turned into a code object by :c:func:`!"
"PyAST_Compile`.  For more information, read the source code, and then ask "
"questions on python-dev."
msgstr ""
"Ingen officiell dokumentation har ännu skrivits för AST-koden, men :pep:"
"`339` diskuterar designen.  Om du vill börja lära dig mer om koden kan du "
"läsa definitionen av de olika AST-noderna i :file:`Parser/Python.asdl`.  Ett "
"Python-skript läser denna fil och genererar en uppsättning C-"
"strukturdefinitioner i :file:`Include/Python-ast.h`.  :c:func:"
"`PyParser_ASTFromString` och :c:func:`!PyParser_ASTFromFile`, definierade i :"
"file:`Include/pythonrun.h`, tar Python-källan som indata och returnerar "
"roten till en AST som representerar innehållet. Denna AST kan sedan "
"omvandlas till ett kodobjekt med :c:func:`!PyAST_Compile`.  För mer "
"information, läs källkoden och ställ sedan frågor på python-dev."

msgid ""
"The AST code was developed under Jeremy Hylton's management, and implemented "
"by (in alphabetical order) Brett Cannon, Nick Coghlan, Grant Edwards, John "
"Ehresman, Kurt Kaiser, Neal Norwitz, Tim Peters, Armin Rigo, and Neil "
"Schemenauer, plus the participants in a number of AST sprints at conferences "
"such as PyCon."
msgstr ""
"AST-koden utvecklades under Jeremy Hyltons ledning och implementerades av (i "
"alfabetisk ordning) Brett Cannon, Nick Coghlan, Grant Edwards, John "
"Ehresman, Kurt Kaiser, Neal Norwitz, Tim Peters, Armin Rigo och Neil "
"Schemenauer, plus deltagarna i ett antal AST-sprintar vid konferenser som "
"PyCon."

msgid ""
"Evan Jones's patch to obmalloc, first described in a talk at PyCon DC 2005, "
"was applied.  Python 2.4 allocated small objects in 256K-sized arenas, but "
"never freed arenas.  With this patch, Python will free arenas when they're "
"empty.  The net effect is that on some platforms, when you allocate many "
"objects, Python's memory usage may actually drop when you delete them and "
"the memory may be returned to the operating system.  (Implemented by Evan "
"Jones, and reworked by Tim Peters.)"
msgstr ""
"Evan Jones patch till obmalloc, som först beskrevs i ett föredrag på PyCon "
"DC 2005, tillämpades.  Python 2.4 allokerade små objekt i 256K stora arenor, "
"men frigjorde aldrig arenor.  Med denna patch kommer Python att frigöra "
"arenor när de är tomma.  Nettoeffekten är att på vissa plattformar, när du "
"allokerar många objekt, kan Pythons minnesanvändning faktiskt minska när du "
"tar bort dem och minnet kan returneras till operativsystemet.  "
"(Implementerad av Evan Jones och omarbetad av Tim Peters)"

msgid ""
"Note that this change means extension modules must be more careful when "
"allocating memory.  Python's API has many different functions for allocating "
"memory that are grouped into families.  For example, :c:func:"
"`PyMem_Malloc`, :c:func:`PyMem_Realloc`, and :c:func:`PyMem_Free` are one "
"family that allocates raw memory, while :c:func:`PyObject_Malloc`, :c:func:"
"`PyObject_Realloc`, and :c:func:`PyObject_Free` are another family that's "
"supposed to be used for creating Python objects."
msgstr ""
"Observera att denna ändring innebär att tilläggsmoduler måste vara mer "
"försiktiga när de allokerar minne.  Pythons API har många olika funktioner "
"för att allokera minne som är grupperade i familjer.  Till exempel är :c:"
"func:`PyMem_Malloc`, :c:func:`PyMem_Realloc` och :c:func:`PyMem_Free` en "
"familj som allokerar råminne, medan :c:func:`PyObject_Malloc`, :c:func:"
"`PyObject_Realloc` och :c:func:`PyObject_Free` är en annan familj som ska "
"användas för att skapa Python-objekt."

msgid ""
"Previously these different families all reduced to the platform's :c:func:"
"`malloc` and :c:func:`free` functions.  This meant  it didn't matter if you "
"got things wrong and allocated memory with the ``PyMem`` function but freed "
"it with the ``PyObject`` function.  With 2.5's changes to obmalloc, these "
"families now do different things and mismatches will probably result in a "
"segfault.  You should carefully test your C extension modules with Python "
"2.5."
msgstr ""
"Tidigare reducerades alla dessa olika familjer till plattformens funktioner :"
"c:func:`malloc` och :c:func:`free`.  Detta innebar att det inte spelade "
"någon roll om du gjorde fel och allokerade minne med funktionen ``PyMem`` "
"men frigjorde det med funktionen ``PyObject``.  Med 2.5:s ändringar av "
"obmalloc gör dessa familjer nu olika saker och felmatchningar kommer "
"förmodligen att resultera i ett segfault.  Du bör noggrant testa dina C-"
"tilläggsmoduler med Python 2.5."

msgid ""
"The built-in set types now have an official C API.  Call :c:func:`PySet_New` "
"and :c:func:`PyFrozenSet_New` to create a new set, :c:func:`PySet_Add` and :"
"c:func:`PySet_Discard` to add and remove elements, and :c:func:"
"`PySet_Contains` and :c:func:`PySet_Size` to examine the set's state. "
"(Contributed by Raymond Hettinger.)"
msgstr ""
"De inbyggda set-typerna har nu ett officiellt C API.  Anropa :c:func:"
"`PySet_New` och :c:func:`PyFrozenSet_New` för att skapa en ny uppsättning, :"
"c:func:`PySet_Add` och :c:func:`PySet_Discard` för att lägga till och ta "
"bort element, och :c:func:`PySet_Contains` och :c:func:`PySet_Size` för att "
"undersöka uppsättningens tillstånd. (Bidrag från Raymond Hettinger.)"

msgid ""
"C code can now obtain information about the exact revision of the Python "
"interpreter by calling the  :c:func:`Py_GetBuildInfo` function that returns "
"a string of build information like this: ``\"trunk:45355:45356M, Apr 13 "
"2006, 07:42:19\"``.   (Contributed by Barry Warsaw.)"
msgstr ""
"C-kod kan nu få information om den exakta revisionen av Python-tolken genom "
"att anropa funktionen :c:func:`Py_GetBuildInfo` som returnerar en sträng med "
"bygginformation som denna: ``\"trunk:45355:45356M, Apr 13 2006, "
"07:42:19\"``.   (Bidrag från Barry Warsaw.)"

msgid ""
"Two new macros can be used to indicate C functions that are local to the "
"current file so that a faster calling convention can be used. "
"``Py_LOCAL(type)`` declares the function as returning a value of the "
"specified *type* and uses a fast-calling qualifier. "
"``Py_LOCAL_INLINE(type)`` does the same thing and also requests the function "
"be inlined.  If macro :c:macro:`!PY_LOCAL_AGGRESSIVE` is defined before :"
"file:`python.h` is included, a set of more aggressive optimizations are "
"enabled for the module; you should benchmark the results to find out if "
"these optimizations actually make the code faster.  (Contributed by Fredrik "
"Lundh at the NeedForSpeed sprint.)"
msgstr ""
"Två nya makron kan användas för att ange C-funktioner som är lokala för den "
"aktuella filen så att en snabbare anropskonvention kan användas. "
"``Py_LOCAL(type)`` deklarerar att funktionen returnerar ett värde av den "
"angivna *typen* och använder en snabbuppringningskvalifierare. "
"``Py_LOCAL_INLINE(type)`` gör samma sak och begär också att funktionen ska "
"vara inlined.  Om makro :c:macro:`!PY_LOCAL_AGGRESSIVE` definieras innan :"
"file:`python.h` inkluderas, aktiveras en uppsättning mer aggressiva "
"optimeringar för modulen; du bör jämföra resultaten för att ta reda på om "
"dessa optimeringar faktiskt gör koden snabbare.  (Bidrag från Fredrik Lundh "
"vid NeedForSpeed-sprinten.)"

msgid ""
"``PyErr_NewException(name, base, dict)`` can now accept a tuple of base "
"classes as its *base* argument.  (Contributed by Georg Brandl.)"
msgstr ""
"``PyErr_NewException(name, base, dict)`` kan nu acceptera en tupel av "
"basklasser som sitt *base*-argument.  (Bidrag från Georg Brandl.)"

msgid ""
"The :c:func:`!PyErr_Warn` function for issuing warnings is now deprecated in "
"favour of ``PyErr_WarnEx(category, message, stacklevel)`` which lets you "
"specify the number of stack frames separating this function and the caller.  "
"A *stacklevel* of 1 is the function calling :c:func:`PyErr_WarnEx`, 2 is the "
"function above that, and so forth.  (Added by Neal Norwitz.)"
msgstr ""
"Funktionen :c:func:`!PyErr_Warn` för att utfärda varningar är nu föråldrad "
"till förmån för ``PyErr_WarnEx(category, message, stacklevel)`` som låter "
"dig ange antalet stapelramar som skiljer denna funktion och den som "
"anropar.  En *stacklevel* på 1 är den funktion som anropar :c:func:"
"`PyErr_WarnEx`, 2 är funktionen ovanför den, och så vidare.  (Tillagt av "
"Neal Norwitz.)"

msgid ""
"The CPython interpreter is still written in C, but  the code can now be "
"compiled with a C++ compiler without errors.   (Implemented by Anthony "
"Baxter, Martin von Löwis, Skip Montanaro.)"
msgstr ""
"CPython-tolken är fortfarande skriven i C, men koden kan nu kompileras med "
"en C++-kompilator utan fel.   (Implementerad av Anthony Baxter, Martin von "
"Löwis, Skip Montanaro.)"

msgid ""
"The :c:func:`!PyRange_New` function was removed.  It was never documented, "
"never used in the core code, and had dangerously lax error checking.  In the "
"unlikely case that your extensions were using it, you can replace it by "
"something like the following::"
msgstr ""
"Funktionen :c:func:`!PyRange_New` togs bort.  Den var aldrig dokumenterad, "
"användes aldrig i kärnkoden och hade farligt slapp felkontroll.  I det "
"osannolika fallet att dina tillägg använde den, kan du ersätta den med något "
"som följande::"

msgid ""
"range = PyObject_CallFunction((PyObject*) &PyRange_Type, \"lll\",\n"
"                              start, stop, step);"
msgstr ""
"range = PyObject_CallFunction((PyObject*) &PyRange_Type, \"lll\",\n"
"                              start, stopp, steg);"

msgid "Port-Specific Changes"
msgstr "Hamnspecifika ändringar"

msgid ""
"MacOS X (10.3 and higher): dynamic loading of modules now uses the :c:func:"
"`dlopen` function instead of MacOS-specific functions."
msgstr ""
"MacOS X (10.3 och senare): dynamisk laddning av moduler använder nu "
"funktionen :c:func:`dlopen` istället för MacOS-specifika funktioner."

msgid ""
"MacOS X: an :option:`!--enable-universalsdk` switch was added to the :"
"program:`configure` script that compiles the interpreter as a universal "
"binary able to run on both PowerPC and Intel processors. (Contributed by "
"Ronald Oussoren; :issue:`2573`.)"
msgstr ""
"MacOS X: ett :option:`!--enable-universalsdk`-omkopplingsalternativ lades "
"till i :program:`configure`-skriptet som kompilerar tolken som en universell "
"binär fil som kan köras på både PowerPC- och Intel-processorer. (Bidrag från "
"Ronald Oussoren; :issue:`2573`.)"

msgid ""
"Windows: :file:`.dll` is no longer supported as a filename extension for "
"extension modules.  :file:`.pyd` is now the only filename extension that "
"will be searched for."
msgstr ""
"Windows: :file:`.dll` stöds inte längre som filnamnstillägg för "
"tilläggsmoduler. :file:`.pyd` är nu det enda filnamnstillägget som kommer "
"att sökas efter."

msgid "Porting to Python 2.5"
msgstr "Portning till Python 2.5"

msgid ""
"This section lists previously described changes that may require changes to "
"your code:"
msgstr ""
"I detta avsnitt listas tidigare beskrivna ändringar som kan kräva ändringar "
"i din kod:"

msgid ""
"ASCII is now the default encoding for modules.  It's now  a syntax error if "
"a module contains string literals with 8-bit characters but doesn't have an "
"encoding declaration.  In Python 2.4 this triggered a warning, not a syntax "
"error."
msgstr ""
"ASCII är nu standardkodning för moduler.  Det är nu ett syntaxfel om en "
"modul innehåller stränglitteraler med 8-bitars tecken men inte har en "
"kodningsdeklaration.  I Python 2.4 utlöste detta en varning, inte ett "
"syntaxfel."

msgid ""
"Previously, the :attr:`gi_frame` attribute of a generator was always a frame "
"object.  Because of the :pep:`342` changes described in section :ref:"
"`pep-342`, it's now possible for :attr:`gi_frame` to be ``None``."
msgstr ""
"Tidigare var attributet :attr:`gi_frame` för en generator alltid ett frame-"
"objekt.  På grund av ändringarna i :pep:`342` som beskrivs i avsnitt :ref:"
"`pep-342`, är det nu möjligt för :attr:`gi_frame` att vara ``None``."

msgid ""
"A new warning, :class:`UnicodeWarning`, is triggered when  you attempt to "
"compare a Unicode string and an 8-bit string that can't be converted to "
"Unicode using the default ASCII encoding.  Previously such comparisons would "
"raise a :class:`UnicodeDecodeError` exception."
msgstr ""
"En ny varning, :class:`UnicodeWarning`, utlöses när du försöker jämföra en "
"Unicode-sträng med en 8-bitarssträng som inte kan konverteras till Unicode "
"med standardkodningen ASCII.  Tidigare ledde sådana jämförelser till ett :"
"class:`UnicodeDecodeError`-undantag."

msgid ""
"Library: the :mod:`csv` module is now stricter about multi-line quoted "
"fields. If your files contain newlines embedded within fields, the input "
"should be split into lines in a manner which preserves the newline "
"characters."
msgstr ""
"Bibliotek: Modulen :mod:`csv` är nu strängare när det gäller citerade fält "
"med flera rader. Om dina filer innehåller nya rader inbäddade i fält, bör "
"inmatningen delas upp i rader på ett sätt som bevarar de nya raderna."

msgid ""
"Library: the :mod:`locale` module's  :func:`format` function's would "
"previously  accept any string as long as no more than one %char specifier "
"appeared.  In Python 2.5, the argument must be exactly one %char specifier "
"with no surrounding text."
msgstr ""
"Bibliotek: :mod:`locale`-modulens :func:`format`-funktioner accepterade "
"tidigare vilken sträng som helst så länge det inte fanns mer än en %char-"
"angivelse.  I Python 2.5 måste argumentet vara exakt en %char-angivelse utan "
"omgivande text."

msgid ""
"Library: The :mod:`pickle` and :mod:`!cPickle` modules no longer accept a "
"return value of ``None`` from the :meth:`~object.__reduce__` method; the "
"method must return a tuple of arguments instead.  The modules also no longer "
"accept the deprecated *bin* keyword parameter."
msgstr ""
"Bibliotek: Modulerna :mod:`pickle` och :mod:`!cPickle` accepterar inte "
"längre ett returvärde på ``None`` från metoden :meth:`~object.__reduce__`; "
"metoden måste returnera en tupel av argument istället.  Modulerna accepterar "
"inte heller längre den föråldrade nyckelordsparametern *bin*."

msgid ""
"Library: The :mod:`SimpleXMLRPCServer <xmlrpc.server>` and :mod:"
"`DocXMLRPCServer <xmlrpc.server>`  classes now have a :attr:`rpc_paths` "
"attribute that constrains XML-RPC operations to a limited set of URL paths; "
"the default is to allow only ``'/'`` and ``'/RPC2'``. Setting  :attr:"
"`rpc_paths` to ``None`` or an empty tuple disables  this path checking."
msgstr ""
"Bibliotek: Klasserna :mod:`SimpleXMLRPCServer <xmlrpc.server>` och :mod:"
"`DocXMLRPCServer <xmlrpc.server>` har nu attributet :attr:`rpc_paths` som "
"begränsar XML-RPC-operationer till en begränsad uppsättning URL-sökvägar; "
"standard är att endast tillåta ``'/'`` och ``'/RPC2'``. Om :attr:`rpc_paths` "
"sätts till ``None`` eller en tom tupel inaktiveras denna sökvägskontroll."

msgid ""
"C API: Many functions now use :c:type:`Py_ssize_t`  instead of :c:expr:`int` "
"to allow processing more data on 64-bit machines.  Extension code may need "
"to make the same change to avoid warnings and to support 64-bit machines.  "
"See the earlier section :ref:`pep-353` for a discussion of this change."
msgstr ""
"C API: Många funktioner använder nu :c:type:`Py_ssize_t` istället för :c:"
"expr:`int` för att möjliggöra bearbetning av mer data på 64-bitars "
"maskiner.  Tilläggskod kan behöva göra samma ändring för att undvika "
"varningar och för att stödja 64-bitars maskiner.  Se det tidigare avsnittet :"
"ref:`pep-353` för en diskussion om den här ändringen."

msgid ""
"C API:  The obmalloc changes mean that  you must be careful to not mix usage "
"of the ``PyMem_*`` and ``PyObject_*`` families of functions. Memory "
"allocated with  one family's ``*_Malloc`` must be  freed with the "
"corresponding family's ``*_Free`` function."
msgstr ""
"C API:  Ändringarna i obmalloc innebär att du måste vara försiktig så att du "
"inte blandar användningen av funktionsfamiljerna ``PyMem_*`` och "
"``PyObject_*``. Minne som allokerats med en familjs ``*_Malloc`` måste "
"frigöras med motsvarande familjs ``*_Free``-funktion."

msgid "Acknowledgements"
msgstr "Tack till"

msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Georg Brandl, Nick Coghlan, Phillip J. Eby, Lars Gustäbel, Raymond "
"Hettinger, Ralf W. Grosse-Kunstleve, Kent Johnson, Iain Lowe, Martin von "
"Löwis, Fredrik Lundh, Andrew McNamara, Skip Montanaro, Gustavo Niemeyer, "
"Paul Prescod, James Pryor, Mike Rovner, Scott Weikart, Barry Warsaw, Thomas "
"Wouters."
msgstr ""
"Författaren vill tacka följande personer för förslag, korrigeringar och "
"hjälp med olika utkast av denna artikel: Georg Brandl, Nick Coghlan, Phillip "
"J. Eby, Lars Gustäbel, Raymond Hettinger, Ralf W. Grosse-Kunstleve, Kent "
"Johnson, Iain Lowe, Martin von Löwis, Fredrik Lundh, Andrew McNamara, Skip "
"Montanaro, Gustavo Niemeyer, Paul Prescod, James Pryor, Mike Rovner, Scott "
"Weikart, Barry Warsaw, Thomas Wouters."

msgid "universal newlines"
msgstr "universella nya rader"

msgid "What's new"
msgstr "Vad är nytt"
