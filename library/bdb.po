# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-19 14:18+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!bdb` --- Debugger framework"
msgstr ""

msgid "**Source code:** :source:`Lib/bdb.py`"
msgstr ""

msgid ""
"The :mod:`bdb` module handles basic debugger functions, like setting "
"breakpoints or managing execution via the debugger."
msgstr ""

msgid "The following exception is defined:"
msgstr ""

msgid "Exception raised by the :class:`Bdb` class for quitting the debugger."
msgstr ""

msgid "The :mod:`bdb` module also defines two classes:"
msgstr ""

msgid ""
"This class implements temporary breakpoints, ignore counts, disabling and "
"(re-)enabling, and conditionals."
msgstr ""

msgid ""
"Breakpoints are indexed by number through a list called :attr:`bpbynumber` "
"and by ``(file, line)`` pairs through :attr:`bplist`.  The former points to "
"a single instance of class :class:`Breakpoint`.  The latter points to a list "
"of such instances since there may be more than one breakpoint per line."
msgstr ""

msgid ""
"When creating a breakpoint, its associated :attr:`file name <file>` should "
"be in canonical form.  If a :attr:`funcname` is defined, a breakpoint :attr:"
"`hit <hits>` will be counted when the first line of that function is "
"executed.  A :attr:`conditional <cond>` breakpoint always counts a :attr:"
"`hit <hits>`."
msgstr ""

msgid ":class:`Breakpoint` instances have the following methods:"
msgstr ""

msgid ""
"Delete the breakpoint from the list associated to a file/line.  If it is the "
"last breakpoint in that position, it also deletes the entry for the file/"
"line."
msgstr ""

msgid "Mark the breakpoint as enabled."
msgstr ""

msgid "Mark the breakpoint as disabled."
msgstr ""

msgid ""
"Return a string with all the information about the breakpoint, nicely "
"formatted:"
msgstr ""

msgid "Breakpoint number."
msgstr ""

msgid "Temporary status (del or keep)."
msgstr ""

msgid "File/line position."
msgstr ""

msgid "Break condition."
msgstr ""

msgid "Number of times to ignore."
msgstr ""

msgid "Number of times hit."
msgstr ""

msgid ""
"Print the output of :meth:`bpformat` to the file *out*, or if it is "
"``None``, to standard output."
msgstr ""

msgid ":class:`Breakpoint` instances have the following attributes:"
msgstr ""

msgid "File name of the :class:`Breakpoint`."
msgstr ""

msgid "Line number of the :class:`Breakpoint` within :attr:`file`."
msgstr ""

msgid "``True`` if a :class:`Breakpoint` at (file, line) is temporary."
msgstr ""

msgid "Condition for evaluating a :class:`Breakpoint` at (file, line)."
msgstr ""

msgid ""
"Function name that defines whether a :class:`Breakpoint` is hit upon "
"entering the function."
msgstr ""

msgid "``True`` if :class:`Breakpoint` is enabled."
msgstr ""

msgid "Numeric index for a single instance of a :class:`Breakpoint`."
msgstr ""

msgid ""
"Dictionary of :class:`Breakpoint` instances indexed by (:attr:`file`, :attr:"
"`line`) tuples."
msgstr ""

msgid "Number of times to ignore a :class:`Breakpoint`."
msgstr ""

msgid "Count of the number of times a :class:`Breakpoint` has been hit."
msgstr ""

msgid "The :class:`Bdb` class acts as a generic Python debugger base class."
msgstr ""

msgid ""
"This class takes care of the details of the trace facility; a derived class "
"should implement user interaction.  The standard debugger class (:class:`pdb."
"Pdb`) is an example."
msgstr ""

msgid ""
"The *skip* argument, if given, must be an iterable of glob-style module name "
"patterns.  The debugger will not step into frames that originate in a module "
"that matches one of these patterns. Whether a frame is considered to "
"originate in a certain module is determined by the ``__name__`` in the frame "
"globals."
msgstr ""

msgid ""
"The *backend* argument specifies the backend to use for :class:`Bdb`. It can "
"be either ``'settrace'`` or ``'monitoring'``. ``'settrace'`` uses :func:`sys."
"settrace` which has the best backward compatibility. The ``'monitoring'`` "
"backend uses the new :mod:`sys.monitoring` that was introduced in Python "
"3.12, which can be much more efficient because it can disable unused events. "
"We are trying to keep the exact interfaces for both backends, but there are "
"some differences. The debugger developers are encouraged to use the "
"``'monitoring'`` backend to achieve better performance."
msgstr ""

msgid "Added the *skip* parameter."
msgstr ""

msgid "Added the *backend* parameter."
msgstr ""

msgid ""
"The following methods of :class:`Bdb` normally don't need to be overridden."
msgstr ""

msgid "Return canonical form of *filename*."
msgstr ""

msgid ""
"For real file names, the canonical form is an operating-system-dependent, :"
"func:`case-normalized <os.path.normcase>` :func:`absolute path <os.path."
"abspath>`. A *filename* with angle brackets, such as ``\"<stdin>\"`` "
"generated in interactive mode, is returned unchanged."
msgstr ""

msgid ""
"Start tracing. For ``'settrace'`` backend, this method is equivalent to "
"``sys.settrace(self.trace_dispatch)``"
msgstr ""

msgid ""
"Stop tracing. For ``'settrace'`` backend, this method is equivalent to ``sys."
"settrace(None)``"
msgstr ""

msgid ""
"Set the :attr:`!botframe`, :attr:`!stopframe`, :attr:`!returnframe` and :"
"attr:`quitting <Bdb.set_quit>` attributes with values ready to start "
"debugging."
msgstr ""

msgid ""
"This function is installed as the trace function of debugged frames.  Its "
"return value is the new trace function (in most cases, that is, itself)."
msgstr ""

msgid ""
"The default implementation decides how to dispatch a frame, depending on the "
"type of event (passed as a string) that is about to be executed. *event* can "
"be one of the following:"
msgstr ""

msgid "``\"line\"``: A new line of code is going to be executed."
msgstr ""

msgid ""
"``\"call\"``: A function is about to be called, or another code block "
"entered."
msgstr ""

msgid "``\"return\"``: A function or other code block is about to return."
msgstr ""

msgid "``\"exception\"``: An exception has occurred."
msgstr ""

msgid "``\"c_call\"``: A C function is about to be called."
msgstr ""

msgid "``\"c_return\"``: A C function has returned."
msgstr ""

msgid "``\"c_exception\"``: A C function has raised an exception."
msgstr ""

msgid ""
"For the Python events, specialized functions (see below) are called.  For "
"the C events, no action is taken."
msgstr ""

msgid "The *arg* parameter depends on the previous event."
msgstr ""

msgid ""
"See the documentation for :func:`sys.settrace` for more information on the "
"trace function.  For more information on code and frame objects, refer to :"
"ref:`types`."
msgstr ""

msgid ""
"If the debugger should stop on the current line, invoke the :meth:"
"`user_line` method (which should be overridden in subclasses). Raise a :exc:"
"`BdbQuit` exception if the :attr:`quitting  <Bdb.set_quit>` flag is set "
"(which can be set from :meth:`user_line`).  Return a reference to the :meth:"
"`trace_dispatch` method for further tracing in that scope."
msgstr ""

msgid ""
"If the debugger should stop on this function call, invoke the :meth:"
"`user_call` method (which should be overridden in subclasses). Raise a :exc:"
"`BdbQuit` exception if the :attr:`quitting  <Bdb.set_quit>` flag is set "
"(which can be set from :meth:`user_call`).  Return a reference to the :meth:"
"`trace_dispatch` method for further tracing in that scope."
msgstr ""

msgid ""
"If the debugger should stop on this function return, invoke the :meth:"
"`user_return` method (which should be overridden in subclasses). Raise a :"
"exc:`BdbQuit` exception if the :attr:`quitting  <Bdb.set_quit>` flag is set "
"(which can be set from :meth:`user_return`).  Return a reference to the :"
"meth:`trace_dispatch` method for further tracing in that scope."
msgstr ""

msgid ""
"If the debugger should stop at this exception, invokes the :meth:"
"`user_exception` method (which should be overridden in subclasses). Raise a :"
"exc:`BdbQuit` exception if the :attr:`quitting  <Bdb.set_quit>` flag is set "
"(which can be set from :meth:`user_exception`).  Return a reference to the :"
"meth:`trace_dispatch` method for further tracing in that scope."
msgstr ""

msgid ""
"Normally derived classes don't override the following methods, but they may "
"if they want to redefine the definition of stopping and breakpoints."
msgstr ""

msgid "Return ``True`` if *module_name* matches any skip pattern."
msgstr ""

msgid "Return ``True`` if *frame* is below the starting frame in the stack."
msgstr ""

msgid "Return ``True`` if there is an effective breakpoint for this line."
msgstr ""

msgid ""
"Check whether a line or function breakpoint exists and is in effect.  Delete "
"temporary breakpoints based on information from :func:`effective`."
msgstr ""

msgid "Return ``True`` if any breakpoint exists for *frame*'s filename."
msgstr ""

msgid ""
"Derived classes should override these methods to gain control over debugger "
"operation."
msgstr ""

msgid ""
"Called from :meth:`dispatch_call` if a break might stop inside the called "
"function."
msgstr ""

msgid ""
"*argument_list* is not used anymore and will always be ``None``. The "
"argument is kept for backwards compatibility."
msgstr ""

msgid ""
"Called from :meth:`dispatch_line` when either :meth:`stop_here` or :meth:"
"`break_here` returns ``True``."
msgstr ""

msgid ""
"Called from :meth:`dispatch_return` when :meth:`stop_here` returns ``True``."
msgstr ""

msgid ""
"Called from :meth:`dispatch_exception` when :meth:`stop_here` returns "
"``True``."
msgstr ""

msgid "Handle how a breakpoint must be removed when it is a temporary one."
msgstr ""

msgid "This method must be implemented by derived classes."
msgstr ""

msgid ""
"Derived classes and clients can call the following methods to affect the "
"stepping state."
msgstr ""

msgid "Stop after one line of code."
msgstr ""

msgid "Stop on the next line in or below the given frame."
msgstr ""

msgid "Stop when returning from the given frame."
msgstr ""

msgid ""
"Stop when the line with the *lineno* greater than the current one is reached "
"or when returning from current frame."
msgstr ""

msgid ""
"Start debugging from *frame*.  If *frame* is not specified, debugging starts "
"from caller's frame."
msgstr ""

msgid ""
":func:`set_trace` will enter the debugger immediately, rather than on the "
"next line of code to be executed."
msgstr ""

msgid ""
"Stop only at breakpoints or when finished.  If there are no breakpoints, set "
"the system trace function to ``None``."
msgstr ""

msgid ""
"Set the :attr:`!quitting` attribute to ``True``.  This raises :exc:`BdbQuit` "
"in the next call to one of the :meth:`!dispatch_\\*` methods."
msgstr ""

msgid ""
"Derived classes and clients can call the following methods to manipulate "
"breakpoints.  These methods return a string containing an error message if "
"something went wrong, or ``None`` if all is well."
msgstr ""

msgid ""
"Set a new breakpoint.  If the *lineno* line doesn't exist for the *filename* "
"passed as argument, return an error message.  The *filename* should be in "
"canonical form, as described in the :meth:`canonic` method."
msgstr ""

msgid ""
"Delete the breakpoints in *filename* and *lineno*.  If none were set, return "
"an error message."
msgstr ""

msgid ""
"Delete the breakpoint which has the index *arg* in the :attr:`Breakpoint."
"bpbynumber`.  If *arg* is not numeric or out of range, return an error "
"message."
msgstr ""

msgid ""
"Delete all breakpoints in *filename*.  If none were set, return an error "
"message."
msgstr ""

msgid ""
"Delete all existing breakpoints.  If none were set, return an error message."
msgstr ""

msgid ""
"Return a breakpoint specified by the given number.  If *arg* is a string, it "
"will be converted to a number.  If *arg* is a non-numeric string, if the "
"given breakpoint never existed or has been deleted, a :exc:`ValueError` is "
"raised."
msgstr ""

msgid "Return ``True`` if there is a breakpoint for *lineno* in *filename*."
msgstr ""

msgid ""
"Return all breakpoints for *lineno* in *filename*, or an empty list if none "
"are set."
msgstr ""

msgid "Return all breakpoints in *filename*, or an empty list if none are set."
msgstr ""

msgid "Return all breakpoints that are set."
msgstr ""

msgid ""
"Derived classes and clients can call the following methods to disable and "
"restart events to achieve better performance. These methods only work when "
"using the ``'monitoring'`` backend."
msgstr ""

msgid ""
"Disable the current event until the next time :func:`restart_events` is "
"called. This is helpful when the debugger is not interested in the current "
"line."
msgstr ""

msgid ""
"Restart all the disabled events. This function is automatically called in "
"``dispatch_*`` methods after ``user_*`` methods are called. If the "
"``dispatch_*`` methods are not overridden, the disabled events will be "
"restarted after each user interaction."
msgstr ""

msgid ""
"Derived classes and clients can call the following methods to get a data "
"structure representing a stack trace."
msgstr ""

msgid "Return a list of (frame, lineno) tuples in a stack trace, and a size."
msgstr ""

msgid ""
"The most recently called frame is last in the list. The size is the number "
"of frames below the frame where the debugger was invoked."
msgstr ""

msgid ""
"Return a string with information about a stack entry, which is a ``(frame, "
"lineno)`` tuple.  The return string contains:"
msgstr ""

msgid "The canonical filename which contains the frame."
msgstr ""

msgid "The function name or ``\"<lambda>\"``."
msgstr ""

msgid "The input arguments."
msgstr ""

msgid "The return value."
msgstr ""

msgid "The line of code (if it exists)."
msgstr ""

msgid ""
"The following two methods can be called by clients to use a debugger to "
"debug a :term:`statement`, given as a string."
msgstr ""

msgid ""
"Debug a statement executed via the :func:`exec` function.  *globals* "
"defaults to :attr:`!__main__.__dict__`, *locals* defaults to *globals*."
msgstr ""

msgid ""
"Debug an expression executed via the :func:`eval` function.  *globals* and "
"*locals* have the same meaning as in :meth:`run`."
msgstr ""

msgid "For backwards compatibility.  Calls the :meth:`run` method."
msgstr ""

msgid "Debug a single function call, and return its result."
msgstr ""

msgid "Finally, the module defines the following functions:"
msgstr ""

msgid ""
"Return ``True`` if we should break here, depending on the way the :class:"
"`Breakpoint` *b* was set."
msgstr ""

msgid ""
"If it was set via line number, it checks if :attr:`b.line <bdb.Breakpoint."
"line>` is the same as the one in *frame*. If the breakpoint was set via :"
"attr:`function name <bdb.Breakpoint.funcname>`, we have to check we are in "
"the right *frame* (the right function) and if we are on its first executable "
"line."
msgstr ""

msgid ""
"Return ``(active breakpoint, delete temporary flag)`` or ``(None, None)`` as "
"the breakpoint to act upon."
msgstr ""

msgid ""
"The *active breakpoint* is the first entry in :attr:`bplist <bdb.Breakpoint."
"bplist>` for the (:attr:`file <bdb.Breakpoint.file>`, :attr:`line <bdb."
"Breakpoint.line>`) (which must exist) that is :attr:`enabled <bdb.Breakpoint."
"enabled>`, for which :func:`checkfuncname` is true, and that has neither a "
"false :attr:`condition <bdb.Breakpoint.cond>` nor positive :attr:`ignore "
"<bdb.Breakpoint.ignore>` count.  The *flag*, meaning that a temporary "
"breakpoint should be deleted, is ``False`` only when the :attr:`cond <bdb."
"Breakpoint.cond>` cannot be evaluated (in which case, :attr:`ignore <bdb."
"Breakpoint.ignore>` count is ignored)."
msgstr ""

msgid "If no such entry exists, then ``(None, None)`` is returned."
msgstr ""

msgid "Start debugging with a :class:`Bdb` instance from caller's frame."
msgstr ""

msgid "quitting (bdb.Bdb attribute)"
msgstr ""
