# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Python support for the Linux ``perf`` profiler"
msgstr "Python-stöd för Linux-profileraren ``perf``"

msgid "author"
msgstr "författare"

msgid "Pablo Galindo"
msgstr "Pablo Galindo"

msgid ""
"`The Linux perf profiler <https://perf.wiki.kernel.org>`_ is a very powerful "
"tool that allows you to profile and obtain information about the performance "
"of your application. ``perf`` also has a very vibrant ecosystem of tools "
"that aid with the analysis of the data that it produces."
msgstr ""
"linux perf profiler <https://perf.wiki.kernel.org>`_ är ett mycket "
"kraftfullt verktyg som gör att du kan profilera och få information om "
"prestandan i din applikation. ``perf`` har också ett mycket levande "
"ekosystem av verktyg som hjälper till med analysen av de data som den "
"producerar."

msgid ""
"The main problem with using the ``perf`` profiler with Python applications "
"is that ``perf`` only gets information about native symbols, that is, the "
"names of functions and procedures written in C. This means that the names "
"and file names of Python functions in your code will not appear in the "
"output of ``perf``."
msgstr ""
"Det största problemet med att använda profileraren ``perf`` med Python-"
"program är att ``perf`` bara får information om inbyggda symboler, det vill "
"säga namnen på funktioner och procedurer skrivna i C. Det innebär att namnen "
"och filnamnen på Python-funktioner i din kod inte kommer att visas i utdata "
"från ``perf``."

msgid ""
"Since Python 3.12, the interpreter can run in a special mode that allows "
"Python functions to appear in the output of the ``perf`` profiler. When this "
"mode is enabled, the interpreter will interpose a small piece of code "
"compiled on the fly before the execution of every Python function and it "
"will teach ``perf`` the relationship between this piece of code and the "
"associated Python function using :doc:`perf map files <../c-api/perfmaps>`."
msgstr ""
"Sedan Python 3.12 kan tolken köras i ett speciellt läge som gör att Python-"
"funktioner kan visas i utdata från profileraren ``perf``. När detta läge är "
"aktiverat kommer tolken att lägga in en liten kodbit som kompileras i farten "
"före exekveringen av varje Python-funktion och den kommer att lära ``perf`` "
"förhållandet mellan denna kodbit och den associerade Python-funktionen med "
"hjälp av :doc:`perf map files <../c-api/perfmaps>`."

msgid ""
"Support for the ``perf`` profiler is currently only available for Linux on "
"select architectures. Check the output of the ``configure`` build step or "
"check the output of ``python -m sysconfig | grep HAVE_PERF_TRAMPOLINE`` to "
"see if your system is supported."
msgstr ""
"Stöd för profileraren ``perf`` finns för närvarande endast för Linux på "
"utvalda arkitekturer. Kontrollera utdata från byggsteget ``configure`` eller "
"kontrollera utdata från ``python -m sysconfig | grep HAVE_PERF_TRAMPOLINE`` "
"för att se om ditt system stöds."

msgid "For example, consider the following script:"
msgstr "Tänk till exempel på följande skript:"

msgid ""
"def foo(n):\n"
"    result = 0\n"
"    for _ in range(n):\n"
"        result += 1\n"
"    return result\n"
"\n"
"def bar(n):\n"
"    foo(n)\n"
"\n"
"def baz(n):\n"
"    bar(n)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    baz(1000000)"
msgstr ""
"def foo(n):\n"
"    resultat = 0\n"
"    för _ i intervall(n):\n"
"        resultat += 1\n"
"    returnera resultat\n"
"\n"
"def bar(n):\n"
"    foo(n)\n"
"\n"
"def baz(n):\n"
"    bar(n)\n"
"\n"
"om __name__ == \"__main__\":\n"
"    baz(1000000)"

msgid "We can run ``perf`` to sample CPU stack traces at 9999 hertz::"
msgstr ""
"Vi kan köra ``perf`` för att prova CPU-stackspårningar vid 9999 hertz::"

msgid "$ perf record -F 9999 -g -o perf.data python my_script.py"
msgstr "$ perf record -F 9999 -g -o perf.data python my_script.py"

msgid "Then we can use ``perf report`` to analyze the data:"
msgstr "Sedan kan vi använda ``perf report`` för att analysera data:"

msgid ""
"$ perf report --stdio -n -g\n"
"\n"
"# Children      Self       Samples  Command     Shared Object       Symbol\n"
"# ........  ........  ............  ..........  ..................  ..........................................\n"
"#\n"
"    91.08%     0.00%             0  python.exe  python.exe          [.] "
"_start\n"
"            |\n"
"            ---_start\n"
"            |\n"
"                --90.71%--__libc_start_main\n"
"                        Py_BytesMain\n"
"                        |\n"
"                        |--56.88%--pymain_run_python.constprop.0\n"
"                        |          |\n"
"                        |          |--56.13%--_PyRun_AnyFileObject\n"
"                        |          |          _PyRun_SimpleFileObject\n"
"                        |          |          |\n"
"                        |          |          |--55.02%--run_mod\n"
"                        |          |          |          |\n"
"                        |          |          |           --54.65%--"
"PyEval_EvalCode\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     |\n"
"                        |          |          |                     "
"|--51.67%--_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"|          |\n"
"                        |          |          |                     "
"|          |--11.52%--_PyLong_Add\n"
"                        |          |          |                     "
"|          |          |\n"
"                        |          |          |                     "
"|          |          |--2.97%--_PyObject_Malloc\n"
"..."
msgstr ""
"$ perf report --stdio -n -g\n"
"\n"
"# Children Self Samples Command Shared Object Symbol\n"
"# ........ ........ ............ .......... .................. ..........................................\n"
"#\n"
"    91.08%     0.00% 0 python.exe python.exe [.] _start\n"
"            |\n"
"            ---_start\n"
"            |\n"
"                --90.71%--__libc_start_main\n"
"                        Py_BytesMain\n"
"                        |\n"
"                        |--56.88%--pymain_run_python.constprop.0\n"
"                        | |\n"
"                        | |--56.13%--_PyRun_AnyFileObject\n"
"                        | | _PyRun_SimpleFileObject\n"
"                        | | |\n"
"                        | | |--55,02%--run_mod\n"
"                        | | | |\n"
"                        | | | --54,65%--PyEval_EvalCode\n"
"                        | | | _PyEval_EvalFrameDefault\n"
"                        | | PyObject_Vectorcall\n"
"                        | | _PyEval_Vector\n"
"                        | | _PyEval_EvalFrameDefault\n"
"                        | | PyObject_Vectorcall\n"
"                        | | _PyEval_Vector\n"
"                        | | _PyEval_EvalFrameDefault\n"
"                        | | PyObject_Vectorcall\n"
"                        | | _PyEval_Vector\n"
"                        | | | |\n"
"                        | | | |--51,67%--_PyEval_EvalFrameDefault\n"
"                        | | | | |\n"
"                        | | | | |--11,52%--_PyLong_Add\n"
"                        | | | | | |\n"
"                        | | | | | | |--2,97%--_PyObject_Malloc\n"
"..."

msgid ""
"As you can see, the Python functions are not shown in the output, only "
"``_PyEval_EvalFrameDefault`` (the function that evaluates the Python "
"bytecode) shows up. Unfortunately that's not very useful because all Python "
"functions use the same C function to evaluate bytecode so we cannot know "
"which Python function corresponds to which bytecode-evaluating function."
msgstr ""
"Som du kan se visas inte Python-funktionerna i utdata, bara "
"``_PyEval_EvalFrameDefault`` (funktionen som utvärderar Python-bytekoden) "
"visas. Tyvärr är det inte särskilt användbart eftersom alla Python-"
"funktioner använder samma C-funktion för att utvärdera bytecode, så vi kan "
"inte veta vilken Python-funktion som motsvarar vilken bytecode-"
"utvärderingsfunktion."

msgid ""
"Instead, if we run the same experiment with ``perf`` support enabled we get:"
msgstr ""
"Istället, om vi kör samma experiment med ``perf`` support aktiverat får vi:"

msgid ""
"$ perf report --stdio -n -g\n"
"\n"
"# Children      Self       Samples  Command     Shared Object       Symbol\n"
"# ........  ........  ............  ..........  ..................  .....................................................................\n"
"#\n"
"    90.58%     0.36%             1  python.exe  python.exe          [.] "
"_start\n"
"            |\n"
"            ---_start\n"
"            |\n"
"                --89.86%--__libc_start_main\n"
"                        Py_BytesMain\n"
"                        |\n"
"                        |--55.43%--pymain_run_python.constprop.0\n"
"                        |          |\n"
"                        |          |--54.71%--_PyRun_AnyFileObject\n"
"                        |          |          _PyRun_SimpleFileObject\n"
"                        |          |          |\n"
"                        |          |          |--53.62%--run_mod\n"
"                        |          |          |          |\n"
"                        |          |          |           --53.26%--"
"PyEval_EvalCode\n"
"                        |          |          |                     py::"
"<module>:/src/script.py\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     py::baz:/"
"src/script.py\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     py::bar:/"
"src/script.py\n"
"                        |          |          |                     "
"_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"PyObject_Vectorcall\n"
"                        |          |          |                     "
"_PyEval_Vector\n"
"                        |          |          |                     py::foo:/"
"src/script.py\n"
"                        |          |          |                     |\n"
"                        |          |          |                     "
"|--51.81%--_PyEval_EvalFrameDefault\n"
"                        |          |          |                     "
"|          |\n"
"                        |          |          |                     "
"|          |--13.77%--_PyLong_Add\n"
"                        |          |          |                     "
"|          |          |\n"
"                        |          |          |                     "
"|          |          |--3.26%--_PyObject_Malloc"
msgstr ""
"$ perf report --stdio -n -g\n"
"\n"
"# Children Self Samples Command Shared Object Symbol\n"
"# ........ ........ ............ .......... .................. .....................................................................\n"
"#\n"
"    90.58%     0.36% 1 python.exe python.exe [.] _start\n"
"            |\n"
"            ---_start\n"
"            |\n"
"                --89.86%--__libc_start_main\n"
"                        Py_BytesMain\n"
"                        |\n"
"                        |--55.43%--pymain_run_python.constprop.0\n"
"                        | |\n"
"                        | |--54,71%--_PyRun_AnyFileObject\n"
"                        | | _PyRun_SimpleFileObject\n"
"                        | | |\n"
"                        | | |--53,62%--run_mod\n"
"                        | | | |\n"
"                        | | | --53,26%--PyEval_EvalCode\n"
"                        | | | py::<module>:/src/script.py\n"
"                        | | | _PyEval_EvalFrameDefault\n"
"                        | | PyObject_Vectorcall\n"
"                        | | _PyEval_Vector\n"
"                        | | py::baz:/src/script.py\n"
"                        | | _PyEval_EvalFrameDefault\n"
"                        | | PyObject_Vectorcall\n"
"                        | | _PyEval_Vector\n"
"                        | | | py::bar:/src/script.py\n"
"                        | | _PyEval_EvalFrameDefault\n"
"                        | | PyObject_Vectorcall\n"
"                        | | _PyEval_Vector\n"
"                        | | | py::foo:/src/script.py\n"
"                        | | | |\n"
"                        | | | |--51,81%--_PyEval_EvalFrameDefault\n"
"                        | | | | |\n"
"                        | | | | | |--13,77%--_PyLong_Add\n"
"                        | | | | | |\n"
"                        | | | | | | |--3,26%--_PyObject_Malloc"

msgid "How to enable ``perf`` profiling support"
msgstr "Så här aktiverar du profileringsstödet ``perf``"

msgid ""
"``perf`` profiling support can be enabled either from the start using the "
"environment variable :envvar:`PYTHONPERFSUPPORT` or the :option:`-X perf <-"
"X>` option, or dynamically using :func:`sys.activate_stack_trampoline` and :"
"func:`sys.deactivate_stack_trampoline`."
msgstr ""
"profileringsstödet ``perf`` kan aktiveras antingen från början med hjälp av "
"miljövariabeln :envvar:`PYTHONPERFSUPPORT` eller alternativet :option:`-X "
"perf <-X>`, eller dynamiskt med hjälp av :func:`sys."
"activate_stack_trampoline` och :func:`sys.deactivate_stack_trampoline`."

msgid ""
"The :mod:`!sys` functions take precedence over the :option:`!-X` option, "
"the :option:`!-X` option takes precedence over the environment variable."
msgstr ""
"Funktionerna :mod:`!sys` har företräde framför alternativet :option:`!-X`, "
"alternativet :option:`!-X` har företräde framför miljövariabeln."

msgid "Example, using the environment variable::"
msgstr "Exempel, med hjälp av miljövariabeln::"

msgid ""
"$ PYTHONPERFSUPPORT=1 perf record -F 9999 -g -o perf.data python my_script."
"py\n"
"$ perf report -g -i perf.data"
msgstr ""
"$ PYTHONPERFSUPPORT=1 perf record -F 9999 -g -o perf.data python my_script."
"py\n"
"$ perf rapport -g -i perf.data"

msgid "Example, using the :option:`!-X` option::"
msgstr "Exempel på användning av :option:`!-X` option::"

msgid ""
"$ perf record -F 9999 -g -o perf.data python -X perf my_script.py\n"
"$ perf report -g -i perf.data"
msgstr ""
"$ perf record -F 9999 -g -o perf.data python -X perf my_script.py\n"
"$ perf rapport -g -i perf.data"

msgid "Example, using the :mod:`sys` APIs in file :file:`example.py`:"
msgstr ""
"Exempel på användning av API:erna :mod:`sys` i filen :file:`example.py`:"

msgid ""
"import sys\n"
"\n"
"sys.activate_stack_trampoline(\"perf\")\n"
"do_profiled_stuff()\n"
"sys.deactivate_stack_trampoline()\n"
"\n"
"non_profiled_stuff()"
msgstr ""
"import sys\n"
"\n"
"sys.activate_stack_trampoline(\"perf\")\n"
"do_profiled_stuff()\n"
"sys.deactivate_stack_trampoline()\n"
"\n"
"non_profiled_stuff()"

msgid "...then::"
msgstr "...sedan..:"

msgid ""
"$ perf record -F 9999 -g -o perf.data python ./example.py\n"
"$ perf report -g -i perf.data"
msgstr ""
"$ perf record -F 9999 -g -o perf.data python ./example.py\n"
"$ perf rapport -g -i perf.data"

msgid "How to obtain the best results"
msgstr "Hur man uppnår bästa resultat"

msgid ""
"For best results, Python should be compiled with ``CFLAGS=\"-fno-omit-frame-"
"pointer -mno-omit-leaf-frame-pointer\"`` as this allows profilers to unwind "
"using only the frame pointer and not on DWARF debug information. This is "
"because as the code that is interposed to allow ``perf`` support is "
"dynamically generated it doesn't have any DWARF debugging information "
"available."
msgstr ""
"För bästa resultat bör Python kompileras med ``CFLAGS=\"-fno-omit-frame-"
"pointer -mno-omit-leaf-frame-pointer\"`` eftersom detta gör det möjligt för "
"profilerare att rulla ut med endast rampekaren och inte på DWARF-"
"felsökningsinformation. Detta beror på att koden som läggs in för att "
"tillåta ``perf``-stöd genereras dynamiskt och därför inte har någon DWARF-"
"felsökningsinformation tillgänglig."

msgid ""
"You can check if your system has been compiled with this flag by running::"
msgstr ""
"Du kan kontrollera om ditt system har kompilerats med denna flagga genom att "
"köra::"

msgid "$ python -m sysconfig | grep 'no-omit-frame-pointer'"
msgstr "$ python -m sysconfig | grep 'no-omit-frame-pointer'"

msgid ""
"If you don't see any output it means that your interpreter has not been "
"compiled with frame pointers and therefore it may not be able to show Python "
"functions in the output of ``perf``."
msgstr ""
"Om du inte ser någon utmatning betyder det att din tolk inte har kompilerats "
"med rampekare och därför kanske den inte kan visa Python-funktioner i "
"utmatningen från ``perf``."

msgid "How to work without frame pointers"
msgstr "Hur man arbetar utan rampekare"

msgid ""
"If you are working with a Python interpreter that has been compiled without "
"frame pointers, you can still use the ``perf`` profiler, but the overhead "
"will be a bit higher because Python needs to generate unwinding information "
"for every Python function call on the fly. Additionally, ``perf`` will take "
"more time to process the data because it will need to use the DWARF "
"debugging information to unwind the stack and this is a slow process."
msgstr ""
"Om du arbetar med en Python-tolk som har kompilerats utan rampekare kan du "
"fortfarande använda profileraren ``perf``, men omkostnaderna blir lite högre "
"eftersom Python måste generera avrullningsinformation för varje Python-"
"funktionsanrop i farten. Dessutom kommer det att ta längre tid för ``perf`` "
"att bearbeta data eftersom den måste använda DWARF-felsökningsinformationen "
"för att spola tillbaka stacken och det är en långsam process."

msgid ""
"To enable this mode, you can use the environment variable :envvar:"
"`PYTHON_PERF_JIT_SUPPORT` or the :option:`-X perf_jit <-X>` option, which "
"will enable the JIT mode for the ``perf`` profiler."
msgstr ""
"För att aktivera det här läget kan du använda miljövariabeln :envvar:"
"`PYTHON_PERF_JIT_SUPPORT` eller alternativet :option:`-X perf_jit <-X>`, som "
"aktiverar JIT-läget för profileraren ``perf``."

msgid ""
"Due to a bug in the ``perf`` tool, only ``perf`` versions higher than v6.8 "
"will work with the JIT mode.  The fix was also backported to the v6.7.2 "
"version of the tool."
msgstr ""
"På grund av en bugg i verktyget ``perf`` är det bara ``perf``-versioner som "
"är högre än v6.8 som fungerar med JIT-läget.  Fixen har även backporterats "
"till v6.7.2-versionen av verktyget."

msgid ""
"Note that when checking the version of the ``perf`` tool (which can be done "
"by running ``perf version``) you must take into account that some distros "
"add some custom version numbers including a ``-`` character.  This means "
"that ``perf 6.7-3`` is not necessarily ``perf 6.7.3``."
msgstr ""
"Observera att när du kontrollerar versionen av verktyget ``perf`` (vilket "
"kan göras genom att köra ``perf version``) måste du ta hänsyn till att vissa "
"distros lägger till egna versionsnummer som innehåller tecknet ``-``.  Detta "
"innebär att ``perf 6.7-3`` inte nödvändigtvis är ``perf 6.7.3``."

msgid ""
"When using the perf JIT mode, you need an extra step before you can run "
"``perf report``. You need to call the ``perf inject`` command to inject the "
"JIT information into the ``perf.data`` file.::"
msgstr ""
"När du använder perf JIT-läget behöver du ett extra steg innan du kan köra "
"``perf report``. Du måste anropa kommandot ``perf inject`` för att injicera "
"JIT-informationen i filen ``perf.data``:"

msgid ""
"$ perf record -F 9999 -g -k 1 --call-graph dwarf -o perf.data python -"
"Xperf_jit my_script.py\n"
"$ perf inject -i perf.data --jit --output perf.jit.data\n"
"$ perf report -g -i perf.jit.data"
msgstr ""
"$ perf record -F 9999 -g -k 1 --call-graph dwarf -o perf.data python -"
"Xperf_jit my_script.py\n"
"$ perf inject -i perf.data --jit --output perf.jit.data\n"
"$ perf rapport -g -i perf.jit.data"

msgid "or using the environment variable::"
msgstr "eller med hjälp av miljövariabeln::"

msgid ""
"$ PYTHON_PERF_JIT_SUPPORT=1 perf record -F 9999 -g --call-graph dwarf -o "
"perf.data python my_script.py\n"
"$ perf inject -i perf.data --jit --output perf.jit.data\n"
"$ perf report -g -i perf.jit.data"
msgstr ""
"$ PYTHON_PERF_JIT_SUPPORT=1 perf record -F 9999 -g --call-graph dwarf -o "
"perf.data python my_script.py\n"
"$ perf inject -i perf.data --jit --output perf.jit.data\n"
"$ perf rapport -g -i perf.jit.data"

msgid ""
"``perf inject --jit`` command will read ``perf.data``, automatically pick up "
"the perf dump file that Python creates (in ``/tmp/perf-$PID.dump``), and "
"then create ``perf.jit.data`` which merges all the JIT information together. "
"It should also create a lot of ``jitted-XXXX-N.so`` files in the current "
"directory which are ELF images for all the JIT trampolines that were created "
"by Python."
msgstr ""
"kommandot ``perf inject --jit`` kommer att läsa ``perf.data``, automatiskt "
"plocka upp den perf dump-fil som Python skapar (i ``/tmp/perf-$PID.dump``) "
"och sedan skapa ``perf.jit.data`` som sammanfogar all JIT-information. Det "
"bör också skapa en hel del ``jitted-XXXX-N.so``-filer i den aktuella "
"katalogen som är ELF-bilder för alla JIT-trampoliner som skapades av Python."

msgid ""
"When using ``--call-graph dwarf``, the ``perf`` tool will take snapshots of "
"the stack of the process being profiled and save the information in the "
"``perf.data`` file. By default, the size of the stack dump is 8192 bytes, "
"but you can change the size by passing it after a comma like ``--call-graph "
"dwarf,16384``."
msgstr ""
"När du använder ``--call-graph dwarf`` kommer verktyget ``perf`` att ta "
"ögonblicksbilder av stacken i den process som profileras och spara "
"informationen i filen ``perf.data``. Som standard är storleken på "
"stackdumpen 8192 byte, men du kan ändra storleken genom att ange den efter "
"ett kommatecken som ``--call-graph dwarf,16384``."

msgid ""
"The size of the stack dump is important because if the size is too small "
"``perf`` will not be able to unwind the stack and the output will be "
"incomplete. On the other hand, if the size is too big, then ``perf`` won't "
"be able to sample the process as frequently as it would like as the overhead "
"will be higher."
msgstr ""
"Storleken på stackdumpen är viktig, för om den är för liten kan ``perf`` "
"inte spola tillbaka stacken och utdata blir ofullständiga. Å andra sidan, om "
"storleken är för stor, kommer ``perf`` inte att kunna sampla processen så "
"ofta som den skulle vilja eftersom overhead blir högre."

msgid ""
"The stack size is particularly important when profiling Python code compiled "
"with low optimization levels (like ``-O0``), as these builds tend to have "
"larger stack frames. If you are compiling Python with ``-O0`` and not seeing "
"Python functions in your profiling output, try increasing the stack dump "
"size to 65528 bytes (the maximum)::"
msgstr ""
"Stackstorleken är särskilt viktig vid profilering av Python-kod som "
"kompilerats med låga optimeringsnivåer (som ``-O0``), eftersom dessa "
"kompileringar tenderar att ha större stackramar. Om du kompilerar Python med "
"``-O0`` och inte ser Python-funktioner i din profileringsutdata, försök att "
"öka stackdumpstorleken till 65528 byte (max)::"

msgid ""
"$ perf record -F 9999 -g -k 1 --call-graph dwarf,65528 -o perf.data python -"
"Xperf_jit my_script.py"
msgstr ""
"$ perf record -F 9999 -g -k 1 --call-graph dwarf,65528 -o perf.data python -"
"Xperf_jit my_script.py"

msgid "Different compilation flags can significantly impact stack sizes:"
msgstr "Olika kompileringsflaggor kan påverka stackstorleken avsevärt:"

msgid ""
"Builds with ``-O0`` typically have much larger stack frames than those with "
"``-O1`` or higher"
msgstr ""
"Byggnader med ``-O0`` har vanligtvis mycket större stapelramar än de med ``-"
"O1`` eller högre"

msgid ""
"Adding optimizations (``-O1``, ``-O2``, etc.) typically reduces stack size"
msgstr ""
"Att lägga till optimeringar (``-O1``, ``-O2``, etc.) minskar vanligtvis "
"stackstorleken"

msgid ""
"Frame pointers (``-fno-omit-frame-pointer``) generally provide more reliable "
"stack unwinding"
msgstr ""
"Frame-pekare (``-fno-omit-frame-pointer``) ger i allmänhet mer tillförlitlig "
"stackavveckling"
