# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!__future__` --- Future statement definitions"
msgstr ":mod:`!__future__` --- Definitioner av framtidsuttalanden"

msgid "**Source code:** :source:`Lib/__future__.py`"
msgstr "**Källkod:** :source:`Lib/__future__.py`"

msgid ""
"Imports of the form ``from __future__ import feature`` are called :ref:"
"`future statements <future>`. These are special-cased by the Python compiler "
"to allow the use of new Python features in modules containing the future "
"statement before the release in which the feature becomes standard."
msgstr ""
"Import av formen ``from __future__ import feature`` kallas :ref:``future "
"statements <future>``. Dessa är specialanpassade av Python-kompilatorn för "
"att tillåta användning av nya Python-funktioner i moduler som innehåller "
"framtidsuttalandet före den utgåva där funktionen blir standard."

msgid ""
"While these future statements are given additional special meaning by the "
"Python compiler, they are still executed like any other import statement and "
"the :mod:`__future__` exists and is handled by the import system the same "
"way any other Python module would be. This design serves three purposes:"
msgstr ""
"Även om dessa future-satser ges ytterligare speciell betydelse av Python-"
"kompilatorn, exekveras de fortfarande som vilken annan importsats som helst "
"och :mod:`__future__` existerar och hanteras av importsystemet på samma sätt "
"som vilken annan Python-modul som helst. Denna design tjänar tre syften:"

msgid ""
"To avoid confusing existing tools that analyze import statements and expect "
"to find the modules they're importing."
msgstr ""
"För att undvika förvirring hos befintliga verktyg som analyserar "
"importmeddelanden och förväntar sig att hitta de moduler som de importerar."

msgid ""
"To document when incompatible changes were introduced, and when they will be "
"--- or were --- made mandatory.  This is a form of executable documentation, "
"and can be inspected programmatically via importing :mod:`__future__` and "
"examining its contents."
msgstr ""
"För att dokumentera när inkompatibla ändringar infördes och när de kommer "
"att bli --- eller var --- obligatoriska.  Detta är en form av körbar "
"dokumentation och kan inspekteras programmatiskt genom att importera :mod:"
"`__future__` och undersöka dess innehåll."

msgid ""
"To ensure that :ref:`future statements <future>` run under releases prior to "
"Python 2.1 at least yield runtime exceptions (the import of :mod:"
"`__future__` will fail, because there was no module of that name prior to "
"2.1)."
msgstr ""
"För att säkerställa att :ref:`future statements <future>` som körs under "
"utgåvor före Python 2.1 åtminstone ger upphov till körtidsundantag (importen "
"av :mod:`__future__` kommer att misslyckas, eftersom det inte fanns någon "
"modul med det namnet före 2.1)."

msgid "Module Contents"
msgstr "Modulens innehåll"

msgid ""
"No feature description will ever be deleted from :mod:`__future__`. Since "
"its introduction in Python 2.1 the following features have found their way "
"into the language using this mechanism:"
msgstr ""
"Ingen funktionsbeskrivning kommer någonsin att tas bort från :mod:"
"`__future__`. Sedan introduktionen i Python 2.1 har följande funktioner "
"hittat sin väg in i språket med hjälp av denna mekanism:"

msgid "feature"
msgstr "funktion"

msgid "optional in"
msgstr "valfritt i"

msgid "mandatory in"
msgstr "obligatorisk i"

msgid "effect"
msgstr "effekt"

msgid "2.1.0b1"
msgstr "2.1.0b1"

msgid "2.2"
msgstr "2.2"

msgid ":pep:`227`: *Statically Nested Scopes*"
msgstr ":pep:`227`: *Statiskt nästlade scopes"

msgid "2.2.0a1"
msgstr "2.2.0a1"

msgid "2.3"
msgstr "2.3"

msgid ":pep:`255`: *Simple Generators*"
msgstr ":pep:`255`: *Enkla generatorer*"

msgid "2.2.0a2"
msgstr "2.2.0a2"

msgid "3.0"
msgstr "3.0"

msgid ":pep:`238`: *Changing the Division Operator*"
msgstr ":pep:`238`: *Byte av divisionsoperator*"

msgid "2.5.0a1"
msgstr "2.5.0a1"

msgid ":pep:`328`: *Imports: Multi-Line and Absolute/Relative*"
msgstr ":pep:`328`: *Importerar: Flera rader och absolut/relativ*"

msgid "2.6"
msgstr "2.6"

msgid ":pep:`343`: *The “with” Statement*"
msgstr ":pep:`343`: *”with”-uttalandet*"

msgid "2.6.0a2"
msgstr "2.6.0a2"

msgid ":pep:`3105`: *Make print a function*"
msgstr ":pep:`3105`: *Gör print till en funktion*"

msgid ":pep:`3112`: *Bytes literals in Python 3000*"
msgstr ":pep:`3112`: *Byteslitteraler i Python 3000*"

msgid "3.5.0b1"
msgstr "3.5.0b1"

msgid "3.7"
msgstr "3.7"

msgid ":pep:`479`: *StopIteration handling inside generators*"
msgstr ":pep:`479`: *StopIteration-hantering i generatorer*"

msgid "3.7.0b1"
msgstr "3.7.0b1"

msgid "Never [1]_"
msgstr "Never [1]_"

msgid ""
":pep:`563`: *Postponed evaluation of annotations*, :pep:`649`: *Deferred "
"evaluation of annotations using descriptors*"
msgstr ""
":pep:`563`: *Uppskjuten utvärdering av anteckningar*, :pep:`649`: "
"*Uppskjuten utvärdering av anteckningar med hjälp av deskriptorer*"

msgid "Each statement in :file:`__future__.py` is of the form::"
msgstr "Varje uttalande i :file:`__future__.py` är av formen::"

msgid ""
"FeatureName = _Feature(OptionalRelease, MandatoryRelease,\n"
"                       CompilerFlag)"
msgstr ""
"FeatureName = _Feature(OptionalRelease, MandatoryRelease,\n"
"                       CompilerFlag)"

msgid ""
"where, normally, *OptionalRelease* is less than *MandatoryRelease*, and both "
"are 5-tuples of the same form as :data:`sys.version_info`::"
msgstr ""
"där normalt *OptionalRelease* är mindre än *MandatoryRelease*, och båda är 5-"
"tupler av samma form som :data:`sys.version_info`::"

msgid ""
"(PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int\n"
" PY_MINOR_VERSION, # the 1; an int\n"
" PY_MICRO_VERSION, # the 0; an int\n"
" PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; "
"string\n"
" PY_RELEASE_SERIAL # the 3; an int\n"
")"
msgstr ""
"(PY_MAJOR_VERSION, # den 2 i 2.1.0a3; ett int\n"
" PY_MINOR_VERSION, # den 1; ett int\n"
" PY_MICRO_VERSION, # den 0; ett int\n"
" PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" eller \"final\"; "
"sträng\n"
" PY_RELEASE_SERIAL # 3; ett int\n"
")"

msgid ""
"*OptionalRelease* records the first release in which the feature was "
"accepted."
msgstr ""
"*OptionalRelease* registrerar den första utgåvan i vilken funktionen "
"accepterades."

msgid ""
"In the case of a *MandatoryRelease* that has not yet occurred, "
"*MandatoryRelease* predicts the release in which the feature will become "
"part of the language."
msgstr ""
"När det gäller en *MandatoryRelease* som ännu inte har inträffat, förutspår "
"*MandatoryRelease* den version där funktionen kommer att bli en del av "
"språket."

msgid ""
"Else *MandatoryRelease* records when the feature became part of the "
"language; in releases at or after that, modules no longer need a future "
"statement to use the feature in question, but may continue to use such "
"imports."
msgstr ""
"Else *MandatoryRelease* registrerar när funktionen blev en del av språket; i "
"utgåvor från och med den tidpunkten behöver moduler inte längre ett framtida "
"uttalande för att använda funktionen i fråga, men kan fortsätta att använda "
"sådana importer."

msgid ""
"*MandatoryRelease* may also be ``None``, meaning that a planned feature got "
"dropped or that it is not yet decided."
msgstr ""
"*MandatoryRelease* kan också vara ``None``, vilket innebär att en planerad "
"funktion har strukits eller att den ännu inte är beslutad."

msgid ""
"*CompilerFlag* is the (bitfield) flag that should be passed in the fourth "
"argument to the built-in function :func:`compile` to enable the feature in "
"dynamically compiled code.  This flag is stored in the :attr:`_Feature."
"compiler_flag` attribute on :class:`_Feature` instances."
msgstr ""
"*CompilerFlag* är den (bitfield) flagga som ska skickas i det fjärde "
"argumentet till den inbyggda funktionen :func:`compile` för att aktivera "
"funktionen i dynamiskt kompilerad kod.  Denna flagga lagras i attributet :"
"attr:`_Feature.compiler_flag` på :class:`_Feature`-instanser."

msgid ""
"``from __future__ import annotations`` was previously scheduled to become "
"mandatory in Python 3.10, but the change was delayed and ultimately "
"canceled. This feature will eventually be deprecated and removed. See :pep:"
"`649` and :pep:`749`."
msgstr ""
"``from __future__ import annotations`` var tidigare planerad att bli "
"obligatorisk i Python 3.10, men ändringen försenades och ställdes slutligen "
"in. Denna funktion kommer så småningom att bli föråldrad och tas bort. Se :"
"pep:`649` och :pep:`749`."

msgid ":ref:`future`"
msgstr ":ref:`future`"

msgid "How the compiler treats future imports."
msgstr "Hur kompilatorn behandlar framtida import."

msgid ":pep:`236` - Back to the __future__"
msgstr ":pep:`236` - Tillbaka till __future__"

msgid "The original proposal for the __future__ mechanism."
msgstr "Det ursprungliga förslaget till mekanismen __future__."
