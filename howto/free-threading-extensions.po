# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 20:38+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "C API Extension Support for Free Threading"
msgstr "Stöd för fri trådning i C API-tillägg"

msgid ""
"Starting with the 3.13 release, CPython has support for running with the :"
"term:`global interpreter lock` (GIL) disabled in a configuration called :"
"term:`free threading`.  This document describes how to adapt C API "
"extensions to support free threading."
msgstr ""
"Från och med version 3.13 har CPython stöd för att köra med :term:`global "
"interpreter lock` (GIL) inaktiverat i en konfiguration som kallas :term:"
"`free threading`.  Detta dokument beskriver hur man anpassar C API-tillägg "
"för att stödja fri trådning."

msgid "Identifying the Free-Threaded Build in C"
msgstr "Identifiera den fritt trådade byggnaden i C"

msgid ""
"The CPython C API exposes the ``Py_GIL_DISABLED`` macro: in the free-"
"threaded build it's defined to ``1``, and in the regular build it's not "
"defined. You can use it to enable code that only runs under the free-"
"threaded build::"
msgstr ""
"CPython C API exponerar makrot ``Py_GIL_DISABLED``: i free-threaded build är "
"det definierat till ``1``, och i regular build är det inte definierat. Du "
"kan använda det för att aktivera kod som bara körs under free-threaded "
"build::"

msgid ""
"#ifdef Py_GIL_DISABLED\n"
"/* code that only runs in the free-threaded build */\n"
"#endif"
msgstr ""
"#ifdef Py_GIL_DISABLED\n"
"/* kod som bara körs i den fritt trådade versionen */\n"
"#endif"

msgid ""
"On Windows, this macro is not defined automatically, but must be specified "
"to the compiler when building. The :func:`sysconfig.get_config_var` function "
"can be used to determine whether the current running interpreter had the "
"macro defined."
msgstr ""
"I Windows definieras inte detta makro automatiskt, utan måste anges till "
"kompilatorn när den bygger programmet. Funktionen :func:`sysconfig."
"get_config_var` kan användas för att avgöra om den tolk som körs för "
"tillfället har definierat makrot."

msgid "Module Initialization"
msgstr "Initialisering av modul"

msgid ""
"Extension modules need to explicitly indicate that they support running with "
"the GIL disabled; otherwise importing the extension will raise a warning and "
"enable the GIL at runtime."
msgstr ""
"Tilläggsmoduler måste uttryckligen ange att de stöder körning med GIL "
"inaktiverad; annars kommer import av tillägget att ge upphov till en varning "
"och aktivera GIL vid körning."

msgid ""
"There are two ways to indicate that an extension module supports running "
"with the GIL disabled depending on whether the extension uses multi-phase or "
"single-phase initialization."
msgstr ""
"Det finns två sätt att ange att en tilläggsmodul stöder körning med GIL "
"inaktiverad beroende på om tillägget använder flerfas- eller "
"enfasinitialisering."

msgid "Multi-Phase Initialization"
msgstr "Initialisering av flera faser"

msgid ""
"Extensions that use multi-phase initialization (i.e., :c:func:"
"`PyModuleDef_Init`) should add a :c:data:`Py_mod_gil` slot in the module "
"definition.  If your extension supports older versions of CPython, you "
"should guard the slot with a :c:data:`PY_VERSION_HEX` check."
msgstr ""
"Tillägg som använder flerfasinitialisering (dvs. :c:func:`PyModuleDef_Init`) "
"bör lägga till en :c:data:`Py_mod_gil` slot i moduldefinitionen.  Om ditt "
"tillägg stöder äldre versioner av CPython bör du bevaka platsen med en :c:"
"data:`PY_VERSION_HEX`-kontroll."

msgid ""
"static struct PyModuleDef_Slot module_slots[] = {\n"
"    ...\n"
"#if PY_VERSION_HEX >= 0x030D0000\n"
"    {Py_mod_gil, Py_MOD_GIL_NOT_USED},\n"
"#endif\n"
"    {0, NULL}\n"
"};\n"
"\n"
"static struct PyModuleDef moduledef = {\n"
"    PyModuleDef_HEAD_INIT,\n"
"    .m_slots = module_slots,\n"
"    ...\n"
"};"
msgstr ""
"static struct PyModuleDef_Slot module_slots[] = {\n"
"    ...\n"
"#if PY_VERSION_HEX >= 0x030D0000\n"
"    {Py_mod_gil, Py_MOD_GIL_NOT_USED},\n"
"#endif\n"
"    {0, NULL}\n"
"};\n"
"\n"
"static struct PyModuleDef moduledef = {\n"
"    PyModuleDef_HEAD_INIT,\n"
"    .m_slots = modul_slots,\n"
"    ...\n"
"};"

msgid "Single-Phase Initialization"
msgstr "Initialisering med en fas"

msgid ""
"Extensions that use single-phase initialization (i.e., :c:func:"
"`PyModule_Create`) should call :c:func:`PyUnstable_Module_SetGIL` to "
"indicate that they support running with the GIL disabled.  The function is "
"only defined in the free-threaded build, so you should guard the call with "
"``#ifdef Py_GIL_DISABLED`` to avoid compilation errors in the regular build."
msgstr ""
"Tillägg som använder enfasinitialisering (dvs. :c:func:`PyModule_Create`) "
"bör anropa :c:func:`PyUnstable_Module_SetGIL` för att ange att de stöder "
"körning med GIL inaktiverad.  Funktionen är endast definierad i den fritt "
"trådade versionen, så du bör skydda anropet med ``#ifdef Py_GIL_DISABLED`` "
"för att undvika kompileringsfel i den vanliga versionen."

msgid ""
"static struct PyModuleDef moduledef = {\n"
"    PyModuleDef_HEAD_INIT,\n"
"    ...\n"
"};\n"
"\n"
"PyMODINIT_FUNC\n"
"PyInit_mymodule(void)\n"
"{\n"
"    PyObject *m = PyModule_Create(&moduledef);\n"
"    if (m == NULL) {\n"
"        return NULL;\n"
"    }\n"
"#ifdef Py_GIL_DISABLED\n"
"    PyUnstable_Module_SetGIL(m, Py_MOD_GIL_NOT_USED);\n"
"#endif\n"
"    return m;\n"
"}"
msgstr ""
"static struct PyModuleDef moduledef = {\n"
"    PyModuleDef_HEAD_INIT,\n"
"    ...\n"
"};\n"
"\n"
"PyMODINIT_FUNC\n"
"PyInit_mymodule(void)\n"
"{\n"
"    PyObject *m = PyModule_Create(&moduledef);\n"
"    if (m == NULL) {\n"
"        returnera NULL;\n"
"    }\n"
"#ifdef Py_GIL_DISABLED\n"
"    PyUnstable_Module_SetGIL(m, Py_MOD_GIL_NOT_USED);\n"
"#endif\n"
"    returnera m;\n"
"}"

msgid "General API Guidelines"
msgstr "Allmänna API-riktlinjer"

msgid "Most of the C API is thread-safe, but there are some exceptions."
msgstr "Det mesta av C API:et är trådsäkert, men det finns några undantag."

msgid ""
"**Struct Fields**: Accessing fields in Python C API objects or structs "
"directly is not thread-safe if the field may be concurrently modified."
msgstr ""
"**Strukturfält**: Direkt åtkomst till fält i Python C API-objekt eller "
"strukturer är inte trådsäkert om fältet kan ändras samtidigt."

msgid ""
"**Macros**: Accessor macros like :c:macro:`PyList_GET_ITEM`, :c:macro:"
"`PyList_SET_ITEM`, and macros like :c:macro:`PySequence_Fast_GET_SIZE` that "
"use the object returned by :c:func:`PySequence_Fast` do not perform any "
"error checking or locking. These macros are not thread-safe if the container "
"object may be modified concurrently."
msgstr ""
"**Makroer**: Accessormakron som :c:macro:`PyList_GET_ITEM`, :c:macro:"
"`PyList_SET_ITEM` och makron som :c:macro:`PySequence_Fast_GET_SIZE` som "
"använder det objekt som returneras av :c:func:`PySequence_Fast` utför ingen "
"felkontroll eller låsning. Dessa makron är inte trådsäkra om "
"containerobjektet kan ändras samtidigt."

msgid ""
"**Borrowed References**: C API functions that return :term:`borrowed "
"references <borrowed reference>` may not be thread-safe if the containing "
"object is modified concurrently.  See the section on :ref:`borrowed "
"references <borrowed-references>` for more information."
msgstr ""
"**Lånade referenser**: C API-funktioner som returnerar :term:`lånade "
"referenser <borrowed reference>` kanske inte är trådsäkra om det "
"innehållande objektet ändras samtidigt.  Se avsnittet om :ref:`lånade "
"referenser <borrowed-references>` för mer information."

msgid "Container Thread Safety"
msgstr "Säkerhet för containergänga"

msgid ""
"Containers like :c:struct:`PyListObject`, :c:struct:`PyDictObject`, and :c:"
"struct:`PySetObject` perform internal locking in the free-threaded build.  "
"For example, the :c:func:`PyList_Append` will lock the list before appending "
"an item."
msgstr ""
"Behållare som :c:struct:`PyListObject`, :c:struct:`PyDictObject` och :c:"
"struct:`PySetObject` utför intern låsning i den frittrådade versionen.  Till "
"exempel kommer :c:func:`PyList_Append` att låsa listan innan ett objekt "
"läggs till."

msgid "``PyDict_Next``"
msgstr "``PyDict_Next``"

msgid ""
"A notable exception is :c:func:`PyDict_Next`, which does not lock the "
"dictionary.  You should use :c:macro:`Py_BEGIN_CRITICAL_SECTION` to protect "
"the dictionary while iterating over it if the dictionary may be concurrently "
"modified::"
msgstr ""
"Ett anmärkningsvärt undantag är :c:func:`PyDict_Next`, som inte låser "
"ordlistan.  Du bör använda :c:macro:`Py_BEGIN_CRITICAL_SECTION` för att "
"skydda ordlistan medan du itererar över den om ordlistan kan ändras "
"samtidigt:"

msgid ""
"Py_BEGIN_CRITICAL_SECTION(dict);\n"
"PyObject *key, *value;\n"
"Py_ssize_t pos = 0;\n"
"while (PyDict_Next(dict, &pos, &key, &value)) {\n"
"    ...\n"
"}\n"
"Py_END_CRITICAL_SECTION();"
msgstr ""
"Py_BEGIN_CRITICAL_SECTION(dict);\n"
"PyObject *nyckel, *värde;\n"
"Py_ssize_t pos = 0;\n"
"while (PyDict_Next(dict, &pos, &key, &value)) {\n"
"    ...\n"
"}\n"
"Py_END_CRITICAL_SECTION();"

msgid "Borrowed References"
msgstr "Lånade referenser"

msgid ""
"Some C API functions return :term:`borrowed references <borrowed "
"reference>`. These APIs are not thread-safe if the containing object is "
"modified concurrently.  For example, it's not safe to use :c:func:"
"`PyList_GetItem` if the list may be modified concurrently."
msgstr ""
"Vissa C API-funktioner returnerar :term:`lånade referenser <borrowed "
"reference>`. Dessa API:er är inte trådsäkra om det objekt som innehåller dem "
"ändras samtidigt.  Det är t.ex. inte säkert att använda :c:func:"
"`PyList_GetItem` om listan kan ändras samtidigt."

msgid ""
"The following table lists some borrowed reference APIs and their "
"replacements that return :term:`strong references <strong reference>`."
msgstr ""
"I följande tabell listas några API:er för lånade referenser och deras "
"ersättare som returnerar :term:`strong referenser <strong reference>`."

msgid "Borrowed reference API"
msgstr "Lånad referens API"

msgid "Strong reference API"
msgstr "Stark referens API"

msgid ":c:func:`PyList_GetItem`"
msgstr ":c:func:`PyList_GetItem`"

msgid ":c:func:`PyList_GetItemRef`"
msgstr ":c:func:`PyList_GetItemRef`"

msgid ":c:func:`PyList_GET_ITEM`"
msgstr ":c:func:`PyList_GET_ITEM`"

msgid ":c:func:`PyDict_GetItem`"
msgstr ":c:func:`PyDict_GetItem`"

msgid ":c:func:`PyDict_GetItemRef`"
msgstr ":c:func:`PyDict_GetItemRef`"

msgid ":c:func:`PyDict_GetItemWithError`"
msgstr ":c:func:`PyDict_GetItemWithError`"

msgid ":c:func:`PyDict_GetItemString`"
msgstr ":c:func:`PyDict_GetItemString`"

msgid ":c:func:`PyDict_GetItemStringRef`"
msgstr ":c:func:`PyDict_GetItemStringRef`"

msgid ":c:func:`PyDict_SetDefault`"
msgstr ":c:func:`PyDict_SetDefault`"

msgid ":c:func:`PyDict_SetDefaultRef`"
msgstr ":c:func:`PyDict_SetDefaultRef`"

msgid ":c:func:`PyDict_Next`"
msgstr ":c:func:`PyDict_Next`"

msgid "none (see :ref:`PyDict_Next`)"
msgstr "ingen (se :ref:`PyDict_Next`)"

msgid ":c:func:`PyWeakref_GetObject`"
msgstr ":c:func:`PyWeakref_GetObject`"

msgid ":c:func:`PyWeakref_GetRef`"
msgstr ":c:func:`PyWeakref_GetRef`"

msgid ":c:func:`PyWeakref_GET_OBJECT`"
msgstr ":c:func:`PyWeakref_GET_OBJECT`"

msgid ":c:func:`PyImport_AddModule`"
msgstr ":c:func:`PyImport_AddModule`"

msgid ":c:func:`PyImport_AddModuleRef`"
msgstr ":c:func:`PyImport_AddModuleRef`"

msgid ":c:func:`PyCell_GET`"
msgstr ":c:func:`PyCell_GET`"

msgid ":c:func:`PyCell_Get`"
msgstr ":c:func:`PyCell_Get`"

msgid ""
"Not all APIs that return borrowed references are problematic.  For example, :"
"c:func:`PyTuple_GetItem` is safe because tuples are immutable. Similarly, "
"not all uses of the above APIs are problematic.  For example, :c:func:"
"`PyDict_GetItem` is often used for parsing keyword argument dictionaries in "
"function calls; those keyword argument dictionaries are effectively private "
"(not accessible by other threads), so using borrowed references in that "
"context is safe."
msgstr ""
"Det är inte alla API:er som returnerar lånade referenser som är "
"problematiska.  Till exempel är :c:func:`PyTuple_GetItem` säkert eftersom "
"tuples är oföränderliga. På samma sätt är inte alla användningar av "
"ovanstående API:er problematiska.  Till exempel används :c:func:"
"`PyDict_GetItem` ofta för att analysera ordlistor med nyckelordsargument i "
"funktionsanrop; dessa ordlistor med nyckelordsargument är i praktiken "
"privata (inte tillgängliga för andra trådar), så det är säkert att använda "
"lånade referenser i det sammanhanget."

msgid ""
"Some of these functions were added in Python 3.13.  You can use the "
"`pythoncapi-compat <https://github.com/python/pythoncapi-compat>`_ package "
"to provide implementations of these functions for older Python versions."
msgstr ""
"Några av dessa funktioner lades till i Python 3.13.  Du kan använda paketet "
"`pythoncapi-compat <https://github.com/python/pythoncapi-compat>`_ för att "
"tillhandahålla implementeringar av dessa funktioner för äldre Python-"
"versioner."

msgid "Memory Allocation APIs"
msgstr "API:er för minnesallokering"

msgid ""
"Python's memory management C API provides functions in three different :ref:"
"`allocation domains <allocator-domains>`: \"raw\", \"mem\", and \"object\". "
"For thread-safety, the free-threaded build requires that only Python objects "
"are allocated using the object domain, and that all Python object are "
"allocated using that domain.  This differs from the prior Python versions, "
"where this was only a best practice and not a hard requirement."
msgstr ""
"Pythons minneshantering C API tillhandahåller funktioner i tre olika :ref:"
"`allokeringsdomäner <allocator-domains>`: \"raw\", \"mem\" och \"object\". "
"För trådsäkerhet kräver den frittrådade versionen att endast Python-objekt "
"allokeras med hjälp av objektdomänen och att alla Python-objekt allokeras "
"med hjälp av den domänen.  Detta skiljer sig från de tidigare Python-"
"versionerna, där detta endast var en bästa praxis och inte ett hårt krav."

msgid ""
"Search for uses of :c:func:`PyObject_Malloc` in your extension and check "
"that the allocated memory is used for Python objects. Use :c:func:"
"`PyMem_Malloc` to allocate buffers instead of :c:func:`PyObject_Malloc`."
msgstr ""
"Sök efter användningar av :c:func:`PyObject_Malloc` i ditt tillägg och "
"kontrollera att det allokerade minnet används för Python-objekt. Använd :c:"
"func:`PyMem_Malloc` för att allokera buffertar istället för :c:func:"
"`PyObject_Malloc`."

msgid "Thread State and GIL APIs"
msgstr "Trådstatus och GIL API:er"

msgid ""
"Python provides a set of functions and macros to manage thread state and the "
"GIL, such as:"
msgstr ""
"Python tillhandahåller en uppsättning funktioner och makron för att hantera "
"trådstatus och GIL, t.ex:"

msgid ":c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release`"
msgstr ":c:func:`PyGILState_Ensure` och :c:func:`PyGILState_Release`"

msgid ":c:func:`PyEval_SaveThread` and :c:func:`PyEval_RestoreThread`"
msgstr ":c:func:`PyEval_SaveThread` och :c:func:`PyEval_RestoreThread`"

msgid ":c:macro:`Py_BEGIN_ALLOW_THREADS` and :c:macro:`Py_END_ALLOW_THREADS`"
msgstr ":c:macro:`Py_BEGIN_ALLOW_THREADS` och :c:macro:`Py_END_ALLOW_THREADS`"

msgid ""
"These functions should still be used in the free-threaded build to manage "
"thread state even when the :term:`GIL` is disabled.  For example, if you "
"create a thread outside of Python, you must call :c:func:`PyGILState_Ensure` "
"before calling into the Python API to ensure that the thread has a valid "
"Python thread state."
msgstr ""
"Dessa funktioner bör fortfarande användas i den fritt trådade versionen för "
"att hantera trådstatus även när :term:`GIL` är inaktiverad.  Om du t.ex. "
"skapar en tråd utanför Python måste du anropa :c:func:`PyGILState_Ensure` "
"innan du anropar Python API för att säkerställa att tråden har ett giltigt "
"Python-trådtillstånd."

msgid ""
"You should continue to call :c:func:`PyEval_SaveThread` or :c:macro:"
"`Py_BEGIN_ALLOW_THREADS` around blocking operations, such as I/O or lock "
"acquisitions, to allow other threads to run the :term:`cyclic garbage "
"collector <garbage collection>`."
msgstr ""
"Du bör fortsätta att anropa :c:func:`PyEval_SaveThread` eller :c:macro:"
"`Py_BEGIN_ALLOW_THREADS` runt blockerande operationer, t.ex. I/O eller "
"låsförvärv, för att tillåta andra trådar att köra :term:`cyclic garbage "
"collector <garbage collection>`."

msgid "Protecting Internal Extension State"
msgstr "Skydd av intern förlängningstillstånd"

msgid ""
"Your extension may have internal state that was previously protected by the "
"GIL.  You may need to add locking to protect this state.  The approach will "
"depend on your extension, but some common patterns include:"
msgstr ""
"Ditt tillägg kan ha interna tillstånd som tidigare skyddades av GIL.  Du kan "
"behöva lägga till låsning för att skydda detta tillstånd.  "
"Tillvägagångssättet beror på ditt tillägg, men några vanliga mönster "
"inkluderar:"

msgid ""
"**Caches**: global caches are a common source of shared state.  Consider "
"using a lock to protect the cache or disabling it in the free-threaded build "
"if the cache is not critical for performance."
msgstr ""
"**Cacher**: globala cacher är en vanlig källa till delat tillstånd.  Överväg "
"att använda ett lås för att skydda cacheminnet eller inaktivera det i den "
"frittrådade versionen om cacheminnet inte är avgörande för prestandan."

msgid ""
"**Global State**: global state may need to be protected by a lock or moved "
"to thread local storage. C11 and C++11 provide the ``thread_local`` or "
"``_Thread_local`` for `thread-local storage <https://en.cppreference.com/w/c/"
"language/storage_duration>`_."
msgstr ""
"**Global State**: global state kan behöva skyddas av ett lås eller flyttas "
"till trådlokal lagring. C11 och C++11 tillhandahåller ``thread_local`` eller "
"``_Thread_local`` för `trådlokal lagring <https://en.cppreference.com/w/c/"
"language/storage_duration>`_."

msgid "Critical Sections"
msgstr "Kritiska avsnitt"

msgid ""
"In the free-threaded build, CPython provides a mechanism called \"critical "
"sections\" to protect data that would otherwise be protected by the GIL. "
"While extension authors may not interact with the internal critical section "
"implementation directly, understanding their behavior is crucial when using "
"certain C API functions or managing shared state in the free-threaded build."
msgstr ""
"I den fritt trådade versionen tillhandahåller CPython en mekanism som kallas "
"\"kritiska sektioner\" för att skydda data som annars skulle skyddas av GIL. "
"Även om författare av tillägg kanske inte interagerar direkt med den interna "
"implementeringen av kritiska avsnitt är det viktigt att förstå deras "
"beteende när man använder vissa C API-funktioner eller hanterar delat "
"tillstånd i den fritt trådade versionen."

msgid "What Are Critical Sections?"
msgstr "Vad är kritiska avsnitt?"

msgid ""
"Conceptually, critical sections act as a deadlock avoidance layer built on "
"top of simple mutexes. Each thread maintains a stack of active critical "
"sections. When a thread needs to acquire a lock associated with a critical "
"section (e.g., implicitly when calling a thread-safe C API function like :c:"
"func:`PyDict_SetItem`, or explicitly using macros), it attempts to acquire "
"the underlying mutex."
msgstr ""
"I princip fungerar kritiska sektioner som ett lager för att undvika dödlägen "
"ovanpå enkla mutexar. Varje tråd upprätthåller en stack med aktiva kritiska "
"sektioner. När en tråd behöver förvärva ett lås som är associerat med en "
"kritisk sektion (t.ex. implicit när den anropar en trådsäker C API-funktion "
"som :c:func:`PyDict_SetItem`, eller explicit med hjälp av makron), försöker "
"den förvärva den underliggande mutexen."

msgid "Using Critical Sections"
msgstr "Använda kritiska avsnitt"

msgid "The primary APIs for using critical sections are:"
msgstr "De primära API:erna för att använda kritiska sektioner är:"

msgid ""
":c:macro:`Py_BEGIN_CRITICAL_SECTION` and :c:macro:`Py_END_CRITICAL_SECTION` "
"- For locking a single object"
msgstr ""
":c:macro:`Py_BEGIN_CRITICAL_SECTION` och :c:macro:`Py_END_CRITICAL_SECTION` "
"- För låsning av ett enda objekt"

msgid ""
":c:macro:`Py_BEGIN_CRITICAL_SECTION2` and :c:macro:"
"`Py_END_CRITICAL_SECTION2` - For locking two objects simultaneously"
msgstr ""
":c:macro:`Py_BEGIN_CRITICAL_SECTION2` och :c:macro:"
"`Py_END_CRITICAL_SECTION2` - För låsning av två objekt samtidigt"

msgid ""
"These macros must be used in matching pairs and must appear in the same C "
"scope, since they establish a new local scope.  These macros are no-ops in "
"non-free-threaded builds, so they can be safely added to code that needs to "
"support both build types."
msgstr ""
"Dessa makron måste användas i matchande par och måste förekomma i samma C-"
"scope, eftersom de skapar ett nytt lokalt scope.  Dessa makron är no-ops i "
"icke-frittrådade builds, så de kan utan problem läggas till i kod som "
"behöver stödja båda build-typerna."

msgid ""
"A common use of a critical section would be to lock an object while "
"accessing an internal attribute of it.  For example, if an extension type "
"has an internal count field, you could use a critical section while reading "
"or writing that field::"
msgstr ""
"En vanlig användning av en kritisk sektion är att låsa ett objekt när man "
"använder ett internt attribut i det.  Om en tilläggstyp till exempel har ett "
"internt räknefält kan du använda en kritisk sektion när du läser eller "
"skriver fältet::"

msgid ""
"// read the count, returns new reference to internal count value\n"
"PyObject *result;\n"
"Py_BEGIN_CRITICAL_SECTION(obj);\n"
"result = Py_NewRef(obj->count);\n"
"Py_END_CRITICAL_SECTION();\n"
"return result;\n"
"\n"
"// write the count, consumes reference from new_count\n"
"Py_BEGIN_CRITICAL_SECTION(obj);\n"
"obj->count = new_count;\n"
"Py_END_CRITICAL_SECTION();"
msgstr ""
"// läser räkningen, returnerar ny referens till internt räkningsvärde\n"
"PyObject *resultat;\n"
"Py_BEGIN_CRITICAL_SECTION(obj);\n"
"resultat = Py_NewRef(obj->räkning);\n"
"Py_END_CRITICAL_SECTION();\n"
"returnera resultat;\n"
"\n"
"// skriv räkningen, förbrukar referens från new_count\n"
"Py_BEGIN_CRITICAL_SECTION(obj);\n"
"obj->räkning = ny_räkning;\n"
"Py_END_CRITICAL_SECTION();"

msgid "How Critical Sections Work"
msgstr "Hur kritiska avsnitt fungerar"

msgid ""
"Unlike traditional locks, critical sections do not guarantee exclusive "
"access throughout their entire duration. If a thread would block while "
"holding a critical section (e.g., by acquiring another lock or performing I/"
"O), the critical section is temporarily suspended—all locks are released—and "
"then resumed when the blocking operation completes."
msgstr ""
"Till skillnad från traditionella lås garanterar kritiska sektioner inte "
"exklusiv åtkomst under hela sin varaktighet. Om en tråd skulle blockeras "
"medan den håller en kritisk sektion (t.ex. genom att förvärva ett annat lås "
"eller utföra I/O), avbryts den kritiska sektionen tillfälligt - alla lås "
"frigörs - och återupptas sedan när blockeringsoperationen är klar."

msgid ""
"This behavior is similar to what happens with the GIL when a thread makes a "
"blocking call. The key differences are:"
msgstr ""
"Det här beteendet liknar det som händer med GIL när en tråd gör ett "
"blockerande anrop. De viktigaste skillnaderna är:"

msgid "Critical sections operate on a per-object basis rather than globally"
msgstr "Kritiska sektioner fungerar per objekt i stället för globalt"

msgid ""
"Critical sections follow a stack discipline within each thread (the "
"\"begin\" and \"end\" macros enforce this since they must be paired and "
"within the same scope)"
msgstr ""
"Kritiska avsnitt följer en stapeldisciplin inom varje tråd (makron \"begin\" "
"och \"end\" upprätthåller detta eftersom de måste vara parade och inom samma "
"omfattning)"

msgid ""
"Critical sections automatically release and reacquire locks around potential "
"blocking operations"
msgstr ""
"Kritiska sektioner frigör och återtar automatiskt lås runt potentiella "
"blockeringsoperationer"

msgid "Deadlock Avoidance"
msgstr "Undvikande av dödläge"

msgid "Critical sections help avoid deadlocks in two ways:"
msgstr "Kritiska avsnitt hjälper till att undvika dödlägen på två sätt:"

msgid ""
"If a thread tries to acquire a lock that's already held by another thread, "
"it first suspends all of its active critical sections, temporarily releasing "
"their locks"
msgstr ""
"Om en tråd försöker förvärva ett lås som redan innehas av en annan tråd, "
"avbryter den först alla sina aktiva kritiska sektioner och frigör "
"tillfälligt deras lås"

msgid ""
"When the blocking operation completes, only the top-most critical section is "
"reacquired first"
msgstr ""
"När blockeringsoperationen är klar återfås endast den översta kritiska "
"sektionen först"

msgid ""
"This means you cannot rely on nested critical sections to lock multiple "
"objects at once, as the inner critical section may suspend the outer ones. "
"Instead, use :c:macro:`Py_BEGIN_CRITICAL_SECTION2` to lock two objects "
"simultaneously."
msgstr ""
"Detta innebär att du inte kan förlita dig på nästlade kritiska sektioner för "
"att låsa flera objekt samtidigt, eftersom den inre kritiska sektionen kan "
"avbryta de yttre. Använd istället :c:macro:`Py_BEGIN_CRITICAL_SECTION2` för "
"att låsa två objekt samtidigt."

msgid ""
"Note that the locks described above are only :c:type:`!PyMutex` based locks. "
"The critical section implementation does not know about or affect other "
"locking mechanisms that might be in use, like POSIX mutexes.  Also note that "
"while blocking on any :c:type:`!PyMutex` causes the critical sections to be "
"suspended, only the mutexes that are part of the critical sections are "
"released.  If :c:type:`!PyMutex` is used without a critical section, it will "
"not be released and therefore does not get the same deadlock avoidance."
msgstr ""
"Observera att de lås som beskrivs ovan endast är :c:type:`!PyMutex`-baserade "
"lås. Implementeringen av kritiska sektioner känner inte till eller påverkar "
"andra låsmekanismer som kan användas, som POSIX-mutexar.  Observera också "
"att medan blockering på någon :c:type:`!PyMutex` gör att de kritiska "
"sektionerna avbryts, frigörs endast de mutex som är en del av de kritiska "
"sektionerna.  Om :c:type:`!PyMutex` används utan en kritisk sektion kommer "
"den inte att frigöras och får därför inte samma undvikande av dödlägen."

msgid "Important Considerations"
msgstr "Viktiga överväganden"

msgid ""
"Critical sections may temporarily release their locks, allowing other "
"threads to modify the protected data. Be careful about making assumptions "
"about the state of the data after operations that might block."
msgstr ""
"Kritiska sektioner kan tillfälligt släppa sina lås, vilket gör det möjligt "
"för andra trådar att modifiera de skyddade data. Var försiktig med att göra "
"antaganden om datatillståndet efter operationer som kan blockera."

msgid ""
"Because locks can be temporarily released (suspended), entering a critical "
"section does not guarantee exclusive access to the protected resource "
"throughout the section's duration. If code within a critical section calls "
"another function that blocks (e.g., acquires another lock, performs blocking "
"I/O), all locks held by the thread via critical sections will be released. "
"This is similar to how the GIL can be released during blocking calls."
msgstr ""
"Eftersom lås kan frigöras tillfälligt (suspenderas) garanterar inte en "
"kritisk sektion exklusiv åtkomst till den skyddade resursen under hela "
"sektionens varaktighet. Om kod inom en kritisk sektion anropar en annan "
"funktion som blockerar (t.ex. förvärvar ett annat lås, utför blockerande I/"
"O), kommer alla lås som tråden har via kritiska sektioner att frigöras. "
"Detta liknar hur GIL kan frigöras under blockerande anrop."

msgid ""
"Only the lock(s) associated with the most recently entered (top-most) "
"critical section are guaranteed to be held at any given time. Locks for "
"outer, nested critical sections might have been suspended."
msgstr ""
"Endast det eller de lås som är associerade med den senast inmatade (översta) "
"kritiska sektionen garanteras att hållas vid varje given tidpunkt. Lås för "
"yttre, nästlade kritiska sektioner kan ha upphävts."

msgid ""
"You can lock at most two objects simultaneously with these APIs. If you need "
"to lock more objects, you'll need to restructure your code."
msgstr ""
"Du kan låsa högst två objekt samtidigt med dessa API:er. Om du behöver låsa "
"fler objekt måste du omstrukturera din kod."

msgid ""
"While critical sections will not deadlock if you attempt to lock the same "
"object twice, they are less efficient than purpose-built reentrant locks for "
"this use case."
msgstr ""
"Även om kritiska sektioner inte låser sig om du försöker låsa samma objekt "
"två gånger, är de mindre effektiva än specialbyggda reentranta lås för detta "
"användningsfall."

msgid ""
"When using :c:macro:`Py_BEGIN_CRITICAL_SECTION2`, the order of the objects "
"doesn't affect correctness (the implementation handles deadlock avoidance), "
"but it's good practice to always lock objects in a consistent order."
msgstr ""
"När du använder :c:macro:`Py_BEGIN_CRITICAL_SECTION2` påverkar inte "
"ordningen på objekten korrektheten (implementationen hanterar undvikande av "
"deadlock), men det är god praxis att alltid låsa objekt i en konsekvent "
"ordning."

msgid ""
"Remember that the critical section macros are primarily for protecting "
"access to *Python objects* that might be involved in internal CPython "
"operations susceptible to the deadlock scenarios described above. For "
"protecting purely internal extension state, standard mutexes or other "
"synchronization primitives might be more appropriate."
msgstr ""
"Kom ihåg att makron för kritiska avsnitt främst är till för att skydda "
"åtkomst till *Python-objekt* som kan vara inblandade i interna CPython-"
"operationer som är känsliga för de deadlock-scenarier som beskrivs ovan. För "
"att skydda rent interna tilläggstillstånd kan standardmutexar eller andra "
"synkroniseringsprimitiver vara mer lämpliga."

msgid "Building Extensions for the Free-Threaded Build"
msgstr "Bygga tillägg för Free-Threaded-versionen"

msgid ""
"C API extensions need to be built specifically for the free-threaded build. "
"The wheels, shared libraries, and binaries are indicated by a ``t`` suffix."
msgstr ""
"C API-tillägg måste byggas specifikt för den fritt trådade versionen. "
"Hjulen, de delade biblioteken och binärerna anges med suffixet \"t\"."

msgid ""
"`pypa/manylinux <https://github.com/pypa/manylinux>`_ supports the free-"
"threaded build, with the ``t`` suffix, such as ``python3.13t``."
msgstr ""
"`pypa/manylinux <https://github.com/pypa/manylinux>`_ stöder den frittrådade "
"byggnaden, med suffixet ``t``, till exempel ``python3.13t``."

msgid ""
"`pypa/cibuildwheel <https://github.com/pypa/cibuildwheel>`_ supports the "
"free-threaded build if you set `CIBW_ENABLE to cpython-freethreading "
"<https://cibuildwheel.pypa.io/en/stable/options/#enable>`_."
msgstr ""
"`pypa/cibuildwheel <https://github.com/pypa/cibuildwheel>`_ stöder fri "
"trådad byggnation om du ställer in `CIBW_ENABLE till cpython-freethreading "
"<https://cibuildwheel.pypa.io/en/stable/options/#enable>`_."

msgid "Limited C API and Stable ABI"
msgstr "Begränsat C API och stabilt ABI"

msgid ""
"The free-threaded build does not currently support the :ref:`Limited C API "
"<limited-c-api>` or the stable ABI.  If you use `setuptools <https://"
"setuptools.pypa.io/en/latest/setuptools.html>`_ to build your extension and "
"currently set ``py_limited_api=True`` you can use ``py_limited_api=not "
"sysconfig.get_config_var(\"Py_GIL_DISABLED\")`` to opt out of the limited "
"API when building with the free-threaded build."
msgstr ""
"Den fritt trådade byggnaden stöder för närvarande inte :ref:`Limited C API "
"<limited-c-api>` eller det stabila ABI.  Om du använder `setuptools &lt;"
"https://setuptools.pypa.io/en/latest/setuptools.html&gt;`_ för att bygga "
"ditt tillägg och för närvarande ställer in ``py_limited_api=True`` kan du "
"använda ``py_limited_api=not sysconfig.get_config_var(\"Py_GIL_DISABLED\")`` "
"för att välja bort det begränsade API:et när du bygger med den fritt trådade "
"versionen."

msgid ""
"You will need to build separate wheels specifically for the free-threaded "
"build.  If you currently use the stable ABI, you can continue to build a "
"single wheel for multiple non-free-threaded Python versions."
msgstr ""
"Du kommer att behöva bygga separata hjul specifikt för den fritt trådade "
"versionen.  Om du för närvarande använder den stabila ABI kan du fortsätta "
"att bygga ett enda hjul för flera icke-frittrådade Python-versioner."

msgid "Windows"
msgstr "Fönster"

msgid ""
"Due to a limitation of the official Windows installer, you will need to "
"manually define ``Py_GIL_DISABLED=1`` when building extensions from source."
msgstr ""
"På grund av en begränsning i den officiella Windows-installationsprogrammet "
"måste du manuellt definiera ``Py_GIL_DISABLED=1`` när du bygger tillägg från "
"källan."

msgid ""
"`Porting Extension Modules to Support Free-Threading <https://py-free-"
"threading.github.io/porting/>`_: A community-maintained porting guide for "
"extension authors."
msgstr ""
"\"Portning av tilläggsmoduler för att stödja fri trådning <https://py-free-"
"threading.github.io/porting/>`_: En community-underhållen portningsguide för "
"tilläggsförfattare."
