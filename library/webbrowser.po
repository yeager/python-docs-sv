# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!webbrowser` --- Convenient web-browser controller"
msgstr ""

msgid "**Source code:** :source:`Lib/webbrowser.py`"
msgstr ""

msgid ""
"The :mod:`webbrowser` module provides a high-level interface to allow "
"displaying web-based documents to users. Under most circumstances, simply "
"calling the :func:`.open` function from this module will do the right thing."
msgstr ""

msgid ""
"Under Unix, graphical browsers are preferred under X11, but text-mode "
"browsers will be used if graphical browsers are not available or an X11 "
"display isn't available.  If text-mode browsers are used, the calling "
"process will block until the user exits the browser."
msgstr ""

msgid ""
"If the environment variable :envvar:`BROWSER` exists, it is interpreted as "
"the :data:`os.pathsep`-separated list of browsers to try ahead of the "
"platform defaults.  When the value of a list part contains the string "
"``%s``, then it is interpreted as a literal browser command line to be used "
"with the argument URL substituted for ``%s``; if the value is a single word "
"that refers to one of the already registered browsers this browser is added "
"to the front of the search list; if the part does not contain ``%s``, it is "
"simply interpreted as the name of the browser to launch. [1]_"
msgstr ""

msgid ""
"The :envvar:`BROWSER` variable can now also be used to reorder the list of "
"platform defaults. This is particularly useful on macOS where the platform "
"defaults do not refer to command-line tools on :envvar:`PATH`."
msgstr ""

msgid ""
"For non-Unix platforms, or when a remote browser is available on Unix, the "
"controlling process will not wait for the user to finish with the browser, "
"but allow the remote browser to maintain its own windows on the display.  If "
"remote browsers are not available on Unix, the controlling process will "
"launch a new browser and wait."
msgstr ""

msgid ""
"On iOS, the :envvar:`BROWSER` environment variable, as well as any arguments "
"controlling autoraise, browser preference, and new tab/window creation will "
"be ignored. Web pages will *always* be opened in the user's preferred "
"browser, in a new tab, with the browser being brought to the foreground. The "
"use of the :mod:`webbrowser` module on iOS requires the :mod:`ctypes` "
"module. If :mod:`ctypes` isn't available, calls to :func:`.open` will fail."
msgstr ""

msgid ""
"The script :program:`webbrowser` can be used as a command-line interface for "
"the module. It accepts a URL as the argument. It accepts the following "
"optional parameters:"
msgstr ""

msgid "Opens the URL in a new browser window, if possible."
msgstr ""

msgid "Opens the URL in a new browser tab."
msgstr ""

msgid "The options are, naturally, mutually exclusive.  Usage example:"
msgstr ""

msgid "python -m webbrowser -t \"https://www.python.org\""
msgstr ""

msgid "Availability"
msgstr ""

msgid "The following exception is defined:"
msgstr ""

msgid "Exception raised when a browser control error occurs."
msgstr ""

msgid "The following functions are defined:"
msgstr ""

msgid ""
"Display *url* using the default browser. If *new* is 0, the *url* is opened "
"in the same browser window if possible.  If *new* is 1, a new browser window "
"is opened if possible.  If *new* is 2, a new browser page (\"tab\") is "
"opened if possible.  If *autoraise* is ``True``, the window is raised if "
"possible (note that under many window managers this will occur regardless of "
"the setting of this variable)."
msgstr ""

msgid ""
"Returns ``True`` if a browser was successfully launched, ``False`` otherwise."
msgstr ""

msgid ""
"Note that on some platforms, trying to open a filename using this function, "
"may work and start the operating system's associated program.  However, this "
"is neither supported nor portable."
msgstr ""

msgid ""
"Raises an :ref:`auditing event <auditing>` ``webbrowser.open`` with argument "
"``url``."
msgstr ""

msgid ""
"Open *url* in a new window of the default browser, if possible, otherwise, "
"open *url* in the only browser window."
msgstr ""

msgid ""
"Open *url* in a new page (\"tab\") of the default browser, if possible, "
"otherwise equivalent to :func:`open_new`."
msgstr ""

msgid ""
"Return a controller object for the browser type *using*.  If *using* is "
"``None``, return a controller for a default browser appropriate to the "
"caller's environment."
msgstr ""

msgid ""
"Register the browser type *name*.  Once a browser type is registered, the :"
"func:`get` function can return a controller for that browser type.  If "
"*instance* is not provided, or is ``None``, *constructor* will be called "
"without parameters to create an instance when needed.  If *instance* is "
"provided, *constructor* will never be called, and may be ``None``."
msgstr ""

msgid ""
"Setting *preferred* to ``True`` makes this browser a preferred result for a :"
"func:`get` call with no argument.  Otherwise, this entry point is only "
"useful if you plan to either set the :envvar:`BROWSER` variable or call :"
"func:`get` with a nonempty argument matching the name of a handler you "
"declare."
msgstr ""

msgid "*preferred* keyword-only parameter was added."
msgstr ""

msgid ""
"A number of browser types are predefined.  This table gives the type names "
"that may be passed to the :func:`get` function and the corresponding "
"instantiations for the controller classes, all defined in this module."
msgstr ""

msgid "Type Name"
msgstr ""

msgid "Class Name"
msgstr ""

msgid "Notes"
msgstr ""

msgid "``'mozilla'``"
msgstr ""

msgid "``Mozilla('mozilla')``"
msgstr ""

msgid "``'firefox'``"
msgstr ""

msgid "``'epiphany'``"
msgstr ""

msgid "``Epiphany('epiphany')``"
msgstr ""

msgid "``'kfmclient'``"
msgstr ""

msgid "``Konqueror()``"
msgstr ""

msgid "\\(1)"
msgstr ""

msgid "``'konqueror'``"
msgstr ""

msgid "``'kfm'``"
msgstr ""

msgid "``'opera'``"
msgstr ""

msgid "``Opera()``"
msgstr ""

msgid "``'links'``"
msgstr ""

msgid "``GenericBrowser('links')``"
msgstr ""

msgid "``'elinks'``"
msgstr ""

msgid "``Elinks('elinks')``"
msgstr ""

msgid "``'lynx'``"
msgstr ""

msgid "``GenericBrowser('lynx')``"
msgstr ""

msgid "``'w3m'``"
msgstr ""

msgid "``GenericBrowser('w3m')``"
msgstr ""

msgid "``'windows-default'``"
msgstr ""

msgid "``WindowsDefault``"
msgstr ""

msgid "\\(2)"
msgstr ""

msgid "``'macosx'``"
msgstr ""

msgid "``MacOSXOSAScript('default')``"
msgstr ""

msgid "\\(3)"
msgstr ""

msgid "``'safari'``"
msgstr ""

msgid "``MacOSXOSAScript('safari')``"
msgstr ""

msgid "``'google-chrome'``"
msgstr ""

msgid "``Chrome('google-chrome')``"
msgstr ""

msgid "``'chrome'``"
msgstr ""

msgid "``Chrome('chrome')``"
msgstr ""

msgid "``'chromium'``"
msgstr ""

msgid "``Chromium('chromium')``"
msgstr ""

msgid "``'chromium-browser'``"
msgstr ""

msgid "``Chromium('chromium-browser')``"
msgstr ""

msgid "``'iosbrowser'``"
msgstr ""

msgid "``IOSBrowser``"
msgstr ""

msgid "\\(4)"
msgstr ""

msgid "Notes:"
msgstr ""

msgid ""
"\"Konqueror\" is the file manager for the KDE desktop environment for Unix, "
"and only makes sense to use if KDE is running.  Some way of reliably "
"detecting KDE would be nice; the :envvar:`!KDEDIR` variable is not "
"sufficient.  Note also that the name \"kfm\" is used even when using the :"
"program:`konqueror` command with KDE 2 --- the implementation selects the "
"best strategy for running Konqueror."
msgstr ""

msgid "Only on Windows platforms."
msgstr ""

msgid "Only on macOS."
msgstr ""

msgid "Only on iOS."
msgstr ""

msgid ""
"A new :class:`!MacOSXOSAScript` class has been added and is used on Mac "
"instead of the previous :class:`!MacOSX` class. This adds support for "
"opening browsers not currently set as the OS default."
msgstr ""

msgid "Support for Chrome/Chromium has been added."
msgstr ""

msgid ""
"Support for several obsolete browsers has been removed. Removed browsers "
"include Grail, Mosaic, Netscape, Galeon, Skipstone, Iceape, and Firefox "
"versions 35 and below."
msgstr ""

msgid "Support for iOS has been added."
msgstr ""

msgid "Here are some simple examples::"
msgstr ""

msgid ""
"url = 'https://docs.python.org/'\n"
"\n"
"# Open URL in a new tab, if a browser window is already open.\n"
"webbrowser.open_new_tab(url)\n"
"\n"
"# Open URL in new window, raising the window if possible.\n"
"webbrowser.open_new(url)"
msgstr ""

msgid "Browser Controller Objects"
msgstr ""

msgid ""
"Browser controllers provide the :attr:`~controller.name` attribute, and the "
"following three methods which parallel module-level convenience functions:"
msgstr ""

msgid "System-dependent name for the browser."
msgstr ""

msgid ""
"Display *url* using the browser handled by this controller. If *new* is 1, a "
"new browser window is opened if possible. If *new* is 2, a new browser page "
"(\"tab\") is opened if possible."
msgstr ""

msgid ""
"Open *url* in a new window of the browser handled by this controller, if "
"possible, otherwise, open *url* in the only browser window.  Alias :func:"
"`open_new`."
msgstr ""

msgid ""
"Open *url* in a new page (\"tab\") of the browser handled by this "
"controller, if possible, otherwise equivalent to :func:`open_new`."
msgstr ""

msgid "Footnotes"
msgstr ""

msgid ""
"Executables named here without a full path will be searched in the "
"directories given in the :envvar:`PATH` environment variable."
msgstr ""
