# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-25 14:20+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Lexical analysis"
msgstr ""

msgid ""
"A Python program is read by a *parser*.  Input to the parser is a stream of :"
"term:`tokens <token>`, generated by the *lexical analyzer* (also known as "
"the *tokenizer*). This chapter describes how the lexical analyzer breaks a "
"file into tokens."
msgstr ""

msgid ""
"Python reads program text as Unicode code points; the encoding of a source "
"file can be given by an encoding declaration and defaults to UTF-8, see :pep:"
"`3120` for details.  If the source file cannot be decoded, a :exc:"
"`SyntaxError` is raised."
msgstr ""

msgid "Line structure"
msgstr ""

msgid "A Python program is divided into a number of *logical lines*."
msgstr ""

msgid "Logical lines"
msgstr ""

msgid ""
"The end of a logical line is represented by the token :data:`~token."
"NEWLINE`. Statements cannot cross logical line boundaries except where :data:"
"`!NEWLINE` is allowed by the syntax (e.g., between statements in compound "
"statements). A logical line is constructed from one or more *physical lines* "
"by following the :ref:`explicit <explicit-joining>` or :ref:`implicit "
"<implicit-joining>` *line joining* rules."
msgstr ""

msgid "Physical lines"
msgstr ""

msgid ""
"A physical line is a sequence of characters terminated by one the following "
"end-of-line sequences:"
msgstr ""

msgid "the Unix form using ASCII LF (linefeed),"
msgstr ""

msgid ""
"the Windows form using the ASCII sequence CR LF (return followed by "
"linefeed),"
msgstr ""

msgid "the '`Classic Mac OS`__' form using the ASCII CR (return) character."
msgstr ""

msgid ""
"Regardless of platform, each of these sequences is replaced by a single "
"ASCII LF (linefeed) character. (This is done even inside :ref:`string "
"literals <strings>`.) Each line can use any of the sequences; they do not "
"need to be consistent within a file."
msgstr ""

msgid ""
"The end of input also serves as an implicit terminator for the final "
"physical line."
msgstr ""

msgid "Formally:"
msgstr ""

msgid "Comments"
msgstr ""

msgid ""
"A comment starts with a hash character (``#``) that is not part of a string "
"literal, and ends at the end of the physical line.  A comment signifies the "
"end of the logical line unless the implicit line joining rules are invoked. "
"Comments are ignored by the syntax."
msgstr ""

msgid "Encoding declarations"
msgstr ""

msgid ""
"If a comment in the first or second line of the Python script matches the "
"regular expression ``coding[=:]\\s*([-\\w.]+)``, this comment is processed "
"as an encoding declaration; the first group of this expression names the "
"encoding of the source code file. The encoding declaration must appear on a "
"line of its own. If it is the second line, the first line must also be a "
"comment-only line. The recommended forms of an encoding expression are ::"
msgstr ""

msgid "# -*- coding: <encoding-name> -*-"
msgstr ""

msgid "which is recognized also by GNU Emacs, and ::"
msgstr ""

msgid "# vim:fileencoding=<encoding-name>"
msgstr ""

msgid "which is recognized by Bram Moolenaar's VIM."
msgstr ""

msgid ""
"If no encoding declaration is found, the default encoding is UTF-8.  If the "
"implicit or explicit encoding of a file is UTF-8, an initial UTF-8 byte-"
"order mark (``b'\\xef\\xbb\\xbf'``) is ignored rather than being a syntax "
"error."
msgstr ""

msgid ""
"If an encoding is declared, the encoding name must be recognized by Python "
"(see :ref:`standard-encodings`). The encoding is used for all lexical "
"analysis, including string literals, comments and identifiers."
msgstr ""

msgid ""
"All lexical analysis, including string literals, comments and identifiers, "
"works on Unicode text decoded using the source encoding. Any Unicode code "
"point, except the NUL control character, can appear in Python source."
msgstr ""

msgid "Explicit line joining"
msgstr ""

msgid ""
"Two or more physical lines may be joined into logical lines using backslash "
"characters (``\\``), as follows: when a physical line ends in a backslash "
"that is not part of a string literal or comment, it is joined with the "
"following forming a single logical line, deleting the backslash and the "
"following end-of-line character.  For example::"
msgstr ""

msgid ""
"if 1900 < year < 2100 and 1 <= month <= 12 \\\n"
"   and 1 <= day <= 31 and 0 <= hour < 24 \\\n"
"   and 0 <= minute < 60 and 0 <= second < 60:   # Looks like a valid date\n"
"        return 1"
msgstr ""

msgid ""
"A line ending in a backslash cannot carry a comment.  A backslash does not "
"continue a comment.  A backslash does not continue a token except for string "
"literals (i.e., tokens other than string literals cannot be split across "
"physical lines using a backslash).  A backslash is illegal elsewhere on a "
"line outside a string literal."
msgstr ""

msgid "Implicit line joining"
msgstr ""

msgid ""
"Expressions in parentheses, square brackets or curly braces can be split "
"over more than one physical line without using backslashes. For example::"
msgstr ""

msgid ""
"month_names = ['Januari', 'Februari', 'Maart',      # These are the\n"
"               'April',   'Mei',      'Juni',       # Dutch names\n"
"               'Juli',    'Augustus', 'September',  # for the months\n"
"               'Oktober', 'November', 'December']   # of the year"
msgstr ""

msgid ""
"Implicitly continued lines can carry comments.  The indentation of the "
"continuation lines is not important.  Blank continuation lines are allowed. "
"There is no NEWLINE token between implicit continuation lines.  Implicitly "
"continued lines can also occur within triple-quoted strings (see below); in "
"that case they cannot carry comments."
msgstr ""

msgid "Blank lines"
msgstr ""

msgid ""
"A logical line that contains only spaces, tabs, formfeeds and possibly a "
"comment, is ignored (i.e., no :data:`~token.NEWLINE` token is generated). "
"During interactive input of statements, handling of a blank line may differ "
"depending on the implementation of the read-eval-print loop. In the standard "
"interactive interpreter, an entirely blank logical line (that is, one "
"containing not even whitespace or a comment) terminates a multi-line "
"statement."
msgstr ""

msgid "Indentation"
msgstr ""

msgid ""
"Leading whitespace (spaces and tabs) at the beginning of a logical line is "
"used to compute the indentation level of the line, which in turn is used to "
"determine the grouping of statements."
msgstr ""

msgid ""
"Tabs are replaced (from left to right) by one to eight spaces such that the "
"total number of characters up to and including the replacement is a multiple "
"of eight (this is intended to be the same rule as used by Unix).  The total "
"number of spaces preceding the first non-blank character then determines the "
"line's indentation.  Indentation cannot be split over multiple physical "
"lines using backslashes; the whitespace up to the first backslash determines "
"the indentation."
msgstr ""

msgid ""
"Indentation is rejected as inconsistent if a source file mixes tabs and "
"spaces in a way that makes the meaning dependent on the worth of a tab in "
"spaces; a :exc:`TabError` is raised in that case."
msgstr ""

msgid ""
"**Cross-platform compatibility note:** because of the nature of text editors "
"on non-UNIX platforms, it is unwise to use a mixture of spaces and tabs for "
"the indentation in a single source file.  It should also be noted that "
"different platforms may explicitly limit the maximum indentation level."
msgstr ""

msgid ""
"A formfeed character may be present at the start of the line; it will be "
"ignored for the indentation calculations above.  Formfeed characters "
"occurring elsewhere in the leading whitespace have an undefined effect (for "
"instance, they may reset the space count to zero)."
msgstr ""

msgid ""
"The indentation levels of consecutive lines are used to generate :data:"
"`~token.INDENT` and :data:`~token.DEDENT` tokens, using a stack, as follows."
msgstr ""

msgid ""
"Before the first line of the file is read, a single zero is pushed on the "
"stack; this will never be popped off again.  The numbers pushed on the stack "
"will always be strictly increasing from bottom to top.  At the beginning of "
"each logical line, the line's indentation level is compared to the top of "
"the stack. If it is equal, nothing happens. If it is larger, it is pushed on "
"the stack, and one :data:`!INDENT` token is generated.  If it is smaller, it "
"*must* be one of the numbers occurring on the stack; all numbers on the "
"stack that are larger are popped off, and for each number popped off a :data:"
"`!DEDENT` token is generated. At the end of the file, a :data:`!DEDENT` "
"token is generated for each number remaining on the stack that is larger "
"than zero."
msgstr ""

msgid ""
"Here is an example of a correctly (though confusingly) indented piece of "
"Python code::"
msgstr ""

msgid ""
"def perm(l):\n"
"        # Compute the list of all permutations of l\n"
"    if len(l) <= 1:\n"
"                  return [l]\n"
"    r = []\n"
"    for i in range(len(l)):\n"
"             s = l[:i] + l[i+1:]\n"
"             p = perm(s)\n"
"             for x in p:\n"
"              r.append(l[i:i+1] + x)\n"
"    return r"
msgstr ""

msgid "The following example shows various indentation errors::"
msgstr ""

msgid ""
" def perm(l):                       # error: first line indented\n"
"for i in range(len(l)):             # error: not indented\n"
"    s = l[:i] + l[i+1:]\n"
"        p = perm(l[:i] + l[i+1:])   # error: unexpected indent\n"
"        for x in p:\n"
"                r.append(l[i:i+1] + x)\n"
"            return r                # error: inconsistent dedent"
msgstr ""

msgid ""
"(Actually, the first three errors are detected by the parser; only the last "
"error is found by the lexical analyzer --- the indentation of ``return r`` "
"does not match a level popped off the stack.)"
msgstr ""

msgid "Whitespace between tokens"
msgstr ""

msgid ""
"Except at the beginning of a logical line or in string literals, the "
"whitespace characters space, tab and formfeed can be used interchangeably to "
"separate tokens.  Whitespace is needed between two tokens only if their "
"concatenation could otherwise be interpreted as a different token. For "
"example, ``ab`` is one token, but ``a b`` is two tokens. However, ``+a`` and "
"``+ a`` both produce two tokens, ``+`` and ``a``, as ``+a`` is not a valid "
"token."
msgstr ""

msgid "End marker"
msgstr ""

msgid ""
"At the end of non-interactive input, the lexical analyzer generates an :data:"
"`~token.ENDMARKER` token."
msgstr ""

msgid "Other tokens"
msgstr ""

msgid ""
"Besides :data:`~token.NEWLINE`, :data:`~token.INDENT` and :data:`~token."
"DEDENT`, the following categories of tokens exist: *identifiers* and "
"*keywords* (:data:`~token.NAME`), *literals* (such as :data:`~token.NUMBER` "
"and :data:`~token.STRING`), and other symbols (*operators* and "
"*delimiters*, :data:`~token.OP`). Whitespace characters (other than logical "
"line terminators, discussed earlier) are not tokens, but serve to delimit "
"tokens. Where ambiguity exists, a token comprises the longest possible "
"string that forms a legal token, when read from left to right."
msgstr ""

msgid "Names (identifiers and keywords)"
msgstr ""

msgid ""
":data:`~token.NAME` tokens represent *identifiers*, *keywords*, and *soft "
"keywords*."
msgstr ""

msgid ""
"Within the ASCII range (U+0001..U+007F), the valid characters for names "
"include the uppercase and lowercase letters (``A-Z`` and ``a-z``), the "
"underscore ``_`` and, except for the first character, the digits ``0`` "
"through ``9``."
msgstr ""

msgid ""
"Names must contain at least one character, but have no upper length limit. "
"Case is significant."
msgstr ""

msgid ""
"Besides ``A-Z``, ``a-z``, ``_`` and ``0-9``, names can also use \"letter-"
"like\" and \"number-like\" characters from outside the ASCII range, as "
"detailed below."
msgstr ""

msgid ""
"All identifiers are converted into the `normalization form`_ NFKC while "
"parsing; comparison of identifiers is based on NFKC."
msgstr ""

msgid ""
"Formally, the first character of a normalized identifier must belong to the "
"set ``id_start``, which is the union of:"
msgstr ""

msgid "Unicode category ``<Lu>`` - uppercase letters (includes ``A`` to ``Z``)"
msgstr ""

msgid "Unicode category ``<Ll>`` - lowercase letters (includes ``a`` to ``z``)"
msgstr ""

msgid "Unicode category ``<Lt>`` - titlecase letters"
msgstr ""

msgid "Unicode category ``<Lm>`` - modifier letters"
msgstr ""

msgid "Unicode category ``<Lo>`` - other letters"
msgstr ""

msgid "Unicode category ``<Nl>`` - letter numbers"
msgstr ""

msgid "{``\"_\"``} - the underscore"
msgstr ""

msgid ""
"``<Other_ID_Start>`` - an explicit set of characters in `PropList.txt`_ to "
"support backwards compatibility"
msgstr ""

msgid ""
"The remaining characters must belong to the set ``id_continue``, which is "
"the union of:"
msgstr ""

msgid "all characters in ``id_start``"
msgstr ""

msgid "Unicode category ``<Nd>`` - decimal numbers (includes ``0`` to ``9``)"
msgstr ""

msgid "Unicode category ``<Pc>`` - connector punctuations"
msgstr ""

msgid "Unicode category ``<Mn>`` - nonspacing marks"
msgstr ""

msgid "Unicode category ``<Mc>`` - spacing combining marks"
msgstr ""

msgid ""
"``<Other_ID_Continue>`` - another explicit set of characters in `PropList."
"txt`_ to support backwards compatibility"
msgstr ""

msgid ""
"Unicode categories use the version of the Unicode Character Database as "
"included in the :mod:`unicodedata` module."
msgstr ""

msgid ""
"These sets are based on the Unicode standard annex `UAX-31`_. See also :pep:"
"`3131` for further details."
msgstr ""

msgid ""
"Even more formally, names are described by the following lexical definitions:"
msgstr ""

msgid ""
"A non-normative listing of all valid identifier characters as defined by "
"Unicode is available in the `DerivedCoreProperties.txt`_ file in the Unicode "
"Character Database."
msgstr ""

msgid "Keywords"
msgstr ""

msgid ""
"The following names are used as reserved words, or *keywords* of the "
"language, and cannot be used as ordinary identifiers.  They must be spelled "
"exactly as written here:"
msgstr ""

msgid ""
"False      await      else       import     pass\n"
"None       break      except     in         raise\n"
"True       class      finally    is         return\n"
"and        continue   for        lambda     try\n"
"as         def        from       nonlocal   while\n"
"assert     del        global     not        with\n"
"async      elif       if         or         yield"
msgstr ""

msgid "Soft Keywords"
msgstr ""

msgid ""
"Some names are only reserved under specific contexts. These are known as "
"*soft keywords*:"
msgstr ""

msgid ""
"``match``, ``case``, and ``_``, when used in the :keyword:`match` statement."
msgstr ""

msgid "``type``, when used in the :keyword:`type` statement."
msgstr ""

msgid ""
"These syntactically act as keywords in their specific contexts, but this "
"distinction is done at the parser level, not when tokenizing."
msgstr ""

msgid ""
"As soft keywords, their use in the grammar is possible while still "
"preserving compatibility with existing code that uses these names as "
"identifier names."
msgstr ""

msgid "``type`` is now a soft keyword."
msgstr ""

msgid "Reserved classes of identifiers"
msgstr ""

msgid ""
"Certain classes of identifiers (besides keywords) have special meanings.  "
"These classes are identified by the patterns of leading and trailing "
"underscore characters:"
msgstr ""

msgid "``_*``"
msgstr ""

msgid "Not imported by ``from module import *``."
msgstr ""

msgid "``_``"
msgstr ""

msgid ""
"In a ``case`` pattern within a :keyword:`match` statement, ``_`` is a :ref:"
"`soft keyword <soft-keywords>` that denotes a :ref:`wildcard <wildcard-"
"patterns>`."
msgstr ""

msgid ""
"Separately, the interactive interpreter makes the result of the last "
"evaluation available in the variable ``_``. (It is stored in the :mod:"
"`builtins` module, alongside built-in functions like ``print``.)"
msgstr ""

msgid ""
"Elsewhere, ``_`` is a regular identifier. It is often used to name "
"\"special\" items, but it is not special to Python itself."
msgstr ""

msgid ""
"The name ``_`` is often used in conjunction with internationalization; refer "
"to the documentation for the :mod:`gettext` module for more information on "
"this convention."
msgstr ""

msgid "It is also commonly used for unused variables."
msgstr ""

msgid "``__*__``"
msgstr ""

msgid ""
"System-defined names, informally known as \"dunder\" names. These names are "
"defined by the interpreter and its implementation (including the standard "
"library). Current system names are discussed in the :ref:`specialnames` "
"section and elsewhere. More will likely be defined in future versions of "
"Python.  *Any* use of ``__*__`` names, in any context, that does not follow "
"explicitly documented use, is subject to breakage without warning."
msgstr ""

msgid "``__*``"
msgstr ""

msgid ""
"Class-private names.  Names in this category, when used within the context "
"of a class definition, are re-written to use a mangled form to help avoid "
"name clashes between \"private\" attributes of base and derived classes. See "
"section :ref:`atom-identifiers`."
msgstr ""

msgid "Literals"
msgstr ""

msgid "Literals are notations for constant values of some built-in types."
msgstr ""

msgid ""
"In terms of lexical analysis, Python has :ref:`string, bytes <strings>` and :"
"ref:`numeric <numbers>` literals."
msgstr ""

msgid ""
"Other \"literals\" are lexically denoted using :ref:`keywords <keywords>` "
"(``None``, ``True``, ``False``) and the special :ref:`ellipsis token "
"<lexical-ellipsis>` (``...``)."
msgstr ""

msgid "String and Bytes literals"
msgstr ""

msgid ""
"String literals are text enclosed in single quotes (``'``) or double quotes "
"(``\"``). For example:"
msgstr ""

msgid ""
"\"spam\"\n"
"'eggs'"
msgstr ""

msgid ""
"The quote used to start the literal also terminates it, so a string literal "
"can only contain the other quote (except with escape sequences, see below). "
"For example:"
msgstr ""

msgid ""
"'Say \"Hello\", please.'\n"
"\"Don't do that!\""
msgstr ""

msgid ""
"Except for this limitation, the choice of quote character (``'`` or ``\"``) "
"does not affect how the literal is parsed."
msgstr ""

msgid ""
"Inside a string literal, the backslash (``\\``) character introduces an :dfn:"
"`escape sequence`, which has special meaning depending on the character "
"after the backslash. For example, ``\\\"`` denotes the double quote "
"character, and does *not* end the string:"
msgstr ""

msgid ""
">>> print(\"Say \\\"Hello\\\" to everyone!\")\n"
"Say \"Hello\" to everyone!"
msgstr ""

msgid ""
"See :ref:`escape sequences <escape-sequences>` below for a full list of such "
"sequences, and more details."
msgstr ""

msgid "Triple-quoted strings"
msgstr ""

msgid ""
"Strings can also be enclosed in matching groups of three single or double "
"quotes. These are generally referred to as :dfn:`triple-quoted strings`::"
msgstr ""

msgid "\"\"\"This is a triple-quoted string.\"\"\""
msgstr ""

msgid ""
"In triple-quoted literals, unescaped quotes are allowed (and are retained), "
"except that three unescaped quotes in a row terminate the literal, if they "
"are of the same kind (``'`` or ``\"``) used at the start::"
msgstr ""

msgid "\"\"\"This string has \"quotes\" inside.\"\"\""
msgstr ""

msgid "Unescaped newlines are also allowed and retained::"
msgstr ""

msgid ""
"'''This triple-quoted string\n"
"continues on the next line.'''"
msgstr ""

msgid "String prefixes"
msgstr ""

msgid ""
"String literals can have an optional :dfn:`prefix` that influences how the "
"content of the literal is parsed, for example:"
msgstr ""

msgid ""
"b\"data\"\n"
"f'{result=}'"
msgstr ""

msgid "The allowed prefixes are:"
msgstr ""

msgid "``b``: :ref:`Bytes literal <bytes-literal>`"
msgstr ""

msgid "``r``: :ref:`Raw string <raw-strings>`"
msgstr ""

msgid "``f``: :ref:`Formatted string literal <f-strings>` (\"f-string\")"
msgstr ""

msgid "``t``: :ref:`Template string literal <t-strings>` (\"t-string\")"
msgstr ""

msgid "``u``: No effect (allowed for backwards compatibility)"
msgstr ""

msgid "See the linked sections for details on each type."
msgstr ""

msgid ""
"Prefixes are case-insensitive (for example, '``B``' works the same as "
"'``b``'). The '``r``' prefix can be combined with '``f``', '``t``' or "
"'``b``', so '``fr``', '``rf``', '``tr``', '``rt``', '``br``', and '``rb``' "
"are also valid prefixes."
msgstr ""

msgid ""
"The ``'rb'`` prefix of raw bytes literals has been added as a synonym of "
"``'br'``."
msgstr ""

msgid ""
"Support for the unicode legacy literal (``u'value'``) was reintroduced to "
"simplify the maintenance of dual Python 2.x and 3.x codebases. See :pep:"
"`414` for more information."
msgstr ""

msgid "Formal grammar"
msgstr ""

msgid ""
"String literals, except :ref:`\"f-strings\" <f-strings>` and :ref:`\"t-"
"strings\" <t-strings>`, are described by the following lexical definitions."
msgstr ""

msgid ""
"These definitions use :ref:`negative lookaheads <lexical-lookaheads>` (``!"
"``) to indicate that an ending quote ends the literal."
msgstr ""

msgid ""
"Note that as in all lexical definitions, whitespace is significant. In "
"particular, the prefix (if any) must be immediately followed by the starting "
"quote."
msgstr ""

msgid "Escape sequences"
msgstr ""

msgid ""
"Unless an '``r``' or '``R``' prefix is present, escape sequences in string "
"and bytes literals are interpreted according to rules similar to those used "
"by Standard C.  The recognized escape sequences are:"
msgstr ""

msgid "Escape Sequence"
msgstr ""

msgid "Meaning"
msgstr ""

msgid "``\\``\\ <newline>"
msgstr ""

msgid ":ref:`string-escape-ignore`"
msgstr ":ref:`string-escape-ignore`"

msgid "``\\\\``"
msgstr ""

msgid ":ref:`Backslash <string-escape-escaped-char>`"
msgstr ""

msgid "``\\'``"
msgstr ""

msgid ":ref:`Single quote <string-escape-escaped-char>`"
msgstr ""

msgid "``\\\"``"
msgstr ""

msgid ":ref:`Double quote <string-escape-escaped-char>`"
msgstr ""

msgid "``\\a``"
msgstr ""

msgid "ASCII Bell (BEL)"
msgstr ""

msgid "``\\b``"
msgstr ""

msgid "ASCII Backspace (BS)"
msgstr ""

msgid "``\\f``"
msgstr ""

msgid "ASCII Formfeed (FF)"
msgstr ""

msgid "``\\n``"
msgstr ""

msgid "ASCII Linefeed (LF)"
msgstr ""

msgid "``\\r``"
msgstr ""

msgid "ASCII Carriage Return (CR)"
msgstr ""

msgid "``\\t``"
msgstr ""

msgid "ASCII Horizontal Tab (TAB)"
msgstr ""

msgid "``\\v``"
msgstr ""

msgid "ASCII Vertical Tab (VT)"
msgstr ""

msgid ":samp:`\\\\\\\\{ooo}`"
msgstr ""

msgid ":ref:`string-escape-oct`"
msgstr ":ref:`string-escape-oct`"

msgid ":samp:`\\\\x{hh}`"
msgstr ""

msgid ":ref:`string-escape-hex`"
msgstr ":ref:`string-escape-hex`"

msgid ":samp:`\\\\N\\\\{{name}\\\\}`"
msgstr ""

msgid ":ref:`string-escape-named`"
msgstr ":ref:`string-escape-named`"

msgid ":samp:`\\\\u{xxxx}`"
msgstr ""

msgid ":ref:`Hexadecimal Unicode character <string-escape-long-hex>`"
msgstr ""

msgid ":samp:`\\\\U{xxxxxxxx}`"
msgstr ""

msgid "Ignored end of line"
msgstr ""

msgid "A backslash can be added at the end of a line to ignore the newline::"
msgstr ""

msgid ""
">>> 'This string will not include \\\n"
"... backslashes or newline characters.'\n"
"'This string will not include backslashes or newline characters.'"
msgstr ""

msgid ""
"The same result can be achieved using :ref:`triple-quoted strings "
"<strings>`, or parentheses and :ref:`string literal concatenation <string-"
"concatenation>`."
msgstr ""

msgid "Escaped characters"
msgstr ""

msgid ""
"To include a backslash in a non-:ref:`raw <raw-strings>` Python string "
"literal, it must be doubled. The ``\\\\`` escape sequence denotes a single "
"backslash character::"
msgstr ""

msgid ""
">>> print('C:\\\\Program Files')\n"
"C:\\Program Files"
msgstr ""

msgid ""
"Similarly, the ``\\'`` and ``\\\"`` sequences denote the single and double "
"quote character, respectively::"
msgstr ""

msgid ""
">>> print('\\' and \\\"')\n"
"' and \""
msgstr ""

msgid "Octal character"
msgstr ""

msgid ""
"The sequence :samp:`\\\\\\\\{ooo}` denotes a *character* with the octal "
"(base 8) value *ooo*::"
msgstr ""

msgid ""
">>> '\\120'\n"
"'P'"
msgstr ""

msgid "Up to three octal digits (0 through 7) are accepted."
msgstr ""

msgid ""
"In a bytes literal, *character* means a *byte* with the given value. In a "
"string literal, it means a Unicode character with the given value."
msgstr ""

msgid ""
"Octal escapes with value larger than ``0o377`` (255) produce a :exc:"
"`DeprecationWarning`."
msgstr ""

msgid ""
"Octal escapes with value larger than ``0o377`` (255) produce a :exc:"
"`SyntaxWarning`. In a future Python version they will raise a :exc:"
"`SyntaxError`."
msgstr ""

msgid "Hexadecimal character"
msgstr ""

msgid ""
"The sequence :samp:`\\\\x{hh}` denotes a *character* with the hex (base 16) "
"value *hh*::"
msgstr ""

msgid ""
">>> '\\x50'\n"
"'P'"
msgstr ""

msgid "Unlike in Standard C, exactly two hex digits are required."
msgstr ""

msgid "Named Unicode character"
msgstr ""

msgid ""
"The sequence :samp:`\\\\N\\\\{{name}\\\\}` denotes a Unicode character with "
"the given *name*::"
msgstr ""

msgid ""
">>> '\\N{LATIN CAPITAL LETTER P}'\n"
"'P'\n"
">>> '\\N{SNAKE}'\n"
"'🐍'"
msgstr ""

msgid "This sequence cannot appear in :ref:`bytes literals <bytes-literal>`."
msgstr ""

msgid ""
"Support for `name aliases <https://www.unicode.org/Public/16.0.0/ucd/"
"NameAliases.txt>`__ has been added."
msgstr ""

msgid "Hexadecimal Unicode characters"
msgstr ""

msgid ""
"These sequences :samp:`\\\\u{xxxx}` and :samp:`\\\\U{xxxxxxxx}` denote the "
"Unicode character with the given hex (base 16) value. Exactly four digits "
"are required for ``\\u``; exactly eight digits are required for ``\\U``. The "
"latter can encode any Unicode character."
msgstr ""

msgid ""
">>> '\\u1234'\n"
"'ሴ'\n"
">>> '\\U0001f40d'\n"
"'🐍'"
msgstr ""

msgid "These sequences cannot appear in :ref:`bytes literals <bytes-literal>`."
msgstr ""

msgid "Unrecognized escape sequences"
msgstr ""

msgid ""
"Unlike in Standard C, all unrecognized escape sequences are left in the "
"string unchanged, that is, *the backslash is left in the result*::"
msgstr ""

msgid ""
">>> print('\\q')\n"
"\\q\n"
">>> list('\\q')\n"
"['\\\\', 'q']"
msgstr ""

msgid ""
"Note that for bytes literals, the escape sequences only recognized in string "
"literals (``\\N...``, ``\\u...``, ``\\U...``) fall into the category of "
"unrecognized escapes."
msgstr ""

msgid "Unrecognized escape sequences produce a :exc:`DeprecationWarning`."
msgstr ""

msgid ""
"Unrecognized escape sequences produce a :exc:`SyntaxWarning`. In a future "
"Python version they will raise a :exc:`SyntaxError`."
msgstr ""

msgid "Bytes literals"
msgstr ""

msgid ""
":dfn:`Bytes literals` are always prefixed with '``b``' or '``B``'; they "
"produce an instance of the :class:`bytes` type instead of the :class:`str` "
"type. They may only contain ASCII characters; bytes with a numeric value of "
"128 or greater must be expressed with escape sequences (typically :ref:"
"`string-escape-hex` or :ref:`string-escape-oct`):"
msgstr ""

msgid ""
">>> b'\\x89PNG\\r\\n\\x1a\\n'\n"
"b'\\x89PNG\\r\\n\\x1a\\n'\n"
">>> list(b'\\x89PNG\\r\\n\\x1a\\n')\n"
"[137, 80, 78, 71, 13, 10, 26, 10]"
msgstr ""

msgid ""
"Similarly, a zero byte must be expressed using an escape sequence (typically "
"``\\0`` or ``\\x00``)."
msgstr ""

msgid "Raw string literals"
msgstr ""

msgid ""
"Both string and bytes literals may optionally be prefixed with a letter "
"'``r``' or '``R``'; such constructs are called :dfn:`raw string literals` "
"and :dfn:`raw bytes literals` respectively and treat backslashes as literal "
"characters. As a result, in raw string literals, :ref:`escape sequences "
"<escape-sequences>` are not treated specially:"
msgstr ""

msgid ""
">>> r'\\d{4}-\\d{2}-\\d{2}'\n"
"'\\\\d{4}-\\\\d{2}-\\\\d{2}'"
msgstr ""

msgid ""
"Even in a raw literal, quotes can be escaped with a backslash, but the "
"backslash remains in the result; for example, ``r\"\\\"\"`` is a valid "
"string literal consisting of two characters: a backslash and a double quote; "
"``r\"\\\"`` is not a valid string literal (even a raw string cannot end in "
"an odd number of backslashes).  Specifically, *a raw literal cannot end in a "
"single backslash* (since the backslash would escape the following quote "
"character).  Note also that a single backslash followed by a newline is "
"interpreted as those two characters as part of the literal, *not* as a line "
"continuation."
msgstr ""

msgid "f-strings"
msgstr ""

msgid ""
"A :dfn:`formatted string literal` or :dfn:`f-string` is a string literal "
"that is prefixed with '``f``' or '``F``'.  These strings may contain "
"replacement fields, which are expressions delimited by curly braces ``{}``. "
"While other string literals always have a constant value, formatted strings "
"are really expressions evaluated at run time."
msgstr ""

msgid ""
"Escape sequences are decoded like in ordinary string literals (except when a "
"literal is also marked as a raw string).  After decoding, the grammar for "
"the contents of the string is:"
msgstr ""

msgid ""
"The parts of the string outside curly braces are treated literally, except "
"that any doubled curly braces ``'{{'`` or ``'}}'`` are replaced with the "
"corresponding single curly brace.  A single opening curly bracket ``'{'`` "
"marks a replacement field, which starts with a Python expression. To display "
"both the expression text and its value after evaluation, (useful in "
"debugging), an equal sign ``'='`` may be added after the expression. A "
"conversion field, introduced by an exclamation point ``'!'`` may follow.  A "
"format specifier may also be appended, introduced by a colon ``':'``. A "
"replacement field ends with a closing curly bracket ``'}'``."
msgstr ""

msgid ""
"Expressions in formatted string literals are treated like regular Python "
"expressions surrounded by parentheses, with a few exceptions. An empty "
"expression is not allowed, and both :keyword:`lambda`  and assignment "
"expressions ``:=`` must be surrounded by explicit parentheses. Each "
"expression is evaluated in the context where the formatted string literal "
"appears, in order from left to right.  Replacement expressions can contain "
"newlines in both single-quoted and triple-quoted f-strings and they can "
"contain comments.  Everything that comes after a ``#`` inside a replacement "
"field is a comment (even closing braces and quotes). In that case, "
"replacement fields must be closed in a different line."
msgstr ""

msgid ""
">>> f\"abc{a # This is a comment }\"\n"
"... + 3}\"\n"
"'abc5'"
msgstr ""

msgid ""
"Prior to Python 3.7, an :keyword:`await` expression and comprehensions "
"containing an :keyword:`async for` clause were illegal in the expressions in "
"formatted string literals due to a problem with the implementation."
msgstr ""

msgid ""
"Prior to Python 3.12, comments were not allowed inside f-string replacement "
"fields."
msgstr ""

msgid ""
"When the equal sign ``'='`` is provided, the output will have the expression "
"text, the ``'='`` and the evaluated value. Spaces after the opening brace "
"``'{'``, within the expression and after the ``'='`` are all retained in the "
"output. By default, the ``'='`` causes the :func:`repr` of the expression to "
"be provided, unless there is a format specified. When a format is specified "
"it defaults to the :func:`str` of the expression unless a conversion ``'!"
"r'`` is declared."
msgstr ""

msgid "The equal sign ``'='``."
msgstr ""

msgid ""
"If a conversion is specified, the result of evaluating the expression is "
"converted before formatting.  Conversion ``'!s'`` calls :func:`str` on the "
"result, ``'!r'`` calls :func:`repr`, and ``'!a'`` calls :func:`ascii`."
msgstr ""

msgid ""
"The result is then formatted using the :func:`format` protocol.  The format "
"specifier is passed to the :meth:`~object.__format__` method of the "
"expression or conversion result.  An empty string is passed when the format "
"specifier is omitted.  The formatted result is then included in the final "
"value of the whole string."
msgstr ""

msgid ""
"Top-level format specifiers may include nested replacement fields. These "
"nested fields may include their own conversion fields and :ref:`format "
"specifiers <formatspec>`, but may not include more deeply nested replacement "
"fields. The :ref:`format specifier mini-language <formatspec>` is the same "
"as that used by the :meth:`str.format` method."
msgstr ""

msgid ""
"Formatted string literals may be concatenated, but replacement fields cannot "
"be split across literals."
msgstr ""

msgid "Some examples of formatted string literals::"
msgstr ""

msgid ""
">>> name = \"Fred\"\n"
">>> f\"He said his name is {name!r}.\"\n"
"\"He said his name is 'Fred'.\"\n"
">>> f\"He said his name is {repr(name)}.\"  # repr() is equivalent to !r\n"
"\"He said his name is 'Fred'.\"\n"
">>> width = 10\n"
">>> precision = 4\n"
">>> value = decimal.Decimal(\"12.34567\")\n"
">>> f\"result: {value:{width}.{precision}}\"  # nested fields\n"
"'result:      12.35'\n"
">>> today = datetime(year=2017, month=1, day=27)\n"
">>> f\"{today:%B %d, %Y}\"  # using date format specifier\n"
"'January 27, 2017'\n"
">>> f\"{today=:%B %d, %Y}\" # using date format specifier and debugging\n"
"'today=January 27, 2017'\n"
">>> number = 1024\n"
">>> f\"{number:#0x}\"  # using integer format specifier\n"
"'0x400'\n"
">>> foo = \"bar\"\n"
">>> f\"{ foo = }\" # preserves whitespace\n"
"\" foo = 'bar'\"\n"
">>> line = \"The mill's closed\"\n"
">>> f\"{line = }\"\n"
"'line = \"The mill\\'s closed\"'\n"
">>> f\"{line = :20}\"\n"
"\"line = The mill's closed   \"\n"
">>> f\"{line = !r:20}\"\n"
"'line = \"The mill\\'s closed\" '"
msgstr ""

msgid ""
"Reusing the outer f-string quoting type inside a replacement field is "
"permitted::"
msgstr ""

msgid ""
">>> a = dict(x=2)\n"
">>> f\"abc {a[\"x\"]} def\"\n"
"'abc 2 def'"
msgstr ""

msgid ""
"Prior to Python 3.12, reuse of the same quoting type of the outer f-string "
"inside a replacement field was not possible."
msgstr ""

msgid ""
"Backslashes are also allowed in replacement fields and are evaluated the "
"same way as in any other context::"
msgstr ""

msgid ""
">>> a = [\"a\", \"b\", \"c\"]\n"
">>> print(f\"List a contains:\\n{\"\\n\".join(a)}\")\n"
"List a contains:\n"
"a\n"
"b\n"
"c"
msgstr ""

msgid ""
"Prior to Python 3.12, backslashes were not permitted inside an f-string "
"replacement field."
msgstr ""

msgid ""
"Formatted string literals cannot be used as docstrings, even if they do not "
"include expressions."
msgstr ""

msgid ""
">>> def foo():\n"
"...     f\"Not a docstring\"\n"
"...\n"
">>> foo.__doc__ is None\n"
"True"
msgstr ""

msgid ""
"See also :pep:`498` for the proposal that added formatted string literals, "
"and :meth:`str.format`, which uses a related format string mechanism."
msgstr ""

msgid "t-strings"
msgstr ""

msgid ""
"A :dfn:`template string literal` or :dfn:`t-string` is a string literal that "
"is prefixed with '``t``' or '``T``'. These strings follow the same syntax "
"and evaluation rules as :ref:`formatted string literals <f-strings>`, with "
"the following differences:"
msgstr ""

msgid ""
"Rather than evaluating to a ``str`` object, template string literals "
"evaluate to a :class:`string.templatelib.Template` object."
msgstr ""

msgid ""
"The :func:`format` protocol is not used. Instead, the format specifier and "
"conversions (if any) are passed to a new :class:`~string.templatelib."
"Interpolation` object that is created for each evaluated expression. It is "
"up to code that processes the resulting :class:`~string.templatelib."
"Template` object to decide how to handle format specifiers and conversions."
msgstr ""

msgid ""
"Format specifiers containing nested replacement fields are evaluated "
"eagerly, prior to being passed to the :class:`~string.templatelib."
"Interpolation` object. For instance, an interpolation of the form ``{amount:."
"{precision}f}`` will evaluate the inner expression ``{precision}`` to "
"determine the value of the ``format_spec`` attribute. If ``precision`` were "
"to be ``2``, the resulting format specifier would be ``'.2f'``."
msgstr ""

msgid ""
"When the equals sign ``'='`` is provided in an interpolation expression, the "
"text of the expression is appended to the literal string that precedes the "
"relevant interpolation. This includes the equals sign and any surrounding "
"whitespace. The :class:`!Interpolation` instance for the expression will be "
"created as normal, except that :attr:`~string.templatelib.Interpolation."
"conversion` will be set to '``r``' (:func:`repr`) by default. If an explicit "
"conversion or format specifier are provided, this will override the default "
"behaviour."
msgstr ""

msgid "Numeric literals"
msgstr ""

msgid ""
":data:`~token.NUMBER` tokens represent numeric literals, of which there are "
"three types: integers, floating-point numbers, and imaginary numbers."
msgstr ""

msgid ""
"The numeric value of a numeric literal is the same as if it were passed as a "
"string to the :class:`int`, :class:`float` or :class:`complex` class "
"constructor, respectively. Note that not all valid inputs for those "
"constructors are also valid literals."
msgstr ""

msgid ""
"Numeric literals do not include a sign; a phrase like ``-1`` is actually an "
"expression composed of the unary operator '``-``' and the literal ``1``."
msgstr ""

msgid "Integer literals"
msgstr ""

msgid "Integer literals denote whole numbers. For example::"
msgstr ""

msgid ""
"7\n"
"3\n"
"2147483647"
msgstr ""

msgid ""
"There is no limit for the length of integer literals apart from what can be "
"stored in available memory::"
msgstr ""

msgid "7922816251426433759354395033679228162514264337593543950336"
msgstr ""

msgid ""
"Underscores can be used to group digits for enhanced readability, and are "
"ignored for determining the numeric value of the literal. For example, the "
"following literals are equivalent::"
msgstr ""

msgid ""
"100_000_000_000\n"
"100000000000\n"
"1_00_00_00_00_000"
msgstr ""

msgid ""
"Underscores can only occur between digits. For example, ``_123``, ``321_``, "
"and ``123__321`` are *not* valid literals."
msgstr ""

msgid ""
"Integers can be specified in binary (base 2), octal (base 8), or hexadecimal "
"(base 16) using the prefixes ``0b``, ``0o`` and ``0x``, respectively. "
"Hexadecimal digits 10 through 15 are represented by letters ``A``-``F``, "
"case-insensitive.  For example::"
msgstr ""

msgid ""
"0b100110111\n"
"0b_1110_0101\n"
"0o177\n"
"0o377\n"
"0xdeadbeef\n"
"0xDead_Beef"
msgstr ""

msgid ""
"An underscore can follow the base specifier. For example, ``0x_1f`` is a "
"valid literal, but ``0_x1f`` and ``0x__1f`` are not."
msgstr ""

msgid ""
"Leading zeros in a non-zero decimal number are not allowed. For example, "
"``0123`` is not a valid literal. This is for disambiguation with C-style "
"octal literals, which Python used before version 3.0."
msgstr ""

msgid ""
"Formally, integer literals are described by the following lexical "
"definitions:"
msgstr ""

msgid "Underscores are now allowed for grouping purposes in literals."
msgstr ""

msgid "Floating-point literals"
msgstr ""

msgid ""
"Floating-point (float) literals, such as ``3.14`` or ``1.5``, denote :ref:"
"`approximations of real numbers <datamodel-float>`."
msgstr ""

msgid ""
"They consist of *integer* and *fraction* parts, each composed of decimal "
"digits. The parts are separated by a decimal point, ``.``::"
msgstr ""

msgid ""
"2.71828\n"
"4.0"
msgstr ""

msgid ""
"Unlike in integer literals, leading zeros are allowed in the numeric parts. "
"For example, ``077.010`` is legal, and denotes the same number as ``77.10``."
msgstr ""

msgid ""
"As in integer literals, single underscores may occur between digits to help "
"readability::"
msgstr ""

msgid ""
"96_485.332_123\n"
"3.14_15_93"
msgstr ""

msgid "Either of these parts, but not both, can be empty. For example::"
msgstr ""

msgid ""
"10.  # (equivalent to 10.0)\n"
".001  # (equivalent to 0.001)"
msgstr ""

msgid ""
"Optionally, the integer and fraction may be followed by an *exponent*: the "
"letter ``e`` or ``E``, followed by an optional sign, ``+`` or ``-``, and a "
"number in the same format as the integer and fraction parts. The ``e`` or "
"``E`` represents \"times ten raised to the power of\"::"
msgstr ""

msgid ""
"1.0e3  # (represents 1.0×10³, or 1000.0)\n"
"1.166e-5  # (represents 1.166×10⁻⁵, or 0.00001166)\n"
"6.02214076e+23  # (represents 6.02214076×10²³, or 602214076000000000000000.)"
msgstr ""

msgid ""
"In floats with only integer and exponent parts, the decimal point may be "
"omitted::"
msgstr ""

msgid ""
"1e3  # (equivalent to 1.e3 and 1.0e3)\n"
"0e0  # (equivalent to 0.)"
msgstr ""

msgid ""
"Formally, floating-point literals are described by the following lexical "
"definitions:"
msgstr ""

msgid "Imaginary literals"
msgstr ""

msgid ""
"Python has :ref:`complex number <typesnumeric>` objects, but no complex "
"literals. Instead, *imaginary literals* denote complex numbers with a zero "
"real part."
msgstr ""

msgid ""
"For example, in math, the complex number 3+4.2\\ *i* is written as the real "
"number 3 added to the imaginary number 4.2\\ *i*. Python uses a similar "
"syntax, except the imaginary unit is written as ``j`` rather than *i*::"
msgstr ""

msgid "3+4.2j"
msgstr ""

msgid ""
"This is an expression composed of the :ref:`integer literal <integers>` "
"``3``, the :ref:`operator <operators>` '``+``', and the :ref:`imaginary "
"literal <imaginary>` ``4.2j``. Since these are three separate tokens, "
"whitespace is allowed between them::"
msgstr ""

msgid "3 + 4.2j"
msgstr ""

msgid ""
"No whitespace is allowed *within* each token. In particular, the ``j`` "
"suffix, may not be separated from the number before it."
msgstr ""

msgid ""
"The number before the ``j`` has the same syntax as a floating-point literal. "
"Thus, the following are valid imaginary literals::"
msgstr ""

msgid ""
"4.2j\n"
"3.14j\n"
"10.j\n"
".001j\n"
"1e100j\n"
"3.14e-10j\n"
"3.14_15_93j"
msgstr ""

msgid ""
"Unlike in a floating-point literal the decimal point can be omitted if the "
"imaginary number only has an integer part. The number is still evaluated as "
"a floating-point number, not an integer::"
msgstr ""

msgid ""
"10j\n"
"0j\n"
"1000000000000000000000000j   # equivalent to 1e+24j"
msgstr ""

msgid ""
"The ``j`` suffix is case-insensitive. That means you can use ``J`` instead::"
msgstr ""

msgid "3.14J   # equivalent to 3.14j"
msgstr ""

msgid ""
"Formally, imaginary literals are described by the following lexical "
"definition:"
msgstr ""

msgid "Operators"
msgstr ""

msgid "The following tokens are operators:"
msgstr ""

msgid ""
"+       -       *       **      /       //      %      @\n"
"<<      >>      &       |       ^       ~       :=\n"
"<       >       <=      >=      ==      !="
msgstr ""

msgid "Delimiters"
msgstr ""

msgid "The following tokens serve as delimiters in the grammar:"
msgstr ""

msgid ""
"(       )       [       ]       {       }\n"
",       :       !       .       ;       @       ="
msgstr ""

msgid "The period can also occur in floating-point and imaginary literals."
msgstr ""

msgid ""
"A sequence of three periods has a special meaning as an :py:data:`Ellipsis` "
"literal:"
msgstr ""

msgid "..."
msgstr ""

msgid ""
"The following *augmented assignment operators* serve lexically as "
"delimiters, but also perform an operation:"
msgstr ""

msgid ""
"->      +=      -=      *=      /=      //=     %=\n"
"@=      &=      |=      ^=      >>=     <<=     **="
msgstr ""

msgid ""
"The following printing ASCII characters have special meaning as part of "
"other tokens or are otherwise significant to the lexical analyzer:"
msgstr ""

msgid "'       \"       #       \\"
msgstr ""

msgid ""
"The following printing ASCII characters are not used in Python.  Their "
"occurrence outside string literals and comments is an unconditional error:"
msgstr ""

msgid "$       ?       `"
msgstr ""

msgid "lexical analysis"
msgstr ""

msgid "parser"
msgstr ""

msgid "token"
msgstr ""

msgid "line structure"
msgstr ""

msgid "logical line"
msgstr ""

msgid "physical line"
msgstr ""

msgid "line joining"
msgstr ""

msgid "NEWLINE token"
msgstr ""

msgid "comment"
msgstr ""

msgid "hash character"
msgstr ""

msgid "# (hash)"
msgstr ""

msgid "source character set"
msgstr ""

msgid "encoding declarations (source file)"
msgstr ""

msgid "source encoding declaration"
msgstr ""

msgid "line continuation"
msgstr ""

msgid "backslash character"
msgstr ""

msgid "blank line"
msgstr ""

msgid "indentation"
msgstr ""

msgid "leading whitespace"
msgstr ""

msgid "space"
msgstr ""

msgid "tab"
msgstr ""

msgid "grouping"
msgstr ""

msgid "statement grouping"
msgstr ""

msgid "INDENT token"
msgstr ""

msgid "DEDENT token"
msgstr ""

msgid "identifier"
msgstr ""

msgid "name"
msgstr ""

msgid "keyword"
msgstr ""

msgid "reserved word"
msgstr ""

msgid "soft keyword"
msgstr ""

msgid "_, identifiers"
msgstr ""

msgid "__, identifiers"
msgstr ""

msgid "literal"
msgstr ""

msgid "constant"
msgstr ""

msgid "string literal"
msgstr ""

msgid "bytes literal"
msgstr ""

msgid "ASCII"
msgstr ""

msgid "' (single quote)"
msgstr ""

msgid "\" (double quote)"
msgstr ""

msgid "triple-quoted string"
msgstr ""

msgid "\"\"\""
msgstr ""

msgid "'''"
msgstr ""

msgid "u'"
msgstr ""

msgid "u\""
msgstr ""

msgid "escape sequence"
msgstr ""

msgid "Standard C"
msgstr ""

msgid "C"
msgstr ""

msgid "\\ (backslash)"
msgstr ""

msgid "\\\\"
msgstr ""

msgid "\\a"
msgstr ""

msgid "\\b"
msgstr ""

msgid "\\f"
msgstr ""

msgid "\\n"
msgstr ""

msgid "\\r"
msgstr ""

msgid "\\t"
msgstr ""

msgid "\\v"
msgstr ""

msgid "\\x"
msgstr ""

msgid "\\u"
msgstr ""

msgid "\\U"
msgstr ""

msgid "unrecognized escape sequence"
msgstr ""

msgid "b'"
msgstr ""

msgid "b\""
msgstr ""

msgid "r'"
msgstr ""

msgid "raw string literal"
msgstr ""

msgid "r\""
msgstr ""

msgid "formatted string literal"
msgstr ""

msgid "interpolated string literal"
msgstr ""

msgid "string"
msgstr ""

msgid "formatted literal"
msgstr ""

msgid "interpolated literal"
msgstr ""

msgid "f-string"
msgstr ""

msgid "fstring"
msgstr ""

msgid "f'"
msgstr ""

msgid "f\""
msgstr ""

msgid "{} (curly brackets)"
msgstr ""

msgid "in formatted string literal"
msgstr ""

msgid "! (exclamation)"
msgstr ""

msgid ": (colon)"
msgstr ""

msgid "= (equals)"
msgstr ""

msgid "for help in debugging using string literals"
msgstr ""

msgid "number"
msgstr ""

msgid "numeric literal"
msgstr ""

msgid "integer literal"
msgstr ""

msgid "floating-point literal"
msgstr ""

msgid "hexadecimal literal"
msgstr ""

msgid "octal literal"
msgstr ""

msgid "binary literal"
msgstr ""

msgid "decimal literal"
msgstr ""

msgid "imaginary literal"
msgstr ""

msgid "complex literal"
msgstr ""

msgid "0b"
msgstr ""

msgid "0o"
msgstr ""

msgid "0x"
msgstr ""

msgid "_ (underscore)"
msgstr ""

msgid "in numeric literal"
msgstr ""

msgid ". (dot)"
msgstr ""

msgid "e"
msgstr ""

msgid "j"
msgstr ""

msgid "operators"
msgstr ""

msgid "delimiters"
msgstr ""
