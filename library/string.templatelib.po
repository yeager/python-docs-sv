# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!string.templatelib` --- Support for template string literals"
msgstr ""

msgid "**Source code:** :source:`Lib/string/templatelib.py`"
msgstr ""

msgid ":ref:`Format strings <f-strings>`"
msgstr ""

msgid ":ref:`T-string literal syntax <t-strings>`"
msgstr ""

msgid "Template strings"
msgstr ""

msgid ""
"Template strings are a formatting mechanism that allows for deep control "
"over how strings are processed. You can create templates using :ref:`t-"
"string literal syntax <t-strings>`, which is identical to :ref:`f-string "
"syntax <f-strings>` but uses a ``t`` instead of an ``f``. While f-strings "
"evaluate to ``str``, t-strings create a :class:`Template` instance that "
"gives you access to the static and interpolated (in curly braces) parts of a "
"string *before* they are combined."
msgstr ""

msgid "Template"
msgstr ""

msgid ""
"The :class:`!Template` class describes the contents of a template string."
msgstr ""

msgid ""
":class:`!Template` instances are immutable: their attributes cannot be "
"reassigned."
msgstr ""

msgid "Create a new :class:`!Template` object."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "A mix of strings and :class:`Interpolation` instances in any order."
msgstr ""

msgid ""
"The most common way to create a :class:`!Template` instance is to use the :"
"ref:`t-string literal syntax <t-strings>`. This syntax is identical to that "
"of :ref:`f-strings <f-strings>` except that it uses a ``t`` instead of an "
"``f``:"
msgstr ""

msgid ""
"Templates ars stored as sequences of literal :attr:`~Template.strings` and "
"dynamic :attr:`~Template.interpolations`. A :attr:`~Template.values` "
"attribute holds the interpolation values:"
msgstr ""

msgid ""
"The :attr:`!strings` tuple has one more element than :attr:`!interpolations` "
"and :attr:`!values`; the interpolations “belong” between the strings. This "
"may be easier to understand when tuples are aligned::"
msgstr ""

msgid ""
"template.strings:  ('Hello ',          '!')\n"
"template.values:   (          'World',    )"
msgstr ""

msgid ""
"While literal syntax is the most common way to create :class:`!Template` "
"instances, it is also possible to create them directly using the constructor:"
msgstr ""

msgid ""
"If two or more consecutive strings are passed, they will be concatenated "
"into a single value in the :attr:`~Template.strings` attribute. For example, "
"the following code creates a :class:`Template` with a single final string:"
msgstr ""

msgid ""
"If two or more consecutive interpolations are passed, they will be treated "
"as separate interpolations and an empty string will be inserted between "
"them. For example, the following code creates a template with empty "
"placeholders in the :attr:`~Template.strings` attribute:"
msgstr ""

msgid "A :ref:`tuple <tut-tuples>` of the static strings in the template."
msgstr ""

msgid "Empty strings *are* included in the tuple:"
msgstr ""

msgid ""
"The ``strings`` tuple is never empty, and always contains one more string "
"than the ``interpolations`` and ``values`` tuples:"
msgstr ""

msgid "A tuple of the interpolations in the template."
msgstr ""

msgid ""
"The ``interpolations`` tuple may be empty and always contains one fewer "
"values than the ``strings`` tuple:"
msgstr ""

msgid "A tuple of all interpolated values in the template."
msgstr ""

msgid ""
"The ``values`` tuple always has the same length as the ``interpolations`` "
"tuple. It is equivalent to ``tuple(i.value for i in template."
"interpolations)``."
msgstr ""

msgid ""
"Iterate over the template, yielding each string and :class:`Interpolation` "
"in order."
msgstr ""

msgid "Empty strings are *not* included in the iteration:"
msgstr ""

msgid ""
"Concatenate this template with another, returning a new :class:`!Template` "
"instance:"
msgstr ""

msgid ""
"Concatenation between a :class:`!Template` and a ``str`` is *not* supported. "
"This is because it is ambiguous whether the string should be treated as a "
"static string or an interpolation. If you want to concatenate a :class:`!"
"Template` with a string, you should either wrap the string directly in a :"
"class:`!Template` (to treat it as a static string) or use an :class:`!"
"Interpolation` (to treat it as dynamic):"
msgstr ""

msgid "Create a new :class:`!Interpolation` object."
msgstr ""

msgid "The evaluated, in-scope result of the interpolation."
msgstr ""

msgid "The text of a valid Python expression, or an empty string."
msgstr ""

msgid ""
"The optional :ref:`conversion <formatstrings>` to be used, one of r, s, and "
"a."
msgstr ""

msgid ""
"An optional, arbitrary string used as the :ref:`format specification "
"<formatspec>` to present the value."
msgstr ""

msgid ""
"The :class:`!Interpolation` type represents an expression inside a template "
"string."
msgstr ""

msgid ""
":class:`!Interpolation` instances are immutable: their attributes cannot be "
"reassigned."
msgstr ""

msgid "Returns"
msgstr ""

msgid "The evaluated value of the interpolation."
msgstr ""

msgid "type"
msgstr ""

msgid "str"
msgstr ""

msgid ""
"The :attr:`~Interpolation.expression` is the original text of the "
"interpolation's Python expression, if the interpolation was created from a t-"
"string literal. Developers creating interpolations manually should either "
"set this to an empty string or choose a suitable valid Python expression."
msgstr ""

msgid "The conversion to apply to the value, or ``None``."
msgstr ""

msgid "``Literal[\"a\", \"r\", \"s\"] | None``"
msgstr ""

msgid ""
"The :attr:`!Interpolation.conversion` is the optional conversion to apply to "
"the value:"
msgstr ""

msgid ""
"Unlike f-strings, where conversions are applied automatically, the expected "
"behavior with t-strings is that code that *processes* the :class:`!Template` "
"will decide how to interpret and whether to apply the :attr:`!Interpolation."
"conversion`."
msgstr ""

msgid "The format specification to apply to the value."
msgstr ""

msgid ""
"The :attr:`!Interpolation.format_spec` is an optional, arbitrary string used "
"as the format specification to present the value:"
msgstr ""

msgid ""
"Unlike f-strings, where format specifications are applied automatically via "
"the :func:`format` protocol, the expected behavior with t-strings is that "
"code that *processes* the :class:`!Template` will decide how to interpret "
"and whether to apply the format specification. As a result, :attr:`!"
"Interpolation.format_spec` values in :class:`!Template` instances can be "
"arbitrary strings, even those that do not necessarily conform to the rules "
"of Python's :func:`format` protocol."
msgstr ""

msgid ""
"Interpolations support pattern matching, allowing you to match against their "
"attributes with the :ref:`match statement <match>`:"
msgstr ""

msgid "Helper functions"
msgstr ""

msgid ""
"Applies formatted string literal :ref:`conversion <formatstrings-"
"conversion>` semantics to the given object *obj*. This is frequently useful "
"for custom template string processing logic."
msgstr ""

msgid "Three conversion flags are currently supported:"
msgstr ""

msgid "``'s'`` which calls :func:`str` on the value,"
msgstr ""

msgid "``'r'`` which calls :func:`repr`, and"
msgstr ""

msgid "``'a'`` which calls :func:`ascii`."
msgstr ""

msgid "If the conversion flag is ``None``, *obj* is returned unchanged."
msgstr ""
