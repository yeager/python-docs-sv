# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 14:20+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Floating-Point Objects"
msgstr "Flyttalsobjekt"

msgid ""
"This subtype of :c:type:`PyObject` represents a Python floating-point object."
msgstr ""
"Denna subtyp av :c:type:`PyObject` representerar ett Python-objekt med "
"flyttal."

msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python floating-point "
"type.  This is the same object as :class:`float` in the Python layer."
msgstr ""
"Denna instans av :c:type:`PyTypeObject` representerar Pythons flyttalstyp.  "
"Detta är samma objekt som :class:`float` i Python-lagret."

msgid ""
"Return true if its argument is a :c:type:`PyFloatObject` or a subtype of :c:"
"type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"Returnerar true om dess argument är ett :c:type:`PyFloatObject` eller en "
"subtyp av :c:type:`PyFloatObject`.  Denna funktion lyckas alltid."

msgid ""
"Return true if its argument is a :c:type:`PyFloatObject`, but not a subtype "
"of :c:type:`PyFloatObject`.  This function always succeeds."
msgstr ""
"Returnerar true om dess argument är ett :c:type:`PyFloatObject`, men inte en "
"subtyp av :c:type:`PyFloatObject`.  Denna funktion lyckas alltid."

msgid ""
"Create a :c:type:`PyFloatObject` object based on the string value in *str*, "
"or ``NULL`` on failure."
msgstr ""
"Skapa ett :c:type:`PyFloatObject`-objekt baserat på strängvärdet i *str*, "
"eller ``NULL`` om det misslyckas."

msgid ""
"Create a :c:type:`PyFloatObject` object from *v*, or ``NULL`` on failure."
msgstr ""
"Skapa ett :c:type:`PyFloatObject`-objekt från *v*, eller ``NULL`` om det "
"misslyckas."

msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*.  If "
"*pyfloat* is not a Python floating-point object but has a :meth:`~object."
"__float__` method, this method will first be called to convert *pyfloat* "
"into a float. If :meth:`!__float__` is not defined then it falls back to :"
"meth:`~object.__index__`. This method returns ``-1.0`` upon failure, so one "
"should call :c:func:`PyErr_Occurred` to check for errors."
msgstr ""
"Returnerar en C :c:expr:`double`-representation av innehållet i *pyfloat*.  "
"Om *pyfloat* inte är ett Python-objekt med flyttal utan har en :meth:"
"`~object.__float__`-metod, kommer denna metod först att anropas för att "
"konvertera *pyfloat* till ett flyttal. Om :meth:`!__float__` inte är "
"definierad faller den tillbaka till :meth:`~object.__index__`. Denna metod "
"returnerar ``-1.0`` om den misslyckas, så man bör anropa :c:func:"
"`PyErr_Occurred` för att kontrollera om det finns fel."

msgid "Use :meth:`~object.__index__` if available."
msgstr "Använd :meth:`~object.__index__` om det finns tillgängligt."

msgid ""
"Return a C :c:expr:`double` representation of the contents of *pyfloat*, but "
"without error checking."
msgstr ""
"Returnerar en C :c:expr:`double`-representation av innehållet i *pyfloat*, "
"men utan felkontroll."

msgid ""
"Return a structseq instance which contains information about the precision, "
"minimum and maximum values of a float. It's a thin wrapper around the header "
"file :file:`float.h`."
msgstr ""
"Returnerar en structseq-instans som innehåller information om precision, "
"minimi- och maximivärden för en float. Det är ett tunt omslag runt "
"headerfilen :file:`float.h`."

msgid ""
"Return the maximum representable finite float *DBL_MAX* as C :c:expr:"
"`double`."
msgstr ""
"Returnera den maximalt representerbara finita flottören *DBL_MAX* som C :c:"
"expr:`double`."

msgid ""
"Return the minimum normalized positive float *DBL_MIN* as C :c:expr:`double`."
msgstr ""
"Returnera den minsta normaliserade positiva floaten *DBL_MIN* som C :c:expr:"
"`double`."

msgid "Pack and Unpack functions"
msgstr "Funktioner för packning och uppackning"

msgid ""
"The pack and unpack functions provide an efficient platform-independent way "
"to store floating-point values as byte strings. The Pack routines produce a "
"bytes string from a C :c:expr:`double`, and the Unpack routines produce a C :"
"c:expr:`double` from such a bytes string. The suffix (2, 4 or 8) specifies "
"the number of bytes in the bytes string."
msgstr ""
"Funktionerna pack och unpack ger ett effektivt plattformsoberoende sätt att "
"lagra flyttalsvärden som bytesträngar. Pack-rutinerna producerar en bytes-"
"sträng från en C :c:expr:`double`, och Unpack-rutinerna producerar en C :c:"
"expr:`double` från en sådan bytes-sträng. Suffixet (2, 4 eller 8) anger "
"antalet bytes i bytes-strängen."

msgid ""
"On platforms that appear to use IEEE 754 formats these functions work by "
"copying bits. On other platforms, the 2-byte format is identical to the IEEE "
"754 binary16 half-precision format, the 4-byte format (32-bit) is identical "
"to the IEEE 754 binary32 single precision format, and the 8-byte format to "
"the IEEE 754 binary64 double precision format, although the packing of INFs "
"and NaNs (if such things exist on the platform) isn't handled correctly, and "
"attempting to unpack a bytes string containing an IEEE INF or NaN will raise "
"an exception."
msgstr ""
"På plattformar som verkar använda IEEE 754-format fungerar dessa funktioner "
"genom att kopiera bitar. På andra plattformar är 2-byteformatet identiskt "
"med IEEE 754 binary16 halvprecisionsformat, 4-byteformatet (32-bit) är "
"identiskt med IEEE 754 binary32 enkelprecisionsformat och 8-byteformatet med "
"IEEE 754 binary64 dubbelprecisionsformat, även om packningen av INF och NaN "
"(om sådana finns på plattformen) inte hanteras korrekt, och försök att packa "
"upp en bytessträng som innehåller en IEEE INF eller NaN kommer att ge upphov "
"till ett undantag."

msgid ""
"Note that NaNs type may not be preserved on IEEE platforms (silent NaN "
"become quiet), for example on x86 systems in 32-bit mode."
msgstr ""
"Observera att NaN-typen kanske inte bevaras på IEEE-plattformar (tysta NaN "
"blir tysta), t.ex. på x86-system i 32-bitarsläge."

msgid ""
"On non-IEEE platforms with more precision, or larger dynamic range, than "
"IEEE 754 supports, not all values can be packed; on non-IEEE platforms with "
"less precision, or smaller dynamic range, not all values can be unpacked. "
"What happens in such cases is partly accidental (alas)."
msgstr ""
"På icke-IEEE-plattformar med högre precision eller större dynamiskt omfång "
"än IEEE 754 stöder kan inte alla värden packas; på icke-IEEE-plattformar med "
"lägre precision eller mindre dynamiskt omfång kan inte alla värden packas "
"upp. Vad som händer i sådana fall är delvis oavsiktligt (tyvärr)."

msgid "Pack functions"
msgstr "Packa funktioner"

msgid ""
"The pack routines write 2, 4 or 8 bytes, starting at *p*. *le* is an :c:expr:"
"`int` argument, non-zero if you want the bytes string in little-endian "
"format (exponent last, at ``p+1``, ``p+3``, or ``p+6`` ``p+7``), zero if you "
"want big-endian format (exponent first, at *p*). The :c:macro:"
"`PY_BIG_ENDIAN` constant can be used to use the native endian: it is equal "
"to ``1`` on big endian processor, or ``0`` on little endian processor."
msgstr ""
"Packrutinerna skriver 2, 4 eller 8 byte, med början vid *p*. *le* är ett :c:"
"expr:`int`-argument, icke-noll om du vill ha bytessträngen i little-endian-"
"format (exponent sist, vid ``p+1``, ``p+3``, eller ``p+6`` ``p+7``), noll om "
"du vill ha big-endian-format (exponent först, vid *p*). Konstanten :c:macro:"
"`PY_BIG_ENDIAN` kan användas för att använda den inbyggda endian: den är "
"lika med ``1`` på big endian-processor, eller ``0`` på little endian-"
"processor."

msgid ""
"Return value: ``0`` if all is OK, ``-1`` if error (and an exception is set, "
"most likely :exc:`OverflowError`)."
msgstr ""
"Returvärde: ``0`` om allt är OK, ``-1`` om fel (och ett undantag anges, "
"troligen :exc:`OverflowError`)."

msgid "There are two problems on non-IEEE platforms:"
msgstr "Det finns två problem på plattformar som inte är IEEE:"

msgid "What this does is undefined if *x* is a NaN or infinity."
msgstr "Vad detta gör är odefinierat om *x* är ett NaN eller oändligt."

msgid "``-0.0`` and ``+0.0`` produce the same bytes string."
msgstr "``-0,0`` och ``+0,0`` ger samma bytessträng."

msgid "Pack a C double as the IEEE 754 binary16 half-precision format."
msgstr "Packa en C-dubbel som IEEE 754 binär16 halvprecisionsformat."

msgid "Pack a C double as the IEEE 754 binary32 single precision format."
msgstr "Packa en C-dubbel i formatet IEEE 754 binary32 med enkel precision."

msgid "Pack a C double as the IEEE 754 binary64 double precision format."
msgstr "Packa en C-dubbel i IEEE 754 binary64 dubbelprecisionsformat."

msgid "Unpack functions"
msgstr "Packa upp funktioner"

msgid ""
"The unpack routines read 2, 4 or 8 bytes, starting at *p*.  *le* is an :c:"
"expr:`int` argument, non-zero if the bytes string is in little-endian format "
"(exponent last, at ``p+1``, ``p+3`` or ``p+6`` and ``p+7``), zero if big-"
"endian (exponent first, at *p*). The :c:macro:`PY_BIG_ENDIAN` constant can "
"be used to use the native endian: it is equal to ``1`` on big endian "
"processor, or ``0`` on little endian processor."
msgstr ""
"Uppackningsrutinerna läser 2, 4 eller 8 byte, med början vid *p*.  *le* är "
"ett :c:expr:`int`-argument, icke-noll om bytessträngen är i little-endian-"
"format (exponent sist, vid ``p+1``, ``p+3`` eller ``p+6`` och ``p+7``), noll "
"om big-endian (exponent först, vid *p*). Konstanten :c:macro:`PY_BIG_ENDIAN` "
"kan användas för att använda den ursprungliga endian: den är lika med ``1`` "
"på big endian-processor, eller ``0`` på little endian-processor."

msgid ""
"Return value: The unpacked double.  On error, this is ``-1.0`` and :c:func:"
"`PyErr_Occurred` is true (and an exception is set, most likely :exc:"
"`OverflowError`)."
msgstr ""
"Returvärde: Den uppackade dubbelteckningen.  Vid fel är detta ``-1.0`` och :"
"c:func:`PyErr_Occurred` är true (och ett undantag anges, troligen :exc:"
"`OverflowError`)."

msgid ""
"Note that on a non-IEEE platform this will refuse to unpack a bytes string "
"that represents a NaN or infinity."
msgstr ""
"Observera att på en icke-IEEE-plattform kommer detta att vägra att packa upp "
"en bytessträng som representerar ett NaN eller oändlighet."

msgid "Unpack the IEEE 754 binary16 half-precision format as a C double."
msgstr "Packa upp IEEE 754 binary16 halvprecisionsformat som en C-dubbel."

msgid "Unpack the IEEE 754 binary32 single precision format as a C double."
msgstr ""
"Packa upp IEEE 754 binary32-formatet med enkel precision som en C-dubbel."

msgid "Unpack the IEEE 754 binary64 double precision format as a C double."
msgstr "Packa upp IEEE 754 binary64 dubbelprecisionsformat som en C-dubbel."

msgid "object"
msgstr "objekt"

msgid "floating-point"
msgstr "flyttal"
