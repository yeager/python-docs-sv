# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-23 14:15+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Allocating Objects on the Heap"
msgstr ""

msgid ""
"Initialize a newly allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  Other fields of the object are "
"not initialized.  Despite its name, this function is unrelated to the "
"object's :meth:`~object.__init__` method (:c:member:`~PyTypeObject.tp_init` "
"slot).  Specifically, this function does **not** call the object's :meth:`!"
"__init__` method."
msgstr ""

msgid ""
"In general, consider this function to be a low-level routine. Use :c:member:"
"`~PyTypeObject.tp_alloc` where possible. For implementing :c:member:`!"
"tp_alloc` for your type, prefer :c:func:`PyType_GenericAlloc` or :c:func:"
"`PyObject_New`."
msgstr ""

msgid ""
"This function only initializes the object's memory corresponding to the "
"initial :c:type:`PyObject` structure.  It does not zero the rest."
msgstr ""

msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""

msgid ""
"This function only initializes some of the object's memory.  It does not "
"zero the rest."
msgstr ""

msgid ""
"Allocates a new Python object using the C structure type *TYPE* and the "
"Python type object *typeobj* (``PyTypeObject*``) by calling :c:func:"
"`PyObject_Malloc` to allocate memory and initializing it like :c:func:"
"`PyObject_Init`.  The caller will own the only reference to the object (i.e. "
"its reference count will be one)."
msgstr ""

msgid ""
"Avoid calling this directly to allocate memory for an object; call the "
"type's :c:member:`~PyTypeObject.tp_alloc` slot instead."
msgstr ""

msgid ""
"When populating a type's :c:member:`~PyTypeObject.tp_alloc` slot, :c:func:"
"`PyType_GenericAlloc` is preferred over a custom function that simply calls "
"this macro."
msgstr ""

msgid ""
"This macro does not call :c:member:`~PyTypeObject.tp_alloc`, :c:member:"
"`~PyTypeObject.tp_new` (:meth:`~object.__new__`), or :c:member:"
"`~PyTypeObject.tp_init` (:meth:`~object.__init__`)."
msgstr ""

msgid ""
"This cannot be used for objects with :c:macro:`Py_TPFLAGS_HAVE_GC` set in :c:"
"member:`~PyTypeObject.tp_flags`; use :c:macro:`PyObject_GC_New` instead."
msgstr ""

msgid ""
"Memory allocated by this macro must be freed with :c:func:`PyObject_Free` "
"(usually called via the object's :c:member:`~PyTypeObject.tp_free` slot)."
msgstr ""

msgid ""
"The returned memory is not guaranteed to have been completely zeroed before "
"it was initialized."
msgstr ""

msgid ""
"This macro does not construct a fully initialized object of the given type; "
"it merely allocates memory and prepares it for further initialization by :c:"
"member:`~PyTypeObject.tp_init`.  To construct a fully initialized object, "
"call *typeobj* instead.  For example::"
msgstr ""

msgid "PyObject *foo = PyObject_CallNoArgs((PyObject *)&PyFoo_Type);"
msgstr ""

msgid ":c:func:`PyObject_Free`"
msgstr ""

msgid ":c:macro:`PyObject_GC_New`"
msgstr ""

msgid ":c:func:`PyType_GenericAlloc`"
msgstr ""

msgid ":c:member:`~PyTypeObject.tp_alloc`"
msgstr ""

msgid "Like :c:macro:`PyObject_New` except:"
msgstr ""

msgid ""
"It allocates enough memory for the *TYPE* structure plus *size* "
"(``Py_ssize_t``) fields of the size given by the :c:member:`~PyTypeObject."
"tp_itemsize` field of *typeobj*."
msgstr ""

msgid "The memory is initialized like :c:func:`PyObject_InitVar`."
msgstr ""

msgid ""
"This is useful for implementing objects like tuples, which are able to "
"determine their size at construction time.  Embedding the array of fields "
"into the same allocation decreases the number of allocations, improving the "
"memory management efficiency."
msgstr ""

msgid ""
"This cannot be used for objects with :c:macro:`Py_TPFLAGS_HAVE_GC` set in :c:"
"member:`~PyTypeObject.tp_flags`; use :c:macro:`PyObject_GC_NewVar` instead."
msgstr ""

msgid ""
"Memory allocated by this function must be freed with :c:func:`PyObject_Free` "
"(usually called via the object's :c:member:`~PyTypeObject.tp_free` slot)."
msgstr ""

msgid ""
"PyObject *list_instance = PyObject_CallNoArgs((PyObject *)&PyList_Type);"
msgstr ""

msgid ":c:macro:`PyObject_GC_NewVar`"
msgstr ""

msgid "Same as :c:func:`PyObject_Free`."
msgstr ""

msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed "
"using the :c:macro:`Py_None` macro, which evaluates to a pointer to this "
"object."
msgstr ""

msgid ":ref:`moduleobjects`"
msgstr ""

msgid "To allocate and create extension modules."
msgstr ""
