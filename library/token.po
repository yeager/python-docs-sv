# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-19 14:18+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!token` --- Constants used with Python parse trees"
msgstr ""

msgid "**Source code:** :source:`Lib/token.py`"
msgstr ""

msgid ""
"This module provides constants which represent the numeric values of leaf "
"nodes of the parse tree (terminal tokens).  Refer to the file :file:`Grammar/"
"Tokens` in the Python distribution for the definitions of the names in the "
"context of the language grammar.  The specific numeric values which the "
"names map to may change between Python versions."
msgstr ""

msgid ""
"The module also provides a mapping from numeric codes to names and some "
"functions.  The functions mirror definitions in the Python C header files."
msgstr ""

msgid ""
"Note that a token's value may depend on tokenizer options. For example, a "
"``\"+\"`` token may be reported as either :data:`PLUS` or :data:`OP`, or a "
"``\"match\"`` token may be either :data:`NAME` or :data:`SOFT_KEYWORD`."
msgstr ""

msgid ""
"Dictionary mapping the numeric values of the constants defined in this "
"module back to name strings, allowing more human-readable representation of "
"parse trees to be generated."
msgstr ""

msgid "Return ``True`` for terminal token values."
msgstr ""

msgid "Return ``True`` for non-terminal token values."
msgstr ""

msgid "Return ``True`` if *x* is the marker indicating the end of input."
msgstr ""

msgid "The token constants are:"
msgstr ""

msgid ""
"Token value that indicates an :ref:`identifier <identifiers>`. Note that "
"keywords are also initially tokenized as ``NAME`` tokens."
msgstr ""

msgid "Token value that indicates a :ref:`numeric literal <numbers>`"
msgstr ""

msgid ""
"Token value that indicates a :ref:`string or byte literal <strings>`, "
"excluding :ref:`formatted string literals <f-strings>`. The token string is "
"not interpreted: it includes the surrounding quotation marks and the prefix "
"(if given); backslashes are included literally, without processing escape "
"sequences."
msgstr ""

msgid ""
"A generic token value that indicates an :ref:`operator <operators>` or :ref:"
"`delimiter <delimiters>`."
msgstr ""

msgid ""
"This value is only reported by the :mod:`tokenize` module. Internally, the "
"tokenizer uses :ref:`exact token types <token_operators_delimiters>` instead."
msgstr ""

msgid ""
"Token value used to indicate a comment. The parser ignores :data:`!COMMENT` "
"tokens."
msgstr ""

msgid ""
"Token value that indicates the end of a :ref:`logical line <logical-lines>`."
msgstr ""

msgid ""
"Token value used to indicate a non-terminating newline. :data:`!NL` tokens "
"are generated when a logical line of code is continued over multiple "
"physical lines. The parser ignores :data:`!NL` tokens."
msgstr ""

msgid ""
"Token value used at the beginning of a :ref:`logical line <logical-lines>` "
"to indicate the start of an :ref:`indented block <indentation>`."
msgstr ""

msgid ""
"Token value used at the beginning of a :ref:`logical line <logical-lines>` "
"to indicate the end of an :ref:`indented block <indentation>`."
msgstr ""

msgid ""
"Token value used to indicate the beginning of an :ref:`f-string literal <f-"
"strings>`."
msgstr ""

msgid ""
"The token string includes the prefix and the opening quote(s), but none of "
"the contents of the literal."
msgstr ""

msgid ""
"Token value used for literal text inside an :ref:`f-string literal <f-"
"strings>`, including format specifications."
msgstr ""

msgid ""
"Replacement fields (that is, the non-literal parts of f-strings) use the "
"same tokens as other expressions, and are delimited by :data:`LBRACE`, :data:"
"`RBRACE`, :data:`EXCLAMATION` and :data:`COLON` tokens."
msgstr ""

msgid "Token value used to indicate the end of a :ref:`f-string <f-strings>`."
msgstr ""

msgid "The token string contains the closing quote(s)."
msgstr ""

msgid ""
"Token value used to indicate the beginning of a template string literal."
msgstr ""

msgid ""
"Token value used for literal text inside a template string literal including "
"format specifications."
msgstr ""

msgid ""
"Replacement fields (that is, the non-literal parts of t-strings) use the "
"same tokens as other expressions, and are delimited by :data:`LBRACE`, :data:"
"`RBRACE`, :data:`EXCLAMATION` and :data:`COLON` tokens."
msgstr ""

msgid "Token value used to indicate the end of a template string literal."
msgstr ""

msgid ""
"Token value that indicates the end of input. Used in :ref:`top-level grammar "
"rules <top-level>`."
msgstr ""

msgid ""
"Token value that indicates the encoding used to decode the source bytes into "
"text. The first token returned by :func:`tokenize.tokenize` will always be "
"an ``ENCODING`` token."
msgstr ""

msgid ""
"This token type isn't used by the C tokenizer but is needed for the :mod:"
"`tokenize` module."
msgstr ""

msgid ""
"The following token types are not produced by the :mod:`tokenize` module, "
"and are defined for special uses in the tokenizer or parser:"
msgstr ""

msgid ""
"Token value indicating that a ``type: ignore`` comment was recognized. Such "
"tokens are produced instead of regular :data:`COMMENT` tokens only with the :"
"data:`~ast.PyCF_TYPE_COMMENTS` flag."
msgstr ""

msgid ""
"Token value indicating that a type comment was recognized. Such tokens are "
"produced instead of regular :data:`COMMENT` tokens only with the :data:`~ast."
"PyCF_TYPE_COMMENTS` flag."
msgstr ""

msgid "Token value indicating a :ref:`soft keyword <soft-keywords>`."
msgstr ""

msgid ""
"The tokenizer never produces this value. To check for a soft keyword, pass "
"a :data:`NAME` token's string to :func:`keyword.issoftkeyword`."
msgstr ""

msgid "Token value used to indicate wrong input."
msgstr ""

msgid ""
"The :mod:`tokenize` module generally indicates errors by raising exceptions "
"instead of emitting this token. It can also emit tokens such as :data:`OP` "
"or :data:`NAME` with strings that are later rejected by the parser."
msgstr ""

msgid ""
"The remaining tokens represent specific :ref:`operators <operators>` and :"
"ref:`delimiters <delimiters>`. (The :mod:`tokenize` module reports these as :"
"data:`OP`; see ``exact_type`` in the :mod:`tokenize` documentation for "
"details.)"
msgstr ""

msgid "Token"
msgstr ""

msgid "Value"
msgstr ""

msgid "``\"(\"``"
msgstr ""

msgid "``\")\"``"
msgstr ""

msgid "``\"[\"``"
msgstr ""

msgid "``\"]\"``"
msgstr ""

msgid "``\":\"``"
msgstr ""

msgid "``\",\"``"
msgstr ""

msgid "``\";\"``"
msgstr ""

msgid "``\"+\"``"
msgstr ""

msgid "``\"-\"``"
msgstr ""

msgid "``\"*\"``"
msgstr ""

msgid "``\"/\"``"
msgstr ""

msgid "``\"|\"``"
msgstr ""

msgid "``\"&\"``"
msgstr ""

msgid "``\"<\"``"
msgstr ""

msgid "``\">\"``"
msgstr ""

msgid "``\"=\"``"
msgstr ""

msgid "``\".\"``"
msgstr ""

msgid "``\"%\"``"
msgstr ""

msgid "``\"{\"``"
msgstr ""

msgid "``\"}\"``"
msgstr ""

msgid "``\"==\"``"
msgstr ""

msgid "``\"!=\"``"
msgstr ""

msgid "``\"<=\"``"
msgstr ""

msgid "``\">=\"``"
msgstr ""

msgid "``\"~\"``"
msgstr ""

msgid "``\"^\"``"
msgstr ""

msgid "``\"<<\"``"
msgstr ""

msgid "``\">>\"``"
msgstr ""

msgid "``\"**\"``"
msgstr ""

msgid "``\"+=\"``"
msgstr ""

msgid "``\"-=\"``"
msgstr ""

msgid "``\"*=\"``"
msgstr ""

msgid "``\"/=\"``"
msgstr ""

msgid "``\"%=\"``"
msgstr ""

msgid "``\"&=\"``"
msgstr ""

msgid "``\"|=\"``"
msgstr ""

msgid "``\"^=\"``"
msgstr ""

msgid "``\"<<=\"``"
msgstr ""

msgid "``\">>=\"``"
msgstr ""

msgid "``\"**=\"``"
msgstr ""

msgid "``\"//\"``"
msgstr ""

msgid "``\"//=\"``"
msgstr ""

msgid "``\"@\"``"
msgstr ""

msgid "``\"@=\"``"
msgstr ""

msgid "``\"->\"``"
msgstr ""

msgid "``\"...\"``"
msgstr ""

msgid "``\":=\"``"
msgstr ""

msgid "``\"!\"``"
msgstr ""

msgid "The following non-token constants are provided:"
msgstr ""

msgid "The number of token types defined in this module."
msgstr ""

msgid ""
"A dictionary mapping the string representation of a token to its numeric "
"code."
msgstr ""

msgid "Added :data:`!AWAIT` and :data:`!ASYNC` tokens."
msgstr ""

msgid "Added :data:`COMMENT`, :data:`NL` and :data:`ENCODING` tokens."
msgstr ""

msgid ""
"Removed :data:`!AWAIT` and :data:`!ASYNC` tokens. \"async\" and \"await\" "
"are now tokenized as :data:`NAME` tokens."
msgstr ""

msgid ""
"Added :data:`TYPE_COMMENT`, :data:`TYPE_IGNORE`, :data:`COLONEQUAL`. Added :"
"data:`!AWAIT` and :data:`!ASYNC` tokens back (they're needed to support "
"parsing older Python versions for :func:`ast.parse` with ``feature_version`` "
"set to 6 or lower)."
msgstr ""

msgid "Added :data:`EXCLAMATION`."
msgstr ""

msgid "Removed :data:`!AWAIT` and :data:`!ASYNC` tokens again."
msgstr ""
