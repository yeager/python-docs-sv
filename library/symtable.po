# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!symtable` --- Access to the compiler's symbol tables"
msgstr ":mod:`!symtable` --- Tillgång till kompilatorns symboltabeller"

msgid "**Source code:** :source:`Lib/symtable.py`"
msgstr "**Källkod:** :source:`Lib/symtable.py`"

msgid ""
"Symbol tables are generated by the compiler from AST just before bytecode is "
"generated.  The symbol table is responsible for calculating the scope of "
"every identifier in the code.  :mod:`symtable` provides an interface to "
"examine these tables."
msgstr ""
"Symboltabeller genereras av kompilatorn från AST strax innan bytecode "
"genereras.  Symboltabellen är ansvarig för att beräkna omfattningen av varje "
"identifierare i koden. :mod:`symtable` tillhandahåller ett gränssnitt för "
"att undersöka dessa tabeller."

msgid "Generating Symbol Tables"
msgstr "Generera symboltabeller"

msgid ""
"Return the toplevel :class:`SymbolTable` for the Python source *code*. "
"*filename* is the name of the file containing the code.  *compile_type* is "
"like the *mode* argument to :func:`compile`."
msgstr ""
"Returnerar toplevel :class:`SymbolTable` för Python-källan *code*. "
"*filename* är namnet på filen som innehåller koden.  *compile_type* är som "
"*mode*-argumentet till :func:`compile`."

msgid "Examining Symbol Tables"
msgstr "Undersökning av symboltabeller"

msgid "An enumeration indicating the type of a :class:`SymbolTable` object."
msgstr "En uppräkning som anger typen av ett :class:`SymbolTable`-objekt."

msgid "Used for the symbol table of a module."
msgstr "Används för symboltabellen för en modul."

msgid "Used for the symbol table of a function."
msgstr "Används för symboltabellen för en funktion."

msgid "Used for the symbol table of a class."
msgstr "Används för symboltabellen för en klass."

msgid ""
"The following members refer to different flavors of :ref:`annotation scopes "
"<annotation-scopes>`."
msgstr ""
"Följande medlemmar refererar till olika varianter av :ref:`annotation scopes "
"<annotation-scopes>`."

msgid ""
"Used for annotations if ``from __future__ import annotations`` is active."
msgstr ""
"Används för anteckningar om ``from __future__ import annotations`` är aktiv."

msgid "Used for the symbol table of :keyword:`type` constructions."
msgstr "Används för symboltabellen för :keyword:`type`-konstruktioner."

msgid ""
"Used for the symbol table of :ref:`generic functions <generic-functions>` "
"or :ref:`generic classes <generic-classes>`."
msgstr ""
"Används för symboltabellen i :ref:``generiska funktioner <generic-"
"functions>` eller :ref:``generiska klasser <generic-classes>`."

msgid ""
"Used for the symbol table of the bound, the constraint tuple or the default "
"value of a single type variable in the formal sense, i.e., a TypeVar, a "
"TypeVarTuple or a ParamSpec object (the latter two do not support a bound or "
"a constraint tuple)."
msgstr ""
"Används för symboltabellen för bound, constraint-tupeln eller standardvärdet "
"för en enda typvariabel i formell mening, dvs. en TypeVar, en TypeVarTuple "
"eller ett ParamSpec-objekt (de två senare stöder inte en bound eller en "
"constraint-tuple)."

msgid "A namespace table for a block.  The constructor is not public."
msgstr "En namnområdestabell för ett block.  Konstruktören är inte publik."

msgid ""
"Return the type of the symbol table.  Possible values are members of the :"
"class:`SymbolTableType` enumeration."
msgstr ""
"Returnerar typen av symboltabell.  Möjliga värden är medlemmar i "
"uppräkningen :class:`SymbolTableType`."

msgid ""
"Added ``'annotation'``,  ``'TypeVar bound'``, ``'type alias'``, and ``'type "
"parameter'`` as possible return values."
msgstr ""
"Lagt till ``'annotation'``, ``'TypeVar bound'``, ``'type alias'`` och "
"``'type parameter'`` som möjliga returvärden."

msgid "Return values are members of the :class:`SymbolTableType` enumeration."
msgstr "Returvärdena är medlemmar i uppräkningen :class:`SymbolTableType`."

msgid ""
"The exact values of the returned string may change in the future, and thus, "
"it is recommended to use :class:`SymbolTableType` members instead of hard-"
"coded strings."
msgstr ""
"De exakta värdena i den returnerade strängen kan ändras i framtiden, och "
"därför rekommenderas det att använda :class:`SymbolTableType`-medlemmar i "
"stället för hårdkodade strängar."

msgid "Return the table's identifier."
msgstr "Returnerar tabellens identifierare."

msgid ""
"Return the table's name.  This is the name of the class if the table is for "
"a class, the name of the function if the table is for a function, or "
"``'top'`` if the table is global (:meth:`get_type` returns ``'module'``). "
"For type parameter scopes (which are used for generic classes, functions, "
"and type aliases), it is the name of the underlying class, function, or type "
"alias. For type alias scopes, it is the name of the type alias. For :class:"
"`~typing.TypeVar` bound scopes, it is the name of the ``TypeVar``."
msgstr ""
"Returnerar tabellens namn.  Detta är klassens namn om tabellen är för en "
"klass, funktionens namn om tabellen är för en funktion, eller ``'top'`` om "
"tabellen är global (:meth:`get_type` returnerar ``'module'``). För "
"typparameterscopes (som används för generiska klasser, funktioner och "
"typalias) är det namnet på den underliggande klassen, funktionen eller "
"typaliaset. För scope för typalias är det namnet på typaliaset. För :class:"
"`~typing.TypeVar` bound scopes är det namnet på ``TypeVar``."

msgid "Return the number of the first line in the block this table represents."
msgstr ""
"Returnera numret på den första raden i det block som denna tabell "
"representerar."

msgid "Return ``True`` if the locals in this table can be optimized."
msgstr "Returnerar ``True`` om lokalavdelningarna i tabellen kan optimeras."

msgid "Return ``True`` if the block is a nested class or function."
msgstr "Returnerar ``True`` om blocket är en nästlad klass eller funktion."

msgid ""
"Return ``True`` if the block has nested namespaces within it.  These can be "
"obtained with :meth:`get_children`."
msgstr ""
"Returnerar ``True`` om blocket har nästlade namnrymder inom sig.  Dessa kan "
"erhållas med :meth:`get_children`."

msgid ""
"Return a view object containing the names of symbols in the table. See the :"
"ref:`documentation of view objects <dict-views>`."
msgstr ""
"Returnerar ett view-objekt som innehåller namnen på symbolerna i tabellen. "
"Se :ref:`dokumentation av view-objekt <dict-views>`."

msgid "Lookup *name* in the table and return a :class:`Symbol` instance."
msgstr "Leta upp *namn* i tabellen och returnera en :class:`Symbol`-instans."

msgid "Return a list of :class:`Symbol` instances for names in the table."
msgstr "Returnerar en lista med :class:`Symbol`-instanser för namn i tabellen."

msgid "Return a list of the nested symbol tables."
msgstr "Returnerar en lista över de nästlade symboltabellerna."

msgid ""
"A namespace for a function or method.  This class inherits from :class:"
"`SymbolTable`."
msgstr ""
"En namnrymd för en funktion eller metod.  Denna klass ärver från :class:"
"`SymbolTable`."

msgid "Return a tuple containing names of parameters to this function."
msgstr ""
"Returnerar en tupel som innehåller namn på parametrar till denna funktion."

msgid "Return a tuple containing names of locals in this function."
msgstr ""
"Returnerar en tupel som innehåller namn på lokala platser i denna funktion."

msgid "Return a tuple containing names of globals in this function."
msgstr "Returnerar en tupel som innehåller namn på globaler i denna funktion."

msgid ""
"Return a tuple containing names of explicitly declared nonlocals in this "
"function."
msgstr ""
"Returnerar en tupel som innehåller namn på explicit deklarerade nonlocals i "
"denna funktion."

msgid ""
"Return a tuple containing names of :term:`free (closure) variables <closure "
"variable>` in this function."
msgstr ""
"Returnera en tupel som innehåller namn på :term:`fria (stängda) variabler "
"<closure variable>` i denna funktion."

msgid "A namespace of a class.  This class inherits from :class:`SymbolTable`."
msgstr ""
"Ett namnområde för en klass.  Denna klass ärver från :class:`SymbolTable`."

msgid ""
"Return a tuple containing the names of method-like functions declared in the "
"class."
msgstr ""
"Returnerar en tupel som innehåller namnen på de metodliknande funktioner som "
"deklarerats i klassen."

msgid ""
"Here, the term 'method' designates *any* function defined in the class body "
"via :keyword:`def` or :keyword:`async def`."
msgstr ""
"Här betecknar termen \"metod\" *alla* funktioner som definieras i klassens "
"kropp via :keyword:`def` eller :keyword:`async def`."

msgid ""
"Functions defined in a deeper scope (e.g., in an inner class) are not picked "
"up by :meth:`get_methods`."
msgstr ""
"Funktioner som definieras i ett djupare scope (t.ex. i en inre klass) fångas "
"inte upp av :meth:`get_methods`."

msgid "For example:"
msgstr "Till exempel:"

msgid ""
">>> import symtable\n"
">>> st = symtable.symtable('''\n"
"... def outer(): pass\n"
"...\n"
"... class A:\n"
"...    def f():\n"
"...        def w(): pass\n"
"...\n"
"...    def g(self): pass\n"
"...\n"
"...    @classmethod\n"
"...    async def h(cls): pass\n"
"...\n"
"...    global outer\n"
"...    def outer(self): pass\n"
"... ''', 'test', 'exec')\n"
">>> class_A = st.get_children()[2]\n"
">>> class_A.get_methods()\n"
"('f', 'g', 'h')"
msgstr ""
">>> import symtable\n"
">>> st = symtable.symtable('''\n"
"... def outer(): pass\n"
"...\n"
"... class A:\n"
"...    def f():\n"
"...        def w(): pass\n"
"...\n"
"...    def g(self): pass\n"
"...\n"
"...    @classmethod\n"
"...    async def h(cls): pass\n"
"...\n"
"...    global outer\n"
"...    def outer(self): pass\n"
"... ''', 'test', 'exec')\n"
">>> class_A = st.get_children()[2]\n"
">>> class_A.get_methods()\n"
"('f', 'g', 'h')"

msgid ""
"Although ``A().f()`` raises :exc:`TypeError` at runtime, ``A.f`` is still "
"considered as a method-like function."
msgstr ""
"Även om ``A().f()`` ger upphov till :exc:`TypeError` vid körning, betraktas "
"``A.f`` fortfarande som en metodliknande funktion."

msgid ""
"An entry in a :class:`SymbolTable` corresponding to an identifier in the "
"source.  The constructor is not public."
msgstr ""
"En post i en :class:`SymbolTable` som motsvarar en identifierare i källan.  "
"Konstruktören är inte publik."

msgid "Return the symbol's name."
msgstr "Returnera symbolens namn."

msgid "Return ``True`` if the symbol is used in its block."
msgstr "Returnerar ``True`` om symbolen används i sitt block."

msgid "Return ``True`` if the symbol is created from an import statement."
msgstr "Returnerar ``True`` om symbolen är skapad från en importförklaring."

msgid "Return ``True`` if the symbol is a parameter."
msgstr "Returnerar ``True`` om symbolen är en parameter."

msgid "Return ``True`` if the symbol is a type parameter."
msgstr "Returnerar ``True`` om symbolen är en typparameter."

msgid "Return ``True`` if the symbol is global."
msgstr "Returnerar ``True`` om symbolen är global."

msgid "Return ``True`` if the symbol is nonlocal."
msgstr "Returnerar ``True`` om symbolen är icke-lokal."

msgid ""
"Return ``True`` if the symbol is declared global with a global statement."
msgstr "Returnerar ``True`` om symbolen är globalförklarad med en global-sats."

msgid "Return ``True`` if the symbol is local to its block."
msgstr "Returnerar ``True`` om symbolen är lokal för sitt block."

msgid "Return ``True`` if the symbol is annotated."
msgstr "Returnerar ``True`` om symbolen är annoterad."

msgid ""
"Return ``True`` if the symbol is referenced in its block, but not assigned "
"to."
msgstr ""
"Returnerar ``True`` om symbolen är refererad i sitt block, men inte "
"tilldelad."

msgid ""
"Return *True* if a class-scoped symbol is free from the perspective of a "
"method."
msgstr ""
"Returnerar *True* om en klassindelad symbol är fri ur en metods perspektiv."

msgid "Consider the following example::"
msgstr "Tänk på följande exempel::"

msgid ""
"def f():\n"
"    x = 1  # function-scoped\n"
"    class C:\n"
"        x = 2  # class-scoped\n"
"        def method(self):\n"
"            return x"
msgstr ""
"def f():\n"
"    x = 1  # function-scoped\n"
"    class C:\n"
"        x = 2  # class-scoped\n"
"        def method(self):\n"
"            return x"

msgid ""
"In this example, the class-scoped symbol ``x`` is considered to be free from "
"the perspective of ``C.method``, thereby allowing the latter to return *1* "
"at runtime and not *2*."
msgstr ""
"I det här exemplet anses den klassindelade symbolen ``x`` vara fri ur "
"perspektivet för ``C.method``, vilket gör att den senare kan returnera *1* "
"vid körning och inte *2*."

msgid "Return ``True`` if the symbol is assigned to in its block."
msgstr "Returnerar ``True`` om symbolen är tilldelad i sitt block."

msgid "Return ``True`` if the symbol is a comprehension iteration variable."
msgstr ""
"Returnerar ``True`` om symbolen är en iterationsvariabel i förståelsen."

msgid "Return ``True`` if the symbol is a cell in an inlined comprehension."
msgstr "Returnerar ``True`` om symbolen är en cell i en inlined comprehension."

msgid "Return ``True`` if name binding introduces new namespace."
msgstr "Returnerar ``True`` om namnbindningen introducerar en ny namnrymd."

msgid ""
"If the name is used as the target of a function or class statement, this "
"will be true."
msgstr ""
"Om namnet används som mål för en funktions- eller klassangivelse kommer "
"detta att vara sant."

msgid "For example::"
msgstr "Till exempel::"

msgid ""
">>> table = symtable.symtable(\"def some_func(): pass\", \"string\", "
"\"exec\")\n"
">>> table.lookup(\"some_func\").is_namespace()\n"
"True"
msgstr ""
">>> table = symtable.symtable(\"def some_func(): pass\", \"string\", "
"\"exec\")\n"
">>> table.lookup(\"some_func\").is_namespace()\n"
"True"

msgid ""
"Note that a single name can be bound to multiple objects.  If the result is "
"``True``, the name may also be bound to other objects, like an int or list, "
"that does not introduce a new namespace."
msgstr ""
"Observera att ett enda namn kan vara bundet till flera objekt.  Om "
"resultatet är ``True`` kan namnet också bindas till andra objekt, t.ex. en "
"int eller list, vilket inte innebär att ett nytt namnområde introduceras."

msgid "Return a list of namespaces bound to this name."
msgstr "Returnerar en lista över namnrymder som är bundna till detta namn."

msgid ""
"Return the namespace bound to this name. If more than one or no namespace is "
"bound to this name, a :exc:`ValueError` is raised."
msgstr ""
"Returnerar namnrymden som är knuten till detta namn. Om mer än en eller "
"ingen namnrymd är bunden till detta namn, kommer ett :exc:`ValueError` att "
"uppstå."

msgid "Command-Line Usage"
msgstr "Användning av kommandoraden"

msgid ""
"The :mod:`symtable` module can be executed as a script from the command line."
msgstr "Modulen :mod:`symtable` kan köras som ett skript från kommandoraden."

msgid "python -m symtable [infile...]"
msgstr "python -m symtable [infile...]"

msgid ""
"Symbol tables are generated for the specified Python source files and dumped "
"to stdout. If no input file is specified, the content is read from stdin."
msgstr ""
"Symboltabeller genereras för de angivna Python-källfilerna och dumpas till "
"stdout. Om ingen indatafil anges läses innehållet från stdin."
