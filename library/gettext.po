# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!gettext` --- Multilingual internationalization services"
msgstr ":mod:`!gettext` --- Flerspråkiga internationaliseringstjänster"

msgid "**Source code:** :source:`Lib/gettext.py`"
msgstr "**Källkod:** :source:`Lib/gettext.py`"

msgid ""
"The :mod:`gettext` module provides internationalization (I18N) and "
"localization (L10N) services for your Python modules and applications. It "
"supports both the GNU :program:`gettext` message catalog API and a higher "
"level, class-based API that may be more appropriate for Python files.  The "
"interface described below allows you to write your module and application "
"messages in one natural language, and provide a catalog of translated "
"messages for running under different natural languages."
msgstr ""
"Modulen :mod:`gettext` tillhandahåller tjänster för internationalisering "
"(I18N) och lokalisering (L10N) för dina Python-moduler och -applikationer. "
"Den stöder både GNU:s :program:`gettext` API för meddelandekatalog och ett "
"klassbaserat API på högre nivå som kan vara mer lämpligt för Python-filer.  "
"Gränssnittet som beskrivs nedan gör att du kan skriva dina modul- och "
"applikationsmeddelanden på ett naturligt språk och tillhandahålla en katalog "
"med översatta meddelanden för körning på olika naturliga språk."

msgid ""
"Some hints on localizing your Python modules and applications are also given."
msgstr ""
"Några tips om hur du lokaliserar dina Python-moduler och applikationer ges "
"också."

msgid "GNU :program:`gettext` API"
msgstr "GNU :program:`gettext` API"

msgid ""
"The :mod:`gettext` module defines the following API, which is very similar "
"to the GNU :program:`gettext` API.  If you use this API you will affect the "
"translation of your entire application globally.  Often this is what you "
"want if your application is monolingual, with the choice of language "
"dependent on the locale of your user.  If you are localizing a Python "
"module, or if your application needs to switch languages on the fly, you "
"probably want to use the class-based API instead."
msgstr ""
"Modulen :mod:`gettext` definierar följande API, som är mycket likt GNU:s "
"API :program:`gettext`.  Om du använder detta API kommer du att påverka "
"översättningen av hela din applikation globalt.  Ofta är detta vad du vill "
"ha om din applikation är enspråkig, med valet av språk beroende på "
"användarens lokala.  Om du lokaliserar en Python-modul, eller om din "
"applikation behöver byta språk i farten, vill du förmodligen använda det "
"klassbaserade API:et istället."

msgid ""
"Bind the *domain* to the locale directory *localedir*.  More concretely, :"
"mod:`gettext` will look for binary :file:`.mo` files for the given domain "
"using the path (on Unix): :file:`{localedir}/{language}/LC_MESSAGES/{domain}."
"mo`, where *language* is searched for in the environment variables :envvar:"
"`LANGUAGE`, :envvar:`LC_ALL`, :envvar:`LC_MESSAGES`, and :envvar:`LANG` "
"respectively."
msgstr ""
"Bind *domän* till locale-katalogen *localedir*.  Mer konkret kommer :mod:"
"`gettext` att leta efter binära :file:`.mo`-filer för den angivna domänen "
"med hjälp av sökvägen (på Unix): :file:`{localedir}/{language}/LC_MESSAGES/"
"{domain}.mo`, där *språk* söks i miljövariablerna :envvar:`LANGUAGE`, :"
"envvar:`LC_ALL`, :envvar:`LC_MESSAGES` respektive :envvar:`LANG`."

msgid ""
"If *localedir* is omitted or ``None``, then the current binding for *domain* "
"is returned. [#]_"
msgstr ""
"Om *localedir* utelämnas eller ``None``, returneras den aktuella bindningen "
"för *domain*. [#]_"

msgid ""
"Change or query the current global domain.  If *domain* is ``None``, then "
"the current global domain is returned, otherwise the global domain is set to "
"*domain*, which is returned."
msgstr ""
"Ändrar eller frågar efter den aktuella globala domänen.  Om *domain* är "
"``None`` returneras den aktuella globala domänen, annars sätts den globala "
"domänen till *domain*, som returneras."

msgid ""
"Return the localized translation of *message*, based on the current global "
"domain, language, and locale directory.  This function is usually aliased "
"as :func:`!_` in the local namespace (see examples below)."
msgstr ""
"Returnerar den lokaliserade översättningen av *message*, baserat på den "
"aktuella globala domänen, språket och locale-katalogen.  Denna funktion är "
"vanligtvis alias som :func:`!_` i den lokala namnrymden (se exempel nedan)."

msgid ""
"Like :func:`.gettext`, but look the message up in the specified *domain*."
msgstr ""
"Som :func:`.gettext`, men letar upp meddelandet i den angivna *domänen*."

msgid ""
"Like :func:`.gettext`, but consider plural forms. If a translation is found, "
"apply the plural formula to *n*, and return the resulting message (some "
"languages have more than two plural forms). If no translation is found, "
"return *singular* if *n* is 1; return *plural* otherwise."
msgstr ""
"Som :func:`.gettext`, men tar hänsyn till pluralformer. Om en översättning "
"hittas, tillämpa pluralformeln på *n* och returnera det resulterande "
"meddelandet (vissa språk har fler än två pluralformer). Om ingen "
"översättning hittas returneras *singular* om *n* är 1; annars returneras "
"*plural*."

msgid ""
"The Plural formula is taken from the catalog header. It is a C or Python "
"expression that has a free variable *n*; the expression evaluates to the "
"index of the plural in the catalog. See `the GNU gettext documentation "
"<https://www.gnu.org/software/gettext/manual/gettext.html>`__ for the "
"precise syntax to be used in :file:`.po` files and the formulas for a "
"variety of languages."
msgstr ""
"Pluralformeln hämtas från kataloghuvudet. Det är ett C- eller Python-uttryck "
"som har en fri variabel *n*; uttrycket utvärderas till indexet för plural i "
"katalogen. Se \"GNU gettext-dokumentationen\" <https://www.gnu.org/software/"
"gettext/manual/gettext.html>`__ för den exakta syntaxen som ska användas i :"
"file:`.po`-filer och formlerna för en mängd olika språk."

msgid ""
"Like :func:`ngettext`, but look the message up in the specified *domain*."
msgstr "Som :func:`ngettext`, men sök upp meddelandet i den angivna *domänen*."

msgid ""
"Similar to the corresponding functions without the ``p`` in the prefix (that "
"is, :func:`gettext`, :func:`dgettext`, :func:`ngettext`, :func:`dngettext`), "
"but the translation is restricted to the given message *context*."
msgstr ""
"Liknar motsvarande funktioner utan ``p`` i prefixet (det vill säga :func:"
"`gettext`, :func:`dgettext`, :func:`ngettext`, :func:`dngettext`), men "
"översättningen är begränsad till det givna meddelandet *kontext*."

msgid ""
"Note that GNU :program:`gettext` also defines a :func:`!dcgettext` method, "
"but this was deemed not useful and so it is currently unimplemented."
msgstr ""
"Observera att GNU :program:`gettext` också definierar en :func:`!dcgettext`-"
"metod, men denna ansågs inte användbar och är därför för närvarande inte "
"implementerad."

msgid "Here's an example of typical usage for this API::"
msgstr "Här är ett exempel på typisk användning av detta API::"

msgid ""
"import gettext\n"
"gettext.bindtextdomain('myapplication', '/path/to/my/language/directory')\n"
"gettext.textdomain('myapplication')\n"
"_ = gettext.gettext\n"
"# ...\n"
"print(_('This is a translatable string.'))"
msgstr ""
"import gettext\n"
"gettext.bindtextdomain('myapplication', '/path/to/my/language/directory')\n"
"gettext.textdomain('myapplication')\n"
"_ = gettext.gettext\n"
"# ...\n"
"print(_('This is a translatable string.'))"

msgid "Class-based API"
msgstr "Klassbaserat API"

msgid ""
"The class-based API of the :mod:`gettext` module gives you more flexibility "
"and greater convenience than the GNU :program:`gettext` API.  It is the "
"recommended way of localizing your Python applications and modules.  :mod:`!"
"gettext` defines a :class:`GNUTranslations` class which implements the "
"parsing of GNU :file:`.mo` format files, and has methods for returning "
"strings. Instances of this class can also install themselves in the built-in "
"namespace as the function :func:`!_`."
msgstr ""
"Det klassbaserade API:et i modulen :mod:`gettext` ger dig mer flexibilitet "
"och större bekvämlighet än GNU :program:`gettext` API:et.  Det är det "
"rekommenderade sättet att lokalisera dina Python-program och moduler. :mod:`!"
"gettext` definierar en :class:`GNUTranslations`-klass som implementerar "
"parsning av GNU :file:`.mo`-formatfiler och har metoder för att returnera "
"strängar. Instanser av denna klass kan också installera sig själva i det "
"inbyggda namnområdet som funktionen :func:`!_`."

msgid ""
"This function implements the standard :file:`.mo` file search algorithm.  It "
"takes a *domain*, identical to what :func:`textdomain` takes.  Optional "
"*localedir* is as in :func:`bindtextdomain`. Optional *languages* is a list "
"of strings, where each string is a language code."
msgstr ""
"Denna funktion implementerar standardalgoritmen för filsökning i :file:`."
"mo`.  Den tar en *domän*, identisk med vad :func:`textdomain` tar.  Valfri "
"*localedir* är som i :func:`bindtextdomain`. Valfritt *languages* är en "
"lista med strängar, där varje sträng är en språkkod."

msgid ""
"If *localedir* is not given, then the default system locale directory is "
"used. [#]_  If *languages* is not given, then the following environment "
"variables are searched: :envvar:`LANGUAGE`, :envvar:`LC_ALL`, :envvar:"
"`LC_MESSAGES`, and :envvar:`LANG`.  The first one returning a non-empty "
"value is used for the *languages* variable. The environment variables should "
"contain a colon separated list of languages, which will be split on the "
"colon to produce the expected list of language code strings."
msgstr ""
"Om *localedir* inte anges används standardkatalogen för systemspråk. [#]_ Om "
"*languages* inte anges, söks följande miljövariabler: :envvar:`LANGUAGE`, :"
"envvar:`LC_ALL`, :envvar:`LC_MESSAGES` och :envvar:`LANG`.  Den första som "
"returnerar ett icke-tomt värde används för variabeln *languages*. "
"Miljövariablerna bör innehålla en kolonseparerad lista över språk, som "
"kommer att delas upp efter kolon för att ge den förväntade listan över "
"språkkodsträngar."

msgid ""
":func:`find` then expands and normalizes the languages, and then iterates "
"through them, searching for an existing file built of these components:"
msgstr ""
":func:`find` expanderar och normaliserar språken och itererar sedan genom "
"dem och söker efter en befintlig fil som är uppbyggd av dessa komponenter:"

msgid ":file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`"
msgstr ":file:`{localedir}/{language}/LC_MESSAGES/{domain}.mo`"

msgid ""
"The first such file name that exists is returned by :func:`find`. If no such "
"file is found, then ``None`` is returned. If *all* is given, it returns a "
"list of all file names, in the order in which they appear in the languages "
"list or the environment variables."
msgstr ""
"Det första sådana filnamnet som finns returneras av :func:`find`. Om ingen "
"sådan fil hittas returneras ``None``. Om *all* anges returneras en lista med "
"alla filnamn i den ordning de förekommer i språklistan eller "
"miljövariablerna."

msgid ""
"Return a ``*Translations`` instance based on the *domain*, *localedir*, and "
"*languages*, which are first passed to :func:`find` to get a list of the "
"associated :file:`.mo` file paths.  Instances with identical :file:`.mo` "
"file names are cached.  The actual class instantiated is *class_* if "
"provided, otherwise :class:`GNUTranslations`.  The class's constructor must "
"take a single :term:`file object` argument."
msgstr ""
"Returnerar en ``*Translations``-instans baserad på *domain*, *localedir* och "
"*languages*, som först skickas till :func:`find` för att få en lista över de "
"associerade :file:`.mo`-filsökvägarna.  Instanser med identiska :file:`.mo`-"
"filnamn cachelagras.  Den faktiska klassen som instansieras är *class_* om "
"den anges, annars :class:`GNUTranslations`.  Klassens konstruktor måste ta "
"ett enda :term:`filobjekt`-argument."

msgid ""
"If multiple files are found, later files are used as fallbacks for earlier "
"ones. To allow setting the fallback, :func:`copy.copy` is used to clone each "
"translation object from the cache; the actual instance data is still shared "
"with the cache."
msgstr ""
"Om flera filer hittas används de senare filerna som fallback för de "
"tidigare. För att göra det möjligt att ställa in fallback används :func:"
"`copy.copy` för att klona varje översättningsobjekt från cacheminnet; de "
"faktiska instansdata delas fortfarande med cacheminnet."

msgid ""
"If no :file:`.mo` file is found, this function raises :exc:`OSError` if "
"*fallback* is false (which is the default), and returns a :class:"
"`NullTranslations` instance if *fallback* is true."
msgstr ""
"Om ingen :file:`.mo`-fil hittas, ger denna funktion upphov till :exc:"
"`OSError` om *fallback* är false (vilket är standard), och returnerar en :"
"class:`NullTranslations`-instans om *fallback* är true."

msgid ":exc:`IOError` used to be raised, it is now an alias of :exc:`OSError`."
msgstr ""
":exc:`IOError` användes tidigare, nu är det ett alias för :exc:`OSError`."

msgid "*codeset* parameter is removed."
msgstr "*parametern codeset* har tagits bort."

msgid ""
"This installs the function :func:`!_` in Python's builtins namespace, based "
"on *domain* and *localedir* which are passed to the function :func:"
"`translation`."
msgstr ""
"Detta installerar funktionen :func:`!_` i Pythons namnrymd för inbyggda "
"program, baserat på *domain* och *localedir* som skickas till funktionen :"
"func:`translation`."

msgid ""
"For the *names* parameter, please see the description of the translation "
"object's :meth:`~NullTranslations.install` method."
msgstr ""
"För parametern *names*, se beskrivningen av översättningsobjektets :meth:"
"`~NullTranslations.install`-metod."

msgid ""
"As seen below, you usually mark the strings in your application that are "
"candidates for translation, by wrapping them in a call to the :func:`!_` "
"function, like this::"
msgstr ""
"Som du ser nedan markerar du vanligtvis de strängar i din applikation som är "
"kandidater för översättning genom att linda in dem i ett anrop till :func:`!"
"_`-funktionen, så här::"

msgid "print(_('This string will be translated.'))"
msgstr "print(_('Den här strängen kommer att översättas.'))"

msgid ""
"For convenience, you want the :func:`!_` function to be installed in "
"Python's builtins namespace, so it is easily accessible in all modules of "
"your application."
msgstr ""
"För enkelhetens skull vill du att funktionen :func:`!_` installeras i "
"Pythons namnrymd för inbyggda funktioner, så att den är lättillgänglig i "
"alla moduler i din applikation."

msgid "*names* is now a keyword-only parameter."
msgstr "*names* är nu en parameter som endast innehåller nyckelord."

msgid "The :class:`NullTranslations` class"
msgstr "Klassen :class:`NullTranslations`"

msgid ""
"Translation classes are what actually implement the translation of original "
"source file message strings to translated message strings. The base class "
"used by all translation classes is :class:`NullTranslations`; this provides "
"the basic interface you can use to write your own specialized translation "
"classes.  Here are the methods of :class:`!NullTranslations`:"
msgstr ""
"Översättningsklasser är det som faktiskt implementerar översättningen av "
"originalfilens meddelandesträngar till översatta meddelandesträngar. "
"Basklassen som används av alla översättningsklasser är :class:"
"`NullTranslations`; detta ger det grundläggande gränssnittet som du kan "
"använda för att skriva dina egna specialiserade översättningsklasser.  Här "
"är metoderna i :class:`!NullTranslations`:"

msgid ""
"Takes an optional :term:`file object` *fp*, which is ignored by the base "
"class. Initializes \"protected\" instance variables *_info* and *_charset* "
"which are set by derived classes, as well as *_fallback*, which is set "
"through :meth:`add_fallback`.  It then calls ``self._parse(fp)`` if *fp* is "
"not ``None``."
msgstr ""
"Tar emot ett valfritt :term:`file object` *fp*, som ignoreras av basklassen. "
"Initialiserar \"skyddade\" instansvariabler *_info* och *_charset* som anges "
"av härledda klasser, samt *_fallback*, som anges genom :meth:"
"`add_fallback`.  Den anropar sedan ``self._parse(fp)`` om *fp* inte är "
"``None``."

msgid ""
"No-op in the base class, this method takes file object *fp*, and reads the "
"data from the file, initializing its message catalog.  If you have an "
"unsupported message catalog file format, you should override this method to "
"parse your format."
msgstr ""
"Denna metod, som inte finns i basklassen, tar filobjektet *fp* och läser "
"data från filen och initierar dess meddelandekatalog.  Om du har ett "
"filformat för meddelandekatalogen som inte stöds bör du åsidosätta den här "
"metoden för att tolka ditt format."

msgid ""
"Add *fallback* as the fallback object for the current translation object. A "
"translation object should consult the fallback if it cannot provide a "
"translation for a given message."
msgstr ""
"Lägg till *fallback* som fallback-objekt för det aktuella "
"översättningsobjektet. Ett översättningsobjekt bör konsultera fallbacken om "
"det inte kan tillhandahålla en översättning för ett visst meddelande."

msgid ""
"If a fallback has been set, forward :meth:`!gettext` to the fallback. "
"Otherwise, return *message*.  Overridden in derived classes."
msgstr ""
"Om en fallback har angetts, vidarebefordra :meth:`!gettext` till fallbacken. "
"Annars returneras *message*.  Åsidosatt i härledda klasser."

msgid ""
"If a fallback has been set, forward :meth:`!ngettext` to the fallback. "
"Otherwise, return *singular* if *n* is 1; return *plural* otherwise. "
"Overridden in derived classes."
msgstr ""
"Om en fallback har angetts, vidarebefordra :meth:`!ngettext` till "
"fallbacken. Annars returneras *singular* om *n* är 1; annars returneras "
"*plural*. Åsidosatt i härledda klasser."

msgid ""
"If a fallback has been set, forward :meth:`pgettext` to the fallback. "
"Otherwise, return the translated message.  Overridden in derived classes."
msgstr ""
"Om en fallback har angetts, vidarebefordra :meth:`pgettext` till fallbacken. "
"Annars returneras det översatta meddelandet.  Åsidosatt i härledda klasser."

msgid ""
"If a fallback has been set, forward :meth:`npgettext` to the fallback. "
"Otherwise, return the translated message.  Overridden in derived classes."
msgstr ""
"Om en fallback har angetts, vidarebefordra :meth:`npgettext` till "
"fallbacken. Annars returneras det översatta meddelandet.  Överskriven i "
"härledda klasser."

msgid ""
"Return a dictionary containing the metadata found in the message catalog "
"file."
msgstr ""
"Returnerar en ordbok som innehåller de metadata som finns i "
"meddelandekatalogfilen."

msgid "Return the encoding of the message catalog file."
msgstr "Returnera kodningen för filen med meddelandekatalogen."

msgid ""
"This method installs :meth:`.gettext` into the built-in namespace, binding "
"it to ``_``."
msgstr ""
"Denna metod installerar :meth:`.gettext` i den inbyggda namnrymden och "
"binder den till ``_``."

msgid ""
"If the *names* parameter is given, it must be a sequence containing the "
"names of functions you want to install in the builtins namespace in addition "
"to :func:`!_`.  Supported names are ``'gettext'``, ``'ngettext'``, "
"``'pgettext'``, and ``'npgettext'``."
msgstr ""
"Om parametern *names* anges måste den vara en sekvens som innehåller namnen "
"på de funktioner som du vill installera i namnrymden för builtins utöver :"
"func:`!_`.  Namn som stöds är ``'gettext'``, ``'ngettext'``, ``'pgettext'`` "
"och ``'npgettext'``."

msgid ""
"Note that this is only one way, albeit the most convenient way, to make the :"
"func:`!_` function available to your application.  Because it affects the "
"entire application globally, and specifically the built-in namespace, "
"localized modules should never install :func:`!_`. Instead, they should use "
"this code to make :func:`!_` available to their module::"
msgstr ""
"Observera att det här bara är ett sätt, om än det mest praktiska, att göra "
"funktionen :func:`!_` tillgänglig för ditt program.  Eftersom den påverkar "
"hela applikationen globalt, och särskilt det inbyggda namnområdet, bör "
"lokaliserade moduler aldrig installera :func:`!_`. Istället bör de använda "
"den här koden för att göra :func:`!_` tillgänglig för sin modul:"

msgid ""
"import gettext\n"
"t = gettext.translation('mymodule', ...)\n"
"_ = t.gettext"
msgstr ""
"import gettext\n"
"t = gettext.translation('mymodule', ...)\n"
"_ = t.gettext"

msgid ""
"This puts :func:`!_` only in the module's global namespace and so only "
"affects calls within this module."
msgstr ""
"Detta placerar :func:`!_` endast i modulens globala namnrymd och påverkar "
"därför endast anrop inom denna modul."

msgid "Added ``'pgettext'`` and ``'npgettext'``."
msgstr "Lagt till ``'pgettext'`` och ``'npgettext'``."

msgid "The :class:`GNUTranslations` class"
msgstr "Klassen :class:`GNUTranslations`"

msgid ""
"The :mod:`!gettext` module provides one additional class derived from :class:"
"`NullTranslations`: :class:`GNUTranslations`.  This class overrides :meth:`!"
"_parse` to enable reading GNU :program:`gettext` format :file:`.mo` files in "
"both big-endian and little-endian format."
msgstr ""
"Modulen :mod:`!gettext` tillhandahåller ytterligare en klass härledd från :"
"class:`NullTranslations`: :class:`GNUTranslations`.  Denna klass "
"åsidosätter :meth:`!_parse` för att möjliggöra läsning av GNU :program:"
"`gettext` format :file:`.mo` filer i både big-endian och little-endian "
"format."

msgid ""
":class:`GNUTranslations` parses optional metadata out of the translation "
"catalog. It is convention with GNU :program:`gettext` to include metadata as "
"the translation for the empty string. This metadata is in :rfc:`822`\\ -"
"style ``key: value`` pairs, and should contain the ``Project-Id-Version`` "
"key.  If the key ``Content-Type`` is found, then the ``charset`` property is "
"used to initialize the \"protected\" :attr:`!_charset` instance variable, "
"defaulting to ``None`` if not found.  If the charset encoding is specified, "
"then all message ids and message strings read from the catalog are converted "
"to Unicode using this encoding, else ASCII is assumed."
msgstr ""
":class:`GNUTranslations` analyserar valfria metadata från "
"översättningskatalogen. Det är konvention med GNU :program:`gettext` att "
"inkludera metadata som översättning för den tomma strängen. Dessa metadata "
"är i :rfc:`822`` -stil ``nyckel: värde``-par, och bör innehålla nyckeln "
"``Project-Id-Version``.  Om nyckeln ``Content-Type`` hittas, används "
"egenskapen ``charset`` för att initiera den \"skyddade\" :attr:`!_charset`-"
"instansvariabeln, som standard till ``None`` om den inte hittas.  Om "
"kodningen charset anges konverteras alla meddelande-id och "
"meddelandesträngar som läses från katalogen till Unicode med hjälp av denna "
"kodning, annars antas ASCII."

msgid ""
"Since message ids are read as Unicode strings too, all ``*gettext()`` "
"methods will assume message ids as Unicode strings, not byte strings."
msgstr ""
"Eftersom meddelande-id:n också läses som Unicode-strängar kommer alla "
"``*gettext()``-metoder att anta att meddelande-id:n är Unicode-strängar, "
"inte byte-strängar."

msgid ""
"The entire set of key/value pairs are placed into a dictionary and set as "
"the \"protected\" :attr:`!_info` instance variable."
msgstr ""
"Hela uppsättningen nyckel-/värdepar placeras i en ordbok och anges som den "
"\"skyddade\" instansvariabeln :attr:`!_info`."

msgid ""
"If the :file:`.mo` file's magic number is invalid, the major version number "
"is unexpected, or if other problems occur while reading the file, "
"instantiating a :class:`GNUTranslations` class can raise :exc:`OSError`."
msgstr ""
"Om :file:`.mo`-filens magiska nummer är ogiltigt, det stora versionsnumret "
"är oväntat, eller om andra problem uppstår när filen läses, kan "
"instansiering av en :class:`GNUTranslations`-klass ge upphov till :exc:"
"`OSError`."

msgid ""
"The following methods are overridden from the base class implementation:"
msgstr "Följande metoder åsidosätts från basklassens implementation:"

msgid ""
"Look up the *message* id in the catalog and return the corresponding message "
"string, as a Unicode string.  If there is no entry in the catalog for the "
"*message* id, and a fallback has been set, the look up is forwarded to the "
"fallback's :meth:`~NullTranslations.gettext` method.  Otherwise, the "
"*message* id is returned."
msgstr ""
"Letar upp *message*-id i katalogen och returnerar motsvarande "
"meddelandesträng som en Unicode-sträng.  Om det inte finns någon post i "
"katalogen för *message*-id och en reserv har angetts, vidarebefordras "
"sökningen till reservens :meth:`~NullTranslations.gettext`-metod.  I annat "
"fall returneras id:t för *message*."

msgid ""
"Do a plural-forms lookup of a message id.  *singular* is used as the message "
"id for purposes of lookup in the catalog, while *n* is used to determine "
"which plural form to use.  The returned message string is a Unicode string."
msgstr ""
"Gör en pluralformsuppslagning av ett meddelande-id.  *singular* används som "
"meddelandets id vid uppslagning i katalogen, medan *n* används för att "
"avgöra vilken pluralform som ska användas.  Den returnerade "
"meddelandesträngen är en Unicode-sträng."

msgid ""
"If the message id is not found in the catalog, and a fallback is specified, "
"the request is forwarded to the fallback's :meth:`~NullTranslations."
"ngettext` method.  Otherwise, when *n* is 1 *singular* is returned, and "
"*plural* is returned in all other cases."
msgstr ""
"Om meddelandets id inte finns i katalogen och en reserv anges, "
"vidarebefordras begäran till reservens :meth:`~NullTranslations.ngettext`-"
"metod.  Annars returneras *singular* när *n* är 1, och *plural* returneras i "
"alla andra fall."

msgid "Here is an example::"
msgstr "Här är ett exempel::"

msgid ""
"n = len(os.listdir('.'))\n"
"cat = GNUTranslations(somefile)\n"
"message = cat.ngettext(\n"
"    'There is %(num)d file in this directory',\n"
"    'There are %(num)d files in this directory',\n"
"    n) % {'num': n}"
msgstr ""
"n = len(os.listdir('.'))\n"
"cat = GNUTranslations(somefile)\n"
"message = cat.ngettext(\n"
"    'There is %(num)d file in this directory',\n"
"    'There are %(num)d files in this directory',\n"
"    n) % {'num': n}"

msgid ""
"Look up the *context* and *message* id in the catalog and return the "
"corresponding message string, as a Unicode string.  If there is no entry in "
"the catalog for the *message* id and *context*, and a fallback has been set, "
"the look up is forwarded to the fallback's :meth:`pgettext` method.  "
"Otherwise, the *message* id is returned."
msgstr ""
"Letar upp *context* och *message* id i katalogen och returnerar motsvarande "
"meddelandesträng som en Unicode-sträng.  Om det inte finns någon post i "
"katalogen för *message* id och *context*, och en fallback har angetts, "
"vidarebefordras sökningen till fallbackens :meth:`pgettext`-metod.  Annars "
"returneras *message* id."

msgid ""
"Do a plural-forms lookup of a message id.  *singular* is used as the message "
"id for purposes of lookup in the catalog, while *n* is used to determine "
"which plural form to use."
msgstr ""
"Gör en pluralformsuppslagning av ett meddelande-id.  *singular* används som "
"meddelandets id vid uppslagning i katalogen, medan *n* används för att "
"avgöra vilken pluralform som ska användas."

msgid ""
"If the message id for *context* is not found in the catalog, and a fallback "
"is specified, the request is forwarded to the fallback's :meth:`npgettext` "
"method.  Otherwise, when *n* is 1 *singular* is returned, and *plural* is "
"returned in all other cases."
msgstr ""
"Om meddelande-id för *kontext* inte finns i katalogen och en reserv anges, "
"vidarebefordras begäran till reservens :meth:`npgettext`-metod.  Annars "
"returneras *singular* när *n* är 1, och *plural* returneras i alla andra "
"fall."

msgid "Solaris message catalog support"
msgstr "Stöd för Solaris meddelandekatalog"

msgid ""
"The Solaris operating system defines its own binary :file:`.mo` file format, "
"but since no documentation can be found on this format, it is not supported "
"at this time."
msgstr ""
"Operativsystemet Solaris definierar sitt eget binära filformat :file:`.mo`, "
"men eftersom det inte finns någon dokumentation om detta format stöds det "
"inte för närvarande."

msgid "The Catalog constructor"
msgstr "Katalogens konstruktör"

msgid ""
"GNOME uses a version of the :mod:`gettext` module by James Henstridge, but "
"this version has a slightly different API.  Its documented usage was::"
msgstr ""
"GNOME använder en version av modulen :mod:`gettext` av James Henstridge, men "
"denna version har ett något annorlunda API.  Dess dokumenterade användning "
"var::"

msgid ""
"import gettext\n"
"cat = gettext.Catalog(domain, localedir)\n"
"_ = cat.gettext\n"
"print(_('hello world'))"
msgstr ""
"import gettext\n"
"cat = gettext.Catalog(domain, localedir)\n"
"_ = cat.gettext\n"
"print(_('hello world'))"

msgid ""
"For compatibility with this older module, the function :func:`!Catalog` is "
"an alias for the :func:`translation` function described above."
msgstr ""
"För kompatibilitet med denna äldre modul är funktionen :func:`!Catalog` ett "
"alias för funktionen :func:`translation` som beskrivs ovan."

msgid ""
"One difference between this module and Henstridge's: his catalog objects "
"supported access through a mapping API, but this appears to be unused and so "
"is not currently supported."
msgstr ""
"En skillnad mellan denna modul och Henstridges: hans katalogobjekt stödde "
"åtkomst via ett mappnings-API, men detta verkar vara oanvänt och stöds "
"därför inte för närvarande."

msgid "Internationalizing your programs and modules"
msgstr "Internationalisera dina program och moduler"

msgid ""
"Internationalization (I18N) refers to the operation by which a program is "
"made aware of multiple languages.  Localization (L10N) refers to the "
"adaptation of your program, once internationalized, to the local language "
"and cultural habits. In order to provide multilingual messages for your "
"Python programs, you need to take the following steps:"
msgstr ""
"Internationalisering (I18N) avser den process genom vilken ett program görs "
"medvetet om att det kan användas på flera språk.  Lokalisering (L10N) avser "
"anpassningen av ditt program, när det väl har internationaliserats, till det "
"lokala språket och kulturella vanor. För att kunna tillhandahålla "
"flerspråkiga meddelanden för dina Python-program måste du vidta följande "
"åtgärder:"

msgid ""
"prepare your program or module by specially marking translatable strings"
msgstr ""
"förbereda ditt program eller din modul genom att särskilt markera "
"översättningsbara strängar"

msgid ""
"run a suite of tools over your marked files to generate raw messages catalogs"
msgstr ""
"köra en uppsättning verktyg över dina markerade filer för att generera "
"kataloger över råmeddelanden"

msgid "create language-specific translations of the message catalogs"
msgstr "skapa språkspecifika översättningar av meddelandekatalogerna"

msgid ""
"use the :mod:`gettext` module so that message strings are properly translated"
msgstr ""
"använda modulen :mod:`gettext` så att meddelandesträngar översätts korrekt"

msgid ""
"In order to prepare your code for I18N, you need to look at all the strings "
"in your files.  Any string that needs to be translated should be marked by "
"wrapping it in ``_('...')`` --- that is, a call to the function :func:`_ "
"<gettext>`.  For example::"
msgstr ""
"För att förbereda din kod för I18N måste du titta på alla strängar i dina "
"filer.  Varje sträng som behöver översättas bör markeras genom att den "
"omsluts av ``_('...')`` --- det vill säga ett anrop till funktionen :func:`_ "
"<gettext>`.  Till exempel::"

msgid ""
"filename = 'mylog.txt'\n"
"message = _('writing a log message')\n"
"with open(filename, 'w') as fp:\n"
"    fp.write(message)"
msgstr ""
"filename = 'mylog.txt'\n"
"message = _('writing a log message')\n"
"with open(filename, 'w') as fp:\n"
"    fp.write(message)"

msgid ""
"In this example, the string ``'writing a log message'`` is marked as a "
"candidate for translation, while the strings ``'mylog.txt'`` and ``'w'`` are "
"not."
msgstr ""
"I det här exemplet markeras strängen ``'writing a log message'`` som en "
"kandidat för översättning, medan strängarna ``'mylog.txt'`` och ``'w'`` inte "
"gör det."

msgid ""
"There are a few tools to extract the strings meant for translation. The "
"original GNU :program:`gettext` only supported C or C++ source code but its "
"extended version :program:`xgettext` scans code written in a number of "
"languages, including Python, to find strings marked as translatable.  `Babel "
"<https://babel.pocoo.org/>`__ is a Python internationalization library that "
"includes a :file:`pybabel` script to extract and compile message catalogs.  "
"François Pinard's program called :program:`xpot` does a similar job and is "
"available as part of his `po-utils package <https://github.com/pinard/po-"
"utils>`__."
msgstr ""
"Det finns ett par verktyg för att extrahera de strängar som är avsedda för "
"översättning. GNU:s ursprungliga :program:`gettext` stödde endast C- eller C+"
"+-källkod, men dess utökade version :program:`xgettext` skannar kod skriven "
"i ett antal språk, inklusive Python, för att hitta strängar som markerats "
"som översättningsbara.  `Babel <https://babel.pocoo.org/>`__ är ett "
"internationaliseringsbibliotek för Python som innehåller ett :file:`pybabel`-"
"skript för att extrahera och sammanställa meddelandekataloger.  François "
"Pinards program som heter :program:`xpot` gör ett liknande jobb och finns "
"tillgängligt som en del av hans `po-utils-paket <https://github.com/pinard/"
"po-utils>`__."

msgid ""
"(Python also includes pure-Python versions of these programs, called :"
"program:`pygettext.py` and :program:`msgfmt.py`; some Python distributions "
"will install them for you.  :program:`pygettext.py` is similar to :program:"
"`xgettext`, but only understands Python source code and cannot handle other "
"programming languages such as C or C++. :program:`pygettext.py` supports a "
"command-line interface similar to :program:`xgettext`; for details on its "
"use, run ``pygettext.py --help``.  :program:`msgfmt.py` is binary compatible "
"with GNU :program:`msgfmt`.  With these two programs, you may not need the "
"GNU :program:`gettext` package to internationalize your Python applications.)"
msgstr ""
"(Python innehåller också rena Python-versioner av dessa program, kallade :"
"program:`pygettext.py` och :program:`msgfmt.py`; vissa Python-distributioner "
"installerar dem åt dig. :program:`pygettext.py` liknar :program:`xgettext`, "
"men förstår bara Python-källkod och kan inte hantera andra "
"programmeringsspråk som C eller C++. :program:`pygettext.py` stöder ett "
"kommandoradsgränssnitt som liknar :program:`xgettext`; för detaljer om hur "
"det används, kör ``pygettext.py --help``. :program:`msgfmt.py` är binärt "
"kompatibelt med GNU :program:`msgfmt`.  Med dessa två program behöver du "
"kanske inte GNU :program:`gettext`-paketet för att internationalisera dina "
"Python-program)"

msgid ""
":program:`xgettext`, :program:`pygettext`, and similar tools generate :file:"
"`.po` files that are message catalogs.  They are structured human-readable "
"files that contain every marked string in the source code, along with a "
"placeholder for the translated versions of these strings."
msgstr ""
":program:`xgettext`, :program:`pygettext` och liknande verktyg genererar :"
"file:`.po`-filer som är meddelandekataloger.  De är strukturerade, läsbara "
"filer som innehåller alla markerade strängar i källkoden, tillsammans med en "
"platshållare för de översatta versionerna av dessa strängar."

msgid ""
"Copies of these :file:`.po` files are then handed over to the individual "
"human translators who write translations for every supported natural "
"language.  They send back the completed language-specific versions as a :"
"file:`<language-name>.po` file that's compiled into a machine-readable :file:"
"`.mo` binary catalog file using the :program:`msgfmt` program.  The :file:`."
"mo` files are used by the :mod:`gettext` module for the actual translation "
"processing at run-time."
msgstr ""
"Kopior av dessa :file:`.po`-filer överlämnas sedan till de enskilda "
"mänskliga översättarna som skriver översättningar för varje naturligt språk "
"som stöds.  De skickar tillbaka de färdiga språkspecifika versionerna som "
"en :file:`<language-name>.po`-fil som sammanställs till en maskinläsbar :"
"file:`.mo` binär katalogfil med hjälp av programmet :program:`msgfmt`.  "
"Filerna :file:`.mo` används av modulen :mod:`gettext` för den faktiska "
"översättningsbearbetningen vid körning."

msgid ""
"How you use the :mod:`gettext` module in your code depends on whether you "
"are internationalizing a single module or your entire application. The next "
"two sections will discuss each case."
msgstr ""
"Hur du använder modulen :mod:`gettext` i din kod beror på om du "
"internationaliserar en enskild modul eller hela programmet. De kommande två "
"avsnitten kommer att diskutera varje fall."

msgid "Localizing your module"
msgstr "Lokalisera din modul"

msgid ""
"If you are localizing your module, you must take care not to make global "
"changes, e.g. to the built-in namespace. You should not use the GNU :program:"
"`gettext` API but instead the class-based API."
msgstr ""
"Om du lokaliserar din modul måste du se till att inte göra globala "
"ändringar, t.ex. i det inbyggda namnområdet. Du bör inte använda GNU :"
"program:`gettext` API utan istället det klassbaserade API:et."

msgid ""
"Let's say your module is called \"spam\" and the module's various natural "
"language translation :file:`.mo` files reside in :file:`/usr/share/locale` "
"in GNU :program:`gettext` format.  Here's what you would put at the top of "
"your module::"
msgstr ""
"Låt oss säga att din modul heter \"spam\" och modulens olika översättningar "
"av naturligt språk :file:`.mo`-filer finns i :file:`/usr/share/locale` i "
"GNU :program:`gettext`-format.  Så här skulle du skriva högst upp i din "
"modul::"

msgid ""
"import gettext\n"
"t = gettext.translation('spam', '/usr/share/locale')\n"
"_ = t.gettext"
msgstr ""
"import gettext\n"
"t = gettext.translation('spam', '/usr/share/locale')\n"
"_ = t.gettext"

msgid "Localizing your application"
msgstr "Lokalisera din applikation"

msgid ""
"If you are localizing your application, you can install the :func:`!_` "
"function globally into the built-in namespace, usually in the main driver "
"file of your application.  This will let all your application-specific files "
"just use ``_('...')`` without having to explicitly install it in each file."
msgstr ""
"Om du lokaliserar ditt program kan du installera :func:`!_`-funktionen "
"globalt i det inbyggda namnområdet, vanligtvis i programmets "
"huvuddrivrutinsfil.  Detta gör att alla dina applikationsspecifika filer "
"bara använder ``_('...') `` utan att du uttryckligen behöver installera den "
"i varje fil."

msgid ""
"In the simple case then, you need only add the following bit of code to the "
"main driver file of your application::"
msgstr ""
"I det enkla fallet behöver du bara lägga till följande kod i "
"huvuddrivrutinsfilen för din applikation::"

msgid ""
"import gettext\n"
"gettext.install('myapplication')"
msgstr ""
"import gettext\n"
"gettext.install('myapplication')"

msgid ""
"If you need to set the locale directory, you can pass it into the :func:"
"`install` function::"
msgstr ""
"Om du behöver ange locale-katalogen kan du skicka den till funktionen :func:"
"`install`::"

msgid ""
"import gettext\n"
"gettext.install('myapplication', '/usr/share/locale')"
msgstr ""
"import gettext\n"
"gettext.install('myapplication', '/usr/share/locale')"

msgid "Changing languages on the fly"
msgstr "Byta språk i farten"

msgid ""
"If your program needs to support many languages at the same time, you may "
"want to create multiple translation instances and then switch between them "
"explicitly, like so::"
msgstr ""
"Om ditt program behöver stödja många språk samtidigt kanske du vill skapa "
"flera översättningsinstanser och sedan växla mellan dem uttryckligen, så "
"här::"

msgid ""
"import gettext\n"
"\n"
"lang1 = gettext.translation('myapplication', languages=['en'])\n"
"lang2 = gettext.translation('myapplication', languages=['fr'])\n"
"lang3 = gettext.translation('myapplication', languages=['de'])\n"
"\n"
"# start by using language1\n"
"lang1.install()\n"
"\n"
"# ... time goes by, user selects language 2\n"
"lang2.install()\n"
"\n"
"# ... more time goes by, user selects language 3\n"
"lang3.install()"
msgstr ""
"import gettext\n"
"\n"
"lang1 = gettext.translation('myapplication', languages=['en'])\n"
"lang2 = gettext.translation('myapplication', languages=['fr'])\n"
"lang3 = gettext.translation('myapplication', languages=['de'])\n"
"\n"
"# start by using language1\n"
"lang1.install()\n"
"\n"
"# ... time goes by, user selects language 2\n"
"lang2.install()\n"
"\n"
"# ... more time goes by, user selects language 3\n"
"lang3.install()"

msgid "Deferred translations"
msgstr "Uppskjutna omräkningar"

msgid ""
"In most coding situations, strings are translated where they are coded. "
"Occasionally however, you need to mark strings for translation, but defer "
"actual translation until later.  A classic example is::"
msgstr ""
"I de flesta kodningssituationer översätts strängar där de kodas. Ibland "
"behöver du dock markera strängar för översättning, men skjuta upp den "
"faktiska översättningen till senare.  Ett klassiskt exempel är::"

msgid ""
"animals = ['mollusk',\n"
"           'albatross',\n"
"           'rat',\n"
"           'penguin',\n"
"           'python', ]\n"
"# ...\n"
"for a in animals:\n"
"    print(a)"
msgstr ""
"animals = ['mollusk',\n"
"           'albatross',\n"
"           'rat',\n"
"           'penguin',\n"
"           'python', ]\n"
"# ...\n"
"for a in animals:\n"
"    print(a)"

msgid ""
"Here, you want to mark the strings in the ``animals`` list as being "
"translatable, but you don't actually want to translate them until they are "
"printed."
msgstr ""
"Här vill du markera strängarna i listan ``djur`` som översättningsbara, men "
"du vill faktiskt inte översätta dem förrän de skrivs ut."

msgid "Here is one way you can handle this situation::"
msgstr "Här är ett sätt du kan hantera denna situation::"

msgid ""
"def _(message): return message\n"
"\n"
"animals = [_('mollusk'),\n"
"           _('albatross'),\n"
"           _('rat'),\n"
"           _('penguin'),\n"
"           _('python'), ]\n"
"\n"
"del _\n"
"\n"
"# ...\n"
"for a in animals:\n"
"    print(_(a))"
msgstr ""
"def _(message): return message\n"
"\n"
"animals = [_('mollusk'),\n"
"           _('albatross'),\n"
"           _('rat'),\n"
"           _('penguin'),\n"
"           _('python'), ]\n"
"\n"
"del _\n"
"\n"
"# ...\n"
"for a in animals:\n"
"    print(_(a))"

msgid ""
"This works because the dummy definition of :func:`!_` simply returns the "
"string unchanged.  And this dummy definition will temporarily override any "
"definition of :func:`!_` in the built-in namespace (until the :keyword:`del` "
"command). Take care, though if you have a previous definition of :func:`!_` "
"in the local namespace."
msgstr ""
"Detta fungerar eftersom dummydefinitionen av :func:`!_` helt enkelt "
"returnerar strängen oförändrad.  Och denna dummydefinition kommer "
"tillfälligt att åsidosätta alla definitioner av :func:`!_` i den inbyggda "
"namnrymden (fram till kommandot :keyword:`del`). Var dock försiktig om du "
"har en tidigare definition av :func:`!_` i den lokala namnrymden."

msgid ""
"Note that the second use of :func:`!_` will not identify \"a\" as being "
"translatable to the :program:`gettext` program, because the parameter is not "
"a string literal."
msgstr ""
"Observera att den andra användningen av :func:`!_` inte identifierar \"a\" "
"som översättningsbart till programmet :program:`gettext`, eftersom "
"parametern inte är en bokstavlig sträng."

msgid "Another way to handle this is with the following example::"
msgstr "Ett annat sätt att hantera detta är med följande exempel::"

msgid ""
"def N_(message): return message\n"
"\n"
"animals = [N_('mollusk'),\n"
"           N_('albatross'),\n"
"           N_('rat'),\n"
"           N_('penguin'),\n"
"           N_('python'), ]\n"
"\n"
"# ...\n"
"for a in animals:\n"
"    print(_(a))"
msgstr ""
"def N_(message): return message\n"
"\n"
"animals = [N_('mollusk'),\n"
"           N_('albatross'),\n"
"           N_('rat'),\n"
"           N_('penguin'),\n"
"           N_('python'), ]\n"
"\n"
"# ...\n"
"for a in animals:\n"
"    print(_(a))"

msgid ""
"In this case, you are marking translatable strings with the function :func:`!"
"N_`, which won't conflict with any definition of :func:`!_`. However, you "
"will need to teach your message extraction program to look for translatable "
"strings marked with :func:`!N_`. :program:`xgettext`, :program:`pygettext`, "
"``pybabel extract``, and :program:`xpot` all support this through the use of "
"the :option:`!-k` command-line switch. The choice of :func:`!N_` here is "
"totally arbitrary; it could have just as easily been :func:`!"
"MarkThisStringForTranslation`."
msgstr ""
"I det här fallet markerar du översättningsbara strängar med funktionen :func:"
"`!N_`, vilket inte står i konflikt med någon definition av :func:`!_`. Du "
"måste dock lära ditt program för extrahering av meddelanden att leta efter "
"översättningsbara strängar markerade med :func:`!N_`. :program:`xgettext`, :"
"program:`pygettext`, ``pybabel extract`` och :program:`xpot` stöder alla "
"detta genom att använda kommandoradsalternativet :option:`!-k`. Valet av :"
"func:`!N_` här är helt godtyckligt; det kunde lika gärna ha varit :func:`!"
"MarkThisStringForTranslation`."

msgid "Acknowledgements"
msgstr "Tack till"

msgid ""
"The following people contributed code, feedback, design suggestions, "
"previous implementations, and valuable experience to the creation of this "
"module:"
msgstr ""
"Följande personer har bidragit med kod, feedback, designförslag, tidigare "
"implementeringar och värdefull erfarenhet för att skapa denna modul:"

msgid "Peter Funk"
msgstr "Peter Funk"

msgid "James Henstridge"
msgstr "James Henstridge"

msgid "Juan David Ibáñez Palomar"
msgstr "Juan David Ibáñez Palomar"

msgid "Marc-André Lemburg"
msgstr "Marc-André Lemburg"

msgid "Martin von Löwis"
msgstr "Martin von Löwis"

msgid "François Pinard"
msgstr "François Pinard"

msgid "Barry Warsaw"
msgstr "Barry Warsaw"

msgid "Gustavo Niemeyer"
msgstr "Gustavo Niemeyer"

msgid "Footnotes"
msgstr "Fotnoter"

msgid ""
"The default locale directory is system dependent; for example, on Red Hat "
"Linux it is :file:`/usr/share/locale`, but on Solaris it is :file:`/usr/lib/"
"locale`. The :mod:`!gettext` module does not try to support these system "
"dependent defaults; instead its default is :file:`{sys.base_prefix}/share/"
"locale` (see :data:`sys.base_prefix`). For this reason, it is always best to "
"call :func:`bindtextdomain` with an explicit absolute path at the start of "
"your application."
msgstr ""
"Standardkatalogen för locale är systemberoende; till exempel är den på Red "
"Hat Linux :file:`/usr/share/locale`, men på Solaris är den :file:`/usr/lib/"
"locale`. Modulen :mod:`!gettext` försöker inte stödja dessa systemberoende "
"standardinställningar, utan dess standardinställning är :file:`{sys."
"base_prefix}/share/locale` (se :data:`sys.base_prefix`). Av denna anledning "
"är det alltid bäst att anropa :func:`bindtextdomain` med en explicit absolut "
"sökväg i början av din applikation."

msgid "See the footnote for :func:`bindtextdomain` above."
msgstr "Se fotnoten för :func:`bindtextdomain` ovan."

msgid "_ (underscore)"
msgstr "_ (understreck)"

msgid "gettext"
msgstr "gettext"

msgid "GNOME"
msgstr "GNOME"
