# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's New In Python 3.0"
msgstr "Vad är nytt i Python 3.0"

msgid "Author"
msgstr "Författare"

msgid "Guido van Rossum"
msgstr "Guido van Rossum"

msgid ""
"This article explains the new features in Python 3.0, compared to 2.6. "
"Python 3.0, also known as \"Python 3000\" or \"Py3K\", is the first ever "
"*intentionally backwards incompatible* Python release. Python 3.0 was "
"released on December 3, 2008. There are more changes than in a typical "
"release, and more that are important for all Python users. Nevertheless, "
"after digesting the changes, you'll find that Python really hasn't changed "
"all that much -- by and large, we're mostly fixing well-known annoyances and "
"warts, and removing a lot of old cruft."
msgstr ""
"I den här artikeln förklaras de nya funktionerna i Python 3.0 jämfört med "
"2.6. Python 3.0, även känd som \"Python 3000\" eller \"Py3K\", är den första "
"någonsin *avsiktligt bakåtkompatibla* Python-versionen. Python 3.0 släpptes "
"den 3 december 2008. Det finns fler ändringar än i en vanlig version, och "
"fler som är viktiga för alla Python-användare. Ändå, efter att ha smält "
"förändringarna, kommer du att upptäcka att Python verkligen inte har "
"förändrats så mycket - i stort sett fixar vi mest välkända irritationer och "
"vårtor och tar bort en hel del gammal cruft."

msgid ""
"This article doesn't attempt to provide a complete specification of all new "
"features, but instead tries to give a convenient overview. For full details, "
"you should refer to the documentation for Python 3.0, and/or the many PEPs "
"referenced in the text. If you want to understand the complete "
"implementation and design rationale for a particular feature, PEPs usually "
"have more details than the regular documentation; but note that PEPs usually "
"are not kept up-to-date once a feature has been fully implemented."
msgstr ""
"Den här artikeln försöker inte ge en fullständig specifikation av alla nya "
"funktioner, utan försöker i stället ge en praktisk översikt. För fullständig "
"information hänvisas till dokumentationen för Python 3.0 och/eller de många "
"PEP:er som refereras till i texten. Om du vill förstå den fullständiga "
"implementeringen och designrationaliteten för en viss funktion, har PEPs "
"vanligtvis mer detaljer än den vanliga dokumentationen; men observera att "
"PEPs vanligtvis inte hålls uppdaterade när en funktion har implementerats "
"fullt ut."

msgid ""
"Due to time constraints this document is not as complete as it should have "
"been.  As always for a new release, the ``Misc/NEWS`` file in the source "
"distribution contains a wealth of detailed information about every small "
"thing that was changed."
msgstr ""
"På grund av tidsbrist är detta dokument inte så komplett som det borde ha "
"varit.  Som alltid när det gäller en ny version innehåller filen ``Misc/"
"NEWS`` i källdistributionen en mängd detaljerad information om varje liten "
"sak som har ändrats."

msgid "Common Stumbling Blocks"
msgstr "Vanliga stötestenar"

msgid ""
"This section lists those few changes that are most likely to trip you up if "
"you're used to Python 2.5."
msgstr ""
"I det här avsnittet listas de få ändringar som troligen kommer att göra dig "
"förvirrad om du är van vid Python 2.5."

msgid "Print Is A Function"
msgstr "Print är en funktion"

msgid ""
"The ``print`` statement has been replaced with a :func:`print` function, "
"with keyword arguments to replace most of the special syntax of the old "
"``print`` statement (:pep:`3105`).  Examples::"
msgstr ""
"``print``-satsen har ersatts med en :func:`print`-funktion, med "
"nyckelordsargument som ersätter det mesta av den speciella syntaxen i den "
"gamla ``print``-satsen (:pep:`3105`).  Exempel::"

msgid ""
"Old: print \"The answer is\", 2*2\n"
"New: print(\"The answer is\", 2*2)\n"
"\n"
"Old: print x,           # Trailing comma suppresses newline\n"
"New: print(x, end=\" \")  # Appends a space instead of a newline\n"
"\n"
"Old: print              # Prints a newline\n"
"New: print()            # You must call the function!\n"
"\n"
"Old: print >>sys.stderr, \"fatal error\"\n"
"New: print(\"fatal error\", file=sys.stderr)\n"
"\n"
"Old: print (x, y)       # prints repr((x, y))\n"
"New: print((x, y))      # Not the same as print(x, y)!"
msgstr ""
"Gammal: print \"Svaret är\", 2*2\n"
"Ny: print(\"Svaret är\", 2*2)\n"
"\n"
"Gammal: print x, # Efterföljande kommatecken undertrycker ny rad\n"
"Nytt: print(x, end=\" \") # Lägger till ett mellanslag istället för en ny "
"rad\n"
"\n"
"Gammal: print # Skriver ut en ny rad\n"
"Ny: print() # Du måste anropa funktionen!\n"
"\n"
"Gammal: print >>sys.stderr, \"fatalt fel\"\n"
"Ny: print(\"fatalt fel\", file=sys.stderr)\n"
"\n"
"Gammal: print (x, y) # printar repr((x, y))\n"
"Nytt: print((x, y)) # Inte samma sak som print(x, y)!"

msgid "You can also customize the separator between items, e.g.::"
msgstr "Du kan också anpassa avgränsningen mellan objekten, t.ex.::"

msgid "print(\"There are <\", 2**32, \"> possibilities!\", sep=\"\")"
msgstr "print(\"Det finns <\", 2**32, \"> möjligheter!\", sep=\"\")"

msgid "which produces:"
msgstr "som producerar:"

msgid "There are <4294967296> possibilities!"
msgstr "Det finns <4294967296> möjligheter!"

msgid "Note:"
msgstr "Anteckning:"

msgid ""
"The :func:`print` function doesn't support the \"softspace\" feature of the "
"old ``print`` statement.  For example, in Python 2.x, ``print \"A\\n\", "
"\"B\"`` would write ``\"A\\nB\\n\"``; but in Python 3.0, ``print(\"A\\n\", "
"\"B\")`` writes ``\"A\\n B\\n\"``."
msgstr ""
"Funktionen :func:`print` stöder inte \"softspace\"-funktionen i det gamla "
"``print``-slutsatsen.  Till exempel, i Python 2.x, skulle ``print \"A\\n\", "
"\"B\"`` skriva ``\"A\\nB\\n\"``; men i Python 3.0, ``print(\"A\\n\", "
"\"B\")`` skriver ``\"A\\n B\\n\"``."

msgid ""
"Initially, you'll be finding yourself typing the old ``print x`` a lot in "
"interactive mode.  Time to retrain your fingers to type ``print(x)`` instead!"
msgstr ""
"Till en början kommer du att skriva det gamla ``print x`` ofta i interaktivt "
"läge.  Dags att lära om fingrarna till att skriva ``print(x)`` istället!"

msgid ""
"When using the ``2to3`` source-to-source conversion tool, all ``print`` "
"statements are automatically converted to :func:`print` function calls, so "
"this is mostly a non-issue for larger projects."
msgstr ""
"När du använder konverteringsverktyget ``2to3`` från källa till källa "
"konverteras alla ``print``-satser automatiskt till :func:`print`-"
"funktionsanrop, så detta är oftast en icke-fråga för större projekt."

msgid "Views And Iterators Instead Of Lists"
msgstr "Vyer och iteratorer istället för listor"

msgid "Some well-known APIs no longer return lists:"
msgstr "Vissa välkända API:er returnerar inte längre listor:"

msgid ""
":class:`dict` methods :meth:`dict.keys`, :meth:`dict.items` and :meth:`dict."
"values` return \"views\" instead of lists.  For example, this no longer "
"works: ``k = d.keys(); k.sort()``.  Use ``k = sorted(d)`` instead (this "
"works in Python 2.5 too and is just as efficient)."
msgstr ""
":class:`dict`-metoderna :meth:`dict.keys`, :meth:`dict.items` och :meth:"
"`dict.values` returnerar \"views\" istället för listor.  Till exempel "
"fungerar inte detta längre: ``k = d.keys(); k.sort()``.  Använd ``k = "
"sorted(d)`` istället (detta fungerar även i Python 2.5 och är lika "
"effektivt)."

msgid ""
"Also, the :meth:`!dict.iterkeys`, :meth:`!dict.iteritems` and :meth:`!dict."
"itervalues` methods are no longer supported."
msgstr ""
"Dessutom stöds inte längre metoderna :meth:`!dict.iterkeys`, :meth:`!dict."
"iteritems` och :meth:`!dict.itervalues`."

msgid ""
":func:`map` and :func:`filter` return iterators.  If you really need a list "
"and the input sequences are all of equal length, a quick fix is to wrap :"
"func:`map` in :func:`list`, e.g. ``list(map(...))``, but a better fix is "
"often to use a list comprehension (especially when the original code uses :"
"keyword:`lambda`), or rewriting the code so it doesn't need a list at all.  "
"Particularly tricky is :func:`map` invoked for the side effects of the "
"function; the correct transformation is to use a regular :keyword:`for` loop "
"(since creating a list would just be wasteful)."
msgstr ""
":func:`map` och :func:`filter` returnerar iteratorer.  Om du verkligen "
"behöver en lista och indatasekvenserna alla är lika långa, är en snabb "
"lösning att linda in :func:`map` i :func:`list`, t.ex. ``list(map(...))``, "
"men en bättre lösning är ofta att använda en listförståelse (speciellt när "
"den ursprungliga koden använder :keyword:`lambda`), eller att skriva om "
"koden så att den inte behöver en lista alls.  Särskilt knepigt är :func:"
"`map` som används för funktionens bieffekter; den korrekta transformationen "
"är att använda en vanlig :keyword:`for`-loop (eftersom det bara skulle vara "
"slöseri att skapa en lista)."

msgid ""
"If the input sequences are not of equal length, :func:`map` will stop at the "
"termination of the shortest of the sequences. For full compatibility with :"
"func:`map` from Python 2.x, also wrap the sequences in :func:`itertools."
"zip_longest`, e.g. ``map(func, *sequences)`` becomes ``list(map(func, "
"itertools.zip_longest(*sequences)))``."
msgstr ""
"Om indatasekvenserna inte är lika långa kommer :func:`map` att stanna vid "
"slutet av den kortaste av sekvenserna. För full kompatibilitet med :func:"
"`map` från Python 2.x, linda även in sekvenserna i :func:`itertools."
"zip_longest`, t.ex. ``map(func, *sequences)`` blir ``list(map(func, "
"itertools.zip_longest(*sequences)))``."

msgid ""
":func:`range` now behaves like :func:`!xrange` used to behave, except it "
"works with values of arbitrary size.  The latter no longer exists."
msgstr ""
":func:`range` beter sig nu som :func:`!xrange` brukade bete sig, förutom att "
"den fungerar med värden av godtycklig storlek.  Den senare finns inte längre."

msgid ":func:`zip` now returns an iterator."
msgstr ":func:`zip` returnerar nu en iterator."

msgid "Ordering Comparisons"
msgstr "Beställning av jämförelser"

msgid "Python 3.0 has simplified the rules for ordering comparisons:"
msgstr "Python 3.0 har förenklat reglerna för att beställa jämförelser:"

msgid ""
"The ordering comparison operators (``<``, ``<=``, ``>=``, ``>``) raise a "
"TypeError exception when the operands don't have a meaningful natural "
"ordering.  Thus, expressions like ``1 < ''``, ``0 > None`` or ``len <= len`` "
"are no longer valid, and e.g. ``None < None`` raises :exc:`TypeError` "
"instead of returning ``False``.  A corollary is that sorting a heterogeneous "
"list no longer makes sense -- all the elements must be comparable to each "
"other.  Note that this does not apply to the ``==`` and ``!=`` operators: "
"objects of different incomparable types always compare unequal to each other."
msgstr ""
"Jämförelseoperatorerna för ordningsföljd (``<``, ``<=``, ``>=``, ``>``) ger "
"upphov till ett TypeError-undantag när operanderna inte har en meningsfull "
"naturlig ordningsföljd.  Således är uttryck som ``1 < ''``, ``0 > None`` "
"eller ``len <= len`` inte längre giltiga, och t.ex. ``None < None`` ger "
"upphov till :exc:`TypeError` istället för att returnera ``False``.  En följd "
"av detta är att det inte längre är meningsfullt att sortera en heterogen "
"lista -- alla element måste vara jämförbara med varandra.  Observera att "
"detta inte gäller för operatorerna ``==`` och ``!=``: objekt av olika "
"ojämförbara typer jämförs alltid ojämlikt med varandra."

msgid ""
":meth:`sorted` and :meth:`list.sort` no longer accept the *cmp* argument "
"providing a comparison function.  Use the *key* argument instead. N.B. the "
"*key* and *reverse* arguments are now \"keyword-only\"."
msgstr ""
":meth:`sorted` och :meth:`list.sort` accepterar inte längre *cmp*-argumentet "
"som ger en jämförelsefunktion.  Använd *key*-argumentet istället. OBS: "
"Argumenten *key* och *reverse* är nu \"endast nyckelord\"."

msgid ""
"The :func:`!cmp` function should be treated as gone, and the :meth:`!"
"__cmp__` special method is no longer supported.  Use :meth:`~object.__lt__` "
"for sorting, :meth:`~object.__eq__` with :meth:`~object.__hash__`, and other "
"rich comparisons as needed. (If you really need the :func:`!cmp` "
"functionality, you could use the expression ``(a > b) - (a < b)`` as the "
"equivalent for ``cmp(a, b)``.)"
msgstr ""
"Funktionen :func:`!cmp` bör betraktas som borta, och specialmetoden :meth:`!"
"__cmp__` stöds inte längre.  Använd :meth:`~object.__lt__` för sortering, :"
"meth:`~object.__eq__` med :meth:`~object.__hash__` och andra jämförelser "
"efter behov. (Om du verkligen behöver :func:`!cmp`-funktionaliteten kan du "
"använda uttrycket ``(a > b) - (a < b)`` som motsvarighet till ``cmp(a, b)``)"

msgid "Integers"
msgstr "Heltal"

msgid ""
":pep:`237`: Essentially, :class:`!long` renamed to :class:`int`. That is, "
"there is only one built-in integral type, named :class:`int`; but it behaves "
"mostly like the old :class:`!long` type."
msgstr ""
":pep:`237`: I huvudsak har :class:`!long` bytt namn till :class:`int`. Det "
"vill säga, det finns bara en inbyggd integraltyp, som heter :class:`int`; "
"men den beter sig mestadels som den gamla :class:`!long`-typen."

msgid ""
":pep:`238`: An expression like ``1/2`` returns a float.  Use ``1//2`` to get "
"the truncating behavior.  (The latter syntax has existed for years, at least "
"since Python 2.2.)"
msgstr ""
":pep:`238`: Ett uttryck som ``1/2`` returnerar en float.  Använd ``1//2`` "
"för att få det trunkerande beteendet.  (Den senare syntaxen har funnits i "
"flera år, åtminstone sedan Python 2.2.)"

msgid ""
"The :data:`!sys.maxint` constant was removed, since there is no longer a "
"limit to the value of integers.  However, :data:`sys.maxsize` can be used as "
"an integer larger than any practical list or string index.  It conforms to "
"the implementation's \"natural\" integer size and is typically the same as :"
"data:`!sys.maxint` in previous releases on the same platform (assuming the "
"same build options)."
msgstr ""
"Konstanten :data:`!sys.maxint` togs bort, eftersom det inte längre finns "
"någon gräns för värdet på heltal.  Däremot kan :data:`sys.maxsize` användas "
"som ett heltal som är större än alla praktiska index för listor eller "
"strängar.  Det överensstämmer med implementationens \"naturliga\" "
"heltalsstorlek och är vanligtvis detsamma som :data:`!sys.maxint` i tidigare "
"utgåvor på samma plattform (med samma byggalternativ)."

msgid ""
"The :func:`repr` of a long integer doesn't include the trailing ``L`` "
"anymore, so code that unconditionally strips that character will chop off "
"the last digit instead.  (Use :func:`str` instead.)"
msgstr ""
":func:`repr` av ett långt heltal inkluderar inte längre det efterföljande "
"``L``, så kod som ovillkorligen tar bort det tecknet kommer att hugga bort "
"den sista siffran istället.  (Använd :func:`str` istället.)"

msgid ""
"Octal literals are no longer of the form ``0720``; use ``0o720`` instead."
msgstr ""
"Octal-literaler är inte längre av formen ``0720``; använd ``0o720`` istället."

msgid "Text Vs. Data Instead Of Unicode Vs. 8-bit"
msgstr "Text vs. Data istället för Unicode vs. 8-bitars"

msgid ""
"Everything you thought you knew about binary data and Unicode has changed."
msgstr "Allt du trodde att du visste om binärdata och Unicode har förändrats."

msgid ""
"Python 3.0 uses the concepts of *text* and (binary) *data* instead of "
"Unicode strings and 8-bit strings.  All text is Unicode; however *encoded* "
"Unicode is represented as binary data.  The type used to hold text is :class:"
"`str`, the type used to hold data is :class:`bytes`.  The biggest difference "
"with the 2.x situation is that any attempt to mix text and data in Python "
"3.0 raises :exc:`TypeError`, whereas if you were to mix Unicode and 8-bit "
"strings in Python 2.x, it would work if the 8-bit string happened to contain "
"only 7-bit (ASCII) bytes, but you would get :exc:`UnicodeDecodeError` if it "
"contained non-ASCII values.  This value-specific behavior has caused "
"numerous sad faces over the years."
msgstr ""
"Python 3.0 använder begreppen *text* och (binär) *data* istället för Unicode-"
"strängar och 8-bitarssträngar.  All text är Unicode, men *kodad* Unicode "
"representeras som binär data.  Den typ som används för att hålla text är :"
"class:`str`, den typ som används för att hålla data är :class:`bytes`.  Den "
"största skillnaden med 2.x-situationen är att alla försök att blanda text "
"och data i Python 3.0 ger upphov till :exc:`TypeError`, medan om du skulle "
"blanda Unicode och 8-bitars strängar i Python 2.x, skulle det fungera om 8-"
"bitars strängen råkade innehålla endast 7-bitars (ASCII) byte, men du skulle "
"få :exc:`UnicodeDecodeError` om den innehöll icke-ASCII-värden.  Detta "
"värdespecifika beteende har orsakat många ledsna miner genom åren."

msgid ""
"As a consequence of this change in philosophy, pretty much all code that "
"uses Unicode, encodings or binary data most likely has to change.  The "
"change is for the better, as in the 2.x world there were numerous bugs "
"having to do with mixing encoded and unencoded text.  To be prepared in "
"Python 2.x, start using :class:`!unicode` for all unencoded text, and :class:"
"`str` for binary or encoded data only.  Then the ``2to3`` tool will do most "
"of the work for you."
msgstr ""
"Som en konsekvens av denna filosofiska förändring måste i stort sett all kod "
"som använder Unicode, kodningar eller binära data sannolikt ändras.  "
"Förändringen är till det bättre, eftersom det i 2.x-världen fanns många "
"buggar som hade att göra med att blanda kodad och okodad text.  För att vara "
"förberedd i Python 2.x, börja med att använda :class:`!unicode` för all "
"okodad text och :class:`str` endast för binär eller kodad data.  Då kommer "
"verktyget ``2to3`` att göra det mesta av arbetet åt dig."

msgid ""
"You can no longer use ``u\"...\"`` literals for Unicode text. However, you "
"must use ``b\"...\"`` literals for binary data."
msgstr ""
"Du kan inte längre använda ``u\"...\"``-litteraler för Unicode-text. Du "
"måste dock använda ``b\"...\"``-litteraler för binära data."

msgid ""
"As the :class:`str` and :class:`bytes` types cannot be mixed, you must "
"always explicitly convert between them.  Use :meth:`str.encode` to go from :"
"class:`str` to :class:`bytes`, and :meth:`bytes.decode` to go from :class:"
"`bytes` to :class:`str`.  You can also use ``bytes(s, encoding=...)`` and "
"``str(b, encoding=...)``, respectively."
msgstr ""
"Eftersom typerna :class:`str` och :class:`bytes` inte kan blandas måste du "
"alltid uttryckligen konvertera mellan dem.  Använd :meth:`str.encode` för "
"att gå från :class:`str` till :class:`bytes`, och :meth:`bytes.decode` för "
"att gå från :class:`bytes` till :class:`str`.  Du kan också använda "
"``bytes(s, encoding=...)`` respektive ``str(b, encoding=...)``."

msgid ""
"Like :class:`str`, the :class:`bytes` type is immutable.  There is a "
"separate *mutable* type to hold buffered binary data, :class:`bytearray`.  "
"Nearly all APIs that accept :class:`bytes` also accept :class:`bytearray`.  "
"The mutable API is based on :class:`collections.MutableSequence <collections."
"abc.MutableSequence>`."
msgstr ""
"Precis som :class:`str` är typen :class:`bytes` oföränderlig.  Det finns en "
"separat *föränderlig* typ för att hålla buffrade binära data, :class:"
"`bytearray`.  Nästan alla API:er som accepterar :class:`bytes` accepterar "
"också :class:`bytearray`.  Det mutabla API:et är baserat på :class:"
"`collections.MutableSequence <collections.abc.MutableSequence>`."

msgid ""
"All backslashes in raw string literals are interpreted literally. This means "
"that ``'\\U'`` and ``'\\u'`` escapes in raw strings are not treated "
"specially.  For example, ``r'\\u20ac'`` is a string of 6 characters in "
"Python 3.0, whereas in 2.6, ``ur'\\u20ac'`` was the single \"euro\" "
"character.  (Of course, this change only affects raw string literals; the "
"euro character is ``'\\u20ac'`` in Python 3.0.)"
msgstr ""
"Alla backslashes i råa stränglitteraler tolkas bokstavligt. Detta innebär "
"att ``'\\U'`` och ``'\\u'`` escapes i råa strängar inte behandlas "
"speciellt.  Till exempel är ``r'\\u20ac'`` en sträng med 6 tecken i Python "
"3.0, medan i 2.6 var ``ur'\\u20ac'`` det enda \"euro\"-tecknet.  "
"(Naturligtvis påverkar denna förändring endast råa stränglitteraler; "
"eurotecknet är ``'\\u20ac'`` i Python 3.0.)"

msgid ""
"The built-in :class:`!basestring` abstract type was removed.  Use :class:"
"`str` instead.  The :class:`str` and :class:`bytes` types don't have "
"functionality enough in common to warrant a shared base class.  The ``2to3`` "
"tool (see below) replaces every occurrence of :class:`!basestring` with :"
"class:`str`."
msgstr ""
"Den inbyggda abstrakta typen :class:`!basestring` togs bort.  Använd :class:"
"`str` istället.  Typerna :class:`str` och :class:`bytes` har inte "
"tillräckligt många gemensamma funktioner för att motivera en gemensam "
"basklass.  Verktyget ``2to3`` (se nedan) ersätter varje förekomst av :class:"
"`!basestring` med :class:`str`."

msgid ""
"Files opened as text files (still the default mode for :func:`open`) always "
"use an encoding to map between strings (in memory) and bytes (on disk).  "
"Binary files (opened with a ``b`` in the mode argument) always use bytes in "
"memory.  This means that if a file is opened using an incorrect mode or "
"encoding, I/O will likely fail loudly, instead of silently producing "
"incorrect data.  It also means that even Unix users will have to specify the "
"correct mode (text or binary) when opening a file.  There is a platform-"
"dependent default encoding, which on Unixy platforms can be set with the "
"``LANG`` environment variable (and sometimes also with some other platform-"
"specific locale-related environment variables).  In many cases, but not all, "
"the system default is UTF-8; you should never count on this default.  Any "
"application reading or writing more than pure ASCII text should probably "
"have a way to override the encoding. There is no longer any need for using "
"the encoding-aware streams in the :mod:`codecs` module."
msgstr ""
"Filer som öppnas som textfiler (fortfarande standardläget för :func:`open`) "
"använder alltid en kodning för att mappa mellan strängar (i minnet) och byte "
"(på disken).  Binära filer (öppnade med ett ``b`` i lägesargumentet) "
"använder alltid byte i minnet.  Det innebär att om en fil öppnas med fel "
"läge eller kodning kommer I/O sannolikt att misslyckas, istället för att i "
"tysthet producera felaktiga data.  Det innebär också att även Unix-användare "
"måste ange rätt läge (text eller binärt) när de öppnar en fil.  Det finns en "
"plattformsberoende standardkodning som på Unix-plattformar kan ställas in "
"med miljövariabeln ``LANG`` (och ibland även med några andra "
"plattformsspecifika lokalrelaterade miljövariabler).  I många fall, men inte "
"alla, är systemets standard UTF-8; du bör aldrig räkna med denna standard.  "
"Alla program som läser eller skriver mer än ren ASCII-text bör förmodligen "
"ha ett sätt att åsidosätta kodningen. Det finns inte längre något behov av "
"att använda de kodningsmedvetna strömmarna i modulen :mod:`codecs`."

msgid ""
"The initial values of :data:`sys.stdin`, :data:`sys.stdout` and :data:`sys."
"stderr` are now unicode-only text files (i.e., they are instances of :class:"
"`io.TextIOBase`).  To read and write bytes data with these streams, you need "
"to use their :data:`io.TextIOBase.buffer` attribute."
msgstr ""
"De initiala värdena för :data:`sys.stdin`, :data:`sys.stdout` och :data:`sys."
"stderr` är nu textfiler med endast en kod (dvs. de är instanser av :class:"
"`io.TextIOBase`).  För att läsa och skriva bytesdata med dessa strömmar "
"måste du använda deras :data:`io.TextIOBase.buffer`-attribut."

msgid ""
"Filenames are passed to and returned from APIs as (Unicode) strings. This "
"can present platform-specific problems because on some platforms filenames "
"are arbitrary byte strings.  (On the other hand, on Windows filenames are "
"natively stored as Unicode.)  As a work-around, most APIs (e.g. :func:`open` "
"and many functions in the :mod:`os` module) that take filenames accept :"
"class:`bytes` objects as well as strings, and a few APIs have a way to ask "
"for a :class:`bytes` return value.  Thus, :func:`os.listdir` returns a list "
"of :class:`bytes` instances if the argument is a :class:`bytes` instance, "
"and :func:`os.getcwdb` returns the current working directory as a :class:"
"`bytes` instance.  Note that when :func:`os.listdir` returns a list of "
"strings, filenames that cannot be decoded properly are omitted rather than "
"raising :exc:`UnicodeError`."
msgstr ""
"Filnamn skickas till och returneras från API:er som (Unicode)-strängar. "
"Detta kan medföra plattformsspecifika problem eftersom filnamn på vissa "
"plattformar är godtyckliga byte-strängar.  (Som en lösning accepterar de "
"flesta API:er (t.ex. :func:`open` och många funktioner i modulen :mod:`os`) "
"som tar emot filnamn :class:`bytes`-objekt såväl som strängar, och några API:"
"er har ett sätt att be om ett :class:`bytes`-returvärde.  Således "
"returnerar :func:`os.listdir` en lista över :class:`bytes`-instanser om "
"argumentet är en :class:`bytes`-instans, och :func:`os.getcwdb` returnerar "
"den aktuella arbetskatalogen som en :class:`bytes`-instans.  Observera att "
"när :func:`os.listdir` returnerar en lista med strängar, utelämnas filnamn "
"som inte kan avkodas korrekt i stället för att ge upphov till :exc:"
"`UnicodeError`."

msgid ""
"Some system APIs like :data:`os.environ` and :data:`sys.argv` can also "
"present problems when the bytes made available by the system is not "
"interpretable using the default encoding.  Setting the ``LANG`` variable and "
"rerunning the program is probably the best approach."
msgstr ""
"Vissa system-API:er som :data:`os.environ` och :data:`sys.argv` kan också ge "
"problem när de byte som görs tillgängliga av systemet inte kan tolkas med "
"hjälp av standardkodningen.  Att ställa in variabeln ``LANG`` och köra "
"programmet på nytt är förmodligen det bästa tillvägagångssättet."

msgid ""
":pep:`3138`: The :func:`repr` of a string no longer escapes non-ASCII "
"characters.  It still escapes control characters and code points with non-"
"printable status in the Unicode standard, however."
msgstr ""
":pep:`3138`: :func:`repr` av en sträng escapar inte längre icke-ASCII-"
"tecken.  Den escapar dock fortfarande kontrolltecken och kodpunkter med icke-"
"utskrivbar status i Unicode-standarden."

msgid ":pep:`3120`: The default source encoding is now UTF-8."
msgstr ":pep:`3120`: Standardkodningen för källan är nu UTF-8."

msgid ""
":pep:`3131`: Non-ASCII letters are now allowed in identifiers. (However, the "
"standard library remains ASCII-only with the exception of contributor names "
"in comments.)"
msgstr ""
":pep:`3131`: Icke-ASCII-bokstäver är nu tillåtna i identifierare. "
"(Standardbiblioteket är dock fortfarande ASCII-only, med undantag för namn "
"på bidragsgivare i kommentarer)"

msgid ""
"The :mod:`!StringIO` and :mod:`!cStringIO` modules are gone.  Instead, "
"import the :mod:`io` module and use :class:`io.StringIO` or :class:`io."
"BytesIO` for text and data respectively."
msgstr ""
"Modulerna :mod:`!StringIO` och :mod:`!cStringIO` är borta.  Istället "
"importerar du modulen :mod:`io` och använder :class:`io.StringIO` eller :"
"class:`io.BytesIO` för text respektive data."

msgid "See also the :ref:`unicode-howto`, which was updated for Python 3.0."
msgstr "Se även :ref:`unicode-howto`, som uppdaterades för Python 3.0."

msgid "Overview Of Syntax Changes"
msgstr "Översikt över syntaxändringar"

msgid ""
"This section gives a brief overview of every *syntactic* change in Python "
"3.0."
msgstr ""
"Detta avsnitt ger en kort översikt över varje *syntaktisk* förändring i "
"Python 3.0."

msgid "New Syntax"
msgstr "Ny syntax"

msgid ""
":pep:`3107`: Function argument and return value annotations.  This provides "
"a standardized way of annotating a function's parameters and return value.  "
"There are no semantics attached to such annotations except that they can be "
"introspected at runtime using the :attr:`~object.__annotations__` "
"attribute.  The intent is to encourage experimentation through metaclasses, "
"decorators or frameworks."
msgstr ""
":pep:`3107`: Annoteringar för funktionens argument och returvärde.  Detta "
"ger ett standardiserat sätt att kommentera en funktions parametrar och "
"returvärde.  Det finns ingen semantik kopplad till sådana annoteringar "
"förutom att de kan introspekteras vid körning med hjälp av attributet :attr:"
"`~object.__annotations__`.  Avsikten är att uppmuntra experimenterande genom "
"metaklasser, dekoratorer eller ramverk."

msgid ""
":pep:`3102`: Keyword-only arguments.  Named parameters occurring after "
"``*args`` in the parameter list *must* be specified using keyword syntax in "
"the call.  You can also use a bare ``*`` in the parameter list to indicate "
"that you don't accept a variable-length argument list, but you do have "
"keyword-only arguments."
msgstr ""
":pep:`3102`: Endast nyckelordsargument.  Namngivna parametrar som förekommer "
"efter ``*args`` i parameterlistan *måste* anges med nyckelordssyntax i "
"anropet.  Du kan också använda en naken ``*`` i parameterlistan för att ange "
"att du inte accepterar en argumentlista med variabel längd, men att du har "
"argument som endast innehåller nyckelord."

msgid ""
"Keyword arguments are allowed after the list of base classes in a class "
"definition.  This is used by the new convention for specifying a metaclass "
"(see next section), but can be used for other purposes as well, as long as "
"the metaclass supports it."
msgstr ""
"Nyckelord som argument tillåts efter listan över basklasser i en "
"klassdefinition.  Detta används av den nya konventionen för att specificera "
"en metaklass (se nästa avsnitt), men kan användas för andra ändamål också, "
"så länge metaklassen stöder det."

msgid ""
":pep:`3104`: :keyword:`nonlocal` statement.  Using ``nonlocal x`` you can "
"now assign directly to a variable in an outer (but non-global) scope.  :"
"keyword:`!nonlocal` is a new reserved word."
msgstr ""
":pep:`3104`: :nyckelord:`nonlocal` uttalande.  Med ``nonlocal x`` kan du nu "
"tilldela direkt till en variabel i ett yttre (men icke-globalt) scope. :"
"keyword:`!nonlocal` är ett nytt reserverat ord."

msgid ""
":pep:`3132`: Extended Iterable Unpacking.  You can now write things like "
"``a, b, *rest = some_sequence``.  And even ``*rest, a = stuff``.  The "
"``rest`` object is always a (possibly empty) list; the right-hand side may "
"be any iterable.  Example::"
msgstr ""
":pep:`3132`: Utökad uppackning av Iterable.  Du kan nu skriva saker som ``a, "
"b, *rest = some_sequence``.  Och till och med ``*rest, a = stuff``.  "
"Objektet ``rest`` är alltid en (eventuellt tom) lista; den högra sidan kan "
"vara vilken iterabel som helst.  Exempel::"

msgid "(a, *rest, b) = range(5)"
msgstr "(a, *rest, b) = intervall(5)"

msgid "This sets *a* to ``0``, *b* to ``4``, and *rest* to ``[1, 2, 3]``."
msgstr ""
"Detta sätter *a* till ``0``, *b* till ``4`` och *rest* till ``[1, 2, 3]``."

msgid ""
"Dictionary comprehensions: ``{k: v for k, v in stuff}`` means the same thing "
"as ``dict(stuff)`` but is more flexible.  (This is :pep:`274` vindicated. :-)"
msgstr ""
"Ordboksförståelse: ``{k: v for k, v in stuff}`` betyder samma sak som "
"``dict(stuff)`` men är mer flexibelt.  (Detta är :pep:`274` bekräftat. :-)"

msgid ""
"Set literals, e.g. ``{1, 2}``.  Note that ``{}`` is an empty dictionary; use "
"``set()`` for an empty set.  Set comprehensions are also supported; e.g., "
"``{x for x in stuff}`` means the same thing as ``set(stuff)`` but is more "
"flexible."
msgstr ""
"Mängdlitteraler, t.ex. ``{1, 2}``.  Observera att ``{}`` är en tom ordlista; "
"använd ``set()`` för en tom uppsättning.  Uppsättningsförståelse stöds "
"också; t.ex. betyder ``{x for x in stuff}`` samma sak som ``set(stuff)`` men "
"är mer flexibelt."

msgid ""
"New octal literals, e.g. ``0o720`` (already in 2.6).  The old octal literals "
"(``0720``) are gone."
msgstr ""
"Nya oktala literaler, t.ex. ``0o720`` (redan i 2.6).  De gamla "
"oktalliteralerna (``0720``) är borta."

msgid ""
"New binary literals, e.g. ``0b1010`` (already in 2.6), and there is a new "
"corresponding built-in function, :func:`bin`."
msgstr ""
"Nya binära literaler, t.ex. ``0b1010`` (redan i 2.6), och det finns en ny "
"motsvarande inbyggd funktion, :func:`bin`."

msgid ""
"Bytes literals are introduced with a leading ``b`` or ``B``, and there is a "
"new corresponding built-in function, :func:`bytes`."
msgstr ""
"Byteslitteraler introduceras med en ledande ``b`` eller ``B``, och det finns "
"en ny motsvarande inbyggd funktion, :func:`bytes`."

msgid "Changed Syntax"
msgstr "Ändrad syntax"

msgid ""
":pep:`3109` and :pep:`3134`: new :keyword:`raise` statement syntax: :samp:"
"`raise [{expr} [from {expr}]]`.  See below."
msgstr ""
":pep:`3109` och :pep:`3134`: Ny :keyword:`raise`-syntax för satser: :samp:"
"`raise [{expr} [från {expr}]]`.  Se nedan."

msgid ""
":keyword:`!as` and :keyword:`with` are now reserved words.  (Since 2.6, "
"actually.)"
msgstr ""
":keyword:`!as` och :keyword:`with` är nu reserverade ord.  (Sedan 2.6, "
"faktiskt.)"

msgid ""
"``True``, ``False``, and ``None`` are reserved words.  (2.6 partially "
"enforced the restrictions on ``None`` already.)"
msgstr ""
"``True``, ``False`` och ``None`` är reserverade ord.  (2.6 tillämpade delvis "
"restriktionerna för ``None`` redan)"

msgid ""
"Change from :keyword:`except` *exc*, *var* to :keyword:`!except` *exc* :"
"keyword:`!as` *var*.  See :pep:`3110`."
msgstr ""
"Ändra från :keyword:`except` *exc*, *var* till :keyword:`!except` *exc* :"
"keyword:`!as` *var*.  Se :pep:`3110`."

msgid ":pep:`3115`: New Metaclass Syntax.  Instead of::"
msgstr ":pep:`3115`: Ny syntax för metaklasser.  Istället för::"

msgid ""
"class C:\n"
"    __metaclass__ = M\n"
"    ..."
msgstr ""
"klass C:\n"
"    __metaklass__ = M\n"
"    ..."

msgid "you must now use::"
msgstr "måste du nu använda::"

msgid ""
"class C(metaclass=M):\n"
"    ..."
msgstr ""
"klass C(metaklass=M):\n"
"    ..."

msgid ""
"The module-global :data:`!__metaclass__` variable is no longer supported.  "
"(It was a crutch to make it easier to default to new-style classes without "
"deriving every class from :class:`object`.)"
msgstr ""
"Den modulglobala variabeln :data:`!__metaclass__` stöds inte längre.  (Den "
"var en krycka för att göra det lättare att använda nya klasser som standard "
"utan att härleda alla klasser från :class:`object`)"

msgid ""
"List comprehensions no longer support the syntactic form :samp:`[... for "
"{var} in {item1}, {item2}, ...]`.  Use :samp:`[... for {var} in ({item1}, "
"{item2}, ...)]` instead. Also note that list comprehensions have different "
"semantics: they are closer to syntactic sugar for a generator expression "
"inside a :func:`list` constructor, and in particular the loop control "
"variables are no longer leaked into the surrounding scope."
msgstr ""
"Listförståelser stöder inte längre den syntaktiska formen :samp:`[... för "
"{var} i {item1}, {item2}, ...]`.  Använd :samp:`[... for {var} in ({item1}, "
"{item2}, ...)]` i stället. Observera också att listcomprehensions har en "
"annan semantik: de är närmare syntaktiskt socker för ett generatoruttryck "
"inuti en :func:`list`-konstruktor, och i synnerhet läcker inte längre "
"loopkontrollvariablerna ut i det omgivande omfånget."

msgid ""
"The *ellipsis* (``...``) can be used as an atomic expression anywhere.  "
"(Previously it was only allowed in slices.)  Also, it *must* now be spelled "
"as ``...``.  (Previously it could also be spelled as ``. . .``, by a mere "
"accident of the grammar.)"
msgstr ""
"*ellips* (``...``) kan användas som ett atomiskt uttryck var som helst.  "
"(Tidigare var det bara tillåtet i slices.) Dessutom *måste* det nu stavas "
"som ``...``.  (Tidigare kunde det också stavas som ``. .``, av en ren "
"olyckshändelse i grammatiken)"

msgid "Removed Syntax"
msgstr "Borttagen syntax"

msgid ""
":pep:`3113`: Tuple parameter unpacking removed.  You can no longer write "
"``def foo(a, (b, c)): ...``. Use ``def foo(a, b_c): b, c = b_c`` instead."
msgstr ""
":pep:`3113`: Uppackning av tuple-parametrar borttagen.  Du kan inte längre "
"skriva ``def foo(a, (b, c)): ...``. Använd ``def foo(a, b_c): b, c = b_c`` "
"istället."

msgid "Removed backticks (use :func:`repr` instead)."
msgstr "Borttagna backticks (använd :func:`repr` istället)."

msgid "Removed ``<>`` (use ``!=`` instead)."
msgstr "Borttagen ``<>`` (använd ``!=`` istället)."

msgid ""
"Removed keyword: :func:`exec` is no longer a keyword; it remains as a "
"function.  (Fortunately the function syntax was also accepted in 2.x.)  Also "
"note that :func:`exec` no longer takes a stream argument; instead of "
"``exec(f)`` you can use ``exec(f.read())``."
msgstr ""
"Borttaget nyckelord: :func:`exec` är inte längre ett nyckelord; det finns "
"kvar som en funktion.  (Lyckligtvis accepterades funktionssyntaxen även i 2."
"x.) Observera också att :func:`exec` inte längre tar ett stream-argument; "
"istället för ``exec(f)`` kan du använda ``exec(f.read())``."

msgid "Integer literals no longer support a trailing ``l`` or ``L``."
msgstr ""
"Heltalslitteraler stöder inte längre en efterföljande ``l`` eller ``L``."

msgid "String literals no longer support a leading ``u`` or ``U``."
msgstr "Stränglitteraler stöder inte längre en ledande ``u`` eller ``U``."

msgid ""
"The :keyword:`from` *module* :keyword:`import` ``*`` syntax is only allowed "
"at the module level, no longer inside functions."
msgstr ""
"Syntaxen :keyword:`from` *module* :keyword:`import` ``*`` är endast tillåten "
"på modulnivå, inte längre inuti funktioner."

msgid ""
"The only acceptable syntax for relative imports is :samp:`from .[{module}] "
"import {name}`.  All :keyword:`import` forms not starting with ``.`` are "
"interpreted as absolute imports.  (:pep:`328`)"
msgstr ""
"Den enda acceptabla syntaxen för relativ import är :samp:`from .[{module}] "
"import {name}`.  Alla :keyword:`import`-former som inte börjar med ``.`` "
"tolkas som absolut import.  (:pep:`328`)"

msgid "Classic classes are gone."
msgstr "Klassiska klasser är borta."

msgid "Changes Already Present In Python 2.6"
msgstr "Ändringar som redan finns i Python 2.6"

msgid ""
"Since many users presumably make the jump straight from Python 2.5 to Python "
"3.0, this section reminds the reader of new features that were originally "
"designed for Python 3.0 but that were back-ported to Python 2.6.  The "
"corresponding sections in :ref:`whats-new-in-2.6` should be consulted for "
"longer descriptions."
msgstr ""
"Eftersom många användare förmodligen hoppar direkt från Python 2.5 till "
"Python 3.0, påminner det här avsnittet läsaren om nya funktioner som "
"ursprungligen utformades för Python 3.0, men som portades tillbaka till "
"Python 2.6.  Motsvarande avsnitt i :ref:`whats-new-in-2.6` bör konsulteras "
"för längre beskrivningar."

msgid ""
":ref:`pep-0343`.  The :keyword:`with` statement is now a standard feature "
"and no longer needs to be imported from the :mod:`__future__`. Also check "
"out :ref:`new-26-context-managers` and :ref:`new-module-contextlib`."
msgstr ""
":ref:`pep-0343`.  Satsen :keyword:`with` är nu en standardfunktion och "
"behöver inte längre importeras från :mod:`__future__`. Kolla även in :ref:"
"`new-26-context-managers` och :ref:`new-module-contextlib`."

msgid ""
":ref:`pep-0366`.  This enhances the usefulness of the :option:`-m` option "
"when the referenced module lives in a package."
msgstr ""
":ref:`pep-0366`.  Detta ökar användbarheten av alternativet :option:`-m` när "
"den refererade modulen finns i ett paket."

msgid ":ref:`pep-0370`."
msgstr ":ref:`pep-0370`."

msgid ":ref:`pep-0371`."
msgstr ":ref:`pep-0371`."

msgid ""
":ref:`pep-3101`.  Note: the 2.6 description mentions the :meth:`format` "
"method for both 8-bit and Unicode strings.  In 3.0, only the :class:`str` "
"type (text strings with Unicode support) supports this method; the :class:"
"`bytes` type does not.  The plan is to eventually make this the only API for "
"string formatting, and to start deprecating the ``%`` operator in Python 3.1."
msgstr ""
":ref:`pep-3101`.  Observera: I beskrivningen för 2.6 nämns metoden :meth:"
"`format` för både 8-bitars och Unicode-strängar.  I 3.0 är det bara typen :"
"class:`str` (textsträngar med Unicode-stöd) som stöder den här metoden; "
"typen :class:`bytes` gör det inte.  Planen är att så småningom göra detta "
"till det enda API:et för strängformatering och att börja avskriva operatorn "
"``%`` i Python 3.1."

msgid ""
":ref:`pep-3105`.  This is now a standard feature and no longer needs to be "
"imported from :mod:`__future__`.  More details were given above."
msgstr ""
":ref:`pep-3105`.  Detta är nu en standardfunktion och behöver inte längre "
"importeras från :mod:`__future__`.  Mer detaljer gavs ovan."

msgid ""
":ref:`pep-3110`.  The :keyword:`except` *exc* :keyword:`!as` *var* syntax is "
"now standard and :keyword:`!except` *exc*, *var* is no longer supported.  "
"(Of course, the :keyword:`!as` *var* part is still optional.)"
msgstr ""
":ref:`pep-3110`.  Syntaxen :keyword:`except` *exc* :keyword:`!as` *var* är "
"nu standard och :keyword:`!except` *exc*, *var* stöds inte längre.  "
"(Naturligtvis är :keyword:`!as` *var*-delen fortfarande valfri)"

msgid ""
":ref:`pep-3112`.  The ``b\"...\"`` string literal notation (and its variants "
"like ``b'...'``, ``b\"\"\"...\"\"\"``, and ``br\"...\"``) now produces a "
"literal of type :class:`bytes`."
msgstr ""
":ref:`pep-3112`.  Strängnotationen ``b\"...\"`` (och dess varianter som "
"``b'...'``, ``b\"\"...\"\"\"`` och ``br\"...\"``) producerar nu en bokstav "
"av typen :class:`bytes`."

msgid ""
":ref:`pep-3116`.  The :mod:`io` module is now the standard way of doing file "
"I/O.  The built-in :func:`open` function is now an alias for :func:`io.open` "
"and has additional keyword arguments *encoding*, *errors*, *newline* and "
"*closefd*.  Also note that an invalid *mode* argument now raises :exc:"
"`ValueError`, not :exc:`IOError`.  The binary file object underlying a text "
"file object can be accessed as :attr:`!f.buffer` (but beware that the text "
"object maintains a buffer of itself in order to speed up the encoding and "
"decoding operations)."
msgstr ""
":ref:`pep-3116`.  Modulen :mod:`io` är nu standardmetoden för att göra fil-I/"
"O.  Den inbyggda funktionen :func:`open` är nu ett alias för :func:`io.open` "
"och har ytterligare nyckelordsargument *encoding*, *errors*, *newline* och "
"*closefd*.  Observera också att ett ogiltigt *mode*-argument nu ger upphov "
"till :exc:`ValueError`, inte :exc:`IOError`.  Det binära filobjektet som "
"ligger till grund för ett textfilobjekt kan nås med :attr:`!f.buffer` (men "
"tänk på att textobjektet upprätthåller en buffert av sig självt för att "
"snabba upp kodnings- och avkodningsoperationerna)."

msgid ""
":ref:`pep-3118`.  The old builtin :func:`!buffer` is now really gone; the "
"new builtin :func:`memoryview` provides (mostly) similar functionality."
msgstr ""
":ref:`pep-3118`.  Den gamla inbyggda :func:`!buffer` är nu verkligen borta; "
"den nya inbyggda :func:`memoryview` ger (mestadels) liknande funktionalitet."

msgid ""
":ref:`pep-3119`.  The :mod:`abc` module and the ABCs defined in the :mod:"
"`collections` module plays a somewhat more prominent role in the language "
"now, and built-in collection types like :class:`dict` and :class:`list` "
"conform to the :class:`collections.MutableMapping <collections.abc."
"MutableMapping>` and :class:`collections.MutableSequence <collections.abc."
"MutableSequence>` ABCs, respectively."
msgstr ""
":ref:`pep-3119`.  Modulen :mod:`abc` och de ABC som definieras i modulen :"
"mod:`collections` spelar en något mer framträdande roll i språket nu, och "
"inbyggda samlingstyper som :class:`dict` och :class:`list` överensstämmer "
"med ABC:erna :class:`collections.MutableMapping <collections.abc."
"MutableMapping>` respektive :class:`collections.MutableSequence <collections."
"abc.MutableSequence>`."

msgid ""
":ref:`pep-3127`.  As mentioned above, the new octal literal notation is the "
"only one supported, and binary literals have been added."
msgstr ""
":ref:`pep-3127`.  Som nämnts ovan är den nya oktala bokstavsnoteringen den "
"enda som stöds, och binära bokstäver har lagts till."

msgid ":ref:`pep-3129`."
msgstr ":ref:`pep-3129`."

msgid ""
":ref:`pep-3141`.  The :mod:`numbers` module is another new use of ABCs, "
"defining Python's \"numeric tower\".  Also note the new :mod:`fractions` "
"module which implements :class:`numbers.Rational`."
msgstr ""
":ref:`pep-3141`.  Modulen :mod:`numbers` är en annan ny användning av ABC, "
"som definierar Pythons \"numeriska torn\".  Notera också den nya :mod:"
"`fractions`-modulen som implementerar :class:`numbers.Rational`."

msgid "Library Changes"
msgstr "Förändringar i biblioteket"

msgid ""
"Due to time constraints, this document does not exhaustively cover the very "
"extensive changes to the standard library.  :pep:`3108` is the reference for "
"the major changes to the library.  Here's a capsule review:"
msgstr ""
"På grund av tidsbegränsningar täcker detta dokument inte uttömmande de "
"mycket omfattande ändringarna av standardbiblioteket. :pep:`3108` är "
"referensen för de större ändringarna av biblioteket.  Här är en kortfattad "
"genomgång:"

msgid ""
"Many old modules were removed.  Some, like :mod:`!gopherlib` (no longer "
"used) and :mod:`!md5` (replaced by :mod:`hashlib`), were already deprecated "
"by :pep:`4`.  Others were removed as a result of the removal of support for "
"various platforms such as Irix, BeOS and Mac OS 9 (see :pep:`11`).  Some "
"modules were also selected for removal in Python 3.0 due to lack of use or "
"because a better replacement exists.  See :pep:`3108` for an exhaustive list."
msgstr ""
"Många gamla moduler togs bort.  Vissa, som :mod:`!gopherlib` (används inte "
"längre) och :mod:`!md5` (ersatt av :mod:`hashlib`), var redan utfasade av :"
"pep:`4`.  Andra togs bort som ett resultat av att stödet för olika "
"plattformar som Irix, BeOS och Mac OS 9 togs bort (se :pep:`11`).  Vissa "
"moduler valdes också ut för borttagning i Python 3.0 på grund av brist på "
"användning eller för att en bättre ersättning finns.  Se :pep:`3108` för en "
"uttömmande lista."

msgid ""
"The :mod:`!bsddb3` package was removed because its presence in the core "
"standard library has proved over time to be a particular burden for the core "
"developers due to testing instability and Berkeley DB's release schedule.  "
"However, the package is alive and well, externally maintained at https://www."
"jcea.es/programacion/pybsddb.htm."
msgstr ""
"Paketet :mod:`!bsddb3` togs bort eftersom dess närvaro i det centrala "
"standardbiblioteket med tiden har visat sig vara en särskild börda för de "
"centrala utvecklarna på grund av instabila tester och Berkeley DB:s "
"utgivningsschema.  Paketet lever dock vidare och underhålls externt på "
"https://www.jcea.es/programacion/pybsddb.htm."

msgid ""
"Some modules were renamed because their old name disobeyed :pep:`8`, or for "
"various other reasons.  Here's the list:"
msgstr ""
"Vissa moduler döptes om eftersom deras gamla namn inte lydde :pep:`8`, eller "
"av olika andra skäl.  Här är listan:"

msgid "Old Name"
msgstr "Gammalt namn"

msgid "New Name"
msgstr "Nytt namn"

msgid "_winreg"
msgstr "_winreg"

msgid "winreg"
msgstr "winreg"

msgid "ConfigParser"
msgstr "KonfigParser"

msgid "configparser"
msgstr "konfigurationsanalysator"

msgid "copy_reg"
msgstr "kopiera_reg"

msgid "copyreg"
msgstr "copyreg"

msgid "Queue"
msgstr "Köa"

msgid "queue"
msgstr "kö"

msgid "SocketServer"
msgstr "SocketServer"

msgid "socketserver"
msgstr "socketserver"

msgid "markupbase"
msgstr "markupbas"

msgid "_markupbase"
msgstr "_markupbase"

msgid "repr"
msgstr "repr"

msgid "reprlib"
msgstr "reprlib"

msgid "test.test_support"
msgstr "test.test_support"

msgid "test.support"
msgstr "test.support"

msgid ""
"A common pattern in Python 2.x is to have one version of a module "
"implemented in pure Python, with an optional accelerated version implemented "
"as a C extension; for example, :mod:`pickle` and :mod:`!cPickle`.  This "
"places the burden of importing the accelerated version and falling back on "
"the pure Python version on each user of these modules.  In Python 3.0, the "
"accelerated versions are considered implementation details of the pure "
"Python versions. Users should always import the standard version, which "
"attempts to import the accelerated version and falls back to the pure Python "
"version.  The :mod:`pickle` / :mod:`!cPickle` pair received this treatment.  "
"The :mod:`profile` module is on the list for 3.1.  The :mod:`!StringIO` "
"module has been turned into a class in the :mod:`io` module."
msgstr ""
"Ett vanligt mönster i Python 2.x är att ha en version av en modul "
"implementerad i ren Python, med en valfri accelererad version implementerad "
"som ett C-tillägg; till exempel :mod:`pickle` och :mod:`!cPickle`.  Detta "
"innebär att varje användare av dessa moduler måste importera den snabbare "
"versionen och återgå till den rena Python-versionen.  I Python 3.0 betraktas "
"de accelererade versionerna som implementeringsdetaljer av de rena Python-"
"versionerna. Användare bör alltid importera standardversionen, som försöker "
"importera den accelererade versionen och faller tillbaka på den rena Python-"
"versionen.  Paret :mod:`pickle` / :mod:`!cPickle` fick denna behandling.  "
"Modulen :mod:`profile` finns med på listan för 3.1.  Modulen :mod:`!"
"StringIO` har gjorts om till en klass i modulen :mod:`io`."

msgid ""
"Some related modules have been grouped into packages, and usually the "
"submodule names have been simplified.  The resulting new packages are:"
msgstr ""
"Vissa relaterade moduler har grupperats i paket, och vanligtvis har namnen "
"på undermodulerna förenklats.  De resulterande nya paketen är:"

msgid ""
":mod:`dbm` (:mod:`!anydbm`, :mod:`!dbhash`, :mod:`!dbm`, :mod:`!dumbdbm`, :"
"mod:`!gdbm`, :mod:`!whichdb`)."
msgstr ""
":mod:`dbm` (:mod:`!anydbm`, :mod:`!dbhash`, :mod:`!dbm`, :mod:`!dumbdbm`, :"
"mod:`!gdbm`, :mod:`!whichdb`)."

msgid ":mod:`html` (:mod:`!HTMLParser`, :mod:`!htmlentitydefs`)."
msgstr ":mod:`html` (:mod:`!HTMLParser`, :mod:`!htmlentitydefs`)."

msgid ""
":mod:`http` (:mod:`!httplib`, :mod:`!BaseHTTPServer`, :mod:`!"
"CGIHTTPServer`, :mod:`!SimpleHTTPServer`, :mod:`!Cookie`, :mod:`!cookielib`)."
msgstr ""
":mod:`http` (:mod:`!httplib`, :mod:`!BaseHTTPServer`, :mod:`!"
"CGIHTTPServer`, :mod:`!SimpleHTTPServer`, :mod:`!Cookie`, :mod:`!cookielib`)."

msgid ""
":mod:`tkinter` (all ``Tkinter``-related modules except :mod:`turtle`).  The "
"target audience of :mod:`turtle` doesn't really care about :mod:`tkinter`.  "
"Also note that as of Python 2.6, the functionality of :mod:`turtle` has been "
"greatly enhanced."
msgstr ""
":mod:`tkinter` (alla ``Tkinter``-relaterade moduler utom :mod:`turtle`).  "
"Målgruppen för :mod:`turtle` bryr sig egentligen inte om :mod:`tkinter`.  "
"Observera också att från och med Python 2.6 har funktionaliteten i :mod:"
"`turtle` förbättrats avsevärt."

msgid ""
":mod:`urllib` (:mod:`!urllib`, :mod:`!urllib2`, :mod:`!urlparse`, :mod:`!"
"robotparse`)."
msgstr ""
":mod:`urllib` (:mod:`!urllib`, :mod:`!urllib2`, :mod:`!urlparse`, :mod:`!"
"robotparse`)."

msgid ""
":mod:`xmlrpc` (:mod:`!xmlrpclib`, :mod:`!DocXMLRPCServer`, :mod:`!"
"SimpleXMLRPCServer`)."
msgstr ""
":mod:`xmlrpc` (:mod:`!xmlrpclib`, :mod:`!DocXMLRPCServer`, :mod:`!"
"SimpleXMLRPCServer`)."

msgid ""
"Some other changes to standard library modules, not covered by :pep:`3108`:"
msgstr ""
"Några andra ändringar i standardbiblioteksmoduler, som inte täcks av :pep:"
"`3108`:"

msgid "Killed :mod:`!sets`.  Use the built-in :func:`set` class."
msgstr "Dödade :mod:`!sets`.  Använd den inbyggda :func:`set`-klassen."

msgid ""
"Cleanup of the :mod:`sys` module: removed :func:`!sys.exitfunc`, :func:`!sys."
"exc_clear`, :data:`!sys.exc_type`, :data:`!sys.exc_value`, :data:`!sys."
"exc_traceback`.  (Note that :data:`sys.last_type` etc. remain.)"
msgstr ""
"Rensning av modulen :mod:`sys`: tog bort :func:`!sys.exitfunc`, :func:`!sys."
"exc_clear`, :data:`!sys.exc_type`, :data:`!sys.exc_value`, :data:`!sys."
"exc_traceback`.  (Observera att :data:`sys.last_type` etc. kvarstår)"

msgid ""
"Cleanup of the :class:`array.array` type: the :meth:`!read` and :meth:`!"
"write` methods are gone; use :meth:`~array.array.fromfile` and :meth:`~array."
"array.tofile` instead.  Also, the ``'c'`` typecode for array is gone -- use "
"either ``'b'`` for bytes or ``'u'`` for Unicode characters."
msgstr ""
"Uppstädning av typen :class:`array.array`: metoderna :meth:`!read` och :meth:"
"`!write` är borta; använd :meth:`~array.array.fromfile` och :meth:`~array."
"array.tofile` istället.  Dessutom är typkoden ``'c'`` för array borta -- "
"använd antingen ``'b'`` för bytes eller ``'u'`` för Unicode-tecken."

msgid ""
"Cleanup of the :mod:`operator` module: removed :func:`!sequenceIncludes` "
"and :func:`!isCallable`."
msgstr ""
"Uppstädning av modulen :mod:`operator`: tog bort :func:`!sequenceIncludes` "
"och :func:`!isCallable`."

msgid ""
"Cleanup of the :mod:`!thread` module: :func:`!acquire_lock` and :func:`!"
"release_lock` are gone; use :meth:`~threading.Lock.acquire` and :meth:"
"`~threading.Lock.release` instead."
msgstr ""
"Uppstädning av modulen :mod:`!thread`: :func:`!acquire_lock` och :func:`!"
"release_lock` är borta; använd :meth:`~threading.Lock.acquire` och :meth:"
"`~threading.Lock.release` istället."

msgid ""
"Cleanup of the :mod:`random` module: removed the :func:`!jumpahead` API."
msgstr "Rensning av modulen :mod:`random`: tog bort API:et :func:`!jumpahead`."

msgid "The :mod:`!new` module is gone."
msgstr "Modulen :mod:`!new` är borta."

msgid ""
"The functions :func:`!os.tmpnam`, :func:`!os.tempnam` and :func:`!os."
"tmpfile` have been removed in favor of the :mod:`tempfile` module."
msgstr ""
"Funktionerna :func:`!os.tmpnam`, :func:`!os.tempnam` och :func:`!os.tmpfile` "
"har tagits bort till förmån för modulen :mod:`tempfile`."

msgid ""
"The :mod:`tokenize` module has been changed to work with bytes.  The main "
"entry point is now :func:`tokenize.tokenize`, instead of generate_tokens."
msgstr ""
"Modulen :mod:`tokenize` har ändrats för att fungera med bytes.  Den "
"huvudsakliga ingångspunkten är nu :func:`tokenize.tokenize`, istället för "
"generate_tokens."

msgid ""
":data:`!string.letters` and its friends (:data:`!string.lowercase` and :data:"
"`!string.uppercase`) are gone.  Use :data:`string.ascii_letters` etc. "
"instead.  (The reason for the removal is that :data:`!string.letters` and "
"friends had locale-specific behavior, which is a bad idea for such "
"attractively named global \"constants\".)"
msgstr ""
":data:`!string.letters` och dess vänner (:data:`!string.lowercase` och :data:"
"`!string.uppercase`) är borta.  Använd :data:`string.ascii_letters` etc. "
"istället.  (Anledningen till borttagandet är att :data:`!string.letters` och "
"dess vänner hade ett lokalspecifikt beteende, vilket är en dålig idé för "
"globala \"konstanter\" med så attraktiva namn)"

msgid ""
"Renamed module :mod:`!__builtin__` to :mod:`builtins` (removing the "
"underscores, adding an 's').  The :data:`!__builtins__` variable found in "
"most global namespaces is unchanged.  To modify a builtin, you should use :"
"mod:`builtins`, not :data:`!__builtins__`!"
msgstr ""
"Döpte om modulen :mod:`!__builtin__` till :mod:`builtins` (tar bort "
"understrecken och lägger till ett 's').  Variabeln :data:`!__builtins__` som "
"finns i de flesta globala namnrymder är oförändrad.  För att modifiera en "
"builtin bör du använda :mod:`builtins`, inte :data:`!__builtins__`!"

msgid ":pep:`3101`: A New Approach To String Formatting"
msgstr ":pep:`3101`: En ny metod för strängformatering"

msgid ""
"A new system for  built-in string formatting operations replaces the ``%`` "
"string  formatting operator.   (However, the ``%``  operator is still "
"supported;  it will  be deprecated in  Python 3.1  and removed from the "
"language at some later time.)  Read :pep:`3101` for the full scoop."
msgstr ""
"Ett nytt system för inbyggda strängformateringsoperationer ersätter "
"strängformateringsoperatorn ``%``.   (Operatorn ``%`` stöds dock "
"fortfarande; den kommer att avskrivas i Python 3.1 och tas bort från språket "
"vid en senare tidpunkt)  Läs :pep:`3101` för hela scoopet."

msgid "Changes To Exceptions"
msgstr "Ändringar av undantag"

msgid ""
"The APIs for raising and catching exception have been cleaned up and new "
"powerful features added:"
msgstr ""
"API:erna för att skapa och fånga upp undantag har rensats upp och nya "
"kraftfulla funktioner har lagts till:"

msgid ""
":pep:`352`: All exceptions must be derived (directly or indirectly) from :"
"exc:`BaseException`.  This is the root of the exception hierarchy.  This is "
"not new as a recommendation, but the *requirement* to inherit from :exc:"
"`BaseException` is new.  (Python 2.6 still allowed classic classes to be "
"raised, and placed no restriction on what you can catch.)  As a consequence, "
"string exceptions are finally truly and utterly dead."
msgstr ""
":pep:`352`: Alla undantag måste härledas (direkt eller indirekt) från :exc:"
"`BaseException`.  Detta är roten i undantagshierarkin.  Detta är inte nytt "
"som en rekommendation, men *kravet* att ärva från :exc:`BaseException` är "
"nytt.  (Python 2.6 tillät fortfarande att klassiska klasser togs upp, och "
"lade ingen begränsning på vad du kan fånga)  Som en följd av detta är "
"strängundantag äntligen helt och hållet döda."

msgid ""
"Almost all exceptions should actually derive from :exc:`Exception`; :exc:"
"`BaseException` should only be used as a base class for exceptions that "
"should only be handled at the top level, such as :exc:`SystemExit` or :exc:"
"`KeyboardInterrupt`.  The recommended idiom for handling all exceptions "
"except for this latter category is to use :keyword:`except` :exc:`Exception`."
msgstr ""
"Nästan alla undantag bör egentligen härledas från :exc:`Exception`; :exc:"
"`BaseException` bör endast användas som basklass för undantag som endast bör "
"hanteras på högsta nivå, t.ex. :exc:`SystemExit` eller :exc:"
"`KeyboardInterrupt`.  Det rekommenderade idiomet för att hantera alla "
"undantag utom denna senare kategori är att använda :keyword:`except` :exc:"
"`Exception`."

msgid ":exc:`!StandardError` was removed."
msgstr ":exc:`!StandardError` togs bort."

msgid ""
"Exceptions no longer behave as sequences.  Use the :attr:`~BaseException."
"args` attribute instead."
msgstr ""
"Undantag beter sig inte längre som sekvenser.  Använd istället attributet :"
"attr:`~BaseException.args`."

msgid ""
":pep:`3109`: Raising exceptions.  You must now use :samp:`raise {Exception}"
"({args})` instead of :samp:`raise {Exception}, {args}`. Additionally, you "
"can no longer explicitly specify a traceback; instead, if you *have* to do "
"this, you can assign directly to the :attr:`~BaseException.__traceback__` "
"attribute (see below)."
msgstr ""
":pep:`3109`: Upphävande av undantag.  Du måste nu använda :samp:`raise "
"{Exception}({args})` istället för :samp:`raise {Exception}, {args}`. "
"Dessutom kan du inte längre uttryckligen ange en traceback; om du *måste* "
"göra detta kan du istället tilldela direkt till attributet :attr:"
"`~BaseException.__traceback__` (se nedan)."

msgid ""
":pep:`3110`: Catching exceptions.  You must now use :samp:`except "
"{SomeException} as {variable}` instead of :samp:`except {SomeException}, "
"{variable}`.  Moreover, the *variable* is explicitly deleted when the :"
"keyword:`except` block is left."
msgstr ""
":pep:`3110`: Fånga upp undantag.  Du måste nu använda :samp:`except "
"{SomeException} as {variable}` istället för :samp:`except {SomeException}, "
"{variable}`.  Dessutom raderas *variabeln* explicit när :keyword:`except`-"
"blocket lämnas."

msgid ""
":pep:`3134`: Exception chaining.  There are two cases: implicit chaining and "
"explicit chaining.  Implicit chaining happens when an exception is raised in "
"an :keyword:`except` or :keyword:`finally` handler block.  This usually "
"happens due to a bug in the handler block; we call this a *secondary* "
"exception.  In this case, the original exception (that was being handled) is "
"saved as the :attr:`~BaseException.__context__` attribute of the secondary "
"exception. Explicit chaining is invoked with this syntax::"
msgstr ""
":pep:`3134`: Kedjning av undantag.  Det finns två fall: implicit kedjning "
"och explicit kedjning.  Implicit kedjning sker när ett undantag tas upp i "
"ett :keyword:`except` eller :keyword:`finally` hanterarblock.  Detta sker "
"vanligtvis på grund av en bugg i hanterarblocket; vi kallar detta för ett "
"*sekundärt* undantag.  I det här fallet sparas det ursprungliga undantaget "
"(som hanterades) som attributet :attr:`~BaseException.__context__` för det "
"sekundära undantaget. Explicit kedjning görs med denna syntax::"

msgid "raise SecondaryException() from primary_exception"
msgstr "raise SecondaryException() från primary_exception"

msgid ""
"(where *primary_exception* is any expression that produces an exception "
"object, probably an exception that was previously caught). In this case, the "
"primary exception is stored on the :attr:`~BaseException.__cause__` "
"attribute of the secondary exception.  The traceback printed when an "
"unhandled exception occurs walks the chain of :attr:`!__cause__` and :attr:"
"`~BaseException.__context__` attributes and prints a separate traceback for "
"each component of the chain, with the primary exception at the top.  (Java "
"users may recognize this behavior.)"
msgstr ""
"(där *primary_exception* är vilket uttryck som helst som producerar ett "
"undantagsobjekt, förmodligen ett undantag som tidigare fångats upp). I det "
"här fallet lagras det primära undantaget i attributet :attr:`~BaseException."
"__cause__` för det sekundära undantaget.  Den spårning som skrivs ut när ett "
"ohanterat undantag inträffar går genom kedjan av attributen :attr:`!"
"__cause__` och :attr:`~BaseException.__context__` och skriver ut en separat "
"spårning för varje komponent i kedjan, med det primära undantaget högst upp. "
"(Java-användare kanske känner igen det här beteendet)"

msgid ""
":pep:`3134`: Exception objects now store their traceback as the :attr:"
"`~BaseException.__traceback__` attribute.  This means that an exception "
"object now contains all the information pertaining to an exception, and "
"there are fewer reasons to use :func:`sys.exc_info` (though the latter is "
"not removed)."
msgstr ""
":pep:`3134`: Exception-objekt lagrar nu sin traceback som attributet :attr:"
"`~BaseException.__traceback__`.  Detta innebär att ett undantagsobjekt nu "
"innehåller all information om ett undantag och att det finns färre "
"anledningar att använda :func:`sys.exc_info` (även om den senare inte har "
"tagits bort)."

msgid ""
"A few exception messages are improved when Windows fails to load an "
"extension module.  For example, ``error code 193`` is now ``%1 is not a "
"valid Win32 application``.  Strings now deal with non-English locales."
msgstr ""
"Några undantagsmeddelanden har förbättrats när Windows misslyckas med att "
"ladda en tilläggsmodul.  Till exempel är ``felkod 193`` nu ``%1 är inte en "
"giltig Win32-applikation``.  Strängar hanterar nu icke-engelska lokala språk."

msgid "Miscellaneous Other Changes"
msgstr "Övrigt Övriga förändringar"

msgid "Operators And Special Methods"
msgstr "Operatorer och specialmetoder"

msgid ""
"``!=`` now returns the opposite of ``==``, unless ``==`` returns :data:"
"`NotImplemented`."
msgstr ""
"``!=`` returnerar nu motsatsen till ``==``, såvida inte ``==`` returnerar :"
"data:`NotImplemented`."

msgid ""
"The concept of \"unbound methods\" has been removed from the language. When "
"referencing a method as a class attribute, you now get a plain function "
"object."
msgstr ""
"Begreppet \"obundna metoder\" har tagits bort från språket. När man "
"refererar till en metod som ett klassattribut får man nu ett vanligt "
"funktionsobjekt."

msgid ""
":meth:`!__getslice__`, :meth:`!__setslice__` and :meth:`!__delslice__` were "
"killed.  The syntax ``a[i:j]`` now translates to ``a.__getitem__(slice(i, "
"j))`` (or :meth:`~object.__setitem__` or :meth:`~object.__delitem__`, when "
"used as an assignment or deletion target, respectively)."
msgstr ""
":meth:`!__getslice__`, :meth:`!__setslice__` och :meth:`!__delslice__` "
"dödades.  Syntaxen ``a[i:j]`` översätts nu till ``a.__getitem__(slice(i, "
"j))`` (eller :meth:`~object.__setitem__` eller :meth:`~object.__delitem__`, "
"när den används som ett tilldelnings- respektive raderingsmål)."

msgid ""
":pep:`3114`: the standard :meth:`next` method has been renamed to :meth:"
"`~iterator.__next__`."
msgstr ""
":pep:`3114`: standardmetoden :meth:`next` har bytt namn till :meth:"
"`~iterator.__next__`."

msgid ""
"The :meth:`!__oct__` and :meth:`!__hex__` special methods are removed -- :"
"func:`oct` and :func:`hex` use :meth:`~object.__index__` now to convert the "
"argument to an integer."
msgstr ""
"Specialmetoderna :meth:`!__oct__` och :meth:`!__hex__` har tagits bort -- :"
"func:`oct` och :func:`hex` använder nu :meth:`~object.__index__` för att "
"konvertera argumentet till ett heltal."

msgid "Removed support for :attr:`!__members__` and :attr:`!__methods__`."
msgstr "Borttaget stöd för :attr:`!__members__` och :attr:`!__methods__`."

msgid ""
"The function attributes named :attr:`!func_X` have been renamed to use the :"
"attr:`!__X__` form, freeing up these names in the function attribute "
"namespace for user-defined attributes.  To wit, :attr:`!func_closure`, :attr:"
"`!func_code`, :attr:`!func_defaults`, :attr:`!func_dict`, :attr:`!"
"func_doc`, :attr:`!func_globals`, :attr:`!func_name` were renamed to :attr:"
"`~function.__closure__`, :attr:`~function.__code__`, :attr:`~function."
"__defaults__`, :attr:`~function.__dict__`, :attr:`~function.__doc__`, :attr:"
"`~function.__globals__`, :attr:`~function.__name__`, respectively."
msgstr ""
"Funktionsattributen med namnet :attr:`!func_X` har bytt namn till :attr:`!"
"__X__`, vilket frigör dessa namn i namnrymden för funktionsattribut för "
"användardefinierade attribut.  Således har :attr:`!func_closure`, :attr:`!"
"func_code`, :attr:`!func_defaults`, :attr:`!func_dict`, :attr:`!func_doc`, :"
"attr:`!func_globals`, :attr:`!func_name` bytt namn till :attr:`~function."
"__closure__`, :attr:`~function.__code__`, :attr:`~function.__defaults__`, :"
"attr:`~function.__dict__`, :attr:`~function.__doc__`, :attr:`~function."
"__globals__`, :attr:`~function.__name__`, respektive."

msgid ":meth:`!__nonzero__` is now :meth:`~object.__bool__`."
msgstr ":meth:`!__nonzero__` är nu :meth:`~object.__bool__`."

msgid "Builtins"
msgstr "Inbyggnader"

msgid ""
":pep:`3135`: New :func:`super`.  You can now invoke :func:`super` without "
"arguments and (assuming this is in a regular instance method defined inside "
"a :keyword:`class` statement) the right class and instance will "
"automatically be chosen.  With arguments, the behavior of :func:`super` is "
"unchanged."
msgstr ""
":pep:`3135`: Ny :func:`super`.  Du kan nu anropa :func:`super` utan argument "
"och (förutsatt att detta är i en vanlig instansmetod definierad i en :"
"keyword:`class`-sats) rätt klass och instans kommer automatiskt att väljas.  "
"Med argument är beteendet hos :func:`super` oförändrat."

msgid ""
":pep:`3111`: :func:`!raw_input` was renamed to :func:`input`.  That is, the "
"new :func:`input` function reads a line from :data:`sys.stdin` and returns "
"it with the trailing newline stripped. It raises :exc:`EOFError` if the "
"input is terminated prematurely. To get the old behavior of :func:`input`, "
"use ``eval(input())``."
msgstr ""
":pep:`3111`: :func:`!raw_input` har bytt namn till :func:`input`.  Det "
"innebär att den nya funktionen :func:`input` läser en rad från :data:`sys."
"stdin` och returnerar den med den efterföljande nya raden borttagen. Den ger "
"upphov till :exc:`EOFError` om inmatningen avslutas i förtid. För att få det "
"gamla beteendet hos :func:`input`, använd ``eval(input())``."

msgid ""
"A new built-in function :func:`next` was added to call the :meth:`~iterator."
"__next__` method on an object."
msgstr ""
"En ny inbyggd funktion :func:`next` lades till för att anropa metoden :meth:"
"`~iterator.__next__` på ett objekt."

msgid ""
"The :func:`round` function rounding strategy and return type have changed.  "
"Exact halfway cases are now rounded to the nearest even result instead of "
"away from zero.  (For example, ``round(2.5)`` now returns ``2`` rather than "
"``3``.)  ``round(x[, n])`` now delegates to ``x.__round__([n])`` instead of "
"always returning a float.  It generally returns an integer when called with "
"a single argument and a value of the same type as ``x`` when called with two "
"arguments."
msgstr ""
"Avrundningsstrategin och returtypen för funktionen :func:`round` har "
"ändrats.  Exakta halvvägsfall avrundas nu till närmaste jämna resultat "
"istället för bort från noll.  (Till exempel returnerar ``round(2,5)`` nu "
"``2`` i stället för ``3``.)  ``round(x[, n])`` delegerar nu till ``x."
"__round__([n])`` istället för att alltid returnera en float.  Den returnerar "
"i allmänhet ett heltal när den anropas med ett enda argument och ett värde "
"av samma typ som ``x`` när den anropas med två argument."

msgid "Moved :func:`!intern` to :func:`sys.intern`."
msgstr "Flyttat :func:`!intern` till :func:`sys.intern`."

msgid ""
"Removed: :func:`!apply`.  Instead of ``apply(f, args)`` use ``f(*args)``."
msgstr ""
"Borttaget: :func:`!apply`.  Istället för ``apply(f, args)`` använd "
"``f(*args)``."

msgid ""
"Removed :func:`callable`.  Instead of ``callable(f)`` you can use "
"``isinstance(f, collections.Callable)``.  The :func:`!operator.isCallable` "
"function is also gone."
msgstr ""
"Tog bort :func:`callable`.  Istället för ``callable(f)`` kan du använda "
"``isinstance(f, collections.Callable)``.  Funktionen :func:`!operator."
"isCallable` är också borta."

msgid ""
"Removed :func:`!coerce`.  This function no longer serves a purpose now that "
"classic classes are gone."
msgstr ""
"Tog bort :func:`!coerce`.  Denna funktion fyller inte längre något syfte nu "
"när klassiska klasser har försvunnit."

msgid ""
"Removed :func:`!execfile`.  Instead of ``execfile(fn)`` use ``exec(open(fn)."
"read())``."
msgstr ""
"Tog bort :func:`!execfile`.  Istället för ``execfile(fn)`` använd "
"``exec(open(fn).read())``."

msgid ""
"Removed the :class:`!file` type.  Use :func:`open`.  There are now several "
"different kinds of streams that open can return in the :mod:`io` module."
msgstr ""
"Tog bort :class:`!file`-typen.  Använd :func:`open`.  Det finns nu flera "
"olika typer av strömmar som open kan returnera i modulen :mod:`io`."

msgid ""
"Removed :func:`!reduce`.  Use :func:`functools.reduce` if you really need "
"it; however, 99 percent of the time an explicit :keyword:`for` loop is more "
"readable."
msgstr ""
"Tog bort :func:`!reduce`.  Använd :func:`functools.reduce` om du verkligen "
"behöver det, men 99 procent av tiden är en explicit :keyword:`for`-loop mer "
"läsbar."

msgid "Removed :func:`!reload`.  Use :func:`!imp.reload`."
msgstr "Tog bort :func:`!reload`.  Använd :func:`!imp.reload`."

msgid ""
"Removed. :meth:`!dict.has_key` -- use the :keyword:`in` operator instead."
msgstr ""
"Borttagen. :meth:`!dict.has_key` -- använd operatorn :keyword:`in` istället."

msgid "Build and C API Changes"
msgstr "Ändringar i Build och C API"

msgid ""
"Due to time constraints, here is a *very* incomplete list of changes to the "
"C API."
msgstr ""
"På grund av tidsbrist följer här en *mycket* ofullständig lista över "
"ändringar i C API."

msgid ""
"Support for several platforms was dropped, including but not limited to Mac "
"OS 9, BeOS, RISCOS, Irix, and Tru64."
msgstr ""
"Stöd för flera plattformar togs bort, inklusive men inte begränsat till Mac "
"OS 9, BeOS, RISCOS, Irix och Tru64."

msgid ":pep:`3118`: New Buffer API."
msgstr ":pep:`3118`: Nytt buffert-API."

msgid ":pep:`3121`: Extension Module Initialization & Finalization."
msgstr ":pep:`3121`: Initialisering och slutförande av tilläggsmodul."

msgid ":pep:`3123`: Making :c:macro:`PyObject_HEAD` conform to standard C."
msgstr ":pep:`3123`: Anpassning av :c:macro:`PyObject_HEAD` till standard C."

msgid "No more C API support for restricted execution."
msgstr "Inget mer C API-stöd för begränsad exekvering."

msgid ""
":c:func:`!PyNumber_Coerce`, :c:func:`!PyNumber_CoerceEx`, :c:func:`!"
"PyMember_Get`, and :c:func:`!PyMember_Set` C APIs are removed."
msgstr ""
"c API:erna :c:func:`!PyNumber_Coerce`, :c:func:`!PyNumber_CoerceEx`, :c:func:"
"`!PyMember_Get` och :c:func:`!PyMember_Set` tas bort."

msgid ""
"New C API :c:func:`PyImport_ImportModuleNoBlock`, works like :c:func:"
"`PyImport_ImportModule` but won't block on the import lock (returning an "
"error instead)."
msgstr ""
"Nytt C API :c:func:`PyImport_ImportModuleNoBlock`, fungerar som :c:func:"
"`PyImport_ImportModule` men blockerar inte importlåset (returnerar ett fel "
"istället)."

msgid ""
"Renamed the boolean conversion C-level slot and method: ``nb_nonzero`` is "
"now ``nb_bool``."
msgstr ""
"Byt namn på C-nivå slot och metod för boolesk konvertering: ``nb_nonzero`` "
"är nu ``nb_bool``."

msgid ""
"Removed :c:macro:`!METH_OLDARGS` and :c:macro:`!WITH_CYCLE_GC` from the C "
"API."
msgstr ""
"Tog bort :c:macro:`!METH_OLDARGS` och :c:macro:`!WITH_CYCLE_GC` från C API."

msgid "Performance"
msgstr "Prestanda"

msgid ""
"The net result of the 3.0 generalizations is that Python 3.0 runs the "
"pystone benchmark around 10% slower than Python 2.5.  Most likely the "
"biggest cause is the removal of special-casing for small integers. There's "
"room for improvement, but it will happen after 3.0 is released!"
msgstr ""
"Nettoresultatet av 3.0-generaliseringarna är att Python 3.0 kör pystone-"
"riktmärket cirka 10% slägre än Python 2.5.  Den största orsaken är troligen "
"borttagandet av special-casing för små heltal. Det finns utrymme för "
"förbättringar, men det kommer att ske efter att 3.0 har släppts!"

msgid "Porting To Python 3.0"
msgstr "Portning till Python 3.0"

msgid ""
"For porting existing Python 2.5 or 2.6 source code to Python 3.0, the best "
"strategy is the following:"
msgstr ""
"För portning av befintlig Python 2.5 eller 2.6 källkod till Python 3.0 är "
"den bästa strategin följande:"

msgid "(Prerequisite:) Start with excellent test coverage."
msgstr "(Förkunskapskrav:) Börja med utmärkt testtäckning."

msgid ""
"Port to Python 2.6.  This should be no more work than the average port from "
"Python 2.x to Python 2.(x+1).  Make sure all your tests pass."
msgstr ""
"Porta till Python 2.6.  Detta bör inte vara mer arbete än den genomsnittliga "
"porten från Python 2.x till Python 2.(x+1).  Se till att alla dina tester "
"godkänns."

msgid ""
"(Still using 2.6:) Turn on the :option:`!-3` command line switch. This "
"enables warnings about features that will be removed (or change) in 3.0.  "
"Run your test suite again, and fix code that you get warnings about until "
"there are no warnings left, and all your tests still pass."
msgstr ""
"(Använder fortfarande 2.6:) Slå på kommandoradsväxeln :option:`!-3`. Detta "
"aktiverar varningar om funktioner som kommer att tas bort (eller ändras) i "
"3.0.  Kör din testsvit igen och fixa kod som du får varningar om tills det "
"inte finns några varningar kvar och alla dina tester fortfarande är godkända."

msgid ""
"Run the ``2to3`` source-to-source translator over your source code tree.  "
"Run the result of the translation under Python 3.0.  Manually fix up any "
"remaining issues, fixing problems until all tests pass again."
msgstr ""
"Kör ``2to3`` käll-till-källa-översättaren över ditt källkodsträd.  Kör "
"resultatet av översättningen under Python 3.0.  Fixa manuellt upp eventuella "
"kvarvarande problem, fixa problem tills alla tester godkänns igen."

msgid ""
"It is not recommended to try to write source code that runs unchanged under "
"both Python 2.6 and 3.0; you'd have to use a very contorted coding style, e."
"g. avoiding ``print`` statements, metaclasses, and much more.  If you are "
"maintaining a library that needs to support both Python 2.6 and Python 3.0, "
"the best approach is to modify step 3 above by editing the 2.6 version of "
"the source code and running the ``2to3`` translator again, rather than "
"editing the 3.0 version of the source code."
msgstr ""
"Det är inte rekommenderat att försöka skriva källkod som körs oförändrad "
"under både Python 2.6 och 3.0; du skulle behöva använda en mycket förvrängd "
"kodningsstil, t.ex. undvika ``print``-satser, metaklasser och mycket mer.  "
"Om du underhåller ett bibliotek som behöver stödja både Python 2.6 och "
"Python 3.0, är det bästa tillvägagångssättet att ändra steg 3 ovan genom att "
"redigera 2.6-versionen av källkoden och köra ``2to3``-översättaren igen, "
"snarare än att redigera 3.0-versionen av källkoden."

msgid ""
"For porting C extensions to Python 3.0, please see :ref:`cporting-howto`."
msgstr "För portning av C-tillägg till Python 3.0, se :ref:`cporting-howto`."
