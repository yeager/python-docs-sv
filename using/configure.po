# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-17 14:16+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Configure Python"
msgstr ""

msgid "Build Requirements"
msgstr ""

msgid "Features and minimum versions required to build CPython:"
msgstr ""

msgid ""
"A `C11 <https://en.cppreference.com/w/c/11>`_ compiler. `Optional C11 "
"features <https://en.wikipedia.org/wiki/"
"C11_(C_standard_revision)#Optional_features>`_ are not required."
msgstr ""

msgid "On Windows, Microsoft Visual Studio 2017 or later is required."
msgstr ""

msgid ""
"Support for `IEEE 754 <https://en.wikipedia.org/wiki/IEEE_754>`_ floating-"
"point numbers and `floating-point Not-a-Number (NaN) <https://en.wikipedia."
"org/wiki/NaN#Floating_point>`_."
msgstr ""

msgid "Support for threads."
msgstr ""

msgid ""
"OpenSSL 1.1.1 is the minimum version and OpenSSL 3.0.16 is the recommended "
"minimum version for the :mod:`ssl` and :mod:`hashlib` extension modules."
msgstr ""

msgid "SQLite 3.15.2 for the :mod:`sqlite3` extension module."
msgstr ""

msgid "Tcl/Tk 8.5.12 for the :mod:`tkinter` module."
msgstr ""

msgid ""
"`libmpdec <https://www.bytereef.org/mpdecimal/doc/libmpdec/>`_ 2.5.0 for "
"the :mod:`decimal` module."
msgstr ""

msgid ""
"Autoconf 2.72 and aclocal 1.16.5 are required to regenerate the :file:"
"`configure` script."
msgstr ""

msgid "Tcl/Tk version 8.3.1 is now required."
msgstr ""

msgid ""
"On Windows, Visual Studio 2015 or later is now required. Tcl/Tk version 8.4 "
"is now required."
msgstr ""

msgid ""
"Selected C99 features are now required, like ``<stdint.h>`` and ``static "
"inline`` functions."
msgstr ""

msgid "Thread support and OpenSSL 1.0.2 are now required."
msgstr ""

msgid "OpenSSL 1.1.1 is now required. Require SQLite 3.7.15."
msgstr ""

msgid ""
"C11 compiler, IEEE 754 and NaN support are now required. On Windows, Visual "
"Studio 2017 or later is required. Tcl/Tk version 8.5.12 is now required for "
"the :mod:`tkinter` module."
msgstr ""

msgid "Autoconf 2.71, aclocal 1.16.5 and SQLite 3.15.2 are now required."
msgstr ""

msgid "Autoconf 2.72 is now required."
msgstr ""

msgid ""
"See also :pep:`7` \"Style Guide for C Code\" and :pep:`11` \"CPython "
"platform support\"."
msgstr ""

msgid "Generated files"
msgstr ""

msgid ""
"To reduce build dependencies, Python source code contains multiple generated "
"files. Commands to regenerate all generated files::"
msgstr ""

msgid ""
"make regen-all\n"
"make regen-stdlib-module-names\n"
"make regen-limited-abi\n"
"make regen-configure"
msgstr ""

msgid ""
"The ``Makefile.pre.in`` file documents generated files, their inputs, and "
"tools used to regenerate them. Search for ``regen-*`` make targets."
msgstr ""

msgid "configure script"
msgstr ""

msgid ""
"The ``make regen-configure`` command regenerates the ``aclocal.m4`` file and "
"the ``configure`` script using the ``Tools/build/regen-configure.sh`` shell "
"script which uses an Ubuntu container to get the same tools versions and "
"have a reproducible output."
msgstr ""

msgid "The container is optional, the following command can be run locally::"
msgstr ""

msgid "autoreconf -ivf -Werror"
msgstr ""

msgid ""
"The generated files can change depending on the exact ``autoconf-archive``, "
"``aclocal`` and ``pkg-config`` versions."
msgstr ""

msgid "Configure Options"
msgstr ""

msgid "List all :file:`configure` script options using::"
msgstr ""

msgid "./configure --help"
msgstr ""

msgid ""
"See also the :file:`Misc/SpecialBuilds.txt` in the Python source "
"distribution."
msgstr ""

msgid "General Options"
msgstr ""

msgid ""
"Support loadable extensions in the :mod:`!_sqlite` extension module (default "
"is no) of the :mod:`sqlite3` module."
msgstr ""

msgid ""
"See the :meth:`sqlite3.Connection.enable_load_extension` method of the :mod:"
"`sqlite3` module."
msgstr ""

msgid ""
"Disable IPv6 support (enabled by default if supported), see the :mod:"
"`socket` module."
msgstr ""

msgid "Define the size in bits of Python :class:`int` digits: 15 or 30 bits."
msgstr ""

msgid "By default, the digit size is 30."
msgstr ""

msgid "Define the ``PYLONG_BITS_IN_DIGIT`` to ``15`` or ``30``."
msgstr ""

msgid "See :data:`sys.int_info.bits_per_digit <sys.int_info>`."
msgstr ""

msgid "Set the Python executable suffix to *SUFFIX*."
msgstr ""

msgid ""
"The default suffix is ``.exe`` on Windows and macOS (``python.exe`` "
"executable), ``.js`` on Emscripten node, ``.html`` on Emscripten browser, ``."
"wasm`` on WASI, and an empty string on other platforms (``python`` "
"executable)."
msgstr ""

msgid ""
"The default suffix on WASM platform is one of ``.js``, ``.html`` or ``."
"wasm``."
msgstr ""

msgid ""
"Select the default time zone search path for :const:`zoneinfo.TZPATH`. See "
"the :ref:`Compile-time configuration <zoneinfo_data_compile_time_config>` of "
"the :mod:`zoneinfo` module."
msgstr ""

msgid ""
"Default: ``/usr/share/zoneinfo:/usr/lib/zoneinfo:/usr/share/lib/zoneinfo:/"
"etc/zoneinfo``."
msgstr ""

msgid "See :data:`os.pathsep` path separator."
msgstr ""

msgid ""
"Build the ``_decimal`` extension module using a thread-local context rather "
"than a coroutine-local context (default), see the :mod:`decimal` module."
msgstr ""

msgid "See :const:`decimal.HAVE_CONTEXTVAR` and the :mod:`contextvars` module."
msgstr ""

msgid "Override order to check db backends for the :mod:`dbm` module"
msgstr ""

msgid ""
"A valid value is a colon (``:``) separated string with the backend names:"
msgstr ""

msgid "``ndbm``;"
msgstr ""

msgid "``gdbm``;"
msgstr ""

msgid "``bdb``."
msgstr ""

msgid "Disable C locale coercion to a UTF-8 based locale (enabled by default)."
msgstr ""

msgid "Don't define the ``PY_COERCE_C_LOCALE`` macro."
msgstr ""

msgid "See :envvar:`PYTHONCOERCECLOCALE` and the :pep:`538`."
msgstr ""

msgid "Python library directory name (default is ``lib``)."
msgstr ""

msgid "Fedora and SuSE use ``lib64`` on 64-bit platforms."
msgstr ""

msgid "See :data:`sys.platlibdir`."
msgstr ""

msgid ""
"Directory of wheel packages used by the :mod:`ensurepip` module (none by "
"default)."
msgstr ""

msgid ""
"Some Linux distribution packaging policies recommend against bundling "
"dependencies. For example, Fedora installs wheel packages in the ``/usr/"
"share/python-wheels/`` directory and don't install the :mod:`!ensurepip."
"_bundled` package."
msgstr ""

msgid ""
"Whether configure should use :program:`pkg-config` to detect build "
"dependencies."
msgstr ""

msgid "``check`` (default): :program:`pkg-config` is optional"
msgstr ""

msgid "``yes``: :program:`pkg-config` is mandatory"
msgstr ""

msgid "``no``: configure does not use :program:`pkg-config` even when present"
msgstr ""

msgid "Turn on internal Python performance statistics gathering."
msgstr ""

msgid ""
"By default, statistics gathering is off. Use ``python3 -X pystats`` command "
"or set ``PYTHONSTATS=1`` environment variable to turn on statistics "
"gathering at Python startup."
msgstr ""

msgid ""
"At Python exit, dump statistics if statistics gathering was on and not "
"cleared."
msgstr ""

msgid "Effects:"
msgstr ""

msgid "Add :option:`-X pystats <-X>` command line option."
msgstr ""

msgid "Add :envvar:`!PYTHONSTATS` environment variable."
msgstr ""

msgid "Define the ``Py_STATS`` macro."
msgstr ""

msgid "Add functions to the :mod:`sys` module:"
msgstr ""

msgid ":func:`!sys._stats_on`: Turns on statistics gathering."
msgstr ""

msgid ":func:`!sys._stats_off`: Turns off statistics gathering."
msgstr ""

msgid ":func:`!sys._stats_clear`: Clears the statistics."
msgstr ""

msgid ""
":func:`!sys._stats_dump`: Dump statistics to file, and clears the statistics."
msgstr ""

msgid ""
"The statistics will be dumped to a arbitrary (probably unique) file in ``/"
"tmp/py_stats/`` (Unix) or ``C:\\temp\\py_stats\\`` (Windows). If that "
"directory does not exist, results will be printed on stderr."
msgstr ""

msgid "Use ``Tools/scripts/summarize_stats.py`` to read the stats."
msgstr ""

msgid "Statistics:"
msgstr ""

msgid "Opcode:"
msgstr ""

msgid "Specialization: success, failure, hit, deferred, miss, deopt, failures;"
msgstr ""

msgid "Execution count;"
msgstr ""

msgid "Pair count."
msgstr ""

msgid "Call:"
msgstr ""

msgid "Inlined Python calls;"
msgstr ""

msgid "PyEval calls;"
msgstr ""

msgid "Frames pushed;"
msgstr ""

msgid "Frame object created;"
msgstr ""

msgid ""
"Eval calls: vector, generator, legacy, function VECTORCALL, build class, "
"slot, function \"ex\", API, method."
msgstr ""

msgid "Object:"
msgstr ""

msgid "incref and decref;"
msgstr ""

msgid "interpreter incref and decref;"
msgstr ""

msgid "allocations: all, 512 bytes, 4 kiB, big;"
msgstr ""

msgid "free;"
msgstr ""

msgid "to/from free lists;"
msgstr ""

msgid "dictionary materialized/dematerialized;"
msgstr ""

msgid "type cache;"
msgstr ""

msgid "optimization attempts;"
msgstr ""

msgid "optimization traces created/executed;"
msgstr ""

msgid "uops executed."
msgstr ""

msgid "Garbage collector:"
msgstr ""

msgid "Garbage collections;"
msgstr ""

msgid "Objects visited;"
msgstr ""

msgid "Objects collected."
msgstr ""

msgid ""
"Enables support for running Python without the :term:`global interpreter "
"lock` (GIL): free threading build."
msgstr ""

msgid ""
"Defines the ``Py_GIL_DISABLED`` macro and adds ``\"t\"`` to :data:`sys."
"abiflags`."
msgstr ""

msgid "See :ref:`whatsnew313-free-threaded-cpython` for more detail."
msgstr ""

msgid ""
"Indicate how to integrate the :ref:`experimental just-in-time compiler "
"<whatsnew314-jit-compiler>`."
msgstr ""

msgid "``no``: Don't build the JIT."
msgstr ""

msgid ""
"``yes``: Enable the JIT. To disable it at runtime, set the environment "
"variable :envvar:`PYTHON_JIT=0 <PYTHON_JIT>`."
msgstr ""

msgid ""
"``yes-off``: Build the JIT, but disable it by default. To enable it at "
"runtime, set the environment variable :envvar:`PYTHON_JIT=1 <PYTHON_JIT>`."
msgstr ""

msgid ""
"``interpreter``: Enable the \"JIT interpreter\" (only useful for those "
"debugging the JIT itself). To disable it at runtime, set the environment "
"variable :envvar:`PYTHON_JIT=0 <PYTHON_JIT>`."
msgstr ""

msgid ""
"``--enable-experimental-jit=no`` is the default behavior if the option is "
"not provided, and ``--enable-experimental-jit`` is shorthand for ``--enable-"
"experimental-jit=yes``.  See :file:`Tools/jit/README.md` for more "
"information, including how to install the necessary build-time dependencies."
msgstr ""

msgid ""
"When building CPython with JIT enabled, ensure that your system has Python "
"3.11 or later installed."
msgstr ""

msgid "Path to ``pkg-config`` utility."
msgstr ""

msgid "``pkg-config`` options."
msgstr ""

msgid "C compiler options"
msgstr ""

msgid "C compiler command."
msgstr ""

msgid "C compiler flags."
msgstr ""

msgid "C preprocessor command."
msgstr ""

msgid "C preprocessor flags, e.g. :samp:`-I{include_dir}`."
msgstr ""

msgid "Linker options"
msgstr ""

msgid "Linker flags, e.g. :samp:`-L{library_directory}`."
msgstr ""

msgid "Libraries to pass to the linker, e.g. :samp:`-l{library}`."
msgstr ""

msgid "Name for machine-dependent library files."
msgstr ""

msgid "Options for third-party dependencies"
msgstr ""

msgid ""
"C compiler and linker flags to link Python to ``libbz2``, used by :mod:`bz2` "
"module, overriding ``pkg-config``."
msgstr ""

msgid ""
"C compiler and linker flags for ``libncurses`` or ``libncursesw``, used by :"
"mod:`curses` module, overriding ``pkg-config``."
msgstr ""

msgid "C compiler and linker flags for ``gdbm``."
msgstr ""

msgid ""
"C compiler and linker flags for ``libb2`` (:ref:`BLAKE2 <hashlib-blake2>`), "
"used by :mod:`hashlib` module, overriding ``pkg-config``."
msgstr ""

msgid ""
"C compiler and linker flags for ``libedit``, used by :mod:`readline` module, "
"overriding ``pkg-config``."
msgstr ""

msgid ""
"C compiler and linker flags for ``libffi``, used by :mod:`ctypes` module, "
"overriding ``pkg-config``."
msgstr ""

msgid ""
"C compiler and linker flags for ``libmpdec``, used by :mod:`decimal` module, "
"overriding ``pkg-config``."
msgstr ""

msgid ""
"These environment variables have no effect unless :option:`--with-system-"
"libmpdec` is specified."
msgstr ""

msgid ""
"C compiler and linker flags for ``liblzma``, used by :mod:`lzma` module, "
"overriding ``pkg-config``."
msgstr ""

msgid ""
"C compiler and linker flags for ``libreadline``, used by :mod:`readline` "
"module, overriding ``pkg-config``."
msgstr ""

msgid ""
"C compiler and linker flags for ``libsqlite3``, used by :mod:`sqlite3` "
"module, overriding ``pkg-config``."
msgstr ""

msgid ""
"C compiler and linker flags for ``libuuid``, used by :mod:`uuid` module, "
"overriding ``pkg-config``."
msgstr ""

msgid ""
"C compiler and linker flags for ``libzstd``, used by :mod:`compression.zstd` "
"module, overriding ``pkg-config``."
msgstr ""

msgid "C compiler and linker flags for PANEL, overriding ``pkg-config``."
msgstr ""

msgid ""
"C compiler and linker flags for ``libpanel`` or ``libpanelw``, used by :mod:"
"`curses.panel` module, overriding ``pkg-config``."
msgstr ""

msgid "C compiler and linker flags for TCLTK, overriding ``pkg-config``."
msgstr ""

msgid ""
"C compiler and linker flags for ``libzlib``, used by :mod:`gzip` module, "
"overriding ``pkg-config``."
msgstr ""

msgid "WebAssembly Options"
msgstr ""

msgid "Turn on dynamic linking support for WASM."
msgstr ""

msgid ""
"Dynamic linking enables ``dlopen``. File size of the executable increases "
"due to limited dead code elimination and additional features."
msgstr ""

msgid "Turn on pthreads support for WASM."
msgstr ""

msgid "Install Options"
msgstr ""

msgid ""
"Install architecture-independent files in PREFIX. On Unix, it defaults to :"
"file:`/usr/local`."
msgstr ""

msgid "This value can be retrieved at runtime using :data:`sys.prefix`."
msgstr ""

msgid ""
"As an example, one can use ``--prefix=\"$HOME/.local/\"`` to install a "
"Python in its home directory."
msgstr ""

msgid ""
"Install architecture-dependent files in EPREFIX, defaults to :option:`--"
"prefix`."
msgstr ""

msgid "This value can be retrieved at runtime using :data:`sys.exec_prefix`."
msgstr ""

msgid ""
"Don't build nor install test modules, like the :mod:`test` package or the :"
"mod:`!_testcapi` extension module (built and installed by default)."
msgstr ""

msgid "Select the :mod:`ensurepip` command run on Python installation:"
msgstr ""

msgid ""
"``upgrade`` (default): run ``python -m ensurepip --altinstall --upgrade`` "
"command."
msgstr ""

msgid "``install``: run ``python -m ensurepip --altinstall`` command;"
msgstr ""

msgid "``no``: don't run ensurepip;"
msgstr ""

msgid "Performance options"
msgstr ""

msgid ""
"Configuring Python using ``--enable-optimizations --with-lto`` (PGO + LTO) "
"is recommended for best performance. The experimental ``--enable-bolt`` flag "
"can also be used to improve performance."
msgstr ""

msgid ""
"Enable Profile Guided Optimization (PGO) using :envvar:`PROFILE_TASK` "
"(disabled by default)."
msgstr ""

msgid ""
"The C compiler Clang requires ``llvm-profdata`` program for PGO. On macOS, "
"GCC also requires it: GCC is just an alias to Clang on macOS."
msgstr ""

msgid ""
"Disable also semantic interposition in libpython if ``--enable-shared`` and "
"GCC is used: add ``-fno-semantic-interposition`` to the compiler and linker "
"flags."
msgstr ""

msgid ""
"During the build, you may encounter compiler warnings about profile data not "
"being available for some source files. These warnings are harmless, as only "
"a subset of the code is exercised during profile data acquisition. To "
"disable these warnings on Clang, manually suppress them by adding ``-Wno-"
"profile-instr-unprofiled`` to :envvar:`CFLAGS`."
msgstr ""

msgid "Use ``-fno-semantic-interposition`` on GCC."
msgstr ""

msgid ""
"Environment variable used in the Makefile: Python command line arguments for "
"the PGO generation task."
msgstr ""

msgid "Default: ``-m test --pgo --timeout=$(TESTTIMEOUT)``."
msgstr ""

msgid "Task failure is no longer ignored silently."
msgstr ""

msgid "Enable Link Time Optimization (LTO) in any build (disabled by default)."
msgstr ""

msgid ""
"The C compiler Clang requires ``llvm-ar`` for LTO (``ar`` on macOS), as well "
"as an LTO-aware linker (``ld.gold`` or ``lld``)."
msgstr ""

msgid "To use ThinLTO feature, use ``--with-lto=thin`` on Clang."
msgstr ""

msgid ""
"Use ThinLTO as the default optimization policy on Clang if the compiler "
"accepts the flag."
msgstr ""

msgid ""
"Enable usage of the `BOLT post-link binary optimizer <https://github.com/"
"llvm/llvm-project/tree/main/bolt>`_ (disabled by default)."
msgstr ""

msgid ""
"BOLT is part of the LLVM project but is not always included in their binary "
"distributions. This flag requires that ``llvm-bolt`` and ``merge-fdata`` are "
"available."
msgstr ""

msgid ""
"BOLT is still a fairly new project so this flag should be considered "
"experimental for now. Because this tool operates on machine code its success "
"is dependent on a combination of the build environment + the other "
"optimization configure args + the CPU architecture, and not all combinations "
"are supported. BOLT versions before LLVM 16 are known to crash BOLT under "
"some scenarios. Use of LLVM 16 or newer for BOLT optimization is strongly "
"encouraged."
msgstr ""

msgid ""
"The :envvar:`!BOLT_INSTRUMENT_FLAGS` and :envvar:`!BOLT_APPLY_FLAGS` :"
"program:`configure` variables can be defined to override the default set of "
"arguments for :program:`llvm-bolt` to instrument and apply BOLT data to "
"binaries, respectively."
msgstr ""

msgid ""
"Arguments to ``llvm-bolt`` when creating a `BOLT optimized binary <https://"
"github.com/facebookarchive/BOLT>`_."
msgstr ""

msgid "Arguments to ``llvm-bolt`` when instrumenting binaries."
msgstr ""

msgid ""
"Enable computed gotos in evaluation loop (enabled by default on supported "
"compilers)."
msgstr ""

msgid ""
"Enable interpreters using tail calls in CPython. If enabled, enabling PGO (:"
"option:`--enable-optimizations`) is highly recommended. This option "
"specifically requires a C compiler with proper tail call support, and the "
"`preserve_none <https://clang.llvm.org/docs/AttributeReference.html#preserve-"
"none>`_ calling convention. For example, Clang 19 and newer supports this "
"feature."
msgstr ""

msgid ""
"Disable the fast :ref:`mimalloc <mimalloc>` allocator (enabled by default)."
msgstr ""

msgid "See also :envvar:`PYTHONMALLOC` environment variable."
msgstr ""

msgid ""
"Disable the specialized Python memory allocator :ref:`pymalloc <pymalloc>` "
"(enabled by default)."
msgstr ""

msgid ""
"Disable static documentation strings to reduce the memory footprint (enabled "
"by default). Documentation strings defined in Python are not affected."
msgstr ""

msgid "Don't define the ``WITH_DOC_STRINGS`` macro."
msgstr ""

msgid "See the ``PyDoc_STRVAR()`` macro."
msgstr ""

msgid "Enable C-level code profiling with ``gprof`` (disabled by default)."
msgstr ""

msgid ""
"Add ``-fstrict-overflow`` to the C compiler flags (by default we add ``-fno-"
"strict-overflow`` instead)."
msgstr ""

msgid ""
"Deactivate remote debugging support described in :pep:`768` (enabled by "
"default). When this flag is provided the code that allows the interpreter to "
"schedule the execution of a Python file in a separate process as described "
"in :pep:`768` is not compiled. This includes both the functionality to "
"schedule code to be executed and the functionality to receive code to be "
"executed."
msgstr ""

msgid ""
"This macro is defined by default, unless Python is configured with :option:"
"`--without-remote-debug`."
msgstr ""

msgid ""
"Note that even if the macro is defined, remote debugging may not be "
"available (for example, on an incompatible platform)."
msgstr ""

msgid "Python Debug Build"
msgstr ""

msgid ""
"A debug build is Python built with the :option:`--with-pydebug` configure "
"option."
msgstr ""

msgid "Effects of a debug build:"
msgstr ""

msgid ""
"Display all warnings by default: the list of default warning filters is "
"empty in the :mod:`warnings` module."
msgstr ""

msgid "Add ``d`` to :data:`sys.abiflags`."
msgstr ""

msgid "Add :func:`!sys.gettotalrefcount` function."
msgstr ""

msgid "Add :option:`-X showrefcount <-X>` command line option."
msgstr ""

msgid ""
"Add :option:`-d` command line option and :envvar:`PYTHONDEBUG` environment "
"variable to debug the parser."
msgstr ""

msgid ""
"Add support for the ``__lltrace__`` variable: enable low-level tracing in "
"the bytecode evaluation loop if the variable is defined."
msgstr ""

msgid ""
"Install :ref:`debug hooks on memory allocators <default-memory-allocators>` "
"to detect buffer overflow and other memory errors."
msgstr ""

msgid "Define ``Py_DEBUG`` and ``Py_REF_DEBUG`` macros."
msgstr ""

msgid ""
"Add runtime checks: code surrounded by ``#ifdef Py_DEBUG`` and ``#endif``. "
"Enable ``assert(...)`` and ``_PyObject_ASSERT(...)`` assertions: don't set "
"the ``NDEBUG`` macro (see also the :option:`--with-assertions` configure "
"option). Main runtime checks:"
msgstr ""

msgid "Add sanity checks on the function arguments."
msgstr ""

msgid ""
"Unicode and int objects are created with their memory filled with a pattern "
"to detect usage of uninitialized objects."
msgstr ""

msgid ""
"Ensure that functions which can clear or replace the current exception are "
"not called with an exception raised."
msgstr ""

msgid "Check that deallocator functions don't change the current exception."
msgstr ""

msgid ""
"The garbage collector (:func:`gc.collect` function) runs some basic checks "
"on objects consistency."
msgstr ""

msgid ""
"The :c:macro:`!Py_SAFE_DOWNCAST()` macro checks for integer underflow and "
"overflow when downcasting from wide types to narrow types."
msgstr ""

msgid ""
"See also the :ref:`Python Development Mode <devmode>` and the :option:`--"
"with-trace-refs` configure option."
msgstr ""

msgid ""
"Release builds and debug builds are now ABI compatible: defining the "
"``Py_DEBUG`` macro no longer implies the ``Py_TRACE_REFS`` macro (see the :"
"option:`--with-trace-refs` option)."
msgstr ""

msgid "Debug options"
msgstr ""

msgid ""
":ref:`Build Python in debug mode <debug-build>`: define the ``Py_DEBUG`` "
"macro (disabled by default)."
msgstr ""

msgid "Enable tracing references for debugging purpose (disabled by default)."
msgstr ""

msgid "Define the ``Py_TRACE_REFS`` macro."
msgstr ""

msgid "Add :func:`sys.getobjects` function."
msgstr ""

msgid "Add :envvar:`PYTHONDUMPREFS` environment variable."
msgstr ""

msgid ""
"The :envvar:`PYTHONDUMPREFS` environment variable can be used to dump "
"objects and reference counts still alive at Python exit."
msgstr ""

msgid ":ref:`Statically allocated objects <static-types>` are not traced."
msgstr ""

msgid ""
"This build is now ABI compatible with release build and :ref:`debug build "
"<debug-build>`."
msgstr ""

msgid ""
"Build with C assertions enabled (default is no): ``assert(...);`` and "
"``_PyObject_ASSERT(...);``."
msgstr ""

msgid ""
"If set, the ``NDEBUG`` macro is not defined in the :envvar:`OPT` compiler "
"variable."
msgstr ""

msgid ""
"See also the :option:`--with-pydebug` option (:ref:`debug build <debug-"
"build>`) which also enables assertions."
msgstr ""

msgid "Enable Valgrind support (default is no)."
msgstr ""

msgid "Enable DTrace support (default is no)."
msgstr ""

msgid ""
"See :ref:`Instrumenting CPython with DTrace and SystemTap <instrumentation>`."
msgstr ""

msgid ""
"Enable AddressSanitizer memory error detector, ``asan`` (default is no). To "
"improve ASan detection capabilities you may also want to combine this with :"
"option:`--without-pymalloc` to disable the specialized small-object "
"allocator whose allocations are not tracked by ASan."
msgstr ""

msgid ""
"Enable MemorySanitizer allocation error detector, ``msan`` (default is no)."
msgstr ""

msgid ""
"Enable UndefinedBehaviorSanitizer undefined behaviour detector, ``ubsan`` "
"(default is no)."
msgstr ""

msgid "Enable ThreadSanitizer data race detector, ``tsan`` (default is no)."
msgstr ""

msgid "Enable building a shared Python library: ``libpython`` (default is no)."
msgstr ""

msgid ""
"Do not build ``libpythonMAJOR.MINOR.a`` and do not install ``python.o`` "
"(built and enabled by default)."
msgstr ""

msgid "Libraries options"
msgstr ""

msgid "Link against additional libraries (default is no)."
msgstr ""

msgid ""
"Build the :mod:`!pyexpat` module using an installed ``expat`` library "
"(default is no)."
msgstr ""

msgid ""
"Build the ``_decimal`` extension module using an installed ``mpdecimal`` "
"library, see the :mod:`decimal` module (default is yes)."
msgstr ""

msgid "Default to using the installed ``mpdecimal`` library."
msgstr ""

msgid ""
"A copy of the ``mpdecimal`` library sources will no longer be distributed "
"with Python 3.15."
msgstr ""

msgid ":option:`LIBMPDEC_CFLAGS` and :option:`LIBMPDEC_LIBS`."
msgstr ""

msgid "Designate a backend library for the :mod:`readline` module."
msgstr ""

msgid "readline: Use readline as the backend."
msgstr ""

msgid "editline: Use editline as the backend."
msgstr ""

msgid "Don't build the :mod:`readline` module (built by default)."
msgstr ""

msgid "Don't define the ``HAVE_LIBREADLINE`` macro."
msgstr ""

msgid ""
"Override ``libm`` math library to *STRING* (default is system-dependent)."
msgstr ""

msgid "Override ``libc`` C library to *STRING* (default is system-dependent)."
msgstr ""

msgid "Root of the OpenSSL directory."
msgstr ""

msgid "Set runtime library directory (rpath) for OpenSSL libraries:"
msgstr ""

msgid "``no`` (default): don't set rpath;"
msgstr ""

msgid ""
"``auto``: auto-detect rpath from :option:`--with-openssl` and ``pkg-config``;"
msgstr ""

msgid "*DIR*: set an explicit rpath."
msgstr ""

msgid "Security Options"
msgstr ""

msgid "Select hash algorithm for use in ``Python/pyhash.c``:"
msgstr ""

msgid "``siphash13`` (default);"
msgstr ""

msgid "``siphash24``;"
msgstr ""

msgid "``fnv``."
msgstr ""

msgid "``siphash13`` is added and it is the new default."
msgstr ""

msgid "Built-in hash modules:"
msgstr ""

msgid "``md5``;"
msgstr ""

msgid "``sha1``;"
msgstr ""

msgid "``sha256``;"
msgstr ""

msgid "``sha512``;"
msgstr ""

msgid "``sha3`` (with shake);"
msgstr ""

msgid "``blake2``."
msgstr ""

msgid "Override the OpenSSL default cipher suites string:"
msgstr ""

msgid "``python`` (default): use Python's preferred selection;"
msgstr ""

msgid "``openssl``: leave OpenSSL's defaults untouched;"
msgstr ""

msgid "*STRING*: use a custom string"
msgstr ""

msgid "See the :mod:`ssl` module."
msgstr ""

msgid ""
"The settings ``python`` and *STRING* also set TLS 1.2 as minimum protocol "
"version."
msgstr ""

msgid ""
"Disable compiler options that are `recommended by OpenSSF`_ for security "
"reasons with no performance overhead. If this option is not enabled, CPython "
"will be built based on safety compiler options with no slow down. When this "
"option is enabled, CPython will not be built with the compiler options "
"listed below."
msgstr ""

msgid ""
"The following compiler options are disabled with :option:`!--disable-safety`:"
msgstr ""

msgid ""
"`-fstack-protector-strong`_: Enable run-time checks for stack-based buffer "
"overflows."
msgstr ""

msgid ""
"`-Wtrampolines`_: Enable warnings about trampolines that require executable "
"stacks."
msgstr ""

msgid ""
"Enable compiler options that are `recommended by OpenSSF`_ for security "
"reasons which require overhead. If this option is not enabled, CPython will "
"not be built based on safety compiler options which performance impact. When "
"this option is enabled, CPython will be built with the compiler options "
"listed below."
msgstr ""

msgid ""
"The following compiler options are enabled with :option:`!--enable-slower-"
"safety`:"
msgstr ""

msgid ""
"`-D_FORTIFY_SOURCE=3`_: Fortify sources with compile- and run-time checks "
"for unsafe libc usage and buffer overflows."
msgstr ""

msgid "macOS Options"
msgstr ""

msgid "See :source:`Mac/README.rst`."
msgstr ""

msgid ""
"Create a universal binary build. *SDKDIR* specifies which macOS SDK should "
"be used to perform the build (default is no)."
msgstr ""

msgid ""
"Create a Python.framework rather than a traditional Unix install. Optional "
"*INSTALLDIR* specifies the installation path (default is no)."
msgstr ""

msgid ""
"Specify the kind of universal binary that should be created. This option is "
"only valid when :option:`--enable-universalsdk` is set."
msgstr ""

msgid "Options:"
msgstr ""

msgid "``universal2`` (x86-64 and arm64);"
msgstr ""

msgid "``32-bit`` (PPC and i386);"
msgstr ""

msgid "``64-bit``  (PPC64 and x86-64);"
msgstr ""

msgid "``3-way`` (i386, PPC and x86-64);"
msgstr ""

msgid "``intel`` (i386 and x86-64);"
msgstr ""

msgid "``intel-32`` (i386);"
msgstr ""

msgid "``intel-64`` (x86-64);"
msgstr ""

msgid "``all``  (PPC, i386, PPC64 and x86-64)."
msgstr ""

msgid ""
"Note that values for this configuration item are *not* the same as the "
"identifiers used for universal binary wheels on macOS. See the Python "
"Packaging User Guide for details on the `packaging platform compatibility "
"tags used on macOS <https://packaging.python.org/en/latest/specifications/"
"platform-compatibility-tags/#macos>`_"
msgstr ""

msgid ""
"Specify the name for the python framework on macOS only valid when :option:"
"`--enable-framework` is set (default: ``Python``)."
msgstr ""

msgid ""
"The Python standard library contains strings that are known to trigger "
"automated inspection tool errors when submitted for distribution by the "
"macOS and iOS App Stores. If enabled, this option will apply the list of "
"patches that are known to correct app store compliance. A custom patch file "
"can also be specified. This option is disabled by default."
msgstr ""

msgid "iOS Options"
msgstr ""

msgid "See :source:`iOS/README.rst`."
msgstr ""

msgid ""
"Create a Python.framework. Unlike macOS, the *INSTALLDIR* argument "
"specifying the installation path is mandatory."
msgstr ""

msgid "Specify the name for the framework (default: ``Python``)."
msgstr ""

msgid "Cross Compiling Options"
msgstr ""

msgid ""
"Cross compiling, also known as cross building, can be used to build Python "
"for another CPU architecture or platform. Cross compiling requires a Python "
"interpreter for the build platform. The version of the build Python must "
"match the version of the cross compiled host Python."
msgstr ""

msgid ""
"configure for building on BUILD, usually guessed by :program:`config.guess`."
msgstr ""

msgid "cross-compile to build programs to run on HOST (target platform)"
msgstr ""

msgid "path to build ``python`` binary for cross compiling"
msgstr ""

msgid "An environment variable that points to a file with configure overrides."
msgstr ""

msgid "Example *config.site* file:"
msgstr ""

msgid ""
"# config.site-aarch64\n"
"ac_cv_buggy_getaddrinfo=no\n"
"ac_cv_file__dev_ptmx=yes\n"
"ac_cv_file__dev_ptc=no"
msgstr ""

msgid "Program to run CPython for the host platform for cross-compilation."
msgstr ""

msgid "Cross compiling example::"
msgstr ""

msgid ""
"CONFIG_SITE=config.site-aarch64 ../configure \\\n"
"    --build=x86_64-pc-linux-gnu \\\n"
"    --host=aarch64-unknown-linux-gnu \\\n"
"    --with-build-python=../x86_64/python"
msgstr ""

msgid "Python Build System"
msgstr ""

msgid "Main files of the build system"
msgstr ""

msgid ":file:`configure.ac` => :file:`configure`;"
msgstr ""

msgid ""
":file:`Makefile.pre.in` => :file:`Makefile` (created by :file:`configure`);"
msgstr ""

msgid ":file:`pyconfig.h` (created by :file:`configure`);"
msgstr ""

msgid ""
":file:`Modules/Setup`: C extensions built by the Makefile using :file:"
"`Module/makesetup` shell script;"
msgstr ""

msgid "Main build steps"
msgstr ""

msgid "C files (``.c``) are built as object files (``.o``)."
msgstr ""

msgid "A static ``libpython`` library (``.a``) is created from objects files."
msgstr ""

msgid ""
"``python.o`` and the static ``libpython`` library are linked into the final "
"``python`` program."
msgstr ""

msgid "C extensions are built by the Makefile (see :file:`Modules/Setup`)."
msgstr ""

msgid "Main Makefile targets"
msgstr ""

msgid "make"
msgstr ""

msgid ""
"For the most part, when rebuilding after editing some code or refreshing "
"your checkout from upstream, all you need to do is execute ``make``, which "
"(per Make's semantics) builds the default target, the first one defined in "
"the Makefile.  By tradition (including in the CPython project) this is "
"usually the ``all`` target. The ``configure`` script expands an ``autoconf`` "
"variable, ``@DEF_MAKE_ALL_RULE@`` to describe precisely which targets ``make "
"all`` will build. The three choices are:"
msgstr ""

msgid "``profile-opt`` (configured with ``--enable-optimizations``)"
msgstr ""

msgid ""
"``build_wasm`` (chosen if the host platform matches ``wasm32-wasi*`` or "
"``wasm32-emscripten``)"
msgstr ""

msgid ""
"``build_all`` (configured without explicitly using either of the others)"
msgstr ""

msgid ""
"Depending on the most recent source file changes, Make will rebuild any "
"targets (object files and executables) deemed out-of-date, including running "
"``configure`` again if necessary. Source/target dependencies are many and "
"maintained manually however, so Make sometimes doesn't have all the "
"information necessary to correctly detect all targets which need to be "
"rebuilt.  Depending on which targets aren't rebuilt, you might experience a "
"number of problems. If you have build or test problems which you can't "
"otherwise explain, ``make clean && make`` should work around most dependency "
"problems, at the expense of longer build times."
msgstr ""

msgid "make platform"
msgstr ""

msgid ""
"Build the ``python`` program, but don't build the standard library extension "
"modules. This generates a file named ``platform`` which contains a single "
"line describing the details of the build platform, e.g., ``macosx-14.3-"
"arm64-3.12`` or ``linux-x86_64-3.13``."
msgstr ""

msgid "make profile-opt"
msgstr ""

msgid ""
"Build Python using profile-guided optimization (PGO).  You can use the "
"configure :option:`--enable-optimizations` option to make this the default "
"target of the ``make`` command (``make all`` or just ``make``)."
msgstr ""

msgid "make clean"
msgstr ""

msgid "Remove built files."
msgstr ""

msgid "make distclean"
msgstr ""

msgid ""
"In addition to the work done by ``make clean``, remove files created by the "
"configure script.  ``configure`` will have to be run before building again. "
"[#]_"
msgstr ""

msgid "make install"
msgstr ""

msgid "Build the ``all`` target and install Python."
msgstr ""

msgid "make test"
msgstr ""

msgid ""
"Build the ``all`` target and run the Python test suite with the ``--fast-"
"ci`` option without GUI tests. Variables:"
msgstr ""

msgid "``TESTOPTS``: additional regrtest command-line options."
msgstr ""

msgid "``TESTPYTHONOPTS``: additional Python command-line options."
msgstr ""

msgid "``TESTTIMEOUT``: timeout in seconds (default: 10 minutes)."
msgstr ""

msgid "make ci"
msgstr ""

msgid ""
"This is similar to ``make test``, but uses the ``-ugui`` to also run GUI "
"tests."
msgstr ""

msgid "make buildbottest"
msgstr ""

msgid ""
"This is similar to ``make test``, but uses the ``--slow-ci`` option and "
"default timeout of 20 minutes, instead of ``--fast-ci`` option."
msgstr ""

msgid "make regen-all"
msgstr ""

msgid ""
"Regenerate (almost) all generated files. These include (but are not limited "
"to) bytecode cases, and parser generator file. ``make regen-stdlib-module-"
"names`` and ``autoconf`` must be run separately for the remaining `generated "
"files <#generated-files>`_."
msgstr ""

msgid "C extensions"
msgstr ""

msgid ""
"Some C extensions are built as built-in modules, like the ``sys`` module. "
"They are built with the ``Py_BUILD_CORE_BUILTIN`` macro defined. Built-in "
"modules have no ``__file__`` attribute:"
msgstr ""

msgid ""
">>> import sys\n"
">>> sys\n"
"<module 'sys' (built-in)>\n"
">>> sys.__file__\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"AttributeError: module 'sys' has no attribute '__file__'"
msgstr ""

msgid ""
"Other C extensions are built as dynamic libraries, like the ``_asyncio`` "
"module. They are built with the ``Py_BUILD_CORE_MODULE`` macro defined. "
"Example on Linux x86-64:"
msgstr ""

msgid ""
">>> import _asyncio\n"
">>> _asyncio\n"
"<module '_asyncio' from '/usr/lib64/python3.9/lib-dynload/_asyncio."
"cpython-39-x86_64-linux-gnu.so'>\n"
">>> _asyncio.__file__\n"
"'/usr/lib64/python3.9/lib-dynload/_asyncio.cpython-39-x86_64-linux-gnu.so'"
msgstr ""

msgid ""
":file:`Modules/Setup` is used to generate Makefile targets to build C "
"extensions. At the beginning of the files, C extensions are built as built-"
"in modules. Extensions defined after the ``*shared*`` marker are built as "
"dynamic libraries."
msgstr ""

msgid ""
"The :c:macro:`!PyAPI_FUNC()`, :c:macro:`!PyAPI_DATA()` and :c:macro:"
"`PyMODINIT_FUNC` macros of :file:`Include/exports.h` are defined differently "
"depending if the ``Py_BUILD_CORE_MODULE`` macro is defined:"
msgstr ""

msgid "Use ``Py_EXPORTED_SYMBOL`` if the ``Py_BUILD_CORE_MODULE`` is defined"
msgstr ""

msgid "Use ``Py_IMPORTED_SYMBOL`` otherwise."
msgstr ""

msgid ""
"If the ``Py_BUILD_CORE_BUILTIN`` macro is used by mistake on a C extension "
"built as a shared library, its :samp:`PyInit_{xxx}()` function is not "
"exported, causing an :exc:`ImportError` on import."
msgstr ""

msgid "Compiler and linker flags"
msgstr ""

msgid ""
"Options set by the ``./configure`` script and environment variables and used "
"by ``Makefile``."
msgstr ""

msgid "Preprocessor flags"
msgstr ""

msgid ""
"Value of :envvar:`CPPFLAGS` variable passed to the ``./configure`` script."
msgstr ""

msgid ""
"(Objective) C/C++ preprocessor flags, e.g. :samp:`-I{include_dir}` if you "
"have headers in a nonstandard directory *include_dir*."
msgstr ""

msgid ""
"Both :envvar:`CPPFLAGS` and :envvar:`LDFLAGS` need to contain the shell's "
"value to be able to build extension modules using the directories specified "
"in the environment variables."
msgstr ""

msgid ""
"Extra preprocessor flags added for building the interpreter object files."
msgstr ""

msgid ""
"Default: ``$(BASECPPFLAGS) -I. -I$(srcdir)/Include $(CONFIGURE_CPPFLAGS) "
"$(CPPFLAGS)``."
msgstr ""

msgid "Compiler flags"
msgstr ""

msgid "Example: ``gcc -pthread``."
msgstr ""

msgid "C++ compiler command."
msgstr ""

msgid "Example: ``g++ -pthread``."
msgstr ""

msgid ""
":envvar:`CFLAGS_NODIST` is used for building the interpreter and stdlib C "
"extensions.  Use it when a compiler flag should *not* be part of :envvar:"
"`CFLAGS` once Python is installed (:gh:`65320`)."
msgstr ""

msgid "In particular, :envvar:`CFLAGS` should not contain:"
msgstr ""

msgid ""
"the compiler flag ``-I`` (for setting the search path for include files). "
"The ``-I`` flags are processed from left to right, and any flags in :envvar:"
"`CFLAGS` would take precedence over user- and package-supplied ``-I`` flags."
msgstr ""

msgid ""
"hardening flags such as ``-Werror`` because distributions cannot control "
"whether packages installed by users conform to such heightened standards."
msgstr ""

msgid ""
"Options passed to the :mod:`compileall` command line when building PYC files "
"in ``make install``. Default: ``-j0``."
msgstr ""

msgid "Extra C compiler flags."
msgstr ""

msgid ""
"Value of :envvar:`CFLAGS` variable passed to the ``./configure`` script."
msgstr ""

msgid ""
"Value of :envvar:`CFLAGS_NODIST` variable passed to the ``./configure`` "
"script."
msgstr ""

msgid "Base compiler flags."
msgstr ""

msgid "Optimization flags."
msgstr ""

msgid "Strict or non-strict aliasing flags used to compile ``Python/dtoa.c``."
msgstr ""

msgid "Compiler flags used to build a shared library."
msgstr ""

msgid "For example, ``-fPIC`` is used on Linux and on BSD."
msgstr ""

msgid "Extra C flags added for building the interpreter object files."
msgstr ""

msgid ""
"Default: ``$(CCSHARED)`` when :option:`--enable-shared` is used, or an empty "
"string otherwise."
msgstr ""

msgid ""
"Default: ``$(BASECFLAGS) $(OPT) $(CONFIGURE_CFLAGS) $(CFLAGS) "
"$(EXTRA_CFLAGS)``."
msgstr ""

msgid ""
"Default: ``$(CONFIGURE_CFLAGS_NODIST) $(CFLAGS_NODIST) -I$(srcdir)/Include/"
"internal``."
msgstr ""

msgid "C flags used for building the interpreter object files."
msgstr ""

msgid ""
"Default: ``$(PY_CFLAGS) $(PY_CFLAGS_NODIST) $(PY_CPPFLAGS) "
"$(CFLAGSFORSHARED)``."
msgstr ""

msgid "Default: ``$(PY_STDMODULE_CFLAGS) -DPy_BUILD_CORE``."
msgstr ""

msgid ""
"Compiler flags to build a standard library extension module as a built-in "
"module, like the :mod:`posix` module."
msgstr ""

msgid "Default: ``$(PY_STDMODULE_CFLAGS) -DPy_BUILD_CORE_BUILTIN``."
msgstr ""

msgid "Purify command. Purify is a memory debugger program."
msgstr ""

msgid "Default: empty string (not used)."
msgstr ""

msgid "Linker flags"
msgstr ""

msgid ""
"Linker command used to build programs like ``python`` and ``_testembed``."
msgstr ""

msgid "Default: ``$(PURIFY) $(CC)``."
msgstr ""

msgid ""
"Value of :envvar:`LDFLAGS` variable passed to the ``./configure`` script."
msgstr ""

msgid ""
"Avoid assigning :envvar:`CFLAGS`, :envvar:`LDFLAGS`, etc. so users can use "
"them on the command line to append to these values without stomping the pre-"
"set values."
msgstr ""

msgid ""
":envvar:`LDFLAGS_NODIST` is used in the same manner as :envvar:"
"`CFLAGS_NODIST`.  Use it when a linker flag should *not* be part of :envvar:"
"`LDFLAGS` once Python is installed (:gh:`65320`)."
msgstr ""

msgid "In particular, :envvar:`LDFLAGS` should not contain:"
msgstr ""

msgid ""
"the compiler flag ``-L`` (for setting the search path for libraries). The ``-"
"L`` flags are processed from left to right, and any flags in :envvar:"
"`LDFLAGS` would take precedence over user- and package-supplied ``-L`` flags."
msgstr ""

msgid ""
"Value of :envvar:`LDFLAGS_NODIST` variable passed to the ``./configure`` "
"script."
msgstr ""

msgid ""
"Linker flags, e.g. :samp:`-L{lib_dir}` if you have libraries in a "
"nonstandard directory *lib_dir*."
msgstr ""

msgid ""
"Linker flags to pass libraries to the linker when linking the Python "
"executable."
msgstr ""

msgid "Example: ``-lrt``."
msgstr ""

msgid "Command to build a shared library."
msgstr ""

msgid "Default: ``@LDSHARED@ $(PY_LDFLAGS)``."
msgstr ""

msgid "Command to build ``libpython`` shared library."
msgstr ""

msgid "Default: ``@BLDSHARED@ $(PY_CORE_LDFLAGS)``."
msgstr ""

msgid "Default: ``$(CONFIGURE_LDFLAGS) $(LDFLAGS)``."
msgstr ""

msgid "Default: ``$(CONFIGURE_LDFLAGS_NODIST) $(LDFLAGS_NODIST)``."
msgstr ""

msgid "Linker flags used for building the interpreter object files."
msgstr ""

msgid "Footnotes"
msgstr ""

msgid ""
"``git clean -fdx`` is an even more extreme way to \"clean\" your checkout. "
"It removes all files not known to Git. When bug hunting using ``git "
"bisect``, this is `recommended between probes <https://github.com/python/"
"cpython/issues/114505#issuecomment-1907021718>`_ to guarantee a completely "
"clean build. **Use with care**, as it will delete all files not checked into "
"Git, including your new, uncommitted work."
msgstr ""
