# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's New In Python 3.6"
msgstr "Vad är nytt i Python 3.6"

msgid "Editors"
msgstr "Redigerare"

msgid "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"
msgstr "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"

msgid ""
"This article explains the new features in Python 3.6, compared to 3.5. "
"Python 3.6 was released on December 23, 2016.  See the `changelog <https://"
"docs.python.org/3.6/whatsnew/changelog.html>`_ for a full list of changes."
msgstr ""
"I den här artikeln förklaras de nya funktionerna i Python 3.6 jämfört med "
"3.5. Python 3.6 släpptes den 23 december 2016.  Se `changelog <https://docs."
"python.org/3.6/whatsnew/changelog.html>`_ för en fullständig lista över "
"ändringar."

msgid ":pep:`494` - Python 3.6 Release Schedule"
msgstr ":pep:`494` - Python 3.6 Utgivningsschema"

msgid "Summary -- Release highlights"
msgstr "Sammanfattning -- Release highlights"

msgid "New syntax features:"
msgstr "Nya syntaxfunktioner:"

msgid ":ref:`PEP 498 <whatsnew36-pep498>`, formatted string literals."
msgstr ":ref:`PEP 498 <whatsnew36-pep498>`, formaterade stränglitteraler."

msgid ":ref:`PEP 515 <whatsnew36-pep515>`, underscores in numeric literals."
msgstr ""
":ref:`PEP 515 <whatsnew36-pep515>`, understrykningstecken i numeriska "
"literaler."

msgid ":ref:`PEP 526 <whatsnew36-pep526>`, syntax for variable annotations."
msgstr ":ref:`PEP 526 <whatsnew36-pep526>`, syntax för variabelkommentarer."

msgid ":ref:`PEP 525 <whatsnew36-pep525>`, asynchronous generators."
msgstr ":ref:`PEP 525 <whatsnew36-pep525>`, asynkrona generatorer."

msgid ":ref:`PEP 530 <whatsnew36-pep530>`: asynchronous comprehensions."
msgstr ":ref:`PEP 530 <whatsnew36-pep530>`: asynkrona förståelser."

msgid "New library modules:"
msgstr "Nya biblioteksmoduler:"

msgid ""
":mod:`secrets`: :ref:`PEP 506 -- Adding A Secrets Module To The Standard "
"Library <whatsnew36-pep506>`."
msgstr ""
":mod:`secrets`: :ref:`PEP 506 -- Att lägga till en Secrets-modul till "
"standardbiblioteket <whatsnew36-pep506>`."

msgid "CPython implementation improvements:"
msgstr "Förbättringar av CPython-implementeringen:"

msgid ""
"The :ref:`dict <typesmapping>` type has been reimplemented to use a :ref:"
"`more compact representation <whatsnew36-compactdict>` based on `a proposal "
"by Raymond Hettinger <https://mail.python.org/pipermail/python-dev/2012-"
"December/123028.html>`_ and similar to the `PyPy dict implementation`_.  "
"This resulted in dictionaries using 20% to 25% less memory when compared to "
"Python 3.5."
msgstr ""
"Typen :ref:`dict <typesmapping>` har omimplementerats för att använda en :"
"ref:`mer kompakt representation <whatsnew36-compactdict>` baserad på `ett "
"förslag av Raymond Hettinger &lt;https://mail.python.org/pipermail/python-"
"dev/2012-December/123028.html&gt;`_ och liknande `PyPy dict-"
"implementationen`_.  Detta resulterade i att ordböcker använde 20% to 25% "
"less minne jämfört med Python 3.5."

msgid ""
"Customization of class creation has been simplified with the :ref:`new "
"protocol <whatsnew36-pep487>`."
msgstr ""
"Anpassning av klassskapande har förenklats med :ref:`nytt protokoll "
"<whatsnew36-pep487>`."

msgid ""
"The class attribute definition order is :ref:`now preserved  <whatsnew36-"
"pep520>`."
msgstr ""
"Klassattributets definitionsordning är :ref:`now preserved <whatsnew36-"
"pep520>`."

msgid ""
"The order of elements in ``**kwargs`` now :ref:`corresponds to the order "
"<whatsnew36-pep468>` in which keyword arguments were passed to the function."
msgstr ""
"Ordningen på elementen i ``**kwargs`` motsvarar nu :ref:``ordningen "
"<whatsnew36-pep468>` i vilken nyckelordsargumenten skickades till funktionen."

msgid ""
"DTrace and SystemTap :ref:`probing support <whatsnew36-tracing>` has been "
"added."
msgstr ""
"DTrace och SystemTap :ref:``probing support <whatsnew36-tracing>`` har lagts "
"till."

msgid ""
"The new :ref:`PYTHONMALLOC <whatsnew36-pythonmalloc>` environment variable "
"can now be used to debug the interpreter memory allocation and access errors."
msgstr ""
"Den nya miljövariabeln :ref:`PYTHONMALLOC <whatsnew36-pythonmalloc>` kan nu "
"användas för att felsöka fel i tolkens minnesallokering och åtkomst."

msgid "Significant improvements in the standard library:"
msgstr "Betydande förbättringar i standardbiblioteket:"

msgid ""
"The :mod:`asyncio` module has received new features, significant usability "
"and performance improvements, and a fair amount of bug fixes. Starting with "
"Python 3.6 the ``asyncio`` module is no longer provisional and its API is "
"considered stable."
msgstr ""
"Modulen :mod:`asyncio` har fått nya funktioner, betydande förbättringar av "
"användbarhet och prestanda samt en hel del buggfixar. Från och med Python "
"3.6 är modulen ``asyncio`` inte längre provisorisk och dess API anses vara "
"stabilt."

msgid ""
"A new :ref:`file system path protocol <whatsnew36-pep519>` has been "
"implemented to support :term:`path-like objects <path-like object>`. All "
"standard library functions operating on paths have been updated to work with "
"the new protocol."
msgstr ""
"Ett nytt :ref:`filsystemets sökvägsprotokoll <whatsnew36-pep519>` har "
"implementerats för att stödja :term:`sökvägsliknande objekt <path-like "
"object>`. Alla standardbiblioteksfunktioner som arbetar med sökvägar har "
"uppdaterats för att fungera med det nya protokollet."

msgid ""
"The :mod:`datetime` module has gained support for :ref:`Local Time "
"Disambiguation <whatsnew36-pep495>`."
msgstr ""
"Modulen :mod:`datetime` har fått stöd för :ref:`Local Time Disambiguation "
"<whatsnew36-pep495>`."

msgid ""
"The :mod:`typing` module received a number of :ref:`improvements <whatsnew36-"
"typing>`."
msgstr ""
"Modulen :mod:`typing` har fått ett antal :ref:`förbättringar <whatsnew36-"
"typing>`."

msgid ""
"The :mod:`tracemalloc` module has been significantly reworked and is now "
"used to provide better output for :exc:`ResourceWarning` as well as provide "
"better diagnostics for memory allocation errors. See the :ref:`PYTHONMALLOC "
"section <whatsnew36-pythonmalloc>` for more information."
msgstr ""
"Modulen :mod:`tracemalloc` har omarbetats avsevärt och används nu för att ge "
"bättre utdata för :exc:`ResourceWarning` samt för att ge bättre diagnostik "
"för minnesallokeringsfel. Se :ref:`PYTHONMALLOC-avsnittet <whatsnew36-"
"pythonmalloc>` för mer information."

msgid "Security improvements:"
msgstr "Förbättringar av säkerheten:"

msgid ""
"The new :mod:`secrets` module has been added to simplify the generation of "
"cryptographically strong pseudo-random numbers suitable for managing secrets "
"such as account authentication, tokens, and similar."
msgstr ""
"Den nya modulen :mod:`secrets` har lagts till för att förenkla genereringen "
"av kryptografiskt starka pseudoslumptal som lämpar sig för hantering av "
"hemligheter som kontoautentisering, tokens och liknande."

msgid ""
"On Linux, :func:`os.urandom` now blocks until the system urandom entropy "
"pool is initialized to increase the security. See the :pep:`524` for the "
"rationale."
msgstr ""
"På Linux blockerar :func:`os.urandom` nu tills systemets urandom-entropipool "
"har initialiserats för att öka säkerheten. Se :pep:`524` för förklaringen."

msgid "The :mod:`hashlib` and :mod:`ssl` modules now support OpenSSL 1.1.0."
msgstr "Modulerna :mod:`hashlib` och :mod:`ssl` har nu stöd för OpenSSL 1.1.0."

msgid ""
"The default settings and feature set of the :mod:`ssl` module have been "
"improved."
msgstr ""
"Standardinställningarna och funktionsuppsättningen för modulen :mod:`ssl` "
"har förbättrats."

msgid ""
"The :mod:`hashlib` module received support for the BLAKE2, SHA-3 and SHAKE "
"hash algorithms and the :func:`~hashlib.scrypt` key derivation function."
msgstr ""
"Modulen :mod:`hashlib` fick stöd för hashalgoritmerna BLAKE2, SHA-3 och "
"SHAKE samt nyckelavledningsfunktionen :func:`~hashlib.scrypt`."

msgid "Windows improvements:"
msgstr "Förbättringar i Windows:"

msgid ""
":ref:`PEP 528 <whatsnew36-pep528>` and :ref:`PEP 529 <whatsnew36-pep529>`, "
"Windows filesystem and console encoding changed to UTF-8."
msgstr ""
":ref:`PEP 528 <whatsnew36-pep528>` och :ref:`PEP 529 <whatsnew36-pep529>`, "
"Windows filsystem och konsolkodning ändras till UTF-8."

msgid ""
"The ``py.exe`` launcher, when used interactively, no longer prefers Python 2 "
"over Python 3 when the user doesn't specify a version (via command line "
"arguments or a config file).  Handling of shebang lines remains unchanged - "
"\"python\" refers to Python 2 in that case."
msgstr ""
"Startprogrammet ``py.exe``, när det används interaktivt, föredrar inte "
"längre Python 2 framför Python 3 när användaren inte anger någon version "
"(via kommandoradsargument eller en konfigurationsfil).  Hanteringen av "
"shebang-rader förblir oförändrad - \"python\" hänvisar till Python 2 i det "
"fallet."

msgid ""
"``python.exe`` and ``pythonw.exe`` have been marked as long-path aware, "
"which means that the 260 character path limit may no longer apply. See :ref:"
"`removing the MAX_PATH limitation <max-path>` for details."
msgstr ""
"``python.exe`` och ``pythonw.exe`` har markerats som medvetna om långa "
"sökvägar, vilket innebär att sökvägsgränsen på 260 tecken kanske inte längre "
"gäller. Se :ref:`borttagande av MAX_PATH-begränsningen <max-path>` för mer "
"information."

msgid ""
"A ``._pth`` file can be added to force isolated mode and fully specify all "
"search paths to avoid registry and environment lookup. See :ref:`the "
"documentation <windows_finding_modules>` for more information."
msgstr ""
"En fil med namnet ``._pth`` kan läggas till för att tvinga fram isolerat "
"läge och fullständigt ange alla sökvägar för att undvika register- och "
"miljöuppslagning. Se :ref:``dokumentationen <windows_finding_modules>` för "
"mer information."

msgid ""
"A ``python36.zip`` file now works as a landmark to infer :envvar:"
"`PYTHONHOME`. See :ref:`the documentation <windows_finding_modules>` for "
"more information."
msgstr ""
"En ``python36.zip``-fil fungerar nu som ett landmärke för att härleda :"
"envvar:`PYTHONHOME`. Se :ref:``dokumentationen <windows_finding_modules>` "
"för mer information."

msgid "New Features"
msgstr "Nya funktioner"

msgid "PEP 498: Formatted string literals"
msgstr "PEP 498: Formaterade stränglitteraler"

msgid ""
":pep:`498` introduces a new kind of string literals: *f-strings*, or :ref:"
"`formatted string literals <f-strings>`."
msgstr ""
":pep:`498` introducerar en ny typ av stränglitteraler: *f-strings*, eller :"
"ref:``formaterade stränglitteraler <f-strings>`."

msgid ""
"Formatted string literals are prefixed with ``'f'`` and are similar to the "
"format strings accepted by :meth:`str.format`.  They contain replacement "
"fields surrounded by curly braces.  The replacement fields are expressions, "
"which are evaluated at run time, and then formatted using the :func:`format` "
"protocol::"
msgstr ""
"Formaterade stränglitteraler har prefixet ``'f'`` och liknar de "
"formatsträngar som accepteras av :meth:`str.format`.  De innehåller "
"ersättningsfält omgivna av hakparenteser.  Ersättningsfälten är uttryck som "
"utvärderas vid körning och sedan formateras med hjälp av :func:`format`-"
"protokollet::"

msgid ""
">>> name = \"Fred\"\n"
">>> f\"He said his name is {name}.\"\n"
"'He said his name is Fred.'\n"
">>> width = 10\n"
">>> precision = 4\n"
">>> value = decimal.Decimal(\"12.34567\")\n"
">>> f\"result: {value:{width}.{precision}}\"  # nested fields\n"
"'result:      12.35'"
msgstr ""
">>> namn = \"Fred\"\n"
">>> f\"Han sa att hans namn är {name}.\"\n"
"\"Han sa att hans namn är Fred\n"
">>> bredd = 10\n"
">>> precision = 4\n"
">>> värde = decimal.decimal(\"12.34567\")\n"
">>> f\"resultat: {värde:{width}.{precision}}\"  # nästlade fält\n"
"\"resultat: 12,35"

msgid ":pep:`498` -- Literal String Interpolation."
msgstr ":pep:`498` -- Interpolation av bokstavliga strängar."

msgid "PEP written and implemented by Eric V. Smith."
msgstr "PEP skrivet och genomfört av Eric V. Smith."

msgid ":ref:`Feature documentation <f-strings>`."
msgstr ":ref:`Funktionell dokumentation <f-strings>`."

msgid "PEP 526: Syntax for variable annotations"
msgstr "PEP 526: Syntax för variabelannoteringar"

msgid ""
":pep:`484` introduced the standard for type annotations of function "
"parameters, a.k.a. type hints. This PEP adds syntax to Python for annotating "
"the types of variables including class variables and instance variables::"
msgstr ""
":pep:`484` introducerade standarden för typannoteringar av "
"funktionsparametrar, även kallat typtips. Denna PEP lägger till syntax till "
"Python för att annotera typerna av variabler inklusive klassvariabler och "
"instansvariabler::"

msgid ""
"primes: List[int] = []\n"
"\n"
"captain: str  # Note: no initial value!\n"
"\n"
"class Starship:\n"
"    stats: Dict[str, int] = {}"
msgstr ""
"primtal: Lista[int] = []\n"
"\n"
"captain: str # Obs: inget initialt värde!\n"
"\n"
"klass Stjärnskepp:\n"
"    statistik: Dict[str, int] = {}"

msgid ""
"Just as for function annotations, the Python interpreter does not attach any "
"particular meaning to variable annotations and only stores them in the "
"``__annotations__`` attribute of a class or module."
msgstr ""
"Precis som för funktionsannoteringar lägger Python-tolken inte någon "
"särskild betydelse i variabelannoteringar och lagrar dem endast i attributet "
"``__annoteringar__`` för en klass eller modul."

msgid ""
"In contrast to variable declarations in statically typed languages, the goal "
"of annotation syntax is to provide an easy way to specify structured type "
"metadata for third party tools and libraries via the abstract syntax tree "
"and the ``__annotations__`` attribute."
msgstr ""
"I motsats till variabeldeklarationer i statiskt typade språk är målet med "
"annotationssyntaxen att tillhandahålla ett enkelt sätt att ange "
"strukturerade typmetadata för verktyg och bibliotek från tredje part via det "
"abstrakta syntaxträdet och attributet ``__annotations__``."

msgid ":pep:`526` -- Syntax for variable annotations."
msgstr ":pep:`526` -- Syntax för variabelannoteringar."

msgid ""
"PEP written by Ryan Gonzalez, Philip House, Ivan Levkivskyi, Lisa Roach, and "
"Guido van Rossum. Implemented by Ivan Levkivskyi."
msgstr ""
"PEP skriven av Ryan Gonzalez, Philip House, Ivan Levkivskyi, Lisa Roach och "
"Guido van Rossum. Implementerad av Ivan Levkivskyi."

msgid ""
"Tools that use or will use the new syntax: `mypy <https://www.mypy-lang.org/"
">`_, `pytype <https://github.com/google/pytype>`_, PyCharm, etc."
msgstr ""
"Verktyg som använder eller kommer att använda den nya syntaxen: `mypy "
"<https://www.mypy-lang.org/>`_, `pytype <https://github.com/google/"
"pytype>`_, PyCharm, etc."

msgid "PEP 515: Underscores in Numeric Literals"
msgstr "PEP 515: Underscorer i numeriska bokstäver"

msgid ""
":pep:`515` adds the ability to use underscores in numeric literals for "
"improved readability.  For example::"
msgstr ""
":pep:`515` lägger till möjligheten att använda understrykningstecken i "
"numeriska literaler för ökad läsbarhet.  Till exempel::"

msgid ""
">>> 1_000_000_000_000_000\n"
"1000000000000000\n"
">>> 0x_FF_FF_FF_FF\n"
"4294967295"
msgstr ""
">>> 1_000_000_000_000_000\n"
"1000000000000000\n"
">>> 0x_FF_FF_FF_FF\n"
"4294967295"

msgid ""
"Single underscores are allowed between digits and after any base specifier.  "
"Leading, trailing, or multiple underscores in a row are not allowed."
msgstr ""
"Enstaka understrykningstecken tillåts mellan siffror och efter varje "
"basspecifikator.  Ledande, efterföljande eller flera understreck i rad är "
"inte tillåtna."

msgid ""
"The :ref:`string formatting <formatspec>` language also now has support for "
"the ``'_'`` option to signal the use of an underscore for a thousands "
"separator for floating-point presentation types and for integer presentation "
"type ``'d'``.  For integer presentation types ``'b'``, ``'o'``, ``'x'``, and "
"``'X'``, underscores will be inserted every 4 digits::"
msgstr ""
"Språket :ref:`strängformatering <formatspec>` har nu också stöd för "
"alternativet ``'_'`` för att signalera att ett understreck används som "
"tusentalsavgränsare för presentationstyper med flyttal och för "
"presentationstypen för heltal ``'d'``.  För heltalspresentationstyperna "
"``'b'``, ``'o'``, ``'x'`` och ``'X'`` kommer understreck att infogas var 4:e "
"siffra::"

msgid ""
">>> '{:_}'.format(1000000)\n"
"'1_000_000'\n"
">>> '{:_x}'.format(0xFFFFFFFF)\n"
"'ffff_ffff'"
msgstr ""
">>> '{:_}'.format(1000000)\n"
"'1_000_000'\n"
">>> '{:_x}'.format(0xFFFFFFFF)\n"
"'ffff_ffffff'"

msgid ":pep:`515` -- Underscores in Numeric Literals"
msgstr ":pep:`515` -- Understreck i numeriska bokstäver"

msgid "PEP written by Georg Brandl and Serhiy Storchaka."
msgstr "PEP skriven av Georg Brandl och Serhiy Storchaka."

msgid "PEP 525: Asynchronous Generators"
msgstr "PEP 525: Asynkrona generatorer"

msgid ""
":pep:`492` introduced support for native coroutines and ``async`` / "
"``await`` syntax to Python 3.5.  A notable limitation of the Python 3.5 "
"implementation is that it was not possible to use ``await`` and ``yield`` in "
"the same function body.  In Python 3.6 this restriction has been lifted, "
"making it possible to define *asynchronous generators*::"
msgstr ""
":pep:`492` introducerade stöd för inbyggda coroutines och ``async`` / "
"``await`` syntax till Python 3.5.  En anmärkningsvärd begränsning i Python "
"3.5-implementeringen är att det inte var möjligt att använda ``await`` och "
"``yield`` i samma funktionskropp.  I Python 3.6 har denna begränsning tagits "
"bort, vilket gör det möjligt att definiera *asynkrona generatorer*::"

msgid ""
"async def ticker(delay, to):\n"
"    \"\"\"Yield numbers from 0 to *to* every *delay* seconds.\"\"\"\n"
"    for i in range(to):\n"
"        yield i\n"
"        await asyncio.sleep(delay)"
msgstr ""
"async def ticker(fördröjning, till):\n"
"    \"\"\"Avkastar siffror från 0 till *till* varje *fördröjning* sekund."
"\"\"\"\n"
"    för i i intervall(till):\n"
"        avkastning i\n"
"        await asyncio.sleep(fördröjning)"

msgid "The new syntax allows for faster and more concise code."
msgstr "Den nya syntaxen ger snabbare och mer kortfattad kod."

msgid ":pep:`525` -- Asynchronous Generators"
msgstr ":pep:`525` -- Asynkrona generatorer"

msgid "PEP written and implemented by Yury Selivanov."
msgstr "PEP skrivet och implementerat av Yury Selivanov."

msgid "PEP 530: Asynchronous Comprehensions"
msgstr "PEP 530: Asynkrona förståelser"

msgid ""
":pep:`530` adds support for using ``async for`` in list, set, dict "
"comprehensions and generator expressions::"
msgstr ""
":pep:`530` lägger till stöd för att använda ``async for`` i list-, set-, "
"dict-förståelser och generatoruttryck::"

msgid "result = [i async for i in aiter() if i % 2]"
msgstr "resultat = [i async för i i aiter() if i % 2]"

msgid ""
"Additionally, ``await`` expressions are supported in all kinds of "
"comprehensions::"
msgstr "Dessutom stöds ``await``-uttryck i alla typer av förståelser::"

msgid "result = [await fun() for fun in funcs if await condition()]"
msgstr "resultat = [await fun() for fun in funcs if await condition()]"

msgid ":pep:`530` -- Asynchronous Comprehensions"
msgstr ":pep:`530` -- Asynkrona förståelser"

msgid "PEP 487: Simpler customization of class creation"
msgstr "PEP 487: Enklare anpassning av klassskapande"

msgid ""
"It is now possible to customize subclass creation without using a metaclass. "
"The new ``__init_subclass__`` classmethod will be called on the base class "
"whenever a new subclass is created::"
msgstr ""
"Det är nu möjligt att anpassa skapandet av underklasser utan att använda en "
"metaklass. Den nya klassmetoden ``__init_subclass__`` kommer att anropas på "
"basklassen när en ny underklass skapas::"

msgid ""
"class PluginBase:\n"
"    subclasses = []\n"
"\n"
"    def __init_subclass__(cls, **kwargs):\n"
"        super().__init_subclass__(**kwargs)\n"
"        cls.subclasses.append(cls)\n"
"\n"
"class Plugin1(PluginBase):\n"
"    pass\n"
"\n"
"class Plugin2(PluginBase):\n"
"    pass"
msgstr ""
"klass PluginBase:\n"
"    underklasser = []\n"
"\n"
"    def __init_subclass__(cls, **kwargs):\n"
"        super().__init_subclass__(**kwargs)\n"
"        cls.subclasses.append(cls)\n"
"\n"
"klass Plugin1(PluginBase):\n"
"    pass\n"
"\n"
"klass Plugin2(PluginBase):\n"
"    pass"

msgid ""
"In order to allow zero-argument :func:`super` calls to work correctly from :"
"meth:`~object.__init_subclass__` implementations, custom metaclasses must "
"ensure that the new ``__classcell__`` namespace entry is propagated to "
"``type.__new__`` (as described in :ref:`class-object-creation`)."
msgstr ""
"För att tillåta nollargument :func:`super`-anrop att fungera korrekt från :"
"meth:`~object.__init_subclass__`-implementationer, måste anpassade "
"metaklasser säkerställa att den nya ``__classcell__``-namnrymdsposten sprids "
"till ``type.__new__`` (som beskrivs i :ref:`class-object-creation`)."

msgid ":pep:`487` -- Simpler customization of class creation"
msgstr ":pep:`487` -- Enklare anpassning av klassskapande"

msgid "PEP written and implemented by Martin Teichmann."
msgstr "PEP skrivet och genomfört av Martin Teichmann."

msgid ":ref:`Feature documentation <class-customization>`"
msgstr ":ref:`Funktionell dokumentation <class-customization>`"

msgid "PEP 487: Descriptor Protocol Enhancements"
msgstr "PEP 487: Förbättringar av deskriptorprotokollet"

msgid ""
":pep:`487` extends the descriptor protocol to include the new optional :meth:"
"`~object.__set_name__` method.  Whenever a new class is defined, the new "
"method will be called on all descriptors included in the definition, "
"providing them with a reference to the class being defined and the name "
"given to the descriptor within the class namespace.  In other words, "
"instances of descriptors can now know the attribute name of the descriptor "
"in the owner class::"
msgstr ""
":pep:`487` utökar descriptorprotokollet till att omfatta den nya valfria "
"metoden :meth:`~object.__set_name__`.  När en ny klass definieras kommer den "
"nya metoden att anropas på alla deskriptorer som ingår i definitionen och "
"förse dem med en referens till den klass som definieras och det namn som "
"deskriptorn har fått i klassens namnrymd.  Med andra ord kan instanser av "
"deskriptorer nu veta attributnamnet på deskriptorn i ägarklassen::"

msgid ""
"class IntField:\n"
"    def __get__(self, instance, owner):\n"
"        return instance.__dict__[self.name]\n"
"\n"
"    def __set__(self, instance, value):\n"
"        if not isinstance(value, int):\n"
"            raise ValueError(f'expecting integer in {self.name}')\n"
"        instance.__dict__[self.name] = value\n"
"\n"
"    # this is the new initializer:\n"
"    def __set_name__(self, owner, name):\n"
"        self.name = name\n"
"\n"
"class Model:\n"
"    int_field = IntField()"
msgstr ""
"klass IntField:\n"
"    def __get__(self, instance, owner):\n"
"        return instans.__dict__[self.name]\n"
"\n"
"    def __set__(self, instance, value):\n"
"        if not isinstance(värde, int):\n"
"            raise ValueError(f'förväntar sig heltal i {self.name}')\n"
"        instance.__dict__[self.name] = värde\n"
"\n"
"    # detta är den nya initialiseraren:\n"
"    def __set_name__(self, owner, name):\n"
"        self.name = namn\n"
"\n"
"klass Modell:\n"
"    int_field = IntField()"

msgid ":ref:`Feature documentation <descriptors>`"
msgstr ":ref:`Funktionell dokumentation <descriptors>`"

msgid "PEP 519: Adding a file system path protocol"
msgstr "PEP 519: Lägga till ett sökvägsprotokoll för filsystem"

msgid ""
"File system paths have historically been represented as :class:`str` or :"
"class:`bytes` objects. This has led to people who write code which operate "
"on file system paths to assume that such objects are only one of those two "
"types (an :class:`int` representing a file descriptor does not count as that "
"is not a file path). Unfortunately that assumption prevents alternative "
"object representations of file system paths like :mod:`pathlib` from working "
"with pre-existing code, including Python's standard library."
msgstr ""
"Filsystemsökvägar har historiskt representerats som :class:`str` eller :"
"class:`bytes` objekt. Detta har lett till att personer som skriver kod som "
"använder filsystemsökvägar antar att sådana objekt endast är en av dessa två "
"typer (en :class:`int` som representerar en filbeskrivning räknas inte "
"eftersom det inte är en filsökväg). Tyvärr förhindrar detta antagande "
"alternativa objektrepresentationer av filsystemsökvägar som :mod:`pathlib` "
"från att fungera med redan existerande kod, inklusive Pythons "
"standardbibliotek."

msgid ""
"To fix this situation, a new interface represented by :class:`os.PathLike` "
"has been defined. By implementing the :meth:`~os.PathLike.__fspath__` "
"method, an object signals that it represents a path. An object can then "
"provide a low-level representation of a file system path as a :class:`str` "
"or :class:`bytes` object. This means an object is considered :term:`path-"
"like <path-like object>` if it implements :class:`os.PathLike` or is a :"
"class:`str` or :class:`bytes` object which represents a file system path. "
"Code can use :func:`os.fspath`, :func:`os.fsdecode`, or :func:`os.fsencode` "
"to explicitly get a :class:`str` and/or :class:`bytes` representation of a "
"path-like object."
msgstr ""
"För att lösa denna situation har ett nytt gränssnitt som representeras av :"
"class:`os.PathLike` definierats. Genom att implementera metoden :meth:`~os."
"PathLike.__fspath__` signalerar ett objekt att det representerar en sökväg. "
"Ett objekt kan sedan tillhandahålla en lågnivårepresentation av en "
"filsystemssökväg som ett :class:`str`- eller :class:`bytes`-objekt. Detta "
"innebär att ett objekt anses vara :term:`sökvägsliknande <path-like object>` "
"om det implementerar :class:`os.PathLike` eller är ett :class:`str` eller :"
"class:`bytes` objekt som representerar en filsystemssökväg. Kod kan använda :"
"func:`os.fspath`, :func:`os.fsdecode`, eller :func:`os.fsencode` för att "
"explicit få en :class:`str` och/eller :class:`bytes` representation av ett "
"sökvägsliknande objekt."

msgid ""
"The built-in :func:`open` function has been updated to accept :class:`os."
"PathLike` objects, as have all relevant functions in the :mod:`os` and :mod:"
"`os.path` modules, and most other functions and classes in the standard "
"library.  The :class:`os.DirEntry` class and relevant classes in :mod:"
"`pathlib` have also been updated to implement :class:`os.PathLike`."
msgstr ""
"Den inbyggda funktionen :func:`open` har uppdaterats för att acceptera :"
"class:`os.PathLike`-objekt, liksom alla relevanta funktioner i modulerna :"
"mod:`os` och :mod:`os.path`, och de flesta andra funktioner och klasser i "
"standardbiblioteket.  Klassen :class:`os.DirEntry` och relevanta klasser i :"
"mod:`pathlib` har också uppdaterats för att implementera :class:`os."
"PathLike`."

msgid ""
"The hope is that updating the fundamental functions for operating on file "
"system paths will lead to third-party code to implicitly support all :term:"
"`path-like objects <path-like object>` without any code changes, or at least "
"very minimal ones (e.g. calling :func:`os.fspath` at the beginning of code "
"before operating on a path-like object)."
msgstr ""
"Förhoppningen är att en uppdatering av de grundläggande funktionerna för att "
"hantera sökvägar i filsystemet kommer att leda till att tredjepartskod "
"implicit stöder alla :term:`sökvägsliknande objekt <path-like object>` utan "
"några kodändringar, eller åtminstone mycket minimala sådana (t.ex. anrop av :"
"func:`os.fspath` i början av koden innan ett sökvägsliknande objekt "
"hanteras)."

msgid ""
"Here are some examples of how the new interface allows for :class:`pathlib."
"Path` to be used more easily and transparently with pre-existing code::"
msgstr ""
"Här är några exempel på hur det nya gränssnittet gör det möjligt att "
"använda :class:`pathlib.Path` på ett enklare och mer transparent sätt med "
"redan existerande kod::"

msgid ""
">>> import pathlib\n"
">>> with open(pathlib.Path(\"README\")) as f:\n"
"...     contents = f.read()\n"
"...\n"
">>> import os.path\n"
">>> os.path.splitext(pathlib.Path(\"some_file.txt\"))\n"
"('some_file', '.txt')\n"
">>> os.path.join(\"/a/b\", pathlib.Path(\"c\"))\n"
"'/a/b/c'\n"
">>> import os\n"
">>> os.fspath(pathlib.Path(\"some_file.txt\"))\n"
"'some_file.txt'"
msgstr ""
">>> import pathlib\n"
">>> with open(pathlib.Path(\"README\")) as f:\n"
"...     contents = f.read()\n"
"...\n"
">>> import os.path\n"
">>> os.path.splitext(pathlib.Path(\"some_file.txt\"))\n"
"('some_file', '.txt')\n"
">>> os.path.join(\"/a/b\", pathlib.Path(\"c\"))\n"
"'/a/b/c'\n"
">>> import os\n"
">>> os.fspath(pathlib.Path(\"some_file.txt\"))\n"
"'some_file.txt'"

msgid ""
"(Implemented by Brett Cannon, Ethan Furman, Dusty Phillips, and Jelle "
"Zijlstra.)"
msgstr ""
"(Implementerad av Brett Cannon, Ethan Furman, Dusty Phillips och Jelle "
"Zijlstra.)"

msgid ":pep:`519` -- Adding a file system path protocol"
msgstr ":pep:`519` -- Lägga till ett protokoll för filsystemets sökväg"

msgid "PEP written by Brett Cannon and Koos Zevenhoven."
msgstr "PEP skriven av Brett Cannon och Koos Zevenhoven."

msgid "PEP 495: Local Time Disambiguation"
msgstr "PEP 495: Förtydligande av lokal tid"

msgid ""
"In most world locations, there have been and will be times when local clocks "
"are moved back.  In those times, intervals are introduced in which local "
"clocks show the same time twice in the same day. In these situations, the "
"information displayed on a local clock (or stored in a Python datetime "
"instance) is insufficient to identify a particular moment in time."
msgstr ""
"På de flesta platser i världen har det funnits och kommer att finnas "
"tillfällen då lokala klockor flyttas tillbaka.  Under dessa tider införs "
"intervaller där lokala klockor visar samma tid två gånger under samma dag. I "
"dessa situationer är den information som visas på en lokal klocka (eller "
"lagras i en Python datetime-instans) otillräcklig för att identifiera en "
"viss tidpunkt."

msgid ""
":pep:`495` adds the new *fold* attribute to instances of :class:`datetime."
"datetime` and :class:`datetime.time` classes to differentiate between two "
"moments in time for which local times are the same::"
msgstr ""
":pep:`495` lägger till det nya attributet *fold* till instanser av "
"klasserna :class:`datetime.datetime` och :class:`datetime.time` för att "
"skilja mellan två tidpunkter för vilka de lokala tiderna är desamma::"

msgid ""
">>> u0 = datetime(2016, 11, 6, 4, tzinfo=timezone.utc)\n"
">>> for i in range(4):\n"
"...     u = u0 + i*HOUR\n"
"...     t = u.astimezone(Eastern)\n"
"...     print(u.time(), 'UTC =', t.time(), t.tzname(), t.fold)\n"
"...\n"
"04:00:00 UTC = 00:00:00 EDT 0\n"
"05:00:00 UTC = 01:00:00 EDT 0\n"
"06:00:00 UTC = 01:00:00 EST 1\n"
"07:00:00 UTC = 02:00:00 EST 0"
msgstr ""
">>> u0 = datetime(2016, 11, 6, 4, tzinfo=tidszon.utc)\n"
">>> för i i intervall(4):\n"
"... u = u0 + i*HOUR\n"
"... t = u.astimezone(Eastern)\n"
"... print(u.time(), 'UTC =', t.time(), t.tzname(), t.fold)\n"
"...\n"
"04:00:00 UTC = 00:00:00 EDT 0\n"
"05:00:00 UTC = 01:00:00 EDT 0\n"
"06:00:00 UTC = 01:00:00 EST 1\n"
"07:00:00 UTC = 02:00:00 EST 0"

msgid ""
"The values of the :attr:`fold <datetime.datetime.fold>` attribute have the "
"value ``0`` for all instances except those that represent the second "
"(chronologically) moment in time in an ambiguous case."
msgstr ""
"Värdena för attributet :attr:`fold <datetime.datetime.fold>` har värdet "
"``0`` för alla instanser utom de som representerar det andra (kronologiska) "
"ögonblicket i tiden i ett tvetydigt fall."

msgid ":pep:`495` -- Local Time Disambiguation"
msgstr ":pep:`495` -- Förväxling av lokal tid"

msgid ""
"PEP written by Alexander Belopolsky and Tim Peters, implementation by "
"Alexander Belopolsky."
msgstr ""
"PEP skriven av Alexander Belopolsky och Tim Peters, implementation av "
"Alexander Belopolsky."

msgid "PEP 529: Change Windows filesystem encoding to UTF-8"
msgstr "PEP 529: Ändra kodning av Windows-filsystem till UTF-8"

msgid ""
"Representing filesystem paths is best performed with str (Unicode) rather "
"than bytes. However, there are some situations where using bytes is "
"sufficient and correct."
msgstr ""
"Filsystemets sökvägar representeras bäst med str (Unicode) i stället för "
"bytes. Det finns dock vissa situationer där det är tillräckligt och korrekt "
"att använda bytes."

msgid ""
"Prior to Python 3.6, data loss could result when using bytes paths on "
"Windows. With this change, using bytes to represent paths is now supported "
"on Windows, provided those bytes are encoded with the encoding returned by :"
"func:`sys.getfilesystemencoding`, which now defaults to ``'utf-8'``."
msgstr ""
"Före Python 3.6 kunde dataförlust uppstå när byte-sökvägar användes i "
"Windows. Med denna ändring stöds nu användning av byte för att representera "
"sökvägar i Windows, förutsatt att dessa byte är kodade med den kodning som "
"returneras av :func:`sys.getfilesystemencoding`, som nu har ``'utf-8'`` som "
"standard."

msgid ""
"Applications that do not use str to represent paths should use :func:`os."
"fsencode` and :func:`os.fsdecode` to ensure their bytes are correctly "
"encoded. To revert to the previous behaviour, set :envvar:"
"`PYTHONLEGACYWINDOWSFSENCODING` or call :func:`sys."
"_enablelegacywindowsfsencoding`."
msgstr ""
"Program som inte använder str för att representera sökvägar bör använda :"
"func:`os.fsencode` och :func:`os.fsdecode` för att säkerställa att deras "
"byte är korrekt kodade. För att återgå till det tidigare beteendet, ställ "
"in :envvar:`PYTHONLEGACYWINDOWSFSENCODING` eller anropa :func:`sys."
"_enablelegacywindowsfsencoding`."

msgid ""
"See :pep:`529` for more information and discussion of code modifications "
"that may be required."
msgstr ""
"Se :pep:`529` för mer information och diskussion om kodändringar som kan "
"krävas."

msgid "PEP 528: Change Windows console encoding to UTF-8"
msgstr "PEP 528: Ändra kodningen för Windows-konsolen till UTF-8"

msgid ""
"The default console on Windows will now accept all Unicode characters and "
"provide correctly read str objects to Python code. ``sys.stdin``, ``sys."
"stdout`` and ``sys.stderr`` now default to utf-8 encoding."
msgstr ""
"Standardkonsolen i Windows accepterar nu alla Unicode-tecken och ger korrekt "
"lästa str-objekt till Python-kod. ``sys.stdin``, ``sys.stdout`` och ``sys."
"stderr`` använder nu utf-8-kodning som standard."

msgid ""
"This change only applies when using an interactive console, and not when "
"redirecting files or pipes. To revert to the previous behaviour for "
"interactive console use, set :envvar:`PYTHONLEGACYWINDOWSSTDIO`."
msgstr ""
"Den här ändringen gäller bara när du använder en interaktiv konsol och inte "
"när du omdirigerar filer eller pipes. Om du vill återgå till det tidigare "
"beteendet vid användning av en interaktiv konsol anger du :envvar:"
"`PYTHONLEGACYWINDOWSSTDIO`."

msgid ":pep:`528` -- Change Windows console encoding to UTF-8"
msgstr ":pep:`528` -- Ändra kodningen för Windows-konsolen till UTF-8"

msgid "PEP written and implemented by Steve Dower."
msgstr "PEP skrivet och implementerat av Steve Dower."

msgid "PEP 520: Preserving Class Attribute Definition Order"
msgstr "PEP 520: Bevarande av klassattributets definitionsordning"

msgid ""
"Attributes in a class definition body have a natural ordering: the same "
"order in which the names appear in the source.  This order is now preserved "
"in the new class's :attr:`~type.__dict__` attribute."
msgstr ""
"Attribut i en klassdefinition har en naturlig ordningsföljd: samma ordning "
"som namnen förekommer i källan.  Denna ordning bevaras nu i den nya klassens "
"attribut :attr:`~type.__dict__`."

msgid ""
"Also, the effective default class *execution* namespace (returned from :ref:"
"`type.__prepare__() <prepare>`) is now an insertion-order-preserving mapping."
msgstr ""
"Dessutom är den effektiva standardnamnrymden för klassen *execution* "
"(returnerad från :ref:`type.__prepare__() <prepare>`) nu en mappning som "
"bevarar insättningsordningen."

msgid ":pep:`520` -- Preserving Class Attribute Definition Order"
msgstr ":pep:`520` -- Bevarande av klassattributets definitionsordning"

msgid "PEP written and implemented by Eric Snow."
msgstr "PEP skrivet och implementerat av Eric Snow."

msgid "PEP 468: Preserving Keyword Argument Order"
msgstr "PEP 468: Bevara ordningen på nyckelordsargument"

msgid ""
"``**kwargs`` in a function signature is now guaranteed to be an insertion-"
"order-preserving mapping."
msgstr ""
"``**kwargs`` i en funktionssignatur är nu garanterad att vara en mappning "
"som bevarar insättningsordningen."

msgid ":pep:`468` -- Preserving Keyword Argument Order"
msgstr ":pep:`468` -- Bevara ordningen på nyckelordsargument"

msgid "New :ref:`dict <typesmapping>` implementation"
msgstr "Ny :ref:`dict <typesmapping>` implementation"

msgid ""
"The :ref:`dict <typesmapping>` type now uses a \"compact\" representation "
"based on `a proposal by Raymond Hettinger <https://mail.python.org/pipermail/"
"python-dev/2012-December/123028.html>`_ which was `first implemented by PyPy "
"<https://morepypy.blogspot.com/2015/01/faster-more-memory-efficient-and-more."
"html>`_. The memory usage of the new :func:`dict` is between 20% and 25% "
"smaller compared to Python 3.5."
msgstr ""
"Typen :ref:`dict <typesmapping>` använder nu en \"kompakt\" representation "
"baserad på `ett förslag av Raymond Hettinger &lt;https://mail.python.org/"
"pipermail/python-dev/2012-December/123028.html&gt;`_ som `först "
"implementerades av PyPy &lt;https://morepypy.blogspot.com/2015/01/faster-"
"more-memory-efficient-and-more.html&gt;`_. Minnesanvändningen för den nya :"
"func:`dict` är mellan 20% aoch 25% smaller jämfört med Python 3.5."

msgid ""
"The order-preserving aspect of this new implementation is considered an "
"implementation detail and should not be relied upon (this may change in the "
"future, but it is desired to have this new dict implementation in the "
"language for a few releases before changing the language spec to mandate "
"order-preserving semantics for all current and future Python "
"implementations; this also helps preserve backwards-compatibility with older "
"versions of the language where random iteration order is still in effect, e."
"g. Python 3.5)."
msgstr ""
"Den orderbevarande aspekten av denna nya implementering betraktas som en "
"implementeringsdetalj och bör inte förlitas på (detta kan ändras i "
"framtiden, men det är önskvärt att ha denna nya dict-implementering i "
"språket för några utgåvor innan språkspecifikationen ändras för att kräva "
"orderbevarande semantik för alla nuvarande och framtida Python-"
"implementeringar; detta hjälper också till att bevara bakåtkompatibilitet "
"med äldre versioner av språket där slumpmässig iterationsordning fortfarande "
"gäller, t.ex. Python 3.5)."

msgid ""
"(Contributed by INADA Naoki in :issue:`27350`. Idea `originally suggested by "
"Raymond Hettinger <https://mail.python.org/pipermail/python-dev/2012-"
"December/123028.html>`_.)"
msgstr ""
"(Bidrag från INADA Naoki i :issue:`27350`. Idé `ursprungligen föreslagen av "
"Raymond Hettinger <https://mail.python.org/pipermail/python-dev/2012-"
"December/123028.html>`_.)"

msgid "PEP 523: Adding a frame evaluation API to CPython"
msgstr "PEP 523: Lägga till ett API för ramutvärdering i CPython"

msgid ""
"While Python provides extensive support to customize how code executes, one "
"place it has not done so is in the evaluation of frame objects.  If you "
"wanted some way to intercept frame evaluation in Python there really wasn't "
"any way without directly manipulating function pointers for defined "
"functions."
msgstr ""
"Även om Python ger omfattande stöd för att anpassa hur kod körs, är det ett "
"ställe där det inte har gjort det i utvärderingen av ramobjekt.  Om du ville "
"ha något sätt att avlyssna ramutvärdering i Python fanns det verkligen inget "
"sätt utan att direkt manipulera funktionspekare för definierade funktioner."

msgid ""
":pep:`523` changes this by providing an API to make frame evaluation "
"pluggable at the C level. This will allow for tools such as debuggers and "
"JITs to intercept frame evaluation before the execution of Python code "
"begins. This enables the use of alternative evaluation implementations for "
"Python code, tracking frame evaluation, etc."
msgstr ""
":pep:`523` ändrar detta genom att tillhandahålla ett API för att göra "
"ramutvärdering pluggbar på C-nivå. Detta gör det möjligt för verktyg som "
"debuggers och JITs att fånga upp ramutvärderingen innan exekveringen av "
"Python-koden börjar. Detta gör det möjligt att använda alternativa "
"utvärderingsimplementeringar för Python-kod, spåra ramutvärdering etc."

msgid ""
"This API is not part of the limited C API and is marked as private to signal "
"that usage of this API is expected to be limited and only applicable to very "
"select, low-level use-cases. Semantics of the API will change with Python as "
"necessary."
msgstr ""
"Detta API är inte en del av det begränsade C API och är markerat som privat "
"för att signalera att användningen av detta API förväntas vara begränsad och "
"endast tillämplig på mycket utvalda användningsfall på låg nivå. Semantiken "
"för API:et kommer att ändras med Python vid behov."

msgid ":pep:`523` -- Adding a frame evaluation API to CPython"
msgstr ":pep:`523` -- Lägga till ett API för bildutvärdering i CPython"

msgid "PEP written by Brett Cannon and Dino Viehland."
msgstr "PEP skriven av Brett Cannon och Dino Viehland."

msgid "PYTHONMALLOC environment variable"
msgstr "PYTHONMALLOC miljövariabel"

msgid ""
"The new :envvar:`PYTHONMALLOC` environment variable allows setting the "
"Python memory allocators and installing debug hooks."
msgstr ""
"Den nya miljövariabeln :envvar:`PYTHONMALLOC` gör det möjligt att ställa in "
"Pythons minnesallokatorer och installera debug-krokar."

msgid ""
"It is now possible to install debug hooks on Python memory allocators on "
"Python compiled in release mode using ``PYTHONMALLOC=debug``. Effects of "
"debug hooks:"
msgstr ""
"Det är nu möjligt att installera debug-krokar på Python-minnesallokatorer på "
"Python kompilerad i release-läge med ``PYTHONMALLOC=debug``. Effekter av "
"debug-krokar:"

msgid "Newly allocated memory is filled with the byte ``0xCB``"
msgstr "Nytilldelat minne fylls med byte ``0xCB``"

msgid "Freed memory is filled with the byte ``0xDB``"
msgstr "Frigjort minne är fyllt med byte ``0xDB``"

msgid ""
"Detect violations of the Python memory allocator API. For example, :c:func:"
"`PyObject_Free` called on a memory block allocated by :c:func:`PyMem_Malloc`."
msgstr ""
"Upptäck brott mot Pythons API för minnesallokering. Till exempel, :c:func:"
"`PyObject_Free` anropas på ett minnesblock som allokerats av :c:func:"
"`PyMem_Malloc`."

msgid "Detect writes before the start of a buffer (buffer underflows)"
msgstr "Upptäcka skrivningar före början av en buffert (buffer underflows)"

msgid "Detect writes after the end of a buffer (buffer overflows)"
msgstr ""
"Upptäcka skrivningar efter slutet av en buffert (buffertöverskridanden)"

msgid ""
"Check that the :term:`GIL <global interpreter lock>` is held when allocator "
"functions of :c:macro:`PYMEM_DOMAIN_OBJ` (ex: :c:func:`PyObject_Malloc`) "
"and :c:macro:`PYMEM_DOMAIN_MEM` (ex: :c:func:`PyMem_Malloc`) domains are "
"called."
msgstr ""
"Kontrollera att :term:`GIL <global interpreter lock>` hålls när "
"allokeringsfunktioner i domänerna :c:macro:`PYMEM_DOMAIN_OBJ` (ex: :c:func:"
"`PyObject_Malloc`) och :c:macro:`PYMEM_DOMAIN_MEM` (ex: :c:func:"
"`PyMem_Malloc`) anropas."

msgid "Checking if the GIL is held is also a new feature of Python 3.6."
msgstr "Att kontrollera om GIL hålls är också en ny funktion i Python 3.6."

msgid ""
"See the :c:func:`PyMem_SetupDebugHooks` function for debug hooks on Python "
"memory allocators."
msgstr ""
"Se funktionen :c:func:`PyMem_SetupDebugHooks` för felsökningskrokar på "
"Python-minnesallokatorer."

msgid ""
"It is now also possible to force the usage of the :c:func:`malloc` allocator "
"of the C library for all Python memory allocations using "
"``PYTHONMALLOC=malloc``. This is helpful when using external memory "
"debuggers like Valgrind on a Python compiled in release mode."
msgstr ""
"Det är nu också möjligt att tvinga fram användning av C-bibliotekets :c:func:"
"`malloc`-allokering för alla Python-minnesallokeringar genom att använda "
"``PYTHONMALLOC=malloc``. Detta är användbart när man använder externa "
"minnesdebuggar som Valgrind på en Python kompilerad i release-läge."

msgid ""
"On error, the debug hooks on Python memory allocators now use the :mod:"
"`tracemalloc` module to get the traceback where a memory block was allocated."
msgstr ""
"Vid fel använder felsökningskrokarna på Pythons minnesallokatorer nu "
"modulen :mod:`tracemalloc` för att få spårningen där ett minnesblock "
"allokerades."

msgid ""
"Example of fatal error on buffer overflow using ``python3.6 -X "
"tracemalloc=5`` (store 5 frames in traces)::"
msgstr ""
"Exempel på fatalt fel vid buffertöverskridning med ``python3.6 -X "
"tracemalloc=5`` (lagra 5 bilder i spår)::"

msgid ""
"Debug memory block at address p=0x7fbcd41666f8: API 'o'\n"
"    4 bytes originally requested\n"
"    The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.\n"
"    The 8 pad bytes at tail=0x7fbcd41666fc are not all FORBIDDENBYTE "
"(0xfb):\n"
"        at tail+0: 0x02 *** OUCH\n"
"        at tail+1: 0xfb\n"
"        at tail+2: 0xfb\n"
"        at tail+3: 0xfb\n"
"        at tail+4: 0xfb\n"
"        at tail+5: 0xfb\n"
"        at tail+6: 0xfb\n"
"        at tail+7: 0xfb\n"
"    The block was made by call #1233329 to debug malloc/realloc.\n"
"    Data at p: 1a 2b 30 00\n"
"\n"
"Memory block allocated at (most recent call first):\n"
"  File \"test/test_bytes.py\", line 323\n"
"  File \"unittest/case.py\", line 600\n"
"  File \"unittest/case.py\", line 648\n"
"  File \"unittest/suite.py\", line 122\n"
"  File \"unittest/suite.py\", line 84\n"
"\n"
"Fatal Python error: bad trailing pad byte\n"
"\n"
"Current thread 0x00007fbcdbd32700 (most recent call first):\n"
"  File \"test/test_bytes.py\", line 323 in test_hex\n"
"  File \"unittest/case.py\", line 600 in run\n"
"  File \"unittest/case.py\", line 648 in __call__\n"
"  File \"unittest/suite.py\", line 122 in run\n"
"  File \"unittest/suite.py\", line 84 in __call__\n"
"  File \"unittest/suite.py\", line 122 in run\n"
"  File \"unittest/suite.py\", line 84 in __call__\n"
"  ..."
msgstr ""
"Debug-minnesblock på adress p=0x7fbcd41666f8: API 'o'\n"
"    4 byte ursprungligen begärda\n"
"    De 7 padbytena på p-7 är FORBIDDENBYTE, som förväntat.\n"
"    De 8 padbytena vid tail=0x7fbcd41666fc är inte alla FORBIDDENBYTE "
"(0xfb):\n"
"        vid tail+0: 0x02 *** OUCH\n"
"        vid svans+1: 0xfb\n"
"        vid svans+2: 0xfb\n"
"        vid tail+3: 0xfb\n"
"        vid tail+4: 0xfb\n"
"        vid ingång+5: 0xfb\n"
"        vid svans+6: 0xfb\n"
"        vid svans+7: 0xfb\n"
"    Blocket skapades av anrop #1233329 för att felsöka malloc/realloc.\n"
"    Data på p: 1a 2b 30 00\n"
"\n"
"Minnesblock allokerat vid (senaste anropet först):\n"
"  Fil \"test/test_bytes.py\", rad 323\n"
"  Fil \"unittest/case.py\", rad 600\n"
"  Fil \"unittest/case.py\", rad 648\n"
"  Fil \"unittest/suite.py\", rad 122\n"
"  Fil \"unittest/suite.py\", rad 84\n"
"\n"
"Fatalt Python-fel: dålig efterföljande pad-byte\n"
"\n"
"Aktuell tråd 0x00007fbcdbd32700 (senaste anropet först):\n"
"  Fil \"test/test_bytes.py\", rad 323 i test_hex\n"
"  Fil \"unittest/case.py\", rad 600 i run\n"
"  Fil \"unittest/case.py\", rad 648 i __call__\n"
"  Fil \"unittest/suite.py\", rad 122 i run\n"
"  Fil \"unittest/suite.py\", rad 84 i __call__\n"
"  Fil \"unittest/suite.py\", rad 122 i run\n"
"  Fil \"unittest/suite.py\", rad 84 i __call__\n"
"  ..."

msgid "(Contributed by Victor Stinner in :issue:`26516` and :issue:`26564`.)"
msgstr "(Bidrag från Victor Stinner i :issue:`26516` och :issue:`26564`.)"

msgid "DTrace and SystemTap probing support"
msgstr "Stöd för DTrace- och SystemTap-probing"

msgid ""
"Python can now be built ``--with-dtrace`` which enables static markers for "
"the following events in the interpreter:"
msgstr ""
"Python kan nu byggas ``--med-dtrace`` vilket möjliggör statiska markörer för "
"följande händelser i tolken:"

msgid "function call/return"
msgstr "funktion anrop/retur"

msgid "garbage collection started/finished"
msgstr "skräpinsamling påbörjad/avslutad"

msgid "line of code executed."
msgstr "rad av kod som exekveras."

msgid ""
"This can be used to instrument running interpreters in production, without "
"the need to recompile specific :ref:`debug builds <debug-build>` or "
"providing application-specific profiling/debugging code."
msgstr ""
"Detta kan användas för att instrumentera tolkar som körs i produktion, utan "
"att behöva kompilera om specifika :ref:`debug builds <debug-build>` eller "
"tillhandahålla programspecifik profilerings-/debuggningskod."

msgid "More details in :ref:`instrumentation`."
msgstr "Mer information finns i :ref:`instrumentation`."

msgid ""
"The current implementation is tested on Linux and macOS.  Additional markers "
"may be added in the future."
msgstr ""
"Den nuvarande implementeringen testas på Linux och macOS.  Ytterligare "
"markörer kan komma att läggas till i framtiden."

msgid ""
"(Contributed by Łukasz Langa in :issue:`21590`, based on patches by Jesús "
"Cea Avión, David Malcolm, and Nikhil Benesch.)"
msgstr ""
"(Bidrag från Łukasz Langa i :issue:`21590`, baserat på korrigeringar av "
"Jesús Cea Avión, David Malcolm och Nikhil Benesch.)"

msgid "Other Language Changes"
msgstr "Andra språkliga förändringar"

msgid "Some smaller changes made to the core Python language are:"
msgstr "Några mindre ändringar som gjorts i Python-språkets kärna är:"

msgid ""
"A ``global`` or ``nonlocal`` statement must now textually appear before the "
"first use of the affected name in the same scope. Previously this was a :exc:"
"`SyntaxWarning`."
msgstr ""
"Ett ``globalt`` eller ``icke-lokalt`` uttalande måste nu textuellt visas "
"före den första användningen av det berörda namnet i samma scope. Tidigare "
"var detta en :exc:`SyntaxWarning`."

msgid ""
"It is now possible to set a :ref:`special method <specialnames>` to ``None`` "
"to indicate that the corresponding operation is not available. For example, "
"if a class sets :meth:`__iter__` to ``None``, the class is not iterable. "
"(Contributed by Andrew Barnert and Ivan Levkivskyi in :issue:`25958`.)"
msgstr ""
"Det är nu möjligt att sätta en :ref:`specialmetod <specialnames>` till "
"``None`` för att ange att motsvarande operation inte är tillgänglig. Till "
"exempel, om en klass sätter :meth:`__iter__` till ``None``, är klassen inte "
"iterabel. (Bidrag från Andrew Barnert och Ivan Levkivskyi i :issue:`25958`.)"

msgid ""
"Long sequences of repeated traceback lines are now abbreviated as "
"``\"[Previous line repeated {count} more times]\"`` (see :ref:`whatsnew36-"
"traceback` for an example). (Contributed by Emanuel Barry in :issue:`26823`.)"
msgstr ""
"Långa sekvenser av upprepade spårningsrader förkortas nu som ``\"[Föregående "
"rad upprepad {count} gånger till]\"`` (se :ref:`whatsnew36-traceback` för "
"ett exempel). (Bidrag från Emanuel Barry i :issue:`26823`.)"

msgid ""
"Import now raises the new exception :exc:`ModuleNotFoundError` (subclass of :"
"exc:`ImportError`) when it cannot find a module.  Code that currently checks "
"for ImportError (in try-except) will still work. (Contributed by Eric Snow "
"in :issue:`15767`.)"
msgstr ""
"Import ger nu det nya undantaget :exc:`ModuleNotFoundError` (underklass "
"till :exc:`ImportError`) när den inte kan hitta en modul.  Kod som för "
"närvarande kontrollerar för ImportError (i try-except) kommer fortfarande "
"att fungera. (Bidrag från Eric Snow i :issue:`15767`.)"

msgid ""
"Class methods relying on zero-argument ``super()`` will now work correctly "
"when called from metaclass methods during class creation. (Contributed by "
"Martin Teichmann in :issue:`23722`.)"
msgstr ""
"Klassmetoder som förlitar sig på ``super()`` med nollargument fungerar nu "
"korrekt när de anropas från metaklassmetoder under skapandet av en klass. "
"(Bidrag från Martin Teichmann i :issue:`23722`.)"

msgid "New Modules"
msgstr "Nya moduler"

msgid "secrets"
msgstr "hemligheter"

msgid ""
"The main purpose of the new :mod:`secrets` module is to provide an obvious "
"way to reliably generate cryptographically strong pseudo-random values "
"suitable for managing secrets, such as account authentication, tokens, and "
"similar."
msgstr ""
"Huvudsyftet med den nya modulen :mod:`secrets` är att tillhandahålla ett "
"uppenbart sätt att på ett tillförlitligt sätt generera kryptografiskt starka "
"pseudoslumpmässiga värden som är lämpliga för hantering av hemligheter, t."
"ex. kontoautentisering, tokens och liknande."

msgid ""
"Note that the pseudo-random generators in the :mod:`random` module should "
"*NOT* be used for security purposes.  Use :mod:`secrets` on Python 3.6+ and :"
"func:`os.urandom` on Python 3.5 and earlier."
msgstr ""
"Observera att pseudoslumpgeneratorerna i modulen :mod:`random` * INTE* ska "
"användas för säkerhetsändamål.  Använd :mod:`secrets` på Python 3.6+ och :"
"func:`os.urandom` på Python 3.5 och tidigare."

msgid ":pep:`506` -- Adding A Secrets Module To The Standard Library"
msgstr ":pep:`506` -- Att lägga till en hemlighetsmodul i standardbiblioteket"

msgid "PEP written and implemented by Steven D'Aprano."
msgstr "PEP skrivet och genomfört av Steven D'Aprano."

msgid "Improved Modules"
msgstr "Förbättrade moduler"

msgid "array"
msgstr "array"

msgid ""
"Exhausted iterators of :class:`array.array` will now stay exhausted even if "
"the iterated array is extended.  This is consistent with the behavior of "
"other mutable sequences."
msgstr ""
"Utmattade iteratorer av :class:`array.array` kommer nu att förbli utmattade "
"även om den itererade arrayen utökas.  Detta överensstämmer med beteendet "
"hos andra muterbara sekvenser."

msgid "Contributed by Serhiy Storchaka in :issue:`26492`."
msgstr "Bidrag från Serhiy Storchaka i :issue:`26492`."

msgid "ast"
msgstr "ast"

msgid ""
"The new :class:`ast.Constant` AST node has been added.  It can be used by "
"external AST optimizers for the purposes of constant folding."
msgstr ""
"Den nya :class:`ast.Constant` AST-noden har lagts till.  Den kan användas av "
"externa AST-optimerare i syfte att vika konstanter."

msgid "Contributed by Victor Stinner in :issue:`26146`."
msgstr "Bidrag från Victor Stinner i :issue:`26146`."

msgid "asyncio"
msgstr "asyncio"

msgid ""
"Starting with Python 3.6 the ``asyncio`` module is no longer provisional and "
"its API is considered stable."
msgstr ""
"Från och med Python 3.6 är modulen ``asyncio`` inte längre provisorisk och "
"dess API anses vara stabilt."

msgid ""
"Notable changes in the :mod:`asyncio` module since Python 3.5.0 (all "
"backported to 3.5.x due to the provisional status):"
msgstr ""
"Noterbara ändringar i modulen :mod:`asyncio` sedan Python 3.5.0 (alla "
"backporterade till 3.5.x på grund av den preliminära statusen):"

msgid ""
"The :func:`~asyncio.get_event_loop` function has been changed to always "
"return the currently running loop when called from coroutines and callbacks. "
"(Contributed by Yury Selivanov in :issue:`28613`.)"
msgstr ""
"Funktionen :func:`~asyncio.get_event_loop` har ändrats så att den alltid "
"returnerar den pågående loopen när den anropas från coroutines och "
"callbacks. (Bidrag från Yury Selivanov i :issue:`28613`.)"

msgid ""
"The :func:`~asyncio.ensure_future` function and all functions that use it, "
"such as :meth:`loop.run_until_complete() <asyncio.loop.run_until_complete>`, "
"now accept all kinds of :term:`awaitable objects <awaitable>`. (Contributed "
"by Yury Selivanov.)"
msgstr ""
"Funktionen :func:`~asyncio.ensure_future` och alla funktioner som använder "
"den, till exempel :meth:`loop.run_until_complete() <asyncio.loop."
"run_until_complete>`, accepterar nu alla typer av :term:`awaitable objects "
"<awaitable>`. (Bidrag från Yury Selivanov.)"

msgid ""
"New :func:`~asyncio.run_coroutine_threadsafe` function to submit coroutines "
"to event loops from other threads. (Contributed by Vincent Michel.)"
msgstr ""
"Ny :func:`~asyncio.run_coroutine_threadsafe`-funktion för att skicka "
"coroutines till händelseslingor från andra trådar. (Bidrag från Vincent "
"Michel.)"

msgid ""
"New :meth:`Transport.is_closing() <asyncio.BaseTransport.is_closing>` method "
"to check if the transport is closing or closed. (Contributed by Yury "
"Selivanov.)"
msgstr ""
"Ny :meth:`Transport.is_closing() <asyncio.BaseTransport.is_closing>`-metod "
"för att kontrollera om transporten stängs eller stängs. (Bidrag från Yury "
"Selivanov.)"

msgid ""
"The :meth:`loop.create_server() <asyncio.loop.create_server>` method can now "
"accept a list of hosts. (Contributed by Yann Sionneau.)"
msgstr ""
"Metoden :meth:`loop.create_server() <asyncio.loop.create_server>` kan nu "
"acceptera en lista med värdar. (Bidrag från Yann Sionneau.)"

msgid ""
"New :meth:`loop.create_future() <asyncio.loop.create_future>` method to "
"create Future objects.  This allows alternative event loop implementations, "
"such as `uvloop <https://github.com/MagicStack/uvloop>`_, to provide a "
"faster :class:`asyncio.Future` implementation. (Contributed by Yury "
"Selivanov in :issue:`27041`.)"
msgstr ""
"Ny :meth:`loop.create_future() <asyncio.loop.create_future>`-metod för att "
"skapa Future-objekt.  Detta gör det möjligt för alternativa implementationer "
"av händelseslingor, som `uvloop <https://github.com/MagicStack/uvloop>`_, "
"att tillhandahålla en snabbare :class:`asyncio.Future`-implementation. "
"(Bidrag från Yury Selivanov i :issue:`27041`.)"

msgid ""
"New :meth:`loop.get_exception_handler() <asyncio.loop."
"get_exception_handler>` method to get the current exception handler. "
"(Contributed by Yury Selivanov in :issue:`27040`.)"
msgstr ""
"Ny :meth:`loop.get_exception_handler() <asyncio.loop.get_exception_handler>`-"
"metod för att hämta den aktuella undantagshanteraren. (Bidrag från Yury "
"Selivanov i :issue:`27040`.)"

msgid ""
"New :meth:`StreamReader.readuntil() <asyncio.StreamReader.readuntil>` method "
"to read data from the stream until a separator bytes sequence appears. "
"(Contributed by Mark Korenberg.)"
msgstr ""
"Ny :meth:`StreamReader.readuntil() <asyncio.StreamReader.readuntil>`-metod "
"för att läsa data från strömmen tills en separatorbyte-sekvens visas. "
"(Bidrag från Mark Korenberg.)"

msgid ""
"The performance of :meth:`StreamReader.readexactly() <asyncio.StreamReader."
"readexactly>` has been improved. (Contributed by Mark Korenberg in :issue:"
"`28370`.)"
msgstr ""
"Prestandan för :meth:`StreamReader.readexactly() <asyncio.StreamReader."
"readexactly>` har förbättrats. (Bidrag från Mark Korenberg i :issue:`28370`.)"

msgid ""
"The :meth:`loop.getaddrinfo() <asyncio.loop.getaddrinfo>` method is "
"optimized to avoid calling the system ``getaddrinfo`` function if the "
"address is already resolved. (Contributed by A. Jesse Jiryu Davis.)"
msgstr ""
"Metoden :meth:`loop.getaddrinfo() <asyncio.loop.getaddrinfo>` är optimerad "
"för att undvika att anropa systemets funktion ``getaddrinfo`` om adressen "
"redan är löst. (Bidrag från A. Jesse Jiryu Davis.)"

msgid ""
"The :meth:`loop.stop() <asyncio.loop.stop>` method has been changed to stop "
"the loop immediately after the current iteration.  Any new callbacks "
"scheduled as a result of the last iteration will be discarded. (Contributed "
"by Guido van Rossum in :issue:`25593`.)"
msgstr ""
"Metoden :meth:`loop.stop() <asyncio.loop.stop>` har ändrats så att den "
"stoppar loopen omedelbart efter den aktuella iterationen.  Alla nya "
"återuppringningar som schemalagts som ett resultat av den senaste "
"iterationen kommer att kasseras. (Bidrag från Guido van Rossum i :issue:"
"`25593`.)"

msgid ""
":meth:`Future.set_exception <asyncio.futures.Future.set_exception>` will now "
"raise :exc:`TypeError` when passed an instance of the :exc:`StopIteration` "
"exception. (Contributed by Chris Angelico in :issue:`26221`.)"
msgstr ""
":meth:`Future.set_exception <asyncio.futures.Future.set_exception>` kommer "
"nu att ge upphov till :exc:`TypeError` när en instans av undantaget :exc:"
"`StopIteration` skickas. (Bidrag från Chris Angelico i :issue:`26221`.)"

msgid ""
"New :meth:`loop.connect_accepted_socket() <asyncio.loop."
"connect_accepted_socket>` method to be used by servers that accept "
"connections outside of asyncio, but that use asyncio to handle them. "
"(Contributed by Jim Fulton in :issue:`27392`.)"
msgstr ""
"Ny :meth:`loop.connect_accepted_socket() <asyncio.loop."
"connect_accepted_socket>` metod att användas av servrar som accepterar "
"anslutningar utanför asyncio, men som använder asyncio för att hantera dem. "
"(Bidrag från Jim Fulton i :issue:`27392`.)"

msgid ""
"``TCP_NODELAY`` flag is now set for all TCP transports by default. "
"(Contributed by Yury Selivanov in :issue:`27456`.)"
msgstr ""
"flaggan ``TCP_NODELAY`` är nu inställd som standard för alla TCP-"
"transporter. (Bidrag från Yury Selivanov i :issue:`27456`.)"

msgid ""
"New :meth:`loop.shutdown_asyncgens() <asyncio.loop.shutdown_asyncgens>` to "
"properly close pending asynchronous generators before closing the loop. "
"(Contributed by Yury Selivanov in :issue:`28003`.)"
msgstr ""
"Ny :meth:`loop.shutdown_asyncgens() <asyncio.loop.shutdown_asyncgens>` för "
"att korrekt stänga väntande asynkrona generatorer innan loopen stängs. "
"(Bidrag från Yury Selivanov i :issue:`28003`.)"

msgid ""
":class:`Future <asyncio.Future>` and :class:`Task <asyncio.Task>` classes "
"now have an optimized C implementation which makes asyncio code up to 30% "
"faster. (Contributed by Yury Selivanov and INADA Naoki in :issue:`26081` "
"and :issue:`28544`.)"
msgstr ""
"klasserna :class:`Future <asyncio.Future>` och :class:`Task <asyncio.Task>` "
"har nu en optimerad C-implementation som gör asynciokoden upp till 30% "
"faster. (Bidrag från Yury Selivanov och INADA Naoki i :issue:`26081` och :"
"issue:`28544`.)"

msgid "binascii"
msgstr "binascii"

msgid ""
"The :func:`~binascii.b2a_base64` function now accepts an optional *newline* "
"keyword argument to control whether the newline character is appended to the "
"return value. (Contributed by Victor Stinner in :issue:`25357`.)"
msgstr ""
"Funktionen :func:`~binascii.b2a_base64` accepterar nu ett valfritt *newline* "
"nyckelordsargument för att kontrollera om newline-tecknet skall läggas till "
"i returvärdet. (Bidrag från Victor Stinner i :issue:`25357`.)"

msgid "cmath"
msgstr "cmath"

msgid ""
"The new :const:`cmath.tau` (*τ*) constant has been added. (Contributed by "
"Lisa Roach in :issue:`12345`, see :pep:`628` for details.)"
msgstr ""
"Den nya konstanten :const:`cmath.tau` (*τ*) har lagts till. (Bidrag från "
"Lisa Roach i :issue:`12345`, se :pep:`628` för detaljer.)"

msgid ""
"New constants: :const:`cmath.inf` and :const:`cmath.nan` to match :const:"
"`math.inf` and :const:`math.nan`, and also :const:`cmath.infj` and :const:"
"`cmath.nanj` to match the format used by complex repr. (Contributed by Mark "
"Dickinson in :issue:`23229`.)"
msgstr ""
"Nya konstanter: :const:`cmath.inf` och :const:`cmath.nan` för att matcha :"
"const:`math.inf` och :const:`math.nan`, och även :const:`cmath.infj` och :"
"const:`cmath.nanj` för att matcha det format som används av complex repr. "
"(Bidrag från Mark Dickinson i :issue:`23229`.)"

msgid "collections"
msgstr "samlingar"

msgid ""
"The new :class:`~collections.abc.Collection` abstract base class has been "
"added to represent sized iterable container classes. (Contributed by Ivan "
"Levkivskyi, docs by Neil Girdhar in :issue:`27598`.)"
msgstr ""
"Den nya abstrakta basklassen :class:`~collections.abc.Collection` har lagts "
"till för att representera stora iterabla containerklasser. (Bidrag från Ivan "
"Levkivskyi, dokument av Neil Girdhar i :issue:`27598`.)"

msgid ""
"The new :class:`~collections.abc.Reversible` abstract base class represents "
"iterable classes that also provide the :meth:`__reversed__` method. "
"(Contributed by Ivan Levkivskyi in :issue:`25987`.)"
msgstr ""
"Den nya abstrakta basklassen :class:`~collections.abc.Reversible` "
"representerar iterabla klasser som också tillhandahåller metoden :meth:"
"`__reversed__`. (Bidrag från Ivan Levkivskyi i :issue:`25987`.)"

msgid ""
"The new :class:`~collections.abc.AsyncGenerator` abstract base class "
"represents asynchronous generators. (Contributed by Yury Selivanov in :issue:"
"`28720`.)"
msgstr ""
"Den nya :class:`~collections.abc.AsyncGenerator` abstrakta basklassen "
"representerar asynkrona generatorer. (Bidrag från Yury Selivanov i :issue:"
"`28720`.)"

msgid ""
"The :func:`~collections.namedtuple` function now accepts an optional keyword "
"argument *module*, which, when specified, is used for the :attr:`~type."
"__module__` attribute of the returned named tuple class. (Contributed by "
"Raymond Hettinger in :issue:`17941`.)"
msgstr ""
"Funktionen :func:`~collections.namedtuple` accepterar nu ett valfritt "
"nyckelordsargument *module*, som när det anges används för attributet :attr:"
"`~type.__module__` i den returnerade namngivna tuple-klassen. (Bidrag från "
"Raymond Hettinger i :issue:`17941`.)"

msgid ""
"The *verbose* and *rename* arguments for :func:`~collections.namedtuple` are "
"now keyword-only. (Contributed by Raymond Hettinger in :issue:`25628`.)"
msgstr ""
"Argumenten *verbose* och *rename* för :func:`~collections.namedtuple` är nu "
"endast nyckelord. (Bidrag från Raymond Hettinger i :issue:`25628`.)"

msgid ""
"Recursive :class:`collections.deque` instances can now be pickled. "
"(Contributed by Serhiy Storchaka in :issue:`26482`.)"
msgstr ""
"Rekursiva :class:`collections.deque`-instanser kan nu picklas. (Bidrag från "
"Serhiy Storchaka i :issue:`26482`.)"

msgid "concurrent.futures"
msgstr "concurrent.futures"

msgid ""
"The :class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>` "
"class constructor now accepts an optional *thread_name_prefix* argument to "
"make it possible to customize the names of the threads created by the pool. "
"(Contributed by Gregory P. Smith in :issue:`27664`.)"
msgstr ""
"Klassens :class:`ThreadPoolExecutor <concurrent.futures.ThreadPoolExecutor>`-"
"konstruktor accepterar nu ett valfritt *thread_name_prefix*-argument för att "
"göra det möjligt att anpassa namnen på de trådar som skapas av poolen. "
"(Bidrag från Gregory P. Smith i :issue:`27664`.)"

msgid "contextlib"
msgstr "contextlib"

msgid ""
"The :class:`contextlib.AbstractContextManager` class has been added to "
"provide an abstract base class for context managers.  It provides a sensible "
"default implementation for ``__enter__()`` which returns ``self`` and leaves "
"``__exit__()`` an abstract method.  A matching class has been added to the :"
"mod:`typing` module as :class:`typing.ContextManager`. (Contributed by Brett "
"Cannon in :issue:`25609`.)"
msgstr ""
"Klassen :class:`contextlib.AbstractContextManager` har lagts till för att "
"tillhandahålla en abstrakt basklass för kontexthanterare.  Den "
"tillhandahåller en förnuftig standardimplementation för ``__enter__()`` som "
"returnerar ``self`` och lämnar ``__exit__()`` som en abstrakt metod.  En "
"matchande klass har lagts till i modulen :mod:`typing` som :class:`typing."
"ContextManager`. (Bidrag från Brett Cannon i :issue:`25609`.)"

msgid "datetime"
msgstr "datatid"

msgid ""
"The :class:`~datetime.datetime` and :class:`~datetime.time` classes have the "
"new :attr:`~time.fold` attribute used to disambiguate local time when "
"necessary.  Many functions in the :mod:`datetime` have been updated to "
"support local time disambiguation. See :ref:`Local Time Disambiguation "
"<whatsnew36-pep495>` section for more information. (Contributed by Alexander "
"Belopolsky in :issue:`24773`.)"
msgstr ""
"Klasserna :class:`~datetime.datetime` och :class:`~datetime.time` har det "
"nya attributet :attr:`~time.fold` som används för att särskilja lokal tid "
"när det behövs.  Många funktioner i :mod:`datetime` har uppdaterats för att "
"stödja entydighet av lokal tid. Se :ref:`Local Time Disambiguation "
"<whatsnew36-pep495>` avsnittet för mer information. (Bidrag från Alexander "
"Belopolsky i :issue:`24773`.)"

msgid ""
"The :meth:`datetime.strftime() <datetime.datetime.strftime>` and :meth:`date."
"strftime() <datetime.date.strftime>` methods now support ISO 8601 date "
"directives ``%G``, ``%u`` and ``%V``. (Contributed by Ashley Anderson in :"
"issue:`12006`.)"
msgstr ""
"Metoderna :meth:`datetime.strftime() <datetime.datetime.strftime>` och :meth:"
"`date.strftime() <datetime.date.strftime>` stöder nu ISO 8601-datadirektiven "
"``%G``, ``%u`` och ``%V``. (Bidrag från Ashley Anderson i :issue:`12006`.)"

msgid ""
"The :func:`datetime.isoformat() <datetime.datetime.isoformat>` function now "
"accepts an optional *timespec* argument that specifies the number of "
"additional components of the time value to include. (Contributed by "
"Alessandro Cucci and Alexander Belopolsky in :issue:`19475`.)"
msgstr ""
"Funktionen :func:`datetime.isoformat() <datetime.datetime.isoformat>` "
"accepterar nu ett valfritt *timespec*-argument som anger antalet ytterligare "
"komponenter i tidsvärdet som ska inkluderas. (Bidrag från Alessandro Cucci "
"och Alexander Belopolsky i :issue:`19475`.)"

msgid ""
"The :meth:`datetime.combine() <datetime.datetime.combine>` now accepts an "
"optional *tzinfo* argument. (Contributed by Alexander Belopolsky in :issue:"
"`27661`.)"
msgstr ""
":meth:`datetime.combine() <datetime.datetime.combine>` accepterar nu ett "
"valfritt *tzinfo*-argument. (Bidrag från Alexander Belopolsky i :issue:"
"`27661`.)"

msgid "decimal"
msgstr "decimal"

msgid ""
"New :meth:`Decimal.as_integer_ratio() <decimal.Decimal.as_integer_ratio>` "
"method that returns a pair ``(n, d)`` of integers that represent the given :"
"class:`~decimal.Decimal` instance as a fraction, in lowest terms and with a "
"positive denominator::"
msgstr ""
"Ny :meth:`Decimal.as_integer_ratio() <decimal.Decimal.as_integer_ratio>`-"
"metod som returnerar ett par ``(n, d)`` heltal som representerar den givna :"
"class:`~decimal.Decimal`-instansen som ett bråk, i lägsta termer och med en "
"positiv nämnare::"

msgid ""
">>> Decimal('-3.14').as_integer_ratio()\n"
"(-157, 50)"
msgstr ""
">>> Decimal('-3,14').as_integer_ratio()\n"
"(-157, 50)"

msgid "(Contributed by Stefan Krah amd Mark Dickinson in :issue:`25928`.)"
msgstr "(Bidrag från Stefan Krah och Mark Dickinson i :issue:`25928`.)"

msgid "distutils"
msgstr "distutils"

msgid ""
"The ``default_format`` attribute has been removed from ``distutils.command."
"sdist.sdist`` and the ``formats`` attribute defaults to ``['gztar']``. "
"Although not anticipated, any code relying on the presence of "
"``default_format`` may need to be adapted. See :issue:`27819` for more "
"details."
msgstr ""
"Attributet ``default_format`` har tagits bort från ``distutils.command.sdist."
"sdist`` och attributet ``formats`` har ``['gztar']`` som standard. Även om "
"det inte är förväntat, kan all kod som förlitar sig på förekomsten av "
"``default_format`` behöva anpassas. Se :issue:`27819` för mer information."

msgid "email"
msgstr "e-post"

msgid ""
"The new email API, enabled via the *policy* keyword to various constructors, "
"is no longer provisional.  The :mod:`email` documentation has been "
"reorganized and rewritten to focus on the new API, while retaining the old "
"documentation for the legacy API.  (Contributed by R. David Murray in :issue:"
"`24277`.)"
msgstr ""
"Det nya API:et för e-post, som aktiveras via nyckelordet *policy* i olika "
"konstruktörer, är inte längre provisoriskt.  Dokumentationen för :mod:"
"`email` har omorganiserats och skrivits om för att fokusera på det nya API:"
"et, medan den gamla dokumentationen för det äldre API:et har behållits.  "
"(Bidrag från R. David Murray i :issue:`24277`.)"

msgid ""
"The :mod:`email.mime` classes now all accept an optional *policy* keyword. "
"(Contributed by Berker Peksag in :issue:`27331`.)"
msgstr ""
"Klasserna :mod:`email.mime` accepterar nu alla ett valfritt nyckelord "
"*policy*. (Bidrag från Berker Peksag i :issue:`27331`.)"

msgid ""
"The :class:`~email.generator.DecodedGenerator` now supports the *policy* "
"keyword."
msgstr ""
"Klassen:`~email.generator.DecodedGenerator` har nu stöd för nyckelordet "
"*policy*."

msgid ""
"There is a new :mod:`~email.policy` attribute, :attr:`~email.policy.Policy."
"message_factory`, that controls what class is used by default when the "
"parser creates new message objects.  For the :attr:`email.policy.compat32` "
"policy this is :class:`~email.message.Message`, for the new policies it is :"
"class:`~email.message.EmailMessage`. (Contributed by R. David Murray in :"
"issue:`20476`.)"
msgstr ""
"Det finns ett nytt attribut :mod:`~email.policy`, :attr:`~email.policy."
"Policy.message_factory`, som styr vilken klass som används som standard när "
"parsern skapar nya meddelandeobjekt.  För policyn :attr:`email.policy."
"compat32` är detta :class:`~email.message.Message`, för de nya policyerna är "
"det :class:`~email.message.EmailMessage`. (Bidrag från R. David Murray i :"
"issue:`20476`.)"

msgid "encodings"
msgstr "kodningar"

msgid ""
"On Windows, added the ``'oem'`` encoding to use ``CP_OEMCP``, and the "
"``'ansi'`` alias for the existing ``'mbcs'`` encoding, which uses the "
"``CP_ACP`` code page. (Contributed by Steve Dower in :issue:`27959`.)"
msgstr ""
"I Windows har kodningen ``'oem`` lagts till för att använda ``CP_OEMCP``, "
"och aliaset ``'ansi`` för den befintliga kodningen ``'mbcs``, som använder "
"kodsidan ``CP_ACP``. (Bidrag från Steve Dower i :issue:`27959`.)"

msgid "enum"
msgstr "enum"

msgid ""
"Two new enumeration base classes have been added to the :mod:`enum` module: :"
"class:`~enum.Flag` and :class:`~enum.IntFlags`.  Both are used to define "
"constants that can be combined using the bitwise operators. (Contributed by "
"Ethan Furman in :issue:`23591`.)"
msgstr ""
"Två nya basklasser för uppräkning har lagts till i modulen :mod:`enum`: :"
"class:`~enum.Flag` och :class:`~enum.IntFlags`.  Båda används för att "
"definiera konstanter som kan kombineras med bitvisa operatorer. (Bidrag från "
"Ethan Furman i :issue:`23591`.)"

msgid ""
"Many standard library modules have been updated to use the :class:`~enum."
"IntFlags` class for their constants."
msgstr ""
"Många standardbiblioteksmoduler har uppdaterats så att de använder klassen :"
"class:`~enum.IntFlags` för sina konstanter."

msgid ""
"The new :class:`enum.auto` value can be used to assign values to enum "
"members automatically::"
msgstr ""
"Det nya :class:`enum.auto`-värdet kan användas för att automatiskt tilldela "
"värden till enum-medlemmar::"

msgid ""
">>> from enum import Enum, auto\n"
">>> class Color(Enum):\n"
"...     red = auto()\n"
"...     blue = auto()\n"
"...     green = auto()\n"
"...\n"
">>> list(Color)\n"
"[<Color.red: 1>, <Color.blue: 2>, <Color.green: 3>]"
msgstr ""
">>> from enum import Enum, auto\n"
">>> klass Färg(Enum):\n"
"... röd = auto()\n"
"... blå = auto()\n"
"... grön = auto()\n"
"...\n"
">>> list(Färg)\n"
"[<Color.red: 1>, <Color.blue: 2>, <Color.green: 3>]"

msgid "faulthandler"
msgstr "felhanterare"

msgid ""
"On Windows, the :mod:`faulthandler` module now installs a handler for "
"Windows exceptions: see :func:`faulthandler.enable`. (Contributed by Victor "
"Stinner in :issue:`23848`.)"
msgstr ""
"I Windows installerar modulen :mod:`faulthandler` nu en hanterare för "
"Windows-undantag: se :func:`faulthandler.enable`. (Bidrag från Victor "
"Stinner i :issue:`23848`.)"

msgid "fileinput"
msgstr "filinmatning"

msgid ""
":func:`~fileinput.hook_encoded` now supports the *errors* argument. "
"(Contributed by Joseph Hackman in :issue:`25788`.)"
msgstr ""
":func:`~fileinput.hook_encoded` stöder nu argumentet *errors*. (Bidrag från "
"Joseph Hackman i :issue:`25788`.)"

msgid "hashlib"
msgstr "hashlib"

msgid ""
":mod:`hashlib` supports OpenSSL 1.1.0.  The minimum recommend version is "
"1.0.2. (Contributed by Christian Heimes in :issue:`26470`.)"
msgstr ""
":mod:`hashlib` stöder OpenSSL 1.1.0.  Den minsta rekommenderade versionen är "
"1.0.2. (Bidrag från Christian Heimes i :issue:`26470`.)"

msgid ""
"BLAKE2 hash functions were added to the module. :func:`~hashlib.blake2b` "
"and :func:`~hashlib.blake2s` are always available and support the full "
"feature set of BLAKE2. (Contributed by Christian Heimes in :issue:`26798` "
"based on code by Dmitry Chestnykh and Samuel Neves. Documentation written by "
"Dmitry Chestnykh.)"
msgstr ""
"BLAKE2-hashfunktioner lades till i modulen. :func:`~hashlib.blake2b` och :"
"func:`~hashlib.blake2s` är alltid tillgängliga och stöder hela "
"funktionsuppsättningen i BLAKE2. (Bidrag från Christian Heimes i :issue:"
"`26798` baserat på kod av Dmitry Chestnykh och Samuel Neves. Dokumentation "
"skriven av Dmitry Chestnykh)"

msgid ""
"The SHA-3 hash functions :func:`~hashlib.sha3_224`, :func:`~hashlib."
"sha3_256`, :func:`~hashlib.sha3_384`, :func:`~hashlib.sha3_512`, and SHAKE "
"hash functions :func:`~hashlib.shake_128` and :func:`~hashlib.shake_256` "
"were added. (Contributed by Christian Heimes in :issue:`16113`. Keccak Code "
"Package by Guido Bertoni, Joan Daemen, Michaël Peeters, Gilles Van Assche, "
"and Ronny Van Keer.)"
msgstr ""
"SHA-3-hashfunktionerna :func:`~hashlib.sha3_224`, :func:`~hashlib."
"sha3_256`, :func:`~hashlib.sha3_384`, :func:`~hashlib.sha3_512`, och SHAKE-"
"hashfunktionerna :func:`~hashlib.shake_128` och :func:`~hashlib.shake_256` "
"lades till. (Bidrag från Christian Heimes i :issue:`16113`. Keccak kodpaket "
"av Guido Bertoni, Joan Daemen, Michaël Peeters, Gilles Van Assche och Ronny "
"Van Keer)"

msgid ""
"The password-based key derivation function :func:`~hashlib.scrypt` is now "
"available with OpenSSL 1.1.0 and newer. (Contributed by Christian Heimes in :"
"issue:`27928`.)"
msgstr ""
"Den lösenordsbaserade nyckelfunktionen :func:`~hashlib.scrypt` är nu "
"tillgänglig med OpenSSL 1.1.0 och nyare. (Bidrag från Christian Heimes i :"
"issue:`27928`.)"

msgid "http.client"
msgstr "http.klient"

msgid ""
":meth:`HTTPConnection.request() <http.client.HTTPConnection.request>` and :"
"meth:`~http.client.HTTPConnection.endheaders` both now support chunked "
"encoding request bodies. (Contributed by Demian Brecht and Rolf Krahl in :"
"issue:`12319`.)"
msgstr ""
":meth:`HTTPConnection.request() <http.client.HTTPConnection.request>` och :"
"meth:`~http.client.HTTPConnection.endheaders` stöder nu båda chunked "
"encoding request bodies. (Bidrag från Demian Brecht och Rolf Krahl i :issue:"
"`12319`.)"

msgid "idlelib and IDLE"
msgstr "idlelib och IDLE"

msgid ""
"The idlelib package is being modernized and refactored to make IDLE look and "
"work better and to make the code easier to understand, test, and improve. "
"Part of making IDLE look better, especially on Linux and Mac, is using ttk "
"widgets, mostly in the dialogs.  As a result, IDLE no longer runs with tcl/"
"tk 8.4.  It now requires tcl/tk 8.5 or 8.6.  We recommend running the latest "
"release of either."
msgstr ""
"Paketet idlelib moderniseras och omarbetas för att IDLE ska se bättre ut och "
"fungera bättre och för att koden ska bli lättare att förstå, testa och "
"förbättra. En del i att få IDLE att se bättre ut, särskilt på Linux och Mac, "
"är att använda ttk-widgetar, främst i dialogrutorna.  Som ett resultat av "
"detta körs IDLE inte längre med tcl/tk 8.4.  Nu krävs tcl/tk 8.5 eller 8.6.  "
"Vi rekommenderar att du kör den senaste versionen av någon av dessa."

msgid ""
"'Modernizing' includes renaming and consolidation of idlelib modules. The "
"renaming of files with partial uppercase names is similar to the renaming "
"of, for instance, Tkinter and TkFont to tkinter and tkinter.font in 3.0.  As "
"a result, imports of idlelib files that worked in 3.5 will usually not work "
"in 3.6.  At least a module name change will be needed (see idlelib/README."
"txt), sometimes more.  (Name changes contributed by Al Swiegart and Terry "
"Reedy in :issue:`24225`.  Most idlelib patches since have been and will be "
"part of the process.)"
msgstr ""
"\"Moderniseringen\" omfattar namnbyte och konsolidering av idlelib-moduler. "
"Omdöpningen av filer med delvis versala namn liknar omdöpningen av till "
"exempel Tkinter och TkFont till tkinter och tkinter.font i 3.0.  Som ett "
"resultat av detta kommer import av idlelib-filer som fungerade i 3.5 "
"vanligtvis inte att fungera i 3.6.  Åtminstone en ändring av modulnamnet "
"kommer att behövas (se idlelib/README.txt), ibland mer.  (Namnändringar som "
"Al Swiegart och Terry Reedy bidrog med i :issue:`24225`.  De flesta idlelib-"
"patchar sedan dess har varit och kommer att vara en del av processen)"

msgid ""
"In compensation, the eventual result with be that some idlelib classes will "
"be easier to use, with better APIs and docstrings explaining them.  "
"Additional useful information will be added to idlelib when available."
msgstr ""
"Som kompensation blir det slutliga resultatet att vissa idlelib-klasser blir "
"enklare att använda, med bättre API:er och dokument som förklarar dem.  "
"Ytterligare användbar information kommer att läggas till i idlelib när den "
"är tillgänglig."

msgid "New in 3.6.2:"
msgstr "Nytt i 3.6.2:"

msgid ""
"Multiple fixes for autocompletion. (Contributed by Louie Lu in :issue:"
"`15786`.)"
msgstr ""
"Flera korrigeringar för autokomplettering. (Bidrag från Louie Lu i :issue:"
"`15786`.)"

msgid "New in 3.6.3:"
msgstr "Nytt i 3.6.3:"

msgid ""
"Module Browser (on the File menu, formerly called Class Browser), now "
"displays nested functions and classes in addition to top-level functions and "
"classes. (Contributed by Guilherme Polo, Cheryl Sabella, and Terry Jan Reedy "
"in :issue:`1612262`.)"
msgstr ""
"Modulbläddraren (på Arkiv-menyn, tidigare kallad Klassbläddraren) visar nu "
"nästlade funktioner och klasser utöver funktioner och klasser på toppnivå. "
"(Bidrag från Guilherme Polo, Cheryl Sabella och Terry Jan Reedy i :issue:"
"`1612262`.)"

msgid ""
"The IDLE features formerly implemented as extensions have been reimplemented "
"as normal features.  Their settings have been moved from the Extensions tab "
"to other dialog tabs. (Contributed by Charles Wohlganger and Terry Jan Reedy "
"in :issue:`27099`.)"
msgstr ""
"De IDLE-funktioner som tidigare implementerades som tillägg har nu "
"implementerats som vanliga funktioner.  Deras inställningar har flyttats "
"från fliken Extensions till andra dialogflikar. (Bidrag från Charles "
"Wohlganger och Terry Jan Reedy i :issue:`27099`.)"

msgid ""
"The Settings dialog (Options, Configure IDLE) has been partly rewritten to "
"improve both appearance and function. (Contributed by Cheryl Sabella and "
"Terry Jan Reedy in multiple issues.)"
msgstr ""
"Dialogrutan Inställningar (Alternativ, Konfigurera IDLE) har delvis skrivits "
"om för att förbättra både utseende och funktion. (Bidrag från Cheryl Sabella "
"och Terry Jan Reedy i flera utgåvor)"

msgid "New in 3.6.4:"
msgstr "Nytt i 3.6.4:"

msgid ""
"The font sample now includes a selection of non-Latin characters so that "
"users can better see the effect of selecting a particular font. (Contributed "
"by Terry Jan Reedy in :issue:`13802`.) The sample can be edited to include "
"other characters. (Contributed by Serhiy Storchaka in :issue:`31860`.)"
msgstr ""
"Teckensnittsexemplet innehåller nu ett urval av icke-latinska tecken så att "
"användarna bättre kan se effekten av att välja ett visst teckensnitt. "
"(Bidrag från Terry Jan Reedy i :issue:`13802`.) Exemplet kan redigeras för "
"att inkludera andra tecken. (Bidrag från Serhiy Storchaka i :issue:`31860`.)"

msgid "New in 3.6.6:"
msgstr "Nytt i 3.6.6:"

msgid ""
"Editor code context option revised.  Box displays all context lines up to "
"maxlines.  Clicking on a context line jumps the editor to that line.  "
"Context colors for custom themes is added to Highlights tab of Settings "
"dialog. (Contributed by Cheryl Sabella and Terry Jan Reedy in :issue:"
"`33642`, :issue:`33768`, and :issue:`33679`.)"
msgstr ""
"Redigeringsalternativet för kodkontext reviderat.  Rutan visar alla "
"kontextlinjer upp till maxlinjer.  Om du klickar på en kontextlinje hoppar "
"redigeraren till den linjen.  Kontextfärger för anpassade teman har lagts "
"till på fliken Höjdpunkter i dialogrutan Inställningar. (Bidrag från Cheryl "
"Sabella och Terry Jan Reedy i :issue:`33642`, :issue:`33768`, och :issue:"
"`33679`.)"

msgid ""
"On Windows, a new API call tells Windows that tk scales for DPI. On Windows "
"8.1+ or 10, with DPI compatibility properties of the Python binary "
"unchanged, and a monitor resolution greater than 96 DPI, this should make "
"text and lines sharper.  It should otherwise have no effect. (Contributed by "
"Terry Jan Reedy in :issue:`33656`.)"
msgstr ""
"I Windows säger ett nytt API-anrop till Windows att tk skalar för DPI. På "
"Windows 8.1+ eller 10, med oförändrade DPI-kompatibilitetsegenskaper för "
"Python-binären och en skärmupplösning som är större än 96 DPI, bör detta "
"göra text och linjer skarpare.  I övrigt bör det inte ha någon effekt. "
"(Bidrag från Terry Jan Reedy i :issue:`33656`.)"

msgid "New in 3.6.7:"
msgstr "Nytt i 3.6.7:"

msgid ""
"Output over N lines (50 by default) is squeezed down to a button. N can be "
"changed in the PyShell section of the General page of the Settings dialog.  "
"Fewer, but possibly extra long, lines can be squeezed by right clicking on "
"the output.  Squeezed output can be expanded in place by double-clicking the "
"button or into the clipboard or a separate window by right-clicking the "
"button.  (Contributed by Tal Einat in :issue:`1529353`.)"
msgstr ""
"Utdata över N rader (50 som standard) pressas ner till en knapp. N kan "
"ändras i avsnittet PyShell på sidan Allmänt i dialogrutan Inställningar.  "
"Färre, men eventuellt extra långa, rader kan pressas genom att högerklicka "
"på utmatningen.  Pressad utdata kan expanderas på plats genom att "
"dubbelklicka på knappen eller till urklippet eller ett separat fönster genom "
"att högerklicka på knappen.  (Bidrag från Tal Einat i :issue:`1529353`.)"

msgid "importlib"
msgstr "importlib"

msgid ""
"Import now raises the new exception :exc:`ModuleNotFoundError` (subclass of :"
"exc:`ImportError`) when it cannot find a module.  Code that current checks "
"for ``ImportError`` (in try-except) will still work. (Contributed by Eric "
"Snow in :issue:`15767`.)"
msgstr ""
"Import ger nu upphov till det nya undantaget :exc:`ModuleNotFoundError` "
"(underklass till :exc:`ImportError`) när den inte kan hitta en modul.  Kod "
"som för närvarande kontrollerar för ``ImportError`` (i try-except) kommer "
"fortfarande att fungera. (Bidrag från Eric Snow i :issue:`15767`.)"

msgid ""
":class:`importlib.util.LazyLoader` now calls :meth:`~importlib.abc.Loader."
"create_module` on the wrapped loader, removing the restriction that :class:"
"`importlib.machinery.BuiltinImporter` and :class:`importlib.machinery."
"ExtensionFileLoader` couldn't be used with :class:`importlib.util."
"LazyLoader`."
msgstr ""
":class:`importlib.util.LazyLoader` anropar nu :meth:`~importlib.abc.Loader."
"create_module` på den inkapslade laddaren, vilket tar bort begränsningen "
"att :class:`importlib.machinery.BuiltinImporter` och :class:`importlib."
"machinery.ExtensionFileLoader` inte kunde användas med :class:`importlib."
"util.LazyLoader`."

msgid ""
":func:`importlib.util.cache_from_source`, :func:`importlib.util."
"source_from_cache`, and :func:`importlib.util.spec_from_file_location` now "
"accept a :term:`path-like object`."
msgstr ""
":func:`importlib.util.cache_from_source`, :func:`importlib.util."
"source_from_cache`, och :func:`importlib.util.spec_from_file_location` "
"accepterar nu en :term:`path-like object`."

msgid "inspect"
msgstr "inspektera"

msgid ""
"The :func:`inspect.signature() <inspect.signature>` function now reports the "
"implicit ``.0`` parameters generated by the compiler for comprehension and "
"generator expression scopes as if they were positional-only parameters "
"called ``implicit0``. (Contributed by Jelle Zijlstra in :issue:`19611`.)"
msgstr ""
"Funktionen :func:`inspect.signature() <inspect.signature>`` rapporterar nu "
"de implicita ``.0``-parametrarna som genereras av kompilatorn för "
"förståelse- och generatoruttrycksomfång som om de vore enbart positionella "
"parametrar med namnet ``implicit0``. (Bidrag från Jelle Zijlstra i :issue:"
"`19611`.)"

msgid ""
"To reduce code churn when upgrading from Python 2.7 and the legacy :func:"
"`inspect.getargspec` API, the previously documented deprecation of :func:"
"`inspect.getfullargspec` has been reversed. While this function is "
"convenient for single/source Python 2/3 code bases, the richer :func:"
"`inspect.signature` interface remains the recommended approach for new code. "
"(Contributed by Nick Coghlan in :issue:`27172`)"
msgstr ""
"För att minska kodförlusten vid uppgradering från Python 2.7 och det äldre :"
"func:`inspect.getargspec` API:et, har den tidigare dokumenterade utfasningen "
"av :func:`inspect.getfullargspec` återställts. Även om denna funktion är "
"bekväm för Python 2/3-kodbaser med en enda källa, är det rikare :func:"
"`inspect.signature`-gränssnittet fortfarande det rekommenderade "
"tillvägagångssättet för ny kod. (Bidrag från Nick Coghlan i :issue:`27172`)"

msgid "json"
msgstr "json"

msgid ""
":func:`json.load` and :func:`json.loads` now support binary input.  Encoded "
"JSON should be represented using either UTF-8, UTF-16, or UTF-32. "
"(Contributed by Serhiy Storchaka in :issue:`17909`.)"
msgstr ""
":func:`json.load` och :func:`json.loads` stöder nu binär indata.  Kodad JSON "
"bör representeras med antingen UTF-8, UTF-16 eller UTF-32. (Bidrag från "
"Serhiy Storchaka i :issue:`17909`.)"

msgid "logging"
msgstr "loggning"

msgid ""
"The new :meth:`WatchedFileHandler.reopenIfNeeded() <logging.handlers."
"WatchedFileHandler.reopenIfNeeded>` method has been added to add the ability "
"to check if the log file needs to be reopened. (Contributed by Marian Horban "
"in :issue:`24884`.)"
msgstr ""
"Den nya :meth:`WatchedFileHandler.reopenIfNeeded() <logging.handlers."
"WatchedFileHandler.reopenIfNeeded>` metoden har lagts till för att ge "
"möjlighet att kontrollera om loggfilen behöver öppnas igen. (Bidrag från "
"Marian Horban i :issue:`24884`.)"

msgid "math"
msgstr "matematik"

msgid ""
"The tau (*τ*) constant has been added to the :mod:`math` and :mod:`cmath` "
"modules. (Contributed by Lisa Roach in :issue:`12345`, see :pep:`628` for "
"details.)"
msgstr ""
"Tau (*τ*)-konstanten har lagts till i modulerna :mod:`math` och :mod:"
"`cmath`. (Bidrag från Lisa Roach i :issue:`12345`, se :pep:`628` för "
"detaljer)"

msgid "multiprocessing"
msgstr "multiprocessing"

msgid ""
":ref:`Proxy Objects <multiprocessing-proxy_objects>` returned by :func:"
"`multiprocessing.Manager` can now be nested. (Contributed by Davin Potts in :"
"issue:`6766`.)"
msgstr ""
":ref:`Proxyobjekt <multiprocessing-proxy_objects>` som returneras av :func:"
"`multiprocessing.Manager` kan nu nästlas. (Bidrag från Davin Potts i :issue:"
"`6766`.)"

msgid "os"
msgstr "os"

msgid ""
"See the summary of :ref:`PEP 519 <whatsnew36-pep519>` for details on how "
"the :mod:`os` and :mod:`os.path` modules now support :term:`path-like "
"objects <path-like object>`."
msgstr ""
"Se sammanfattningen av :ref:`PEP 519 <whatsnew36-pep519>` för detaljer om "
"hur modulerna :mod:`os` och :mod:`os.path` nu stöder :term:`path-liknande "
"objekt <path-like object>`."

msgid ":func:`~os.scandir` now supports :class:`bytes` paths on Windows."
msgstr ":func:`~os.scandir` stöder nu :class:`bytes` sökvägar på Windows."

msgid ""
"A new :meth:`~os.scandir.close` method allows explicitly closing a :func:"
"`~os.scandir` iterator.  The :func:`~os.scandir` iterator now supports the :"
"term:`context manager` protocol.  If a :func:`scandir` iterator is neither "
"exhausted nor explicitly closed a :exc:`ResourceWarning` will be emitted in "
"its destructor. (Contributed by Serhiy Storchaka in :issue:`25994`.)"
msgstr ""
"En ny metod :meth:`~os.scandir.close` gör det möjligt att explicit stänga "
"en :func:`~os.scandir` iterator.  Iteratorn :func:`~os.scandir` har nu stöd "
"för protokollet :term:`context manager`.  Om en :func:`scandir` iterator "
"varken är uttömd eller explicit stängd kommer en :exc:`ResourceWarning` att "
"skickas ut i dess destruktor. (Bidrag från Serhiy Storchaka i :issue:"
"`25994`.)"

msgid ""
"The Linux ``getrandom()`` syscall (get random bytes) is now exposed as the "
"new :func:`os.getrandom` function. (Contributed by Victor Stinner, part of "
"the :pep:`524`)"
msgstr ""
"Linux ``getrandom()`` syscall (hämta slumpmässiga byte) är nu exponerad som "
"den nya :func:`os.getrandom` funktionen. (Bidrag från Victor Stinner, en del "
"av :pep:`524`)"

msgid "pathlib"
msgstr "sökväg"

msgid ""
":mod:`pathlib` now supports :term:`path-like objects <path-like object>`. "
"(Contributed by Brett Cannon in :issue:`27186`.)"
msgstr ""
":mod:`pathlib` stöder nu :term:`path-liknande objekt <path-like object>`. "
"(Bidrag från Brett Cannon i :issue:`27186`.)"

msgid "See the summary of :ref:`PEP 519 <whatsnew36-pep519>` for details."
msgstr ""
"Se sammanfattningen av :ref:`PEP 519 <whatsnew36-pep519>` för mer "
"information."

msgid "pdb"
msgstr "pdb"

msgid ""
"The :class:`~pdb.Pdb` class constructor has a new optional *readrc* argument "
"to control whether ``.pdbrc`` files should be read."
msgstr ""
"Klassens :class:`~pdb.Pdb`-konstruktor har ett nytt valfritt *readrc*-"
"argument för att styra om ``.pdbrc``-filer ska läsas."

msgid "pickle"
msgstr "gurka"

msgid ""
"Objects that need ``__new__`` called with keyword arguments can now be "
"pickled using :ref:`pickle protocols <pickle-protocols>` older than protocol "
"version 4. Protocol version 4 already supports this case.  (Contributed by "
"Serhiy Storchaka in :issue:`24164`.)"
msgstr ""
"Objekt som behöver ``__new__`` anropas med nyckelordsargument kan nu picklas "
"med :ref:`pickle protocols <pickle-protocols>` äldre än protokollversion 4. "
"Protokollversion 4 stöder redan detta fall.  (Bidrag från Serhiy Storchaka "
"i :issue:`24164`.)"

msgid "pickletools"
msgstr "pickletools"

msgid ""
":func:`pickletools.dis` now outputs the implicit memo index for the "
"``MEMOIZE`` opcode. (Contributed by Serhiy Storchaka in :issue:`25382`.)"
msgstr ""
":func:`pickletools.dis` skriver nu ut det implicita memoindexet för "
"``MEMOIZE``-opkoden. (Bidrag från Serhiy Storchaka i :issue:`25382`.)"

msgid "pydoc"
msgstr "pydoc"

msgid ""
"The :mod:`pydoc` module has learned to respect the ``MANPAGER`` environment "
"variable. (Contributed by Matthias Klose in :issue:`8637`.)"
msgstr ""
"Modulen :mod:`pydoc` har lärt sig att respektera miljövariabeln "
"``MANPAGER``. (Bidrag från Matthias Klose i :issue:`8637`.)"

msgid ""
":func:`help` and :mod:`pydoc` can now list named tuple fields in the order "
"they were defined rather than alphabetically. (Contributed by Raymond "
"Hettinger in :issue:`24879`.)"
msgstr ""
":func:`help` och :mod:`pydoc` kan nu lista namngivna tupelfält i den ordning "
"de definierades istället för i alfabetisk ordning. (Bidrag från Raymond "
"Hettinger i :issue:`24879`.)"

msgid "random"
msgstr "slumpvis"

msgid ""
"The new :func:`~random.choices` function returns a list of elements of "
"specified size from the given population with optional weights. (Contributed "
"by Raymond Hettinger in :issue:`18844`.)"
msgstr ""
"Den nya funktionen :func:`~random.choices` returnerar en lista med element "
"av angiven storlek från den givna populationen med valfria vikter. (Bidrag "
"från Raymond Hettinger i :issue:`18844`.)"

msgid "re"
msgstr "re"

msgid ""
"Added support of modifier spans in regular expressions.  Examples: ``'(?i:"
"p)ython'`` matches ``'python'`` and ``'Python'``, but not ``'PYTHON'``; ``'(?"
"i)g(?-i:v)r'`` matches ``'GvR'`` and ``'gvr'``, but not ``'GVR'``. "
"(Contributed by Serhiy Storchaka in :issue:`433028`.)"
msgstr ""
"Stöd för modifieringsspann i reguljära uttryck har lagts till.  Exempel på "
"detta: ``'(?i:p)ython'`` matchar ``'python'`` och ``'Python'``, men inte "
"``'PYTHON'``; ``'(?i)g(?-i:v)r'`` matchar ``'GvR'`` och ``'gvr'``, men inte "
"``'GVR'``. (Bidrag från Serhiy Storchaka i :issue:`433028`.)"

msgid ""
"Match object groups can be accessed by ``__getitem__``, which is equivalent "
"to ``group()``.  So ``mo['name']`` is now equivalent to ``mo."
"group('name')``.  (Contributed by Eric Smith in :issue:`24454`.)"
msgstr ""
"Grupper av matchningsobjekt kan nås med ``__getitem__``, vilket motsvarar "
"``group()``.  Så ``mo['name']`` är nu likvärdigt med ``mo.group('name')``.  "
"(Bidrag från Eric Smith i :issue:`24454`.)"

msgid ""
":class:`~re.Match` objects now support :meth:`index-like objects <object."
"__index__>` as group indices. (Contributed by Jeroen Demeyer and Xiang Zhang "
"in :issue:`27177`.)"
msgstr ""
":class:`~re.Match`-objekt stöder nu :meth:`indexliknande objekt <object."
"__index__>` som gruppindex. (Bidrag från Jeroen Demeyer och Xiang Zhang i :"
"issue:`27177`.)"

msgid "readline"
msgstr "läslinje"

msgid ""
"Added :func:`~readline.set_auto_history` to enable or disable automatic "
"addition of input to the history list.  (Contributed by Tyler Crompton in :"
"issue:`26870`.)"
msgstr ""
"Lagt till :func:`~readline.set_auto_history` för att aktivera eller "
"inaktivera automatiskt tillägg av indata till historiklistan.  (Bidrag från "
"Tyler Crompton i :issue:`26870`.)"

msgid "rlcompleter"
msgstr "rlcompleter"

msgid ""
"Private and special attribute names now are omitted unless the prefix starts "
"with underscores.  A space or a colon is added after some completed "
"keywords. (Contributed by Serhiy Storchaka in :issue:`25011` and :issue:"
"`25209`.)"
msgstr ""
"Privata och speciella attributnamn utelämnas nu om inte prefixet börjar med "
"understrykningstecken.  Ett mellanslag eller en kolon läggs till efter vissa "
"avslutade nyckelord. (Bidrag från Serhiy Storchaka i :issue:`25011` och :"
"issue:`25209`.)"

msgid "shlex"
msgstr "shlex"

msgid ""
"The :class:`~shlex.shlex` has much :ref:`improved shell compatibility "
"<improved-shell-compatibility>` through the new *punctuation_chars* argument "
"to control which characters are treated as punctuation. (Contributed by "
"Vinay Sajip in :issue:`1521950`.)"
msgstr ""
"Klassen:`~shlex.shlex` har mycket :ref:`förbättrad skalkompatibilitet "
"<improved-shell-compatibility>` genom det nya argumentet *punctuation_chars* "
"för att kontrollera vilka tecken som behandlas som skiljetecken. (Bidrag "
"från Vinay Sajip i :issue:`1521950`.)"

msgid "site"
msgstr "plats"

msgid ""
"When specifying paths to add to :data:`sys.path` in a ``.pth`` file, you may "
"now specify file paths on top of directories (e.g. zip files). (Contributed "
"by Wolfgang Langner in :issue:`26587`)."
msgstr ""
"När du anger sökvägar att lägga till i :data:`sys.path` i en ``.pth``-fil, "
"kan du nu ange filsökvägar ovanpå kataloger (t.ex. zip-filer). (Bidrag från "
"Wolfgang Langner i :issue:`26587`)."

msgid "sqlite3"
msgstr "sqlite3"

msgid ""
":attr:`sqlite3.Cursor.lastrowid` now supports the ``REPLACE`` statement. "
"(Contributed by Alex LordThorsen in :issue:`16864`.)"
msgstr ""
":attr:`sqlite3.Cursor.lastrowid` stöder nu ``REPLACE``-satsen. (Bidrag från "
"Alex LordThorsen i :issue:`16864`.)"

msgid "socket"
msgstr "kortplats"

msgid ""
"The :func:`~socket.socket.ioctl` function now supports the :const:`~socket."
"SIO_LOOPBACK_FAST_PATH` control code. (Contributed by Daniel Stokes in :"
"issue:`26536`.)"
msgstr ""
"Funktionen :func:`~socket.socket.ioctl` har nu stöd för kontrollkoden :const:"
"`~socket.SIO_LOOPBACK_FAST_PATH`. (Bidrag från Daniel Stokes i :issue:"
"`26536`.)"

msgid ""
"The :meth:`~socket.socket.getsockopt` constants ``SO_DOMAIN``, "
"``SO_PROTOCOL``, ``SO_PEERSEC``, and ``SO_PASSSEC`` are now supported. "
"(Contributed by Christian Heimes in :issue:`26907`.)"
msgstr ""
"Konstanterna :meth:`~socket.socket.getsockopt`` ``SO_DOMAIN``, "
"``SO_PROTOCOL``, ``SO_PEERSEC`` och ``SO_PASSSEC`` stöds nu. (Bidrag från "
"Christian Heimes i :issue:`26907`.)"

msgid ""
"The :meth:`~socket.socket.setsockopt` now supports the ``setsockopt(level, "
"optname, None, optlen: int)`` form. (Contributed by Christian Heimes in :"
"issue:`27744`.)"
msgstr ""
":meth:`~socket.socket.setsockopt` stöder nu formen ``setsockopt(level, "
"optname, None, optlen: int)``. (Bidrag från Christian Heimes i :issue:"
"`27744`.)"

msgid ""
"The socket module now supports the address family :const:`~socket.AF_ALG` to "
"interface with Linux Kernel crypto API. ``ALG_*``, ``SOL_ALG`` and :meth:"
"`~socket.socket.sendmsg_afalg` were added. (Contributed by Christian Heimes "
"in :issue:`27744` with support from Victor Stinner.)"
msgstr ""
"Socket-modulen har nu stöd för adressfamiljen :const:`~socket.AF_ALG` för "
"gränssnitt mot Linux Kernel crypto API. ``ALG_*``, ``SOL_ALG`` och :meth:"
"`~socket.socket.sendmsg_afalg` lades till. (Bidrag från Christian Heimes i :"
"issue:`27744` med stöd från Victor Stinner.)"

msgid ""
"New Linux constants ``TCP_USER_TIMEOUT`` and ``TCP_CONGESTION`` were added. "
"(Contributed by Omar Sandoval, :issue:`26273`)."
msgstr ""
"Nya Linux-konstanter ``TCP_USER_TIMEOUT`` och ``TCP_CONGESTION`` lades till. "
"(Bidrag från Omar Sandoval, :issue:`26273`)."

msgid "socketserver"
msgstr "socketserver"

msgid ""
"Servers based on the :mod:`socketserver` module, including those defined in :"
"mod:`http.server`, :mod:`xmlrpc.server` and :mod:`wsgiref.simple_server`, "
"now support the :term:`context manager` protocol. (Contributed by Aviv "
"Palivoda in :issue:`26404`.)"
msgstr ""
"Servrar baserade på modulen :mod:`socketserver`, inklusive de som definieras "
"i :mod:`http.server`, :mod:`xmlrpc.server` och :mod:`wsgiref.simple_server`, "
"stöder nu protokollet :term:`context manager`. (Bidrag från Aviv Palivoda i :"
"issue:`26404`.)"

msgid ""
"The :attr:`~socketserver.StreamRequestHandler.wfile` attribute of :class:"
"`~socketserver.StreamRequestHandler` classes now implements the :class:`io."
"BufferedIOBase` writable interface.  In particular, calling :meth:`~io."
"BufferedIOBase.write` is now guaranteed to send the data in full.  "
"(Contributed by Martin Panter in :issue:`26721`.)"
msgstr ""
"Attributet :attr:`~socketserver.StreamRequestHandler.wfile` i klasserna :"
"class:`~socketserver.StreamRequestHandler` implementerar nu det skrivbara "
"gränssnittet :class:`io.BufferedIOBase`.  I synnerhet är anrop av :meth:`~io."
"BufferedIOBase.write` nu garanterat att skicka data i sin helhet.  (Bidrag "
"från Martin Panter i :issue:`26721`.)"

msgid "ssl"
msgstr "ssl"

msgid ""
":mod:`ssl` supports OpenSSL 1.1.0.  The minimum recommend version is 1.0.2. "
"(Contributed by Christian Heimes in :issue:`26470`.)"
msgstr ""
":mod:`ssl` stöder OpenSSL 1.1.0.  Den minsta rekommenderade versionen är "
"1.0.2. (Bidrag från Christian Heimes i :issue:`26470`.)"

msgid ""
"3DES has been removed from the default cipher suites and ChaCha20 Poly1305 "
"cipher suites have been added. (Contributed by Christian Heimes in :issue:"
"`27850` and :issue:`27766`.)"
msgstr ""
"3DES har tagits bort från standardchiffersviterna och ChaCha20 Poly1305-"
"chiffersviter har lagts till. (Bidrag från Christian Heimes i :issue:`27850` "
"och :issue:`27766`.)"

msgid ""
":class:`~ssl.SSLContext` has better default configuration for options and "
"ciphers. (Contributed by Christian Heimes in :issue:`28043`.)"
msgstr ""
":class:`~ssl.SSLContext` har bättre standardkonfiguration för alternativ och "
"chiffer. (Bidrag från Christian Heimes i :issue:`28043`.)"

msgid ""
"SSL session can be copied from one client-side connection to another with "
"the new :class:`~ssl.SSLSession` class.  TLS session resumption can speed up "
"the initial handshake, reduce latency and improve performance (Contributed "
"by Christian Heimes in :issue:`19500` based on a draft by Alex Warhawk.)"
msgstr ""
"SSL-session kan kopieras från en anslutning på klientsidan till en annan med "
"den nya :class:`~ssl.SSLSession`-klassen.  TLS session resumption can speed "
"up the initial handshake, reduce latency and improve performance (Bidrag "
"från Christian Heimes i :issue:`19500` baserat på ett utkast av Alex "
"Warhawk.)"

msgid ""
"The new :meth:`~ssl.SSLContext.get_ciphers` method can be used to get a list "
"of enabled ciphers in order of cipher priority."
msgstr ""
"Den nya metoden :meth:`~ssl.SSLContext.get_ciphers` kan användas för att få "
"en lista över aktiverade chiffer i prioritetsordning."

msgid ""
"All constants and flags have been converted to :class:`~enum.IntEnum` and :"
"class:`~enum.IntFlags`. (Contributed by Christian Heimes in :issue:`28025`.)"
msgstr ""
"Alla konstanter och flaggor har konverterats till :class:`~enum.IntEnum` "
"och :class:`~enum.IntFlags`. (Bidrag från Christian Heimes i :issue:`28025`.)"

msgid ""
"Server and client-side specific TLS protocols for :class:`~ssl.SSLContext` "
"were added. (Contributed by Christian Heimes in :issue:`28085`.)"
msgstr ""
"Server- och klientsidespecifika TLS-protokoll för :class:`~ssl.SSLContext` "
"lades till. (Bidrag från Christian Heimes i :issue:`28085`.)"

msgid ""
"Added :attr:`ssl.SSLContext.post_handshake_auth` to enable and :meth:`ssl."
"SSLSocket.verify_client_post_handshake` to initiate TLS 1.3 post-handshake "
"authentication. (Contributed by Christian Heimes in :gh:`78851`.)"
msgstr ""
"Lagt till :attr:`ssl.SSLContext.post_handshake_auth` för att aktivera och :"
"meth:`ssl.SSLSocket.verify_client_post_handshake` för att initiera TLS 1.3 "
"post-handshake-autentisering. (Bidrag från Christian Heimes i :gh:`78851`.)"

msgid "statistics"
msgstr "statistik"

msgid ""
"A new :func:`~statistics.harmonic_mean` function has been added. "
"(Contributed by Steven D'Aprano in :issue:`27181`.)"
msgstr ""
"En ny :func:`~statistics.harmonic_mean`-funktion har lagts till. (Bidrag "
"från Steven D'Aprano i :issue:`27181`.)"

msgid "struct"
msgstr "struktur"

msgid ""
":mod:`struct` now supports IEEE 754 half-precision floats via the ``'e'`` "
"format specifier. (Contributed by Eli Stevens, Mark Dickinson in :issue:"
"`11734`.)"
msgstr ""
":mod:`struct` stöder nu IEEE 754 halvprecisionsflottor via "
"formatspecificeraren ``'e'``. (Bidrag från Eli Stevens, Mark Dickinson i :"
"issue:`11734`.)"

msgid "subprocess"
msgstr "delprocess"

msgid ""
":class:`subprocess.Popen` destructor now emits a :exc:`ResourceWarning` "
"warning if the child process is still running. Use the context manager "
"protocol (``with proc: ...``) or explicitly call the :meth:`~subprocess."
"Popen.wait` method to read the exit status of the child process. "
"(Contributed by Victor Stinner in :issue:`26741`.)"
msgstr ""
":class:`subprocess.Popen` destructor avger nu en :exc:`ResourceWarning`-"
"varning om underordnad process fortfarande körs. Använd "
"kontexthanterarprotokollet (``with proc: ...``) eller anropa explicit "
"metoden :meth:`~subprocess.Popen.wait` för att läsa barnprocessens "
"utgångsstatus. (Bidrag från Victor Stinner i :issue:`26741`.)"

msgid ""
"The :class:`subprocess.Popen` constructor and all functions that pass "
"arguments through to it now accept *encoding* and *errors* arguments. "
"Specifying either of these will enable text mode for the *stdin*, *stdout* "
"and *stderr* streams. (Contributed by Steve Dower in :issue:`6135`.)"
msgstr ""
"Konstruktorn :class:`subprocess.Popen` och alla funktioner som skickar "
"argument till den accepterar nu argumenten *encoding* och *errors*. Om något "
"av dessa anges aktiveras textläge för strömmarna *stdin*, *stdout* och "
"*stderr*. (Bidrag från Steve Dower i :issue:`6135`.)"

msgid "sys"
msgstr "system"

msgid ""
"The new :func:`~sys.getfilesystemencodeerrors` function returns the name of "
"the error mode used to convert between Unicode filenames and bytes "
"filenames. (Contributed by Steve Dower in :issue:`27781`.)"
msgstr ""
"Den nya funktionen :func:`~sys.getfilesystemencodeerrors` returnerar namnet "
"på det felläge som används för att konvertera mellan Unicode-filnamn och "
"bytes-filnamn. (Bidrag från Steve Dower i :issue:`27781`.)"

msgid ""
"On Windows the return value of the :func:`~sys.getwindowsversion` function "
"now includes the *platform_version* field which contains the accurate major "
"version, minor version and build number of the current operating system, "
"rather than the version that is being emulated for the process (Contributed "
"by Steve Dower in :issue:`27932`.)"
msgstr ""
"I Windows innehåller returvärdet för funktionen :func:`~sys."
"getwindowsversion` nu fältet *platform_version* som innehåller den exakta "
"huvudversionen, minoritetsversionen och byggnumret för det aktuella "
"operativsystemet, snarare än den version som emuleras för processen (Bidrag "
"från Steve Dower i :issue:`27932`.)"

msgid "telnetlib"
msgstr "telnetlib"

msgid ""
":class:`!telnetlib.Telnet` is now a context manager (contributed by Stéphane "
"Wirtel in :issue:`25485`)."
msgstr ""
":class:`!telnetlib.Telnet` är nu en kontexthanterare (bidrag från Stéphane "
"Wirtel i :issue:`25485`)."

msgid "time"
msgstr "tid"

msgid ""
"The :class:`~time.struct_time` attributes :attr:`tm_gmtoff` and :attr:"
"`tm_zone` are now available on all platforms."
msgstr ""
"Attributen :class:`~time.struct_time` :attr:`tm_gmtoff` och :attr:`tm_zone` "
"är nu tillgängliga på alla plattformar."

msgid "timeit"
msgstr "tidsinställning"

msgid ""
"The new :meth:`Timer.autorange() <timeit.Timer.autorange>` convenience "
"method has been added to call :meth:`Timer.timeit() <timeit.Timer.timeit>` "
"repeatedly so that the total run time is greater or equal to 200 "
"milliseconds. (Contributed by Steven D'Aprano in :issue:`6422`.)"
msgstr ""
"Den nya :meth:`Timer.autorange() <timeit.Timer.autorange>` "
"bekvämlighetsmetoden har lagts till för att anropa :meth:`Timer.timeit() "
"<timeit.Timer.timeit>` upprepade gånger så att den totala körtiden är större "
"än eller lika med 200 millisekunder. (Bidrag från Steven D'Aprano i :issue:"
"`6422`.)"

msgid ""
":mod:`timeit` now warns when there is substantial (4x) variance between best "
"and worst times. (Contributed by Serhiy Storchaka in :issue:`23552`.)"
msgstr ""
":mod:`timeit` varnar nu när det finns en betydande (4x) varians mellan bästa "
"och sämsta tid. (Bidrag från Serhiy Storchaka i :issue:`23552`.)"

msgid "tkinter"
msgstr "tkinter"

msgid ""
"Added methods :meth:`~tkinter.Variable.trace_add`, :meth:`~tkinter.Variable."
"trace_remove` and :meth:`~tkinter.Variable.trace_info` in the :class:"
"`tkinter.Variable` class.  They replace old methods :meth:`~tkinter.Variable."
"trace_variable`, :meth:`~tkinter.Variable.trace`, :meth:`~tkinter.Variable."
"trace_vdelete` and :meth:`~tkinter.Variable.trace_vinfo` that use obsolete "
"Tcl commands and might not work in future versions of Tcl. (Contributed by "
"Serhiy Storchaka in :issue:`22115`)."
msgstr ""
"Lagt till metoderna :meth:`~tkinter.Variable.trace_add`, :meth:`~tkinter."
"Variable.trace_remove` och :meth:`~tkinter.Variable.trace_info` i klassen :"
"class:`tkinter.Variable`.  De ersätter gamla metoder :meth:`~tkinter."
"Variable.trace_variable`, :meth:`~tkinter.Variable.trace`, :meth:`~tkinter."
"Variable.trace_vdelete` och :meth:`~tkinter.Variable.trace_vinfo` som "
"använder föråldrade Tcl-kommandon och kanske inte fungerar i framtida "
"versioner av Tcl. (Bidrag från Serhiy Storchaka i :issue:`22115`)."

msgid "traceback"
msgstr "spårning"

msgid ""
"Both the traceback module and the interpreter's builtin exception display "
"now abbreviate long sequences of repeated lines in tracebacks as shown in "
"the following example::"
msgstr ""
"Både spårningsmodulen och tolkens inbyggda undantagsvisning förkortar nu "
"långa sekvenser av upprepade rader i spårningar som visas i följande "
"exempel::"

msgid ""
">>> def f(): f()\n"
"...\n"
">>> f()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"  File \"<stdin>\", line 1, in f\n"
"  File \"<stdin>\", line 1, in f\n"
"  File \"<stdin>\", line 1, in f\n"
"  [Previous line repeated 995 more times]\n"
"RecursionError: maximum recursion depth exceeded"
msgstr ""
"&gt;&gt;&gt; def f(): f()\n"
"...\n"
"&gt;&gt;&gt; f()\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i <module>\n"
"  Fil \"<stdin>\", rad 1, i f\n"
"  Fil \"<stdin>\", rad 1, i f\n"
"  Fil \"<stdin>\", rad 1, i f\n"
"  [Föregående rad upprepas ytterligare 995 gånger]\n"
"RecursionError: maximalt rekursionsdjup överskridet"

msgid "(Contributed by Emanuel Barry in :issue:`26823`.)"
msgstr "(Bidrag från Emanuel Barry i :issue:`26823`.)"

msgid "tracemalloc"
msgstr "tracemalloc"

msgid ""
"The :mod:`tracemalloc` module now supports tracing memory allocations in "
"multiple different address spaces."
msgstr ""
"Modulen :mod:`tracemalloc` stöder nu spårning av minnesallokeringar i flera "
"olika adressrymder."

msgid ""
"The new :class:`~tracemalloc.DomainFilter` filter class has been added to "
"filter block traces by their address space (domain)."
msgstr ""
"Den nya filterklassen :class:`~tracemalloc.DomainFilter` har lagts till för "
"att filtrera blockspårningar efter deras adressutrymme (domän)."

msgid "(Contributed by Victor Stinner in :issue:`26588`.)"
msgstr "(Bidrag från Victor Stinner i :issue:`26588`.)"

msgid "typing"
msgstr "maskinskrivning"

msgid ""
"Since the :mod:`typing` module is :term:`provisional <provisional API>`, all "
"changes introduced in Python 3.6 have also been backported to Python 3.5.x."
msgstr ""
"Eftersom modulen :mod:`typing` är :term:``provisional <provisional API>`, "
"har alla ändringar som introducerades i Python 3.6 också backporterats till "
"Python 3.5.x."

msgid ""
"The :mod:`typing` module has a much improved support for generic type "
"aliases.  For example ``Dict[str, Tuple[S, T]]`` is now a valid type "
"annotation. (Contributed by Guido van Rossum in `Github #195 <https://github."
"com/python/typing/pull/195>`_.)"
msgstr ""
"Modulen :mod:`typing` har ett mycket förbättrat stöd för generiska "
"typalias.  Till exempel är ``Dict[str, Tuple[S, T]]`` nu en giltig "
"typannotering. (Bidrag från Guido van Rossum i `Github #195 <https://github."
"com/python/typing/pull/195>`_.)"

msgid ""
"The :class:`typing.ContextManager` class has been added for representing :"
"class:`contextlib.AbstractContextManager`. (Contributed by Brett Cannon in :"
"issue:`25609`.)"
msgstr ""
"Klassen :class:`typing.ContextManager` har lagts till för att representera :"
"class:`contextlib.AbstractContextManager`. (Bidrag från Brett Cannon i :"
"issue:`25609`.)"

msgid ""
"The :class:`typing.Collection` class has been added for representing :class:"
"`collections.abc.Collection`. (Contributed by Ivan Levkivskyi in :issue:"
"`27598`.)"
msgstr ""
"Klassen :class:`typing.Collection` har lagts till för att representera :"
"class:`collections.abc.Collection`. (Bidrag från Ivan Levkivskyi i :issue:"
"`27598`.)"

msgid ""
"The :const:`typing.ClassVar` type construct has been added to mark class "
"variables.  As introduced in :pep:`526`, a variable annotation wrapped in "
"ClassVar indicates that a given attribute is intended to be used as a class "
"variable and should not be set on instances of that class. (Contributed by "
"Ivan Levkivskyi in `Github #280 <https://github.com/python/typing/"
"pull/280>`_.)"
msgstr ""
"Typkonstruktionen :const:`typing.ClassVar` har lagts till för att markera "
"klassvariabler.  Som introducerades i :pep:`526`, indikerar en "
"variabelannotation som är inlindad i ClassVar att ett givet attribut är "
"avsett att användas som en klassvariabel och inte bör ställas in på "
"instanser av den klassen. (Bidrag från Ivan Levkivskyi i `Github #280 "
"<https://github.com/python/typing/pull/280>`_.)"

msgid ""
"A new :const:`~typing.TYPE_CHECKING` constant that is assumed to be ``True`` "
"by the static type checkers, but is ``False`` at runtime. (Contributed by "
"Guido van Rossum in `Github #230 <https://github.com/python/typing/"
"issues/230>`_.)"
msgstr ""
"En ny :const:`~typing.TYPE_CHECKING`-konstant som antas vara ``True`` av de "
"statiska typkontrollerna, men är ``False`` vid körning. (Bidrag från Guido "
"van Rossum i `Github #230 <https://github.com/python/typing/issues/230>`_.)"

msgid ""
"A new :func:`~typing.NewType` helper function has been added to create "
"lightweight distinct types for annotations::"
msgstr ""
"En ny :func:`~typing.NewType` hjälpfunktion har lagts till för att skapa "
"lätta distinkta typer för annoteringar::"

msgid ""
"from typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"some_id = UserId(524313)"
msgstr ""
"från typing import NewType\n"
"\n"
"UserId = NewType('UserId', int)\n"
"some_id = UserId(524313)"

msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type.  (Contributed by Ivan Levkivskyi in `Github #189 <https://"
"github.com/python/typing/issues/189>`_.)"
msgstr ""
"Den statiska typkontrollen kommer att behandla den nya typen som om den vore "
"en underklass av den ursprungliga typen.  (Bidrag från Ivan Levkivskyi i "
"`Github #189 <https://github.com/python/typing/issues/189>`_.)"

msgid "unicodedata"
msgstr "unicodedata"

msgid ""
"The :mod:`unicodedata` module now uses data from `Unicode 9.0.0 <https://"
"unicode.org/versions/Unicode9.0.0/>`_. (Contributed by Benjamin Peterson.)"
msgstr ""
"Modulen :mod:`unicodedata` använder nu data från `Unicode 9.0.0 <https://"
"unicode.org/versions/Unicode9.0.0/>`_. (Bidrag från Benjamin Peterson.)"

msgid "unittest.mock"
msgstr "unittest.mock"

msgid "The :class:`~unittest.mock.Mock` class has the following improvements:"
msgstr "Klassen :class:`~unittest.mock.Mock` har följande förbättringar:"

msgid ""
"Two new methods, :meth:`Mock.assert_called() <unittest.mock.Mock."
"assert_called>` and :meth:`Mock.assert_called_once() <unittest.mock.Mock."
"assert_called_once>` to check if the mock object was called. (Contributed by "
"Amit Saha in :issue:`26323`.)"
msgstr ""
"Två nya metoder, :meth:`Mock.assert_called() <unittest.mock.Mock."
"assert_called>` och :meth:`Mock.assert_called_once() <unittest.mock.Mock."
"assert_called_once>` för att kontrollera om mock-objektet anropades. (Bidrag "
"från Amit Saha i :issue:`26323`.)"

msgid ""
"The :meth:`Mock.reset_mock() <unittest.mock.Mock.reset_mock>` method now has "
"two optional keyword only arguments: *return_value* and *side_effect*. "
"(Contributed by Kushal Das in :issue:`21271`.)"
msgstr ""
"Metoden :meth:`Mock.reset_mock() <unittest.mock.Mock.reset_mock>` har nu två "
"valfria argument som endast gäller nyckelord: *return_value* och "
"*side_effect*. (Bidrag från Kushal Das i :issue:`21271`.)"

msgid "urllib.request"
msgstr "urllib.begäran"

msgid ""
"If a HTTP request has a file or iterable body (other than a bytes object) "
"but no ``Content-Length`` header, rather than throwing an error, :class:"
"`~urllib.request.AbstractHTTPHandler` now falls back to use chunked transfer "
"encoding. (Contributed by Demian Brecht and Rolf Krahl in :issue:`12319`.)"
msgstr ""
"Om en HTTP-förfrågan har en fil eller en iterabel kropp (annat än ett bytes-"
"objekt) men ingen ``Content-Length`` header, istället för att kasta ett fel, "
"faller :class:`~urllib.request.AbstractHTTPHandler` nu tillbaka till att "
"använda chunked transfer encoding. (Bidrag från Demian Brecht och Rolf Krahl "
"i :issue:`12319`.)"

msgid "urllib.robotparser"
msgstr "urllib.robotparser"

msgid ""
":class:`~urllib.robotparser.RobotFileParser` now supports the ``Crawl-"
"delay`` and ``Request-rate`` extensions. (Contributed by Nikolay Bogoychev "
"in :issue:`16099`.)"
msgstr ""
":class:`~urllib.robotparser.RobotFileParser` stöder nu tillägget ``Crawl-"
"delay`` och ``Request-rate``. (Bidrag från Nikolay Bogoychev i :issue:"
"`16099`.)"

msgid "venv"
msgstr "ven"

msgid ""
":mod:`venv` accepts a new parameter ``--prompt``. This parameter provides an "
"alternative prefix for the virtual environment. (Proposed by Łukasz "
"Balcerzak and ported to 3.6 by Stéphane Wirtel in :issue:`22829`.)"
msgstr ""
":mod:`venv` accepterar en ny parameter ``--prompt``. Denna parameter ger ett "
"alternativt prefix för den virtuella miljön. (Föreslagen av Łukasz Balcerzak "
"och portad till 3.6 av Stéphane Wirtel i :issue:`22829`)"

msgid "warnings"
msgstr "varningar"

msgid ""
"A new optional *source* parameter has been added to the :func:`warnings."
"warn_explicit` function: the destroyed object which emitted a :exc:"
"`ResourceWarning`. A *source* attribute has also been added to :class:"
"`warnings.WarningMessage` (contributed by Victor Stinner in :issue:`26568` "
"and :issue:`26567`)."
msgstr ""
"En ny valfri *source* parameter har lagts till i funktionen :func:`warnings."
"warn_explicit`: det förstörda objektet som gav upphov till en :exc:"
"`ResourceWarning`. Ett *source*-attribut har också lagts till i :class:"
"`warnings.WarningMessage` (bidrag från Victor Stinner i :issue:`26568` och :"
"issue:`26567`)."

msgid ""
"When a :exc:`ResourceWarning` warning is logged, the :mod:`tracemalloc` "
"module is now used to try to retrieve the traceback where the destroyed "
"object was allocated."
msgstr ""
"När en :exc:`ResourceWarning`-varning loggas, används nu :mod:`tracemalloc`-"
"modulen för att försöka hämta den traceback där det förstörda objektet "
"allokerades."

msgid "Example with the script ``example.py``::"
msgstr "Exempel med skriptet ``example.py``::"

msgid ""
"import warnings\n"
"\n"
"def func():\n"
"    return open(__file__)\n"
"\n"
"f = func()\n"
"f = None"
msgstr ""
"import warnings\n"
"\n"
"def func():\n"
"    return open(__file__)\n"
"\n"
"f = func()\n"
"f = None"

msgid "Output of the command ``python3.6 -Wd -X tracemalloc=5 example.py``::"
msgstr "Utdata från kommandot ``python3.6 -Wd -X tracemalloc=5 example.py``::"

msgid ""
"example.py:7: ResourceWarning: unclosed file <_io.TextIOWrapper "
"name='example.py' mode='r' encoding='UTF-8'>\n"
"  f = None\n"
"Object allocated at (most recent call first):\n"
"  File \"example.py\", lineno 4\n"
"    return open(__file__)\n"
"  File \"example.py\", lineno 6\n"
"    f = func()"
msgstr ""
"exempel.py:7: ResourceWarning: oavslutad fil <_io.TextIOWrapper "
"name='example.py' mode='r' encoding='UTF-8'>\n"
"  f = Ingen\n"
"Objekt allokerat vid (senaste anropet först):\n"
"  Fil \"example.py\", lineno 4\n"
"    return open(__file__)\n"
"  Fil \"exempel.py\", lineno 6\n"
"    f = func()"

msgid ""
"The \"Object allocated at\" traceback is new and is only displayed if :mod:"
"`tracemalloc` is tracing Python memory allocations and if the :mod:"
"`warnings` module was already imported."
msgstr ""
"Spårningen \"Objekt allokerat vid\" är ny och visas endast om :mod:"
"`tracemalloc` spårar Python-minnesallokeringar och om modulen :mod:"
"`warnings` redan har importerats."

msgid "winreg"
msgstr "winreg"

msgid ""
"Added the 64-bit integer type :data:`REG_QWORD <winreg.REG_QWORD>`. "
"(Contributed by Clement Rouault in :issue:`23026`.)"
msgstr ""
"Lagt till 64-bitars heltalstypen :data:`REG_QWORD <winreg.REG_QWORD>`. "
"(Bidrag från Clement Rouault i :issue:`23026`.)"

msgid "winsound"
msgstr "winsound"

msgid ""
"Allowed keyword arguments to be passed to :func:`Beep <winsound.Beep>`, :"
"func:`MessageBeep <winsound.MessageBeep>`, and :func:`PlaySound <winsound."
"PlaySound>` (:issue:`27982`)."
msgstr ""
"Tillät nyckelordsargument att skickas till :func:`Beep <winsound.Beep>`, :"
"func:`MessageBeep <winsound.MessageBeep>`, och :func:`PlaySound <winsound."
"PlaySound>` (:issue:`27982`)."

msgid "xmlrpc.client"
msgstr "xmlrpc.klient"

msgid ""
"The :mod:`xmlrpc.client` module now supports unmarshalling additional data "
"types used by the Apache XML-RPC implementation for numerics and ``None``. "
"(Contributed by Serhiy Storchaka in :issue:`26885`.)"
msgstr ""
"Modulen :mod:`xmlrpc.client` stöder nu avmarshalling av ytterligare "
"datatyper som används av Apache XML-RPC-implementeringen för numeriska "
"värden och ``None``. (Bidrag från Serhiy Storchaka i :issue:`26885`.)"

msgid "zipfile"
msgstr "zip-fil"

msgid ""
"A new :meth:`ZipInfo.from_file() <zipfile.ZipInfo.from_file>` class method "
"allows making a :class:`~zipfile.ZipInfo` instance from a filesystem file. A "
"new :meth:`ZipInfo.is_dir() <zipfile.ZipInfo.is_dir>` method can be used to "
"check if the :class:`~zipfile.ZipInfo` instance represents a directory. "
"(Contributed by Thomas Kluyver in :issue:`26039`.)"
msgstr ""
"En ny klassmetod :meth:`ZipInfo.from_file() <zipfile.ZipInfo.from_file>` gör "
"det möjligt att skapa en :class:`~zipfile.ZipInfo`-instans från en fil i "
"filsystemet. En ny :meth:`ZipInfo.is_dir() <zipfile.ZipInfo.is_dir>`-metod "
"kan användas för att kontrollera om :class:`~zipfile.ZipInfo`-instansen "
"representerar en katalog. (Bidrag från Thomas Kluyver i :issue:`26039`.)"

msgid ""
"The :meth:`ZipFile.open() <zipfile.ZipFile.open>` method can now be used to "
"write data into a ZIP file, as well as for extracting data. (Contributed by "
"Thomas Kluyver in :issue:`26039`.)"
msgstr ""
"Metoden :meth:`ZipFile.open() <zipfile.ZipFile.open>` kan nu användas för "
"att skriva in data i en ZIP-fil, samt för att extrahera data. (Bidrag från "
"Thomas Kluyver i :issue:`26039`.)"

msgid "zlib"
msgstr "zlib"

msgid ""
"The :func:`~zlib.compress` and :func:`~zlib.decompress` functions now accept "
"keyword arguments. (Contributed by Aviv Palivoda in :issue:`26243` and Xiang "
"Zhang in :issue:`16764` respectively.)"
msgstr ""
"Funktionerna :func:`~zlib.compress` och :func:`~zlib.decompress` accepterar "
"nu nyckelordsargument. (Bidrag från Aviv Palivoda i :issue:`26243` "
"respektive Xiang Zhang i :issue:`16764`)"

msgid "Optimizations"
msgstr "Optimeringar"

msgid ""
"The Python interpreter now uses a 16-bit wordcode instead of bytecode which "
"made a number of opcode optimizations possible. (Contributed by Demur Rumed "
"with input and reviews from Serhiy Storchaka and Victor Stinner in :issue:"
"`26647` and :issue:`28050`.)"
msgstr ""
"Python-tolken använder nu en 16-bitars ordkod istället för bytekod vilket "
"möjliggjorde ett antal opcode-optimeringar. (Bidrag från Demur Rumed med "
"input och recensioner från Serhiy Storchaka och Victor Stinner i :issue:"
"`26647` och :issue:`28050`.)"

msgid ""
"The :class:`asyncio.Future` class now has an optimized C implementation. "
"(Contributed by Yury Selivanov and INADA Naoki in :issue:`26081`.)"
msgstr ""
"Klassen :class:`asyncio.Future` har nu en optimerad C-implementering. "
"(Bidrag från Yury Selivanov och INADA Naoki i :issue:`26081`.)"

msgid ""
"The :class:`asyncio.Task` class now has an optimized C implementation. "
"(Contributed by Yury Selivanov in :issue:`28544`.)"
msgstr ""
"Klassen :class:`asyncio.Task` har nu en optimerad C-implementering. (Bidrag "
"från Yury Selivanov i :issue:`28544`.)"

msgid ""
"Various implementation improvements in the :mod:`typing` module (such as "
"caching of generic types) allow up to 30 times performance improvements and "
"reduced memory footprint."
msgstr ""
"Olika implementeringsförbättringar i modulen :mod:`typing` (t.ex. "
"cachelagring av generiska typer) ger upp till 30 gånger bättre prestanda och "
"minskat minnesavtryck."

msgid ""
"The ASCII decoder is now up to 60 times as fast for error handlers "
"``surrogateescape``, ``ignore`` and ``replace`` (Contributed by Victor "
"Stinner in :issue:`24870`)."
msgstr ""
"ASCII-avkodaren är nu upp till 60 gånger så snabb för felhanterarna "
"``surrogateescape``, ``ignore`` och ``replace`` (Bidrag från Victor Stinner "
"i :issue:`24870`)."

msgid ""
"The ASCII and the Latin1 encoders are now up to 3 times as fast for the "
"error handler ``surrogateescape`` (Contributed by Victor Stinner in :issue:"
"`25227`)."
msgstr ""
"ASCII- och Latin1-kodarna är nu upp till 3 gånger så snabba för "
"felhanteraren ``surrogateescape`` (Bidrag från Victor Stinner i :issue:"
"`25227`)."

msgid ""
"The UTF-8 encoder is now up to 75 times as fast for error handlers "
"``ignore``, ``replace``, ``surrogateescape``, ``surrogatepass`` (Contributed "
"by Victor Stinner in :issue:`25267`)."
msgstr ""
"UTF-8-kodaren är nu upp till 75 gånger så snabb för felhanterarna "
"``ignore``, ``replace``, ``surrogateescape``, ``surrogatepass`` (Bidrag från "
"Victor Stinner i :issue:`25267`)."

msgid ""
"The UTF-8 decoder is now up to 15 times as fast for error handlers "
"``ignore``, ``replace`` and ``surrogateescape`` (Contributed by Victor "
"Stinner in :issue:`25301`)."
msgstr ""
"UTF-8-avkodaren är nu upp till 15 gånger så snabb för felhanterarna "
"``ignore``, ``replace`` och ``surrogateescape`` (Bidrag från Victor Stinner "
"i :issue:`25301`)."

msgid ""
"``bytes % args`` is now up to 2 times faster. (Contributed by Victor Stinner "
"in :issue:`25349`)."
msgstr ""
"```bytes % args`` är nu upp till 2 gånger snabbare. (Bidrag från Victor "
"Stinner i :issue:`25349`)."

msgid ""
"``bytearray % args`` is now between 2.5 and 5 times faster. (Contributed by "
"Victor Stinner in :issue:`25399`)."
msgstr ""
"``bytearray % args`` är nu mellan 2,5 och 5 gånger snabbare. (Bidrag från "
"Victor Stinner i :issue:`25399`)."

msgid ""
"Optimize :meth:`bytes.fromhex` and :meth:`bytearray.fromhex`: they are now "
"between 2x and 3.5x faster. (Contributed by Victor Stinner in :issue:"
"`25401`)."
msgstr ""
"Optimera :meth:`bytes.fromhex` och :meth:`bytearray.fromhex`: de är nu "
"mellan 2x och 3,5x snabbare. (Bidrag från Victor Stinner i :issue:`25401`)."

msgid ""
"Optimize ``bytes.replace(b'', b'.')`` and ``bytearray.replace(b'', b'.')``: "
"up to 80% faster. (Contributed by Josh Snider in :issue:`26574`)."
msgstr ""
"Optimera ``bytes.replace(b'', b'.'')`` och ``bytearray.replace(b'', "
"b'.'')``: upp till 80% faster. (Bidrag från Josh Snider i :issue:`26574`)."

msgid ""
"Allocator functions of the :c:func:`PyMem_Malloc` domain (:c:macro:"
"`PYMEM_DOMAIN_MEM`) now use the :ref:`pymalloc memory allocator <pymalloc>` "
"instead of :c:func:`malloc` function of the C library. The pymalloc "
"allocator is optimized for objects smaller or equal to 512 bytes with a "
"short lifetime, and use :c:func:`malloc` for larger memory blocks. "
"(Contributed by Victor Stinner in :issue:`26249`)."
msgstr ""
"Allokeringsfunktioner i :c:func:`PyMem_Malloc`-domänen (:c:macro:"
"`PYMEM_DOMAIN_MEM`) använder nu :ref:`pymalloc memory allocator <pymalloc>` "
"istället för :c:func:`malloc`-funktionen i C-biblioteket. "
"Allokeringsfunktionen pymalloc är optimerad för objekt som är mindre än "
"eller lika med 512 byte och har kort livslängd, medan :c:func:`malloc` "
"används för större minnesblock. (Bidrag från Victor Stinner i :issue:"
"`26249`)."

msgid ""
":func:`pickle.load` and :func:`pickle.loads` are now up to 10% faster when "
"deserializing many small objects (Contributed by Victor Stinner in :issue:"
"`27056`)."
msgstr ""
":func:`pickle.load` och :func:`pickle.loads` är nu upp till 10% faster när "
"många små objekt deserialiseras (Bidrag från Victor Stinner i :issue:"
"`27056`)."

msgid ""
"Passing :term:`keyword arguments <keyword argument>` to a function has an "
"overhead in comparison with passing :term:`positional arguments <positional "
"argument>`.  Now in extension functions implemented with using Argument "
"Clinic this overhead is significantly decreased. (Contributed by Serhiy "
"Storchaka in :issue:`27574`)."
msgstr ""
"Att skicka :term:`keyword arguments <keyword argument>` till en funktion har "
"en overhead i jämförelse med att skicka :term:`positional arguments "
"<positional argument>`.  I tilläggsfunktioner som implementeras med hjälp av "
"Argument Clinic minskar nu denna overhead avsevärt. (Bidrag från Serhiy "
"Storchaka i :issue:`27574`)."

msgid ""
"Optimized :func:`~glob.glob` and :func:`~glob.iglob` functions in the :mod:"
"`glob` module; they are now about 3--6 times faster. (Contributed by Serhiy "
"Storchaka in :issue:`25596`)."
msgstr ""
"Optimerade :func:`~glob.glob` och :func:`~glob.iglob` funktioner i :mod:"
"`glob` modulen; de är nu ca 3--6 gånger snabbare. (Bidrag från Serhiy "
"Storchaka i :issue:`25596`)."

msgid ""
"Optimized globbing in :mod:`pathlib` by using :func:`os.scandir`; it is now "
"about 1.5--4 times faster. (Contributed by Serhiy Storchaka in :issue:"
"`26032`)."
msgstr ""
"Optimerade globbing i :mod:`pathlib` genom att använda :func:`os.scandir`; "
"det är nu ca 1,5--4 gånger snabbare. (Bidrag från Serhiy Storchaka i :issue:"
"`26032`)."

msgid ""
":class:`xml.etree.ElementTree` parsing, iteration and deepcopy performance "
"has been significantly improved. (Contributed by Serhiy Storchaka in :issue:"
"`25638`, :issue:`25873`, and :issue:`25869`.)"
msgstr ""
":class:`xml.etree.ElementTree` prestanda för parsning, iteration och "
"deepcopy har förbättrats avsevärt. (Bidrag från Serhiy Storchaka i :issue:"
"`25638`, :issue:`25873`, och :issue:`25869`.)"

msgid ""
"Creation of :class:`fractions.Fraction` instances from floats and decimals "
"is now 2 to 3 times faster. (Contributed by Serhiy Storchaka in :issue:"
"`25971`.)"
msgstr ""
"Skapandet av :class:`fractions.Fraction`-instanser från floats och decimaler "
"är nu 2 till 3 gånger snabbare. (Bidrag från Serhiy Storchaka i :issue:"
"`25971`.)"

msgid "Build and C API Changes"
msgstr "Ändringar i Build och C API"

msgid ""
"Python now requires some C99 support in the toolchain to build. Most "
"notably, Python now uses standard integer types and macros in place of "
"custom macros like ``PY_LONG_LONG``. For more information, see :pep:`7` and :"
"issue:`17884`."
msgstr ""
"Python kräver nu visst C99-stöd i verktygskedjan för att kunna byggas. Mest "
"anmärkningsvärt är att Python nu använder standardiserade heltalstyper och "
"makron i stället för anpassade makron som ``PY_LONG_LONG``. För mer "
"information, se :pep:`7` och :issue:`17884`."

msgid ""
"Cross-compiling CPython with the Android NDK and the Android API level set "
"to 21 (Android 5.0 Lollipop) or greater runs successfully. While Android is "
"not yet a supported platform, the Python test suite runs on the Android "
"emulator with only about 16 tests failures. See the Android meta-issue :"
"issue:`26865`."
msgstr ""
"Korskompilering av CPython med Android NDK och Android API-nivå inställd på "
"21 (Android 5.0 Lollipop) eller högre körs framgångsrikt. Även om Android "
"ännu inte är en plattform som stöds, körs Python-testsviten på Android-"
"emulatorn med endast cirka 16 testfel. Se metaproblemet för Android :issue:"
"`26865`."

msgid ""
"The ``--enable-optimizations`` configure flag has been added. Turning it on "
"will activate expensive optimizations like PGO. (Original patch by "
"Alecsandru Patrascu of Intel in :issue:`26359`.)"
msgstr ""
"Konfigureringsflaggan ``--enable-optimizations`` har lagts till. Om den "
"aktiveras kommer dyra optimeringar som PGO att aktiveras. (Ursprunglig patch "
"av Alecsandru Patrascu från Intel i :issue:`26359`.)"

msgid ""
"The :term:`GIL <global interpreter lock>` must now be held when allocator "
"functions of :c:macro:`PYMEM_DOMAIN_OBJ` (ex: :c:func:`PyObject_Malloc`) "
"and :c:macro:`PYMEM_DOMAIN_MEM` (ex: :c:func:`PyMem_Malloc`) domains are "
"called."
msgstr ""
"Nu måste :term:`GIL <global interpreter lock>` hållas när "
"allokeringsfunktioner i domänerna :c:macro:`PYMEM_DOMAIN_OBJ` (ex: :c:func:"
"`PyObject_Malloc`) och :c:macro:`PYMEM_DOMAIN_MEM` (ex: :c:func:"
"`PyMem_Malloc`) anropas."

msgid ""
"New :c:func:`Py_FinalizeEx` API which indicates if flushing buffered data "
"failed. (Contributed by Martin Panter in :issue:`5319`.)"
msgstr ""
"Nytt :c:func:`Py_FinalizeEx` API som indikerar om rensning av buffrad data "
"misslyckades. (Bidrag från Martin Panter i :issue:`5319`.)"

msgid ""
":c:func:`PyArg_ParseTupleAndKeywords` now supports :ref:`positional-only "
"parameters <positional-only_parameter>`.  Positional-only parameters are "
"defined by empty names. (Contributed by Serhiy Storchaka in :issue:`26282`)."
msgstr ""
":c:func:`PyArg_ParseTupleAndKeywords` har nu stöd för :ref:`parametrar som "
"endast är positionella <positional-only_parameter>`.  Endast positionella "
"parametrar definieras av tomma namn. (Bidrag från Serhiy Storchaka i :issue:"
"`26282`)."

msgid ""
"``PyTraceback_Print`` method now abbreviates long sequences of repeated "
"lines as ``\"[Previous line repeated {count} more times]\"``. (Contributed "
"by Emanuel Barry in :issue:`26823`.)"
msgstr ""
"metoden ``PyTraceback_Print`` förkortar nu långa sekvenser av upprepade "
"rader som ``\"[Föregående rad upprepad {count} fler gånger]\"``. (Bidrag "
"från Emanuel Barry i :issue:`26823`.)"

msgid ""
"The new :c:func:`PyErr_SetImportErrorSubclass` function allows for "
"specifying a subclass of :exc:`ImportError` to raise. (Contributed by Eric "
"Snow in :issue:`15767`.)"
msgstr ""
"Den nya funktionen :c:func:`PyErr_SetImportErrorSubclass` gör det möjligt "
"att specificera en underklass av :exc:`ImportError` som skall uppstå. "
"(Bidrag från Eric Snow i :issue:`15767`.)"

msgid ""
"The new :c:func:`PyErr_ResourceWarning` function can be used to generate a :"
"exc:`ResourceWarning` providing the source of the resource allocation. "
"(Contributed by Victor Stinner in :issue:`26567`.)"
msgstr ""
"Den nya funktionen :c:func:`PyErr_ResourceWarning` kan användas för att "
"generera en :exc:`ResourceWarning` som anger källan till resursallokeringen. "
"(Bidrag från Victor Stinner i :issue:`26567`.)"

msgid ""
"The new :c:func:`PyOS_FSPath` function returns the file system "
"representation of a :term:`path-like object`. (Contributed by Brett Cannon "
"in :issue:`27186`.)"
msgstr ""
"Den nya funktionen :c:func:`PyOS_FSPath` returnerar filsystemets "
"representation av ett :term:`path-liknande objekt`. (Bidrag från Brett "
"Cannon i :issue:`27186`.)"

msgid ""
"The :c:func:`PyUnicode_FSConverter` and :c:func:`PyUnicode_FSDecoder` "
"functions will now accept :term:`path-like objects <path-like object>`."
msgstr ""
"Funktionerna :c:func:`PyUnicode_FSConverter` och :c:func:"
"`PyUnicode_FSDecoder` accepterar nu :term:`path-like objects <path-like "
"object>`."

msgid "Other Improvements"
msgstr "Övriga förbättringar"

msgid ""
"When :option:`--version` (short form: :option:`-V`) is supplied twice, "
"Python prints :data:`sys.version` for detailed information."
msgstr ""
"När :option:`--version` (kortform: :option:`-V`) anges två gånger, skriver "
"Python ut :data:`sys.version` för detaljerad information."

msgid ""
"$ ./python -VV\n"
"Python 3.6.0b4+ (3.6:223967b49e49+, Nov 21 2016, 20:55:04)\n"
"[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.42.1)]"
msgstr ""
"$ ./python -VV\n"
"Python 3.6.0b4+ (3.6:223967b49e49+, 21 nov 2016, 20:55:04)\n"
"[GCC 4.2.1 Kompatibel Apple LLVM 8.0.0 (clang-800.0.42.1)]"

msgid "Deprecated"
msgstr "Föråldrat"

msgid "New Keywords"
msgstr "Nya nyckelord"

msgid ""
"``async`` and ``await`` are not recommended to be used as variable, class, "
"function or module names.  Introduced by :pep:`492` in Python 3.5, they will "
"become proper keywords in Python 3.7.  Starting in Python 3.6, the use of "
"``async`` or ``await`` as names will generate a :exc:`DeprecationWarning`."
msgstr ""
"``async`` och ``await`` rekommenderas inte att användas som variabel-, "
"klass-, funktions- eller modulnamn.  De introducerades av :pep:`492` i "
"Python 3.5 och kommer att bli riktiga nyckelord i Python 3.7.  Från och med "
"Python 3.6 kommer användningen av ``async`` eller ``await`` som namn att "
"generera en :exc:`DeprecationWarning`."

msgid "Deprecated Python behavior"
msgstr "Föråldrat Python-beteende"

msgid ""
"Raising the :exc:`StopIteration` exception inside a generator will now "
"generate a :exc:`DeprecationWarning`, and will trigger a :exc:`RuntimeError` "
"in Python 3.7.  See :ref:`whatsnew-pep-479` for details."
msgstr ""
"Om man väcker :exc:`StopIteration`-undantaget inuti en generator kommer det "
"nu att generera en :exc:`DeprecationWarning`, och kommer att utlösa en :exc:"
"`RuntimeError` i Python 3.7.  Se :ref:`whatsnew-pep-479` för detaljer."

msgid ""
"The :meth:`__aiter__` method is now expected to return an asynchronous "
"iterator directly instead of returning an awaitable as previously. Doing the "
"former will trigger a :exc:`DeprecationWarning`.  Backward compatibility "
"will be removed in Python 3.7. (Contributed by Yury Selivanov in :issue:"
"`27243`.)"
msgstr ""
"Metoden :meth:`__aiter__` förväntas nu returnera en asynkron iterator direkt "
"istället för att returnera en awaitable som tidigare. Att göra det förra "
"kommer att utlösa en :exc:`DeprecationWarning`.  Bakåtkompatibiliteten "
"kommer att tas bort i Python 3.7. (Bidrag från Yury Selivanov i :issue:"
"`27243`.)"

msgid ""
"A backslash-character pair that is not a valid escape sequence now generates "
"a :exc:`DeprecationWarning`.  Although this will eventually become a :exc:"
"`SyntaxError`, that will not be for several Python releases. (Contributed by "
"Emanuel Barry in :issue:`27364`.)"
msgstr ""
"Ett backslash-teckenpar som inte är en giltig escape-sekvens genererar nu "
"en :exc:`DeprecationWarning`.  Även om detta så småningom kommer att bli "
"ett :exc:`SyntaxError`, kommer det inte att ske förrän efter flera Python-"
"utgåvor. (Bidrag från Emanuel Barry i :issue:`27364`.)"

msgid ""
"When performing a relative import, falling back on ``__name__`` and "
"``__path__`` from the calling module when ``__spec__`` or ``__package__`` "
"are not defined now raises an :exc:`ImportWarning`. (Contributed by Rose "
"Ames in :issue:`25791`.)"
msgstr ""
"När man utför en relativ import och använder ``__name__`` och ``__path__`` "
"från den anropande modulen när ``__spec__`` eller ``__package__`` inte är "
"definierade, utlöses nu en :exc:`ImportWarning`. (Bidrag från Rose Ames i :"
"issue:`25791`.)"

msgid "Deprecated Python modules, functions and methods"
msgstr "Föråldrade Python-moduler, -funktioner och -metoder"

msgid "asynchat"
msgstr "asynchatt"

msgid ""
"The :mod:`!asynchat` has been deprecated in favor of :mod:`asyncio`. "
"(Contributed by Mariatta in :issue:`25002`.)"
msgstr ""
":mod:`!asynchat` har utgått till förmån för :mod:`asyncio`. (Bidrag från "
"Mariatta i :issue:`25002`.)"

msgid "asyncore"
msgstr "asynkron"

msgid ""
"The :mod:`!asyncore` has been deprecated in favor of :mod:`asyncio`. "
"(Contributed by Mariatta in :issue:`25002`.)"
msgstr ""
":mod:`!asyncore` har utgått till förmån för :mod:`asyncio`. (Bidrag från "
"Mariatta i :issue:`25002`.)"

msgid "dbm"
msgstr "dbm"

msgid ""
"Unlike other :mod:`dbm` implementations, the :mod:`dbm.dumb` module creates "
"databases with the ``'rw'`` mode and allows modifying the database opened "
"with the ``'r'`` mode.  This behavior is now deprecated and will be removed "
"in 3.8. (Contributed by Serhiy Storchaka in :issue:`21708`.)"
msgstr ""
"Till skillnad från andra :mod:`dbm`-implementationer skapar :mod:`dbm.dumb`-"
"modulen databaser med läget ``'rw'`` och tillåter modifiering av databasen "
"som öppnats med läget ``'r'``.  Detta beteende är nu föråldrat och kommer "
"att tas bort i 3.8. (Bidrag från Serhiy Storchaka i :issue:`21708`.)"

msgid ""
"The undocumented ``extra_path`` argument to the ``distutils.Distribution`` "
"constructor is now considered deprecated and will raise a warning if set.   "
"Support for this parameter will be removed in a future Python release.  See :"
"issue:`27919` for details."
msgstr ""
"Det odokumenterade ``extra_path``-argumentet till ``distutils.Distribution``-"
"konstruktören anses nu vara föråldrat och kommer att ge upphov till en "
"varning om det anges.   Stöd för denna parameter kommer att tas bort i en "
"framtida Python-version.  Se :issue:`27919` för detaljer."

msgid "grp"
msgstr "grp"

msgid ""
"The support of non-integer arguments in :func:`~grp.getgrgid` has been "
"deprecated. (Contributed by Serhiy Storchaka in :issue:`26129`.)"
msgstr ""
"Stödet för argument som inte är heltal i :func:`~grp.getgrgid` har tagits "
"bort. (Bidrag från Serhiy Storchaka i :issue:`26129`.)"

msgid ""
"The :meth:`importlib.machinery.SourceFileLoader.load_module` and :meth:"
"`importlib.machinery.SourcelessFileLoader.load_module` methods are now "
"deprecated. They were the only remaining implementations of :meth:`importlib."
"abc.Loader.load_module` in :mod:`importlib` that had not been deprecated in "
"previous versions of Python in favour of :meth:`importlib.abc.Loader."
"exec_module`."
msgstr ""
"Metoderna :meth:`importlib.machinery.SourceFileLoader.load_module` och :meth:"
"`importlib.machinery.SourcelessFileLoader.load_module` är nu föråldrade. De "
"var de enda återstående implementationerna av :meth:`importlib.abc.Loader."
"load_module` i :mod:`importlib` som inte hade blivit avförda i tidigare "
"versioner av Python till förmån för :meth:`importlib.abc.Loader.exec_module`."

msgid ""
"The :class:`importlib.machinery.WindowsRegistryFinder` class is now "
"deprecated. As of 3.6.0, it is still added to :data:`sys.meta_path` by "
"default (on Windows), but this may change in future releases."
msgstr ""
"Klassen :class:`importlib.machinery.WindowsRegistryFinder` är nu föråldrad. "
"Från och med 3.6.0 läggs den fortfarande till i :data:`sys.meta_path` som "
"standard (på Windows), men detta kan ändras i framtida versioner."

msgid ""
"Undocumented support of general :term:`bytes-like objects <bytes-like "
"object>` as paths in :mod:`os` functions, :func:`compile` and similar "
"functions is now deprecated. (Contributed by Serhiy Storchaka in :issue:"
"`25791` and :issue:`26754`.)"
msgstr ""
"Odokumenterat stöd för allmänna :term:`bytesliknande objekt <bytes-like "
"object>` som sökvägar i :mod:`os`-funktioner, :func:`compile` och liknande "
"funktioner är nu avfört. (Bidrag från Serhiy Storchaka i :issue:`25791` och :"
"issue:`26754`.)"

msgid ""
"Support for inline flags ``(?letters)`` in the middle of the regular "
"expression has been deprecated and will be removed in a future Python "
"version.  Flags at the start of a regular expression are still allowed. "
"(Contributed by Serhiy Storchaka in :issue:`22493`.)"
msgstr ""
"Stöd för inline-flaggor ``(?letters)`` mitt i det reguljära uttrycket har "
"föråldrats och kommer att tas bort i en framtida Python-version.  Flaggor i "
"början av ett reguljärt uttryck är fortfarande tillåtna. (Bidrag från Serhiy "
"Storchaka i :issue:`22493`.)"

msgid ""
"OpenSSL 0.9.8, 1.0.0 and 1.0.1 are deprecated and no longer supported. In "
"the future the :mod:`ssl` module will require at least OpenSSL 1.0.2 or "
"1.1.0."
msgstr ""
"OpenSSL 0.9.8, 1.0.0 och 1.0.1 är föråldrade och stöds inte längre. I "
"framtiden kommer modulen :mod:`ssl` att kräva minst OpenSSL 1.0.2 eller "
"1.1.0."

msgid ""
"SSL-related arguments like ``certfile``, ``keyfile`` and ``check_hostname`` "
"in :mod:`ftplib`, :mod:`http.client`, :mod:`imaplib`, :mod:`poplib`, and :"
"mod:`smtplib` have been deprecated in favor of ``context``. (Contributed by "
"Christian Heimes in :issue:`28022`.)"
msgstr ""
"SSL-relaterade argument som ``certfile``, ``keyfile`` och ``check_hostname`` "
"i :mod:`ftplib`, :mod:`http.client`, :mod:`imaplib`, :mod:`poplib` och :mod:"
"`smtplib` har utgått till förmån för ``context``. (Bidrag från Christian "
"Heimes i :issue:`28022`.)"

msgid ""
"A couple of protocols and functions of the :mod:`ssl` module are now "
"deprecated. Some features will no longer be available in future versions of "
"OpenSSL. Other features are deprecated in favor of a different API. "
"(Contributed by Christian Heimes in :issue:`28022` and :issue:`26470`.)"
msgstr ""
"Ett par protokoll och funktioner i modulen :mod:`ssl` är nu föråldrade. "
"Vissa funktioner kommer inte längre att vara tillgängliga i framtida "
"versioner av OpenSSL. Andra funktioner är utfasade till förmån för ett annat "
"API. (Bidrag från Christian Heimes i :issue:`28022` och :issue:`26470`.)"

msgid ""
"The :mod:`!tkinter.tix` module is now deprecated.  :mod:`tkinter` users "
"should use :mod:`tkinter.ttk` instead."
msgstr ""
"Modulen :mod:`!tkinter.tix` är nu föråldrad. :mod:`tkinter`-användare bör "
"använda :mod:`tkinter.ttk` istället."

msgid ""
"The ``pyvenv`` script has been deprecated in favour of ``python3 -m venv``. "
"This prevents confusion as to what Python interpreter ``pyvenv`` is "
"connected to and thus what Python interpreter will be used by the virtual "
"environment.  (Contributed by Brett Cannon in :issue:`25154`.)"
msgstr ""
"Skriptet ``pyvenv`` har utgått till förmån för ``python3 -m venv``. Detta "
"förhindrar förvirring om vilken Python-tolk ``pyvenv`` är ansluten till och "
"därmed vilken Python-tolk som kommer att användas av den virtuella miljön.  "
"(Bidrag från Brett Cannon i :issue:`25154`.)"

msgid "xml"
msgstr "xml"

msgid ""
"As mitigation against DTD and external entity retrieval, the :mod:`xml.dom."
"minidom` and :mod:`xml.sax` modules no longer process external entities by "
"default. (Contributed by Christian Heimes in :gh:`61441`.)"
msgstr ""
"Som en åtgärd mot hämtning av DTD:er och externa entiteter bearbetar "
"modulerna :mod:`xml.dom.minidom` och :mod:`xml.sax` inte längre externa "
"entiteter som standard. (Bidrag från Christian Heimes i :gh:`61441`.)"

msgid "Deprecated functions and types of the C API"
msgstr "Föråldrade funktioner och typer i C API"

msgid ""
"Undocumented functions :c:func:`!PyUnicode_AsEncodedObject`, :c:func:`!"
"PyUnicode_AsDecodedObject`, :c:func:`!PyUnicode_AsEncodedUnicode` and :c:"
"func:`!PyUnicode_AsDecodedUnicode` are deprecated now. Use the :ref:`generic "
"codec based API <codec-registry>` instead."
msgstr ""
"Odokumenterade funktioner :c:func:`!PyUnicode_AsEncodedObject`, :c:func:`!"
"PyUnicode_AsDecodedObject`, :c:func:`!PyUnicode_AsEncodedUnicode` och :c:"
"func:`!PyUnicode_AsDecodedUnicode` är nu föråldrade. Använd :ref:``generisk "
"codec-baserad API <codec-registry>` istället."

msgid "Deprecated Build Options"
msgstr "Föråldrade byggalternativ"

msgid ""
"The ``--with-system-ffi`` configure flag is now on by default on non-macOS "
"UNIX platforms.  It may be disabled by using ``--without-system-ffi``, but "
"using the flag is deprecated and will not be accepted in Python 3.7. macOS "
"is unaffected by this change.  Note that many OS distributors already use "
"the ``--with-system-ffi`` flag when building their system Python."
msgstr ""
"Konfigurationsflaggan ``--with-system-ffi`` är nu aktiverad som standard på "
"UNIX-plattformar som inte är macOS.  Den kan inaktiveras genom att använda "
"``--without-system-ffi``, men att använda flaggan är föråldrat och kommer "
"inte att accepteras i Python 3.7. macOS påverkas inte av denna ändring.  "
"Observera att många OS-distributörer redan använder flaggan ``--with-system-"
"ffi`` när de bygger sina Python-system."

msgid "Removed"
msgstr "Borttagen"

msgid "API and Feature Removals"
msgstr "Borttagning av API och funktioner"

msgid ""
"Unknown escapes consisting of ``'\\'`` and an ASCII letter in regular "
"expressions will now cause an error.  In replacement templates for :func:`re."
"sub` they are still allowed, but deprecated. The :const:`re.LOCALE` flag can "
"now only be used with binary patterns."
msgstr ""
"Okända escapes bestående av ``'\\'`` och en ASCII-bokstav i reguljära "
"uttryck kommer nu att orsaka ett fel.  I ersättningsmallar för :func:`re."
"sub` är de fortfarande tillåtna, men föråldrade. Flaggan :const:`re.LOCALE` "
"kan nu endast användas med binära mönster."

msgid ""
"``inspect.getmoduleinfo()`` was removed (was deprecated since CPython 3.3). :"
"func:`inspect.getmodulename` should be used for obtaining the module name "
"for a given path. (Contributed by Yury Selivanov in :issue:`13248`.)"
msgstr ""
"``inspect.getmoduleinfo()`` togs bort (var föråldrad sedan CPython 3.3). :"
"func:``inspect.getmodulename`` bör användas för att få fram modulnamnet för "
"en given sökväg. (Bidrag från Yury Selivanov i :issue:`13248`.)"

msgid ""
"``traceback.Ignore`` class and ``traceback.usage``, ``traceback.modname``, "
"``traceback.fullmodname``, ``traceback.find_lines_from_code``, ``traceback."
"find_lines``, ``traceback.find_strings``, ``traceback."
"find_executable_lines`` methods were removed from the :mod:`traceback` "
"module. They were undocumented methods deprecated since Python 3.2 and "
"equivalent functionality is available from private methods."
msgstr ""
"klassen ``traceback.Ignore`` och metoderna ``traceback.usage``, ``traceback."
"modname``, ``traceback.fullmodname``, ``traceback.find_lines_from_code``, "
"``traceback.find_lines``, ``traceback.find_strings``, ``traceback."
"find_executable_lines`` togs bort från modulen :mod:`traceback`. De var "
"odokumenterade metoder som utgått sedan Python 3.2 och motsvarande "
"funktionalitet är tillgänglig från privata metoder."

msgid ""
"The ``tk_menuBar()`` and ``tk_bindForTraversal()`` dummy methods in :mod:"
"`tkinter` widget classes were removed (corresponding Tk commands were "
"obsolete since Tk 4.0)."
msgstr ""
"Dummy-metoderna ``tk_menuBar()`` och ``tk_bindForTraversal()`` i "
"widgetklasserna :mod:`tkinter` togs bort (motsvarande Tk-kommandon var "
"föråldrade sedan Tk 4.0)."

msgid ""
"The :meth:`~zipfile.ZipFile.open` method of the :class:`zipfile.ZipFile` "
"class no longer supports the ``'U'`` mode (was deprecated since Python 3.4). "
"Use :class:`io.TextIOWrapper` for reading compressed text files in :term:"
"`universal newlines` mode."
msgstr ""
"Metoden :meth:`~zipfile.ZipFile.open` i klassen :class:`zipfile.ZipFile` "
"stöder inte längre läget ``'U'`` (har inte använts sedan Python 3.4). "
"Använd :class:`io.TextIOWrapper` för att läsa komprimerade textfiler i :term:"
"`universal newlines`-läge."

msgid ""
"The undocumented ``IN``, ``CDROM``, ``DLFCN``, ``TYPES``, ``CDIO``, and "
"``STROPTS`` modules have been removed.  They had been available in the "
"platform specific ``Lib/plat-*/`` directories, but were chronically out of "
"date, inconsistently available across platforms, and unmaintained.  The "
"script that created these modules is still available in the source "
"distribution at `Tools/scripts/h2py.py <https://github.com/python/cpython/"
"blob/v3.6.15/Tools/scripts/h2py.py>`_."
msgstr ""
"De odokumenterade modulerna ``IN``, ``CDROM``, ``DLFCN``, ``TYPES``, "
"``CDIO`` och ``STROPTS`` har tagits bort.  De har funnits tillgängliga i de "
"plattformsspecifika katalogerna ``Lib/plat-*/``, men var kroniskt "
"föråldrade, inkonsekvent tillgängliga på olika plattformar och "
"ounderhållna.  Skriptet som skapade dessa moduler finns fortfarande "
"tillgängligt i källdistributionen på `Tools/scripts/h2py.py <https://github."
"com/python/cpython/blob/v3.6.15/Tools/scripts/h2py.py>`_."

msgid "The deprecated ``asynchat.fifo`` class has been removed."
msgstr "Den föråldrade klassen ``asynchat.fifo`` har tagits bort."

msgid "Porting to Python 3.6"
msgstr "Portning till Python 3.6"

msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"I det här avsnittet listas tidigare beskrivna ändringar och andra buggfixar "
"som kan kräva ändringar i din kod."

msgid "Changes in 'python' Command Behavior"
msgstr "Ändringar i beteendet för kommandot \"python"

msgid ""
"The output of a special Python build with defined ``COUNT_ALLOCS``, "
"``SHOW_ALLOC_COUNT`` or ``SHOW_TRACK_COUNT`` macros is now off by default.  "
"It can be re-enabled using the ``-X showalloccount`` option. It now outputs "
"to ``stderr`` instead of ``stdout``. (Contributed by Serhiy Storchaka in :"
"issue:`23034`.)"
msgstr ""
"Utdata från en speciell Python-byggnad med definierade makron "
"``COUNT_ALLOCS``, ``SHOW_ALLOC_COUNT`` eller ``SHOW_TRACK_COUNT`` är nu "
"avstängd som standard.  Det kan återaktiveras med alternativet ``-X "
"showalloccount``. Det matas nu ut till ``stderr`` istället för ``stdout``. "
"(Bidrag från Serhiy Storchaka i :issue:`23034`.)"

msgid "Changes in the Python API"
msgstr "Ändringar i Python API"

msgid ""
":func:`open() <open>` will no longer allow combining the ``'U'`` mode flag "
"with ``'+'``. (Contributed by Jeff Balogh and John O'Connor in :issue:"
"`2091`.)"
msgstr ""
":func:`open() <open>` tillåter inte längre att kombinera lägesflaggan "
"``'U'`` med ``'+'``. (Bidrag från Jeff Balogh och John O'Connor i :issue:"
"`2091`.)"

msgid ""
":mod:`sqlite3` no longer implicitly commits an open transaction before DDL "
"statements."
msgstr ""
":mod:`sqlite3` genomför inte längre implicit en öppen transaktion före DDL-"
"satser."

msgid ""
"On Linux, :func:`os.urandom` now blocks until the system urandom entropy "
"pool is initialized to increase the security."
msgstr ""
"På Linux blockerar :func:`os.urandom` nu tills systemets urandom-entropipool "
"har initialiserats för att öka säkerheten."

msgid ""
"When :meth:`importlib.abc.Loader.exec_module` is defined, :meth:`importlib."
"abc.Loader.create_module` must also be defined."
msgstr ""
"När :meth:`importlib.abc.Loader.exec_module` definieras måste även :meth:"
"`importlib.abc.Loader.create_module` definieras."

msgid ""
":c:func:`PyErr_SetImportError` now sets :exc:`TypeError` when its **msg** "
"argument is not set. Previously only ``NULL`` was returned."
msgstr ""
":c:func:`PyErr_SetImportError` sätter nu :exc:`TypeError` när dess **msg**-"
"argument inte är satt. Tidigare returnerades endast ``NULL``."

msgid ""
"The format of the :attr:`~codeobject.co_lnotab` attribute of code objects "
"changed to support a negative line number delta. By default, Python does not "
"emit bytecode with a negative line number delta. Functions using :attr:"
"`frame.f_lineno`, ``PyFrame_GetLineNumber()`` or ``PyCode_Addr2Line()`` are "
"not affected. Functions directly decoding :attr:`!co_lnotab` should be "
"updated to use a signed 8-bit integer type for the line number delta, but "
"this is only required to support applications using a negative line number "
"delta. See ``Objects/lnotab_notes.txt`` for the :attr:`!co_lnotab` format "
"and how to decode it, and see the :pep:`511` for the rationale."
msgstr ""
"Formatet för attributet :attr:`~codeobject.co_lnotab` för kodobjekt ändrades "
"för att stödja ett negativt radnummerdelta. Som standard emitterar Python "
"inte bytekod med ett negativt radnummerdelta. Funktioner som använder :attr:"
"`frame.f_lineno`, ``PyFrame_GetLineNumber()`` eller ``PyCode_Addr2Line()`` "
"påverkas inte. Funktioner som direkt avkodar :attr:`!co_lnotab` bör "
"uppdateras för att använda en signerad 8-bitars heltalstyp för "
"radnummerdeltaet, men detta krävs endast för att stödja applikationer som "
"använder ett negativt radnummerdelta. Se ``Objects/lnotab_notes.txt`` för :"
"attr:`!co_lnotab`-formatet och hur man avkodar det, och se :pep:`511` för "
"motiveringen."

msgid ""
"The functions in the :mod:`compileall` module now return booleans instead of "
"``1`` or ``0`` to represent success or failure, respectively. Thanks to "
"booleans being a subclass of integers, this should only be an issue if you "
"were doing identity checks for ``1`` or ``0``. See :issue:`25768`."
msgstr ""
"Funktionerna i modulen :mod:`compileall` returnerar nu booleaner istället "
"för ``1`` eller ``0`` för att representera framgång respektive misslyckande. "
"Tack vare att booleans är en underklass till heltal, bör detta endast vara "
"ett problem om du gör identitetskontroller för ``1`` eller ``0``. Se :issue:"
"`25768`."

msgid ""
"Reading the :attr:`~urllib.parse.SplitResult.port` attribute of :func:"
"`urllib.parse.urlsplit` and :func:`~urllib.parse.urlparse` results now "
"raises :exc:`ValueError` for out-of-range values, rather than returning :"
"const:`None`.  See :issue:`20059`."
msgstr ""
"Att läsa attributet :attr:`~urllib.parse.SplitResult.port` av resultaten :"
"func:`urllib.parse.urlsplit` och :func:`~urllib.parse.urlparse` ger nu "
"upphov till :exc:`ValueError` för värden utanför intervallet, istället för "
"att returnera :const:`None`.  Se :issue:`20059`."

msgid ""
"The :mod:`!imp` module now raises a :exc:`DeprecationWarning` instead of :"
"exc:`PendingDeprecationWarning`."
msgstr ""
"Modulen :mod:`!imp` ger nu upphov till en :exc:`DeprecationWarning` istället "
"för :exc:`PendingDeprecationWarning`."

msgid ""
"The following modules have had missing APIs added to their :attr:`__all__` "
"attributes to match the documented APIs: :mod:`calendar`, :mod:`!cgi`, :mod:"
"`csv`, :mod:`~xml.etree.ElementTree`, :mod:`enum`, :mod:`fileinput`, :mod:"
"`ftplib`, :mod:`logging`, :mod:`mailbox`, :mod:`mimetypes`, :mod:"
"`optparse`, :mod:`plistlib`, :mod:`!smtpd`, :mod:`subprocess`, :mod:"
"`tarfile`, :mod:`threading` and :mod:`wave`.  This means they will export "
"new symbols when ``import *`` is used. (Contributed by Joel Taddei and Jacek "
"Kołodziej in :issue:`23883`.)"
msgstr ""
"Följande moduler har fått saknade API:er tillagda i sina :attr:`__all__`-"
"attribut för att matcha de dokumenterade API:erna: :mod:`calendar`, :mod:`!"
"cgi`, :mod:`csv`, :mod:`~xml.etree.ElementTree`, :mod:`enum`, :mod:"
"`fileinput`, :mod:`ftplib`, :mod:`logging`, :mod:`mailbox`, :mod:"
"`mimetypes`, :mod:`optparse`, :mod:`plistlib`, :mod:`!smtpd`, :mod:"
"`subprocess`, :mod:`tarfile`, :mod:`threading` och :mod:`wave`.  Detta "
"innebär att de kommer att exportera nya symboler när ``import *`` används. "
"(Bidrag från Joel Taddei och Jacek Kołodziej i :issue:`23883`.)"

msgid ""
"When performing a relative import, if ``__package__`` does not compare equal "
"to ``__spec__.parent`` then :exc:`ImportWarning` is raised. (Contributed by "
"Brett Cannon in :issue:`25791`.)"
msgstr ""
"Vid relativ import, om ``__package__`` inte jämför lika med ``__spec__."
"parent`` så kommer :exc:`ImportWarning` att visas. (Bidrag från Brett Cannon "
"i :issue:`25791`.)"

msgid ""
"When a relative import is performed and no parent package is known, then :"
"exc:`ImportError` will be raised. Previously, :exc:`SystemError` could be "
"raised. (Contributed by Brett Cannon in :issue:`18018`.)"
msgstr ""
"När en relativ import utförs och inget överordnat paket är känt, kommer :exc:"
"`ImportError` att visas. Tidigare kunde :exc:`SystemError` visas. (Bidrag "
"från Brett Cannon i :issue:`18018`.)"

msgid ""
"Servers based on the :mod:`socketserver` module, including those defined in :"
"mod:`http.server`, :mod:`xmlrpc.server` and :mod:`wsgiref.simple_server`, "
"now only catch exceptions derived from :exc:`Exception`. Therefore if a "
"request handler raises an exception like :exc:`SystemExit` or :exc:"
"`KeyboardInterrupt`, :meth:`~socketserver.BaseServer.handle_error` is no "
"longer called, and the exception will stop a single-threaded server. "
"(Contributed by Martin Panter in :issue:`23430`.)"
msgstr ""
"Servrar som baseras på modulen :mod:`socketserver`, inklusive de som "
"definieras i :mod:`http.server`, :mod:`xmlrpc.server` och :mod:`wsgiref."
"simple_server`, fångar nu bara upp undantag som härrör från :exc:"
"`Exception`. Därför, om en request hanterare ger upphov till ett undantag "
"som :exc:`SystemExit` eller :exc:`KeyboardInterrupt`, anropas inte längre :"
"meth:`~socketserver.BaseServer.handle_error`, och undantaget kommer att "
"stoppa en enkeltrådad server. (Bidrag från Martin Panter i :issue:`23430`.)"

msgid ""
":func:`!spwd.getspnam` now raises a :exc:`PermissionError` instead of :exc:"
"`KeyError` if the user doesn't have privileges."
msgstr ""
":func:`!spwd.getspnam` ger nu upphov till :exc:`PermissionError` istället "
"för :exc:`KeyError` om användaren inte har behörighet."

msgid ""
"The :meth:`socket.socket.close` method now raises an exception if an error "
"(e.g. ``EBADF``) was reported by the underlying system call. (Contributed by "
"Martin Panter in :issue:`26685`.)"
msgstr ""
"Metoden :meth:`socket.socket.close` ger nu upphov till ett undantag om ett "
"fel (t.ex. ``EBADF``) rapporterades av det underliggande systemanropet. "
"(Bidrag från Martin Panter i :issue:`26685`.)"

msgid ""
"The *decode_data* argument for the :class:`!smtpd.SMTPChannel` and :class:`!"
"smtpd.SMTPServer` constructors is now ``False`` by default. This means that "
"the argument passed to :meth:`!process_message` is now a bytes object by "
"default, and :meth:`!process_message` will be passed keyword arguments. Code "
"that has already been updated in accordance with the deprecation warning "
"generated by 3.5 will not be affected."
msgstr ""
"Argumentet *decode_data* för konstruktörerna :class:`!smtpd.SMTPChannel` "
"och :class:`!smtpd.SMTPServer` är nu ``False`` som standard. Detta innebär "
"att argumentet som skickas till :meth:`!process_message` nu är ett bytes-"
"objekt som standard, och :meth:`!process_message` kommer att skickas "
"nyckelordsargument. Kod som redan har uppdaterats i enlighet med deprecation-"
"varningen som genererades av 3.5 kommer inte att påverkas."

msgid ""
"All optional arguments of the :func:`~json.dump`, :func:`~json.dumps`, :func:"
"`~json.load` and :func:`~json.loads` functions and :class:`~json."
"JSONEncoder` and :class:`~json.JSONDecoder` class constructors in the :mod:"
"`json` module are now :ref:`keyword-only <keyword-only_parameter>`. "
"(Contributed by Serhiy Storchaka in :issue:`18726`.)"
msgstr ""
"Alla valfria argument i funktionerna :func:`~json.dump`, :func:`~json."
"dumps`, :func:`~json.load` och :func:`~json.loads` och klasskonstruktörerna :"
"class:`~json.JSONEncoder` och :class:`~json.JSONDecoder` i modulen :mod:"
"`json` är nu :ref:`keyword-only <keyword-only_parameter>`. (Bidrag från "
"Serhiy Storchaka i :issue:`18726`.)"

msgid ""
"Subclasses of :class:`type` which don't override ``type.__new__`` may no "
"longer use the one-argument form to get the type of an object."
msgstr ""
"Underklasser till :class:`type` som inte åsidosätter ``type.__new__`` får "
"inte längre använda formuläret med ett argument för att få fram typen av ett "
"objekt."

msgid ""
"As part of :pep:`487`, the handling of keyword arguments passed to :class:"
"`type` (other than the metaclass hint, ``metaclass``) is now consistently "
"delegated to :meth:`object.__init_subclass__`. This means that :meth:`type."
"__new__` and :meth:`type.__init__` both now accept arbitrary keyword "
"arguments, but :meth:`object.__init_subclass__` (which is called from :meth:"
"`type.__new__`) will reject them by default. Custom metaclasses accepting "
"additional keyword arguments will need to adjust their calls to :meth:`type."
"__new__` (whether direct or via :class:`super`) accordingly."
msgstr ""
"Som en del av :pep:`487`, är hanteringen av nyckelordsargument som skickas "
"till :class:`type` (andra än metaklasstipset, ``metaclass``) nu konsekvent "
"delegerad till :meth:`object.__init_subclass__`. Detta innebär att :meth:"
"`type.__new__` och :meth:`type.__init__` båda nu accepterar godtyckliga "
"nyckelordsargument, men :meth:`object.__init_subclass__` (som anropas från :"
"meth:`type.__new__`) kommer att avvisa dem som standard. Anpassade "
"metaklasser som accepterar ytterligare nyckelordsargument kommer att behöva "
"justera sina anrop till :meth:`type.__new__` (antingen direkt eller via :"
"class:`super`) i enlighet med detta."

msgid ""
"In ``distutils.command.sdist.sdist``, the ``default_format`` attribute has "
"been removed and is no longer honored. Instead, the gzipped tarfile format "
"is the default on all platforms and no platform-specific selection is made. "
"In environments where distributions are built on Windows and zip "
"distributions are required, configure the project with a ``setup.cfg`` file "
"containing the following:"
msgstr ""
"I ``distutils.command.sdist.sdist`` har attributet ``default_format`` tagits "
"bort och används inte längre. Istället är det gzippade tarfilformatet "
"standard på alla plattformar och inget plattformsspecifikt val görs. I "
"miljöer där distributioner byggs på Windows och zip-distributioner krävs, "
"konfigurerar du projektet med en ``setup.cfg``-fil som innehåller följande:"

msgid ""
"[sdist]\n"
"formats=zip"
msgstr ""
"[sdist]\n"
"format=zip"

msgid ""
"This behavior has also been backported to earlier Python versions by "
"Setuptools 26.0.0."
msgstr ""
"Detta beteende har också backporterats till tidigare Python-versioner av "
"Setuptools 26.0.0."

msgid ""
"In the :mod:`urllib.request` module and the :meth:`http.client."
"HTTPConnection.request` method, if no Content-Length header field has been "
"specified and the request body is a file object, it is now sent with HTTP "
"1.1 chunked encoding. If a file object has to be sent to a HTTP 1.0 server, "
"the Content-Length value now has to be specified by the caller. (Contributed "
"by Demian Brecht and Rolf Krahl with tweaks from Martin Panter in :issue:"
"`12319`.)"
msgstr ""
"I :mod:`urllib.request`-modulen och :meth:`http.client.HTTPConnection."
"request`-metoden, om inget Content-Length-huvudfält har angetts och begäran "
"är ett filobjekt, skickas det nu med HTTP 1.1 chunked-kodning. Om ett "
"filobjekt måste skickas till en HTTP 1.0-server måste nu Content-Length-"
"värdet anges av den som anropar. (Bidrag från Demian Brecht och Rolf Krahl "
"med tweaks från Martin Panter i :issue:`12319`.)"

msgid ""
"The :class:`~csv.DictReader` now returns rows of type :class:`~collections."
"OrderedDict`. (Contributed by Steve Holden in :issue:`27842`.)"
msgstr ""
":class:`~csv.DictReader` returnerar nu rader av typen :class:`~collections."
"OrderedDict`. (Bidrag från Steve Holden i :issue:`27842`.)"

msgid ""
"The :const:`!crypt.METHOD_CRYPT` will no longer be added to ``crypt."
"methods`` if unsupported by the platform. (Contributed by Victor Stinner in :"
"issue:`25287`.)"
msgstr ""
":const:`!crypt.METHOD_CRYPT` kommer inte längre att läggas till i ``crypt."
"methods`` om den inte stöds av plattformen. (Bidrag från Victor Stinner i :"
"issue:`25287`.)"

msgid ""
"On Linux, :func:`ctypes.util.find_library` now looks in ``LD_LIBRARY_PATH`` "
"for shared libraries. (Contributed by Vinay Sajip in :issue:`9998`.)"
msgstr ""
"På Linux letar :func:`ctypes.util.find_library` nu i ``LD_LIBRARY_PATH`` "
"efter delade bibliotek. (Bidrag från Vinay Sajip i :issue:`9998`.)"

msgid ""
"The :class:`imaplib.IMAP4` class now handles flags containing the ``']'`` "
"character in messages sent from the server to improve real-world "
"compatibility. (Contributed by Lita Cho in :issue:`21815`.)"
msgstr ""
"Klassen :class:`imaplib.IMAP4` hanterar nu flaggor som innehåller tecknet "
"``']'`` i meddelanden som skickas från servern för att förbättra "
"kompatibiliteten i verkligheten. (Bidrag från Lita Cho i :issue:`21815`.)"

msgid ""
"The :func:`mmap.write() <mmap.write>` function now returns the number of "
"bytes written like other write methods. (Contributed by Jakub Stasiak in :"
"issue:`26335`.)"
msgstr ""
"Funktionen :func:`mmap.write() <mmap.write>` returnerar nu antalet byte som "
"skrivits, precis som andra skrivmetoder. (Bidrag från Jakub Stasiak i :issue:"
"`26335`.)"

msgid ""
"The :func:`pkgutil.iter_modules` and :func:`pkgutil.walk_packages` functions "
"now return :class:`~pkgutil.ModuleInfo` named tuples. (Contributed by "
"Ramchandra Apte in :issue:`17211`.)"
msgstr ""
"Funktionerna :func:`pkgutil.iter_modules` och :func:`pkgutil.walk_packages` "
"returnerar nu :class:`~pkgutil.ModuleInfo` namngivna tuples. (Bidrag från "
"Ramchandra Apte i :issue:`17211`.)"

msgid ""
":func:`re.sub` now raises an error for invalid numerical group references in "
"replacement templates even if the pattern is not found in the string.  The "
"error message for invalid group references now includes the group index and "
"the position of the reference. (Contributed by SilentGhost, Serhiy Storchaka "
"in :issue:`25953`.)"
msgstr ""
":func:`re.sub` ger nu upphov till ett felmeddelande för ogiltiga numeriska "
"gruppreferenser i ersättningsmallar även om mönstret inte finns i strängen.  "
"Felmeddelandet för ogiltiga gruppreferenser innehåller nu gruppindex och "
"referensens position. (Bidrag från SilentGhost, Serhiy Storchaka i :issue:"
"`25953`.)"

msgid ""
":class:`zipfile.ZipFile` will now raise :exc:`NotImplementedError` for "
"unrecognized compression values.  Previously a plain :exc:`RuntimeError` was "
"raised.  Additionally, calling :class:`~zipfile.ZipFile` methods on a closed "
"ZipFile or calling the :meth:`~zipfile.ZipFile.write` method on a ZipFile "
"created with mode ``'r'`` will raise a :exc:`ValueError`. Previously, a :exc:"
"`RuntimeError` was raised in those scenarios."
msgstr ""
":class:`zipfile.ZipFile` kommer nu att ge upphov till :exc:"
"`NotImplementedError` för okända komprimeringsvärden.  Tidigare gavs ett "
"vanligt :exc:`RuntimeError`.  Dessutom kommer anrop av :class:`~zipfile."
"ZipFile`-metoder på en stängd ZipFile eller anrop av :meth:`~zipfile.ZipFile."
"write`-metoden på en ZipFile skapad med läge ``'r'`` att ge upphov till ett :"
"exc:`ValueError`. Tidigare gavs ett :exc:`RuntimeError` i dessa scenarier."

msgid ""
"when custom metaclasses are combined with zero-argument :func:`super` or "
"direct references from methods to the implicit ``__class__`` closure "
"variable, the implicit ``__classcell__`` namespace entry must now be passed "
"up to ``type.__new__`` for initialisation. Failing to do so will result in "
"a :exc:`DeprecationWarning` in Python 3.6 and a :exc:`RuntimeError` in "
"Python 3.8."
msgstr ""
"när anpassade metaklasser kombineras med nollargument :func:`super` eller "
"direkta referenser från metoder till den implicita ``__class__`` "
"stängningsvariabeln, måste den implicita ``__classcell__`` namnrymdsposten "
"nu skickas upp till ``type.__new__`` för initialisering. Om detta inte görs "
"kommer det att resultera i en :exc:`DeprecationWarning` i Python 3.6 och en :"
"exc:`RuntimeError` i Python 3.8."

msgid ""
"With the introduction of :exc:`ModuleNotFoundError`, import system consumers "
"may start expecting import system replacements to raise that more specific "
"exception when appropriate, rather than the less-specific :exc:"
"`ImportError`. To provide future compatibility with such consumers, "
"implementers of alternative import systems that completely replace :func:"
"`__import__` will need to update their implementations to raise the new "
"subclass when a module can't be found at all. Implementers of compliant "
"plugins to the default import system shouldn't need to make any changes, as "
"the default import system will raise the new subclass when appropriate."
msgstr ""
"Med introduktionen av :exc:`ModuleNotFoundError`, kan "
"importsystemkonsumenter börja förvänta sig att importsystemersättare ska "
"lyfta det mer specifika undantaget när det är lämpligt, snarare än det "
"mindre specifika :exc:`ImportError`. För att ge framtida kompatibilitet med "
"sådana konsumenter måste implementatörer av alternativa importsystem som "
"helt ersätter :func:`__import__` uppdatera sina implementationer så att de "
"ger upphov till den nya underklassen när en modul inte kan hittas alls. "
"Implementatörer av kompatibla tillägg till standardimportsystemet bör inte "
"behöva göra några ändringar, eftersom standardimportsystemet kommer att visa "
"den nya underklassen när så är lämpligt."

msgid "Changes in the C API"
msgstr "Förändringar i C API"

msgid ""
"The :c:func:`PyMem_Malloc` allocator family now uses the :ref:`pymalloc "
"allocator <pymalloc>` rather than the system :c:func:`malloc`. Applications "
"calling :c:func:`PyMem_Malloc` without holding the GIL can now crash. Set "
"the :envvar:`PYTHONMALLOC` environment variable to ``debug`` to validate the "
"usage of memory allocators in your application. See :issue:`26249`."
msgstr ""
"Allokeringsfamiljen :c:func:`PyMem_Malloc` använder nu :ref:`pymalloc "
"allocator <pymalloc>` istället för systemets :c:func:`malloc`. Program som "
"anropar :c:func:`PyMem_Malloc` utan att ha GIL:en kan nu krascha. Sätt "
"miljövariabeln :envvar:`PYTHONMALLOC` till ``debug`` för att validera "
"användningen av minnesallokatorer i ditt program. Se :issue:`26249`."

msgid ""
":c:func:`Py_Exit` (and the main interpreter) now override the exit status "
"with 120 if flushing buffered data failed.  See :issue:`5319`."
msgstr ""
":c:func:`Py_Exit` (och huvudtolken) åsidosätter nu utgångsstatusen med 120 "
"om spolningen av buffrade data misslyckades.  Se :issue:`5319`."

msgid "CPython bytecode changes"
msgstr "CPython bytecode-ändringar"

msgid ""
"There have been several major changes to the :term:`bytecode` in Python 3.6."
msgstr ""
"Det har skett flera stora förändringar av :term:`bytecode` i Python 3.6."

msgid ""
"The Python interpreter now uses a 16-bit wordcode instead of bytecode. "
"(Contributed by Demur Rumed with input and reviews from Serhiy Storchaka and "
"Victor Stinner in :issue:`26647` and :issue:`28050`.)"
msgstr ""
"Python-tolken använder nu en 16-bitars ordkod istället för bytekod. (Bidrag "
"från Demur Rumed med input och recensioner från Serhiy Storchaka och Victor "
"Stinner i :issue:`26647` och :issue:`28050`.)"

msgid ""
"The new :opcode:`!FORMAT_VALUE` and :opcode:`BUILD_STRING` opcodes as part "
"of the  :ref:`formatted string literal <whatsnew36-pep498>` implementation. "
"(Contributed by Eric Smith in :issue:`25483` and Serhiy Storchaka in :issue:"
"`27078`.)"
msgstr ""
"De nya opkoderna :opcode:`!FORMAT_VALUE` och :opcode:`BUILD_STRING` som en "
"del av implementationen :ref:`formatted string literal <whatsnew36-pep498>`. "
"(Bidrag från Eric Smith i :issue:`25483` och Serhiy Storchaka i :issue:"
"`27078`.)"

msgid ""
"The new :opcode:`!BUILD_CONST_KEY_MAP` opcode to optimize the creation of "
"dictionaries with constant keys. (Contributed by Serhiy Storchaka in :issue:"
"`27140`.)"
msgstr ""
"Den nya :opcode:`!BUILD_CONST_KEY_MAP` opcode för att optimera skapandet av "
"ordböcker med konstanta nycklar. (Bidrag från Serhiy Storchaka i :issue:"
"`27140`.)"

msgid ""
"The function call opcodes have been heavily reworked for better performance "
"and simpler implementation. The :opcode:`MAKE_FUNCTION`, :opcode:`!"
"CALL_FUNCTION`, :opcode:`!CALL_FUNCTION_KW` and :opcode:`!"
"BUILD_MAP_UNPACK_WITH_CALL` opcodes have been modified, the new :opcode:"
"`CALL_FUNCTION_EX` and :opcode:`!BUILD_TUPLE_UNPACK_WITH_CALL` have been "
"added, and ``CALL_FUNCTION_VAR``, ``CALL_FUNCTION_VAR_KW`` and "
"``MAKE_CLOSURE`` opcodes have been removed. (Contributed by Demur Rumed in :"
"issue:`27095`, and Serhiy Storchaka in :issue:`27213`, :issue:`28257`.)"
msgstr ""
"Opkoderna för funktionsanrop har omarbetats kraftigt för bättre prestanda "
"och enklare implementering. Opkoderna :opcode:`MAKE_FUNCTION`, :opcode:`!"
"CALL_FUNCTION`, :opcode:`!CALL_FUNCTION_KW` och :opcode:`!"
"BUILD_MAP_UNPACK_WITH_CALL` har modifierats, de nya :opcode:"
"`CALL_FUNCTION_EX` och :opcode:`!BUILD_TUPLE_UNPACK_WITH_CALL` har lagts "
"till, och opkoderna ``CALL_FUNCTION_VAR``, ``CALL_FUNCTION_VAR_KW`` och "
"``MAKE_CLOSURE`` har tagits bort. (Bidrag från Demur Rumed i :issue:`27095`, "
"och Serhiy Storchaka i :issue:`27213`, :issue:`28257`.)"

msgid ""
"The new :opcode:`SETUP_ANNOTATIONS` and :opcode:`!STORE_ANNOTATION` opcodes "
"have been added to support the new :term:`variable annotation` syntax. "
"(Contributed by Ivan Levkivskyi in :issue:`27985`.)"
msgstr ""
"De nya opkoderna :opcode:`SETUP_ANNOTATIONS` och :opcode:`!STORE_ANNOTATION` "
"har lagts till för att stödja den nya syntaxen :term:`variable annotation`. "
"(Bidrag från Ivan Levkivskyi i :issue:`27985`.)"

msgid "Notable changes in Python 3.6.2"
msgstr "Viktiga ändringar i Python 3.6.2"

msgid "New ``make regen-all`` build target"
msgstr "Nytt byggmål för ``make regen-all``"

msgid ""
"To simplify cross-compilation, and to ensure that CPython can reliably be "
"compiled without requiring an existing version of Python to already be "
"available, the autotools-based build system no longer attempts to implicitly "
"recompile generated files based on file modification times."
msgstr ""
"För att förenkla korskompilering och säkerställa att CPython kan kompileras "
"på ett tillförlitligt sätt utan att det krävs att en befintlig version av "
"Python redan finns tillgänglig, försöker det autotools-baserade byggsystemet "
"inte längre att implicit kompilera om genererade filer baserat på "
"filändringstider."

msgid ""
"Instead, a new ``make regen-all`` command has been added to force "
"regeneration of these files when desired (e.g. after an initial version of "
"Python has already been built based on the pregenerated versions)."
msgstr ""
"Istället har ett nytt ``make regen-all``-kommando lagts till för att tvinga "
"fram regenerering av dessa filer när så önskas (t.ex. efter att en första "
"version av Python redan har byggts baserat på de förgenererade versionerna)."

msgid ""
"More selective regeneration targets are also defined - see :source:`Makefile."
"pre.in` for details."
msgstr ""
"Mer selektiva regenereringsmål definieras också - se :source:`Makefile.pre."
"in` för detaljer."

msgid "(Contributed by Victor Stinner in :issue:`23404`.)"
msgstr "(Bidrag från Victor Stinner i :issue:`23404`.)"

msgid "Removal of ``make touch`` build target"
msgstr "Borttagning av byggmålet ``make touch``"

msgid ""
"The ``make touch`` build target previously used to request implicit "
"regeneration of generated files by updating their modification times has "
"been removed."
msgstr ""
"Byggmålet ``make touch`` som tidigare användes för att begära implicit "
"regenerering av genererade filer genom att uppdatera deras modifieringstider "
"har tagits bort."

msgid "It has been replaced by the new ``make regen-all`` target."
msgstr "Det har ersatts av det nya målet ``make regen-all``."

msgid "Notable changes in Python 3.6.4"
msgstr "Viktiga ändringar i Python 3.6.4"

msgid ""
"The ``PyExc_RecursionErrorInst`` singleton that was part of the public API "
"has been removed as its members being never cleared may cause a segfault "
"during finalization of the interpreter. (Contributed by Xavier de Gaye in :"
"issue:`22898` and :issue:`30697`.)"
msgstr ""
"Singletonen ``PyExc_RecursionErrorInst`` som var en del av det publika API:"
"et har tagits bort eftersom dess medlemmar aldrig rensas och detta kan "
"orsaka ett segfault under slutförandet av tolken. (Bidrag från Xavier de "
"Gaye i :issue:`22898` och :issue:`30697`.)"

msgid "Notable changes in Python 3.6.5"
msgstr "Viktiga ändringar i Python 3.6.5"

msgid ""
"The :func:`locale.localeconv` function now sets temporarily the ``LC_CTYPE`` "
"locale to the ``LC_NUMERIC`` locale in some cases. (Contributed by Victor "
"Stinner in :issue:`31900`.)"
msgstr ""
"Funktionen :func:`locale.localeconv` ställer nu temporärt in ``LC_CTYPE`` "
"locale till ``LC_NUMERIC`` locale i vissa fall. (Bidrag från Victor Stinner "
"i :issue:`31900`.)"

msgid "Notable changes in Python 3.6.7"
msgstr "Viktiga ändringar i Python 3.6.7"

msgid ""
":mod:`xml.dom.minidom` and :mod:`xml.sax` modules no longer process external "
"entities by default. See also :gh:`61441`."
msgstr ""
"modulerna :mod:`xml.dom.minidom` och :mod:`xml.sax` bearbetar inte längre "
"externa enheter som standard. Se även :gh:`61441`."

msgid ""
"In 3.6.7 the :mod:`tokenize` module now implicitly emits a ``NEWLINE`` token "
"when provided with input that does not have a trailing new line.  This "
"behavior now matches what the C tokenizer does internally. (Contributed by "
"Ammar Askar in :issue:`33899`.)"
msgstr ""
"I 3.6.7 ger modulen :mod:`tokenize` nu implicit ut en ``NEWLINE``-token när "
"den förses med indata som inte har en efterföljande ny rad.  Detta beteende "
"matchar nu vad C-tokenizer gör internt. (Bidrag från Ammar Askar i :issue:"
"`33899`.)"

msgid "Notable changes in Python 3.6.10"
msgstr "Anmärkningsvärda ändringar i Python 3.6.10"

msgid ""
"Due to significant security concerns, the *reuse_address* parameter of :meth:"
"`asyncio.loop.create_datagram_endpoint` is no longer supported. This is "
"because of the behavior of the socket option ``SO_REUSEADDR`` in UDP. For "
"more details, see the documentation for ``loop.create_datagram_endpoint()``. "
"(Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in :issue:"
"`37228`.)"
msgstr ""
"På grund av betydande säkerhetsproblem stöds inte längre parametern "
"*reuse_address* i :meth:`asyncio.loop.create_datagram_endpoint`. Detta beror "
"på beteendet hos socket-alternativet ``SO_REUSEADDR`` i UDP. För mer "
"information, se dokumentationen för ``loop.create_datagram_endpoint()``. "
"(Bidrag från Kyle Stanley, Antoine Pitrou och Yury Selivanov i :issue:"
"`37228`.)"

msgid "Notable changes in Python 3.6.13"
msgstr "Viktiga ändringar i Python 3.6.13"

msgid ""
"Earlier Python versions allowed using both ``;`` and ``&`` as query "
"parameter separators in :func:`urllib.parse.parse_qs` and :func:`urllib."
"parse.parse_qsl`.  Due to security concerns, and to conform with newer W3C "
"recommendations, this has been changed to allow only a single separator key, "
"with ``&`` as the default.  This change also affects :func:`!cgi.parse` and :"
"func:`!cgi.parse_multipart` as they use the affected functions internally. "
"For more details, please see their respective documentation. (Contributed by "
"Adam Goldschmidt, Senthil Kumaran and Ken Jin in :issue:`42967`.)"
msgstr ""
"Tidigare Python-versioner tillät användning av både ``;`` och ``&`` som "
"separatorer för frågeparametrar i :func:`urllib.parse.parse_qs` och :func:"
"`urllib.parse.parse_qsl`.  På grund av säkerhetsproblem och för att "
"överensstämma med nyare W3C-rekommendationer har detta ändrats så att endast "
"en enda separatornyckel tillåts, med ``&`` som standard.  Denna ändring "
"påverkar även :func:`!cgi.parse` och :func:`!cgi.parse_multipart` eftersom "
"de använder de berörda funktionerna internt. För mer information, vänligen "
"se deras respektive dokumentation. (Bidrag från Adam Goldschmidt, Senthil "
"Kumaran och Ken Jin i :issue:`42967`.)"

msgid "Notable changes in Python 3.6.14"
msgstr "Viktiga ändringar i Python 3.6.14"

msgid ""
"A security fix alters the :class:`ftplib.FTP` behavior to not trust the IPv4 "
"address sent from the remote server when setting up a passive data channel.  "
"We reuse the ftp server IP address instead.  For unusual code requiring the "
"old behavior, set a ``trust_server_pasv_ipv4_address`` attribute on your FTP "
"instance to ``True``.  (See :gh:`87451`)"
msgstr ""
"En säkerhetsfix ändrar :class:`ftplib.FTP`-beteendet så att det inte litar "
"på den IPv4-adress som skickas från fjärrservern när en passiv datakanal "
"sätts upp.  Vi återanvänder istället ftp-serverns IP-adress.  För ovanlig "
"kod som kräver det gamla beteendet, ställ in attributet "
"``trust_server_pasv_ipv4_address`` på din FTP-instans till ``True``.  (Se :"
"gh:`87451`)"

msgid ""
"The presence of newline or tab characters in parts of a URL allows for some "
"forms of attacks. Following the WHATWG specification that updates RFC 3986, "
"ASCII newline ``\\n``, ``\\r`` and tab ``\\t`` characters are stripped from "
"the URL by the parser :func:`urllib.parse` preventing such attacks. The "
"removal characters are controlled by a new module level variable ``urllib."
"parse._UNSAFE_URL_BYTES_TO_REMOVE``. (See :gh:`88048`)"
msgstr ""
"Förekomsten av newline- eller tabb-tecken i delar av en URL möjliggör vissa "
"former av attacker. I enlighet med WHATWG-specifikationen som uppdaterar RFC "
"3986, tas ASCII-tecken för ny rad ``n``, ``r`` och tabb ``t`` bort från URL:"
"en av parsern :func:`urllib.parse` för att förhindra sådana attacker. De "
"borttagna tecknen styrs av en ny variabel på modulnivå, ``urllib.parse."
"_UNSAFE_URL_BYTES_TO_REMOVE``. (Se :gh:`88048`)"
