# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-21 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "List Objects"
msgstr ""

msgid "This subtype of :c:type:`PyObject` represents a Python list object."
msgstr ""

msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python list type. "
"This is the same object as :class:`list` in the Python layer."
msgstr ""

msgid ""
"Return true if *p* is a list object or an instance of a subtype of the list "
"type.  This function always succeeds."
msgstr ""

msgid ""
"Return true if *p* is a list object, but not an instance of a subtype of the "
"list type.  This function always succeeds."
msgstr ""

msgid "Return a new list of length *len* on success, or ``NULL`` on failure."
msgstr ""

msgid ""
"If *len* is greater than zero, the returned list object's items are set to "
"``NULL``. Thus you cannot use abstract API functions such as :c:func:"
"`PySequence_SetItem` or expose the object to Python code before setting all "
"items to a real object with :c:func:`PyList_SetItem` or :c:func:"
"`PyList_SET_ITEM()`. The following APIs are safe APIs before the list is "
"fully initialized: :c:func:`PyList_SetItem()` and :c:func:"
"`PyList_SET_ITEM()`."
msgstr ""

msgid ""
"Return the length of the list object in *list*; this is equivalent to "
"``len(list)`` on a list object."
msgstr ""

msgid "Similar to :c:func:`PyList_Size`, but without error checking."
msgstr ""

msgid ""
"Return the object at position *index* in the list pointed to by *list*.  The "
"position must be non-negative; indexing from the end of the list is not "
"supported.  If *index* is out of bounds (:code:`<0 or >=len(list)`), return "
"``NULL`` and set an :exc:`IndexError` exception."
msgstr ""

msgid ""
"Like :c:func:`PyList_GetItemRef`, but returns a :term:`borrowed reference` "
"instead of a :term:`strong reference`."
msgstr ""

msgid "Similar to :c:func:`PyList_GetItem`, but without error checking."
msgstr ""

msgid ""
"Set the item at index *index* in list to *item*.  Return ``0`` on success. "
"If *index* is out of bounds, return ``-1`` and set an :exc:`IndexError` "
"exception."
msgstr ""

msgid ""
"This function \"steals\" a reference to *item* and discards a reference to "
"an item already in the list at the affected position."
msgstr ""

msgid ""
"Macro form of :c:func:`PyList_SetItem` without error checking. This is "
"normally only used to fill in new lists where there is no previous content."
msgstr ""

msgid ""
"Bounds checking is performed as an assertion if Python is built in :ref:"
"`debug mode <debug-build>` or :option:`with assertions <--with-assertions>`."
msgstr ""

msgid ""
"This macro \"steals\" a reference to *item*, and, unlike :c:func:"
"`PyList_SetItem`, does *not* discard a reference to any item that is being "
"replaced; any reference in *list* at position *i* will be leaked."
msgstr ""

msgid ""
"Insert the item *item* into list *list* in front of index *index*.  Return "
"``0`` if successful; return ``-1`` and set an exception if unsuccessful. "
"Analogous to ``list.insert(index, item)``."
msgstr ""

msgid ""
"Append the object *item* at the end of list *list*. Return ``0`` if "
"successful; return ``-1`` and set an exception if unsuccessful.  Analogous "
"to ``list.append(item)``."
msgstr ""

msgid ""
"Return a list of the objects in *list* containing the objects *between* "
"*low* and *high*.  Return ``NULL`` and set an exception if unsuccessful.  "
"Analogous to ``list[low:high]``.  Indexing from the end of the list is not "
"supported."
msgstr ""

msgid ""
"Set the slice of *list* between *low* and *high* to the contents of "
"*itemlist*.  Analogous to ``list[low:high] = itemlist``. The *itemlist* may "
"be ``NULL``, indicating the assignment of an empty list (slice deletion). "
"Return ``0`` on success, ``-1`` on failure.  Indexing from the end of the "
"list is not supported."
msgstr ""

msgid ""
"Extend *list* with the contents of *iterable*.  This is the same as "
"``PyList_SetSlice(list, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, iterable)`` and "
"analogous to ``list.extend(iterable)`` or ``list += iterable``."
msgstr ""

msgid ""
"Raise an exception and return ``-1`` if *list* is not a :class:`list` "
"object. Return 0 on success."
msgstr ""

msgid ""
"Remove all items from *list*.  This is the same as ``PyList_SetSlice(list, "
"0, PY_SSIZE_T_MAX, NULL)`` and analogous to ``list.clear()`` or ``del "
"list[:]``."
msgstr ""

msgid ""
"Raise an exception and return ``-1`` if *list* is not a :class:`list` "
"object.  Return 0 on success."
msgstr ""

msgid ""
"Sort the items of *list* in place.  Return ``0`` on success, ``-1`` on "
"failure.  This is equivalent to ``list.sort()``."
msgstr ""

msgid ""
"Reverse the items of *list* in place.  Return ``0`` on success, ``-1`` on "
"failure.  This is the equivalent of ``list.reverse()``."
msgstr ""

msgid ""
"Return a new tuple object containing the contents of *list*; equivalent to "
"``tuple(list)``."
msgstr ""

msgid "object"
msgstr ""

msgid "list"
msgstr ""

msgid "built-in function"
msgstr ""

msgid "len"
msgstr ""

msgid "tuple"
msgstr ""
