# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-23 14:15+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!secrets` --- Generate secure random numbers for managing secrets"
msgstr ""

msgid "**Source code:** :source:`Lib/secrets.py`"
msgstr ""

msgid ""
"The :mod:`secrets` module is used for generating cryptographically strong "
"random numbers suitable for managing data such as passwords, account "
"authentication, security tokens, and related secrets."
msgstr ""

msgid ""
"In particular, :mod:`secrets` should be used in preference to the default "
"pseudo-random number generator in the :mod:`random` module, which is "
"designed for modelling and simulation, not security or cryptography."
msgstr ""

msgid ":pep:`506`"
msgstr ""

msgid "Random numbers"
msgstr ""

msgid ""
"The :mod:`secrets` module provides access to the most secure source of "
"randomness that your operating system provides."
msgstr ""

msgid ""
"A class for generating random numbers using the highest-quality sources "
"provided by the operating system.  See :class:`random.SystemRandom` for "
"additional details."
msgstr ""

msgid "Return a randomly chosen element from a non-empty sequence."
msgstr ""

msgid "Return a random int in the range [0, *exclusive_upper_bound*)."
msgstr ""

msgid "Return a non-negative int with *k* random bits."
msgstr ""

msgid "Generating tokens"
msgstr ""

msgid ""
"The :mod:`secrets` module provides functions for generating secure tokens, "
"suitable for applications such as password resets, hard-to-guess URLs, and "
"similar."
msgstr ""

msgid ""
"Return a random byte string containing *nbytes* number of bytes. If *nbytes* "
"is ``None`` or not supplied, a reasonable default is used."
msgstr ""

msgid ""
">>> token_bytes(16)\n"
"b'\\xebr\\x17D*t\\xae\\xd4\\xe3S\\xb6\\xe2\\xebP1\\x8b'"
msgstr ""

msgid ""
"Return a random text string, in hexadecimal.  The string has *nbytes* random "
"bytes, each byte converted to two hex digits.  If *nbytes* is ``None`` or "
"not supplied, a reasonable default is used."
msgstr ""

msgid ""
">>> token_hex(16)\n"
"'f9bf78b9a18ce6d46a0cd2b0b86df9da'"
msgstr ""

msgid ""
"Return a random URL-safe text string, containing *nbytes* random bytes.  The "
"text is Base64 encoded, so on average each byte results in approximately 1.3 "
"characters.  If *nbytes* is ``None`` or not supplied, a reasonable default "
"is used."
msgstr ""

msgid ""
">>> token_urlsafe(16)\n"
"'Drmhze6EPcv0fN_81Bj-nA'"
msgstr ""

msgid "How many bytes should tokens use?"
msgstr ""

msgid ""
"To be secure against `brute-force attacks <https://en.wikipedia.org/wiki/"
"Brute-force_attack>`_, tokens need to have sufficient randomness.  "
"Unfortunately, what is considered sufficient will necessarily increase as "
"computers get more powerful and able to make more guesses in a shorter "
"period.  As of 2015, it is believed that 32 bytes (256 bits) of randomness "
"is sufficient for the typical use-case expected for the :mod:`secrets` "
"module."
msgstr ""

msgid ""
"For those who want to manage their own token length, you can explicitly "
"specify how much randomness is used for tokens by giving an :class:`int` "
"argument to the various ``token_*`` functions.  That argument is taken as "
"the number of bytes of randomness to use."
msgstr ""

msgid ""
"Otherwise, if no argument is provided, or if the argument is ``None``, the "
"``token_*`` functions will use a reasonable default instead."
msgstr ""

msgid ""
"That default is subject to change at any time, including during maintenance "
"releases."
msgstr ""

msgid "Other functions"
msgstr ""

msgid ""
"Return ``True`` if strings or :term:`bytes-like objects <bytes-like object>` "
"*a* and *b* are equal, otherwise ``False``, using a \"constant-time "
"compare\" to reduce the risk of `timing attacks <https://codahale.com/a-"
"lesson-in-timing-attacks/>`_. See :func:`hmac.compare_digest` for additional "
"details."
msgstr ""

msgid "Recipes and best practices"
msgstr ""

msgid ""
"This section shows recipes and best practices for using :mod:`secrets` to "
"manage a basic level of security."
msgstr ""

msgid "Generate an eight-character alphanumeric password:"
msgstr ""

msgid ""
"import string\n"
"import secrets\n"
"alphabet = string.ascii_letters + string.digits\n"
"password = ''.join(secrets.choice(alphabet) for i in range(8))"
msgstr ""

msgid ""
"Applications should not :cwe:`store passwords in a recoverable format "
"<257>`, whether plain text or encrypted.  They should be salted and hashed "
"using a cryptographically strong one-way (irreversible) hash function."
msgstr ""

msgid ""
"Generate a ten-character alphanumeric password with at least one lowercase "
"character, at least one uppercase character, and at least three digits:"
msgstr ""

msgid ""
"import string\n"
"import secrets\n"
"alphabet = string.ascii_letters + string.digits\n"
"while True:\n"
"    password = ''.join(secrets.choice(alphabet) for i in range(10))\n"
"    if (any(c.islower() for c in password)\n"
"            and any(c.isupper() for c in password)\n"
"            and sum(c.isdigit() for c in password) >= 3):\n"
"        break"
msgstr ""

msgid "Generate an `XKCD-style passphrase <https://xkcd.com/936/>`_:"
msgstr ""

msgid ""
"import secrets\n"
"# On standard Linux systems, use a convenient dictionary file.\n"
"# Other platforms may need to provide their own word-list.\n"
"with open('/usr/share/dict/words') as f:\n"
"    words = [word.strip() for word in f]\n"
"    password = ' '.join(secrets.choice(words) for i in range(4))"
msgstr ""

msgid ""
"Generate a hard-to-guess temporary URL containing a security token suitable "
"for password recovery applications:"
msgstr ""

msgid ""
"import secrets\n"
"url = 'https://example.com/reset=' + secrets.token_urlsafe()"
msgstr ""
