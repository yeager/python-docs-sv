# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Built-in Functions"
msgstr "Inbyggda funktioner"

msgid ""
"The Python interpreter has a number of functions and types built into it "
"that are always available.  They are listed here in alphabetical order."
msgstr ""
"Python-tolken har ett antal inbyggda funktioner och typer som alltid är "
"tillgängliga.  De listas här i alfabetisk ordning."

msgid "**A**"
msgstr "**A**"

msgid ":func:`abs`"
msgstr ":func:`abs`"

msgid ":func:`aiter`"
msgstr ":func:`aiter`"

msgid ":func:`all`"
msgstr ":func:`all`"

msgid ":func:`anext`"
msgstr ":func:`anext`"

msgid ":func:`any`"
msgstr ":func:`any`"

msgid ":func:`ascii`"
msgstr ":func:`ascii`"

msgid "**B**"
msgstr "**B**"

msgid ":func:`bin`"
msgstr ":func:`bin`"

msgid ":func:`bool`"
msgstr ":func:`bool`"

msgid ":func:`breakpoint`"
msgstr ":func:`brytpunkt`"

msgid "|func-bytearray|_"
msgstr "|func-bytearray|_"

msgid "|func-bytes|_"
msgstr "|func-bytes|_"

msgid "**C**"
msgstr "**C**"

msgid ":func:`callable`"
msgstr ":func:`kallbar`"

msgid ":func:`chr`"
msgstr ":func:`chr`"

msgid ":func:`classmethod`"
msgstr ":func:`klassmetod`"

msgid ":func:`compile`"
msgstr ":func:`kompilera`"

msgid ":func:`complex`"
msgstr ":func:`komplex`"

msgid "**D**"
msgstr "**D**"

msgid ":func:`delattr`"
msgstr ":func:`delattr`"

msgid "|func-dict|_"
msgstr "|func-dict|_"

msgid ":func:`dir`"
msgstr ":func:`dir`"

msgid ":func:`divmod`"
msgstr ":func:`divmod`"

msgid "**E**"
msgstr "**E**"

msgid ":func:`enumerate`"
msgstr ":func:`uppräkna`"

msgid ":func:`eval`"
msgstr ":func:`eval`"

msgid ":func:`exec`"
msgstr ":func:`exec`"

msgid "**F**"
msgstr "**F**"

msgid ":func:`filter`"
msgstr ":func:`filter`"

msgid ":func:`float`"
msgstr ":func:`flöde`"

msgid ":func:`format`"
msgstr ":func:`format`"

msgid "|func-frozenset|_"
msgstr "|Jag har en idé"

msgid "**G**"
msgstr "**G**"

msgid ":func:`getattr`"
msgstr ":func:`getattr`"

msgid ":func:`globals`"
msgstr ":func:`globaler`"

msgid "**H**"
msgstr "**H**"

msgid ":func:`hasattr`"
msgstr ":func:`harattr`"

msgid ":func:`hash`"
msgstr ":func:`hash`"

msgid ":func:`help`"
msgstr ":func:`hjälp`"

msgid ":func:`hex`"
msgstr ":func:`hex`"

msgid "**I**"
msgstr "**I**"

msgid ":func:`id`"
msgstr ":func:`id`"

msgid ":func:`input`"
msgstr ":func:`inmatning`"

msgid ":func:`int`"
msgstr ":func:`int`"

msgid ":func:`isinstance`"
msgstr ":func:`isinstance`"

msgid ":func:`issubclass`"
msgstr ":func:`issubclass`"

msgid ":func:`iter`"
msgstr ":func:`iter`"

msgid "**L**"
msgstr "**L**"

msgid ":func:`len`"
msgstr ":func:`len`"

msgid "|func-list|_"
msgstr "|func-lista|_"

msgid ":func:`locals`"
msgstr ":func:`lokal`"

msgid "**M**"
msgstr "**M**"

msgid ":func:`map`"
msgstr ":func:`map`"

msgid ":func:`max`"
msgstr ":func:`max`"

msgid "|func-memoryview|_"
msgstr "|func-memoryview|_"

msgid ":func:`min`"
msgstr ":func:`min`"

msgid "**N**"
msgstr "**N**"

msgid ":func:`next`"
msgstr ":func:`nästa`"

msgid "**O**"
msgstr "**O**"

msgid ":func:`object`"
msgstr ":func:`objekt`"

msgid ":func:`oct`"
msgstr ":func:`oct`"

msgid ":func:`open`"
msgstr ":func:`öppna`"

msgid ":func:`ord`"
msgstr ":func:`ord`"

msgid "**P**"
msgstr "**P**"

msgid ":func:`pow`"
msgstr ":func:`pow`"

msgid ":func:`print`"
msgstr ":func:`print`"

msgid ":func:`property`"
msgstr ":func:`egenskap`"

msgid "**R**"
msgstr "**R**"

msgid "|func-range|_"
msgstr "|func-område|_"

msgid ":func:`repr`"
msgstr ":func:`repr`"

msgid ":func:`reversed`"
msgstr ":func:`vända`"

msgid ":func:`round`"
msgstr ":func:`rund`"

msgid "**S**"
msgstr "**S**"

msgid "|func-set|_"
msgstr "|func-set|_"

msgid ":func:`setattr`"
msgstr ":func:`setattr`"

msgid ":func:`slice`"
msgstr ":func:`skiva`"

msgid ":func:`sorted`"
msgstr ":func:`sorterad`"

msgid ":func:`staticmethod`"
msgstr ":func:`statisk metod`"

msgid "|func-str|_"
msgstr "|func-str|_"

msgid ":func:`sum`"
msgstr ":func:`summa`"

msgid ":func:`super`"
msgstr ":func:`super`"

msgid "**T**"
msgstr "**T**"

msgid "|func-tuple|_"
msgstr "|func-tuple|__"

msgid ":func:`type`"
msgstr ":func:`typ`"

msgid "**V**"
msgstr "**V**"

msgid ":func:`vars`"
msgstr ":func:`vars`"

msgid "**Z**"
msgstr "**Z**"

msgid ":func:`zip`"
msgstr ":func:`zip`"

msgid "**_**"
msgstr "**_**"

msgid ":func:`__import__`"
msgstr ":func:`__import__`"

msgid ""
"Return the absolute value of a number.  The argument may be an integer, a "
"floating-point number, or an object implementing :meth:`~object.__abs__`. If "
"the argument is a complex number, its magnitude is returned."
msgstr ""
"Returnerar det absoluta värdet av ett tal.  Argumentet kan vara ett heltal, "
"ett flyttal eller ett objekt som implementerar :meth:`~object.__abs__`. Om "
"argumentet är ett komplext tal returneras dess magnitud."

msgid ""
"Return an :term:`asynchronous iterator` for an :term:`asynchronous "
"iterable`. Equivalent to calling ``x.__aiter__()``."
msgstr ""
"Returnerar en :term:`asynkron iterator` för en :term:`asynkron iterabel`. "
"Motsvarar anrop av ``x.__aiter__()``."

msgid "Note: Unlike :func:`iter`, :func:`aiter` has no 2-argument variant."
msgstr ""
"Notera: Till skillnad från :func:`iter` har :func:`aiter` ingen variant med "
"2 argument."

msgid ""
"Return ``True`` if all elements of the *iterable* are true (or if the "
"iterable is empty).  Equivalent to::"
msgstr ""
"Returnerar ``True`` om alla element i *iterabeln* är sanna (eller om "
"iterabeln är tom).  Likvärdig med::"

msgid ""
"def all(iterable):\n"
"    for element in iterable:\n"
"        if not element:\n"
"            return False\n"
"    return True"
msgstr ""
"def all(iterabel):\n"
"    för element i iterabel:\n"
"        if inte element:\n"
"            returnera False\n"
"    returnera sant"

msgid ""
"When awaited, return the next item from the given :term:`asynchronous "
"iterator`, or *default* if given and the iterator is exhausted."
msgstr ""
"När den är väntad returneras nästa objekt från den angivna :term:`asynkrona "
"iteratorn`, eller *standard* om den är angiven och iteratorn är uttömd."

msgid ""
"This is the async variant of the :func:`next` builtin, and behaves similarly."
msgstr ""
"Detta är den asynkrona varianten av :func:`next`-byggstenen och fungerar på "
"samma sätt."

msgid ""
"This calls the :meth:`~object.__anext__` method of *async_iterator*, "
"returning an :term:`awaitable`. Awaiting this returns the next value of the "
"iterator. If *default* is given, it is returned if the iterator is "
"exhausted, otherwise :exc:`StopAsyncIteration` is raised."
msgstr ""
"Detta anropar :meth:`~object.__anext__`-metoden för *async_iterator* och "
"returnerar en :term:`awaitable`. Awaiting detta returnerar nästa värde i "
"iteratorn. Om *default* anges returneras det om iteratorn är uttömd, annars "
"uppstår :exc:`StopAsyncIteration`."

msgid ""
"Return ``True`` if any element of the *iterable* is true.  If the iterable "
"is empty, return ``False``.  Equivalent to::"
msgstr ""
"Returnerar ``True`` om något element i *iterabeln* är sant.  Om iterabeln är "
"tom returneras ``False``.  Likvärdig med::"

msgid ""
"def any(iterable):\n"
"    for element in iterable:\n"
"        if element:\n"
"            return True\n"
"    return False"
msgstr ""
"def any(iterable):\n"
"    för element i iterabel:\n"
"        if element:\n"
"            returnera True\n"
"    returnera Falskt"

msgid ""
"As :func:`repr`, return a string containing a printable representation of an "
"object, but escape the non-ASCII characters in the string returned by :func:"
"`repr` using ``\\x``, ``\\u``, or ``\\U`` escapes.  This generates a string "
"similar to that returned by :func:`repr` in Python 2."
msgstr ""
"Som :func:`repr`, returnera en sträng som innehåller en utskrivbar "
"representation av ett objekt, men escape icke-ASCII-tecken i strängen som "
"returneras av :func:`repr` med hjälp av ``\\x``, ``\\u`` eller ``U\\`` "
"escapes.  Detta genererar en sträng som liknar den som returneras av :func:"
"`repr` i Python 2."

msgid ""
"Convert an integer number to a binary string prefixed with \"0b\". The "
"result is a valid Python expression. If *x* is not a Python :class:`int` "
"object, it has to define an :meth:`~object.__index__` method that returns an "
"integer. Some examples:"
msgstr ""
"Konverterar ett heltal till en binär sträng med prefixet \"0b\". Resultatet "
"är ett giltigt Python-uttryck. Om *x* inte är ett Python :class:`int`-objekt "
"måste det definiera en :meth:`~object.__index__`-metod som returnerar ett "
"heltal. Några exempel:"

msgid ""
"If the prefix \"0b\" is desired or not, you can use either of the following "
"ways."
msgstr ""
"Om prefixet \"0b\" önskas eller inte, kan du använda något av följande sätt."

msgid "See also :func:`format` for more information."
msgstr "Se även :func:`format` för mer information."

msgid ""
"Return a Boolean value, i.e. one of ``True`` or ``False``.  The argument is "
"converted using the standard :ref:`truth testing procedure <truth>`. If the "
"argument is false or omitted, this returns ``False``; otherwise, it returns "
"``True``.  The :class:`bool` class is a subclass of :class:`int` (see :ref:"
"`typesnumeric`). It cannot be subclassed further.  Its only instances are "
"``False`` and ``True`` (see :ref:`typebool`)."
msgstr ""
"Returnerar ett booleanskt värde, dvs. ett av ``True`` eller ``False``.  "
"Argumentet konverteras med hjälp av standard :ref:``truth testing procedure "
"<truth>``. Om argumentet är falskt eller utelämnat returneras ``False``; "
"annars returneras ``True``.  Klassen :class:`bool` är en underklass till :"
"class:`int` (se :ref:`typesnumeric`). Den kan inte subklassas ytterligare.  "
"Dess enda instanser är ``False`` och ``True`` (se :ref:`typebool`)."

msgid "The parameter is now positional-only."
msgstr "Parametern är nu endast positionsbestämd."

msgid ""
"This function drops you into the debugger at the call site.  Specifically, "
"it calls :func:`sys.breakpointhook`, passing ``args`` and ``kws`` straight "
"through.  By default, ``sys.breakpointhook()`` calls :func:`pdb.set_trace` "
"expecting no arguments.  In this case, it is purely a convenience function "
"so you don't have to explicitly import :mod:`pdb` or type as much code to "
"enter the debugger.  However, :func:`sys.breakpointhook` can be set to some "
"other function and :func:`breakpoint` will automatically call that, allowing "
"you to drop into the debugger of choice. If :func:`sys.breakpointhook` is "
"not accessible, this function will raise :exc:`RuntimeError`."
msgstr ""
"Den här funktionen släpper in dig i felsökaren på anropsplatsen.  Specifikt "
"anropar den :func:`sys.breakpointhook` och skickar ``args`` och ``kws`` rakt "
"igenom.  Som standard anropar ``sys.breakpointhook()`` :func:`pdb.set_trace` "
"och förväntar sig inga argument.  I det här fallet är det en ren "
"bekvämlighetsfunktion så att du inte uttryckligen behöver importera :mod:"
"`pdb` eller skriva så mycket kod för att komma in i felsökaren.  Men :func:"
"`sys.breakpointhook` kan sättas till någon annan funktion och :func:"
"`breakpoint` kommer automatiskt att anropa den, så att du kan hoppa in i den "
"debugger du väljer. Om :func:`sys.breakpointhook` inte är tillgänglig kommer "
"denna funktion att ge upphov till :exc:`RuntimeError`."

msgid ""
"By default, the behavior of :func:`breakpoint` can be changed with the :"
"envvar:`PYTHONBREAKPOINT` environment variable. See :func:`sys."
"breakpointhook` for usage details."
msgstr ""
"Som standard kan beteendet hos :func:`breakpoint` ändras med miljövariabeln :"
"envvar:`PYTHONBREAKPOINT`. Se :func:`sys.breakpointhook` för "
"användningsdetaljer."

msgid ""
"Note that this is not guaranteed if :func:`sys.breakpointhook` has been "
"replaced."
msgstr ""
"Observera att detta inte är garanterat om :func:`sys.breakpointhook` har "
"ersatts."

msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.breakpoint`` with "
"argument ``breakpointhook``."
msgstr ""
"Utlöser en :ref:``auditing event <auditing>` ``builtins.breakpoint`` med "
"argumentet ``breakpointhook``."

msgid ""
"Return a new array of bytes.  The :class:`bytearray` class is a mutable "
"sequence of integers in the range 0 <= x < 256.  It has most of the usual "
"methods of mutable sequences, described in :ref:`typesseq-mutable`, as well "
"as most methods that the :class:`bytes` type has, see :ref:`bytes-methods`."
msgstr ""
"Returnerar en ny array av bytes.  Klassen :class:`bytearray` är en "
"föränderlig sekvens av heltal i intervallet 0 <= x < 256.  Den har de flesta "
"av de vanliga metoderna för muterbara sekvenser, beskrivna i :ref:`typesseq-"
"mutable`, samt de flesta metoder som typen :class:`bytes` har, se :ref:"
"`bytes-methods`."

msgid ""
"The optional *source* parameter can be used to initialize the array in a few "
"different ways:"
msgstr ""
"Den valfria parametern *source* kan användas för att initiera matrisen på "
"några olika sätt:"

msgid ""
"If it is a *string*, you must also give the *encoding* (and optionally, "
"*errors*) parameters; :func:`bytearray` then converts the string to bytes "
"using :meth:`str.encode`."
msgstr ""
"Om det är en *sträng* måste du också ange parametrarna *encoding* (och "
"eventuellt *errors*); :func:`bytearray` konverterar sedan strängen till "
"bytes med :meth:`str.encode`."

msgid ""
"If it is an *integer*, the array will have that size and will be initialized "
"with null bytes."
msgstr ""
"Om det är ett *integer* kommer arrayen att ha den storleken och "
"initialiseras med null-bytes."

msgid ""
"If it is an object conforming to the :ref:`buffer interface "
"<bufferobjects>`, a read-only buffer of the object will be used to "
"initialize the bytes array."
msgstr ""
"Om det är ett objekt som överensstämmer med :ref:`buffer interface "
"<bufferobjects>`, kommer en skrivskyddad buffert av objektet att användas "
"för att initiera bytesmatrisen."

msgid ""
"If it is an *iterable*, it must be an iterable of integers in the range ``0 "
"<= x < 256``, which are used as the initial contents of the array."
msgstr ""
"Om det är en *iterabel* måste det vara en iterabel av heltal i intervallet "
"``0 <= x < 256``, som används som det ursprungliga innehållet i matrisen."

msgid "Without an argument, an array of size 0 is created."
msgstr "Utan argument skapas en array av storleken 0."

msgid "See also :ref:`binaryseq` and :ref:`typebytearray`."
msgstr "Se även :ref:`binaryseq` och :ref:`typebytearray`."

msgid ""
"Return a new \"bytes\" object which is an immutable sequence of integers in "
"the range ``0 <= x < 256``.  :class:`bytes` is an immutable version of :"
"class:`bytearray` -- it has the same non-mutating methods and the same "
"indexing and slicing behavior."
msgstr ""
"Returnerar ett nytt \"bytes\"-objekt som är en oföränderlig sekvens av "
"heltal i intervallet ``0 <= x < 256``. :class:`bytes` är en oföränderlig "
"version av :class:`bytearray` -- den har samma icke-muterande metoder och "
"samma indexerings- och skivningsbeteende."

msgid ""
"Accordingly, constructor arguments are interpreted as for :func:`bytearray`."
msgstr "Följaktligen tolkas konstruktörsargument som för :func:`bytearray`."

msgid "Bytes objects can also be created with literals, see :ref:`strings`."
msgstr "Bytesobjekt kan också skapas med literaler, se :ref:`strings`."

msgid "See also :ref:`binaryseq`, :ref:`typebytes`, and :ref:`bytes-methods`."
msgstr "Se även :ref:`binaryseq`, :ref:`typebytes` och :ref:`bytes-methods`."

msgid ""
"Return :const:`True` if the *object* argument appears callable, :const:"
"`False` if not.  If this returns ``True``, it is still possible that a call "
"fails, but if it is ``False``, calling *object* will never succeed. Note "
"that classes are callable (calling a class returns a new instance); "
"instances are callable if their class has a :meth:`~object.__call__` method."
msgstr ""
"Returnerar :const:`True` om argumentet *object* verkar anropbart, :const:"
"`False` om inte.  Om detta returnerar ``True`` är det fortfarande möjligt "
"att ett anrop misslyckas, men om det är ``False`` kommer anropet av *object* "
"aldrig att lyckas. Observera att klasser är anropsbara (anrop av en klass "
"returnerar en ny instans); instanser är anropsbara om deras klass har en :"
"meth:`~object.__call__`-metod."

msgid ""
"This function was first removed in Python 3.0 and then brought back in "
"Python 3.2."
msgstr ""
"Denna funktion togs först bort i Python 3.0 och återinfördes sedan i Python "
"3.2."

msgid ""
"Return the string representing a character whose Unicode code point is the "
"integer *i*.  For example, ``chr(97)`` returns the string ``'a'``, while "
"``chr(8364)`` returns the string ``'€'``. This is the inverse of :func:`ord`."
msgstr ""
"Returnerar den sträng som representerar ett tecken vars Unicode-kodpunkt är "
"heltalet *i*.  Till exempel returnerar ``chr(97)`` strängen ``'a'``, medan "
"``chr(8364)`` returnerar strängen ``'€'``. Detta är inversen av :func:`ord`."

msgid ""
"The valid range for the argument is from 0 through 1,114,111 (0x10FFFF in "
"base 16).  :exc:`ValueError` will be raised if *i* is outside that range."
msgstr ""
"Det giltiga intervallet för argumentet är från 0 till 1,114,111 (0x10FFFF i "
"bas 16).  :exc:`ValueError` kommer att uppstå om *i* är utanför detta "
"intervall."

msgid "Transform a method into a class method."
msgstr "Omvandla en metod till en klassmetod."

msgid ""
"A class method receives the class as an implicit first argument, just like "
"an instance method receives the instance. To declare a class method, use "
"this idiom::"
msgstr ""
"En klassmetod tar emot klassen som ett implicit första argument, precis som "
"en instansmetod tar emot instansen. För att deklarera en klassmetod använder "
"du detta idiom::"

msgid ""
"class C:\n"
"    @classmethod\n"
"    def f(cls, arg1, arg2): ..."
msgstr ""
"klass C:\n"
"    @klassmetod\n"
"    def f(cls, arg1, arg2): ..."

msgid ""
"The ``@classmethod`` form is a function :term:`decorator` -- see :ref:"
"`function` for details."
msgstr ""
"Formuläret ``@classmethod`` är en funktion :term:`decorator` -- se :ref:"
"`function` för detaljer."

msgid ""
"A class method can be called either on the class (such as ``C.f()``) or on "
"an instance (such as ``C().f()``).  The instance is ignored except for its "
"class. If a class method is called for a derived class, the derived class "
"object is passed as the implied first argument."
msgstr ""
"En klassmetod kan anropas antingen på klassen (t.ex. ``C.f()``) eller på en "
"instans (t.ex. ``C().f()``).  Instansen ignoreras med undantag för dess "
"klass. Om en klassmetod anropas för en härledd klass, skickas det härledda "
"klassobjektet som det underförstådda första argumentet."

msgid ""
"Class methods are different than C++ or Java static methods. If you want "
"those, see :func:`staticmethod` in this section. For more information on "
"class methods, see :ref:`types`."
msgstr ""
"Klassmetoder är annorlunda än statiska metoder i C++ eller Java. Om du vill "
"ha sådana, se :func:`staticmethod` i detta avsnitt. För mer information om "
"klassmetoder, se :ref:`types`."

msgid ""
"Class methods can now wrap other :term:`descriptors <descriptor>` such as :"
"func:`property`."
msgstr ""
"Klassmetoder kan nu omsluta andra :term:`deskriptorer <descriptor>` såsom :"
"func:`property`."

msgid ""
"Class methods now inherit the method attributes (:attr:`~function."
"__module__`, :attr:`~function.__name__`, :attr:`~function.__qualname__`, :"
"attr:`~function.__doc__` and :attr:`~function.__annotations__`) and have a "
"new ``__wrapped__`` attribute."
msgstr ""
"Klassmetoder ärver nu metodattributen (:attr:`~function.__module__`, :attr:"
"`~function.__name__`, :attr:`~function.__qualname__`, :attr:`~function."
"__doc__` och :attr:`~function.__annotations__`) och har ett nytt attribut "
"``__wrapped__``."

msgid ""
"Class methods can no longer wrap other :term:`descriptors <descriptor>` such "
"as :func:`property`."
msgstr ""
"Klassmetoder kan inte längre omsluta andra :term:`deskriptorer <descriptor>` "
"såsom :func:`property`."

msgid ""
"Compile the *source* into a code or AST object.  Code objects can be "
"executed by :func:`exec` or :func:`eval`.  *source* can either be a normal "
"string, a byte string, or an AST object.  Refer to the :mod:`ast` module "
"documentation for information on how to work with AST objects."
msgstr ""
"Kompilera *källan* till ett kod- eller AST-objekt.  Kodobjekt kan exekveras "
"med :func:`exec` eller :func:`eval`.  *source* kan antingen vara en normal "
"sträng, en byte-sträng eller ett AST-objekt.  Se dokumentationen för "
"modulen :mod:`ast` för information om hur du arbetar med AST-objekt."

msgid ""
"The *filename* argument should give the file from which the code was read; "
"pass some recognizable value if it wasn't read from a file (``'<string>'`` "
"is commonly used)."
msgstr ""
"Argumentet *filnamn* ska ange den fil som koden lästes från; skicka något "
"igenkännbart värde om den inte lästes från en fil (``'<string>'`` används "
"ofta)."

msgid ""
"The *mode* argument specifies what kind of code must be compiled; it can be "
"``'exec'`` if *source* consists of a sequence of statements, ``'eval'`` if "
"it consists of a single expression, or ``'single'`` if it consists of a "
"single interactive statement (in the latter case, expression statements that "
"evaluate to something other than ``None`` will be printed)."
msgstr ""
"Argumentet *mode* anger vilken typ av kod som ska kompileras; det kan vara "
"``'exec'`` om *källan* består av en sekvens av satser, ``'eval'`` om den "
"består av ett enda uttryck, eller ``'single'`` om den består av en enda "
"interaktiv sats (i det senare fallet skrivs satser som utvärderas till något "
"annat än ``None`` ut)."

msgid ""
"The optional arguments *flags* and *dont_inherit* control which :ref:"
"`compiler options <ast-compiler-flags>` should be activated and which :ref:"
"`future features <future>` should be allowed. If neither is present (or both "
"are zero) the code is compiled with the same flags that affect the code that "
"is calling :func:`compile`. If the *flags* argument is given and "
"*dont_inherit* is not (or is zero) then the compiler options and the future "
"statements specified by the *flags* argument are used in addition to those "
"that would be used anyway. If *dont_inherit* is a non-zero integer then the "
"*flags* argument is it -- the flags (future features and compiler options) "
"in the surrounding code are ignored."
msgstr ""
"De valfria argumenten *flags* och *dont_inherit* styr vilka :ref:`compiler "
"options <ast-compiler-flags>` som ska aktiveras och vilka :ref:`future "
"features <future>` som ska tillåtas. Om ingen av dessa är närvarande (eller "
"om båda är noll) kompileras koden med samma flaggor som påverkar koden som "
"anropar :func:`compile`. Om argumentet *flags* anges och *dont_inherit* inte "
"anges (eller är noll) används de kompilatoralternativ och framtida "
"uttalanden som anges i argumentet *flags* utöver de som ändå skulle ha "
"använts. Om *dont_inherit* är ett heltal som inte är noll så är *flags*-"
"argumentet det - flaggorna (framtida funktioner och kompilatoralternativ) i "
"den omgivande koden ignoreras."

msgid ""
"Compiler options and future statements are specified by bits which can be "
"bitwise ORed together to specify multiple options. The bitfield required to "
"specify a given future feature can be found as the :attr:`~__future__."
"_Feature.compiler_flag` attribute on the :class:`~__future__._Feature` "
"instance in the :mod:`__future__` module. :ref:`Compiler flags <ast-compiler-"
"flags>` can be found in :mod:`ast` module, with ``PyCF_`` prefix."
msgstr ""
"Kompilatoralternativ och framtidssatser specificeras av bitar som kan "
"kombineras bitvis för att specificera flera alternativ. Bitfältet som krävs "
"för att specificera en given framtida funktion kan hittas som attributet :"
"attr:`~__future__._Feature.compiler_flag` på :class:`~__future__._Feature` "
"instansen i :mod:`__future__` modulen. :ref:`Compiler flags <ast-compiler-"
"flags>` kan hittas i :mod:`ast` modulen, med ``PyCF_`` prefix."

msgid ""
"The argument *optimize* specifies the optimization level of the compiler; "
"the default value of ``-1`` selects the optimization level of the "
"interpreter as given by :option:`-O` options.  Explicit levels are ``0`` (no "
"optimization; ``__debug__`` is true), ``1`` (asserts are removed, "
"``__debug__`` is false) or ``2`` (docstrings are removed too)."
msgstr ""
"Argumentet *optimize* anger kompilatorns optimeringsnivå; standardvärdet "
"``-1`` väljer tolkens optimeringsnivå som anges i :option:`-O`-"
"alternativen.  Explicita nivåer är ``0`` (ingen optimering; ``__debug__`` är "
"sant), ``1`` (asserts tas bort, ``__debug__`` är falskt) eller ``2`` "
"(docstrings tas också bort)."

msgid ""
"This function raises :exc:`SyntaxError` if the compiled source is invalid, "
"and :exc:`ValueError` if the source contains null bytes."
msgstr ""
"Denna funktion ger upphov till :exc:`SyntaxError` om den kompilerade källan "
"är ogiltig, och :exc:`ValueError` om källan innehåller null bytes."

msgid ""
"If you want to parse Python code into its AST representation, see :func:`ast."
"parse`."
msgstr ""
"Om du vill analysera Python-kod till dess AST-representation, se :func:`ast."
"parse`."

msgid ""
"Raises an :ref:`auditing event <auditing>` ``compile`` with arguments "
"``source`` and ``filename``. This event may also be raised by implicit "
"compilation."
msgstr ""
"Utlöser en :ref:`auditing-händelse <auditing>` ``compile`` med argumenten "
"``källa`` och ``filnamn``. Denna händelse kan också utlösas av implicit "
"kompilering."

msgid ""
"When compiling a string with multi-line code in ``'single'`` or ``'eval'`` "
"mode, input must be terminated by at least one newline character.  This is "
"to facilitate detection of incomplete and complete statements in the :mod:"
"`code` module."
msgstr ""
"När en sträng med flerradig kod kompileras i läget ``'single'`` eller "
"``'eval'`` måste inmatningen avslutas med minst ett tecken för ny rad.  "
"Detta för att underlätta upptäckten av ofullständiga och fullständiga satser "
"i modulen :mod:`code`."

msgid ""
"It is possible to crash the Python interpreter with a sufficiently large/"
"complex string when compiling to an AST object due to stack depth "
"limitations in Python's AST compiler."
msgstr ""
"Det är möjligt att krascha Python-tolken med en tillräckligt stor/komplex "
"sträng när den kompileras till ett AST-objekt på grund av begränsningar i "
"stackdjupet i Pythons AST-kompilator."

msgid ""
"Allowed use of Windows and Mac newlines.  Also, input in ``'exec'`` mode "
"does not have to end in a newline anymore.  Added the *optimize* parameter."
msgstr ""
"Tillåtet att använda Windows och Mac newlines.  Dessutom behöver inmatning i "
"``'exec'``-läge inte längre avslutas med en ny rad.  Parametern *optimize* "
"har lagts till."

msgid ""
"Previously, :exc:`TypeError` was raised when null bytes were encountered in "
"*source*."
msgstr ""
"Tidigare skapades :exc:`TypeError` när null bytes påträffades i *source*."

msgid ""
"``ast.PyCF_ALLOW_TOP_LEVEL_AWAIT`` can now be passed in flags to enable "
"support for top-level ``await``, ``async for``, and ``async with``."
msgstr ""
"``ast.PyCF_ALLOW_TOP_LEVEL_AWAIT`` kan nu skickas i flaggor för att aktivera "
"stöd för toppnivå ``await``, ``async for`` och ``async with``."

msgid ""
"Convert a single string or number to a complex number, or create a complex "
"number from real and imaginary parts."
msgstr ""
"Konvertera en enskild sträng eller ett tal till ett komplext tal, eller "
"skapa ett komplext tal från reella och imaginära delar."

msgid "Examples:"
msgstr "Exempel:"

msgid ""
">>> complex('+1.23')\n"
"(1.23+0j)\n"
">>> complex('-4.5j')\n"
"-4.5j\n"
">>> complex('-1.23+4.5j')\n"
"(-1.23+4.5j)\n"
">>> complex('\\t( -1.23+4.5J )\\n')\n"
"(-1.23+4.5j)\n"
">>> complex('-Infinity+NaNj')\n"
"(-inf+nanj)\n"
">>> complex(1.23)\n"
"(1.23+0j)\n"
">>> complex(imag=-4.5)\n"
"-4.5j\n"
">>> complex(-1.23, 4.5)\n"
"(-1.23+4.5j)"
msgstr ""
">>> komplex('+1.23')\n"
"(1.23+0j)\n"
">>> komplex('-4,5j')\n"
"-4.5j\n"
">>> komplex('-1,23+4,5j')\n"
"(-1.23+4.5j)\n"
">>> komplex('\\t( -1,23+4,5J )\\n')\n"
"(-1.23+4.5j)\n"
">>> komplex('-Infinity+NaNj')\n"
"(-inf+nanj)\n"
">>> komplex(1,23)\n"
"(1.23+0j)\n"
">>> komplex(imag=-4,5)\n"
"-4.5j\n"
">>> komplex(-1,23, 4,5)\n"
"(-1.23+4.5j)"

msgid ""
"If the argument is a string, it must contain either a real part (in the same "
"format as for :func:`float`) or an imaginary part (in the same format but "
"with a ``'j'`` or ``'J'`` suffix), or both real and imaginary parts (the "
"sign of the imaginary part is mandatory in this case). The string can "
"optionally be surrounded by whitespaces and the round parentheses ``'('`` "
"and ``')'``, which are ignored. The string must not contain whitespace "
"between ``'+'``, ``'-'``, the ``'j'`` or ``'J'`` suffix, and the decimal "
"number. For example, ``complex('1+2j')`` is fine, but ``complex('1 + 2j')`` "
"raises :exc:`ValueError`. More precisely, the input must conform to the :"
"token:`~float:complexvalue` production rule in the following grammar, after "
"parentheses and leading and trailing whitespace characters are removed:"
msgstr ""
"Om argumentet är en sträng måste den innehålla antingen en reell del (i "
"samma format som för :func:`float`) eller en imaginär del (i samma format "
"men med suffixet ``'j'`` eller ``'J'``), eller både en reell del och en "
"imaginär del (tecknet för den imaginära delen är obligatoriskt i detta "
"fall). Strängen kan eventuellt omges av blanksteg och de runda parenteserna "
"``'('`` och ``')'``, som ignoreras. Strängen får inte innehålla blanksteg "
"mellan ``'+'``, ``'-'``, suffixet ``'j'`` eller ``'J'`` och decimaltalet. "
"Till exempel, ``komplex('1+2j')`` är bra, men ``komplex('1 + 2j')`` ger "
"upphov till :exc:`ValueError`. Mer exakt måste indata överensstämma med "
"produktionsregeln :token:`~float:complexvalue` i följande grammatik, efter "
"att parenteser och inledande och avslutande blankstegstecken har tagits bort:"

msgid ""
"If the argument is a number, the constructor serves as a numeric conversion "
"like :class:`int` and :class:`float`. For a general Python object ``x``, "
"``complex(x)`` delegates to ``x.__complex__()``. If :meth:`~object."
"__complex__` is not defined then it falls back to :meth:`~object.__float__`. "
"If :meth:`!__float__` is not defined then it falls back to :meth:`~object."
"__index__`."
msgstr ""
"Om argumentet är ett tal fungerar konstruktorn som en numerisk konvertering "
"som :class:`int` och :class:`float`. För ett allmänt Python-objekt ``x`` "
"delegerar ``complex(x)`` till ``x.__complex__()``. Om :meth:`~object."
"__complex__` inte är definierad faller den tillbaka till :meth:`~object."
"__float__`. Om :meth:`!__float__` inte är definierat faller det tillbaka "
"till :meth:`~object.__index__`."

msgid ""
"If two arguments are provided or keyword arguments are used, each argument "
"may be any numeric type (including complex). If both arguments are real "
"numbers, return a complex number with the real component *real* and the "
"imaginary component *imag*. If both arguments are complex numbers, return a "
"complex number with the real component ``real.real-imag.imag`` and the "
"imaginary component ``real.imag+imag.real``. If one of arguments is a real "
"number, only its real component is used in the above expressions."
msgstr ""
"Om två argument anges eller om nyckelordsargument används kan varje argument "
"vara vilken numerisk typ som helst (inklusive komplex). Om båda argumenten "
"är reella tal, returneras ett komplext tal med den reella komponenten *real* "
"och den imaginära komponenten *imag*. Om båda argumenten är komplexa tal "
"returneras ett komplext tal med den reella komponenten ``real.real-imag."
"imag`` och den imaginära komponenten ``real.imag+imag.real``. Om ett av "
"argumenten är ett reellt tal används endast dess reella komponent i "
"ovanstående uttryck."

msgid ""
"See also :meth:`complex.from_number` which only accepts a single numeric "
"argument."
msgstr ""
"Se även :meth:`complex.from_number` som bara accepterar ett enda numeriskt "
"argument."

msgid "If all arguments are omitted, returns ``0j``."
msgstr "Om alla argument utelämnas returneras ``0j``."

msgid "The complex type is described in :ref:`typesnumeric`."
msgstr "Den komplexa typen beskrivs i :ref:`typesnumeric`."

msgid "Grouping digits with underscores as in code literals is allowed."
msgstr ""
"Det är tillåtet att gruppera siffror med understrykningstecken som i "
"kodbokstäver."

msgid ""
"Falls back to :meth:`~object.__index__` if :meth:`~object.__complex__` and :"
"meth:`~object.__float__` are not defined."
msgstr ""
"Faller tillbaka till :meth:`~object.__index__` om :meth:`~object."
"__complex__` och :meth:`~object.__float__` inte är definierade."

msgid ""
"Passing a complex number as the *real* or *imag* argument is now deprecated; "
"it should only be passed as a single positional argument."
msgstr ""
"Att skicka ett komplext tal som *real*- eller *imag*-argument är nu "
"föråldrat; det ska bara skickas som ett enda positionellt argument."

msgid ""
"This is a relative of :func:`setattr`.  The arguments are an object and a "
"string.  The string must be the name of one of the object's attributes.  The "
"function deletes the named attribute, provided the object allows it.  For "
"example, ``delattr(x, 'foobar')`` is equivalent to ``del x.foobar``. *name* "
"need not be a Python identifier (see :func:`setattr`)."
msgstr ""
"Detta är en relativ av :func:`setattr`.  Argumenten är ett objekt och en "
"sträng.  Strängen måste vara namnet på ett av objektets attribut.  "
"Funktionen raderar det namngivna attributet, förutsatt att objektet tillåter "
"det.  Till exempel, ``delattr(x, 'foobar')`` är likvärdigt med ``del x."
"foobar``. *name* behöver inte vara en Python-identifierare (se :func:"
"`setattr`)."

msgid ""
"Create a new dictionary.  The :class:`dict` object is the dictionary class. "
"See :class:`dict` and :ref:`typesmapping` for documentation about this class."
msgstr ""
"Skapa en ny ordbok.  Objektet :class:`dict` är klassen för ordboken. Se :"
"class:`dict` och :ref:`typesmapping` för dokumentation om denna klass."

msgid ""
"For other containers see the built-in :class:`list`, :class:`set`, and :"
"class:`tuple` classes, as well as the :mod:`collections` module."
msgstr ""
"För andra behållare se de inbyggda klasserna :class:`list`, :class:`set` "
"och :class:`tuple` samt modulen :mod:`collections`."

msgid ""
"Without arguments, return the list of names in the current local scope.  "
"With an argument, attempt to return a list of valid attributes for that "
"object."
msgstr ""
"Utan argument returneras listan med namn i det aktuella lokala omfånget.  "
"Med ett argument, försök att returnera en lista över giltiga attribut för "
"det objektet."

msgid ""
"If the object has a method named :meth:`~object.__dir__`, this method will "
"be called and must return the list of attributes. This allows objects that "
"implement a custom :func:`~object.__getattr__` or :func:`~object."
"__getattribute__` function to customize the way :func:`dir` reports their "
"attributes."
msgstr ""
"Om objektet har en metod som heter :meth:`~object.__dir__`, kommer denna "
"metod att anropas och måste returnera listan med attribut. Detta gör att "
"objekt som implementerar en egen :func:`~object.__getattr__` eller :func:"
"`~object.__getattribute__` funktion kan anpassa hur :func:`dir` rapporterar "
"deras attribut."

msgid ""
"If the object does not provide :meth:`~object.__dir__`, the function tries "
"its best to gather information from the object's :attr:`~object.__dict__` "
"attribute, if defined, and from its type object.  The resulting list is not "
"necessarily complete and may be inaccurate when the object has a custom :"
"func:`~object.__getattr__`."
msgstr ""
"Om objektet inte tillhandahåller :meth:`~object.__dir__` försöker funktionen "
"göra sitt bästa för att samla in information från objektets :attr:`~object."
"__dict__`-attribut, om det är definierat, och från dess typobjekt.  Den "
"resulterande listan är inte nödvändigtvis fullständig och kan vara felaktig "
"om objektet har en anpassad :func:`~object.__getattr__`."

msgid ""
"The default :func:`dir` mechanism behaves differently with different types "
"of objects, as it attempts to produce the most relevant, rather than "
"complete, information:"
msgstr ""
"Standardmekanismen :func:`dir` beter sig olika med olika typer av objekt, "
"eftersom den försöker ta fram den mest relevanta informationen snarare än "
"fullständig information:"

msgid ""
"If the object is a module object, the list contains the names of the "
"module's attributes."
msgstr ""
"Om objektet är ett modulobjekt innehåller listan namnen på modulens attribut."

msgid ""
"If the object is a type or class object, the list contains the names of its "
"attributes, and recursively of the attributes of its bases."
msgstr ""
"Om objektet är ett typ- eller klassobjekt innehåller listan namnen på dess "
"attribut och rekursivt på attributen för dess baser."

msgid ""
"Otherwise, the list contains the object's attributes' names, the names of "
"its class's attributes, and recursively of the attributes of its class's "
"base classes."
msgstr ""
"Annars innehåller listan namnen på objektets attribut, namnen på klassens "
"attribut och rekursivt på attributen för klassens basklasser."

msgid "The resulting list is sorted alphabetically.  For example:"
msgstr ""
"Den resulterande listan är sorterad i alfabetisk ordning.  Till exempel"

msgid ""
"Because :func:`dir` is supplied primarily as a convenience for use at an "
"interactive prompt, it tries to supply an interesting set of names more than "
"it tries to supply a rigorously or consistently defined set of names, and "
"its detailed behavior may change across releases.  For example, metaclass "
"attributes are not in the result list when the argument is a class."
msgstr ""
"Eftersom :func:`dir` främst tillhandahålls som en bekvämlighet för "
"användning vid en interaktiv prompt, försöker den tillhandahålla en "
"intressant uppsättning namn mer än den försöker tillhandahålla en rigoröst "
"eller konsekvent definierad uppsättning namn, och dess detaljerade beteende "
"kan ändras mellan olika versioner.  Metaklassattribut finns t.ex. inte med i "
"resultatlistan när argumentet är en klass."

msgid ""
"Take two (non-complex) numbers as arguments and return a pair of numbers "
"consisting of their quotient and remainder when using integer division.  "
"With mixed operand types, the rules for binary arithmetic operators apply.  "
"For integers, the result is the same as ``(a // b, a % b)``. For floating-"
"point numbers the result is ``(q, a % b)``, where *q* is usually ``math."
"floor(a / b)`` but may be 1 less than that.  In any case ``q * b + a % b`` "
"is very close to *a*, if ``a % b`` is non-zero it has the same sign as *b*, "
"and ``0 <= abs(a % b) < abs(b)``."
msgstr ""
"Tar två (icke-komplexa) tal som argument och returnerar ett talpar som "
"består av deras kvot och rest vid användning av heltalsdivision.  Med "
"blandade operandtyper gäller reglerna för binära aritmetiska operatorer.  "
"För heltal är resultatet detsamma som ``(a // b, a % b)``. För flyttal är "
"resultatet ``(q, a % b)``, där *q* vanligtvis är ``math.floor(a / b)`` men "
"kan vara 1 mindre än så.  I vilket fall som helst är ``q * b + a % b`` "
"mycket nära *a*, om ``a % b`` inte är noll har det samma tecken som *b*, och "
"``0 <= abs(a % b) < abs(b)``."

msgid ""
"Return an enumerate object. *iterable* must be a sequence, an :term:"
"`iterator`, or some other object which supports iteration. The :meth:"
"`~iterator.__next__` method of the iterator returned by :func:`enumerate` "
"returns a tuple containing a count (from *start* which defaults to 0) and "
"the values obtained from iterating over *iterable*."
msgstr ""
"Returnerar ett uppräkningsobjekt. *iterable* måste vara en sekvens, en :term:"
"`iterator`, eller något annat objekt som stöder iteration. Metoden :meth:"
"`~iterator.__next__` för den iterator som returneras av :func:`enumerate` "
"returnerar en tupel som innehåller ett antal (från *start* som standard är "
"0) och de värden som erhålls genom att iterera över *iterable*."

msgid "Equivalent to::"
msgstr "Motsvarar::"

msgid ""
"def enumerate(iterable, start=0):\n"
"    n = start\n"
"    for elem in iterable:\n"
"        yield n, elem\n"
"        n += 1"
msgstr ""
"def enumerate(iterabel, start=0):\n"
"    n = start\n"
"    för elem i iterabel:\n"
"        avkastning n, elem\n"
"        n += 1"

msgid "Parameters"
msgstr "Parametrar"

msgid "A Python expression."
msgstr "Ett Python-uttryck."

msgid "The global namespace (default: ``None``)."
msgstr "Den globala namnrymden (standard: ``None``)."

msgid "The local namespace (default: ``None``)."
msgstr "Den lokala namnrymden (standard: ``None``)."

msgid "Returns"
msgstr "Returer"

msgid "The result of the evaluated expression."
msgstr "Resultatet av det utvärderade uttrycket."

msgid "raises"
msgstr "höjer"

msgid "Syntax errors are reported as exceptions."
msgstr "Syntaxfel rapporteras som undantag."

msgid ""
"This function executes arbitrary code. Calling it with user-supplied input "
"may lead to security vulnerabilities."
msgstr ""
"Denna funktion exekverar godtycklig kod. Om den anropas med indata från "
"användaren kan det leda till säkerhetsproblem."

msgid ""
"The *expression* argument is parsed and evaluated as a Python expression "
"(technically speaking, a condition list) using the *globals* and *locals* "
"mappings as global and local namespace.  If the *globals* dictionary is "
"present and does not contain a value for the key ``__builtins__``, a "
"reference to the dictionary of the built-in module :mod:`builtins` is "
"inserted under that key before *expression* is parsed.  That way you can "
"control what builtins are available to the executed code by inserting your "
"own ``__builtins__`` dictionary into *globals* before passing it to :func:"
"`eval`.  If the *locals* mapping is omitted it defaults to the *globals* "
"dictionary.  If both mappings are omitted, the expression is executed with "
"the *globals* and *locals* in the environment where :func:`eval` is called.  "
"Note, *eval()* will only have access to the :term:`nested scopes <nested "
"scope>` (non-locals) in the enclosing environment if they are already "
"referenced in the scope that is calling :func:`eval` (e.g. via a :keyword:"
"`nonlocal` statement)."
msgstr ""
"Argumentet *expression* analyseras och utvärderas som ett Python-uttryck "
"(tekniskt sett en villkorslista) med hjälp av mappningarna *globals* och "
"*locals* som globala och lokala namnrymder.  Om ordlistan *globals* finns "
"och inte innehåller ett värde för nyckeln ``__builtins__``, infogas en "
"referens till ordlistan för den inbyggda modulen :mod:`builtins` under den "
"nyckeln innan *expression* analyseras.  På så sätt kan du kontrollera vilka "
"inbyggda moduler som är tillgängliga för den exekverade koden genom att "
"infoga din egen ``__builtins__``-ordbok i *globals* innan du skickar den "
"till :func:`eval`.  Om *locals*-mappningen utelämnas används *globals*-"
"ordlistan som standard.  Om båda mappningarna utelämnas, exekveras uttrycket "
"med *globals* och *locals* i den miljö där :func:`eval` anropas.  Observera "
"att *eval()* endast kommer att ha tillgång till :term:` `nested scopes "
"<nested scope>` (non-locals) i den omgivande miljön om de redan är "
"refererade i det scope som anropar :func:`eval` (t.ex. via en :keyword:"
"`nonlocal`-sats)."

msgid "Example:"
msgstr "Exempel:"

msgid ""
"This function can also be used to execute arbitrary code objects (such as "
"those created by :func:`compile`).  In this case, pass a code object instead "
"of a string.  If the code object has been compiled with ``'exec'`` as the "
"*mode* argument, :func:`eval`\\'s return value will be ``None``."
msgstr ""
"Denna funktion kan också användas för att exekvera godtyckliga kodobjekt (t."
"ex. de som skapats av :func:`compile`).  I detta fall ska du skicka ett "
"kodobjekt i stället för en sträng.  Om kodobjektet har kompilerats med "
"``'exec`` som *mode*-argument, kommer :func:`eval``:s returvärde att vara "
"``None``."

msgid ""
"Hints: dynamic execution of statements is supported by the :func:`exec` "
"function.  The :func:`globals` and :func:`locals` functions return the "
"current global and local dictionary, respectively, which may be useful to "
"pass around for use by :func:`eval` or :func:`exec`."
msgstr ""
"Tips: dynamisk exekvering av satser stöds av funktionen :func:`exec`.  "
"Funktionerna :func:`globals` och :func:`locals` returnerar den aktuella "
"globala respektive lokala ordlistan, som kan vara användbar att skicka runt "
"för användning av :func:`eval` eller :func:`exec`."

msgid ""
"If the given source is a string, then leading and trailing spaces and tabs "
"are stripped."
msgstr ""
"Om den angivna källan är en sträng tas inledande och avslutande mellanslag "
"och tabbar bort."

msgid ""
"See :func:`ast.literal_eval` for a function that can safely evaluate strings "
"with expressions containing only literals."
msgstr ""
"Se :func:`ast.literal_eval` för en funktion som på ett säkert sätt kan "
"utvärdera strängar med uttryck som bara innehåller bokstavstecken."

msgid ""
"Raises an :ref:`auditing event <auditing>` ``exec`` with the code object as "
"the argument. Code compilation events may also be raised."
msgstr ""
"Utlöser en :ref:`auditing event <auditing>` ``exec`` med kodobjektet som "
"argument. Händelser för kodkompilering kan också uppstå."

msgid "The *globals* and *locals* arguments can now be passed as keywords."
msgstr "Argumenten *globals* och *locals* kan nu skickas som nyckelord."

msgid ""
"The semantics of the default *locals* namespace have been adjusted as "
"described for the :func:`locals` builtin."
msgstr ""
"Semantiken för standardnamnrymden *locals* har justerats enligt "
"beskrivningen för :func:`locals`-byggstenen."

msgid ""
"This function supports dynamic execution of Python code. *source* must be "
"either a string or a code object.  If it is a string, the string is parsed "
"as a suite of Python statements which is then executed (unless a syntax "
"error occurs). [#]_ If it is a code object, it is simply executed.  In all "
"cases, the code that's executed is expected to be valid as file input (see "
"the section :ref:`file-input` in the Reference Manual). Be aware that the :"
"keyword:`nonlocal`, :keyword:`yield`,  and :keyword:`return` statements may "
"not be used outside of function definitions even within the context of code "
"passed to the :func:`exec` function. The return value is ``None``."
msgstr ""
"Denna funktion stöder dynamisk exekvering av Python-kod. *source* måste vara "
"antingen en sträng eller ett kodobjekt.  Om det är en sträng analyseras "
"strängen som en serie Python-satser som sedan exekveras (om inte ett "
"syntaxfel uppstår). [Om det är ett kodobjekt exekveras det helt enkelt.  I "
"samtliga fall förväntas koden som exekveras vara giltig som filinmatning (se "
"avsnittet :ref:`file-input` i referenshandboken). Tänk på att :keyword:"
"`nonlocal`, :keyword:`yield` och :keyword:`return` inte får användas utanför "
"funktionsdefinitioner, inte ens i samband med kod som skickas till "
"funktionen :func:`exec`. Returvärdet är ``None``."

msgid ""
"In all cases, if the optional parts are omitted, the code is executed in the "
"current scope.  If only *globals* is provided, it must be a dictionary (and "
"not a subclass of dictionary), which will be used for both the global and "
"the local variables.  If *globals* and *locals* are given, they are used for "
"the global and local variables, respectively.  If provided, *locals* can be "
"any mapping object.  Remember that at the module level, globals and locals "
"are the same dictionary."
msgstr ""
"I samtliga fall, om de valfria delarna utelämnas, exekveras koden i det "
"aktuella omfånget.  Om endast *globals* anges måste det vara en dictionary "
"(och inte en subklass av dictionary), som används för både de globala och de "
"lokala variablerna.  Om *globals* och *locals* anges används de för de "
"globala respektive lokala variablerna.  Om *locals* anges kan det vara "
"vilket mappningsobjekt som helst.  Kom ihåg att på modulnivå är globals och "
"locals samma ordbok."

msgid ""
"When ``exec`` gets two separate objects as *globals* and *locals*, the code "
"will be executed as if it were embedded in a class definition. This means "
"functions and classes defined in the executed code will not be able to "
"access variables assigned at the top level (as the \"top level\" variables "
"are treated as class variables in a class definition)."
msgstr ""
"När ``exec`` får två separata objekt som *globals* och *locals* kommer koden "
"att exekveras som om den var inbäddad i en klassdefinition. Detta innebär "
"att funktioner och klasser som definieras i den exekverade koden inte kommer "
"att kunna komma åt variabler som tilldelats på den översta nivån (eftersom "
"variablerna på \"översta nivån\" behandlas som klassvariabler i en "
"klassdefinition)."

msgid ""
"If the *globals* dictionary does not contain a value for the key "
"``__builtins__``, a reference to the dictionary of the built-in module :mod:"
"`builtins` is inserted under that key.  That way you can control what "
"builtins are available to the executed code by inserting your own "
"``__builtins__`` dictionary into *globals* before passing it to :func:`exec`."
msgstr ""
"Om ordlistan *globals* inte innehåller något värde för nyckeln "
"``__builtins__``, läggs en referens till ordlistan för den inbyggda modulen :"
"mod:`builtins` in under den nyckeln.  På så sätt kan du kontrollera vilka "
"inbyggda moduler som är tillgängliga för den exekverade koden genom att "
"infoga din egen ``__builtins__``-ordbok i *globals* innan du skickar den "
"till :func:`exec`."

msgid ""
"The *closure* argument specifies a closure--a tuple of cellvars. It's only "
"valid when the *object* is a code object containing :term:`free (closure) "
"variables <closure variable>`. The length of the tuple must exactly match "
"the length of the code object's :attr:`~codeobject.co_freevars` attribute."
msgstr ""
"Argumentet *closure* anger en closure - en tupel av cellvarianter. Det är "
"endast giltigt när *object* är ett kodobjekt som innehåller :term:`free "
"(closure) variables <closure variable>`. Längden på tupeln måste exakt "
"matcha längden på kodobjektets :attr:`~codeobject.co_freevars`-attribut."

msgid ""
"The built-in functions :func:`globals` and :func:`locals` return the current "
"global and local namespace, respectively, which may be useful to pass around "
"for use as the second and third argument to :func:`exec`."
msgstr ""
"De inbyggda funktionerna :func:`globals` och :func:`locals` returnerar den "
"aktuella globala respektive lokala namnrymden, som kan vara användbar att "
"skicka runt för att användas som det andra och tredje argumentet till :func:"
"`exec`."

msgid ""
"The default *locals* act as described for function :func:`locals` below. "
"Pass an explicit *locals* dictionary if you need to see effects of the code "
"on *locals* after function :func:`exec` returns."
msgstr ""
"Standard *locals* fungerar enligt beskrivningen för funktionen :func:"
"`locals` nedan. Skicka en explicit *locals*-ordbok om du vill se effekterna "
"av koden på *locals* efter att funktionen :func:`exec` har returnerats."

msgid "Added the *closure* parameter."
msgstr "Parametern *closure* har lagts till."

msgid ""
"Construct an iterator from those elements of *iterable* for which *function* "
"is true.  *iterable* may be either a sequence, a container which supports "
"iteration, or an iterator.  If *function* is ``None``, the identity function "
"is assumed, that is, all elements of *iterable* that are false are removed."
msgstr ""
"Konstruera en iterator från de element i *iterable* för vilka *function* är "
"sann.  *iterable* kan vara antingen en sekvens, en behållare som stöder "
"iteration eller en iterator.  Om *function* är ``None`` antas "
"identitetsfunktionen, det vill säga alla element i *iterable* som är falska "
"tas bort."

msgid ""
"Note that ``filter(function, iterable)`` is equivalent to the generator "
"expression ``(item for item in iterable if function(item))`` if function is "
"not ``None`` and ``(item for item in iterable if item)`` if function is "
"``None``."
msgstr ""
"Observera att ``filter(function, iterable)`` är ekvivalent med "
"generatoruttrycket ``(item for item in iterable if function(item))`` om "
"funktionen inte är ``None`` och ``(item for item in iterable if item)`` om "
"funktionen är ``None``."

msgid ""
"See :func:`itertools.filterfalse` for the complementary function that "
"returns elements of *iterable* for which *function* is false."
msgstr ""
"Se :func:`itertools.filterfalse` för den kompletterande funktionen som "
"returnerar element i *iterable* för vilka *function* är false."

msgid "Return a floating-point number constructed from a number or a string."
msgstr "Returnerar ett flyttal konstruerat från ett tal eller en sträng."

msgid ""
">>> float('+1.23')\n"
"1.23\n"
">>> float('   -12345\\n')\n"
"-12345.0\n"
">>> float('1e-003')\n"
"0.001\n"
">>> float('+1E6')\n"
"1000000.0\n"
">>> float('-Infinity')\n"
"-inf"
msgstr ""
">>> float('+1.23')\n"
"1.23\n"
">>> float(' -12345\\n')\n"
"-12345.0\n"
">>> float('1e-003')\n"
"0.001\n"
">>> float('+1E6')\n"
"1000000.0\n"
">>> float('-Infinity')\n"
"-inf"

msgid ""
"If the argument is a string, it should contain a decimal number, optionally "
"preceded by a sign, and optionally embedded in whitespace.  The optional "
"sign may be ``'+'`` or ``'-'``; a ``'+'`` sign has no effect on the value "
"produced.  The argument may also be a string representing a NaN (not-a-"
"number), or positive or negative infinity. More precisely, the input must "
"conform to the :token:`~float:floatvalue` production rule in the following "
"grammar, after leading and trailing whitespace characters are removed:"
msgstr ""
"Om argumentet är en sträng ska den innehålla ett decimaltal, eventuellt "
"föregånget av ett tecken och eventuellt inbäddat i blanksteg.  Det valfria "
"tecknet kan vara ``'+'`` eller ``'-'``; ett ``'+'``-tecken har ingen effekt "
"på det värde som produceras.  Argumentet kan också vara en sträng som "
"representerar ett NaN (not-a-number), eller positiv eller negativ "
"oändlighet. Mer exakt måste indata överensstämma med produktionsregeln :"
"token:`~float:floatvalue` i följande grammatik, efter att inledande och "
"avslutande blankstegstecken har tagits bort:"

msgid ""
"Case is not significant, so, for example, \"inf\", \"Inf\", \"INFINITY\", "
"and \"iNfINity\" are all acceptable spellings for positive infinity."
msgstr ""
"Bokstavering har ingen betydelse, så till exempel \"inf\", \"Inf\", "
"\"INFINITY\" och \"iNfINity\" är alla acceptabla stavningar för positiv "
"oändlighet."

msgid ""
"Otherwise, if the argument is an integer or a floating-point number, a "
"floating-point number with the same value (within Python's floating-point "
"precision) is returned.  If the argument is outside the range of a Python "
"float, an :exc:`OverflowError` will be raised."
msgstr ""
"Annars, om argumentet är ett heltal eller ett flyttal, returneras ett "
"flyttal med samma värde (inom Pythons flyttalsprecision).  Om argumentet "
"ligger utanför intervallet för en Python float, kommer ett :exc:"
"`OverflowError` att uppstå."

msgid ""
"For a general Python object ``x``, ``float(x)`` delegates to ``x."
"__float__()``.  If :meth:`~object.__float__` is not defined then it falls "
"back to :meth:`~object.__index__`."
msgstr ""
"För ett allmänt Python-objekt ``x`` delegerar ``float(x)`` till ``x."
"__float__()``.  Om :meth:`~object.__float__` inte är definierad faller den "
"tillbaka till :meth:`~object.__index__`."

msgid ""
"See also :meth:`float.from_number` which only accepts a numeric argument."
msgstr ""
"Se även :meth:`float.from_number` som endast accepterar ett numeriskt "
"argument."

msgid "If no argument is given, ``0.0`` is returned."
msgstr "Om inget argument anges returneras ``0.0``."

msgid "The float type is described in :ref:`typesnumeric`."
msgstr "Typen float beskrivs i :ref:`typesnumeric`."

msgid ""
"Falls back to :meth:`~object.__index__` if :meth:`~object.__float__` is not "
"defined."
msgstr ""
"Faller tillbaka till :meth:`~object.__index__` om :meth:`~object.__float__` "
"inte är definierad."

msgid ""
"Convert a *value* to a \"formatted\" representation, as controlled by "
"*format_spec*.  The interpretation of *format_spec* will depend on the type "
"of the *value* argument; however, there is a standard formatting syntax that "
"is used by most built-in types: :ref:`formatspec`."
msgstr ""
"Konverterar ett *värde* till en \"formaterad\" representation, som styrs av "
"*format_spec*.  Tolkningen av *format_spec* beror på typen av *value*-"
"argumentet; det finns dock en standardformateringssyntax som används av de "
"flesta inbyggda typer: :ref:`formatspec`."

msgid ""
"The default *format_spec* is an empty string which usually gives the same "
"effect as calling :func:`str(value) <str>`."
msgstr ""
"Standard *format_spec* är en tom sträng, vilket vanligtvis ger samma effekt "
"som att anropa :func:`str(value) <str>`."

msgid ""
"A call to ``format(value, format_spec)`` is translated to ``type(value)."
"__format__(value, format_spec)`` which bypasses the instance dictionary when "
"searching for the value's :meth:`~object.__format__` method. A :exc:"
"`TypeError` exception is raised if the method search reaches :mod:`object` "
"and the *format_spec* is non-empty, or if either the *format_spec* or the "
"return value are not strings."
msgstr ""
"Ett anrop till ``format(värde, format_spec)`` översätts till ``type(värde)."
"__format__(värde, format_spec)`` vilket förbigår instansordboken vid sökning "
"efter värdets :meth:`~object.__format__`-metod. Ett :exc:`TypeError`-"
"undantag uppstår om metodsökningen når :mod:`object` och *format_spec* inte "
"är tom, eller om antingen *format_spec* eller returvärdet inte är strängar."

msgid ""
"``object().__format__(format_spec)`` raises :exc:`TypeError` if "
"*format_spec* is not an empty string."
msgstr ""
"``object().__format__(format_spec)`` ger upphov till :exc:`TypeError` om "
"*format_spec* inte är en tom sträng."

msgid ""
"Return a new :class:`frozenset` object, optionally with elements taken from "
"*iterable*.  ``frozenset`` is a built-in class.  See :class:`frozenset` and :"
"ref:`types-set` for documentation about this class."
msgstr ""
"Returnerar ett nytt :class:`frozenset`-objekt, eventuellt med element "
"hämtade från *iterable*.  ``frozenset`` är en inbyggd klass.  Se :class:"
"`frozenset` och :ref:`types-set` för dokumentation om denna klass."

msgid ""
"For other containers see the built-in :class:`set`, :class:`list`, :class:"
"`tuple`, and :class:`dict` classes, as well as the :mod:`collections` module."
msgstr ""
"För andra behållare se de inbyggda klasserna :class:`set`, :class:`list`, :"
"class:`tuple` och :class:`dict`, samt modulen :mod:`collections`."

msgid ""
"Return the value of the named attribute of *object*.  *name* must be a "
"string. If the string is the name of one of the object's attributes, the "
"result is the value of that attribute.  For example, ``getattr(x, "
"'foobar')`` is equivalent to ``x.foobar``.  If the named attribute does not "
"exist, *default* is returned if provided, otherwise :exc:`AttributeError` is "
"raised. *name* need not be a Python identifier (see :func:`setattr`)."
msgstr ""
"Returnerar värdet för det namngivna attributet för *objekt*.  *name* måste "
"vara en sträng. Om strängen är namnet på ett av objektets attribut, blir "
"resultatet värdet på det attributet.  Till exempel motsvarar ``getattr(x, "
"'foobar')`` ``x.foobar``.  Om det namngivna attributet inte finns, "
"returneras *default* om det anges, annars :exc:`AttributeError`. *name* "
"behöver inte vara en Python-identifierare (se :func:`setattr`)."

msgid ""
"Since :ref:`private name mangling <private-name-mangling>` happens at "
"compilation time, one must manually mangle a private attribute's (attributes "
"with two leading underscores) name in order to retrieve it with :func:"
"`getattr`."
msgstr ""
"Eftersom :ref:`private name mangling <private-name-mangling>`` sker vid "
"kompilering måste man manuellt mangla ett privat attributs (attribut med två "
"inledande understreck) namn för att kunna hämta det med :func:`getattr`."

msgid ""
"Return the dictionary implementing the current module namespace. For code "
"within functions, this is set when the function is defined and remains the "
"same regardless of where the function is called."
msgstr ""
"Returnerar den ordbok som implementerar den aktuella modulens namnrymd. För "
"kod inom funktioner ställs detta in när funktionen definieras och förblir "
"detsamma oavsett var funktionen anropas."

msgid ""
"The arguments are an object and a string.  The result is ``True`` if the "
"string is the name of one of the object's attributes, ``False`` if not. "
"(This is implemented by calling ``getattr(object, name)`` and seeing whether "
"it raises an :exc:`AttributeError` or not.)"
msgstr ""
"Argumenten är ett objekt och en sträng.  Resultatet är ``True`` om strängen "
"är namnet på ett av objektets attribut, ``False`` om inte. (Detta "
"implementeras genom att anropa ``getattr(object, name)`` och se om det ger "
"upphov till ett :exc:`AttributeError` eller inte)"

msgid ""
"Return the hash value of the object (if it has one).  Hash values are "
"integers.  They are used to quickly compare dictionary keys during a "
"dictionary lookup.  Numeric values that compare equal have the same hash "
"value (even if they are of different types, as is the case for 1 and 1.0)."
msgstr ""
"Returnerar objektets hashvärde (om det har ett sådant).  Hashvärden är "
"heltal.  De används för att snabbt jämföra nycklar i en ordbok under en "
"ordboksuppslagning.  Numeriska värden som jämförs lika har samma hashvärde "
"(även om de är av olika typer, vilket är fallet för 1 och 1.0)."

msgid ""
"For objects with custom :meth:`~object.__hash__` methods, note that :func:"
"`hash` truncates the return value based on the bit width of the host machine."
msgstr ""
"För objekt med anpassade :meth:`~object.__hash__`-metoder, observera att :"
"func:`hash` trunkerar returvärdet baserat på bitbredden i värdmaskinen."

msgid ""
"Invoke the built-in help system.  (This function is intended for interactive "
"use.)  If no argument is given, the interactive help system starts on the "
"interpreter console.  If the argument is a string, then the string is looked "
"up as the name of a module, function, class, method, keyword, or "
"documentation topic, and a help page is printed on the console.  If the "
"argument is any other kind of object, a help page on the object is generated."
msgstr ""
"Anropar det inbyggda hjälpsystemet.  (Denna funktion är avsedd för "
"interaktiv användning.) Om inget argument anges, startas det interaktiva "
"hjälpsystemet på tolkens konsol.  Om argumentet är en sträng, söks strängen "
"upp som namnet på en modul, funktion, klass, metod, nyckelord eller "
"dokumentationsämne, och en hjälpsida skrivs ut på konsolen.  Om argumentet "
"är någon annan typ av objekt genereras en hjälpsida om objektet."

msgid ""
"Note that if a slash(/) appears in the parameter list of a function when "
"invoking :func:`help`, it means that the parameters prior to the slash are "
"positional-only. For more info, see :ref:`the FAQ entry on positional-only "
"parameters <faq-positional-only-arguments>`."
msgstr ""
"Observera att om ett snedstreck (/) visas i parameterlistan för en funktion "
"vid anrop av :func:`help`, betyder det att parametrarna före snedstrecket är "
"enbart positionella. För mer information, se :ref:`` FAQ-posten om endast "
"positionella parametrar <faq-positional-only-arguments>`."

msgid ""
"This function is added to the built-in namespace by the :mod:`site` module."
msgstr ""
"Denna funktion läggs till i den inbyggda namnrymden av modulen :mod:`site`."

msgid ""
"Changes to :mod:`pydoc` and :mod:`inspect` mean that the reported signatures "
"for callables are now more comprehensive and consistent."
msgstr ""
"Ändringar i :mod:`pydoc` och :mod:`inspect` innebär att de rapporterade "
"signaturerna för anropbara filer nu är mer omfattande och konsekventa."

msgid ""
"Convert an integer number to a lowercase hexadecimal string prefixed with "
"\"0x\". If *x* is not a Python :class:`int` object, it has to define an :"
"meth:`~object.__index__` method that returns an integer. Some examples:"
msgstr ""
"Konverterar ett heltal till en hexadecimal sträng med gemener och prefixet "
"\"0x\". Om *x* inte är ett Python :class:`int`-objekt måste det definiera "
"en :meth:`~object.__index__`-metod som returnerar ett heltal. Några exempel:"

msgid ""
"If you want to convert an integer number to an uppercase or lower "
"hexadecimal string with prefix or not, you can use either of the following "
"ways:"
msgstr ""
"Om du vill konvertera ett heltal till en hexadecimalsträng med versaler "
"eller gemener, med eller utan prefix, kan du använda något av följande sätt:"

msgid ""
"See also :func:`int` for converting a hexadecimal string to an integer using "
"a base of 16."
msgstr ""
"Se även :func:`int` för konvertering av en hexadecimal sträng till ett "
"heltal med bas 16."

msgid ""
"To obtain a hexadecimal string representation for a float, use the :meth:"
"`float.hex` method."
msgstr ""
"För att få en hexadecimal strängrepresentation för en float, använd metoden :"
"meth:`float.hex`."

msgid ""
"Return the \"identity\" of an object.  This is an integer which is "
"guaranteed to be unique and constant for this object during its lifetime. "
"Two objects with non-overlapping lifetimes may have the same :func:`id` "
"value."
msgstr ""
"Returnerar \"identiteten\" för ett objekt.  Detta är ett heltal som "
"garanterat är unikt och konstant för detta objekt under dess livstid. Två "
"objekt med icke-överlappande livstider kan ha samma :func:`id`-värde."

msgid "This is the address of the object in memory."
msgstr "Detta är adressen till objektet i minnet."

msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.id`` with argument "
"``id``."
msgstr ""
"Utlöser en :ref:`auditing event <auditing>` ``builtins.id`` med argumentet "
"``id``."

msgid ""
"If the *prompt* argument is present, it is written to standard output "
"without a trailing newline.  The function then reads a line from input, "
"converts it to a string (stripping a trailing newline), and returns that.  "
"When EOF is read, :exc:`EOFError` is raised.  Example::"
msgstr ""
"Om argumentet *prompt* finns med skrivs det till standardutdata utan "
"efterföljande ny rad.  Funktionen läser sedan en rad från indata, "
"konverterar den till en sträng (utan efterföljande ny rad) och returnerar "
"den.  När EOF läses ut, :exc:`EOFError`.  Exempel::"

msgid ""
">>> s = input('--> ')\n"
"--> Monty Python's Flying Circus\n"
">>> s\n"
"\"Monty Python's Flying Circus\""
msgstr ""
">>> s = input('--> ')\n"
"--> Monty Pythons flygande cirkus\n"
">>> s\n"
"\"Monty Pythons flygande cirkus\""

msgid ""
"If the :mod:`readline` module was loaded, then :func:`input` will use it to "
"provide elaborate line editing and history features."
msgstr ""
"Om modulen :mod:`readline` laddades, kommer :func:`input` att använda den "
"för att tillhandahålla detaljerade funktioner för radredigering och historik."

msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.input`` with argument "
"``prompt`` before reading input"
msgstr ""
"Utlöser en :ref:``auditing event <auditing>` ``builtins.input`` med "
"argumentet ``prompt`` innan inmatningen läses"

msgid ""
"Raises an :ref:`auditing event <auditing>` ``builtins.input/result`` with "
"the result after successfully reading input."
msgstr ""
"Utlöser en :ref:`auditing event <auditing>` ``builtins.input/result`` med "
"resultatet efter att ha lyckats läsa inmatning."

msgid ""
"Return an integer object constructed from a number or a string, or return "
"``0`` if no arguments are given."
msgstr ""
"Returnerar ett heltalsobjekt konstruerat från ett tal eller en sträng, eller "
"returnerar ``0`` om inga argument anges."

msgid ""
">>> int(123.45)\n"
"123\n"
">>> int('123')\n"
"123\n"
">>> int('   -12_345\\n')\n"
"-12345\n"
">>> int('FACE', 16)\n"
"64206\n"
">>> int('0xface', 0)\n"
"64206\n"
">>> int('01110011', base=2)\n"
"115"
msgstr ""
">>> int(123,45)\n"
"123\n"
">>> int('123')\n"
"123\n"
">>> int(' -12_345\\n')\n"
"-12345\n"
">>> int('FACE', 16)\n"
"64206\n"
">>> int('0xface', 0)\n"
"64206\n"
">>> int('01110011', bas=2)\n"
"115"

msgid ""
"If the argument defines :meth:`~object.__int__`, ``int(x)`` returns ``x."
"__int__()``.  If the argument defines :meth:`~object.__index__`, it returns "
"``x.__index__()``. For floating-point numbers, this truncates towards zero."
msgstr ""
"Om argumentet definierar :meth:`~object.__int__`, returnerar ``int(x)`` ``x."
"__int__()``.  Om argumentet definierar :meth:`~object.__index__`, returnerar "
"det ``x.__index__()``. För flyttal trunkeras detta mot noll."

msgid ""
"If the argument is not a number or if *base* is given, then it must be a "
"string, :class:`bytes`, or :class:`bytearray` instance representing an "
"integer in radix *base*.  Optionally, the string can be preceded by ``+`` or "
"``-`` (with no space in between), have leading zeros, be surrounded by "
"whitespace, and have single underscores interspersed between digits."
msgstr ""
"Om argumentet inte är ett tal eller om *base* anges, måste det vara en "
"sträng, :class:`bytes` eller :class:`bytearray`-instans som representerar "
"ett heltal i radix *base*.  Eventuellt kan strängen föregås av ``+`` eller "
"``-`` (utan mellanslag), ha inledande nollor, omges av blanksteg och ha "
"enkla understrykningar mellan siffrorna."

msgid ""
"A base-n integer string contains digits, each representing a value from 0 to "
"n-1. The values 0--9 can be represented by any Unicode decimal digit. The "
"values 10--35 can be represented by ``a`` to ``z`` (or ``A`` to ``Z``). The "
"default *base* is 10. The allowed bases are 0 and 2--36. Base-2, -8, and -16 "
"strings can be optionally prefixed with ``0b``/``0B``, ``0o``/``0O``, or "
"``0x``/``0X``, as with integer literals in code.  For base 0, the string is "
"interpreted in a similar way to an :ref:`integer literal in code "
"<integers>`, in that the actual base is 2, 8, 10, or 16 as determined by the "
"prefix. Base 0 also disallows leading zeros: ``int('010', 0)`` is not legal, "
"while ``int('010')`` and ``int('010', 8)`` are."
msgstr ""
"En bas-n heltalssträng innehåller siffror som var och en representerar ett "
"värde från 0 till n-1. Värdena 0--9 kan representeras av vilken Unicode-"
"decimalsiffra som helst. Värdena 10--35 kan representeras av ``a`` till "
"``z`` (eller ``A`` till ``Z``). Standardvärdet för *bas* är 10. De tillåtna "
"baserna är 0 och 2--36. Strängar i bas 2, 8 och 16 kan eventuellt prefixeras "
"med ``0b``/``0B``, ``0o``/``0O`` eller ``0x``/``0X``, precis som med "
"heltalslitteraler i kod.  För bas 0 tolkas strängen på ett liknande sätt som "
"en :ref:`integer literal i kod <integers>`, i det att den faktiska basen är "
"2, 8, 10 eller 16 som bestäms av prefixet. Bas 0 tillåter inte heller "
"ledande nollor: ``int('010', 0)`` är inte lagligt, medan ``int('010')`` och "
"``int('010', 8)`` är det."

msgid "The integer type is described in :ref:`typesnumeric`."
msgstr "Typen integer beskrivs i :ref:`typesnumeric`."

msgid ""
"If *base* is not an instance of :class:`int` and the *base* object has a :"
"meth:`base.__index__ <object.__index__>` method, that method is called to "
"obtain an integer for the base.  Previous versions used :meth:`base.__int__ "
"<object.__int__>` instead of :meth:`base.__index__ <object.__index__>`."
msgstr ""
"Om *base* inte är en instans av :class:`int` och *base*-objektet har en "
"metod :meth:`base.__index__ <object.__index__>`, anropas den metoden för att "
"erhålla ett heltal för basen.  Tidigare versioner använde :meth:`base."
"__int__ <object.__int__>` istället för :meth:`base.__index__ <object."
"__index__>`."

msgid "The first parameter is now positional-only."
msgstr "Den första parametern är nu endast positionsbestämd."

msgid ""
"Falls back to :meth:`~object.__index__` if :meth:`~object.__int__` is not "
"defined."
msgstr ""
"Faller tillbaka till :meth:`~object.__index__` om :meth:`~object.__int__` "
"inte är definierad."

msgid ""
":class:`int` string inputs and string representations can be limited to help "
"avoid denial of service attacks. A :exc:`ValueError` is raised when the "
"limit is exceeded while converting a string to an :class:`int` or when "
"converting an :class:`int` into a string would exceed the limit. See the :"
"ref:`integer string conversion length limitation <int_max_str_digits>` "
"documentation."
msgstr ""
":class:`int`-stränginmatningar och strängrepresentationer kan begränsas för "
"att undvika överbelastningsattacker. Ett :exc:`ValueError` uppstår när "
"gränsen överskrids vid konvertering av en sträng till en :class:`int` eller "
"när konvertering av en :class:`int` till en sträng skulle överskrida "
"gränsen. Se dokumentationen :ref:`Längdsbegränsning för konvertering av "
"heltalssträngar <int_max_str_digits>`."

msgid ""
":func:`int` no longer delegates to the :meth:`~object.__trunc__` method."
msgstr ""
":func:`int` delegerar inte längre till metoden :meth:`~object.__trunc__`."

msgid ""
"Return ``True`` if the *object* argument is an instance of the *classinfo* "
"argument, or of a (direct, indirect, or :term:`virtual <abstract base "
"class>`) subclass thereof.  If *object* is not an object of the given type, "
"the function always returns ``False``. If *classinfo* is a tuple of type "
"objects (or recursively, other such tuples) or a :ref:`types-union` of "
"multiple types, return ``True`` if *object* is an instance of any of the "
"types. If *classinfo* is not a type or tuple of types and such tuples, a :"
"exc:`TypeError` exception is raised. :exc:`TypeError` may not be raised for "
"an invalid type if an earlier check succeeds."
msgstr ""
"Returnerar ``True`` om argumentet *object* är en instans av argumentet "
"*classinfo*, eller av en (direkt, indirekt eller :term:`virtual <abstract "
"base class>``) underklass av detta.  Om *object* inte är ett objekt av den "
"angivna typen returnerar funktionen alltid ``False``. Om *classinfo* är en "
"tupel av typobjekt (eller rekursivt, andra sådana tuplar) eller en :ref:"
"`types-union` av flera typer, returneras ``True`` om *object* är en instans "
"av någon av typerna. Om *classinfo* inte är en typ eller en tupel av typer "
"och sådana tuplar, uppstår ett :exc:`TypeError` undantag. :exc:`TypeError` "
"får inte uppstå för en ogiltig typ om en tidigare kontroll lyckas."

msgid "*classinfo* can be a :ref:`types-union`."
msgstr "*classinfo* kan vara en :ref:`types-union`."

msgid ""
"Return ``True`` if *class* is a subclass (direct, indirect, or :term:"
"`virtual <abstract base class>`) of *classinfo*.  A class is considered a "
"subclass of itself. *classinfo* may be a tuple of class objects (or "
"recursively, other such tuples) or a :ref:`types-union`, in which case "
"return ``True`` if *class* is a subclass of any entry in *classinfo*.  In "
"any other case, a :exc:`TypeError` exception is raised."
msgstr ""
"Returnerar ``True`` om *class* är en underklass (direkt, indirekt eller :"
"term:`virtual <abstract base class>``) till *classinfo*.  En klass anses "
"vara en underklass av sig själv. *classinfo* kan vara en tupel av "
"klassobjekt (eller rekursivt, andra sådana tuplar) eller en :ref:`types-"
"union`, i vilket fall returneras ``True`` om *class* är en underklass till "
"någon post i *classinfo*.  I alla andra fall kommer ett :exc:`TypeError` "
"undantag att uppstå."

msgid ""
"Return an :term:`iterator` object.  The first argument is interpreted very "
"differently depending on the presence of the second argument. Without a "
"second argument, *object* must be a collection object which supports the :"
"term:`iterable` protocol (the :meth:`~object.__iter__` method), or it must "
"support the sequence protocol (the :meth:`~object.__getitem__` method with "
"integer arguments starting at ``0``).  If it does not support either of "
"those protocols, :exc:`TypeError` is raised. If the second argument, "
"*sentinel*, is given, then *object* must be a callable object.  The iterator "
"created in this case will call *object* with no arguments for each call to "
"its :meth:`~iterator.__next__` method; if the value returned is equal to "
"*sentinel*, :exc:`StopIteration` will be raised, otherwise the value will be "
"returned."
msgstr ""
"Returnerar ett :term:`iterator`-objekt.  Det första argumentet tolkas mycket "
"olika beroende på om det andra argumentet finns med. Utan ett andra argument "
"måste *object* vara ett samlingsobjekt som stöder protokollet :term:"
"`iterable` (metoden :meth:`~object.__iter__`), eller så måste det stödja "
"protokollet sequence (metoden :meth:`~object.__getitem__` med "
"heltalsargument som börjar på ``0``).  Om den inte stöder något av dessa "
"protokoll, :exc:`TypeError`. Om det andra argumentet, *sentinel*, anges "
"måste *object* vara ett anropsbart objekt.  Den iterator som skapas i detta "
"fall kommer att anropa *objekt* utan argument för varje anrop till dess :"
"meth:`~iterator.__next__`-metod; om det returnerade värdet är lika med "
"*sentinel*, kommer :exc:`StopIteration` att tas upp, annars kommer värdet "
"att returneras."

msgid "See also :ref:`typeiter`."
msgstr "Se även :ref:`typeiter`."

msgid ""
"One useful application of the second form of :func:`iter` is to build a "
"block-reader. For example, reading fixed-width blocks from a binary database "
"file until the end of file is reached::"
msgstr ""
"En användbar tillämpning av den andra formen av :func:`iter` är att bygga en "
"blockläsare. Till exempel, läsa block med fast bredd från en binär "
"databasfil tills slutet av filen nås::"

msgid ""
"from functools import partial\n"
"with open('mydata.db', 'rb') as f:\n"
"    for block in iter(partial(f.read, 64), b''):\n"
"        process_block(block)"
msgstr ""
"from functools import partial\n"
"med open('mydata.db', 'rb') som f:\n"
"    for block in iter(partial(f.read, 64), b''):\n"
"        process_block(block)"

msgid ""
"Return the length (the number of items) of an object.  The argument may be a "
"sequence (such as a string, bytes, tuple, list, or range) or a collection "
"(such as a dictionary, set, or frozen set)."
msgstr ""
"Returnerar längden (antalet poster) för ett objekt.  Argumentet kan vara en "
"sekvens (t.ex. en sträng, bytes, tuple, list eller range) eller en samling "
"(t.ex. en dictionary, set eller frozen set)."

msgid ""
"``len`` raises :exc:`OverflowError` on lengths larger than :data:`sys."
"maxsize`, such as :class:`range(2 ** 100) <range>`."
msgstr ""
"``len`` ger upphov till :exc:`OverflowError` på längder som är större än :"
"data:`sys.maxsize`, till exempel :class:`range(2 ** 100) <range>`."

msgid ""
"Rather than being a function, :class:`list` is actually a mutable sequence "
"type, as documented in :ref:`typesseq-list` and :ref:`typesseq`."
msgstr ""
"I stället för att vara en funktion är :class:`list` faktiskt en muterbar "
"sekvenstyp, vilket dokumenteras i :ref:`typesseq-list` och :ref:`typesseq`."

msgid ""
"Return a mapping object representing the current local symbol table, with "
"variable names as the keys, and their currently bound references as the "
"values."
msgstr ""
"Returnerar ett mappningsobjekt som representerar den aktuella lokala "
"symboltabellen, med variabelnamn som nycklar och deras aktuella bundna "
"referenser som värden."

msgid ""
"At module scope, as well as when using :func:`exec` or :func:`eval` with a "
"single namespace, this function returns the same namespace as :func:"
"`globals`."
msgstr ""
"I modulomfång, samt vid användning av :func:`exec` eller :func:`eval` med en "
"enda namnrymd, returnerar denna funktion samma namnrymd som :func:`globals`."

msgid ""
"At class scope, it returns the namespace that will be passed to the "
"metaclass constructor."
msgstr ""
"I klassomfånget returnerar den namnrymden som kommer att skickas till "
"metaklasskonstruktören."

msgid ""
"When using ``exec()`` or ``eval()`` with separate local and global "
"arguments, it returns the local namespace passed in to the function call."
msgstr ""
"När ``exec()`` eller ``eval()`` används med separata lokala och globala "
"argument, returneras den lokala namnrymden som skickas till funktionsanropet."

msgid ""
"In all of the above cases, each call to ``locals()`` in a given frame of "
"execution will return the *same* mapping object. Changes made through the "
"mapping object returned from ``locals()`` will be visible as assigned, "
"reassigned, or deleted local variables, and assigning, reassigning, or "
"deleting local variables will immediately affect the contents of the "
"returned mapping object."
msgstr ""
"I alla ovanstående fall kommer varje anrop till ``locals()`` i en viss "
"exekveringsram att returnera *samma* mappningsobjekt. Ändringar som görs "
"genom det mappningsobjekt som returneras från ``locals()`` kommer att synas "
"som tilldelade, omtilldelade eller borttagna lokala variabler, och "
"tilldelning, omtilldelning eller borttagning av lokala variabler kommer "
"omedelbart att påverka innehållet i det returnerade mappningsobjektet."

msgid ""
"In an :term:`optimized scope` (including functions, generators, and "
"coroutines), each call to ``locals()`` instead returns a fresh dictionary "
"containing the current bindings of the function's local variables and any "
"nonlocal cell references. In this case, name binding changes made via the "
"returned dict are *not* written back to the corresponding local variables or "
"nonlocal cell references, and assigning, reassigning, or deleting local "
"variables and nonlocal cell references does *not* affect the contents of "
"previously returned dictionaries."
msgstr ""
"I ett :term:`optimized scope` (inklusive funktioner, generatorer och "
"coroutines) returnerar varje anrop till ``locals()`` i stället en ny ordbok "
"som innehåller de aktuella bindningarna för funktionens lokala variabler och "
"eventuella icke-lokala cellreferenser. I det här fallet skrivs "
"namnbindningsändringar som görs via den returnerade dict *inte* tillbaka "
"till motsvarande lokala variabler eller icke-lokala cellreferenser, och "
"tilldelning, omtilldelning eller borttagning av lokala variabler och icke-"
"lokala cellreferenser påverkar *inte* innehållet i tidigare returnerade "
"lexikon."

msgid ""
"Calling ``locals()`` as part of a comprehension in a function, generator, or "
"coroutine is equivalent to calling it in the containing scope, except that "
"the comprehension's initialised iteration variables will be included. In "
"other scopes, it behaves as if the comprehension were running as a nested "
"function."
msgstr ""
"Att anropa ``locals()`` som en del av en förståelse i en funktion, generator "
"eller coroutine är likvärdigt med att anropa den i det innehållande scopet, "
"förutom att förståelsens initialiserade iterationsvariabler kommer att "
"inkluderas. I andra scopes beter det sig som om förståelsen kördes som en "
"nästlad funktion."

msgid ""
"Calling ``locals()`` as part of a generator expression is equivalent to "
"calling it in a nested generator function."
msgstr ""
"Att anropa ``locals()`` som en del av ett generatoruttryck är likvärdigt med "
"att anropa det i en nästlad generatorfunktion."

msgid ""
"The behaviour of ``locals()`` in a comprehension has been updated as "
"described in :pep:`709`."
msgstr ""
"Beteendet för ``locals()`` i en comprehension har uppdaterats enligt "
"beskrivningen i :pep:`709`."

msgid ""
"As part of :pep:`667`, the semantics of mutating the mapping objects "
"returned from this function are now defined. The behavior in :term:"
"`optimized scopes <optimized scope>` is now as described above. Aside from "
"being defined, the behaviour in other scopes remains unchanged from previous "
"versions."
msgstr ""
"Som en del av :pep:`667` definieras nu semantiken för att mutera de "
"mappningsobjekt som returneras från denna funktion. Beteendet i :term:"
"`optimized scopes <optimized scope>` är nu som beskrivet ovan. Bortsett från "
"definitionen är beteendet i andra scopes oförändrat jämfört med tidigare "
"versioner."

msgid ""
"Return an iterator that applies *function* to every item of *iterable*, "
"yielding the results.  If additional *iterables* arguments are passed, "
"*function* must take that many arguments and is applied to the items from "
"all iterables in parallel.  With multiple iterables, the iterator stops when "
"the shortest iterable is exhausted.  If *strict* is ``True`` and one of the "
"iterables is exhausted before the others, a :exc:`ValueError` is raised. For "
"cases where the function inputs are already arranged into argument tuples, "
"see :func:`itertools.starmap`."
msgstr ""
"Returnerar en iterator som tillämpar *function* på varje objekt i "
"*iterable*, vilket ger resultatet.  Om ytterligare *iterables*-argument "
"skickas, måste *function* ta lika många argument och tillämpas på objekten "
"från alla iterables parallellt.  Med flera iterabler stannar iteratorn när "
"den kortaste iterabeln är uttömd.  Om *strict* är ``True`` och en av "
"iteratorerna är uttömd före de andra, uppstår ett :exc:`ValueError`. För "
"fall där funktionsingångarna redan är ordnade i argumenttuplar, se :func:"
"`itertools.starmap`."

msgid "Added the *strict* parameter."
msgstr "Parametern *strict* har lagts till."

msgid ""
"Return the largest item in an iterable or the largest of two or more "
"arguments."
msgstr ""
"Returnerar det största objektet i en iterabel eller det största av två eller "
"flera argument."

msgid ""
"If one positional argument is provided, it should be an :term:`iterable`. "
"The largest item in the iterable is returned.  If two or more positional "
"arguments are provided, the largest of the positional arguments is returned."
msgstr ""
"Om ett positionellt argument anges bör det vara en :term:`iterable`. Det "
"största objektet i iterabeln returneras.  Om två eller flera "
"positionsargument anges, returneras det största av positionsargumenten."

msgid ""
"There are two optional keyword-only arguments. The *key* argument specifies "
"a one-argument ordering function like that used for :meth:`list.sort`. The "
"*default* argument specifies an object to return if the provided iterable is "
"empty. If the iterable is empty and *default* is not provided, a :exc:"
"`ValueError` is raised."
msgstr ""
"Det finns två valfria argument som endast innehåller nyckelord. Argumentet "
"*key* anger en ordningsfunktion med ett argument, som den som används för :"
"meth:`list.sort`. Argumentet *default* anger ett objekt som ska returneras "
"om den angivna iterabeln är tom. Om iterabeln är tom och *default* inte "
"anges, uppstår ett :exc:`ValueError`."

msgid ""
"If multiple items are maximal, the function returns the first one "
"encountered.  This is consistent with other sort-stability preserving tools "
"such as ``sorted(iterable, key=keyfunc, reverse=True)[0]`` and ``heapq."
"nlargest(1, iterable, key=keyfunc)``."
msgstr ""
"Om flera objekt är maximala returnerar funktionen det första som påträffas.  "
"Detta är förenligt med andra verktyg som bevarar sorteringsstabiliteten, t."
"ex. ``sorted(iterable, key=keyfunc, reverse=True)[0]`` och ``heapq."
"nlargest(1, iterable, key=keyfunc)``."

msgid "Added the *default* keyword-only parameter."
msgstr "Lagt till parametern *default* keyword-only."

msgid "The *key* can be ``None``."
msgstr "Nyckeln kan vara ``Ingen``."

msgid ""
"Return a \"memory view\" object created from the given argument.  See :ref:"
"`typememoryview` for more information."
msgstr ""
"Returnerar ett \"minnesvy\"-objekt som skapats från det angivna argumentet.  "
"Se :ref:`typememoryview` för mer information."

msgid ""
"Return the smallest item in an iterable or the smallest of two or more "
"arguments."
msgstr ""
"Returnerar det minsta objektet i en iterabel eller det minsta av två eller "
"flera argument."

msgid ""
"If one positional argument is provided, it should be an :term:`iterable`. "
"The smallest item in the iterable is returned.  If two or more positional "
"arguments are provided, the smallest of the positional arguments is returned."
msgstr ""
"Om ett positionellt argument anges bör det vara en :term:`iterable`. Det "
"minsta objektet i iterabeln returneras.  Om två eller flera "
"positionsargument anges, returneras det minsta av positionsargumenten."

msgid ""
"If multiple items are minimal, the function returns the first one "
"encountered.  This is consistent with other sort-stability preserving tools "
"such as ``sorted(iterable, key=keyfunc)[0]`` and ``heapq.nsmallest(1, "
"iterable, key=keyfunc)``."
msgstr ""
"Om flera objekt är minimala returnerar funktionen det första som påträffas.  "
"Detta är förenligt med andra verktyg som bevarar sorteringsstabiliteten, t."
"ex. ``sorted(iterable, key=keyfunc)[0]`` och ``heapq.nsmallest(1, iterable, "
"key=keyfunc)``."

msgid ""
"Retrieve the next item from the :term:`iterator` by calling its :meth:"
"`~iterator.__next__` method.  If *default* is given, it is returned if the "
"iterator is exhausted, otherwise :exc:`StopIteration` is raised."
msgstr ""
"Hämtar nästa objekt från :term:`iterator` genom att anropa dess :meth:"
"`~iterator.__next__`-metod.  Om *default* anges returneras den om iteratorn "
"är uttömd, annars aktiveras :exc:`StopIteration`."

msgid ""
"This is the ultimate base class of all other classes. It has methods that "
"are common to all instances of Python classes. When the constructor is "
"called, it returns a new featureless object. The constructor does not accept "
"any arguments."
msgstr ""
"Detta är den ultimata basklassen för alla andra klasser. Den har metoder som "
"är gemensamma för alla instanser av Python-klasser. När konstruktören "
"anropas returnerar den ett nytt funktionslöst objekt. Konstruktören "
"accepterar inga argument."

msgid ""
":class:`object` instances do *not* have :attr:`~object.__dict__` attributes, "
"so you can't assign arbitrary attributes to an instance of :class:`object`."
msgstr ""
":class:`object`-instanser har *inte* :attr:`~object.__dict__`-attribut, så "
"du kan inte tilldela godtyckliga attribut till en instans av :class:`object`."

msgid ""
"Convert an integer number to an octal string prefixed with \"0o\".  The "
"result is a valid Python expression. If *x* is not a Python :class:`int` "
"object, it has to define an :meth:`~object.__index__` method that returns an "
"integer. For example:"
msgstr ""
"Konverterar ett heltal till en oktal sträng med prefixet \"0o\".  Resultatet "
"är ett giltigt Python-uttryck. Om *x* inte är ett Python :class:`int`-"
"objekt, måste det definiera en :meth:`~object.__index__`-metod som "
"returnerar ett heltal. Till exempel"

msgid ""
"If you want to convert an integer number to an octal string either with the "
"prefix \"0o\" or not, you can use either of the following ways."
msgstr ""
"Om du vill konvertera ett heltal till en oktalsträng, antingen med prefixet "
"\"0o\" eller inte, kan du använda något av följande sätt."

msgid ""
"Open *file* and return a corresponding :term:`file object`.  If the file "
"cannot be opened, an :exc:`OSError` is raised. See :ref:`tut-files` for more "
"examples of how to use this function."
msgstr ""
"Öppnar *fil* och returnerar ett motsvarande :term:`filobjekt`.  Om filen "
"inte kan öppnas genereras ett :exc:`OSError`. Se :ref:`tut-files` för fler "
"exempel på hur denna funktion kan användas."

msgid ""
"*file* is a :term:`path-like object` giving the pathname (absolute or "
"relative to the current working directory) of the file to be opened or an "
"integer file descriptor of the file to be wrapped.  (If a file descriptor is "
"given, it is closed when the returned I/O object is closed unless *closefd* "
"is set to ``False``.)"
msgstr ""
"*file* är ett :term:`sökvägsliknande objekt` som anger sökvägen (absolut "
"eller relativt till den aktuella arbetskatalogen) för den fil som ska öppnas "
"eller en heltalsfilbeskrivning för den fil som ska omslutas.  (Om en "
"filbeskrivare anges stängs den när det returnerade I/O-objektet stängs, "
"såvida inte *closefd* är satt till ``False``)"

msgid ""
"*mode* is an optional string that specifies the mode in which the file is "
"opened.  It defaults to ``'r'`` which means open for reading in text mode. "
"Other common values are ``'w'`` for writing (truncating the file if it "
"already exists), ``'x'`` for exclusive creation, and ``'a'`` for appending "
"(which on *some* Unix systems, means that *all* writes append to the end of "
"the file regardless of the current seek position).  In text mode, if "
"*encoding* is not specified the encoding used is platform-dependent: :func:"
"`locale.getencoding` is called to get the current locale encoding. (For "
"reading and writing raw bytes use binary mode and leave *encoding* "
"unspecified.)  The available modes are:"
msgstr ""
"*mode* är en valfri sträng som anger i vilket läge filen ska öppnas.  "
"Standardvärdet är ``'r'``, vilket innebär att filen öppnas för läsning i "
"textläge. Andra vanliga värden är ``'w'`` för att skriva (avkorta filen om "
"den redan finns), ``'x'`` för exklusivt skapande och ``'a'`` för att lägga "
"till (vilket på *vissa* Unix-system innebär att *alla* skrivningar läggs "
"till i slutet av filen oavsett aktuell sökposition).  I textläge, om "
"*encoding* inte anges, är den kodning som används plattformsberoende: :func:"
"`locale.getencoding` anropas för att hämta den aktuella locale-kodningen. "
"(För läsning och skrivning av råbytes används binärt läge och *encoding* "
"anges inte)  De tillgängliga lägena är:"

msgid "Character"
msgstr "Tecken"

msgid "Meaning"
msgstr "Betydelse"

msgid "``'r'``"
msgstr "``'r'``"

msgid "open for reading (default)"
msgstr "öppen för läsning (standard)"

msgid "``'w'``"
msgstr "``'w'``"

msgid "open for writing, truncating the file first"
msgstr "öppna för skrivning, avkorta filen först"

msgid "``'x'``"
msgstr "``'x'``"

msgid "open for exclusive creation, failing if the file already exists"
msgstr "öppen för exklusiv skapelse, misslyckas om filen redan finns"

msgid "``'a'``"
msgstr "``'a'``"

msgid "open for writing, appending to the end of file if it exists"
msgstr "öppen för skrivning, läggs till i slutet av filen om den finns"

msgid "``'b'``"
msgstr "``'b'``"

msgid "binary mode"
msgstr "binärt läge"

msgid "``'t'``"
msgstr "``'t'``"

msgid "text mode (default)"
msgstr "textläge (standard)"

msgid "``'+'``"
msgstr "``'+'``"

msgid "open for updating (reading and writing)"
msgstr "öppen för uppdatering (läsning och skrivning)"

msgid ""
"The default mode is ``'r'`` (open for reading text, a synonym of ``'rt'``). "
"Modes ``'w+'`` and ``'w+b'`` open and truncate the file.  Modes ``'r+'`` and "
"``'r+b'`` open the file with no truncation."
msgstr ""
"Standardläget är ``'r'`` (öppen för läsning av text, en synonym till "
"``'rt'``). Lägena ``'w+'`` och ``'w+b'`` öppnar och trunkerar filen.  Lägena "
"``'r+'`` och ``'r+b'`` öppnar filen utan trunkering."

msgid ""
"As mentioned in the :ref:`io-overview`, Python distinguishes between binary "
"and text I/O.  Files opened in binary mode (including ``'b'`` in the *mode* "
"argument) return contents as :class:`bytes` objects without any decoding.  "
"In text mode (the default, or when ``'t'`` is included in the *mode* "
"argument), the contents of the file are returned as :class:`str`, the bytes "
"having been first decoded using a platform-dependent encoding or using the "
"specified *encoding* if given."
msgstr ""
"Som nämndes i :ref:`io-overview` skiljer Python mellan binär och text I/O.  "
"Filer som öppnas i binärt läge (inklusive ``'b'`` i *mode*-argumentet) "
"returnerar innehållet som :class:`bytes`-objekt utan någon avkodning.  I "
"textläge (standard, eller när ``'t'`` ingår i *mode*-argumentet) returneras "
"filens innehåll som :class:`str`, där bytena först har avkodats med en "
"plattformsberoende kodning eller med den angivna *kodningen* om den anges."

msgid ""
"Python doesn't depend on the underlying operating system's notion of text "
"files; all the processing is done by Python itself, and is therefore "
"platform-independent."
msgstr ""
"Python är inte beroende av det underliggande operativsystemets uppfattning "
"om textfiler; all bearbetning görs av Python självt och är därför "
"plattformsoberoende."

msgid ""
"*buffering* is an optional integer used to set the buffering policy.  Pass 0 "
"to switch buffering off (only allowed in binary mode), 1 to select line "
"buffering (only usable when writing in text mode), and an integer > 1 to "
"indicate the size in bytes of a fixed-size chunk buffer. Note that "
"specifying a buffer size this way applies for binary buffered I/O, but "
"``TextIOWrapper`` (i.e., files opened with ``mode='r+'``) would have another "
"buffering. To disable buffering in ``TextIOWrapper``, consider using the "
"``write_through`` flag for :func:`io.TextIOWrapper.reconfigure`. When no "
"*buffering* argument is given, the default buffering policy works as follows:"
msgstr ""
"*buffering* är ett valfritt heltal som används för att ställa in "
"buffringspolicyn.  Ange 0 för att stänga av buffring (endast tillåtet i "
"binärt läge), 1 för att välja linjebuffring (endast användbart när du "
"skriver i textläge) och ett heltal > 1 för att ange storleken i byte på en "
"buffert med fast storlek. Observera att om du anger en buffertstorlek på det "
"här sättet gäller det för binärt buffrad I/O, men ``TextIOWrapper`` (dvs. "
"filer som öppnas med ``mode='r+'``) skulle ha en annan buffring. För att "
"inaktivera buffring i ``TextIOWrapper``, överväg att använda "
"``write_through`` flaggan för :func:`io.TextIOWrapper.reconfigure`. När "
"inget *buffering*-argument anges fungerar standardpolicyn för buffring på "
"följande sätt:"

msgid ""
"Binary files are buffered in fixed-size chunks; the size of the buffer is "
"``max(min(blocksize, 8 MiB), DEFAULT_BUFFER_SIZE)`` when the device block "
"size is available. On most systems, the buffer will typically be 128 "
"kilobytes long."
msgstr ""
"Binära filer buffras i bitar av fast storlek; storleken på bufferten är "
"``max(min(blocksize, 8 MiB), DEFAULT_BUFFER_SIZE)`` när enhetens "
"blockstorlek är tillgänglig. På de flesta system är bufferten vanligtvis 128 "
"kilobyte lång."

msgid ""
"\"Interactive\" text files (files for which :meth:`~io.IOBase.isatty` "
"returns ``True``) use line buffering.  Other text files use the policy "
"described above for binary files."
msgstr ""
"\"Interaktiva\" textfiler (filer för vilka :meth:`~io.IOBase.isatty` "
"returnerar ``True``) använder radbuffring.  Andra textfiler använder den "
"policy som beskrivs ovan för binära filer."

msgid ""
"*encoding* is the name of the encoding used to decode or encode the file. "
"This should only be used in text mode.  The default encoding is platform "
"dependent (whatever :func:`locale.getencoding` returns), but any :term:`text "
"encoding` supported by Python can be used. See the :mod:`codecs` module for "
"the list of supported encodings."
msgstr ""
"*encoding* är namnet på den kodning som används för att avkoda eller koda "
"filen. Detta bör endast användas i textläge.  Standardkodningen är "
"plattformsberoende (oavsett vad :func:`locale.getencoding` returnerar), men "
"alla :term:`textkodningar` som stöds av Python kan användas. Se modulen :mod:"
"`codecs` för en lista över kodningar som stöds."

msgid ""
"*errors* is an optional string that specifies how encoding and decoding "
"errors are to be handled—this cannot be used in binary mode. A variety of "
"standard error handlers are available (listed under :ref:`error-handlers`), "
"though any error handling name that has been registered with :func:`codecs."
"register_error` is also valid.  The standard names include:"
msgstr ""
"*errors* är en valfri sträng som anger hur kodnings- och avkodningsfel ska "
"hanteras - detta kan inte användas i binärt läge. En mängd olika "
"standardfelhanterare finns tillgängliga (listade under :ref:`error-"
"handlers`), men alla felhanteringsnamn som har registrerats med :func:"
"`codecs.register_error` är också giltiga.  Standardnamnen inkluderar:"

msgid ""
"``'strict'`` to raise a :exc:`ValueError` exception if there is an encoding "
"error.  The default value of ``None`` has the same effect."
msgstr ""
"``'strict'`` för att skapa ett :exc:`ValueError` undantag om det finns ett "
"kodningsfel.  Standardvärdet ``None`` har samma effekt."

msgid ""
"``'ignore'`` ignores errors.  Note that ignoring encoding errors can lead to "
"data loss."
msgstr ""
"``'ignore'`` ignorerar fel.  Observera att om du ignorerar kodningsfel kan "
"det leda till dataförlust."

msgid ""
"``'replace'`` causes a replacement marker (such as ``'?'``) to be inserted "
"where there is malformed data."
msgstr ""
"``'replace'`` gör att en ersättningsmarkör (t.ex. ``'?'``) infogas där det "
"finns felaktiga data."

msgid ""
"``'surrogateescape'`` will represent any incorrect bytes as low surrogate "
"code units ranging from U+DC80 to U+DCFF. These surrogate code units will "
"then be turned back into the same bytes when the ``surrogateescape`` error "
"handler is used when writing data.  This is useful for processing files in "
"an unknown encoding."
msgstr ""
"``'surrogateescape'`` kommer att representera alla felaktiga byte som låga "
"surrogatkodsenheter från U+DC80 till U+DCFF. Dessa surrogatkodsenheter "
"kommer sedan att omvandlas tillbaka till samma byte när felhanteraren "
"```surrogateescape`` används vid skrivning av data.  Detta är användbart för "
"att bearbeta filer i en okänd kodning."

msgid ""
"``'xmlcharrefreplace'`` is only supported when writing to a file. Characters "
"not supported by the encoding are replaced with the appropriate XML "
"character reference :samp:`&#{nnn};`."
msgstr ""
"``'xmlcharrefreplace'`` stöds endast när du skriver till en fil. Tecken som "
"inte stöds av kodningen ersätts med lämplig XML-teckenreferens :samp:"
"`&#{nnn};`."

msgid ""
"``'backslashreplace'`` replaces malformed data by Python's backslashed "
"escape sequences."
msgstr ""
"``'backslashreplace'`` ersätter missbildade data med Pythons bakåtstreckade "
"escape-sekvenser."

msgid ""
"``'namereplace'`` (also only supported when writing) replaces unsupported "
"characters with ``\\N{...}`` escape sequences."
msgstr ""
"``'namereplace'`` (stöds också endast vid skrivning) ersätter tecken som "
"inte stöds med ``N{...}`` escape-sekvenser."

msgid ""
"*newline* determines how to parse newline characters from the stream. It can "
"be ``None``, ``''``, ``'\\n'``, ``'\\r'``, and ``'\\r\\n'``.  It works as "
"follows:"
msgstr ""
"*newline* bestämmer hur man analyserar nya radtecken från flödet. Det kan "
"vara ``None``, ``''``, ``'\\n'``, ``'\\r'`` och ``'\\r\\n'``.  Det fungerar "
"på följande sätt:"

msgid ""
"When reading input from the stream, if *newline* is ``None``, universal "
"newlines mode is enabled.  Lines in the input can end in ``'\\n'``, "
"``'\\r'``, or ``'\\r\\n'``, and these are translated into ``'\\n'`` before "
"being returned to the caller.  If it is ``''``, universal newlines mode is "
"enabled, but line endings are returned to the caller untranslated.  If it "
"has any of the other legal values, input lines are only terminated by the "
"given string, and the line ending is returned to the caller untranslated."
msgstr ""
"Om *newline* är ``None`` aktiveras universal newlines-läget när indata läses "
"från strömmen.  Rader i inmatningen kan sluta på ``'\\n'``, ``'\\r'`` eller "
"``'\\r\\n'``, och dessa översätts till ``'\\n'`` innan de returneras till "
"den som anropar.  Om det är ``''`` aktiveras universal newlines mode, men "
"radavslut returneras till uppringaren oöversatta.  Om det har något av de "
"andra lagliga värdena avslutas inmatningsraderna endast med den angivna "
"strängen, och radavslutningen returneras till den som ringer upp oöversatt."

msgid ""
"When writing output to the stream, if *newline* is ``None``, any ``'\\n'`` "
"characters written are translated to the system default line separator, :"
"data:`os.linesep`.  If *newline* is ``''`` or ``'\\n'``, no translation "
"takes place.  If *newline* is any of the other legal values, any ``'\\n'`` "
"characters written are translated to the given string."
msgstr ""
"Om *newline* är ``None`` när utdata skrivs till strömmen, översätts alla "
"``'\\n'``-tecken som skrivs till systemets standardradavgränsare, :data:`os."
"linesep`.  Om *newline* är ``''`` eller ``'\\n'`` sker ingen översättning.  "
"Om *newline* är något av de andra lagliga värdena översätts alla ``'\\n'``-"
"tecken som skrivs till den angivna strängen."

msgid ""
"If *closefd* is ``False`` and a file descriptor rather than a filename was "
"given, the underlying file descriptor will be kept open when the file is "
"closed.  If a filename is given *closefd* must be ``True`` (the default); "
"otherwise, an error will be raised."
msgstr ""
"Om *closefd* är ``False`` och en filbeskrivare istället för ett filnamn har "
"angetts, kommer den underliggande filbeskrivaren att hållas öppen när filen "
"stängs.  Om ett filnamn anges måste *closefd* vara ``True`` (standard), "
"annars kommer ett fel att uppstå."

msgid ""
"A custom opener can be used by passing a callable as *opener*. The "
"underlying file descriptor for the file object is then obtained by calling "
"*opener* with (*file*, *flags*). *opener* must return an open file "
"descriptor (passing :mod:`os.open` as *opener* results in functionality "
"similar to passing ``None``)."
msgstr ""
"En anpassad öppnare kan användas genom att skicka en anropsbar som *opener*. "
"Den underliggande filbeskrivaren för filobjektet erhålls sedan genom att "
"anropa *opener* med (*file*, *flags*). *opener* måste returnera en öppen "
"filbeskrivare (att skicka :mod:`os.open` som *opener* resulterar i "
"funktionalitet som liknar att skicka ``None``)."

msgid "The newly created file is :ref:`non-inheritable <fd_inheritance>`."
msgstr "Den nyskapade filen är :ref:`icke-ärftlig <fd_inheritance>`."

msgid ""
"The following example uses the :ref:`dir_fd <dir_fd>` parameter of the :func:"
"`os.open` function to open a file relative to a given directory::"
msgstr ""
"I följande exempel används parametern :ref:`dir_fd <dir_fd>` i funktionen :"
"func:`os.open` för att öppna en fil i förhållande till en viss katalog::"

msgid ""
">>> import os\n"
">>> dir_fd = os.open('somedir', os.O_RDONLY)\n"
">>> def opener(path, flags):\n"
"...     return os.open(path, flags, dir_fd=dir_fd)\n"
"...\n"
">>> with open('spamspam.txt', 'w', opener=opener) as f:\n"
"...     print('This will be written to somedir/spamspam.txt', file=f)\n"
"...\n"
">>> os.close(dir_fd)  # don't leak a file descriptor"
msgstr ""
">>> import os\n"
">>> dir_fd = os.open('somedir', os.O_RDONLY)\n"
">>> def opener(path, flags):\n"
"...     return os.open(path, flags, dir_fd=dir_fd)\n"
"...\n"
">>> with open('spamspam.txt', 'w', opener=opener) as f:\n"
"...     print('This will be written to somedir/spamspam.txt', file=f)\n"
"...\n"
">>> os.close(dir_fd)  # don't leak a file descriptor"

msgid ""
"The type of :term:`file object` returned by the :func:`open` function "
"depends on the mode.  When :func:`open` is used to open a file in a text "
"mode (``'w'``, ``'r'``, ``'wt'``, ``'rt'``, etc.), it returns a subclass of :"
"class:`io.TextIOBase` (specifically :class:`io.TextIOWrapper`).  When used "
"to open a file in a binary mode with buffering, the returned class is a "
"subclass of :class:`io.BufferedIOBase`.  The exact class varies: in read "
"binary mode, it returns an :class:`io.BufferedReader`; in write binary and "
"append binary modes, it returns an :class:`io.BufferedWriter`, and in read/"
"write mode, it returns an :class:`io.BufferedRandom`.  When buffering is "
"disabled, the raw stream, a subclass of :class:`io.RawIOBase`, :class:`io."
"FileIO`, is returned."
msgstr ""
"Typen av :term:`file object` som returneras av funktionen :func:`open` beror "
"på läget.  När :func:`open` används för att öppna en fil i textläge "
"(``'w'``, ``'r'``, ``'wt'``, ``'rt'``, etc.) returneras en underklass av :"
"class:`io.TextIOBase` (specifikt :class:`io.TextIOWrapper`).  När den "
"används för att öppna en fil i binärt läge med buffring är den returnerade "
"klassen en underklass till :class:`io.BufferedIOBase`.  Den exakta klassen "
"varierar: i binärt läsläge returneras en :class:`io.BufferedReader`, i "
"binärt skrivläge och binärt append-läge returneras en :class:`io."
"BufferedWriter` och i läs-/skrivläge returneras en :class:`io."
"BufferedRandom`.  När buffringen är inaktiverad returneras råströmmen, en "
"underklass till :class:`io.RawIOBase`, :class:`io.FileIO`."

msgid ""
"See also the file handling modules, such as :mod:`fileinput`, :mod:`io` "
"(where :func:`open` is declared), :mod:`os`, :mod:`os.path`, :mod:"
"`tempfile`, and :mod:`shutil`."
msgstr ""
"Se även filhanteringsmodulerna, till exempel :mod:`fileinput`, :mod:`io` "
"(där :func:`open` deklareras), :mod:`os`, :mod:`os.path`, :mod:`tempfile` "
"och :mod:`shutil`."

msgid ""
"Raises an :ref:`auditing event <auditing>` ``open`` with arguments ``path``, "
"``mode``, ``flags``."
msgstr ""
"Utlöser en :ref:`auditing-händelse <auditing>``open`` med argumenten "
"``path``, ``mode``, ``flags``."

msgid ""
"The ``mode`` and ``flags`` arguments may have been modified or inferred from "
"the original call."
msgstr ""
"Argumenten ``mode`` och ``flags`` kan ha ändrats eller härletts från det "
"ursprungliga anropet."

msgid "The *opener* parameter was added."
msgstr "Parametern *opener* har lagts till."

msgid "The ``'x'`` mode was added."
msgstr "Läget ``'x'`` lades till."

msgid ":exc:`IOError` used to be raised, it is now an alias of :exc:`OSError`."
msgstr ""
":exc:`IOError` användes tidigare, nu är det ett alias för :exc:`OSError`."

msgid ""
":exc:`FileExistsError` is now raised if the file opened in exclusive "
"creation mode (``'x'``) already exists."
msgstr ""
":exc:`FileExistsError` visas nu om filen som öppnades i exklusivt skapande-"
"läge (``'x'``) redan existerar."

msgid "The file is now non-inheritable."
msgstr "Filen är nu inte ärftlig."

msgid ""
"If the system call is interrupted and the signal handler does not raise an "
"exception, the function now retries the system call instead of raising an :"
"exc:`InterruptedError` exception (see :pep:`475` for the rationale)."
msgstr ""
"Om systemanropet avbryts och signalhanteraren inte ger upphov till ett "
"undantag, försöker funktionen nu göra om systemanropet istället för att ge "
"upphov till ett :exc:`InterruptedError`-undantag (se :pep:`475` för "
"förklaringen)."

msgid "The ``'namereplace'`` error handler was added."
msgstr "Felhanteraren ``'namereplace'`` har lagts till."

msgid "Support added to accept objects implementing :class:`os.PathLike`."
msgstr ""
"Stöd har lagts till för att acceptera objekt som implementerar :class:`os."
"PathLike`."

msgid ""
"On Windows, opening a console buffer may return a subclass of :class:`io."
"RawIOBase` other than :class:`io.FileIO`."
msgstr ""
"I Windows kan öppnandet av en konsolbuffert returnera en annan underklass "
"av :class:`io.RawIOBase` än :class:`io.FileIO`."

msgid "The ``'U'`` mode has been removed."
msgstr "Läget ``'U`` har tagits bort."

msgid ""
"Given a string representing one Unicode character, return an integer "
"representing the Unicode code point of that character.  For example, "
"``ord('a')`` returns the integer ``97`` and ``ord('€')`` (Euro sign) returns "
"``8364``.  This is the inverse of :func:`chr`."
msgstr ""
"Givet en sträng som representerar ett Unicode-tecken, returnerar ett heltal "
"som representerar Unicode-kodpunkten för det tecknet.  Till exempel, "
"``ord('a')`` returnerar heltalet ``97`` och ``ord('€')`` (Euro-tecken) "
"returnerar ``8364``.  Detta är inversen av :func:`chr`."

msgid ""
"Return *base* to the power *exp*; if *mod* is present, return *base* to the "
"power *exp*, modulo *mod* (computed more efficiently than ``pow(base, exp) % "
"mod``). The two-argument form ``pow(base, exp)`` is equivalent to using the "
"power operator: ``base**exp``."
msgstr ""
"Returnerar *bas* till potensen *exp*; om *mod* finns, returneras *bas* till "
"potensen *exp*, modulo *mod* (beräknas effektivare än ``pow(bas, exp) % "
"mod``). Formen ``pow(base, exp)`` med två argument är likvärdig med att "
"använda potensoperatorn: ``base**exp``."

msgid ""
"The arguments must have numeric types.  With mixed operand types, the "
"coercion rules for binary arithmetic operators apply.  For :class:`int` "
"operands, the result has the same type as the operands (after coercion) "
"unless the second argument is negative; in that case, all arguments are "
"converted to float and a float result is delivered.  For example, ``pow(10, "
"2)`` returns ``100``, but ``pow(10, -2)`` returns ``0.01``.  For a negative "
"base of type :class:`int` or :class:`float` and a non-integral exponent, a "
"complex result is delivered.  For example, ``pow(-9, 0.5)`` returns a value "
"close to ``3j``. Whereas, for a negative base of type :class:`int` or :class:"
"`float` with an integral exponent, a float result is delivered. For example, "
"``pow(-9, 2.0)`` returns ``81.0``."
msgstr ""
"Argumenten måste vara av numerisk typ.  Med blandade operandtyper gäller "
"koercitionsreglerna för binära aritmetiska operatorer.  För :class:`int`-"
"operander har resultatet samma typ som operanderna (efter coercion) om inte "
"det andra argumentet är negativt; i så fall konverteras alla argument till "
"float och ett float-resultat levereras.  Till exempel ger ``pow(10, 2)`` "
"``100``, men ``pow(10, -2)`` ger ``0,01``.  För en negativ bas av typen :"
"class:`int` eller :class:`float` och en icke-integral exponent, levereras "
"ett komplext resultat.  Till exempel ger ``pow(-9, 0,5)`` ett värde nära "
"``3j``. För en negativ bas av typen :class:`int` eller :class:`float` med en "
"integrerad exponent levereras däremot ett float-resultat. Till exempel, "
"``pow(-9, 2.0)`` returnerar ``81.0``."

msgid ""
"For :class:`int` operands *base* and *exp*, if *mod* is present, *mod* must "
"also be of integer type and *mod* must be nonzero. If *mod* is present and "
"*exp* is negative, *base* must be relatively prime to *mod*. In that case, "
"``pow(inv_base, -exp, mod)`` is returned, where *inv_base* is an inverse to "
"*base* modulo *mod*."
msgstr ""
"För :class:`int`-operanderna *base* och *exp* gäller att om *mod* förekommer "
"måste *mod* också vara av heltalstyp och *mod* måste vara icke-noll. Om "
"*mod* finns och *exp* är negativ, måste *base* vara relativt primtal till "
"*mod*. I så fall returneras ``pow(inv_base, -exp, mod)``, där *inv_base* är "
"en invers till *base* modulo *mod*."

msgid "Here's an example of computing an inverse for ``38`` modulo ``97``::"
msgstr "Här är ett exempel på att beräkna en invers för ``38`` modulo ``97``::"

msgid ""
">>> pow(38, -1, mod=97)\n"
"23\n"
">>> 23 * 38 % 97 == 1\n"
"True"
msgstr ""
">>> pow(38, -1, mod=97)\n"
"23\n"
">>> 23 * 38 % 97 == 1\n"
"Sant"

msgid ""
"For :class:`int` operands, the three-argument form of ``pow`` now allows the "
"second argument to be negative, permitting computation of modular inverses."
msgstr ""
"För :class:`int`-operander tillåter nu treargumentformen av ``pow`` att det "
"andra argumentet är negativt, vilket möjliggör beräkning av modulära "
"inverser."

msgid ""
"Allow keyword arguments.  Formerly, only positional arguments were supported."
msgstr ""
"Tillåt nyckelordsargument.  Tidigare stöddes endast positionella argument."

msgid ""
"Print *objects* to the text stream *file*, separated by *sep* and followed "
"by *end*.  *sep*, *end*, *file*, and *flush*, if present, must be given as "
"keyword arguments."
msgstr ""
"Skriver ut *objekt* till textflödet *file*, separerade med *sep* och följda "
"av *end*.  *sep*, *end*, *file* och *flush*, om de finns, måste anges som "
"nyckelordsargument."

msgid ""
"All non-keyword arguments are converted to strings like :func:`str` does and "
"written to the stream, separated by *sep* and followed by *end*.  Both *sep* "
"and *end* must be strings; they can also be ``None``, which means to use the "
"default values.  If no *objects* are given, :func:`print` will just write "
"*end*."
msgstr ""
"Alla argument som inte är nyckelord konverteras till strängar som :func:"
"`str` gör och skrivs till strömmen, separerade med *sep* och följda av "
"*end*.  Både *sep* och *end* måste vara strängar; de kan också vara "
"``None``, vilket innebär att standardvärdena används.  Om inga *objekt* "
"anges kommer :func:`print` bara att skriva *end*."

msgid ""
"The *file* argument must be an object with a ``write(string)`` method; if it "
"is not present or ``None``, :data:`sys.stdout` will be used.  Since printed "
"arguments are converted to text strings, :func:`print` cannot be used with "
"binary mode file objects.  For these, use ``file.write(...)`` instead."
msgstr ""
"Argumentet *file* måste vara ett objekt med en ``write(string)``-metod; om "
"det inte finns eller om det är ``None``, kommer :data:`sys.stdout` att "
"användas.  Eftersom utskrivna argument konverteras till textsträngar kan :"
"func:`print` inte användas med filobjekt i binärt läge.  För dessa används "
"istället ``file.write(...)``."

msgid ""
"Output buffering is usually determined by *file*. However, if *flush* is "
"true, the stream is forcibly flushed."
msgstr ""
"Buffring av utdata bestäms vanligtvis av *file*. Men om *flush* är true, "
"spolas strömmen med våld."

msgid "Added the *flush* keyword argument."
msgstr "Lagt till nyckelordsargumentet *flush*."

msgid "Return a property attribute."
msgstr "Returnerar ett egenskapsattribut."

msgid ""
"*fget* is a function for getting an attribute value.  *fset* is a function "
"for setting an attribute value. *fdel* is a function for deleting an "
"attribute value.  And *doc* creates a docstring for the attribute."
msgstr ""
"*fget* är en funktion för att hämta ett attributvärde.  *fset* är en "
"funktion för att ställa in ett attributvärde. *fdel* är en funktion för att "
"ta bort ett attributvärde.  Och *doc* skapar en docstring för attributet."

msgid "A typical use is to define a managed attribute ``x``::"
msgstr "En typisk användning är att definiera ett hanterat attribut ``x``::"

msgid ""
"class C:\n"
"    def __init__(self):\n"
"        self._x = None\n"
"\n"
"    def getx(self):\n"
"        return self._x\n"
"\n"
"    def setx(self, value):\n"
"        self._x = value\n"
"\n"
"    def delx(self):\n"
"        del self._x\n"
"\n"
"    x = property(getx, setx, delx, \"I'm the 'x' property.\")"
msgstr ""
"klass C:\n"
"    def __init__(self):\n"
"        self._x = Ingen\n"
"\n"
"    def getx(self):\n"
"        returnera self._x\n"
"\n"
"    def setx(self, värde):\n"
"        self._x = värde\n"
"\n"
"    def delx(self):\n"
"        del self._x\n"
"\n"
"    x = property(getx, setx, delx, \"Jag är egenskapen 'x'.\")"

msgid ""
"If *c* is an instance of *C*, ``c.x`` will invoke the getter, ``c.x = "
"value`` will invoke the setter, and ``del c.x`` the deleter."
msgstr ""
"Om *c* är en instans av *C*, kommer ``c.x`` att anropa getter, ``c.x = "
"value`` kommer att anropa setter och ``del c.x`` deleter."

msgid ""
"If given, *doc* will be the docstring of the property attribute. Otherwise, "
"the property will copy *fget*'s docstring (if it exists).  This makes it "
"possible to create read-only properties easily using :func:`property` as a :"
"term:`decorator`::"
msgstr ""
"Om den anges kommer *doc* att vara docstring för egenskapens attribut. "
"Annars kommer egenskapen att kopiera *fget*s docstring (om den finns).  "
"Detta gör det möjligt att skapa skrivskyddade egenskaper enkelt genom att "
"använda :func:`property` som en :term:`decorator`::"

msgid ""
"class Parrot:\n"
"    def __init__(self):\n"
"        self._voltage = 100000\n"
"\n"
"    @property\n"
"    def voltage(self):\n"
"        \"\"\"Get the current voltage.\"\"\"\n"
"        return self._voltage"
msgstr ""
"klass Papegoja:\n"
"    def __init__(self):\n"
"        self._voltage = 100000\n"
"\n"
"    @egenskap\n"
"    def voltage(self):\n"
"        \"\"\"Hämta den aktuella spänningen.\"\"\"\n"
"        returnera self._voltage"

msgid ""
"The ``@property`` decorator turns the :meth:`!voltage` method into a "
"\"getter\" for a read-only attribute with the same name, and it sets the "
"docstring for *voltage* to \"Get the current voltage.\""
msgstr ""
"Dekoratorn ``@property`` förvandlar metoden :meth:`!voltage` till en "
"\"getter\" för ett skrivskyddat attribut med samma namn och sätter docstring "
"för *voltage* till \"Get the current voltage\""

msgid ""
"A property object has ``getter``, ``setter``, and ``deleter`` methods usable "
"as decorators that create a copy of the property with the corresponding "
"accessor function set to the decorated function.  This is best explained "
"with an example:"
msgstr ""
"Ett egenskapsobjekt har metoderna ``getter``, ``etter`` och ``deleter`` som "
"kan användas som dekoratorer som skapar en kopia av egenskapen med "
"motsvarande accessorfunktion inställd på den dekorerade funktionen.  Detta "
"förklaras bäst med ett exempel:"

msgid ""
"class C:\n"
"    def __init__(self):\n"
"        self._x = None\n"
"\n"
"    @property\n"
"    def x(self):\n"
"        \"\"\"I'm the 'x' property.\"\"\"\n"
"        return self._x\n"
"\n"
"    @x.setter\n"
"    def x(self, value):\n"
"        self._x = value\n"
"\n"
"    @x.deleter\n"
"    def x(self):\n"
"        del self._x"
msgstr ""
"klass C:\n"
"    def __init__(self):\n"
"        self._x = Ingen\n"
"\n"
"    @egenskap\n"
"    def x(self):\n"
"        \"\"\"Jag är egenskapen 'x'.\"\"\"\n"
"        returnera self._x\n"
"\n"
"    @x.inställare\n"
"    def x(self, värde):\n"
"        self._x = värde\n"
"\n"
"    @x.borttagare\n"
"    def x(self):\n"
"        del self._x"

msgid ""
"This code is exactly equivalent to the first example.  Be sure to give the "
"additional functions the same name as the original property (``x`` in this "
"case.)"
msgstr ""
"Denna kod är exakt likvärdig med det första exemplet.  Var noga med att ge "
"de ytterligare funktionerna samma namn som den ursprungliga egenskapen "
"(``x`` i det här fallet.)"

msgid ""
"The returned property object also has the attributes ``fget``, ``fset``, and "
"``fdel`` corresponding to the constructor arguments."
msgstr ""
"Det returnerade egenskapsobjektet har också attributen ``fget``, ``fset`` "
"och ``fdel`` som motsvarar konstruktörens argument."

msgid "The docstrings of property objects are now writeable."
msgstr "Dokumentationen av property-objekt är nu skrivbar."

msgid ""
"Attribute holding the name of the property. The name of the property can be "
"changed at runtime."
msgstr ""
"Attribut som innehåller namnet på egenskapen. Namnet på egenskapen kan "
"ändras vid körning."

msgid ""
"Rather than being a function, :class:`range` is actually an immutable "
"sequence type, as documented in :ref:`typesseq-range` and :ref:`typesseq`."
msgstr ""
"I stället för att vara en funktion är :class:`range` faktiskt en "
"oföränderlig sekvenstyp, vilket dokumenteras i :ref:`typesseq-range` och :"
"ref:`typesseq`."

msgid ""
"Return a string containing a printable representation of an object.  For "
"many types, this function makes an attempt to return a string that would "
"yield an object with the same value when passed to :func:`eval`; otherwise, "
"the representation is a string enclosed in angle brackets that contains the "
"name of the type of the object together with additional information often "
"including the name and address of the object.  A class can control what this "
"function returns for its instances by defining a :meth:`~object.__repr__` "
"method. If :func:`sys.displayhook` is not accessible, this function will "
"raise :exc:`RuntimeError`."
msgstr ""
"Returnerar en sträng som innehåller en utskriftsvänlig representation av ett "
"objekt.  För många typer försöker denna funktion returnera en sträng som "
"skulle ge ett objekt med samma värde när den skickas till :func:`eval`; "
"annars är representationen en sträng inom hakparenteser som innehåller "
"namnet på objektets typ tillsammans med ytterligare information, ofta "
"inklusive objektets namn och adress.  En klass kan styra vad denna funktion "
"returnerar för sina instanser genom att definiera en :meth:`~object."
"__repr__`-metod. Om :func:`sys.displayhook` inte är tillgänglig kommer denna "
"funktion att ge upphov till :exc:`RuntimeError`."

msgid "This class has a custom representation that can be evaluated::"
msgstr "Denna klass har en anpassad representation som kan utvärderas::"

msgid ""
"class Person:\n"
"   def __init__(self, name, age):\n"
"      self.name = name\n"
"      self.age = age\n"
"\n"
"   def __repr__(self):\n"
"      return f\"Person('{self.name}', {self.age})\""
msgstr ""
"klass Person:\n"
"   def __init__(self, namn, ålder):\n"
"      self.name = namn\n"
"      self.age = ålder\n"
"\n"
"   def __repr__(self):\n"
"      return f\"Person('{self.name}', {self.age})\""

msgid ""
"Return a reverse :term:`iterator`.  *seq* must be an object which has a :"
"meth:`~object.__reversed__` method or supports the sequence protocol (the :"
"meth:`~object.__len__` method and the :meth:`~object.__getitem__` method "
"with integer arguments starting at ``0``)."
msgstr ""
"Returnerar en omvänd :term:`iterator`.  *seq* måste vara ett objekt som har "
"en :meth:`~object.__reversed__`-metod eller som stöder sekvensprotokollet (:"
"meth:`~object.__len__`-metoden och :meth:`~object.__getitem__`-metoden med "
"heltalsargument som börjar på ``0``)."

msgid ""
"Return *number* rounded to *ndigits* precision after the decimal point.  If "
"*ndigits* is omitted or is ``None``, it returns the nearest integer to its "
"input."
msgstr ""
"Returnerar *tal* avrundat till *siffrors* precision efter decimaltecknet.  "
"Om *ndigits* utelämnas eller är ``None``, returneras det närmaste heltalet "
"till indata."

msgid ""
"For the built-in types supporting :func:`round`, values are rounded to the "
"closest multiple of 10 to the power minus *ndigits*; if two multiples are "
"equally close, rounding is done toward the even choice (so, for example, "
"both ``round(0.5)`` and ``round(-0.5)`` are ``0``, and ``round(1.5)`` is "
"``2``).  Any integer value is valid for *ndigits* (positive, zero, or "
"negative).  The return value is an integer if *ndigits* is omitted or "
"``None``. Otherwise, the return value has the same type as *number*."
msgstr ""
"För de inbyggda typer som stöder :func:`round` avrundas värden till närmaste "
"multipel av 10 i potens minus *ndigits*; om två multiplar är lika nära "
"avrundas till det jämna valet (så till exempel är både ``round(0.5)`` och "
"``round(-0.5)`` ``0``, och ``round(1.5)`` är ``2``).  Alla heltalsvärden är "
"giltiga för *siffror* (positiva, noll eller negativa).  Returvärdet är ett "
"heltal om *ndigits* utelämnas eller ``None``. I annat fall har returvärdet "
"samma typ som *number*."

msgid ""
"For a general Python object ``number``, ``round`` delegates to ``number."
"__round__``."
msgstr ""
"För ett allmänt Python-objekt ``number`` delegerar ``round`` till ``number."
"__round__``."

msgid ""
"The behavior of :func:`round` for floats can be surprising: for example, "
"``round(2.675, 2)`` gives ``2.67`` instead of the expected ``2.68``. This is "
"not a bug: it's a result of the fact that most decimal fractions can't be "
"represented exactly as a float.  See :ref:`tut-fp-issues` for more "
"information."
msgstr ""
"Beteendet hos :func:`round` för flyttal kan vara överraskande: till exempel "
"ger ``round(2,675, 2)`` ``2,67`` istället för det förväntade ``2,68``. Detta "
"är inte en bugg: det är ett resultat av det faktum att de flesta "
"decimalfraktioner inte kan representeras exakt som ett flyttal.  Se :ref:"
"`tut-fp-issues` för mer information."

msgid ""
"Return a new :class:`set` object, optionally with elements taken from "
"*iterable*.  ``set`` is a built-in class.  See :class:`set` and :ref:`types-"
"set` for documentation about this class."
msgstr ""
"Returnerar ett nytt :class:`set`-objekt, eventuellt med element hämtade från "
"*iterable*.  ``set`` är en inbyggd klass.  Se :class:`set` och :ref:`types-"
"set` för dokumentation om denna klass."

msgid ""
"For other containers see the built-in :class:`frozenset`, :class:`list`, :"
"class:`tuple`, and :class:`dict` classes, as well as the :mod:`collections` "
"module."
msgstr ""
"För andra behållare se de inbyggda klasserna :class:`frozenset`, :class:"
"`list`, :class:`tuple` och :class:`dict`, samt modulen :mod:`collections`."

msgid ""
"This is the counterpart of :func:`getattr`.  The arguments are an object, a "
"string, and an arbitrary value.  The string may name an existing attribute "
"or a new attribute.  The function assigns the value to the attribute, "
"provided the object allows it.  For example, ``setattr(x, 'foobar', 123)`` "
"is equivalent to ``x.foobar = 123``."
msgstr ""
"Detta är motsvarigheten till :func:`getattr`.  Argumenten är ett objekt, en "
"sträng och ett godtyckligt värde.  Strängen kan namnge ett befintligt "
"attribut eller ett nytt attribut.  Funktionen tilldelar värdet till "
"attributet, förutsatt att objektet tillåter det.  Exempelvis är ``setattr(x, "
"'foobar', 123)`` likvärdigt med ``x.foobar = 123``."

msgid ""
"*name* need not be a Python identifier as defined in :ref:`identifiers` "
"unless the object chooses to enforce that, for example in a custom :meth:"
"`~object.__getattribute__` or via :attr:`~object.__slots__`. An attribute "
"whose name is not an identifier will not be accessible using the dot "
"notation, but is accessible through :func:`getattr` etc.."
msgstr ""
"*name* behöver inte vara en Python-identifierare enligt definitionen i :ref:"
"`identifiers` om inte objektet väljer att tillämpa detta, t.ex. i en "
"anpassad :meth:`~object.__getattribute__` eller via :attr:`~object."
"__slots__`. Ett attribut vars namn inte är en identifierare kommer inte att "
"vara tillgängligt med hjälp av punktnotationen, men är tillgängligt via :"
"func:`getattr` etc."

msgid ""
"Since :ref:`private name mangling <private-name-mangling>` happens at "
"compilation time, one must manually mangle a private attribute's (attributes "
"with two leading underscores) name in order to set it with :func:`setattr`."
msgstr ""
"Eftersom :ref:`private name mangling <private-name-mangling>`` sker vid "
"kompilering måste man manuellt mangla ett privat attributs (attribut med två "
"inledande understreck) namn för att kunna ställa in det med :func:`setattr`."

msgid ""
"Return a :term:`slice` object representing the set of indices specified by "
"``range(start, stop, step)``.  The *start* and *step* arguments default to "
"``None``."
msgstr ""
"Returnerar ett :term:`slice`-objekt som representerar den uppsättning index "
"som anges av ``range(start, stop, step)``.  Argumenten *start* och *step* är "
"som standard ``None``."

msgid ""
"Slice objects have read-only data attributes :attr:`!start`, :attr:`!stop`, "
"and :attr:`!step` which merely return the argument values (or their "
"default).  They have no other explicit functionality; however, they are used "
"by NumPy and other third-party packages."
msgstr ""
"Slice-objekt har skrivskyddade dataattribut :attr:`!start`, :attr:`!stop` "
"och :attr:`!step` som bara returnerar argumentvärdena (eller deras "
"standardvärden).  De har ingen annan explicit funktionalitet, men de används "
"av NumPy och andra tredjepartspaket."

msgid ""
"Slice objects are also generated when extended indexing syntax is used.  For "
"example: ``a[start:stop:step]`` or ``a[start:stop, i]``.  See :func:"
"`itertools.islice` for an alternate version that returns an :term:`iterator`."
msgstr ""
"Slice-objekt genereras också när syntaxen för utökad indexering används.  "
"Till exempel: ``a[start:stop:step]`` eller ``a[start:stop, i]``.  Se :func:"
"`itertools.islice` för en alternativ version som returnerar en :term:"
"`iterator`."

msgid ""
"Slice objects are now :term:`hashable` (provided :attr:`~slice.start`, :attr:"
"`~slice.stop`, and :attr:`~slice.step` are hashable)."
msgstr ""
"Slice-objekt är nu :term:`hashable` (förutsatt att :attr:`~slice.start`, :"
"attr:`~slice.stop` och :attr:`~slice.step` är hashable)."

msgid "Return a new sorted list from the items in *iterable*."
msgstr "Returnerar en ny sorterad lista från objekten i *iterable*."

msgid ""
"Has two optional arguments which must be specified as keyword arguments."
msgstr "Har två valfria argument som måste anges som nyckelordsargument."

msgid ""
"*key* specifies a function of one argument that is used to extract a "
"comparison key from each element in *iterable* (for example, ``key=str."
"lower``).  The default value is ``None`` (compare the elements directly)."
msgstr ""
"*key* anger en funktion med ett argument som används för att extrahera en "
"jämförelsenyckel från varje element i *iterable* (t.ex. ``key=str.lower``).  "
"Standardvärdet är ``None`` (jämför elementen direkt)."

msgid ""
"*reverse* is a boolean value.  If set to ``True``, then the list elements "
"are sorted as if each comparison were reversed."
msgstr ""
"*reverse* är ett booleanskt värde.  Om värdet är satt till ``True`` sorteras "
"listelementen som om varje jämförelse vore omvänd."

msgid ""
"Use :func:`functools.cmp_to_key` to convert an old-style *cmp* function to a "
"*key* function."
msgstr ""
"Använd :func:`functools.cmp_to_key` för att konvertera en gammaldags *cmp*-"
"funktion till en *key*-funktion."

msgid ""
"The built-in :func:`sorted` function is guaranteed to be stable. A sort is "
"stable if it guarantees not to change the relative order of elements that "
"compare equal --- this is helpful for sorting in multiple passes (for "
"example, sort by department, then by salary grade)."
msgstr ""
"Den inbyggda funktionen :func:`sorted` är garanterat stabil. En sortering är "
"stabil om den garanterar att den inte ändrar den relativa ordningen för "
"element som jämförs lika --- detta är användbart för sortering i flera "
"omgångar (t.ex. sortera efter avdelning, sedan efter lönegrad)."

msgid ""
"The sort algorithm uses only ``<`` comparisons between items.  While "
"defining an :meth:`~object.__lt__` method will suffice for sorting, :PEP:`8` "
"recommends that all six :ref:`rich comparisons <comparisons>` be "
"implemented.  This will help avoid bugs when using the same data with other "
"ordering tools such as :func:`max` that rely on a different underlying "
"method.  Implementing all six comparisons also helps avoid confusion for "
"mixed type comparisons which can call reflected the :meth:`~object.__gt__` "
"method."
msgstr ""
"Sorteringsalgoritmen använder endast ``&lt;`` jämförelser mellan objekt.  "
"Även om det räcker att definiera en :meth:`~object.__lt__`-metod för "
"sortering, rekommenderar :PEP:`8` att alla sex :ref:`rich comparisons "
"<comparisons>` implementeras.  Detta hjälper till att undvika buggar när "
"samma data används med andra sorteringsverktyg som :func:`max` som förlitar "
"sig på en annan underliggande metod.  Implementering av alla sex jämförelser "
"hjälper också till att undvika förvirring för jämförelser av blandade typer "
"som kan anropa reflekterade :meth:`~object.__gt__`-metoden."

msgid ""
"For sorting examples and a brief sorting tutorial, see :ref:`sortinghowto`."
msgstr ""
"För sorteringsexempel och en kort sorteringshandledning, se :ref:"
"`sortinghowto`."

msgid "Transform a method into a static method."
msgstr "Omvandla en metod till en statisk metod."

msgid ""
"A static method does not receive an implicit first argument. To declare a "
"static method, use this idiom::"
msgstr ""
"En statisk metod får inte något implicit första argument. För att deklarera "
"en statisk metod, använd detta idiom::"

msgid ""
"class C:\n"
"    @staticmethod\n"
"    def f(arg1, arg2, argN): ..."
msgstr ""
"klass C:\n"
"    @statiskmetod\n"
"    def f(arg1, arg2, argN): ..."

msgid ""
"The ``@staticmethod`` form is a function :term:`decorator` -- see :ref:"
"`function` for details."
msgstr ""
"Formen ``@staticmethod`` är en funktion :term:`decorator` -- se :ref:"
"`function` för detaljer."

msgid ""
"A static method can be called either on the class (such as ``C.f()``) or on "
"an instance (such as ``C().f()``). Moreover, the static method :term:"
"`descriptor` is also callable, so it can be used in the class definition "
"(such as ``f()``)."
msgstr ""
"En statisk metod kan anropas antingen på klassen (t.ex. ``C.f()``) eller på "
"en instans (t.ex. ``C().f()``). Dessutom är den statiska metoden :term:"
"`descriptor` också anropsbar, så den kan användas i klassdefinitionen (t.ex. "
"``f()``)."

msgid ""
"Static methods in Python are similar to those found in Java or C++. Also, "
"see :func:`classmethod` for a variant that is useful for creating alternate "
"class constructors."
msgstr ""
"Statiska metoder i Python liknar dem som finns i Java eller C++. Se även :"
"func:`classmethod` för en variant som är användbar för att skapa alternativa "
"klasskonstruktörer."

msgid ""
"Like all decorators, it is also possible to call ``staticmethod`` as a "
"regular function and do something with its result.  This is needed in some "
"cases where you need a reference to a function from a class body and you "
"want to avoid the automatic transformation to instance method.  For these "
"cases, use this idiom::"
msgstr ""
"Som alla dekoratorer är det också möjligt att anropa ``staticmethod`` som en "
"vanlig funktion och göra något med dess resultat.  Detta behövs i vissa fall "
"där du behöver en referens till en funktion från en klass och du vill "
"undvika den automatiska omvandlingen till instansmetod.  För dessa fall, "
"använd detta idiom::"

msgid ""
"def regular_function():\n"
"    ...\n"
"\n"
"class C:\n"
"    method = staticmethod(regular_function)"
msgstr ""
"def vanlig_funktion():\n"
"    ...\n"
"\n"
"klass C:\n"
"    method = staticmethod(regular_function)"

msgid "For more information on static methods, see :ref:`types`."
msgstr "För mer information om statiska metoder, se :ref:`types`."

msgid ""
"Static methods now inherit the method attributes (:attr:`~function."
"__module__`, :attr:`~function.__name__`, :attr:`~function.__qualname__`, :"
"attr:`~function.__doc__` and :attr:`~function.__annotations__`), have a new "
"``__wrapped__`` attribute, and are now callable as regular functions."
msgstr ""
"Statiska metoder ärver nu metodattributen (:attr:`~function.__module__`, :"
"attr:`~function.__name__`, :attr:`~function.__qualname__`, :attr:`~function."
"__doc__` och :attr:`~function.__annotations__`), har ett nytt attribut "
"``__wrapped__`` och kan nu anropas som vanliga funktioner."

msgid ""
"Return a :class:`str` version of *object*.  See :func:`str` for details."
msgstr ""
"Returnerar en :class:`str`-version av *object*.  Se :func:`str` för detaljer."

msgid ""
"``str`` is the built-in string :term:`class`.  For general information about "
"strings, see :ref:`textseq`."
msgstr ""
"``str`` är den inbyggda strängen :term:`class`.  För allmän information om "
"strängar, se :ref:`textseq`."

msgid ""
"Sums *start* and the items of an *iterable* from left to right and returns "
"the total.  The *iterable*'s items are normally numbers, and the start value "
"is not allowed to be a string."
msgstr ""
"Summerar *start* och posterna i en *iterabel* från vänster till höger och "
"returnerar totalsumman.  Posterna i *iterabeln* är normalt tal och "
"startvärdet får inte vara en sträng."

msgid ""
"For some use cases, there are good alternatives to :func:`sum`. The "
"preferred, fast way to concatenate a sequence of strings is by calling ``''."
"join(sequence)``.  To add floating-point values with extended precision, "
"see :func:`math.fsum`\\.  To concatenate a series of iterables, consider "
"using :func:`itertools.chain`."
msgstr ""
"För vissa användningsfall finns det bra alternativ till :func:`sum`. Det "
"föredragna, snabba sättet att sammanfoga en sekvens av strängar är genom att "
"anropa ``''.join(sequence)``.  För att lägga till flyttalsvärden med utökad "
"precision, se :func:`math.fsum`.  För att konkatenera en serie iterabler, "
"överväg att använda :func:`itertools.chain`."

msgid "The *start* parameter can be specified as a keyword argument."
msgstr "Parametern *start* kan anges som ett nyckelordsargument."

msgid ""
"Summation of floats switched to an algorithm that gives higher accuracy and "
"better commutativity on most builds."
msgstr ""
"Summering av flyttal har bytts till en algoritm som ger högre noggrannhet "
"och bättre kommutativitet på de flesta byggen."

msgid ""
"Added specialization for summation of complexes, using same algorithm as for "
"summation of floats."
msgstr ""
"Lagt till specialisering för summering av komplex, med samma algoritm som "
"för summering av flyttal."

msgid ""
"Return a proxy object that delegates method calls to a parent or sibling "
"class of *type*.  This is useful for accessing inherited methods that have "
"been overridden in a class."
msgstr ""
"Returnerar ett proxyobjekt som delegerar metodanrop till en överordnad eller "
"syskonklass av *typ*.  Detta är användbart för att komma åt ärvda metoder "
"som har åsidosatts i en klass."

msgid ""
"The *object_or_type* determines the :term:`method resolution order` to be "
"searched.  The search starts from the class right after the *type*."
msgstr ""
"*Object_or_type* bestämmer vilken :term:`method resolution order` som ska "
"sökas.  Sökningen börjar från klassen direkt efter *typ*."

msgid ""
"For example, if :attr:`~type.__mro__` of *object_or_type* is ``D -> B -> C -"
"> A -> object`` and the value of *type* is ``B``, then :func:`super` "
"searches ``C -> A -> object``."
msgstr ""
"Till exempel, om :attr:`~type.__mro__` av *object_or_type* är ``D -> B -> C -"
"> A -> object`` och värdet av *type* är ``B``, då söker :func:`super` ``C -> "
"A -> object``."

msgid ""
"The :attr:`~type.__mro__` attribute of the class corresponding to "
"*object_or_type* lists the method resolution search order used by both :func:"
"`getattr` and :func:`super`.  The attribute is dynamic and can change "
"whenever the inheritance hierarchy is updated."
msgstr ""
"Attributet :attr:`~type.__mro__` i den klass som motsvarar *object_or_type* "
"listar den sökordning för metodupplösning som används av både :func:"
"`getattr` och :func:`super`.  Attributet är dynamiskt och kan ändras när "
"arvshierarkin uppdateras."

msgid ""
"If the second argument is omitted, the super object returned is unbound.  If "
"the second argument is an object, ``isinstance(obj, type)`` must be true.  "
"If the second argument is a type, ``issubclass(type2, type)`` must be true "
"(this is useful for classmethods)."
msgstr ""
"Om det andra argumentet utelämnas är det superobjekt som returneras "
"obundet.  Om det andra argumentet är ett objekt måste ``isinstance(obj, "
"type)`` vara true.  Om det andra argumentet är en typ måste "
"``issubclass(type2, type)`` vara true (detta är användbart för classmethods)."

msgid ""
"When called directly within an ordinary method of a class, both arguments "
"may be omitted (\"zero-argument :func:`!super`\"). In this case, *type* will "
"be the enclosing class, and *obj* will be the first argument of the "
"immediately enclosing function (typically ``self``). (This means that zero-"
"argument :func:`!super` will not work as expected within nested functions, "
"including generator expressions, which implicitly create nested functions.)"
msgstr ""
"Vid anrop direkt inom en vanlig metod i en klass kan båda argumenten "
"utelämnas (\"zero-argument :func:`!super`\"). I detta fall kommer *type* att "
"vara den inneslutande klassen och *obj* kommer att vara det första "
"argumentet i den omedelbart inneslutande funktionen (vanligtvis ``self``). "
"(Detta innebär att nollargumentet :func:`!super` inte fungerar som förväntat "
"inom nästlade funktioner, inklusive generatoruttryck, som implicit skapar "
"nästlade funktioner)"

msgid ""
"There are two typical use cases for *super*.  In a class hierarchy with "
"single inheritance, *super* can be used to refer to parent classes without "
"naming them explicitly, thus making the code more maintainable.  This use "
"closely parallels the use of *super* in other programming languages."
msgstr ""
"Det finns två typiska användningsområden för *super*.  I en klasshierarki "
"med enkel nedärvning kan *super* användas för att hänvisa till överordnade "
"klasser utan att namnge dem explicit, vilket gör koden mer lätthanterlig.  "
"Denna användning är nära parallell med användningen av *super* i andra "
"programmeringsspråk."

msgid ""
"The second use case is to support cooperative multiple inheritance in a "
"dynamic execution environment.  This use case is unique to Python and is not "
"found in statically compiled languages or languages that only support single "
"inheritance.  This makes it possible to implement \"diamond diagrams\" where "
"multiple base classes implement the same method.  Good design dictates that "
"such implementations have the same calling signature in every case (because "
"the order of calls is determined at runtime, because that order adapts to "
"changes in the class hierarchy, and because that order can include sibling "
"classes that are unknown prior to runtime)."
msgstr ""
"Det andra användningsfallet är att stödja kooperativ multipel nedärvning i "
"en dynamisk exekveringsmiljö.  Detta användningsfall är unikt för Python och "
"finns inte i statiskt kompilerade språk eller språk som bara stöder enkel "
"arvbarhet.  Detta gör det möjligt att implementera \"diamantdiagram\" där "
"flera basklasser implementerar samma metod.  God design kräver att sådana "
"implementationer har samma anropssignatur i samtliga fall (eftersom "
"anropsordningen bestäms vid körning, eftersom denna ordning anpassas till "
"förändringar i klasshierarkin och eftersom denna ordning kan omfatta "
"syskonklasser som är okända före körning)."

msgid "For both use cases, a typical superclass call looks like this::"
msgstr "För båda användningsfallen ser ett typiskt superklassanrop ut så här::"

msgid ""
"class C(B):\n"
"    def method(self, arg):\n"
"        super().method(arg)    # This does the same thing as:\n"
"                               # super(C, self).method(arg)"
msgstr ""
"klass C(B):\n"
"    def method(self, arg):\n"
"        super().method(arg) # Detta gör samma sak som:\n"
"                               # super(C, self).method(arg)"

msgid ""
"In addition to method lookups, :func:`super` also works for attribute "
"lookups.  One possible use case for this is calling :term:`descriptors "
"<descriptor>` in a parent or sibling class."
msgstr ""
"Förutom metoduppslagningar fungerar :func:`super` också för "
"attributuppslagningar.  Ett möjligt användningsfall för detta är att anropa :"
"term:`descriptors <descriptor>` i en överordnad eller syskonklass."

msgid ""
"Note that :func:`super` is implemented as part of the binding process for "
"explicit dotted attribute lookups such as ``super().__getitem__(name)``. It "
"does so by implementing its own :meth:`~object.__getattribute__` method for "
"searching classes in a predictable order that supports cooperative multiple "
"inheritance. Accordingly, :func:`super` is undefined for implicit lookups "
"using statements or operators such as ``super()[name]``."
msgstr ""
"Observera att :func:`super` implementeras som en del av bindningsprocessen "
"för uttryckliga prickade attributuppslagningar som ``super()."
"__getitem__(name)``. Den gör detta genom att implementera sin egen :meth:"
"`~object.__getattribute__`-metod för att söka klasser i en förutsägbar "
"ordning som stöder kooperativ multipel nedärvning. Följaktligen är :func:"
"`super` odefinierad för implicita uppslagningar med satser eller operatorer "
"som ``super()[name]``."

msgid ""
"Also note that, aside from the zero argument form, :func:`super` is not "
"limited to use inside methods.  The two argument form specifies the "
"arguments exactly and makes the appropriate references.  The zero argument "
"form only works inside a class definition, as the compiler fills in the "
"necessary details to correctly retrieve the class being defined, as well as "
"accessing the current instance for ordinary methods."
msgstr ""
"Observera också att :func:`super`, bortsett från formen med noll argument, "
"inte är begränsad till att användas inuti metoder.  Formen med två argument "
"specificerar argumenten exakt och gör lämpliga referenser.  Formen med "
"nollargument fungerar bara inuti en klassdefinition, eftersom kompilatorn "
"fyller i de nödvändiga detaljerna för att korrekt hämta den klass som "
"definieras, samt för att komma åt den aktuella instansen för vanliga metoder."

msgid ""
"For practical suggestions on how to design cooperative classes using :func:"
"`super`, see `guide to using super() <https://rhettinger.wordpress."
"com/2011/05/26/super-considered-super/>`_."
msgstr ""
"För praktiska förslag på hur man utformar kooperativa klasser med hjälp av :"
"func:`super`, se `guide to using super() <https://rhettinger.wordpress."
"com/2011/05/26/super-considered-super/>`_."

msgid ""
":class:`super` objects are now :mod:`pickleable <pickle>` and  :mod:"
"`copyable <copy>`."
msgstr ""
":class:`super`-objekt är nu :mod:`pickleable <pickle>` och :mod:`copyable "
"<copy>`."

msgid ""
"Rather than being a function, :class:`tuple` is actually an immutable "
"sequence type, as documented in :ref:`typesseq-tuple` and :ref:`typesseq`."
msgstr ""
"I stället för att vara en funktion är :class:`tuple` faktiskt en "
"oföränderlig sekvenstyp, vilket dokumenteras i :ref:`typesseq-tuple` och :"
"ref:`typesseq`."

msgid ""
"With one argument, return the type of an *object*.  The return value is a "
"type object and generally the same object as returned by :attr:`object."
"__class__`."
msgstr ""
"Returnerar typen av ett *objekt* med ett argument.  Returvärdet är ett "
"typobjekt och i allmänhet samma objekt som returneras av :attr:`object."
"__class__`."

msgid ""
"The :func:`isinstance` built-in function is recommended for testing the type "
"of an object, because it takes subclasses into account."
msgstr ""
"Den inbyggda funktionen :func:`isinstance` rekommenderas för att testa typen "
"av ett objekt, eftersom den tar hänsyn till underklasser."

msgid ""
"With three arguments, return a new type object.  This is essentially a "
"dynamic form of the :keyword:`class` statement. The *name* string is the "
"class name and becomes the :attr:`~type.__name__` attribute. The *bases* "
"tuple contains the base classes and becomes the :attr:`~type.__bases__` "
"attribute; if empty, :class:`object`, the ultimate base of all classes, is "
"added.  The *dict* dictionary contains attribute and method definitions for "
"the class body; it may be copied or wrapped before becoming the :attr:`~type."
"__dict__` attribute. The following two statements create identical :class:`!"
"type` objects:"
msgstr ""
"Med tre argument, returnerar ett nytt typobjekt.  Detta är i huvudsak en "
"dynamisk form av :keyword:`class`-satsen. Strängen *name* är klassnamnet och "
"blir attributet :attr:`~type.__name__`. Tupeln *bases* innehåller "
"basklasserna och blir attributet :attr:`~type.__bases__`; om den är tom "
"läggs :class:`object`, den yttersta basen för alla klasser, till.  "
"Dictionariet *dict* innehåller attribut- och metoddefinitioner för klassens "
"kropp; det kan kopieras eller omslutas innan det blir attributet :attr:"
"`~type.__dict__`. Följande två satser skapar identiska :class:`!type`-objekt:"

msgid "See also:"
msgstr "Se även nedan:"

msgid ""
":ref:`Documentation on attributes and methods on classes <class-attrs-and-"
"methods>`."
msgstr ""
":ref:`Dokumentation om attribut och metoder för klasser <class-attrs-and-"
"methods>`."

msgid ":ref:`bltin-type-objects`"
msgstr ":ref:`bltin-typ-objekt`"

msgid ""
"Keyword arguments provided to the three argument form are passed to the "
"appropriate metaclass machinery (usually :meth:`~object.__init_subclass__`) "
"in the same way that keywords in a class definition (besides *metaclass*) "
"would."
msgstr ""
"Nyckelordsargument som anges i formuläret med tre argument skickas till "
"lämplig metaklassmekanism (vanligtvis :meth:`~object.__init_subclass__`) på "
"samma sätt som nyckelord i en klassdefinition (förutom *metaklass*)."

msgid "See also :ref:`class-customization`."
msgstr "Se även :ref:`class-customization`."

msgid ""
"Subclasses of :class:`!type` which don't override ``type.__new__`` may no "
"longer use the one-argument form to get the type of an object."
msgstr ""
"Underklasser till :class:`!type` som inte åsidosätter ``type.__new__`` får "
"inte längre använda ett-argument-formuläret för att få fram typen av ett "
"objekt."

msgid ""
"Return the :attr:`~object.__dict__` attribute for a module, class, instance, "
"or any other object with a :attr:`!__dict__` attribute."
msgstr ""
"Returnerar attributet :attr:`~object.__dict__` för en modul, klass, instans "
"eller något annat objekt med attributet :attr:`!__dict__`."

msgid ""
"Objects such as modules and instances have an updateable :attr:`~object."
"__dict__` attribute; however, other objects may have write restrictions on "
"their :attr:`!__dict__` attributes (for example, classes use a :class:`types."
"MappingProxyType` to prevent direct dictionary updates)."
msgstr ""
"Objekt som moduler och instanser har ett uppdaterbart attribut :attr:"
"`~object.__dict__`, men andra objekt kan ha skrivbegränsningar på sina "
"attribut :attr:`!__dict__` (klasser använder t.ex. en :class:`types."
"MappingProxyType` för att förhindra direkta uppdateringar av ordlistan)."

msgid "Without an argument, :func:`vars` acts like :func:`locals`."
msgstr "Utan ett argument fungerar :func:`vars` som :func:`locals`."

msgid ""
"A :exc:`TypeError` exception is raised if an object is specified but it "
"doesn't have a :attr:`~object.__dict__` attribute (for example, if its class "
"defines the :attr:`~object.__slots__` attribute)."
msgstr ""
"Ett undantag av typen :exc:`TypeError` uppstår om ett objekt anges men det "
"inte har något attribut :attr:`~object.__dict__` (t.ex. om dess klass "
"definierar attributet :attr:`~object.__slots__`)."

msgid ""
"The result of calling this function without an argument has been updated as "
"described for the :func:`locals` builtin."
msgstr ""
"Resultatet av att anropa denna funktion utan ett argument har uppdaterats "
"enligt beskrivningen för :func:`locals` builtin."

msgid ""
"Iterate over several iterables in parallel, producing tuples with an item "
"from each one."
msgstr ""
"Iterera över flera iterabler parallellt och producera tuples med ett objekt "
"från var och en."

msgid "Example::"
msgstr "Exempel::"

msgid ""
">>> for item in zip([1, 2, 3], ['sugar', 'spice', 'everything nice']):\n"
"...     print(item)\n"
"...\n"
"(1, 'sugar')\n"
"(2, 'spice')\n"
"(3, 'everything nice')"
msgstr ""
">>> for item in zip([1, 2, 3], ['sugar', 'spice', 'everything nice']):\n"
"... print(objekt)\n"
"...\n"
"(1, 'socker')\n"
"(2, 'krydda')\n"
"(3, 'allting gott')"

msgid ""
"More formally: :func:`zip` returns an iterator of tuples, where the *i*-th "
"tuple contains the *i*-th element from each of the argument iterables."
msgstr ""
"Mer formellt: :func:`zip` returnerar en iterator av tupler, där den *i*:e "
"tupeln innehåller det *i*:e elementet från var och en av argumentets "
"iterabler."

msgid ""
"Another way to think of :func:`zip` is that it turns rows into columns, and "
"columns into rows.  This is similar to `transposing a matrix <https://en."
"wikipedia.org/wiki/Transpose>`_."
msgstr ""
"Ett annat sätt att tänka på :func:`zip` är att den förvandlar rader till "
"kolumner och kolumner till rader.  Detta liknar `transponering av en matris "
"<https://en.wikipedia.org/wiki/Transpose>`_."

msgid ""
":func:`zip` is lazy: The elements won't be processed until the iterable is "
"iterated on, e.g. by a :keyword:`!for` loop or by wrapping in a :class:"
"`list`."
msgstr ""
":func:`zip` är lat: Elementen kommer inte att bearbetas förrän iterabeln "
"itereras, t.ex. genom en :keyword:`!for`-loop eller genom att packas in i "
"en :class:`list`."

msgid ""
"One thing to consider is that the iterables passed to :func:`zip` could have "
"different lengths; sometimes by design, and sometimes because of a bug in "
"the code that prepared these iterables.  Python offers three different "
"approaches to dealing with this issue:"
msgstr ""
"En sak att tänka på är att de iterabler som skickas till :func:`zip` kan ha "
"olika längd; ibland på grund av design, och ibland på grund av en bugg i "
"koden som förberedde dessa iterabler.  Python erbjuder tre olika sätt att "
"hantera detta problem:"

msgid ""
"By default, :func:`zip` stops when the shortest iterable is exhausted. It "
"will ignore the remaining items in the longer iterables, cutting off the "
"result to the length of the shortest iterable::"
msgstr ""
"Som standard stoppar :func:`zip` när den kortaste iterabeln är uttömd. Den "
"ignorerar de återstående objekten i de längre iterationerna och skär av "
"resultatet till längden på den kortaste iterationen:"

msgid ""
">>> list(zip(range(3), ['fee', 'fi', 'fo', 'fum']))\n"
"[(0, 'fee'), (1, 'fi'), (2, 'fo')]"
msgstr ""
">>> list(zip(range(3), ['fee', 'fi', 'fo', 'fum']))\n"
"[(0, \"fee\"), (1, \"fi\"), (2, \"fo\")]"

msgid ""
":func:`zip` is often used in cases where the iterables are assumed to be of "
"equal length.  In such cases, it's recommended to use the ``strict=True`` "
"option. Its output is the same as regular :func:`zip`::"
msgstr ""
":func:`zip` används ofta i fall där iterablerna antas vara lika långa.  I "
"sådana fall rekommenderas det att använda alternativet ``strict=True``. Dess "
"utdata är samma som vanliga :func:`zip`::"

msgid ""
">>> list(zip(('a', 'b', 'c'), (1, 2, 3), strict=True))\n"
"[('a', 1), ('b', 2), ('c', 3)]"
msgstr ""
">>> list(zip(('a', 'b', 'c'), (1, 2, 3), strict=True))\n"
"[('a', 1), ('b', 2), ('c', 3)]"

msgid ""
"Unlike the default behavior, it raises a :exc:`ValueError` if one iterable "
"is exhausted before the others:"
msgstr ""
"Till skillnad från standardbeteendet ger det upphov till ett :exc:"
"`ValueError` om en iterabel är uttömd före de andra:"

msgid ""
"Without the ``strict=True`` argument, any bug that results in iterables of "
"different lengths will be silenced, possibly manifesting as a hard-to-find "
"bug in another part of the program."
msgstr ""
"Utan argumentet ``strict=True`` kommer alla buggar som resulterar i "
"iterabler av olika längd att tystas ner och eventuellt manifesteras som en "
"svårfunnen bugg i en annan del av programmet."

msgid ""
"Shorter iterables can be padded with a constant value to make all the "
"iterables have the same length.  This is done by :func:`itertools."
"zip_longest`."
msgstr ""
"Kortare iterabler kan fyllas på med ett konstant värde så att alla iterabler "
"blir lika långa.  Detta görs med :func:`itertools.zip_longest`."

msgid ""
"Edge cases: With a single iterable argument, :func:`zip` returns an iterator "
"of 1-tuples.  With no arguments, it returns an empty iterator."
msgstr ""
"Gränsfall: Med ett enda iterabelt argument returnerar :func:`zip` en "
"iterator av 1-tupler.  Utan argument returnerar den en tom iterator."

msgid "Tips and tricks:"
msgstr "Tips och tricks:"

msgid ""
"The left-to-right evaluation order of the iterables is guaranteed. This "
"makes possible an idiom for clustering a data series into n-length groups "
"using ``zip(*[iter(s)]*n, strict=True)``.  This repeats the *same* iterator "
"``n`` times so that each output tuple has the result of ``n`` calls to the "
"iterator. This has the effect of dividing the input into n-length chunks."
msgstr ""
"Utvärderingsordningen från vänster till höger för iterablerna är garanterad. "
"Detta möjliggör ett idiom för att klustra en dataserie i grupper med n "
"längder med hjälp av ``zip(*[iter(s)]*n, strict=True)``.  Detta upprepar "
"*samma* iterator ``n`` gånger så att varje utmatad tupel har resultatet av "
"``n`` anrop till iteratorn. Detta har effekten att inmatningen delas upp i n-"
"långa bitar."

msgid ""
":func:`zip` in conjunction with the ``*`` operator can be used to unzip a "
"list::"
msgstr ""
":func:`zip` i kombination med operatorn ``*`` kan användas för att packa upp "
"en lista::"

msgid ""
">>> x = [1, 2, 3]\n"
">>> y = [4, 5, 6]\n"
">>> list(zip(x, y))\n"
"[(1, 4), (2, 5), (3, 6)]\n"
">>> x2, y2 = zip(*zip(x, y))\n"
">>> x == list(x2) and y == list(y2)\n"
"True"
msgstr ""
">>> x = [1, 2, 3]\n"
">>> y = [4, 5, 6]\n"
">>> list(zip(x, y))\n"
"[(1, 4), (2, 5), (3, 6)]\n"
">>> x2, y2 = zip(*zip(x, y))\n"
">>> x == list(x2) och y == list(y2)\n"
"Sant"

msgid "Added the ``strict`` argument."
msgstr "Lagt till argumentet ``strict``."

msgid ""
"This is an advanced function that is not needed in everyday Python "
"programming, unlike :func:`importlib.import_module`."
msgstr ""
"Detta är en avancerad funktion som inte behövs i vardaglig Python-"
"programmering, till skillnad från :func:`importlib.import_module`."

msgid ""
"This function is invoked by the :keyword:`import` statement.  It can be "
"replaced (by importing the :mod:`builtins` module and assigning to "
"``builtins.__import__``) in order to change semantics of the :keyword:`!"
"import` statement, but doing so is **strongly** discouraged as it is usually "
"simpler to use import hooks (see :pep:`302`) to attain the same goals and "
"does not cause issues with code which assumes the default import "
"implementation is in use.  Direct use of :func:`__import__` is also "
"discouraged in favor of :func:`importlib.import_module`."
msgstr ""
"Denna funktion anropas av :keyword:`import`-satsen.  Den kan ersättas (genom "
"att importera :mod:`builtins`-modulen och tilldela den ``builtins."
"__import__``) för att ändra semantiken i :keyword:`!import`-satsen, men att "
"göra det är **starkt** avrått eftersom det vanligtvis är enklare att använda "
"importkrokar (se :pep:`302`) för att uppnå samma mål och inte orsakar "
"problem med kod som antar att standardimplementeringen av import används.  "
"Direkt användning av :func:`__import__` avråds också till förmån för :func:"
"`importlib.import_module`."

msgid ""
"The function imports the module *name*, potentially using the given "
"*globals* and *locals* to determine how to interpret the name in a package "
"context. The *fromlist* gives the names of objects or submodules that should "
"be imported from the module given by *name*.  The standard implementation "
"does not use its *locals* argument at all and uses its *globals* only to "
"determine the package context of the :keyword:`import` statement."
msgstr ""
"Funktionen importerar modulen *name*, eventuellt med hjälp av de angivna "
"*globals* och *locals* för att avgöra hur namnet ska tolkas i en "
"paketkontext. *fromlist* anger namnen på de objekt eller undermoduler som "
"ska importeras från den modul som anges med *name*.  "
"Standardimplementeringen använder inte *locals*-argumentet alls och använder "
"*globals* endast för att bestämma paketkontexten för :keyword:`import`-"
"satsen."

msgid ""
"*level* specifies whether to use absolute or relative imports. ``0`` (the "
"default) means only perform absolute imports.  Positive values for *level* "
"indicate the number of parent directories to search relative to the "
"directory of the module calling :func:`__import__` (see :pep:`328` for the "
"details)."
msgstr ""
"*level* anger om absolut eller relativ import ska användas. ``0`` (standard) "
"innebär att endast absolut import utförs.  Positiva värden för *level* anger "
"antalet överordnade kataloger som ska sökas i förhållande till katalogen för "
"den modul som anropar :func:`__import__` (se :pep:`328` för detaljer)."

msgid ""
"When the *name* variable is of the form ``package.module``, normally, the "
"top-level package (the name up till the first dot) is returned, *not* the "
"module named by *name*.  However, when a non-empty *fromlist* argument is "
"given, the module named by *name* is returned."
msgstr ""
"När variabeln *name* är av formen ``package.module`` returneras normalt "
"paketet på högsta nivån (namnet fram till första punkten), *inte* den modul "
"som namnges av *name*.  Men när ett icke-tomt *fromlist*-argument anges, "
"returneras den modul som namnges av *name*."

msgid ""
"For example, the statement ``import spam`` results in bytecode resembling "
"the following code::"
msgstr ""
"Till exempel resulterar uttalandet ``import spam`` i bytekod som liknar "
"följande kod::"

msgid "spam = __import__('spam', globals(), locals(), [], 0)"
msgstr "spam = __import__('spam', globals(), locals(), [], 0)"

msgid "The statement ``import spam.ham`` results in this call::"
msgstr "Satsen ``import spam.ham`` resulterar i detta anrop::"

msgid "spam = __import__('spam.ham', globals(), locals(), [], 0)"
msgstr "spam = __import__('spam.ham', globals(), locals(), [], 0)"

msgid ""
"Note how :func:`__import__` returns the toplevel module here because this is "
"the object that is bound to a name by the :keyword:`import` statement."
msgstr ""
"Observera att :func:`__import__` returnerar toplevel-modulen här, eftersom "
"det är det objekt som är bundet till ett namn av :keyword:`import`-satsen."

msgid ""
"On the other hand, the statement ``from spam.ham import eggs, sausage as "
"saus`` results in ::"
msgstr ""
"Å andra sidan resulterar uttalandet ``from spam.ham import eggs, sausage as "
"saus`` i ::"

msgid ""
"_temp = __import__('spam.ham', globals(), locals(), ['eggs', 'sausage'], 0)\n"
"eggs = _temp.eggs\n"
"saus = _temp.sausage"
msgstr ""
"_temp = __import__('spam.ham', globals(), locals(), ['eggs', 'sausage'], 0)\n"
"ägg = _temp.ägg\n"
"korv = _temp.korv"

msgid ""
"Here, the ``spam.ham`` module is returned from :func:`__import__`.  From "
"this object, the names to import are retrieved and assigned to their "
"respective names."
msgstr ""
"Här returneras modulen ``spam.ham`` från :func:`__import__`.  Från detta "
"objekt hämtas de namn som ska importeras och tilldelas sina respektive namn."

msgid ""
"If you simply want to import a module (potentially within a package) by "
"name, use :func:`importlib.import_module`."
msgstr ""
"Om du bara vill importera en modul (eventuellt inom ett paket) med namn, "
"använd :func:`importlib.import_module`."

msgid ""
"Negative values for *level* are no longer supported (which also changes the "
"default value to 0)."
msgstr ""
"Negativa värden för *level* stöds inte längre (vilket också innebär att "
"standardvärdet ändras till 0)."

msgid ""
"When the command line options :option:`-E` or :option:`-I` are being used, "
"the environment variable :envvar:`PYTHONCASEOK` is now ignored."
msgstr ""
"När kommandoradsalternativen :option:`-E` eller :option:`-I` används, "
"ignoreras nu miljövariabeln :envvar:`PYTHONCASEOK`."

msgid "Footnotes"
msgstr "Fotnoter"

msgid ""
"Note that the parser only accepts the Unix-style end of line convention. If "
"you are reading the code from a file, make sure to use newline conversion "
"mode to convert Windows or Mac-style newlines."
msgstr ""
"Observera att parsern endast accepterar Unix-stilens konvention för "
"radavslut. Om du läser koden från en fil, se till att använda "
"konverteringsläget för nya rader för att konvertera nya rader i Windows- "
"eller Mac-stil."

msgid "Boolean"
msgstr "Boolean"

msgid "type"
msgstr "typ"

msgid "built-in function"
msgstr "inbyggd funktion"

msgid "exec"
msgstr "avrättning"

msgid "NaN"
msgstr "NaN"

msgid "Infinity"
msgstr "Oändligt"

msgid "__format__"
msgstr "__format__"

msgid "string"
msgstr "sträng"

msgid "format() (built-in function)"
msgstr "format() (inbyggd funktion)"

msgid "file object"
msgstr "filobjekt"

msgid "open() built-in function"
msgstr "open() inbyggd funktion"

msgid "file"
msgstr "fil"

msgid "modes"
msgstr "lägen"

msgid "universal newlines"
msgstr "universella nyrader"

msgid "line-buffered I/O"
msgstr "linje-buffrad I/O"

msgid "unbuffered I/O"
msgstr "obuffrad I/O"

msgid "buffer size, I/O"
msgstr "buffertstorlek, I/O"

msgid "I/O control"
msgstr "I/O-kontroll"

msgid "buffering"
msgstr "buffring"

msgid "text mode"
msgstr "textläge"

msgid "module"
msgstr "modul"

msgid "sys"
msgstr "system"

msgid "str() (built-in function)"
msgstr "str() (inbyggd funktion)"

msgid "object"
msgstr "objekt"

msgid "statement"
msgstr "uttalande"

msgid "import"
msgstr "importera"

msgid "builtins"
msgstr "inbyggda"
