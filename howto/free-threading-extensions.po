# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-23 14:15+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "C API Extension Support for Free Threading"
msgstr ""

msgid ""
"Starting with the 3.13 release, CPython has support for running with the :"
"term:`global interpreter lock` (GIL) disabled in a configuration called :"
"term:`free threading`.  This document describes how to adapt C API "
"extensions to support free threading."
msgstr ""

msgid "Identifying the Free-Threaded Build in C"
msgstr ""

msgid ""
"The CPython C API exposes the ``Py_GIL_DISABLED`` macro: in the free-"
"threaded build it's defined to ``1``, and in the regular build it's not "
"defined. You can use it to enable code that only runs under the free-"
"threaded build::"
msgstr ""

msgid ""
"#ifdef Py_GIL_DISABLED\n"
"/* code that only runs in the free-threaded build */\n"
"#endif"
msgstr ""

msgid ""
"On Windows, this macro is not defined automatically, but must be specified "
"to the compiler when building. The :func:`sysconfig.get_config_var` function "
"can be used to determine whether the current running interpreter had the "
"macro defined."
msgstr ""

msgid "Module Initialization"
msgstr ""

msgid ""
"Extension modules need to explicitly indicate that they support running with "
"the GIL disabled; otherwise importing the extension will raise a warning and "
"enable the GIL at runtime."
msgstr ""

msgid ""
"There are two ways to indicate that an extension module supports running "
"with the GIL disabled depending on whether the extension uses multi-phase or "
"single-phase initialization."
msgstr ""

msgid "Multi-Phase Initialization"
msgstr ""

msgid ""
"Extensions that use multi-phase initialization (i.e., :c:func:"
"`PyModuleDef_Init`) should add a :c:data:`Py_mod_gil` slot in the module "
"definition.  If your extension supports older versions of CPython, you "
"should guard the slot with a :c:data:`PY_VERSION_HEX` check."
msgstr ""

msgid ""
"static struct PyModuleDef_Slot module_slots[] = {\n"
"    ...\n"
"#if PY_VERSION_HEX >= 0x030D0000\n"
"    {Py_mod_gil, Py_MOD_GIL_NOT_USED},\n"
"#endif\n"
"    {0, NULL}\n"
"};\n"
"\n"
"static struct PyModuleDef moduledef = {\n"
"    PyModuleDef_HEAD_INIT,\n"
"    .m_slots = module_slots,\n"
"    ...\n"
"};"
msgstr ""

msgid "Single-Phase Initialization"
msgstr ""

msgid ""
"Extensions that use single-phase initialization (i.e., :c:func:"
"`PyModule_Create`) should call :c:func:`PyUnstable_Module_SetGIL` to "
"indicate that they support running with the GIL disabled.  The function is "
"only defined in the free-threaded build, so you should guard the call with "
"``#ifdef Py_GIL_DISABLED`` to avoid compilation errors in the regular build."
msgstr ""

msgid ""
"static struct PyModuleDef moduledef = {\n"
"    PyModuleDef_HEAD_INIT,\n"
"    ...\n"
"};\n"
"\n"
"PyMODINIT_FUNC\n"
"PyInit_mymodule(void)\n"
"{\n"
"    PyObject *m = PyModule_Create(&moduledef);\n"
"    if (m == NULL) {\n"
"        return NULL;\n"
"    }\n"
"#ifdef Py_GIL_DISABLED\n"
"    PyUnstable_Module_SetGIL(m, Py_MOD_GIL_NOT_USED);\n"
"#endif\n"
"    return m;\n"
"}"
msgstr ""

msgid "General API Guidelines"
msgstr ""

msgid "Most of the C API is thread-safe, but there are some exceptions."
msgstr ""

msgid ""
"**Struct Fields**: Accessing fields in Python C API objects or structs "
"directly is not thread-safe if the field may be concurrently modified."
msgstr ""

msgid ""
"**Macros**: Accessor macros like :c:macro:`PyList_GET_ITEM`, :c:macro:"
"`PyList_SET_ITEM`, and macros like :c:macro:`PySequence_Fast_GET_SIZE` that "
"use the object returned by :c:func:`PySequence_Fast` do not perform any "
"error checking or locking. These macros are not thread-safe if the container "
"object may be modified concurrently."
msgstr ""

msgid ""
"**Borrowed References**: C API functions that return :term:`borrowed "
"references <borrowed reference>` may not be thread-safe if the containing "
"object is modified concurrently.  See the section on :ref:`borrowed "
"references <borrowed-references>` for more information."
msgstr ""

msgid "Container Thread Safety"
msgstr ""

msgid ""
"Containers like :c:struct:`PyListObject`, :c:struct:`PyDictObject`, and :c:"
"struct:`PySetObject` perform internal locking in the free-threaded build.  "
"For example, the :c:func:`PyList_Append` will lock the list before appending "
"an item."
msgstr ""

msgid "``PyDict_Next``"
msgstr ""

msgid ""
"A notable exception is :c:func:`PyDict_Next`, which does not lock the "
"dictionary.  You should use :c:macro:`Py_BEGIN_CRITICAL_SECTION` to protect "
"the dictionary while iterating over it if the dictionary may be concurrently "
"modified::"
msgstr ""

msgid ""
"Py_BEGIN_CRITICAL_SECTION(dict);\n"
"PyObject *key, *value;\n"
"Py_ssize_t pos = 0;\n"
"while (PyDict_Next(dict, &pos, &key, &value)) {\n"
"    ...\n"
"}\n"
"Py_END_CRITICAL_SECTION();"
msgstr ""

msgid "Borrowed References"
msgstr ""

msgid ""
"Some C API functions return :term:`borrowed references <borrowed "
"reference>`. These APIs are not thread-safe if the containing object is "
"modified concurrently.  For example, it's not safe to use :c:func:"
"`PyList_GetItem` if the list may be modified concurrently."
msgstr ""

msgid ""
"The following table lists some borrowed reference APIs and their "
"replacements that return :term:`strong references <strong reference>`."
msgstr ""

msgid "Borrowed reference API"
msgstr ""

msgid "Strong reference API"
msgstr ""

msgid ":c:func:`PyList_GetItem`"
msgstr ""

msgid ":c:func:`PyList_GetItemRef`"
msgstr ""

msgid ":c:func:`PyList_GET_ITEM`"
msgstr ""

msgid ":c:func:`PyDict_GetItem`"
msgstr ""

msgid ":c:func:`PyDict_GetItemRef`"
msgstr ""

msgid ":c:func:`PyDict_GetItemWithError`"
msgstr ""

msgid ":c:func:`PyDict_GetItemString`"
msgstr ""

msgid ":c:func:`PyDict_GetItemStringRef`"
msgstr ""

msgid ":c:func:`PyDict_SetDefault`"
msgstr ""

msgid ":c:func:`PyDict_SetDefaultRef`"
msgstr ""

msgid ":c:func:`PyDict_Next`"
msgstr ""

msgid "none (see :ref:`PyDict_Next`)"
msgstr ""

msgid ":c:func:`PyWeakref_GetObject`"
msgstr ""

msgid ":c:func:`PyWeakref_GetRef`"
msgstr ""

msgid ":c:func:`PyWeakref_GET_OBJECT`"
msgstr ""

msgid ":c:func:`PyImport_AddModule`"
msgstr ""

msgid ":c:func:`PyImport_AddModuleRef`"
msgstr ""

msgid ":c:func:`PyCell_GET`"
msgstr ""

msgid ":c:func:`PyCell_Get`"
msgstr ""

msgid ""
"Not all APIs that return borrowed references are problematic.  For example, :"
"c:func:`PyTuple_GetItem` is safe because tuples are immutable. Similarly, "
"not all uses of the above APIs are problematic.  For example, :c:func:"
"`PyDict_GetItem` is often used for parsing keyword argument dictionaries in "
"function calls; those keyword argument dictionaries are effectively private "
"(not accessible by other threads), so using borrowed references in that "
"context is safe."
msgstr ""

msgid ""
"Some of these functions were added in Python 3.13.  You can use the "
"`pythoncapi-compat <https://github.com/python/pythoncapi-compat>`_ package "
"to provide implementations of these functions for older Python versions."
msgstr ""

msgid "Memory Allocation APIs"
msgstr ""

msgid ""
"Python's memory management C API provides functions in three different :ref:"
"`allocation domains <allocator-domains>`: \"raw\", \"mem\", and \"object\". "
"For thread-safety, the free-threaded build requires that only Python objects "
"are allocated using the object domain, and that all Python object are "
"allocated using that domain.  This differs from the prior Python versions, "
"where this was only a best practice and not a hard requirement."
msgstr ""

msgid ""
"Search for uses of :c:func:`PyObject_Malloc` in your extension and check "
"that the allocated memory is used for Python objects. Use :c:func:"
"`PyMem_Malloc` to allocate buffers instead of :c:func:`PyObject_Malloc`."
msgstr ""

msgid "Thread State and GIL APIs"
msgstr ""

msgid ""
"Python provides a set of functions and macros to manage thread state and the "
"GIL, such as:"
msgstr ""

msgid ":c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release`"
msgstr ""

msgid ":c:func:`PyEval_SaveThread` and :c:func:`PyEval_RestoreThread`"
msgstr ""

msgid ":c:macro:`Py_BEGIN_ALLOW_THREADS` and :c:macro:`Py_END_ALLOW_THREADS`"
msgstr ""

msgid ""
"These functions should still be used in the free-threaded build to manage "
"thread state even when the :term:`GIL` is disabled.  For example, if you "
"create a thread outside of Python, you must call :c:func:`PyGILState_Ensure` "
"before calling into the Python API to ensure that the thread has a valid "
"Python thread state."
msgstr ""

msgid ""
"You should continue to call :c:func:`PyEval_SaveThread` or :c:macro:"
"`Py_BEGIN_ALLOW_THREADS` around blocking operations, such as I/O or lock "
"acquisitions, to allow other threads to run the :term:`cyclic garbage "
"collector <garbage collection>`."
msgstr ""

msgid "Protecting Internal Extension State"
msgstr ""

msgid ""
"Your extension may have internal state that was previously protected by the "
"GIL.  You may need to add locking to protect this state.  The approach will "
"depend on your extension, but some common patterns include:"
msgstr ""

msgid ""
"**Caches**: global caches are a common source of shared state.  Consider "
"using a lock to protect the cache or disabling it in the free-threaded build "
"if the cache is not critical for performance."
msgstr ""

msgid ""
"**Global State**: global state may need to be protected by a lock or moved "
"to thread local storage. C11 and C++11 provide the ``thread_local`` or "
"``_Thread_local`` for `thread-local storage <https://en.cppreference.com/w/c/"
"language/storage_duration>`_."
msgstr ""

msgid "Critical Sections"
msgstr ""

msgid ""
"In the free-threaded build, CPython provides a mechanism called \"critical "
"sections\" to protect data that would otherwise be protected by the GIL. "
"While extension authors may not interact with the internal critical section "
"implementation directly, understanding their behavior is crucial when using "
"certain C API functions or managing shared state in the free-threaded build."
msgstr ""

msgid "What Are Critical Sections?"
msgstr ""

msgid ""
"Conceptually, critical sections act as a deadlock avoidance layer built on "
"top of simple mutexes. Each thread maintains a stack of active critical "
"sections. When a thread needs to acquire a lock associated with a critical "
"section (e.g., implicitly when calling a thread-safe C API function like :c:"
"func:`PyDict_SetItem`, or explicitly using macros), it attempts to acquire "
"the underlying mutex."
msgstr ""

msgid "Using Critical Sections"
msgstr ""

msgid "The primary APIs for using critical sections are:"
msgstr ""

msgid ""
":c:macro:`Py_BEGIN_CRITICAL_SECTION` and :c:macro:`Py_END_CRITICAL_SECTION` "
"- For locking a single object"
msgstr ""

msgid ""
":c:macro:`Py_BEGIN_CRITICAL_SECTION2` and :c:macro:"
"`Py_END_CRITICAL_SECTION2` - For locking two objects simultaneously"
msgstr ""

msgid ""
"These macros must be used in matching pairs and must appear in the same C "
"scope, since they establish a new local scope.  These macros are no-ops in "
"non-free-threaded builds, so they can be safely added to code that needs to "
"support both build types."
msgstr ""

msgid ""
"A common use of a critical section would be to lock an object while "
"accessing an internal attribute of it.  For example, if an extension type "
"has an internal count field, you could use a critical section while reading "
"or writing that field::"
msgstr ""

msgid ""
"// read the count, returns new reference to internal count value\n"
"PyObject *result;\n"
"Py_BEGIN_CRITICAL_SECTION(obj);\n"
"result = Py_NewRef(obj->count);\n"
"Py_END_CRITICAL_SECTION();\n"
"return result;\n"
"\n"
"// write the count, consumes reference from new_count\n"
"Py_BEGIN_CRITICAL_SECTION(obj);\n"
"obj->count = new_count;\n"
"Py_END_CRITICAL_SECTION();"
msgstr ""

msgid "How Critical Sections Work"
msgstr ""

msgid ""
"Unlike traditional locks, critical sections do not guarantee exclusive "
"access throughout their entire duration. If a thread would block while "
"holding a critical section (e.g., by acquiring another lock or performing I/"
"O), the critical section is temporarily suspended—all locks are released—and "
"then resumed when the blocking operation completes."
msgstr ""

msgid ""
"This behavior is similar to what happens with the GIL when a thread makes a "
"blocking call. The key differences are:"
msgstr ""

msgid "Critical sections operate on a per-object basis rather than globally"
msgstr ""

msgid ""
"Critical sections follow a stack discipline within each thread (the "
"\"begin\" and \"end\" macros enforce this since they must be paired and "
"within the same scope)"
msgstr ""

msgid ""
"Critical sections automatically release and reacquire locks around potential "
"blocking operations"
msgstr ""

msgid "Deadlock Avoidance"
msgstr ""

msgid "Critical sections help avoid deadlocks in two ways:"
msgstr ""

msgid ""
"If a thread tries to acquire a lock that's already held by another thread, "
"it first suspends all of its active critical sections, temporarily releasing "
"their locks"
msgstr ""

msgid ""
"When the blocking operation completes, only the top-most critical section is "
"reacquired first"
msgstr ""

msgid ""
"This means you cannot rely on nested critical sections to lock multiple "
"objects at once, as the inner critical section may suspend the outer ones. "
"Instead, use :c:macro:`Py_BEGIN_CRITICAL_SECTION2` to lock two objects "
"simultaneously."
msgstr ""

msgid ""
"Note that the locks described above are only :c:type:`!PyMutex` based locks. "
"The critical section implementation does not know about or affect other "
"locking mechanisms that might be in use, like POSIX mutexes.  Also note that "
"while blocking on any :c:type:`!PyMutex` causes the critical sections to be "
"suspended, only the mutexes that are part of the critical sections are "
"released.  If :c:type:`!PyMutex` is used without a critical section, it will "
"not be released and therefore does not get the same deadlock avoidance."
msgstr ""

msgid "Important Considerations"
msgstr ""

msgid ""
"Critical sections may temporarily release their locks, allowing other "
"threads to modify the protected data. Be careful about making assumptions "
"about the state of the data after operations that might block."
msgstr ""

msgid ""
"Because locks can be temporarily released (suspended), entering a critical "
"section does not guarantee exclusive access to the protected resource "
"throughout the section's duration. If code within a critical section calls "
"another function that blocks (e.g., acquires another lock, performs blocking "
"I/O), all locks held by the thread via critical sections will be released. "
"This is similar to how the GIL can be released during blocking calls."
msgstr ""

msgid ""
"Only the lock(s) associated with the most recently entered (top-most) "
"critical section are guaranteed to be held at any given time. Locks for "
"outer, nested critical sections might have been suspended."
msgstr ""

msgid ""
"You can lock at most two objects simultaneously with these APIs. If you need "
"to lock more objects, you'll need to restructure your code."
msgstr ""

msgid ""
"While critical sections will not deadlock if you attempt to lock the same "
"object twice, they are less efficient than purpose-built reentrant locks for "
"this use case."
msgstr ""

msgid ""
"When using :c:macro:`Py_BEGIN_CRITICAL_SECTION2`, the order of the objects "
"doesn't affect correctness (the implementation handles deadlock avoidance), "
"but it's good practice to always lock objects in a consistent order."
msgstr ""

msgid ""
"Remember that the critical section macros are primarily for protecting "
"access to *Python objects* that might be involved in internal CPython "
"operations susceptible to the deadlock scenarios described above. For "
"protecting purely internal extension state, standard mutexes or other "
"synchronization primitives might be more appropriate."
msgstr ""

msgid "Building Extensions for the Free-Threaded Build"
msgstr ""

msgid ""
"C API extensions need to be built specifically for the free-threaded build. "
"The wheels, shared libraries, and binaries are indicated by a ``t`` suffix."
msgstr ""

msgid ""
"`pypa/manylinux <https://github.com/pypa/manylinux>`_ supports the free-"
"threaded build, with the ``t`` suffix, such as ``python3.13t``."
msgstr ""

msgid ""
"`pypa/cibuildwheel <https://github.com/pypa/cibuildwheel>`_ supports the "
"free-threaded build if you set `CIBW_ENABLE to cpython-freethreading "
"<https://cibuildwheel.pypa.io/en/stable/options/#enable>`_."
msgstr ""

msgid "Limited C API and Stable ABI"
msgstr ""

msgid ""
"The free-threaded build does not currently support the :ref:`Limited C API "
"<limited-c-api>` or the stable ABI.  If you use `setuptools <https://"
"setuptools.pypa.io/en/latest/setuptools.html>`_ to build your extension and "
"currently set ``py_limited_api=True`` you can use ``py_limited_api=not "
"sysconfig.get_config_var(\"Py_GIL_DISABLED\")`` to opt out of the limited "
"API when building with the free-threaded build."
msgstr ""

msgid ""
"You will need to build separate wheels specifically for the free-threaded "
"build.  If you currently use the stable ABI, you can continue to build a "
"single wheel for multiple non-free-threaded Python versions."
msgstr ""

msgid "Windows"
msgstr ""

msgid ""
"Due to a limitation of the official Windows installer, you will need to "
"manually define ``Py_GIL_DISABLED=1`` when building extensions from source."
msgstr ""

msgid ""
"`Porting Extension Modules to Support Free-Threading <https://py-free-"
"threading.github.io/porting/>`_: A community-maintained porting guide for "
"extension authors."
msgstr ""
