# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-11 14:20+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Python support for free threading"
msgstr "Python-stöd för fri trådning"

msgid ""
"Starting with the 3.13 release, CPython has support for a build of Python "
"called :term:`free threading` where the :term:`global interpreter lock` "
"(GIL) is disabled.  Free-threaded execution allows for full utilization of "
"the available processing power by running threads in parallel on available "
"CPU cores. While not all software will benefit from this automatically, "
"programs designed with threading in mind will run faster on multi-core "
"hardware."
msgstr ""
"Från och med version 3.13 har CPython stöd för en version av Python som "
"kallas :term:`free threading` där :term:`global interpreter lock` (GIL) är "
"inaktiverat.  Fri trådning gör att den tillgängliga processorkraften kan "
"utnyttjas fullt ut genom att trådar körs parallellt på tillgängliga "
"processorkärnor. Även om inte all programvara kan dra nytta av detta "
"automatiskt, kommer program som utformats med trådning i åtanke att köras "
"snabbare på flerkärnig maskinvara."

msgid ""
"The free-threaded mode is working and continues to be improved, but there is "
"some additional overhead in single-threaded workloads compared to the "
"regular build. Additionally, third-party packages, in particular ones with "
"an :term:`extension module`, may not be ready for use in a free-threaded "
"build, and will re-enable the :term:`GIL`."
msgstr ""
"Det fritt trådade läget fungerar och fortsätter att förbättras, men det "
"finns en del ytterligare overhead i enkeltrådade arbetsbelastningar jämfört "
"med den vanliga byggningen. Dessutom kan tredjepartspaket, i synnerhet "
"sådana med en :term:`extension module`, kanske inte vara klara för "
"användning i en fritt trådad byggnation, och kommer att återaktivera :term:"
"`GIL`."

msgid ""
"This document describes the implications of free threading for Python code.  "
"See :ref:`freethreading-extensions-howto` for information on how to write C "
"extensions that support the free-threaded build."
msgstr ""
"Detta dokument beskriver konsekvenserna av fri trådning för Python-kod.  Se :"
"ref:`freethreading-extensions-howto` för information om hur man skriver C-"
"tillägg som stöder den frittrådade byggnaden."

msgid ""
":pep:`703` – Making the Global Interpreter Lock Optional in CPython for an "
"overall description of free-threaded Python."
msgstr ""
":pep:`703` - Making the Global Interpreter Lock Optional in CPython för en "
"övergripande beskrivning av Python med fri trådning."

msgid "Installation"
msgstr "Installation"

msgid ""
"Starting with Python 3.13, the official macOS and Windows installers "
"optionally support installing free-threaded Python binaries.  The installers "
"are available at https://www.python.org/downloads/."
msgstr ""
"Från och med Python 3.13 stöder de officiella installationsprogrammen för "
"macOS och Windows valfritt installation av Python-binärfiler med fri tråd.  "
"Installatörerna finns tillgängliga på https://www.python.org/downloads/."

msgid ""
"For information on other platforms, see the `Installing a Free-Threaded "
"Python <https://py-free-threading.github.io/installing-cpython/>`_, a "
"community-maintained installation guide for installing free-threaded Python."
msgstr ""
"För information om andra plattformar, se `Installing a Free-Threaded Python "
"<https://py-free-threading.github.io/installing-cpython/>`_, en community-"
"underhållen installationsguide för installation av Free-Threaded Python."

msgid ""
"When building CPython from source, the :option:`--disable-gil` configure "
"option should be used to build a free-threaded Python interpreter."
msgstr ""
"När CPython byggs från källkod bör konfigurationsalternativet :option:`--"
"disable-gil` användas för att bygga en Python-tolk med fri tråd."

msgid "Identifying free-threaded Python"
msgstr "Identifiera fritt trådade Python"

msgid ""
"To check if the current interpreter supports free-threading, :option:`python "
"-VV <-V>` and :data:`sys.version` contain \"free-threading build\". The new :"
"func:`sys._is_gil_enabled` function can be used to check whether the GIL is "
"actually disabled in the running process."
msgstr ""
"För att kontrollera om den aktuella tolken stöder free-threading, "
"innehåller :option:`python -VV <-V>` och :data:`sys.version` \"free-"
"threading build\". Den nya funktionen :func:`sys._is_gil_enabled` kan "
"användas för att kontrollera om GIL faktiskt är inaktiverad i den process "
"som körs."

msgid ""
"The ``sysconfig.get_config_var(\"Py_GIL_DISABLED\")`` configuration variable "
"can be used to determine whether the build supports free threading.  If the "
"variable is set to ``1``, then the build supports free threading.  This is "
"the recommended mechanism for decisions related to the build configuration."
msgstr ""
"Konfigurationsvariabeln ``sysconfig.get_config_var(\"Py_GIL_DISABLED\")`` "
"kan användas för att avgöra om build har stöd för fri trådning.  Om "
"variabeln är inställd på ``1`` har byggnaden stöd för fri trådning.  Detta "
"är den rekommenderade mekanismen för beslut relaterade till build-"
"konfigurationen."

msgid "The global interpreter lock in free-threaded Python"
msgstr "Det globala tolklåset i Python med fri trådning"

msgid ""
"Free-threaded builds of CPython support optionally running with the GIL "
"enabled at runtime using the environment variable :envvar:`PYTHON_GIL` or "
"the command-line option :option:`-X gil`."
msgstr ""
"Free-threaded-versioner av CPython stöder valfri körning med GIL aktiverad "
"vid körning med hjälp av miljövariabeln :envvar:`PYTHON_GIL` eller "
"kommandoradsalternativet :option:`-X gil`."

msgid ""
"The GIL may also automatically be enabled when importing a C-API extension "
"module that is not explicitly marked as supporting free threading.  A "
"warning will be printed in this case."
msgstr ""
"GIL kan också aktiveras automatiskt vid import av en C-API-tilläggsmodul som "
"inte uttryckligen är markerad som stödjande fri trådning.  En varning kommer "
"att skrivas ut i detta fall."

msgid ""
"In addition to individual package documentation, the following websites "
"track the status of popular packages support for free threading:"
msgstr ""
"Förutom dokumentationen för de enskilda paketen finns följande webbplatser "
"där man kan följa statusen för populära paket som stöder fri trådning:"

msgid "https://py-free-threading.github.io/tracking/"
msgstr "https://py-free-threading.github.io/tracking/"

msgid "https://hugovk.github.io/free-threaded-wheels/"
msgstr "https://hugovk.github.io/free-threaded-wheels/"

msgid "Thread safety"
msgstr "Tråd säkerhet"

msgid ""
"The free-threaded build of CPython aims to provide similar thread-safety "
"behavior at the Python level to the default GIL-enabled build.  Built-in "
"types like :class:`dict`, :class:`list`, and :class:`set` use internal locks "
"to protect against concurrent modifications in ways that behave similarly to "
"the GIL.  However, Python has not historically guaranteed specific behavior "
"for concurrent modifications to these built-in types, so this should be "
"treated as a description of the current implementation, not a guarantee of "
"current or future behavior."
msgstr ""
"Den fritt trådade versionen av CPython syftar till att ge liknande "
"trådsäkerhetsbeteende på Python-nivå som den standardiserade GIL-aktiverade "
"versionen.  Inbyggda typer som :class:`dict`, :class:`list` och :class:`set` "
"använder interna lås för att skydda mot samtidiga ändringar på sätt som "
"beter sig på liknande sätt som GIL.  Python har dock inte historiskt "
"garanterat ett specifikt beteende för samtidiga modifieringar av dessa "
"inbyggda typer, så detta bör behandlas som en beskrivning av den nuvarande "
"implementationen, inte en garanti för nuvarande eller framtida beteende."

msgid ""
"It's recommended to use the :class:`threading.Lock` or other synchronization "
"primitives instead of relying on the internal locks of built-in types, when "
"possible."
msgstr ""
"Det rekommenderas att använda :class:`threading.Lock` eller andra "
"synkroniseringsprimitiver istället för att förlita sig på de inbyggda "
"typernas interna lås, när det är möjligt."

msgid "Known limitations"
msgstr "Kända begränsningar"

msgid ""
"This section describes known limitations of the free-threaded CPython build."
msgstr ""
"I det här avsnittet beskrivs kända begränsningar för den fritt trådade "
"CPython-versionen."

msgid "Immortalization"
msgstr "Odödliggörande"

msgid ""
"The free-threaded build of the 3.13 release makes some objects :term:"
"`immortal`. Immortal objects are not deallocated and have reference counts "
"that are never modified.  This is done to avoid reference count contention "
"that would prevent efficient multi-threaded scaling."
msgstr ""
"Den fritt trådade versionen av 3.13-versionen gör vissa objekt :term:"
"`odödliga`. Odödliga objekt avallokeras inte och har referensvärden som "
"aldrig ändras.  Detta görs för att undvika konflikter om referensantal som "
"skulle förhindra effektiv skalning med flera trådar."

msgid ""
"An object will be made immortal when a new thread is started for the first "
"time after the main thread is running.  The following objects are "
"immortalized:"
msgstr ""
"Ett objekt blir odödligt när en ny tråd startas för första gången efter att "
"huvudtråden är igång.  Följande objekt är odödliga:"

msgid ""
":ref:`function <user-defined-funcs>` objects declared at the module level"
msgstr ""
":ref:`funktion <user-defined-funcs>` objekt som deklareras på modulnivå"

msgid ":ref:`method <instance-methods>` descriptors"
msgstr ":ref:`metod <instance-methods>` deskriptorer"

msgid ":ref:`code <code-objects>` objects"
msgstr ":ref:`kod <code-objects>`objekt"

msgid ":term:`module` objects and their dictionaries"
msgstr ":term:`modul`-objekt och deras ordlistor"

msgid ":ref:`classes <classes>` (type objects)"
msgstr ":ref:`classes <classes>` (typobjekt)"

msgid ""
"Because immortal objects are never deallocated, applications that create "
"many objects of these types may see increased memory usage.  This is "
"expected to be addressed in the 3.14 release."
msgstr ""
"Eftersom odödliga objekt aldrig avallokeras kan applikationer som skapar "
"många objekt av dessa typer få ökad minnesanvändning.  Detta förväntas vara "
"åtgärdat i version 3.14."

msgid ""
"Additionally, numeric and string literals in the code as well as strings "
"returned by :func:`sys.intern` are also immortalized.  This behavior is "
"expected to remain in the 3.14 free-threaded build."
msgstr ""
"Dessutom blir numeriska och stränglitteraler i koden samt strängar som "
"returneras av :func:`sys.intern` också odödliga.  Detta beteende förväntas "
"finnas kvar i den frittrådade versionen av 3.14."

msgid "Frame objects"
msgstr "Ramobjekt"

msgid ""
"It is not safe to access :ref:`frame <frame-objects>` objects from other "
"threads and doing so may cause your program to crash .  This means that :"
"func:`sys._current_frames` is generally not safe to use in a free-threaded "
"build.  Functions like :func:`inspect.currentframe` and :func:`sys."
"_getframe` are generally safe as long as the resulting frame object is not "
"passed to another thread."
msgstr ""
"Det är inte säkert att komma åt :ref:`frame <frame-objects>`-objekt från "
"andra trådar och det kan leda till att ditt program kraschar .  Detta "
"innebär att :func:`sys._current_frames` i allmänhet inte är säker att "
"använda i en fri-trådad konstruktion.  Funktioner som :func:`inspect."
"currentframe` och :func:`sys._getframe` är i allmänhet säkra så länge som "
"det resulterande ramobjektet inte skickas till en annan tråd."

msgid "Iterators"
msgstr "Iteratorer"

msgid ""
"Sharing the same iterator object between multiple threads is generally not "
"safe and threads may see duplicate or missing elements when iterating or "
"crash the interpreter."
msgstr ""
"Att dela samma iteratorobjekt mellan flera trådar är i allmänhet inte säkert "
"och trådarna kan se duplicerade eller saknade element när de itererar eller "
"krascha tolken."

msgid "Single-threaded performance"
msgstr "Prestanda med en tråd"

msgid ""
"The free-threaded build has additional overhead when executing Python code "
"compared to the default GIL-enabled build.  In 3.13, this overhead is about "
"40% on the `pyperformance <https://pyperformance.readthedocs.io/>`_ suite. "
"Programs that spend most of their time in C extensions or I/O will see less "
"of an impact.  The largest impact is because the specializing adaptive "
"interpreter (:pep:`659`) is disabled in the free-threaded build.  We expect "
"to re-enable it in a thread-safe way in the 3.14 release.  This overhead is "
"expected to be reduced in upcoming Python release.   We are aiming for an "
"overhead of 10% or less on the pyperformance suite compared to the default "
"GIL-enabled build."
msgstr ""
"Den fritt trådade versionen har ytterligare overhead när Python-kod "
"exekveras jämfört med den standardiserade GIL-aktiverade versionen.  I 3.13 "
"är denna overhead cirka 40% on i `pyperformance <https://pyperformance."
"readthedocs.io/>`_-sviten. Program som tillbringar den mesta av sin tid i C-"
"tillägg eller I/O kommer att se mindre av en inverkan.  Den största påverkan "
"beror på att den specialiserade adaptiva tolken (:pep:`659`) är inaktiverad "
"i den frittrådade versionen.  Vi räknar med att återaktivera den på ett "
"trådsäkert sätt i 3.14-utgåvan.  Denna overhead förväntas minska i kommande "
"Python-versioner.   Vi siktar på en overhead på 10% or mindre på "
"pyperformance-sviten jämfört med standard GIL-aktiverad byggnad."

msgid "Behavioral changes"
msgstr "Förändringar i beteendet"

msgid ""
"This section describes CPython behavioural changes with the free-threaded "
"build."
msgstr ""
"I det här avsnittet beskrivs CPythons beteendeförändringar med den fritt "
"trådade versionen."

msgid "Context variables"
msgstr "Variabler i sammanhanget"

msgid ""
"In the free-threaded build, the flag :data:`~sys.flags."
"thread_inherit_context` is set to true by default which causes threads "
"created with :class:`threading.Thread` to start with a copy of the :class:"
"`~contextvars.Context()` of the caller of :meth:`~threading.Thread.start`.  "
"In the default GIL-enabled build, the flag defaults to false so threads "
"start with an empty :class:`~contextvars.Context()`."
msgstr ""
"I den fritt trådade byggnaden är flaggan :data:`~sys.flags."
"thread_inherit_context` som standard satt till true vilket gör att trådar "
"som skapas med :class:`threading.Thread` startar med en kopia av :class:"
"`~contextvars.Context()` för anroparen av :meth:`~threading.Thread.start`.  "
"I standardversionen med GIL-aktivering är flaggan som standard false så att "
"trådar startar med en tom :class:`~contextvars.Context()`."

msgid "Warning filters"
msgstr "Varningsfilter"

msgid ""
"In the free-threaded build, the flag :data:`~sys.flags."
"context_aware_warnings` is set to true by default.  In the default GIL-"
"enabled build, the flag defaults to false.  If the flag is true then the :"
"class:`warnings.catch_warnings` context manager uses a context variable for "
"warning filters.  If the flag is false then :class:`~warnings."
"catch_warnings` modifies the global filters list, which is not thread-safe.  "
"See the :mod:`warnings` module for more details."
msgstr ""
"I den fritt trådade versionen är flaggan :data:`~sys.flags."
"context_aware_warnings` satt till true som standard.  I standardversionen "
"med GIL-aktivering är flaggan som standard false.  Om flaggan är true "
"använder kontexthanteraren :class:`warnings.catch_warnings` en "
"kontextvariabel för varningsfilter.  Om flaggan är false modifierar :class:"
"`~warnings.catch_warnings` den globala filterlistan, vilket inte är "
"trådsäkert.  Se modulen :mod:`warnings` för mer information."
