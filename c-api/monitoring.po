# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-17 14:16+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Monitoring C API"
msgstr ""

msgid "Added in version 3.13."
msgstr ""

msgid ""
"An extension may need to interact with the event monitoring system. "
"Subscribing to events and registering callbacks can be done via the Python "
"API exposed in :mod:`sys.monitoring`."
msgstr ""

msgid "Generating Execution Events"
msgstr ""

msgid ""
"The functions below make it possible for an extension to fire monitoring "
"events as it emulates the execution of Python code. Each of these functions "
"accepts a ``PyMonitoringState`` struct which contains concise information "
"about the activation state of events, as well as the event arguments, which "
"include a ``PyObject*`` representing the code object, the instruction offset "
"and sometimes additional, event-specific arguments (see :mod:`sys."
"monitoring` for details about the signatures of the different event "
"callbacks). The ``codelike`` argument should be an instance of :class:`types."
"CodeType` or of a type that emulates it."
msgstr ""

msgid ""
"The VM disables tracing when firing an event, so there is no need for user "
"code to do that."
msgstr ""

msgid ""
"Monitoring functions should not be called with an exception set, except "
"those listed below as working with the current exception."
msgstr ""

msgid ""
"Representation of the state of an event type. It is allocated by the user "
"while its contents are maintained by the monitoring API functions described "
"below."
msgstr ""

msgid ""
"All of the functions below return 0 on success and -1 (with an exception "
"set) on error."
msgstr ""

msgid "See :mod:`sys.monitoring` for descriptions of the events."
msgstr ""

msgid "Fire a ``PY_START`` event."
msgstr ""

msgid "Fire a ``PY_RESUME`` event."
msgstr ""

msgid "Fire a ``PY_RETURN`` event."
msgstr ""

msgid "Fire a ``PY_YIELD`` event."
msgstr ""

msgid "Fire a ``CALL`` event."
msgstr ""

msgid "Fire a ``LINE`` event."
msgstr ""

msgid "Fire a ``JUMP`` event."
msgstr ""

msgid "Fire a ``BRANCH_LEFT`` event."
msgstr ""

msgid "Fire a ``BRANCH_RIGHT`` event."
msgstr ""

msgid "Fire a ``C_RETURN`` event."
msgstr ""

msgid ""
"Fire a ``PY_THROW`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""

msgid ""
"Fire a ``RAISE`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""

msgid ""
"Fire a ``C_RAISE`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""

msgid ""
"Fire a ``RERAISE`` event with the current exception (as returned by :c:func:"
"`PyErr_GetRaisedException`)."
msgstr ""

msgid ""
"Fire an ``EXCEPTION_HANDLED`` event with the current exception (as returned "
"by :c:func:`PyErr_GetRaisedException`)."
msgstr ""

msgid ""
"Fire a ``PY_UNWIND`` event with the current exception (as returned by :c:"
"func:`PyErr_GetRaisedException`)."
msgstr ""

msgid ""
"Fire a ``STOP_ITERATION`` event. If ``value`` is an instance of :exc:"
"`StopIteration`, it is used. Otherwise, a new :exc:`StopIteration` instance "
"is created with ``value`` as its argument."
msgstr ""

msgid "Managing the Monitoring State"
msgstr ""

msgid ""
"Monitoring states can be managed with the help of monitoring scopes. A scope "
"would typically correspond to a python function."
msgstr ""

msgid ""
"Enter a monitored scope. ``event_types`` is an array of the event IDs for "
"events that may be fired from the scope. For example, the ID of a "
"``PY_START`` event is the value ``PY_MONITORING_EVENT_PY_START``, which is "
"numerically equal to the base-2 logarithm of ``sys.monitoring.events."
"PY_START``. ``state_array`` is an array with a monitoring state entry for "
"each event in ``event_types``, it is allocated by the user but populated by :"
"c:func:`!PyMonitoring_EnterScope` with information about the activation "
"state of the event. The size of ``event_types`` (and hence also of "
"``state_array``) is given in ``length``."
msgstr ""

msgid ""
"The ``version`` argument is a pointer to a value which should be allocated "
"by the user together with ``state_array`` and initialized to 0, and then set "
"only by :c:func:`!PyMonitoring_EnterScope` itself. It allows this function "
"to determine whether event states have changed since the previous call, and "
"to return quickly if they have not."
msgstr ""

msgid ""
"The scopes referred to here are lexical scopes: a function, class or "
"method. :c:func:`!PyMonitoring_EnterScope` should be called whenever the "
"lexical scope is entered. Scopes can be reentered, reusing the same "
"*state_array* and *version*, in situations like when emulating a recursive "
"Python function. When a code-like's execution is paused, such as when "
"emulating a generator, the scope needs to be exited and re-entered."
msgstr ""

msgid "The macros for *event_types* are:"
msgstr ""

msgid "Macro"
msgstr ""

msgid "Event"
msgstr ""

msgid ":monitoring-event:`BRANCH_LEFT`"
msgstr ""

msgid ":monitoring-event:`BRANCH_RIGHT`"
msgstr ""

msgid ":monitoring-event:`CALL`"
msgstr ""

msgid ":monitoring-event:`C_RAISE`"
msgstr ""

msgid ":monitoring-event:`C_RETURN`"
msgstr ""

msgid ":monitoring-event:`EXCEPTION_HANDLED`"
msgstr ""

msgid ":monitoring-event:`INSTRUCTION`"
msgstr ""

msgid ":monitoring-event:`JUMP`"
msgstr ""

msgid ":monitoring-event:`LINE`"
msgstr ""

msgid ":monitoring-event:`PY_RESUME`"
msgstr ""

msgid ":monitoring-event:`PY_RETURN`"
msgstr ""

msgid ":monitoring-event:`PY_START`"
msgstr ""

msgid ":monitoring-event:`PY_THROW`"
msgstr ""

msgid ":monitoring-event:`PY_UNWIND`"
msgstr ""

msgid ":monitoring-event:`PY_YIELD`"
msgstr ""

msgid ":monitoring-event:`RAISE`"
msgstr ""

msgid ":monitoring-event:`RERAISE`"
msgstr ""

msgid ":monitoring-event:`STOP_ITERATION`"
msgstr ""

msgid ""
"Exit the last scope that was entered with :c:func:`!PyMonitoring_EnterScope`."
msgstr ""

msgid ""
"Return true if the event corresponding to the event ID *ev* is a :ref:`local "
"event <monitoring-event-local>`."
msgstr ""

msgid "This function is :term:`soft deprecated`."
msgstr ""
