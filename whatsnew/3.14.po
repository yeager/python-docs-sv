# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-27 14:18+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's new in Python 3.14"
msgstr ""

msgid "Editor"
msgstr ""

msgid "Hugo van Kemenade"
msgstr ""

msgid ""
"This article explains the new features in Python 3.14, compared to 3.13."
msgstr ""

msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr ""

msgid ":pep:`745` -- Python 3.14 release schedule"
msgstr ""

msgid ""
"Prerelease users should be aware that this document is currently in draft "
"form. It will be updated substantially as Python 3.14 moves towards release, "
"so it's worth checking back even after reading earlier versions."
msgstr ""

msgid "Summary -- release highlights"
msgstr ""

msgid ""
"Python 3.14 will be the latest stable release of the Python programming "
"language, with a mix of changes to the language, the implementation and the "
"standard library."
msgstr ""

msgid ""
"The biggest changes to the implementation include template strings (:pep:"
"`750`), deferred evaluation of annotations (:pep:`649`), and a new type of "
"interpreter that uses tail calls."
msgstr ""

msgid ""
"The library changes include the addition of a new :mod:`!annotationlib` "
"module for introspecting and wrapping annotations (:pep:`749`), a new :mod:`!"
"compression.zstd` module for Zstandard support (:pep:`784`), plus syntax "
"highlighting in the REPL, as well as the usual deprecations and removals, "
"and improvements in user-friendliness and correctness."
msgstr ""

msgid ""
":ref:`PEP 779: Free-threaded Python is officially supported <whatsnew314-"
"pep779>`"
msgstr ""

msgid ""
":ref:`PEP 649 and 749: deferred evaluation of annotations <whatsnew314-"
"pep649>`"
msgstr ""

msgid ""
":ref:`PEP 734: Multiple interpreters in the stdlib <whatsnew314-pep734>`"
msgstr ""

msgid ":ref:`PEP 741: Python configuration C API <whatsnew314-pep741>`"
msgstr ""

msgid ":ref:`PEP 750: Template strings <whatsnew314-pep750>`"
msgstr ""

msgid ""
":ref:`PEP 758: Allow except and except* expressions without parentheses "
"<whatsnew314-pep758>`"
msgstr ""

msgid ":ref:`PEP 761: Discontinuation of PGP signatures <whatsnew314-pep761>`"
msgstr ""

msgid ""
":ref:`PEP 765: Disallow return/break/continue that exit a finally block "
"<whatsnew314-pep765>`"
msgstr ""

msgid ""
":ref:`Free-threaded mode improvements <whatsnew314-free-threaded-cpython>`"
msgstr ""

msgid ""
":ref:`PEP 768: Safe external debugger interface for CPython <whatsnew314-"
"pep768>`"
msgstr ""

msgid ""
":ref:`PEP 784: Adding Zstandard to the standard library <whatsnew314-pep784>`"
msgstr ""

msgid ":ref:`A new type of interpreter <whatsnew314-tail-call>`"
msgstr ""

msgid ""
":ref:`Syntax highlighting in PyREPL <whatsnew314-pyrepl-highlighting>`, and "
"color output in :ref:`unittest <whatsnew314-color-unittest>`, :ref:`argparse "
"<whatsnew314-color-argparse>`, :ref:`json <whatsnew314-color-json>` and :ref:"
"`calendar <whatsnew314-color-calendar>` CLIs"
msgstr ""

msgid ""
":ref:`Binary releases for the experimental just-in-time compiler "
"<whatsnew314-jit-compiler>`"
msgstr ""

msgid "Incompatible changes"
msgstr ""

msgid ""
"On platforms other than macOS and Windows, the default :ref:`start method "
"<multiprocessing-start-methods>` for :mod:`multiprocessing` and :class:"
"`~concurrent.futures.ProcessPoolExecutor` switches from *fork* to "
"*forkserver*."
msgstr ""

msgid ""
"See :ref:`(1) <whatsnew314-concurrent-futures-start-method>` and :ref:`(2) "
"<whatsnew314-multiprocessing-start-method>` for details."
msgstr ""

msgid ""
"If you encounter :exc:`NameError`\\s or pickling errors coming out of :mod:"
"`multiprocessing` or :mod:`concurrent.futures`, see the :ref:`forkserver "
"restrictions <multiprocessing-programming-forkserver>`."
msgstr ""

msgid ""
"The interpreter avoids some reference count modifications internally when "
"it's safe to do so. This can lead to different values returned from :func:"
"`sys.getrefcount` and :c:func:`Py_REFCNT` compared to previous versions of "
"Python.  See :ref:`below <whatsnew314-refcount>` for details."
msgstr ""

msgid "New features"
msgstr ""

msgid "PEP 779: Free-threaded Python is officially supported"
msgstr ""

msgid ""
"The free-threaded build of Python is now supported and no longer "
"experimental. This is the start of phase II where free-threaded Python is "
"officially supported but still optional."
msgstr ""

msgid ""
"We are confident that the project is on the right path, and we appreciate "
"the continued dedication from everyone working to make free-threading ready "
"for broader adoption across the Python community."
msgstr ""

msgid ""
"With these recommendations and the acceptance of this PEP, we as the Python "
"developer community should broadly advertise that free-threading is a "
"supported Python build option now and into the future, and that it will not "
"be removed without a proper deprecation schedule."
msgstr ""

msgid ""
"Any decision to transition to phase III, with free-threading as the default "
"or sole build of Python is still undecided, and dependent on many factors "
"both within CPython itself and the community. This decision is for the "
"future."
msgstr ""

msgid ""
":pep:`779` and its `acceptance <https://discuss.python.org/t/pep-779-"
"criteria-for-supported-status-for-free-threaded-python/84319/123>`__."
msgstr ""

msgid "PEP 734: Multiple interpreters in the stdlib"
msgstr ""

msgid ""
"The CPython runtime supports running multiple copies of Python in the same "
"process simultaneously and has done so for over 20 years. Each of these "
"separate copies is called an \"interpreter\". However, the feature had been "
"available only through the C-API."
msgstr ""

msgid ""
"That limitation is removed in the 3.14 release, with the new :mod:"
"`concurrent.interpreters` module."
msgstr ""

msgid ""
"There are at least two notable reasons why using multiple interpreters is "
"worth considering:"
msgstr ""

msgid "they support a new (to Python), human-friendly concurrency model"
msgstr ""

msgid "true multi-core parallelism"
msgstr ""

msgid ""
"For some use cases, concurrency in software enables efficiency and can "
"simplify software, at a high level.  At the same time, implementing and "
"maintaining all but the simplest concurrency is often a struggle for the "
"human brain.  That especially applies to plain threads (for example, :mod:"
"`threading`), where all memory is shared between all threads."
msgstr ""

msgid ""
"With multiple isolated interpreters, you can take advantage of a class of "
"concurrency models, like CSP or the actor model, that have found success in "
"other programming languages, like Smalltalk, Erlang, Haskell, and Go.  Think "
"of multiple interpreters like threads but with opt-in sharing."
msgstr ""

msgid ""
"Regarding multi-core parallelism: as of the 3.12 release, interpreters are "
"now sufficiently isolated from one another to be used in parallel. (See :pep:"
"`684`.)  This unlocks a variety of CPU-intensive use cases for Python that "
"were limited by the :term:`GIL`."
msgstr ""

msgid ""
"Using multiple interpreters is similar in many ways to :mod:"
"`multiprocessing`, in that they both provide isolated logical \"processes\" "
"that can run in parallel, with no sharing by default. However, when using "
"multiple interpreters, an application will use fewer system resources and "
"will operate more efficiently (since it stays within the same process).  "
"Think of multiple interpreters as having the isolation of processes with the "
"efficiency of threads."
msgstr ""

msgid ""
"While the feature has been around for decades, multiple interpreters have "
"not been used widely, due to low awareness and the lack of a stdlib module.  "
"Consequently, they currently have several notable limitations, which will "
"improve significantly now that the feature is finally going mainstream."
msgstr ""

msgid "Current limitations:"
msgstr ""

msgid "starting each interpreter has not been optimized yet"
msgstr ""

msgid ""
"each interpreter uses more memory than necessary (we will be working next on "
"extensive internal sharing between interpreters)"
msgstr ""

msgid ""
"there aren't many options *yet* for truly sharing objects or other data "
"between interpreters (other than :type:`memoryview`)"
msgstr ""

msgid ""
"many extension modules on PyPI are not compatible with multiple interpreters "
"yet (stdlib extension modules *are* compatible)"
msgstr ""

msgid ""
"the approach to writing applications that use multiple isolated interpreters "
"is mostly unfamiliar to Python users, for now"
msgstr ""

msgid ""
"The impact of these limitations will depend on future CPython improvements, "
"how interpreters are used, and what the community solves through PyPI "
"packages.  Depending on the use case, the limitations may not have much "
"impact, so try it out!"
msgstr ""

msgid ""
"Furthermore, future CPython releases will reduce or eliminate overhead and "
"provide utilities that are less appropriate on PyPI.  In the meantime, most "
"of the limitations can also be addressed through extension modules, meaning "
"PyPI packages can fill any gap for 3.14, and even back to 3.12 where "
"interpreters were finally properly isolated and stopped sharing the :term:"
"`GIL`.  Likewise, we expect to slowly see libraries on PyPI for high-level "
"abstractions on top of interpreters."
msgstr ""

msgid ""
"Regarding extension modules, work is in progress to update some PyPI "
"projects, as well as tools like Cython, pybind11, nanobind, and PyO3. The "
"steps for isolating an extension module are found at :ref:`isolating-"
"extensions-howto`.  Isolating a module has a lot of overlap with what is "
"required to support :ref:`free-threading <whatsnew314-free-threaded-"
"cpython>`, so the ongoing work in the community in that area will help "
"accelerate support for multiple interpreters."
msgstr ""

msgid ""
"Also added in 3.14: :ref:`concurrent.futures.InterpreterPoolExecutor "
"<whatsnew314-concurrent-futures-interp-pool>`."
msgstr ""

msgid ":pep:`734`."
msgstr ""

msgid "PEP 750: Template strings"
msgstr ""

msgid ""
"Template string literals (t-strings) are a generalization of f-strings, "
"using a ``t`` in place of the ``f`` prefix. Instead of evaluating to :class:"
"`str`, t-strings evaluate to a new :class:`!string.templatelib.Template` "
"type:"
msgstr ""

msgid ""
"from string.templatelib import Template\n"
"\n"
"name = \"World\"\n"
"template: Template = t\"Hello {name}\""
msgstr ""

msgid ""
"The template can then be combined with functions that operate on the "
"template's structure to produce a :class:`str` or a string-like result. For "
"example, sanitizing input:"
msgstr ""

msgid ""
"evil = \"<script>alert('evil')</script>\"\n"
"template = t\"<p>{evil}</p>\"\n"
"assert html(template) == \"<p>&lt;script&gt;alert('evil')&lt;/script&gt;</"
"p>\""
msgstr ""

msgid "As another example, generating HTML attributes from data:"
msgstr ""

msgid ""
"attributes = {\"src\": \"shrubbery.jpg\", \"alt\": \"looks nice\"}\n"
"template = t\"<img {attributes}>\"\n"
"assert html(template) == '<img src=\"shrubbery.jpg\" alt=\"looks nice\" />'"
msgstr ""

msgid ""
"Compared to using an f-string, the ``html`` function has access to template "
"attributes containing the original information: static strings, "
"interpolations, and values from the original scope. Unlike existing "
"templating approaches, t-strings build from the well-known f-string syntax "
"and rules. Template systems thus benefit from Python tooling as they are "
"much closer to the Python language, syntax, scoping, and more."
msgstr ""

msgid "Writing template handlers is straightforward:"
msgstr ""

msgid ""
"from string.templatelib import Template, Interpolation\n"
"\n"
"def lower_upper(template: Template) -> str:\n"
"    \"\"\"Render static parts lowercased and interpolations uppercased."
"\"\"\"\n"
"    parts: list[str] = []\n"
"    for item in template:\n"
"        if isinstance(item, Interpolation):\n"
"            parts.append(str(item.value).upper())\n"
"        else:\n"
"            parts.append(item.lower())\n"
"    return \"\".join(parts)\n"
"\n"
"name = \"world\"\n"
"assert lower_upper(t\"HELLO {name}\") == \"hello WORLD\""
msgstr ""

msgid ""
"With this in place, developers can write template systems to sanitize SQL, "
"make safe shell operations, improve logging, tackle modern ideas in web "
"development (HTML, CSS, and so on), and implement lightweight, custom "
"business DSLs."
msgstr ""

msgid ""
"(Contributed by Jim Baker, Guido van Rossum, Paul Everitt, Koudai Aono, "
"Lysandros Nikolaou, Dave Peck, Adam Turner, Jelle Zijlstra, Bénédikt Tran, "
"and Pablo Galindo Salgado in :gh:`132661`.)"
msgstr ""

msgid ":pep:`750`."
msgstr ""

msgid "PEP 768: Safe external debugger interface for CPython"
msgstr ""

msgid ""
":pep:`768` introduces a zero-overhead debugging interface that allows "
"debuggers and profilers to safely attach to running Python processes. This "
"is a significant enhancement to Python's debugging capabilities allowing "
"debuggers to forego unsafe alternatives. See :ref:`below <whatsnew314-remote-"
"pdb>` for how this feature is leveraged to implement the new :mod:`pdb` "
"module's remote attaching capabilities."
msgstr ""

msgid ""
"The new interface provides safe execution points for attaching debugger code "
"without modifying the interpreter's normal execution path or adding runtime "
"overhead. This enables tools to inspect and interact with Python "
"applications in real-time without stopping or restarting them — a crucial "
"capability for high-availability systems and production environments."
msgstr ""

msgid ""
"For convenience, CPython implements this interface through the :mod:`sys` "
"module with a :func:`sys.remote_exec` function::"
msgstr ""

msgid "sys.remote_exec(pid, script_path)"
msgstr ""

msgid ""
"This function allows sending Python code to be executed in a target process "
"at the next safe execution point. However, tool authors can also implement "
"the protocol directly as described in the PEP, which details the underlying "
"mechanisms used to safely attach to running processes."
msgstr ""

msgid ""
"Here's a simple example that inspects object types in a running Python "
"process:"
msgstr ""

msgid ""
"import os\n"
"import sys\n"
"import tempfile\n"
"\n"
"# Create a temporary script\n"
"with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as "
"f:\n"
"    script_path = f.name\n"
"    f.write(f\"import my_debugger; my_debugger.connect({os.getpid()})\")\n"
"try:\n"
"    # Execute in process with PID 1234\n"
"    print(\"Behold! An offering:\")\n"
"    sys.remote_exec(1234, script_path)\n"
"finally:\n"
"    os.unlink(script_path)"
msgstr ""

msgid ""
"The debugging interface has been carefully designed with security in mind "
"and includes several mechanisms to control access:"
msgstr ""

msgid "A :envvar:`PYTHON_DISABLE_REMOTE_DEBUG` environment variable."
msgstr ""

msgid "A :option:`-X disable-remote-debug` command-line option."
msgstr ""

msgid ""
"A :option:`--without-remote-debug` configure flag to completely disable the "
"feature at build time."
msgstr ""

msgid ""
"A key implementation detail is that the interface piggybacks on the "
"interpreter's existing evaluation loop and safe points, ensuring zero "
"overhead during normal execution while providing a reliable way for external "
"processes to coordinate debugging operations."
msgstr ""

msgid ""
"(Contributed by Pablo Galindo Salgado, Matt Wozniski, and Ivona Stojanovic "
"in :gh:`131591`.)"
msgstr ""

msgid ":pep:`768`."
msgstr ":pep:`768`."

msgid "PEP 784: Adding Zstandard to the standard library"
msgstr ""

msgid ""
"The new ``compression`` package contains modules :mod:`!compression.lzma`, :"
"mod:`!compression.bz2`, :mod:`!compression.gzip` and :mod:`!compression."
"zlib` which re-export the :mod:`lzma`, :mod:`bz2`, :mod:`gzip` and :mod:"
"`zlib` modules respectively. The new import names under ``compression`` are "
"the canonical names for importing these compression modules going forward. "
"However, the existing modules names have not been deprecated. Any "
"deprecation or removal of the existing compression modules will occur no "
"sooner than five years after the release of 3.14."
msgstr ""

msgid ""
"The new :mod:`!compression.zstd` module provides compression and "
"decompression APIs for the Zstandard format via bindings to `Meta's zstd "
"library <https://facebook.github.io/zstd/>`__. Zstandard is a widely "
"adopted, highly efficient, and fast compression format. In addition to the "
"APIs introduced in :mod:`!compression.zstd`, support for reading and writing "
"Zstandard compressed archives has been added to the :mod:`tarfile`, :mod:"
"`zipfile`, and :mod:`shutil` modules."
msgstr ""

msgid "Here's an example of using the new module to compress some data:"
msgstr ""

msgid ""
"from compression import zstd\n"
"import math\n"
"\n"
"data = str(math.pi).encode() * 20\n"
"\n"
"compressed = zstd.compress(data)\n"
"\n"
"ratio = len(compressed) / len(data)\n"
"print(f\"Achieved compression ratio of {ratio}\")"
msgstr ""

msgid ""
"As can be seen, the API is similar to the APIs of the :mod:`!lzma` and :mod:"
"`!bz2` modules."
msgstr ""

msgid ""
"(Contributed by Emma Harper Smith, Adam Turner, Gregory P. Smith, Tomas "
"Roun, Victor Stinner, and Rogdham in :gh:`132983`.)"
msgstr ""

msgid ":pep:`784`."
msgstr ":pep:`784`."

msgid "Remote attaching to a running Python process with PDB"
msgstr ""

msgid ""
"The :mod:`pdb` module now supports remote attaching to a running Python "
"process using a new ``-p PID`` command-line option:"
msgstr ""

msgid "python -m pdb -p 1234"
msgstr ""

msgid ""
"This will connect to the Python process with the given PID and allow you to "
"debug it interactively. Notice that due to how the Python interpreter works "
"attaching to a remote process that is blocked in a system call or waiting "
"for I/O will only work once the next bytecode instruction is executed or "
"when the process receives a signal."
msgstr ""

msgid ""
"This feature uses :pep:`768` and the :func:`sys.remote_exec` function to "
"attach to the remote process and send the PDB commands to it."
msgstr ""

msgid "(Contributed by Matt Wozniski and Pablo Galindo in :gh:`131591`.)"
msgstr ""

msgid "PEP 758 – Allow except and except* expressions without parentheses"
msgstr ""

msgid ""
"The :keyword:`except` and :keyword:`except* <except_star>` expressions now "
"allow parentheses to be omitted when there are multiple exception types and "
"the ``as`` clause is not used. For example the following expressions are now "
"valid:"
msgstr ""

msgid ""
"try:\n"
"    connect_to_server()\n"
"except TimeoutError, ConnectionRefusedError:\n"
"    print(\"Network issue encountered.\")\n"
"\n"
" # The same applies to except* (for exception groups):\n"
"\n"
"try:\n"
"    connect_to_server()\n"
"except* TimeoutError, ConnectionRefusedError:\n"
"    print(\"Network issue encountered.\")"
msgstr ""

msgid "Check :pep:`758` for more details."
msgstr ""

msgid "(Contributed by Pablo Galindo and Brett Cannon in :gh:`131831`.)"
msgstr ""

msgid ":pep:`758`."
msgstr ""

msgid "PEP 649 and 749: deferred evaluation of annotations"
msgstr ""

msgid ""
"The :term:`annotations <annotation>` on functions, classes, and modules are "
"no longer evaluated eagerly. Instead, annotations are stored in special-"
"purpose :term:`annotate functions <annotate function>` and evaluated only "
"when necessary (except if ``from __future__ import annotations`` is used). "
"This is specified in :pep:`649` and :pep:`749`."
msgstr ""

msgid ""
"This change is designed to make annotations in Python more performant and "
"more usable in most circumstances. The runtime cost for defining annotations "
"is minimized, but it remains possible to introspect annotations at runtime. "
"It is no longer necessary to enclose annotations in strings if they contain "
"forward references."
msgstr ""

msgid ""
"The new :mod:`annotationlib` module provides tools for inspecting deferred "
"annotations. Annotations may be evaluated in the :attr:`~annotationlib."
"Format.VALUE` format (which evaluates annotations to runtime values, similar "
"to the behavior in earlier Python versions), the :attr:`~annotationlib."
"Format.FORWARDREF` format (which replaces undefined names with special "
"markers), and the :attr:`~annotationlib.Format.STRING` format (which returns "
"annotations as strings)."
msgstr ""

msgid "This example shows how these formats behave:"
msgstr ""

msgid ""
">>> from annotationlib import get_annotations, Format\n"
">>> def func(arg: Undefined):\n"
"...     pass\n"
">>> get_annotations(func, format=Format.VALUE)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"NameError: name 'Undefined' is not defined\n"
">>> get_annotations(func, format=Format.FORWARDREF)\n"
"{'arg': ForwardRef('Undefined', owner=<function func at 0x...>)}\n"
">>> get_annotations(func, format=Format.STRING)\n"
"{'arg': 'Undefined'}"
msgstr ""

msgid "Implications for annotated code"
msgstr ""

msgid ""
"If you define annotations in your code (for example, for use with a static "
"type checker), then this change probably does not affect you: you can keep "
"writing annotations the same way you did with previous versions of Python."
msgstr ""

msgid ""
"You will likely be able to remove quoted strings in annotations, which are "
"frequently used for forward references. Similarly, if you use ``from "
"__future__ import annotations`` to avoid having to write strings in "
"annotations, you may well be able to remove that import once you support "
"only Python 3.14 and newer. However, if you rely on third-party libraries "
"that read annotations, those libraries may need changes to support unquoted "
"annotations before they work as expected."
msgstr ""

msgid "Implications for readers of ``__annotations__``"
msgstr ""

msgid ""
"If your code reads the ``__annotations__`` attribute on objects, you may "
"want to make changes in order to support code that relies on deferred "
"evaluation of annotations. For example, you may want to use :func:"
"`annotationlib.get_annotations` with the :attr:`~annotationlib.Format."
"FORWARDREF` format, as the :mod:`dataclasses` module now does."
msgstr ""

msgid ""
"The external :pypi:`typing_extensions` package provides partial backports of "
"some of the functionality of the :mod:`annotationlib` module, such as the :"
"class:`~annotationlib.Format` enum and the :func:`~annotationlib."
"get_annotations` function. These can be used to write cross-version code "
"that takes advantage of the new behavior in Python 3.14."
msgstr ""

msgid "Related changes"
msgstr ""

msgid ""
"The changes in Python 3.14 are designed to rework how ``__annotations__`` "
"works at runtime while minimizing breakage to code that contains annotations "
"in source code and to code that reads ``__annotations__``. However, if you "
"rely on undocumented details of the annotation behavior or on private "
"functions in the standard library, there are many ways in which your code "
"may not work in Python 3.14. To safeguard your code against future changes, "
"use only the documented functionality of the :mod:`annotationlib` module."
msgstr ""

msgid ""
"In particular, do not read annotations directly from the namespace "
"dictionary attribute of type objects. Use :func:`annotationlib."
"get_annotate_from_class_namespace` during class construction and :func:"
"`annotationlib.get_annotations` afterwards."
msgstr ""

msgid ""
"In previous releases, it was sometimes possible to access class annotations "
"from an instance of an annotated class. This behavior was undocumented and "
"accidental, and will no longer work in Python 3.14."
msgstr ""

msgid "``from __future__ import annotations``"
msgstr ""

msgid ""
"In Python 3.7, :pep:`563` introduced the ``from __future__ import "
"annotations`` directive, which turns all annotations into strings. This "
"directive is now considered deprecated and it is expected to be removed in a "
"future version of Python. However, this removal will not happen until after "
"Python 3.13, the last version of Python without deferred evaluation of "
"annotations, reaches its end of life in 2029. In Python 3.14, the behavior "
"of code using ``from __future__ import annotations`` is unchanged."
msgstr ""

msgid ""
"(Contributed by Jelle Zijlstra in :gh:`119180`; :pep:`649` was written by "
"Larry Hastings.)"
msgstr ""

msgid ":pep:`649` and :pep:`749`."
msgstr ""

msgid "Improved error messages"
msgstr ""

msgid ""
"The interpreter now provides helpful suggestions when it detects typos in "
"Python keywords. When a word that closely resembles a Python keyword is "
"encountered, the interpreter will suggest the correct keyword in the error "
"message. This feature helps programmers quickly identify and fix common "
"typing mistakes. For example:"
msgstr ""

msgid ""
">>> whille True:\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    whille True:\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'while'?\n"
"\n"
">>> asynch def fetch_data():\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    asynch def fetch_data():\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'async'?\n"
"\n"
">>> async def foo():\n"
"...     awaid fetch_data()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 2\n"
"    awaid fetch_data()\n"
"    ^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'await'?\n"
"\n"
">>> raisee ValueError(\"Error\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    raisee ValueError(\"Error\")\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'raise'?"
msgstr ""

msgid ""
"While the feature focuses on the most common cases, some variations of "
"misspellings may still result in regular syntax errors. (Contributed by "
"Pablo Galindo in :gh:`132449`.)"
msgstr ""

msgid ""
"When an unpacking assignment fails due to an incorrect number of variables, "
"the error message prints the received number of values in more cases than "
"before. (Contributed by Tushar Sadhwani in :gh:`122239`.)"
msgstr ""

msgid ""
">>> x, y, z = 1, 2, 3, 4\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"    x, y, z = 1, 2, 3, 4\n"
"    ^^^^^^^\n"
"ValueError: too many values to unpack (expected 3, got 4)"
msgstr ""

msgid ""
":keyword:`elif` statements that follow an :keyword:`else` block now have a "
"specific error message. (Contributed by Steele Farnsworth in :gh:`129902`.)"
msgstr ""

msgid ""
">>> if who == \"me\":\n"
"...     print(\"It's me!\")\n"
"... else:\n"
"...     print(\"It's not me!\")\n"
"... elif who is None:\n"
"...     print(\"Who is it?\")\n"
"File \"<stdin>\", line 5\n"
"  elif who is None:\n"
"  ^^^^\n"
"SyntaxError: 'elif' block follows an 'else' block"
msgstr ""

msgid ""
"If a statement (:keyword:`pass`, :keyword:`del`, :keyword:`return`, :keyword:"
"`yield`, :keyword:`raise`, :keyword:`break`, :keyword:`continue`, :keyword:"
"`assert`, :keyword:`import`, :keyword:`from`) is passed to the :ref:"
"`if_expr` after :keyword:`else`, or one of :keyword:`pass`, :keyword:"
"`break`, or :keyword:`continue` is passed before :keyword:`if`, then the "
"error message highlights where the :token:`~python-grammar:expression` is "
"required. (Contributed by Sergey Miryanov in :gh:`129515`.)"
msgstr ""

msgid ""
">>> x = 1 if True else pass\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = 1 if True else pass\n"
"                       ^^^^\n"
"SyntaxError: expected expression after 'else', but statement is given\n"
"\n"
">>> x = continue if True else break\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = continue if True else break\n"
"        ^^^^^^^^\n"
"SyntaxError: expected expression before 'if', but statement is given"
msgstr ""

msgid ""
"When incorrectly closed strings are detected, the error message suggests "
"that the string may be intended to be part of the string. (Contributed by "
"Pablo Galindo in :gh:`88535`.)"
msgstr ""

msgid ""
">>> \"The interesting object \"The important object\" is very important\"\n"
"Traceback (most recent call last):\n"
"SyntaxError: invalid syntax. Is this intended to be part of the string?"
msgstr ""

msgid ""
"When strings have incompatible prefixes, the error now shows which prefixes "
"are incompatible. (Contributed by Nikita Sobolev in :gh:`133197`.)"
msgstr ""

msgid ""
">>> ub'abc'\n"
"  File \"<python-input-0>\", line 1\n"
"    ub'abc'\n"
"    ^^\n"
"SyntaxError: 'u' and 'b' prefixes are incompatible"
msgstr ""

msgid "Improved error messages when using ``as`` with incompatible targets in:"
msgstr ""

msgid "Imports: ``import ... as ...``"
msgstr ""

msgid "From imports: ``from ... import ... as ...``"
msgstr ""

msgid "Except handlers: ``except ... as ...``"
msgstr ""

msgid "Pattern-match cases: ``case ... as ...``"
msgstr ""

msgid ""
"(Contributed by Nikita Sobolev in :gh:`123539`, :gh:`123562`, and :gh:"
"`123440`.)"
msgstr ""

msgid ""
">>> import ast as arr[0]\n"
"  File \"<python-input-1>\", line 1\n"
"    import ast as arr[0]\n"
"                  ^^^^^^\n"
"SyntaxError: cannot use subscript as import target"
msgstr ""

msgid ""
"Improved error message when trying to add an instance of an unhashable type "
"to a :class:`dict` or :class:`set`. (Contributed by CF Bolz-Tereick and "
"Victor Stinner in :gh:`132828`.)"
msgstr ""

msgid ""
">>> s = set()\n"
">>> s.add({'pages': 12, 'grade': 'A'})\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 1, in <module>\n"
"    s.add({'pages': 12, 'grade': 'A'})\n"
"    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"TypeError: cannot use 'dict' as a set element (unhashable type: 'dict')\n"
">>> d = {}\n"
">>> l = [1, 2, 3]\n"
">>> d[l] = 12\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-4>\", line 1, in <module>\n"
"    d[l] = 12\n"
"    ~^^^\n"
"TypeError: cannot use 'list' as a dict key (unhashable type: 'list')"
msgstr ""

msgid "PEP 741: Python configuration C API"
msgstr ""

msgid ""
"Add a :ref:`PyInitConfig C API <pyinitconfig_api>` to configure the Python "
"initialization without relying on C structures and the ability to make ABI-"
"compatible changes in the future."
msgstr ""

msgid ""
"Complete the :pep:`587` :ref:`PyConfig C API <pyconfig_api>` by adding :c:"
"func:`PyInitConfig_AddModule` which can be used to add a built-in extension "
"module; a feature previously referred to as the “inittab”."
msgstr ""

msgid ""
"Add :c:func:`PyConfig_Get` and :c:func:`PyConfig_Set` functions to get and "
"set the current runtime configuration."
msgstr ""

msgid ""
"PEP 587 “Python Initialization Configuration” unified all the ways to "
"configure the Python initialization. This PEP unifies also the configuration "
"of the Python preinitialization and the Python initialization in a single "
"API. Moreover, this PEP only provides a single choice to embed Python, "
"instead of having two “Python” and “Isolated” choices (PEP 587), to simplify "
"the API further."
msgstr ""

msgid ""
"The lower level PEP 587 PyConfig API remains available for use cases with an "
"intentionally higher level of coupling to CPython implementation details "
"(such as emulating the full functionality of CPython’s CLI, including its "
"configuration mechanisms)."
msgstr ""

msgid "(Contributed by Victor Stinner in :gh:`107954`.)"
msgstr ""

msgid ":pep:`741`."
msgstr ""

msgid "Asyncio introspection capabilities"
msgstr ""

msgid ""
"Added a new command-line interface to inspect running Python processes using "
"asynchronous tasks, available via:"
msgstr ""

msgid "python -m asyncio ps PID"
msgstr ""

msgid ""
"This tool inspects the given process ID (PID) and displays information about "
"currently running asyncio tasks.  It outputs a task table: a flat listing of "
"all tasks, their names, their coroutine stacks, and which tasks are awaiting "
"them."
msgstr ""

msgid "python -m asyncio pstree PID"
msgstr ""

msgid ""
"This tool fetches the same information, but renders a visual async call "
"tree, showing coroutine relationships in a hierarchical format.  This "
"command is particularly useful for debugging long-running or stuck "
"asynchronous programs. It can help developers quickly identify where a "
"program is blocked, what tasks are pending, and how coroutines are chained "
"together."
msgstr ""

msgid "For example given this code:"
msgstr ""

msgid ""
"import asyncio\n"
"\n"
"async def play(track):\n"
"    await asyncio.sleep(5)\n"
"    print(f\"🎵 Finished: {track}\")\n"
"\n"
"async def album(name, tracks):\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        for track in tracks:\n"
"            tg.create_task(play(track), name=track)\n"
"\n"
"async def main():\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        tg.create_task(\n"
"          album(\"Sundowning\", [\"TNDNBTG\", \"Levitate\"]), "
"name=\"Sundowning\")\n"
"        tg.create_task(\n"
"          album(\"TMBTE\", [\"DYWTYLM\", \"Aqua Regia\"]), name=\"TMBTE\")\n"
"\n"
"if __name__ == \"__main__\":\n"
"    asyncio.run(main())"
msgstr ""

msgid ""
"Executing the new tool on the running process will yield a table like this:"
msgstr ""

msgid ""
"python -m asyncio ps 12345\n"
"\n"
"tid        task id              task name            coroutine "
"stack                                    awaiter "
"chain                                      awaiter name    awaiter id\n"
"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
"1935500    0x7fc930c18050       Task-1               TaskGroup._aexit -> "
"TaskGroup.__aexit__ -> "
"main                                                                       "
"0x0\n"
"1935500    0x7fc930c18230       Sundowning           TaskGroup._aexit -> "
"TaskGroup.__aexit__ -> album   TaskGroup._aexit -> TaskGroup.__aexit__ -> "
"main    Task-1          0x7fc930c18050\n"
"1935500    0x7fc93173fa50       TMBTE                TaskGroup._aexit -> "
"TaskGroup.__aexit__ -> album   TaskGroup._aexit -> TaskGroup.__aexit__ -> "
"main    Task-1          0x7fc930c18050\n"
"1935500    0x7fc93173fdf0       TNDNBTG              sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   Sundowning      0x7fc930c18230\n"
"1935500    0x7fc930d32510       Levitate             sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   Sundowning      0x7fc930c18230\n"
"1935500    0x7fc930d32890       DYWTYLM              sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   TMBTE           0x7fc93173fa50\n"
"1935500    0x7fc93161ec30       Aqua Regia           sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   TMBTE           0x7fc93173fa50"
msgstr ""

msgid "or a tree like this:"
msgstr ""

msgid ""
"python -m asyncio pstree 12345\n"
"\n"
"└── (T) Task-1\n"
"    └──  main example.py:13\n"
"        └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups.py:72\n"
"            └──  TaskGroup._aexit Lib/asyncio/taskgroups.py:121\n"
"                ├── (T) Sundowning\n"
"                │   └──  album example.py:8\n"
"                │       └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups."
"py:72\n"
"                │           └──  TaskGroup._aexit Lib/asyncio/taskgroups."
"py:121\n"
"                │               ├── (T) TNDNBTG\n"
"                │               │   └──  play example.py:4\n"
"                │               │       └──  sleep Lib/asyncio/tasks.py:702\n"
"                │               └── (T) Levitate\n"
"                │                   └──  play example.py:4\n"
"                │                       └──  sleep Lib/asyncio/tasks.py:702\n"
"                └── (T) TMBTE\n"
"                    └──  album example.py:8\n"
"                        └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups."
"py:72\n"
"                            └──  TaskGroup._aexit Lib/asyncio/taskgroups."
"py:121\n"
"                                ├── (T) DYWTYLM\n"
"                                │   └──  play example.py:4\n"
"                                │       └──  sleep Lib/asyncio/tasks.py:702\n"
"                                └── (T) Aqua Regia\n"
"                                    └──  play example.py:4\n"
"                                        └──  sleep Lib/asyncio/tasks.py:702"
msgstr ""

msgid ""
"If a cycle is detected in the async await graph (which could indicate a "
"programming issue), the tool raises an error and lists the cycle paths that "
"prevent tree construction:"
msgstr ""

msgid ""
"python -m asyncio pstree 12345\n"
"\n"
"ERROR: await-graph contains cycles - cannot print a tree!\n"
"\n"
"cycle: Task-2 → Task-3 → Task-2"
msgstr ""

msgid ""
"(Contributed by Pablo Galindo, Łukasz Langa, Yury Selivanov, and Marta Gomez "
"Macias in :gh:`91048`.)"
msgstr ""

msgid "A new type of interpreter"
msgstr ""

msgid ""
"A new type of interpreter has been added to CPython. It uses tail calls "
"between small C functions that implement individual Python opcodes, rather "
"than one large C case statement. For certain newer compilers, this "
"interpreter provides significantly better performance. Preliminary numbers "
"on our machines suggest anywhere up to 30% faster Python code, and a "
"geometric mean of 3-5% faster on ``pyperformance`` depending on platform and "
"architecture. The baseline is Python 3.14 built with Clang 19 without this "
"new interpreter."
msgstr ""

msgid ""
"This interpreter currently only works with Clang 19 and newer on x86-64 and "
"AArch64 architectures. However, we expect that a future release of GCC will "
"support this as well."
msgstr ""

msgid ""
"This feature is opt-in for now. We highly recommend enabling profile-guided "
"optimization with the new interpreter as it is the only configuration we "
"have tested and can validate its improved performance. For further "
"information on how to build Python, see :option:`--with-tail-call-interp`."
msgstr ""

msgid ""
"This is not to be confused with `tail call optimization`__ of Python "
"functions, which is currently not implemented in CPython."
msgstr ""

msgid ""
"This new interpreter type is an internal implementation detail of the "
"CPython interpreter.  It doesn't change the visible behavior of Python "
"programs at all.  It can improve their performance, but doesn't change "
"anything else."
msgstr ""

msgid ""
"This section previously reported a 9-15% geometric mean speedup. This number "
"has since been cautiously revised down to 3-5%. While we expect performance "
"results to be better than what we report, our estimates are more "
"conservative due to a `compiler bug <https://github.com/llvm/llvm-project/"
"issues/106846>`_ found in Clang/LLVM 19, which causes the normal interpreter "
"to be slower. We were unaware of this bug, resulting in inaccurate results. "
"We sincerely apologize for communicating results that were only accurate for "
"LLVM v19.1.x and v20.1.0. In the meantime, the bug has been fixed in LLVM "
"v20.1.1 and for the upcoming v21.1, but it will remain unfixed for LLVM "
"v19.1.x and v20.1.0. Thus any benchmarks with those versions of LLVM may "
"produce inaccurate numbers. (Thanks to Nelson Elhage for bringing this to "
"light.)"
msgstr ""

msgid ""
"(Contributed by Ken Jin in :gh:`128563`, with ideas on how to implement this "
"in CPython by Mark Shannon, Garrett Gu, Haoran Xu, and Josh Haberman.)"
msgstr ""

msgid "Free-threaded mode"
msgstr ""

msgid ""
"Free-threaded mode (:pep:`703`), initially added in 3.13, has been "
"significantly improved. The implementation described in PEP 703 was "
"finished, including C API changes, and temporary workarounds in the "
"interpreter were replaced with more permanent solutions. The specializing "
"adaptive interpreter (:pep:`659`) is now enabled in free-threaded mode, "
"which along with many other optimizations greatly improves its performance. "
"The performance penalty on single-threaded code in free-threaded mode is now "
"roughly 5-10%, depending on platform and C compiler used."
msgstr ""

msgid ""
"This work was done by many contributors: Sam Gross, Matt Page, Neil "
"Schemenauer, Thomas Wouters, Donghee Na, Kirill Podoprigora, Ken Jin, Itamar "
"Oren, Brett Simmers, Dino Viehland, Nathan Goldbaum, Ralf Gommers, Lysandros "
"Nikolaou, Kumar Aditya, Edgar Margffoy, and many others."
msgstr ""

msgid ""
"Some of these contributors are employed by Meta, which has continued to "
"provide significant engineering resources to support this project."
msgstr ""

msgid ""
"From 3.14, when compiling extension modules for the free-threaded build of "
"CPython on Windows, the preprocessor variable ``Py_GIL_DISABLED`` now needs "
"to be specified by the build backend, as it will no longer be determined "
"automatically by the C compiler. For a running interpreter, the setting that "
"was used at compile time can be found using :func:`sysconfig.get_config_var`."
msgstr ""

msgid ""
"A new flag has been added, :data:`~sys.flags.context_aware_warnings`.  This "
"flag defaults to true for the free-threaded build and false for the GIL-"
"enabled build. If the flag is true then the :class:`warnings.catch_warnings` "
"context manager uses a context variable for warning filters.  This makes the "
"context manager behave predictably when used with multiple threads or "
"asynchronous tasks."
msgstr ""

msgid ""
"A new flag has been added, :data:`~sys.flags.thread_inherit_context`. This "
"flag defaults to true for the free-threaded build and false for the GIL-"
"enabled build. If the flag is true then threads created with :class:"
"`threading.Thread` start with a copy of the :class:`~contextvars.Context()` "
"of the caller of :meth:`~threading.Thread.start`.  Most significantly, this "
"makes the warning filtering context established by :class:`~warnings."
"catch_warnings` be \"inherited\" by threads (or asyncio tasks) started "
"within that context.  It also affects other modules that use context "
"variables, such as the :mod:`decimal` context manager."
msgstr ""

msgid "Syntax highlighting in PyREPL"
msgstr ""

msgid ""
"The default :term:`interactive` shell now highlights Python syntax as you "
"type.  The feature is enabled by default unless the :envvar:"
"`PYTHON_BASIC_REPL` environment is set or any color-disabling environment "
"variables are used. See :ref:`using-on-controlling-color` for details."
msgstr ""

msgid ""
"The default color theme for syntax highlighting strives for good contrast "
"and uses exclusively the 4-bit VGA standard ANSI color codes for maximum "
"compatibility. The theme can be customized using an experimental API "
"``_colorize.set_theme()``.  This can be called interactively, as well as in "
"the :envvar:`PYTHONSTARTUP` script."
msgstr ""

msgid "(Contributed by Łukasz Langa in :gh:`131507`.)"
msgstr ""

msgid "Binary releases for the experimental just-in-time compiler"
msgstr ""

msgid ""
"The official macOS and Windows release binaries now include an "
"*experimental* just-in-time (JIT) compiler. Although it is **not** "
"recommended for production use, it can be tested by setting :envvar:"
"`PYTHON_JIT=1 <PYTHON_JIT>` as an environment variable. Downstream source "
"builds and redistributors can use the :option:`--enable-experimental-jit=yes-"
"off` configuration option for similar behavior."
msgstr ""

msgid ""
"The JIT is at an early stage and still in active development. As such, the "
"typical performance impact of enabling it can range from 10% slower to 20% "
"faster, depending on workload. To aid in testing and evaluation, a set of "
"introspection functions has been provided in the :data:`sys._jit` "
"namespace. :func:`sys._jit.is_available` can be used to determine if the "
"current executable supports JIT compilation, while :func:`sys._jit."
"is_enabled` can be used to tell if JIT compilation has been enabled for the "
"current process."
msgstr ""

msgid ""
"Currently, the most significant missing functionality is that native "
"debuggers and profilers like ``gdb`` and ``perf`` are unable to unwind "
"through JIT frames (Python debuggers and profilers, like :mod:`pdb` or :mod:"
"`profile`, continue to work without modification). Free-threaded builds do "
"not support JIT compilation."
msgstr ""

msgid ""
"Please report any bugs or major performance regressions that you encounter!"
msgstr ""

msgid ":pep:`744`"
msgstr ":pep:`744`"

msgid "Concurrent safe warnings control"
msgstr ""

msgid ""
"The :class:`warnings.catch_warnings` context manager will now optionally use "
"a context variable for warning filters.  This is enabled by setting the :"
"data:`~sys.flags.context_aware_warnings` flag, either with the ``-X`` "
"command-line option or an environment variable.  This gives predictable "
"warnings control when using :class:`~warnings.catch_warnings` combined with "
"multiple threads or asynchronous tasks. The flag defaults to true for the "
"free-threaded build and false for the GIL-enabled build."
msgstr ""

msgid "(Contributed by Neil Schemenauer and Kumar Aditya in :gh:`130010`.)"
msgstr ""

msgid "Incremental garbage collection"
msgstr ""

msgid ""
"The cycle garbage collector is now incremental. This means that maximum "
"pause times are reduced by an order of magnitude or more for larger heaps."
msgstr ""

msgid ""
"There are now only two generations: young and old. When :func:`gc.collect` "
"is not called directly, the GC is invoked a little less frequently. When "
"invoked, it collects the young generation and an increment of the old "
"generation, instead of collecting one or more generations."
msgstr ""

msgid "The behavior of :func:`!gc.collect` changes slightly:"
msgstr ""

msgid ""
"``gc.collect(1)``: Performs an increment of garbage collection, rather than "
"collecting generation 1."
msgstr ""

msgid "Other calls to :func:`!gc.collect` are unchanged."
msgstr ""

msgid "(Contributed by Mark Shannon in :gh:`108362`.)"
msgstr ""

msgid "Platform support"
msgstr ""

msgid ""
":pep:`776`: Emscripten is now an officially supported platform at :pep:`tier "
"3 <11#tier-3>`. As a part of this effort, more than 25 bugs in `Emscripten "
"libc`__ were fixed. Emscripten now includes support for :mod:`ctypes`, :mod:"
"`termios`, and :mod:`fcntl`, as well as experimental support for :ref:"
"`PyREPL <tut-interactive>`."
msgstr ""

msgid ""
"(Contributed by R. Hood Chatham in :gh:`127146`, :gh:`127683`, and :gh:"
"`136931`.)"
msgstr ""

msgid "Other language changes"
msgstr ""

msgid ""
"The default :term:`interactive` shell now supports import autocompletion. "
"This means that typing ``import foo`` and pressing ``<tab>`` will suggest "
"modules starting with ``foo``. Similarly, typing ``from foo import b`` will "
"suggest submodules of ``foo`` starting with ``b``. Note that autocompletion "
"of module attributes is not currently supported. (Contributed by Tomas Roun "
"in :gh:`69605`.)"
msgstr ""

msgid ""
"The :func:`map` built-in now has an optional keyword-only *strict* flag "
"like :func:`zip` to check that all the iterables are of equal length. "
"(Contributed by Wannes Boeykens in :gh:`119793`.)"
msgstr ""

msgid ""
"Incorrect usage of :keyword:`await` and asynchronous comprehensions is now "
"detected even if the code is optimized away by the :option:`-O` command-line "
"option. For example, ``python -O -c 'assert await 1'`` now produces a :exc:"
"`SyntaxError`. (Contributed by Jelle Zijlstra in :gh:`121637`.)"
msgstr ""

msgid ""
"Writes to ``__debug__`` are now detected even if the code is optimized away "
"by the :option:`-O` command-line option. For example, ``python -O -c 'assert "
"(__debug__ := 1)'`` now produces a :exc:`SyntaxError`. (Contributed by Irit "
"Katriel in :gh:`122245`.)"
msgstr ""

msgid ""
"Add class methods :meth:`float.from_number` and :meth:`complex.from_number` "
"to convert a number to :class:`float` or :class:`complex` type "
"correspondingly. They raise an error if the argument is a string. "
"(Contributed by Serhiy Storchaka in :gh:`84978`.)"
msgstr ""

msgid ""
"Implement mixed-mode arithmetic rules combining real and complex numbers as "
"specified by C standards since C99. (Contributed by Sergey B Kirpichev in :"
"gh:`69639`.)"
msgstr ""

msgid ""
"All Windows code pages are now supported as \"cpXXX\" codecs on Windows. "
"(Contributed by Serhiy Storchaka in :gh:`123803`.)"
msgstr ""

msgid ""
":class:`super` objects are now :mod:`pickleable <pickle>` and :mod:`copyable "
"<copy>`. (Contributed by Serhiy Storchaka in :gh:`125767`.)"
msgstr ""

msgid ""
"The :class:`memoryview` type now supports subscription, making it a :term:"
"`generic type`. (Contributed by Brian Schubert in :gh:`126012`.)"
msgstr ""

msgid ""
"Support underscore and comma as thousands separators in the fractional part "
"for floating-point presentation types of the new-style string formatting "
"(with :func:`format` or :ref:`f-strings`). (Contributed by Sergey B "
"Kirpichev in :gh:`87790`.)"
msgstr ""

msgid ""
"The :func:`bytes.fromhex` and :func:`bytearray.fromhex` methods now accept "
"ASCII :class:`bytes` and :term:`bytes-like objects <bytes-like object>`. "
"(Contributed by Daniel Pope in :gh:`129349`.)"
msgstr ""

msgid ""
"Support ``\\z`` as a synonym for ``\\Z`` in :mod:`regular expressions <re>`. "
"It is interpreted unambiguously in many other regular expression engines, "
"unlike ``\\Z``, which has subtly different behavior. (Contributed by Serhiy "
"Storchaka in :gh:`133306`.)"
msgstr ""

msgid ""
"``\\B`` in :mod:`regular expression <re>` now matches the empty input "
"string. Now it is always the opposite of ``\\b``. (Contributed by Serhiy "
"Storchaka in :gh:`124130`.)"
msgstr ""

msgid ""
"iOS and macOS apps can now be configured to redirect ``stdout`` and "
"``stderr`` content to the system log. (Contributed by Russell Keith-Magee "
"in :gh:`127592`.)"
msgstr ""

msgid ""
"The iOS testbed is now able to stream test output while the test is running. "
"The testbed can also be used to run the test suite of projects other than "
"CPython itself. (Contributed by Russell Keith-Magee in :gh:`127592`.)"
msgstr ""

msgid ""
"Three-argument :func:`pow` now tries calling :meth:`~object.__rpow__` if "
"necessary. Previously it was only called in two-argument :func:`!pow` and "
"the binary power operator. (Contributed by Serhiy Storchaka in :gh:`130104`.)"
msgstr ""

msgid ""
"Add a built-in implementation for HMAC (:rfc:`2104`) using formally verified "
"code from the `HACL* <https://github.com/hacl-star/hacl-star/>`__ project. "
"This implementation is used as a fallback when the OpenSSL implementation of "
"HMAC is not available. (Contributed by Bénédikt Tran in :gh:`99108`.)"
msgstr ""

msgid ""
"The import time flag can now track modules that are already loaded "
"('cached'), via the new :option:`-X importtime=2 <-X>`. When such a module "
"is imported, the ``self`` and ``cumulative`` times are replaced by the "
"string ``cached``. Values above ``2`` for ``-X importtime`` are now reserved "
"for future use. (Contributed by Noah Kim and Adam Turner in :gh:`118655`.)"
msgstr ""

msgid ""
"When subclassing from a pure C type, the C slots for the new type are no "
"longer replaced with a wrapped version on class creation if they are not "
"explicitly overridden in the subclass. (Contributed by Tomasz Pytel in :gh:"
"`132329`.)"
msgstr ""

msgid ""
"The command-line option :option:`-c` now automatically dedents its code "
"argument before execution. The auto-dedentation behavior mirrors :func:"
"`textwrap.dedent`. (Contributed by Jon Crall and Steven Sun in :gh:`103998`.)"
msgstr ""

msgid ""
"Improve error message when an object supporting the synchronous context "
"manager protocol is entered using :keyword:`async with` instead of :keyword:"
"`with`. And vice versa with the asynchronous context manager protocol. "
"(Contributed by Bénédikt Tran in :gh:`128398`.)"
msgstr ""

msgid ""
":option:`!-J` is no longer a reserved flag for Jython_, and now has no "
"special meaning. (Contributed by Adam Turner in :gh:`133336`.)"
msgstr ""

msgid ""
"The :func:`int` built-in no longer delegates to :meth:`~object.__trunc__`. "
"Classes that want to support conversion to :func:`!int` must implement "
"either :meth:`~object.__int__` or :meth:`~object.__index__`. (Contributed by "
"Mark Dickinson in :gh:`119743`.)"
msgstr ""

msgid ""
"Using :data:`NotImplemented` in a boolean context will now raise a :exc:"
"`TypeError`. This has raised a :exc:`DeprecationWarning` since Python 3.9. "
"(Contributed by Jelle Zijlstra in :gh:`118767`.)"
msgstr ""

msgid ""
"PEP 765: Disallow ``return``/``break``/``continue`` that exit a ``finally`` "
"block"
msgstr ""

msgid ""
"The compiler emits a :exc:`SyntaxWarning` when a :keyword:`return`, :keyword:"
"`break` or :keyword:`continue` statement appears where it exits a :keyword:"
"`finally` block. This change is specified in :pep:`765`."
msgstr ""

msgid "New modules"
msgstr ""

msgid ""
":mod:`annotationlib`: For introspecting :term:`annotations <annotation>`. "
"See :pep:`749` for more details. (Contributed by Jelle Zijlstra in :gh:"
"`119180`.)"
msgstr ""

msgid "Improved modules"
msgstr ""

msgid "argparse"
msgstr ""

msgid ""
"The default value of the :ref:`program name <prog>` for :class:`argparse."
"ArgumentParser` now reflects the way the Python interpreter was instructed "
"to find the ``__main__`` module code. (Contributed by Serhiy Storchaka and "
"Alyssa Coghlan in :gh:`66436`.)"
msgstr ""

msgid ""
"Introduced the optional *suggest_on_error* parameter to :class:`argparse."
"ArgumentParser`, enabling suggestions for argument choices and subparser "
"names if mistyped by the user. (Contributed by Savannah Ostrowski in :gh:"
"`124456`.)"
msgstr ""

msgid ""
"Enable color for help text, which can be disabled with the optional *color* "
"parameter to :class:`argparse.ArgumentParser`. This can also be controlled "
"by :ref:`environment variables <using-on-controlling-color>`. (Contributed "
"by Hugo van Kemenade in :gh:`130645`.)"
msgstr ""

msgid "ast"
msgstr ""

msgid ""
"Add :func:`ast.compare` for comparing two ASTs. (Contributed by Batuhan "
"Taskaya and Jeremy Hylton in :gh:`60191`.)"
msgstr ""

msgid ""
"Add support for :func:`copy.replace` for AST nodes. (Contributed by Bénédikt "
"Tran in :gh:`121141`.)"
msgstr ""

msgid ""
"Docstrings are now removed from an optimized AST in optimization level 2. "
"(Contributed by Irit Katriel in :gh:`123958`.)"
msgstr ""

msgid ""
"The ``repr()`` output for AST nodes now includes more information. "
"(Contributed by Tomas Roun in :gh:`116022`.)"
msgstr ""

msgid ""
":func:`ast.parse`, when called with an AST as input, now always verifies "
"that the root node type is appropriate. (Contributed by Irit Katriel in :gh:"
"`130139`.)"
msgstr ""

msgid ""
"Add new ``--feature-version``, ``--optimize``, ``--show-empty`` options to "
"the command-line interface. (Contributed by Semyon Moroz in :gh:`133367`.)"
msgstr ""

msgid "asyncio"
msgstr ""

msgid ""
"The function and methods named :func:`!create_task` now take an arbitrary "
"list of keyword arguments. All keyword arguments are passed to the :class:"
"`~asyncio.Task` constructor or the custom task factory. (See :meth:`~asyncio."
"loop.set_task_factory` for details.) The ``name`` and ``context`` keyword "
"arguments are no longer special; the name should now be set using the "
"``name`` keyword argument of the factory, and ``context`` may be ``None``."
msgstr ""

msgid ""
"This affects the following function and methods: :meth:`asyncio."
"create_task`, :meth:`asyncio.loop.create_task`, :meth:`asyncio.TaskGroup."
"create_task`. (Contributed by Thomas Grainger in :gh:`128307`.)"
msgstr ""

msgid ""
"There are two new utility functions for introspecting and printing a "
"program's call graph: :func:`~asyncio.capture_call_graph` and :func:"
"`~asyncio.print_call_graph`. (Contributed by Yury Selivanov, Pablo Galindo "
"Salgado, and Łukasz Langa in :gh:`91048`.)"
msgstr ""

msgid "calendar"
msgstr ""

msgid ""
"By default, today's date is highlighted in color in :mod:`calendar`'s :ref:"
"`command-line <calendar-cli>` text output. This can be controlled by :ref:"
"`environment variables <using-on-controlling-color>`. (Contributed by Hugo "
"van Kemenade in :gh:`128317`.)"
msgstr ""

msgid "concurrent.futures"
msgstr ""

msgid ""
"Add :class:`~concurrent.futures.InterpreterPoolExecutor`, which exposes "
"\"subinterpreters\" (multiple Python interpreters in the same process) to "
"Python code.  This is separate from the proposed API in :pep:`734`. "
"(Contributed by Eric Snow in :gh:`124548`.)"
msgstr ""

msgid ""
"The default :class:`~concurrent.futures.ProcessPoolExecutor` :ref:`start "
"method <multiprocessing-start-methods>` changed from :ref:`fork "
"<multiprocessing-start-method-fork>` to :ref:`forkserver <multiprocessing-"
"start-method-forkserver>` on platforms other than macOS and Windows where it "
"was already :ref:`spawn <multiprocessing-start-method-spawn>`."
msgstr ""

msgid ""
"If the threading incompatible *fork* method is required, you must explicitly "
"request it by supplying a multiprocessing context *mp_context* to :class:"
"`~concurrent.futures.ProcessPoolExecutor`."
msgstr ""

msgid ""
"See :ref:`forkserver restrictions <multiprocessing-programming-forkserver>` "
"for information and differences with the *fork* method and how this change "
"may affect existing code with mutable global shared variables and/or shared "
"objects that can not be automatically :mod:`pickled <pickle>`."
msgstr ""

msgid "(Contributed by Gregory P. Smith in :gh:`84559`.)"
msgstr ""

msgid ""
"Add :meth:`concurrent.futures.ProcessPoolExecutor.terminate_workers` and :"
"meth:`concurrent.futures.ProcessPoolExecutor.kill_workers` as ways to "
"terminate or kill all living worker processes in the given pool. "
"(Contributed by Charles Machalow in :gh:`130849`.)"
msgstr ""

msgid ""
"Add the optional ``buffersize`` parameter to :meth:`concurrent.futures."
"Executor.map` to limit the number of submitted tasks whose results have not "
"yet been yielded. If the buffer is full, iteration over the *iterables* "
"pauses until a result is yielded from the buffer. (Contributed by Enzo "
"Bonnal and Josh Rosenberg in :gh:`74028`.)"
msgstr ""

msgid "configparser"
msgstr ""

msgid ""
"Security fix: will no longer write config files it cannot read. Attempting "
"to :meth:`configparser.ConfigParser.write` keys containing delimiters or "
"beginning with the section header pattern will raise a :class:`configparser."
"InvalidWriteError`. (Contributed by Jacob Lincoln in :gh:`129270`.)"
msgstr ""

msgid "contextvars"
msgstr ""

msgid ""
"Support context manager protocol by :class:`contextvars.Token`. (Contributed "
"by Andrew Svetlov in :gh:`129889`.)"
msgstr ""

msgid "ctypes"
msgstr ""

msgid ""
"The layout of :ref:`bit fields <ctypes-bit-fields-in-structures-unions>` in :"
"class:`~ctypes.Structure` and :class:`~ctypes.Union` now matches platform "
"defaults (GCC/Clang or MSVC) more closely. In particular, fields no longer "
"overlap. (Contributed by Matthias Görgens in :gh:`97702`.)"
msgstr ""

msgid ""
"The :attr:`.Structure._layout_` class attribute can now be set to help match "
"a non-default ABI. (Contributed by Petr Viktorin in :gh:`97702`.)"
msgstr ""

msgid ""
"The class of :class:`~ctypes.Structure`/:class:`~ctypes.Union` field "
"descriptors is now available as :class:`~ctypes.CField`, and has new "
"attributes to aid debugging and introspection. (Contributed by Petr Viktorin "
"in :gh:`128715`.)"
msgstr ""

msgid ""
"On Windows, the :exc:`~ctypes.COMError` exception is now public. "
"(Contributed by Jun Komoda in :gh:`126686`.)"
msgstr ""

msgid ""
"On Windows, the :func:`~ctypes.CopyComPointer` function is now public. "
"(Contributed by Jun Komoda in :gh:`127275`.)"
msgstr ""

msgid ""
":func:`ctypes.memoryview_at` now exists to create a :class:`memoryview` "
"object that refers to the supplied pointer and length. This works like :func:"
"`ctypes.string_at` except it avoids a buffer copy, and is typically useful "
"when implementing pure Python callback functions that are passed dynamically-"
"sized buffers. (Contributed by Rian Hunter in :gh:`112018`.)"
msgstr ""

msgid ""
"Complex types, :class:`~ctypes.c_float_complex`, :class:`~ctypes."
"c_double_complex` and :class:`~ctypes.c_longdouble_complex`, are now "
"available if both the compiler and the ``libffi`` library support complex C "
"types. (Contributed by Sergey B Kirpichev in :gh:`61103`.)"
msgstr ""

msgid ""
"Add :func:`ctypes.util.dllist` for listing the shared libraries loaded by "
"the current process. (Contributed by Brian Ward in :gh:`119349`.)"
msgstr ""

msgid ""
"Move :func:`ctypes.POINTER` types cache from a global internal cache "
"(``_pointer_type_cache``) to the :attr:`ctypes._CData.__pointer_type__` "
"attribute of the corresponding :mod:`ctypes` types. This will stop the cache "
"from growing without limits in some situations. (Contributed by Sergey "
"Miryanov in :gh:`100926`.)"
msgstr ""

msgid ""
"The :class:`ctypes.py_object` type now supports subscription, making it a :"
"term:`generic type`. (Contributed by Brian Schubert in :gh:`132168`.)"
msgstr ""

msgid ""
":mod:`ctypes` now supports :term:`free-threading builds <free threading>`. "
"(Contributed by Kumar Aditya and Peter Bierma in :gh:`127945`.)"
msgstr ""

msgid "curses"
msgstr ""

msgid ""
"Add the :func:`~curses.assume_default_colors` function, a refinement of the :"
"func:`~curses.use_default_colors` function which allows to change the color "
"pair ``0``. (Contributed by Serhiy Storchaka in :gh:`133139`.)"
msgstr ""

msgid "datetime"
msgstr ""

msgid ""
"Add :meth:`datetime.time.strptime` and :meth:`datetime.date.strptime`. "
"(Contributed by Wannes Boeykens in :gh:`41431`.)"
msgstr ""

msgid "decimal"
msgstr ""

msgid ""
"Add alternative :class:`~decimal.Decimal` constructor :meth:`Decimal."
"from_number() <decimal.Decimal.from_number>`. (Contributed by Serhiy "
"Storchaka in :gh:`121798`.)"
msgstr ""

msgid ""
"Expose :func:`decimal.IEEEContext` to support creation of contexts "
"corresponding to the IEEE 754 (2008) decimal interchange formats. "
"(Contributed by Sergey B Kirpichev in :gh:`53032`.)"
msgstr ""

msgid "difflib"
msgstr ""

msgid ""
"Comparison pages with highlighted changes generated by the :class:`difflib."
"HtmlDiff` class now support dark mode. (Contributed by Jiahao Li in :gh:"
"`129939`.)"
msgstr ""

msgid "dis"
msgstr ""

msgid ""
"Add support for rendering full source location information of :class:"
"`instructions <dis.Instruction>`, rather than only the line number. This "
"feature is added to the following interfaces via the *show_positions* "
"keyword argument:"
msgstr ""

msgid ":class:`dis.Bytecode`"
msgstr ""

msgid ":func:`dis.dis`"
msgstr ""

msgid ":func:`dis.distb`"
msgstr ""

msgid ":func:`dis.disassemble`"
msgstr ""

msgid ""
"This feature is also exposed via :option:`dis --show-positions`. "
"(Contributed by Bénédikt Tran in :gh:`123165`.)"
msgstr ""

msgid ""
"Add the :option:`dis --specialized` command-line option to show specialized "
"bytecode. (Contributed by Bénédikt Tran in :gh:`127413`.)"
msgstr ""

msgid "errno"
msgstr ""

msgid ""
"Add :data:`errno.EHWPOISON` error code. (Contributed by James Roy in :gh:"
"`126585`.)"
msgstr ""

msgid "faulthandler"
msgstr ""

msgid ""
"Add support for printing the C stack trace on systems that :ref:`support it "
"<c-stack-compatibility>` via :func:`faulthandler.dump_c_stack` or via the "
"*c_stack* argument in :func:`faulthandler.enable`. (Contributed by Peter "
"Bierma in :gh:`127604`.)"
msgstr ""

msgid "fnmatch"
msgstr ""

msgid ""
"Added :func:`fnmatch.filterfalse` for excluding names matching a pattern. "
"(Contributed by Bénédikt Tran in :gh:`74598`.)"
msgstr ""

msgid "fractions"
msgstr ""

msgid ""
"Add support for converting any objects that have the :meth:`!"
"as_integer_ratio` method to a :class:`~fractions.Fraction`. (Contributed by "
"Serhiy Storchaka in :gh:`82017`.)"
msgstr ""

msgid ""
"Add alternative :class:`~fractions.Fraction` constructor :meth:`Fraction."
"from_number() <fractions.Fraction.from_number>`. (Contributed by Serhiy "
"Storchaka in :gh:`121797`.)"
msgstr ""

msgid "functools"
msgstr ""

msgid ""
"Add support to :func:`functools.partial` and :func:`functools.partialmethod` "
"for :data:`functools.Placeholder` sentinels to reserve a place for "
"positional arguments. (Contributed by Dominykas Grigonis in :gh:`119127`.)"
msgstr ""

msgid ""
"Allow the *initial* parameter of :func:`functools.reduce` to be passed as a "
"keyword argument. (Contributed by Sayandip Dutta in :gh:`125916`.)"
msgstr ""

msgid "getopt"
msgstr ""

msgid ""
"Add support for options with optional arguments. (Contributed by Serhiy "
"Storchaka in :gh:`126374`.)"
msgstr ""

msgid ""
"Add support for returning intermixed options and non-option arguments in "
"order. (Contributed by Serhiy Storchaka in :gh:`126390`.)"
msgstr ""

msgid "getpass"
msgstr ""

msgid ""
"Support keyboard feedback by :func:`getpass.getpass` via the keyword-only "
"optional argument ``echo_char``. Placeholder characters are rendered "
"whenever a character is entered, and removed when a character is deleted. "
"(Contributed by Semyon Moroz in :gh:`77065`.)"
msgstr ""

msgid "graphlib"
msgstr ""

msgid ""
"Allow :meth:`graphlib.TopologicalSorter.prepare` to be called more than once "
"as long as sorting has not started. (Contributed by Daniel Pope in :gh:"
"`130914`.)"
msgstr ""

msgid "heapq"
msgstr ""

msgid "Add functions for working with max-heaps:"
msgstr ""

msgid ":func:`heapq.heapify_max`,"
msgstr ""

msgid ":func:`heapq.heappush_max`,"
msgstr ""

msgid ":func:`heapq.heappop_max`,"
msgstr ""

msgid ":func:`heapq.heapreplace_max`"
msgstr ""

msgid ":func:`heapq.heappushpop_max`"
msgstr ""

msgid "hmac"
msgstr ""

msgid ""
"Add a built-in implementation for HMAC (:rfc:`2104`) using formally verified "
"code from the `HACL* <https://github.com/hacl-star/hacl-star/>`__ project. "
"(Contributed by Bénédikt Tran in :gh:`99108`.)"
msgstr ""

msgid "http"
msgstr ""

msgid ""
"Directory lists and error pages generated by the :mod:`http.server` module "
"allow the browser to apply its default dark mode. (Contributed by Yorik "
"Hansen in :gh:`123430`.)"
msgstr ""

msgid ""
"The :mod:`http.server` module now supports serving over HTTPS using the :"
"class:`http.server.HTTPSServer` class. This functionality is exposed by the "
"command-line interface (``python -m http.server``) through the following "
"options:"
msgstr ""

msgid "``--tls-cert <path>``: Path to the TLS certificate file."
msgstr ""

msgid "``--tls-key <path>``: Optional path to the private key file."
msgstr ""

msgid ""
"``--tls-password-file <path>``: Optional path to the password file for the "
"private key."
msgstr ""

msgid "(Contributed by Semyon Moroz in :gh:`85162`.)"
msgstr ""

msgid "imaplib"
msgstr ""

msgid ""
"Add :meth:`IMAP4.idle() <imaplib.IMAP4.idle>`, implementing the IMAP4 "
"``IDLE`` command as defined in :rfc:`2177`. (Contributed by Forest in :gh:"
"`55454`.)"
msgstr ""

msgid "inspect"
msgstr ""

msgid ""
":func:`inspect.signature` takes a new argument *annotation_format* to "
"control the :class:`annotationlib.Format` used for representing annotations. "
"(Contributed by Jelle Zijlstra in :gh:`101552`.)"
msgstr ""

msgid ""
":meth:`inspect.Signature.format` takes a new argument *unquote_annotations*. "
"If true, string :term:`annotations <annotation>` are displayed without "
"surrounding quotes. (Contributed by Jelle Zijlstra in :gh:`101552`.)"
msgstr ""

msgid ""
"Add function :func:`inspect.ispackage` to determine whether an object is a :"
"term:`package` or not. (Contributed by Zhikang Yan in :gh:`125634`.)"
msgstr ""

msgid "io"
msgstr ""

msgid ""
"Reading text from a non-blocking stream with ``read`` may now raise a :exc:"
"`BlockingIOError` if the operation cannot immediately return bytes. "
"(Contributed by Giovanni Siragusa in :gh:`109523`.)"
msgstr ""

msgid ""
"Add protocols :class:`io.Reader` and :class:`io.Writer` as simpler "
"alternatives to the pseudo-protocols :class:`typing.IO`, :class:`typing."
"TextIO`, and :class:`typing.BinaryIO`. (Contributed by Sebastian Rittau in :"
"gh:`127648`.)"
msgstr ""

msgid "json"
msgstr ""

msgid ""
"Add notes for JSON serialization errors that allow to identify the source of "
"the error. (Contributed by Serhiy Storchaka in :gh:`122163`.)"
msgstr ""

msgid ""
"Enable the :mod:`json` module to work as a script using the :option:`-m` "
"switch: :program:`python -m json`. See the :ref:`JSON command-line interface "
"<json-commandline>` documentation. (Contributed by Trey Hunner in :gh:"
"`122873`.)"
msgstr ""

msgid ""
"By default, the output of the :ref:`JSON command-line interface <json-"
"commandline>` is highlighted in color. This can be controlled by :ref:"
"`environment variables <using-on-controlling-color>`. (Contributed by Tomas "
"Roun in :gh:`131952`.)"
msgstr ""

msgid "linecache"
msgstr ""

msgid ""
":func:`linecache.getline` can retrieve source code for frozen modules. "
"(Contributed by Tian Gao in :gh:`131638`.)"
msgstr ""

msgid "logging.handlers"
msgstr ""

msgid ""
":class:`logging.handlers.QueueListener` now implements the context manager "
"protocol, allowing it to be used in a :keyword:`with` statement. "
"(Contributed by Charles Machalow in :gh:`132106`.)"
msgstr ""

msgid ""
":meth:`QueueListener.start <logging.handlers.QueueListener.start>` now "
"raises a :exc:`RuntimeError` if the listener is already started. "
"(Contributed by Charles Machalow in :gh:`132106`.)"
msgstr ""

msgid "math"
msgstr ""

msgid ""
"Added more detailed error messages for domain errors in the module. "
"(Contributed by Charlie Zhao and Sergey B Kirpichev in :gh:`101410`.)"
msgstr ""

msgid "mimetypes"
msgstr ""

msgid ""
"Document the command-line for :mod:`mimetypes`. It now exits with ``1`` on "
"failure instead of ``0`` and ``2`` on incorrect command-line parameters "
"instead of ``1``. Also, errors are printed to stderr instead of stdout and "
"their text is made tighter. (Contributed by Oleg Iarygin and Hugo van "
"Kemenade in :gh:`93096`.)"
msgstr ""

msgid "Add MS and :rfc:`8081` MIME types for fonts:"
msgstr ""

msgid "Embedded OpenType: ``application/vnd.ms-fontobject``"
msgstr ""

msgid "OpenType Layout (OTF) ``font/otf``"
msgstr ""

msgid "TrueType: ``font/ttf``"
msgstr ""

msgid "WOFF 1.0 ``font/woff``"
msgstr ""

msgid "WOFF 2.0 ``font/woff2``"
msgstr ""

msgid "(Contributed by Sahil Prajapati and Hugo van Kemenade in :gh:`84852`.)"
msgstr ""

msgid ""
"Add :rfc:`9559` MIME types for Matroska audiovisual data container "
"structures, containing:"
msgstr ""

msgid "audio with no video: ``audio/matroska`` (``.mka``)"
msgstr ""

msgid "video: ``video/matroska`` (``.mkv``)"
msgstr ""

msgid "stereoscopic video: ``video/matroska-3d`` (``.mk3d``)"
msgstr ""

msgid "(Contributed by Hugo van Kemenade in :gh:`89416`.)"
msgstr ""

msgid "Add MIME types for images with RFCs:"
msgstr ""

msgid ":rfc:`1494`: CCITT Group 3 (``.g3``)"
msgstr ""

msgid ":rfc:`3362`: Real-time Facsimile, T.38 (``.t38``)"
msgstr ""

msgid ""
":rfc:`3745`: JPEG 2000 (``.jp2``), extension (``.jpx``) and compound (``."
"jpm``)"
msgstr ""

msgid ":rfc:`3950`: Tag Image File Format Fax eXtended, TIFF-FX (``.tfx``)"
msgstr ""

msgid ":rfc:`4047`: Flexible Image Transport System (``.fits``)"
msgstr ""

msgid ""
":rfc:`7903`: Enhanced Metafile (``.emf``) and Windows Metafile (``.wmf``)"
msgstr ""

msgid "(Contributed by Hugo van Kemenade in :gh:`85957`.)"
msgstr ""

msgid "More MIME type changes:"
msgstr ""

msgid ""
":rfc:`2361`: Change type for ``.avi`` to ``video/vnd.avi`` and for ``.wav`` "
"to ``audio/vnd.wave``"
msgstr ""

msgid ":rfc:`4337`: Add MPEG-4 ``audio/mp4`` (``.m4a``)"
msgstr ""

msgid ":rfc:`5334`: Add Ogg media (``.oga``, ``.ogg`` and ``.ogx``)"
msgstr ""

msgid ":rfc:`6713`: Add gzip ``application/gzip`` (``.gz``)"
msgstr ""

msgid ":rfc:`9639`: Add FLAC ``audio/flac`` (``.flac``)"
msgstr ""

msgid "Add 7z ``application/x-7z-compressed`` (``.7z``)"
msgstr ""

msgid ""
"Add Android Package ``application/vnd.android.package-archive`` (``.apk``) "
"when not strict"
msgstr ""

msgid "Add deb ``application/x-debian-package`` (``.deb``)"
msgstr ""

msgid "Add glTF binary ``model/gltf-binary`` (``.glb``)"
msgstr ""

msgid "Add glTF JSON/ASCII ``model/gltf+json`` (``.gltf``)"
msgstr ""

msgid "Add M4V ``video/x-m4v`` (``.m4v``)"
msgstr ""

msgid "Add PHP ``application/x-httpd-php`` (``.php``)"
msgstr ""

msgid "Add RAR ``application/vnd.rar`` (``.rar``)"
msgstr ""

msgid "Add RPM ``application/x-rpm`` (``.rpm``)"
msgstr ""

msgid "Add STL ``model/stl`` (``.stl``)"
msgstr ""

msgid "Add Windows Media Video ``video/x-ms-wmv`` (``.wmv``)"
msgstr ""

msgid "De facto: Add WebM ``audio/webm`` (``.weba``)"
msgstr ""

msgid ""
"`ECMA-376 <https://ecma-international.org/publications-and-standards/"
"standards/ecma-376/>`__: Add ``.docx``, ``.pptx`` and ``.xlsx`` types"
msgstr ""

msgid ""
"`OASIS <https://docs.oasis-open.org/office/v1.2/cs01/OpenDocument-v1.2-cs01-"
"part1.html#Appendix_C>`__: Add OpenDocument ``.odg``, ``.odp``, ``.ods`` and "
"``.odt`` types"
msgstr ""

msgid ""
"`W3C <https://www.w3.org/TR/epub-33/#app-media-type>`__: Add EPUB "
"``application/epub+zip`` (``.epub``)"
msgstr ""

msgid "(Contributed by Hugo van Kemenade in :gh:`129965`.)"
msgstr ""

msgid ""
"Add :rfc:`9512` ``application/yaml`` MIME type for YAML files (``.yaml`` and "
"``.yml``). (Contributed by Sasha \"Nelie\" Chernykh and Hugo van Kemenade "
"in :gh:`132056`.)"
msgstr ""

msgid "multiprocessing"
msgstr ""

msgid ""
"The default :ref:`start method <multiprocessing-start-methods>` changed "
"from :ref:`fork <multiprocessing-start-method-fork>` to :ref:`forkserver "
"<multiprocessing-start-method-forkserver>` on platforms other than macOS and "
"Windows where it was already :ref:`spawn <multiprocessing-start-method-"
"spawn>`."
msgstr ""

msgid ""
"If the threading incompatible *fork* method is required, you must explicitly "
"request it via a context from :func:`multiprocessing.get_context` "
"(preferred) or change the default via :func:`multiprocessing."
"set_start_method`."
msgstr ""

msgid ""
":mod:`multiprocessing`'s ``\"forkserver\"`` start method now authenticates "
"its control socket to avoid solely relying on filesystem permissions to "
"restrict what other processes could cause the forkserver to spawn workers "
"and run code. (Contributed by Gregory P. Smith for :gh:`97514`.)"
msgstr ""

msgid ""
"The :ref:`multiprocessing proxy objects <multiprocessing-proxy_objects>` for "
"*list* and *dict* types gain previously overlooked missing methods:"
msgstr ""

msgid ":meth:`!clear` and :meth:`!copy` for proxies of :class:`list`"
msgstr ""

msgid ""
":meth:`~dict.fromkeys`, ``reversed(d)``, ``d | {}``, ``{} | d``, ``d |= "
"{'b': 2}`` for proxies of :class:`dict`"
msgstr ""

msgid "(Contributed by Roy Hyunjin Han for :gh:`103134`.)"
msgstr ""

msgid ""
"Add support for shared :class:`set` objects via :meth:`SyncManager.set() "
"<multiprocessing.managers.SyncManager.set>`. The :func:`set` in :func:"
"`multiprocessing.Manager` method is now available. (Contributed by Mingyu "
"Park in :gh:`129949`.)"
msgstr ""

msgid ""
"Add :func:`multiprocessing.Process.interrupt` which terminates the child "
"process by sending :py:const:`~signal.SIGINT`. This enables :keyword:"
"`finally` clauses to print a stack trace for the terminated process. "
"(Contributed by Artem Pulkin in :gh:`131913`.)"
msgstr ""

msgid "operator"
msgstr ""

msgid ""
"Two new functions :func:`operator.is_none` and :func:`operator.is_not_none` "
"have been added, such that ``operator.is_none(obj)`` is equivalent to ``obj "
"is None`` and ``operator.is_not_none(obj)`` is equivalent to ``obj is not "
"None``. (Contributed by Raymond Hettinger and Nico Mexis in :gh:`115808`.)"
msgstr ""

msgid "os"
msgstr ""

msgid ""
"Add the :func:`os.reload_environ` function to update :data:`os.environ` and :"
"data:`os.environb` with changes to the environment made by :func:`os."
"putenv`, by :func:`os.unsetenv`, or made outside Python in the same process. "
"(Contributed by Victor Stinner in :gh:`120057`.)"
msgstr ""

msgid ""
"Add the :data:`~os.SCHED_DEADLINE` and :data:`~os.SCHED_NORMAL` constants to "
"the :mod:`os` module. (Contributed by James Roy in :gh:`127688`.)"
msgstr ""

msgid ""
"Add the :func:`os.readinto` function to read into a :ref:`buffer object "
"<bufferobjects>` from a file descriptor. (Contributed by Cody Maloney in :gh:"
"`129205`.)"
msgstr ""

msgid "os.path"
msgstr ""

msgid ""
"The *strict* parameter to :func:`os.path.realpath` accepts a new value, :"
"data:`os.path.ALLOW_MISSING`. If used, errors other than :exc:"
"`FileNotFoundError` will be re-raised; the resulting path can be missing but "
"it will be free of symlinks. (Contributed by Petr Viktorin for :cve:"
"`2025-4517`.)"
msgstr ""

msgid "pathlib"
msgstr ""

msgid ""
"Add methods to :class:`pathlib.Path` to recursively copy or move files and "
"directories:"
msgstr ""

msgid ""
":meth:`~pathlib.Path.copy` copies a file or directory tree to a destination."
msgstr ""

msgid ":meth:`~pathlib.Path.copy_into` copies *into* a destination directory."
msgstr ""

msgid ""
":meth:`~pathlib.Path.move` moves a file or directory tree to a destination."
msgstr ""

msgid ":meth:`~pathlib.Path.move_into` moves *into* a destination directory."
msgstr ""

msgid "(Contributed by Barney Gale in :gh:`73991`.)"
msgstr ""

msgid ""
"Add :attr:`pathlib.Path.info` attribute, which stores an object implementing "
"the :class:`pathlib.types.PathInfo` protocol (also new). The object supports "
"querying the file type and internally caching :func:`~os.stat` results. Path "
"objects generated by :meth:`~pathlib.Path.iterdir` are initialized with file "
"type information gleaned from scanning the parent directory. (Contributed by "
"Barney Gale in :gh:`125413`.)"
msgstr ""

msgid "pdb"
msgstr ""

msgid ""
"Hardcoded breakpoints (:func:`breakpoint` and :func:`pdb.set_trace`) now "
"reuse the most recent :class:`~pdb.Pdb` instance that calls :meth:`~pdb.Pdb."
"set_trace`, instead of creating a new one each time. As a result, all the "
"instance specific data like :pdbcmd:`display` and :pdbcmd:`commands` are "
"preserved across hardcoded breakpoints. (Contributed by Tian Gao in :gh:"
"`121450`.)"
msgstr ""

msgid ""
"Add a new argument *mode* to :class:`pdb.Pdb`. Disable the ``restart`` "
"command when :mod:`pdb` is in ``inline`` mode. (Contributed by Tian Gao in :"
"gh:`123757`.)"
msgstr ""

msgid ""
"A confirmation prompt will be shown when the user tries to quit :mod:`pdb` "
"in ``inline`` mode. ``y``, ``Y``, ``<Enter>`` or ``EOF`` will confirm the "
"quit and call :func:`sys.exit`, instead of raising :exc:`bdb.BdbQuit`. "
"(Contributed by Tian Gao in :gh:`124704`.)"
msgstr ""

msgid ""
"Inline breakpoints like :func:`breakpoint` or :func:`pdb.set_trace` will "
"always stop the program at calling frame, ignoring the ``skip`` pattern (if "
"any). (Contributed by Tian Gao in :gh:`130493`.)"
msgstr ""

msgid ""
"``<tab>`` at the beginning of the line in :mod:`pdb` multi-line input will "
"fill in a 4-space indentation now, instead of inserting a ``\\t`` character. "
"(Contributed by Tian Gao in :gh:`130471`.)"
msgstr ""

msgid ""
"Auto-indent is introduced in :mod:`pdb` multi-line input. It will either "
"keep the indentation of the last line or insert a 4-space indentation when "
"it detects a new code block. (Contributed by Tian Gao in :gh:`133350`.)"
msgstr ""

msgid ""
"``$_asynctask`` is added to access the current asyncio task if applicable. "
"(Contributed by Tian Gao in :gh:`124367`.)"
msgstr ""

msgid ""
":func:`pdb.set_trace_async` is added to support debugging asyncio "
"coroutines. :keyword:`await` statements are supported with this function. "
"(Contributed by Tian Gao in :gh:`132576`.)"
msgstr ""

msgid ""
"Source code displayed in :mod:`pdb` will be syntax-highlighted. This feature "
"can be controlled using the same methods as PyREPL, in addition to the newly "
"added ``colorize`` argument of :class:`pdb.Pdb`. (Contributed by Tian Gao "
"and Łukasz Langa in :gh:`133355`.)"
msgstr ""

msgid "pickle"
msgstr ""

msgid ""
"Set the default protocol version on the :mod:`pickle` module to 5. For more "
"details, see :ref:`pickle protocols <pickle-protocols>`."
msgstr ""

msgid ""
"Add notes for pickle serialization errors that allow to identify the source "
"of the error. (Contributed by Serhiy Storchaka in :gh:`122213`.)"
msgstr ""

msgid "platform"
msgstr ""

msgid ""
"Add :func:`platform.invalidate_caches` to invalidate the cached results. "
"(Contributed by Bénédikt Tran in :gh:`122549`.)"
msgstr ""

msgid "pydoc"
msgstr ""

msgid ""
":term:`Annotations <annotation>` in help output are now usually displayed in "
"a format closer to that in the original source. (Contributed by Jelle "
"Zijlstra in :gh:`101552`.)"
msgstr ""

msgid "socket"
msgstr ""

msgid "Improve and fix support for Bluetooth sockets."
msgstr ""

msgid ""
"Fix support of Bluetooth sockets on NetBSD and DragonFly BSD. (Contributed "
"by Serhiy Storchaka in :gh:`132429`.)"
msgstr ""

msgid ""
"Fix support for :const:`~socket.BTPROTO_HCI` on FreeBSD. (Contributed by "
"Victor Stinner in :gh:`111178`.)"
msgstr ""

msgid ""
"Add support for :const:`~socket.BTPROTO_SCO` on FreeBSD. (Contributed by "
"Serhiy Storchaka in :gh:`85302`.)"
msgstr ""

msgid ""
"Add support for *cid* and *bdaddr_type* in the address for :const:`~socket."
"BTPROTO_L2CAP` on FreeBSD. (Contributed by Serhiy Storchaka in :gh:`132429`.)"
msgstr ""

msgid ""
"Add support for *channel* in the address for :const:`~socket.BTPROTO_HCI` on "
"Linux. (Contributed by Serhiy Storchaka in :gh:`70145`.)"
msgstr ""

msgid ""
"Accept an integer as the address for :const:`~socket.BTPROTO_HCI` on Linux. "
"(Contributed by Serhiy Storchaka in :gh:`132099`.)"
msgstr ""

msgid ""
"Return *cid* in :meth:`~socket.socket.getsockname` for :const:`~socket."
"BTPROTO_L2CAP`. (Contributed by Serhiy Storchaka in :gh:`132429`.)"
msgstr ""

msgid ""
"Add many new constants. (Contributed by Serhiy Storchaka in :gh:`132734`.)"
msgstr ""

msgid "ssl"
msgstr ""

msgid ""
"Indicate through :data:`ssl.HAS_PHA` whether the :mod:`ssl` module supports "
"TLSv1.3 post-handshake client authentication (PHA). (Contributed by Will "
"Childs-Klein in :gh:`128036`.)"
msgstr ""

msgid "struct"
msgstr ""

msgid ""
"Support the :c:expr:`float complex` and :c:expr:`double complex` C types in "
"the :mod:`struct` module (formatting characters ``'F'`` and ``'D'`` "
"respectively). (Contributed by Sergey B Kirpichev in :gh:`121249`.)"
msgstr ""

msgid "symtable"
msgstr ""

msgid "Expose the following :class:`symtable.Symbol` methods:"
msgstr ""

msgid ":meth:`~symtable.Symbol.is_comp_cell`"
msgstr ""

msgid ":meth:`~symtable.Symbol.is_comp_iter`"
msgstr ""

msgid ":meth:`~symtable.Symbol.is_free_class`"
msgstr ""

msgid "(Contributed by Bénédikt Tran in :gh:`120029`.)"
msgstr ""

msgid "sys"
msgstr ""

msgid ""
"The previously undocumented special function :func:`sys.getobjects`, which "
"only exists in specialized builds of Python, may now return objects from "
"other interpreters than the one it's called in."
msgstr ""

msgid ""
"Add :func:`sys._is_immortal` for determining if an object is :term:"
"`immortal`. (Contributed by Peter Bierma in :gh:`128509`.)"
msgstr ""

msgid ""
"On FreeBSD, :data:`sys.platform` doesn't contain the major version anymore. "
"It is always ``'freebsd'``, instead of ``'freebsd13'`` or ``'freebsd14'``."
msgstr ""

msgid ""
"Raise :exc:`DeprecationWarning` for :func:`sys._clear_type_cache`. This "
"function was deprecated in Python 3.13 but it didn't raise a runtime warning."
msgstr ""

msgid "sys.monitoring"
msgstr ""

msgid ""
"Two new events are added: :monitoring-event:`BRANCH_LEFT` and :monitoring-"
"event:`BRANCH_RIGHT`. The ``BRANCH`` event is deprecated."
msgstr ""

msgid "sysconfig"
msgstr ""

msgid ""
"Add ``ABIFLAGS`` key to :func:`sysconfig.get_config_vars` on Windows. "
"(Contributed by Xuehai Pan in :gh:`131799`.)"
msgstr ""

msgid "tarfile"
msgstr ""

msgid ""
":func:`~tarfile.data_filter` now normalizes symbolic link targets in order "
"to avoid path traversal attacks. (Contributed by Petr Viktorin in :gh:"
"`127987` and :cve:`2025-4138`.)"
msgstr ""

msgid ""
":func:`~tarfile.TarFile.extractall` now skips fixing up directory attributes "
"when a directory was removed or replaced by another kind of file. "
"(Contributed by Petr Viktorin in :gh:`127987` and :cve:`2024-12718`.)"
msgstr ""

msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` now "
"(re-)apply the extraction filter when substituting a link (hard or symbolic) "
"with a copy of another archive member, and when fixing up directory "
"attributes. The former raises a new exception, :exc:`~tarfile."
"LinkFallbackError`. (Contributed by Petr Viktorin for :cve:`2025-4330` and :"
"cve:`2024-12718`.)"
msgstr ""

msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` no "
"longer extract rejected members when :func:`~tarfile.TarFile.errorlevel` is "
"zero. (Contributed by Matt Prodani and Petr Viktorin in :gh:`112887` and :"
"cve:`2025-4435`.)"
msgstr ""

msgid "threading"
msgstr ""

msgid ""
":meth:`threading.Thread.start` now sets the operating system thread name to :"
"attr:`threading.Thread.name`. (Contributed by Victor Stinner in :gh:`59705`.)"
msgstr ""

msgid "tkinter"
msgstr ""

msgid ""
"Make :mod:`tkinter` widget methods :meth:`!after` and :meth:`!after_idle` "
"accept arguments passed by keyword. (Contributed by Zhikang Yan in :gh:"
"`126899`.)"
msgstr ""

msgid ""
"Add ability to specify name for :class:`!tkinter.OptionMenu` and :class:`!"
"tkinter.ttk.OptionMenu`. (Contributed by Zhikang Yan in :gh:`130482`.)"
msgstr ""

msgid "turtle"
msgstr ""

msgid ""
"Add context managers for :func:`turtle.fill`, :func:`turtle.poly` and :func:"
"`turtle.no_animation`. (Contributed by Marie Roald and Yngve Mardal Moe in :"
"gh:`126350`.)"
msgstr ""

msgid "types"
msgstr ""

msgid ""
":class:`types.UnionType` is now an alias for :class:`typing.Union`. See :ref:"
"`below <whatsnew314-typing-union>` for more details. (Contributed by Jelle "
"Zijlstra in :gh:`105499`.)"
msgstr ""

msgid "typing"
msgstr ""

msgid ""
":class:`types.UnionType` and :class:`typing.Union` are now aliases for each "
"other, meaning that both old-style unions (created with ``Union[int, str]``) "
"and new-style unions (``int | str``) now create instances of the same "
"runtime type. This unifies the behavior between the two syntaxes, but leads "
"to some differences in behavior that may affect users who introspect types "
"at runtime:"
msgstr ""

msgid ""
"Both syntaxes for creating a union now produce the same string "
"representation in ``repr()``. For example, ``repr(Union[int, str])`` is now "
"``\"int | str\"`` instead of ``\"typing.Union[int, str]\"``."
msgstr ""

msgid ""
"Unions created using the old syntax are no longer cached. Previously, "
"running ``Union[int, str]`` multiple times would return the same object "
"(``Union[int, str] is Union[int, str]`` would be ``True``), but now it will "
"return two different objects. Users should use ``==`` to compare unions for "
"equality, not ``is``. New-style unions have never been cached this way. This "
"change could increase memory usage for some programs that use a large number "
"of unions created by subscripting ``typing.Union``. However, several factors "
"offset this cost: unions used in annotations are no longer evaluated by "
"default in Python 3.14 because of :pep:`649`; an instance of :class:`types."
"UnionType` is itself much smaller than the object returned by ``Union[]`` "
"was on prior Python versions; and removing the cache also saves some space. "
"It is therefore unlikely that this change will cause a significant increase "
"in memory usage for most users."
msgstr ""

msgid ""
"Previously, old-style unions were implemented using the private class "
"``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection "
"helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""

msgid ""
"It is now possible to use :class:`typing.Union` itself in :func:`isinstance` "
"checks. For example, ``isinstance(int | str, typing.Union)`` will return "
"``True``; previously this raised :exc:`TypeError`."
msgstr ""

msgid ""
"The ``__args__`` attribute of :class:`typing.Union` objects is no longer "
"writable."
msgstr ""

msgid ""
"It is no longer possible to set any attributes on :class:`typing.Union` "
"objects. This only ever worked for dunder attributes on previous versions, "
"was never documented to work, and was subtly broken in many cases."
msgstr ""

msgid "(Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""

msgid ":class:`typing.TypeAliasType` now supports star unpacking."
msgstr ""

msgid "unicodedata"
msgstr ""

msgid "The Unicode database has been updated to Unicode 16.0.0."
msgstr ""

msgid "unittest"
msgstr ""

msgid ""
":mod:`unittest` output is now colored by default. This can be controlled by :"
"ref:`environment variables <using-on-controlling-color>`. (Contributed by "
"Hugo van Kemenade in :gh:`127221`.)"
msgstr ""

msgid ""
"unittest discovery supports :term:`namespace package` as start directory "
"again. It was removed in Python 3.11. (Contributed by Jacob Walls in :gh:"
"`80958`.)"
msgstr ""

msgid ""
"A number of new methods were added in the :class:`~unittest.TestCase` class "
"that provide more specialized tests."
msgstr ""

msgid ""
":meth:`~unittest.TestCase.assertHasAttr` and :meth:`~unittest.TestCase."
"assertNotHasAttr` check whether the object has a particular attribute."
msgstr ""

msgid ""
":meth:`~unittest.TestCase.assertIsSubclass` and :meth:`~unittest.TestCase."
"assertNotIsSubclass` check whether the object is a subclass of a particular "
"class, or of one of a tuple of classes."
msgstr ""

msgid ""
":meth:`~unittest.TestCase.assertStartsWith`, :meth:`~unittest.TestCase."
"assertNotStartsWith`, :meth:`~unittest.TestCase.assertEndsWith` and :meth:"
"`~unittest.TestCase.assertNotEndsWith` check whether the Unicode or byte "
"string starts or ends with particular strings."
msgstr ""

msgid "(Contributed by Serhiy Storchaka in :gh:`71339`.)"
msgstr ""

msgid "urllib"
msgstr ""

msgid ""
"Upgrade HTTP digest authentication algorithm for :mod:`urllib.request` by "
"supporting SHA-256 digest authentication as specified in :rfc:`7616`. "
"(Contributed by Calvin Bui in :gh:`128193`.)"
msgstr ""

msgid ""
"Improve ergonomics and standards compliance when parsing and emitting ``file:"
"`` URLs."
msgstr ""

msgid "In :func:`urllib.request.url2pathname`:"
msgstr ""

msgid ""
"Accept a complete URL when the new *require_scheme* argument is set to true."
msgstr ""

msgid "Discard URL authority if it matches the local hostname."
msgstr ""

msgid ""
"Discard URL authority if it resolves to a local IP address when the new "
"*resolve_host* argument is set to true."
msgstr ""

msgid "Discard URL query and fragment components."
msgstr ""

msgid ""
"Raise :exc:`~urllib.error.URLError` if a URL authority isn't local, except "
"on Windows where we return a UNC path as before."
msgstr ""

msgid "In :func:`urllib.request.pathname2url`:"
msgstr ""

msgid ""
"Return a complete URL when the new *add_scheme* argument is set to true."
msgstr ""

msgid ""
"Include an empty URL authority when a path begins with a slash. For example, "
"the path ``/etc/hosts`` is converted to the URL ``///etc/hosts``."
msgstr ""

msgid ""
"On Windows, drive letters are no longer converted to uppercase, and ``:`` "
"characters not following a drive letter no longer cause an :exc:`OSError` "
"exception to be raised."
msgstr ""

msgid "(Contributed by Barney Gale in :gh:`125866`.)"
msgstr ""

msgid "uuid"
msgstr ""

msgid ""
"Add support for UUID versions 6, 7, and 8 via :func:`uuid.uuid6`, :func:"
"`uuid.uuid7`, and :func:`uuid.uuid8` respectively, as specified in :rfc:"
"`9562`. (Contributed by Bénédikt Tran in :gh:`89083`.)"
msgstr ""

msgid ""
":const:`uuid.NIL` and :const:`uuid.MAX` are now available to represent the "
"Nil and Max UUID formats as defined by :rfc:`9562`. (Contributed by Nick "
"Pope in :gh:`128427`.)"
msgstr ""

msgid ""
"Allow to generate multiple UUIDs at once via :option:`python -m uuid --count "
"<uuid --count>`. (Contributed by Simon Legner in :gh:`131236`.)"
msgstr ""

msgid "webbrowser"
msgstr ""

msgid ""
"Names in the :envvar:`BROWSER` environment variable can now refer to already "
"registered browsers for the :mod:`webbrowser` module, instead of always "
"generating a new browser command."
msgstr ""

msgid ""
"This makes it possible to set :envvar:`BROWSER` to the value of one of the "
"supported browsers on macOS."
msgstr ""

msgid "zipfile"
msgstr ""

msgid ""
"Added :func:`ZipInfo._for_archive <zipfile.ZipInfo._for_archive>` to resolve "
"suitable defaults for a :class:`~zipfile.ZipInfo` object as used by :func:"
"`ZipFile.writestr <zipfile.ZipFile.writestr>`. (Contributed by Bénédikt Tran "
"in :gh:`123424`.)"
msgstr ""

msgid ""
":meth:`zipfile.ZipFile.writestr` now respects ``SOURCE_DATE_EPOCH`` that "
"distributions can set centrally and have build tools consume this in order "
"to produce reproducible output. (Contributed by Jiahao Li in :gh:`91279`.)"
msgstr ""

msgid "Optimizations"
msgstr ""

msgid ""
"The import time for several standard library modules has been improved, "
"including :mod:`annotationlib`, :mod:`ast`, :mod:`asyncio`, :mod:`base64`, :"
"mod:`cmd`, :mod:`csv`, :mod:`gettext`, :mod:`importlib.util`, :mod:"
"`locale`, :mod:`mimetypes`, :mod:`optparse`, :mod:`pickle`, :mod:`pprint`, :"
"mod:`pstats`, :mod:`shlex`, :mod:`socket`, :mod:`string`, :mod:"
"`subprocess`, :mod:`threading`, :mod:`tomllib`, :mod:`types`, and :mod:"
"`zipfile`."
msgstr ""

msgid ""
"(Contributed by Adam Turner, Bénédikt Tran, Chris Markiewicz, Eli Schwartz, "
"Hugo van Kemenade, Jelle Zijlstra, and others in :gh:`118761`.)"
msgstr ""

msgid ""
"Standard benchmark results have improved by 10-20%, following the "
"implementation of a new per-thread double linked list for :class:`native "
"tasks <asyncio.Task>`, also reducing memory usage. This enables external "
"introspection tools such as :ref:`python -m asyncio pstree <whatsnew314-"
"asyncio-introspection>` to introspect the call graph of asyncio tasks "
"running in all threads. (Contributed by Kumar Aditya in :gh:`107803`.)"
msgstr ""

msgid ""
"The module now has first class support for :term:`free-threading builds "
"<free threading>`. This enables parallel execution of multiple event loops "
"across different threads, scaling linearly with the number of threads. "
"(Contributed by Kumar Aditya in :gh:`128002`.)"
msgstr ""

msgid "base64"
msgstr ""

msgid ""
":func:`~base64.b16decode` is now up to six times faster. (Contributed by "
"Bénédikt Tran, Chris Markiewicz, and Adam Turner in :gh:`118761`.)"
msgstr ""

msgid "bdb"
msgstr ""

msgid ""
"The basic debugger now has a :mod:`sys.monitoring`-based backend, which can "
"be selected via the passing ``'monitoring'`` to the :class:`~bdb.Bdb` "
"class's new *backend* parameter. (Contributed by Tian Gao in :gh:`124533`.)"
msgstr ""

msgid ""
"The :func:`~difflib.IS_LINE_JUNK` function is now up to twice as fast. "
"(Contributed by Adam Turner and Semyon Moroz in :gh:`130167`.)"
msgstr ""

msgid "gc"
msgstr ""

msgid ""
"The new :ref:`incremental garbage collector <whatsnew314-incremental-gc>` "
"means that maximum pause times are reduced by an order of magnitude or more "
"for larger heaps."
msgstr ""

msgid ""
"Because of this optimization, the meaning of the results of :meth:`~gc."
"get_threshold` and :meth:`~gc.set_threshold` have changed, along with :meth:"
"`~gc.get_count` and :meth:`~gc.get_stats`."
msgstr ""

msgid ""
"For backwards compatibility, :meth:`~gc.get_threshold` continues to return a "
"three-item tuple. The first value is the threshold for young collections, as "
"before; the second value determines the rate at which the old collection is "
"scanned (the default is 10, and higher values mean that the old collection "
"is scanned more slowly). The third value is now meaningless and is always "
"zero."
msgstr ""

msgid ":meth:`~gc.set_threshold` now ignores any items after the second."
msgstr ""

msgid ""
":meth:`~gc.get_count` and :meth:`~gc.get_stats` continue to return the same "
"format of results. The only difference is that instead of the results "
"referring to the young, aging and old generations, the results refer to the "
"young generation and the aging and collecting spaces of the old generation."
msgstr ""

msgid ""
"In summary, code that attempted to manipulate the behavior of the cycle GC "
"may not work exactly as intended, but it is very unlikely to be harmful. All "
"other code will work just fine."
msgstr ""

msgid ""
"Opening and reading files now executes fewer system calls. Reading a small "
"operating system cached file in full is up to 15% faster. (Contributed by "
"Cody Maloney and Victor Stinner in :gh:`120754` and :gh:`90102`.)"
msgstr ""

msgid ""
":func:`Path.read_bytes <pathlib.Path.read_bytes>` now uses unbuffered mode "
"to open files, which is between 9% and 17% faster to read in full. "
"(Contributed by Cody Maloney in :gh:`120754`.)"
msgstr ""

msgid ""
":mod:`pdb` now supports two backends, based on either :func:`sys.settrace` "
"or :mod:`sys.monitoring`. Using the :ref:`pdb CLI <pdb-cli>` or :func:"
"`breakpoint` will always use the :mod:`sys.monitoring` backend. Explicitly "
"instantiating :class:`pdb.Pdb` and its derived classes will use the :func:"
"`sys.settrace` backend by default, which is configurable. (Contributed by "
"Tian Gao in :gh:`124533`.)"
msgstr ""

msgid ""
":func:`~uuid.uuid3` and :func:`~uuid.uuid5` are now both roughly 40% faster "
"for 16-byte names and 20% faster for 1024-byte names. Performance for longer "
"names remains unchanged. (Contributed by Bénédikt Tran in :gh:`128150`.)"
msgstr ""

msgid ""
":func:`~uuid.uuid4` is now c. 30% faster. (Contributed by Bénédikt Tran in :"
"gh:`128150`.)"
msgstr ""

msgid "zlib"
msgstr ""

msgid ""
"On Windows, `zlib-ng <https://github.com/zlib-ng/zlib-ng>`__ is now used as "
"the implementation of the :mod:`zlib` module in the default binaries. There "
"are no known incompatibilities between ``zlib-ng`` and the previously-used "
"``zlib`` implementation. This should result in better performance at all "
"compression levels."
msgstr ""

msgid ""
"It is worth noting that ``zlib.Z_BEST_SPEED`` (``1``) may result in "
"significantly less compression than the previous implementation, whilst also "
"significantly reducing the time taken to compress."
msgstr ""

msgid "(Contributed by Steve Dower in :gh:`91349`.)"
msgstr ""

msgid "Removed"
msgstr ""

msgid ""
"Remove the *type*, *choices*, and *metavar* parameters of :class:`!"
"BooleanOptionalAction`. These have been deprecated since Python 3.12. "
"(Contributed by Nikita Sobolev in :gh:`118805`.)"
msgstr ""

msgid ""
"Calling :meth:`~argparse.ArgumentParser.add_argument_group` on an argument "
"group now raises a :exc:`ValueError`. Similarly, :meth:`~argparse."
"ArgumentParser.add_argument_group` or :meth:`~argparse.ArgumentParser."
"add_mutually_exclusive_group` on a mutually exclusive group now both raise :"
"exc:`ValueError`\\ s. This 'nesting' was never supported, often failed to "
"work correctly, and was unintentionally exposed through inheritance. This "
"functionality has been deprecated since Python 3.11. (Contributed by "
"Savannah Ostrowski in :gh:`127186`.)"
msgstr ""

msgid ""
"Remove the following classes, which have been deprecated aliases of :class:"
"`~ast.Constant` since Python 3.8 and have emitted deprecation warnings since "
"Python 3.12:"
msgstr ""

msgid ":class:`!Bytes`"
msgstr ""

msgid ":class:`!Ellipsis`"
msgstr ""

msgid ":class:`!NameConstant`"
msgstr ""

msgid ":class:`!Num`"
msgstr ""

msgid ":class:`!Str`"
msgstr ""

msgid ""
"As a consequence of these removals, user-defined ``visit_Num``, "
"``visit_Str``, ``visit_Bytes``, ``visit_NameConstant`` and "
"``visit_Ellipsis`` methods on custom :class:`~ast.NodeVisitor` subclasses "
"will no longer be called when the :class:`!NodeVisitor` subclass is visiting "
"an AST. Define a ``visit_Constant`` method instead."
msgstr ""

msgid "(Contributed by Alex Waygood in :gh:`119562`.)"
msgstr ""

msgid ""
"Remove the following deprecated properties on :class:`ast.Constant`, which "
"were present for compatibility with the now-removed AST classes:"
msgstr ""

msgid ":attr:`!Constant.n`"
msgstr ""

msgid ":attr:`!Constant.s`"
msgstr ""

msgid ""
"Use :attr:`!Constant.value` instead. (Contributed by Alex Waygood in :gh:"
"`119562`.)"
msgstr ""

msgid ""
"Remove the following classes, methods, and functions, which have been "
"deprecated since Python 3.12:"
msgstr ""

msgid ":class:`!AbstractChildWatcher`"
msgstr ""

msgid ":class:`!FastChildWatcher`"
msgstr ""

msgid ":class:`!MultiLoopChildWatcher`"
msgstr ""

msgid ":class:`!PidfdChildWatcher`"
msgstr ""

msgid ":class:`!SafeChildWatcher`"
msgstr ""

msgid ":class:`!ThreadedChildWatcher`"
msgstr ""

msgid ":meth:`!AbstractEventLoopPolicy.get_child_watcher`"
msgstr ""

msgid ":meth:`!AbstractEventLoopPolicy.set_child_watcher`"
msgstr ""

msgid ":func:`!get_child_watcher`"
msgstr ""

msgid ":func:`!set_child_watcher`"
msgstr ""

msgid "(Contributed by Kumar Aditya in :gh:`120804`.)"
msgstr ""

msgid ""
":func:`asyncio.get_event_loop` now raises a :exc:`RuntimeError` if there is "
"no current event loop, and no longer implicitly creates an event loop."
msgstr ""

msgid "(Contributed by Kumar Aditya in :gh:`126353`.)"
msgstr ""

msgid ""
"There's a few patterns that use :func:`asyncio.get_event_loop`, most of them "
"can be replaced with :func:`asyncio.run`."
msgstr ""

msgid "If you're running an async function, simply use :func:`asyncio.run`."
msgstr ""

msgid "Before:"
msgstr ""

msgid ""
"async def main():\n"
"    ...\n"
"\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(main())\n"
"finally:\n"
"    loop.close()"
msgstr ""

msgid "After:"
msgstr ""

msgid ""
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main())"
msgstr ""

msgid ""
"If you need to start something, for example, a server listening on a socket "
"and then run forever, use :func:`asyncio.run` and an :class:`asyncio.Event`."
msgstr ""

msgid ""
"def start_server(loop): ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    start_server(loop)\n"
"    loop.run_forever()\n"
"finally:\n"
"    loop.close()"
msgstr ""

msgid ""
"def start_server(loop): ...\n"
"\n"
"async def main():\n"
"    start_server(asyncio.get_running_loop())\n"
"    await asyncio.Event().wait()\n"
"\n"
"asyncio.run(main())"
msgstr ""

msgid ""
"If you need to run something in an event loop, then run some blocking code "
"around it, use :class:`asyncio.Runner`."
msgstr ""

msgid ""
"async def operation_one(): ...\n"
"def blocking_code(): ...\n"
"async def operation_two(): ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(operation_one())\n"
"    blocking_code()\n"
"    loop.run_until_complete(operation_two())\n"
"finally:\n"
"    loop.close()"
msgstr ""

msgid ""
"async def operation_one(): ...\n"
"def blocking_code(): ...\n"
"async def operation_two(): ...\n"
"\n"
"with asyncio.Runner() as runner:\n"
"    runner.run(operation_one())\n"
"    blocking_code()\n"
"    runner.run(operation_two())"
msgstr ""

msgid "collections.abc"
msgstr ""

msgid ""
"Remove :class:`!ByteString`, which has been deprecated since Python 3.12. "
"(Contributed by Nikita Sobolev in :gh:`118803`.)"
msgstr ""

msgid "email"
msgstr ""

msgid ""
"Remove :func:`email.utils.localtime`'s *isdst* parameter, which was "
"deprecated in and has been ignored since Python 3.12. (Contributed by Hugo "
"van Kemenade in :gh:`118798`.)"
msgstr ""

msgid "importlib.abc"
msgstr ""

msgid "Remove deprecated :mod:`importlib.abc` classes:"
msgstr ""

msgid ""
":class:`!ResourceReader` (use :class:`~importlib.resources.abc."
"TraversableResources`)"
msgstr ""

msgid ""
":class:`!Traversable` (use :class:`~importlib.resources.abc.Traversable`)"
msgstr ""

msgid ""
":class:`!TraversableResources` (use :class:`~importlib.resources.abc."
"TraversableResources`)"
msgstr ""

msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr ""

msgid "itertools"
msgstr ""

msgid ""
"Remove support for copy, deepcopy, and pickle operations from :mod:"
"`itertools` iterators. These have emitted a :exc:`DeprecationWarning` since "
"Python 3.12. (Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""

msgid ""
"Remove support for passing additional keyword arguments to :class:`~pathlib."
"Path`. In previous versions, any such arguments are ignored. (Contributed by "
"Barney Gale in :gh:`74033`.)"
msgstr ""

msgid ""
"Remove support for passing additional positional arguments to :meth:`."
"PurePath.relative_to` and :meth:`~pathlib.PurePath.is_relative_to`. In "
"previous versions, any such arguments are joined onto *other*. (Contributed "
"by Barney Gale in :gh:`78707`.)"
msgstr ""

msgid "pkgutil"
msgstr ""

msgid ""
"Remove the :func:`!get_loader` and :func:`!find_loader` functions, which "
"have been deprecated since Python 3.12. (Contributed by Bénédikt Tran in :gh:"
"`97850`.)"
msgstr ""

msgid "pty"
msgstr ""

msgid ""
"Remove the :func:`!master_open` and :func:`!slave_open` functions, which "
"have been deprecated since Python 3.12. Use :func:`pty.openpty` instead. "
"(Contributed by Nikita Sobolev in :gh:`118824`.)"
msgstr ""

msgid "sqlite3"
msgstr ""

msgid ""
"Remove :data:`!version` and :data:`!version_info` from the :mod:`sqlite3` "
"module; use :data:`~sqlite3.sqlite_version` and :data:`~sqlite3."
"sqlite_version_info` for the actual version number of the runtime SQLite "
"library. (Contributed by Hugo van Kemenade in :gh:`118924`.)"
msgstr ""

msgid ""
"Using a sequence of parameters with named placeholders now raises a :exc:"
"`~sqlite3.ProgrammingError`, having been deprecated since Python 3.12. "
"(Contributed by Erlend E. Aasland in :gh:`118928` and :gh:`101693`.)"
msgstr ""

msgid ""
"Remove the :class:`!Quoter` class from :mod:`urllib.parse`, which has been "
"deprecated since Python 3.11. (Contributed by Nikita Sobolev in :gh:"
"`118827`.)"
msgstr ""

msgid ""
"Remove the :class:`!URLopener` and :class:`!FancyURLopener` classes from :"
"mod:`urllib.request`, which have been deprecated since Python 3.3."
msgstr ""

msgid ""
"``myopener.open()`` can be replaced with :func:`~urllib.request.urlopen`. "
"``myopener.retrieve()`` can be replaced with :func:`~urllib.request."
"urlretrieve`. Customisations to the opener classes can be replaced by "
"passing customized handlers to :func:`~urllib.request.build_opener`. "
"(Contributed by Barney Gale in :gh:`84850`.)"
msgstr ""

msgid "Deprecated"
msgstr ""

msgid ":mod:`argparse`:"
msgstr ""

msgid ""
"Passing the undocumented keyword argument *prefix_chars* to :meth:`~argparse."
"ArgumentParser.add_argument_group` is now deprecated. (Contributed by "
"Savannah Ostrowski in :gh:`125563`.)"
msgstr ""

msgid ""
"Deprecated the :class:`argparse.FileType` type converter. Anything with "
"resource management should be done downstream after the arguments are "
"parsed. (Contributed by Serhiy Storchaka in :gh:`58032`.)"
msgstr ""

msgid ":mod:`asyncio`:"
msgstr ""

msgid ""
":func:`!asyncio.iscoroutinefunction` is deprecated and will be removed in "
"Python 3.16; use :func:`inspect.iscoroutinefunction` instead. (Contributed "
"by Jiahao Li and Kumar Aditya in :gh:`122875`.)"
msgstr ""

msgid ""
":mod:`asyncio` policy system is deprecated and will be removed in Python "
"3.16. In particular, the following classes and functions are deprecated:"
msgstr ""

msgid ":class:`asyncio.AbstractEventLoopPolicy`"
msgstr ""

msgid ":class:`asyncio.DefaultEventLoopPolicy`"
msgstr ""

msgid ":class:`asyncio.WindowsSelectorEventLoopPolicy`"
msgstr ""

msgid ":class:`asyncio.WindowsProactorEventLoopPolicy`"
msgstr ""

msgid ":func:`asyncio.get_event_loop_policy`"
msgstr ""

msgid ":func:`asyncio.set_event_loop_policy`"
msgstr ""

msgid ""
"Users should use :func:`asyncio.run` or :class:`asyncio.Runner` with "
"*loop_factory* to use the desired event loop implementation."
msgstr ""

msgid "For example, to use :class:`asyncio.SelectorEventLoop` on Windows::"
msgstr ""

msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"
msgstr ""

msgid "(Contributed by Kumar Aditya in :gh:`127949`.)"
msgstr ""

msgid ""
":mod:`builtins`: Passing a complex number as the *real* or *imag* argument "
"in the :func:`complex` constructor is now deprecated; it should only be "
"passed as a single positional argument. (Contributed by Serhiy Storchaka in :"
"gh:`109218`.)"
msgstr ""

msgid ""
":mod:`codecs`: :func:`codecs.open` is now deprecated. Use :func:`open` "
"instead. (Contributed by Inada Naoki in :gh:`133036`.)"
msgstr ""

msgid ":mod:`ctypes`:"
msgstr ""

msgid ""
"On non-Windows platforms, setting :attr:`.Structure._pack_` to use a MSVC-"
"compatible default memory layout is deprecated in favor of setting :attr:`."
"Structure._layout_` to ``'ms'``. (Contributed by Petr Viktorin in :gh:"
"`131747`.)"
msgstr ""

msgid ""
"Calling :func:`ctypes.POINTER` on a string is deprecated. Use :ref:`ctypes-"
"incomplete-types` for self-referential structures. Also, the internal "
"``ctypes._pointer_type_cache`` is deprecated. See :func:`ctypes.POINTER` for "
"updated implementation details. (Contributed by Sergey Myrianov in :gh:"
"`100926`.)"
msgstr ""

msgid ""
":mod:`functools`: Calling the Python implementation of :func:`functools."
"reduce` with *function* or *sequence* as keyword arguments is now "
"deprecated. (Contributed by Kirill Podoprigora in :gh:`121676`.)"
msgstr ""

msgid ""
":mod:`logging`: Support for custom logging handlers with the *strm* argument "
"is deprecated and scheduled for removal in Python 3.16. Define handlers with "
"the *stream* argument instead. (Contributed by Mariusz Felisiak in :gh:"
"`115032`.)"
msgstr ""

msgid ""
":mod:`mimetypes`: Valid extensions start with a '.' or are empty for :meth:"
"`mimetypes.MimeTypes.add_type`. Undotted extensions are deprecated and will "
"raise a :exc:`ValueError` in Python 3.16. (Contributed by Hugo van Kemenade "
"in :gh:`75223`.)"
msgstr ""

msgid ""
":mod:`!nturl2path`: This module is now deprecated. Call :func:`urllib."
"request.url2pathname` and :func:`~urllib.request.pathname2url` instead. "
"(Contributed by Barney Gale in :gh:`125866`.)"
msgstr ""

msgid ""
":mod:`os`: :term:`Soft deprecate <soft deprecated>` :func:`os.popen` and :"
"func:`os.spawn* <os.spawnl>` functions. They should no longer be used to "
"write new code.  The :mod:`subprocess` module is recommended instead. "
"(Contributed by Victor Stinner in :gh:`120743`.)"
msgstr ""

msgid ""
":mod:`pathlib`: :meth:`!pathlib.PurePath.as_uri` is deprecated and will be "
"removed in Python 3.19. Use :meth:`pathlib.Path.as_uri` instead. "
"(Contributed by Barney Gale in :gh:`123599`.)"
msgstr ""

msgid ""
":mod:`pdb`: The undocumented ``pdb.Pdb.curframe_locals`` attribute is now a "
"deprecated read-only property. The low overhead dynamic frame locals access "
"added in Python 3.13 by PEP 667 means the frame locals cache reference "
"previously stored in this attribute is no longer needed. Derived debuggers "
"should access ``pdb.Pdb.curframe.f_locals`` directly in Python 3.13 and "
"later versions. (Contributed by Tian Gao in :gh:`124369` and :gh:`125951`.)"
msgstr ""

msgid ""
":mod:`symtable`: Deprecate :meth:`symtable.Class.get_methods` due to the "
"lack of interest. (Contributed by Bénédikt Tran in :gh:`119698`.)"
msgstr ""

msgid ""
":mod:`tkinter`: The :class:`!tkinter.Variable` methods :meth:`!"
"trace_variable`, :meth:`!trace_vdelete` and :meth:`!trace_vinfo` are now "
"deprecated. Use :meth:`!trace_add`, :meth:`!trace_remove` and :meth:`!"
"trace_info` instead. (Contributed by Serhiy Storchaka in :gh:`120220`.)"
msgstr ""

msgid ""
":mod:`urllib.parse`: Accepting objects with false values (like ``0`` and "
"``[]``) except empty strings, byte-like objects and ``None`` in :mod:`urllib."
"parse` functions :func:`~urllib.parse.parse_qsl` and :func:`~urllib.parse."
"parse_qs` is now deprecated. (Contributed by Serhiy Storchaka in :gh:"
"`116897`.)"
msgstr ""

msgid "Pending removal in Python 3.15"
msgstr ""

msgid "The import system:"
msgstr ""

msgid ""
"Setting :attr:`~module.__cached__` on a module while failing to set :attr:"
"`__spec__.cached <importlib.machinery.ModuleSpec.cached>` is deprecated. In "
"Python 3.15, :attr:`!__cached__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""

msgid ""
"Setting :attr:`~module.__package__` on a module while failing to set :attr:"
"`__spec__.parent <importlib.machinery.ModuleSpec.parent>` is deprecated. In "
"Python 3.15, :attr:`!__package__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""

msgid ""
"The undocumented :func:`!ctypes.SetPointerType` function has been deprecated "
"since Python 3.13."
msgstr ""

msgid ":mod:`http.server`:"
msgstr ""

msgid ""
"The obsolete and rarely used :class:`~http.server.CGIHTTPRequestHandler` has "
"been deprecated since Python 3.13. No direct replacement exists. *Anything* "
"is better than CGI to interface a web server with a request handler."
msgstr ""

msgid ""
"The :option:`!--cgi` flag to the :program:`python -m http.server` command-"
"line interface has been deprecated since Python 3.13."
msgstr ""

msgid ":mod:`importlib`:"
msgstr ""

msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr ""

msgid ":class:`locale`:"
msgstr ""

msgid ""
"The :func:`~locale.getdefaultlocale` function has been deprecated since "
"Python 3.11. Its removal was originally planned for Python 3.13 (:gh:"
"`90817`), but has been postponed to Python 3.15. Use :func:`~locale."
"getlocale`, :func:`~locale.setlocale`, and :func:`~locale.getencoding` "
"instead. (Contributed by Hugo van Kemenade in :gh:`111187`.)"
msgstr ""

msgid ":mod:`pathlib`:"
msgstr ""

msgid ""
":meth:`.PurePath.is_reserved` has been deprecated since Python 3.13. Use :"
"func:`os.path.isreserved` to detect reserved paths on Windows."
msgstr ""

msgid ":mod:`platform`:"
msgstr ""

msgid ""
":func:`~platform.java_ver` has been deprecated since Python 3.13. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested."
msgstr ""

msgid ":mod:`sysconfig`:"
msgstr ""

msgid ""
"The *check_home* argument of :func:`sysconfig.is_python_build` has been "
"deprecated since Python 3.12."
msgstr ""

msgid ":mod:`threading`:"
msgstr ""

msgid ""
":func:`~threading.RLock` will take no arguments in Python 3.15. Passing any "
"arguments has been deprecated since Python 3.14, as the  Python version does "
"not permit any arguments, but the C version allows any number of positional "
"or keyword arguments, ignoring every argument."
msgstr ""

msgid ":mod:`types`:"
msgstr ""

msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.15. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""

msgid ":mod:`typing`:"
msgstr ""

msgid ""
"The undocumented keyword argument syntax for creating :class:`~typing."
"NamedTuple` classes (for example, ``Point = NamedTuple(\"Point\", x=int, "
"y=int)``) has been deprecated since Python 3.13. Use the class-based syntax "
"or the functional syntax instead."
msgstr ""

msgid ""
"When using the functional syntax of :class:`~typing.TypedDict`\\s, failing "
"to pass a value to the *fields* parameter (``TD = TypedDict(\"TD\")``) or "
"passing ``None`` (``TD = TypedDict(\"TD\", None)``) has been deprecated "
"since Python 3.13. Use ``class TD(TypedDict): pass`` or ``TD = "
"TypedDict(\"TD\", {})`` to create a TypedDict with zero field."
msgstr ""

msgid ""
"The :func:`typing.no_type_check_decorator` decorator function has been "
"deprecated since Python 3.13. After eight years in the :mod:`typing` module, "
"it has yet to be supported by any major type checker."
msgstr ""

msgid ":mod:`wave`:"
msgstr ""

msgid ""
"The :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and :meth:`~wave."
"Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` and :class:"
"`~wave.Wave_write` classes have been deprecated since Python 3.13."
msgstr ""

msgid ":mod:`zipimport`:"
msgstr ""

msgid ""
":meth:`~zipimport.zipimporter.load_module` has been deprecated since Python "
"3.10. Use :meth:`~zipimport.zipimporter.exec_module` instead. (Contributed "
"by Jiahao Li in :gh:`125746`.)"
msgstr ""

msgid "Pending removal in Python 3.16"
msgstr ""

msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set :attr:"
"`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is deprecated. In "
"Python 3.16, :attr:`!__loader__` will cease to be set or taken into "
"consideration by the import system or the standard library."
msgstr ""

msgid ":mod:`array`:"
msgstr ""

msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""

msgid ":mod:`builtins`:"
msgstr ""

msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""

msgid ":mod:`functools`:"
msgstr ""

msgid ""
"Calling the Python implementation of :func:`functools.reduce` with "
"*function* or *sequence* as keyword arguments has been deprecated since "
"Python 3.14."
msgstr ""

msgid ":mod:`logging`:"
msgstr ""

msgid ""
"Support for custom logging handlers with the *strm* argument is deprecated "
"and scheduled for removal in Python 3.16. Define handlers with the *stream* "
"argument instead. (Contributed by Mariusz Felisiak in :gh:`115032`.)"
msgstr ""

msgid ":mod:`mimetypes`:"
msgstr ""

msgid ""
"Valid extensions start with a '.' or are empty for :meth:`mimetypes."
"MimeTypes.add_type`. Undotted extensions are deprecated and will raise a :"
"exc:`ValueError` in Python 3.16. (Contributed by Hugo van Kemenade in :gh:"
"`75223`.)"
msgstr ""

msgid ":mod:`shutil`:"
msgstr ""

msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is "
"now an alias of :exc:`RuntimeError`."
msgstr ""

msgid ":mod:`symtable`:"
msgstr ""

msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""

msgid ":mod:`sys`:"
msgstr ""

msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated "
"since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""

msgid ""
"The :func:`!sysconfig.expand_makefile_vars` function has been deprecated "
"since Python 3.14. Use the ``vars`` argument of :func:`sysconfig.get_paths` "
"instead."
msgstr ""

msgid ":mod:`tarfile`:"
msgstr ""

msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr ""

msgid "Pending removal in Python 3.17"
msgstr ""

msgid ""
"Before Python 3.14, old-style unions were implemented using the private "
"class ``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection "
"helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""

msgid "Pending removal in Python 3.19"
msgstr ""

msgid ""
"Implicitly switching to the MSVC-compatible struct layout by setting :attr:"
"`~ctypes.Structure._pack_` but not :attr:`~ctypes.Structure._layout_` on non-"
"Windows platforms."
msgstr ""

msgid "Pending removal in future versions"
msgstr ""

msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr ""

msgid ""
"Nesting argument groups and nesting mutually exclusive groups are deprecated."
msgstr ""

msgid ""
"Passing the undocumented keyword argument *prefix_chars* to :meth:`~argparse."
"ArgumentParser.add_argument_group` is now deprecated."
msgstr ""

msgid "The :class:`argparse.FileType` type converter is deprecated."
msgstr ""

msgid "``bool(NotImplemented)``."
msgstr ""

msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature "
"is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""

msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`.  In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""

msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type: "
"these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""

msgid ""
"Support for ``__float__()`` method returning a strict subclass of :class:"
"`float`: these methods will be required to return an instance of :class:"
"`float`."
msgstr ""

msgid ""
"Support for ``__complex__()`` method returning a strict subclass of :class:"
"`complex`: these methods will be required to return an instance of :class:"
"`complex`."
msgstr ""

msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr ""

msgid ""
"Passing a complex number as the *real* or *imag* argument in the :func:"
"`complex` constructor is now deprecated; it should only be passed as a "
"single positional argument. (Contributed by Serhiy Storchaka in :gh:"
"`109218`.)"
msgstr ""

msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and :data:`calendar."
"FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""

msgid ""
":mod:`codecs`: use :func:`open` instead of :func:`codecs.open`. (:gh:"
"`133038`)"
msgstr ""

msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ""

msgid ":mod:`datetime`:"
msgstr ""

msgid ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."
msgstr ""

msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""

msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ""

msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""

msgid ":mod:`importlib.metadata`:"
msgstr ""

msgid "``EntryPoints`` tuple interface."
msgstr ""

msgid "Implicit ``None`` on return values."
msgstr ""

msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""

msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ""

msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ""

msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is "
"deprecated, use an exception instance."
msgstr ""

msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""

msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ""

msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."
msgstr ""

msgid ":mod:`ssl` options and protocols:"
msgstr ""

msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ""

msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""

msgid "``ssl.OP_NO_SSL*`` options"
msgstr ""

msgid "``ssl.OP_NO_TLS*`` options"
msgstr ""

msgid "``ssl.PROTOCOL_SSLv3``"
msgstr ""

msgid "``ssl.PROTOCOL_TLS``"
msgstr ""

msgid "``ssl.PROTOCOL_TLSv1``"
msgstr ""

msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr ""

msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr ""

msgid "``ssl.TLSVersion.SSLv3``"
msgstr ""

msgid "``ssl.TLSVersion.TLSv1``"
msgstr ""

msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr ""

msgid ":mod:`threading` methods:"
msgstr ""

msgid ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."
msgstr ""

msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ""

msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."
msgstr ""

msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."
msgstr ""

msgid ":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""

msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ""

msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ""

msgid ""
"The internal class ``typing._UnionGenericAlias`` is no longer used to "
"implement :class:`typing.Union`. To preserve compatibility with users using "
"this private class, a compatibility shim will be provided until at least "
"Python 3.17. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""

msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""

msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ""

msgid "``splitattr()``"
msgstr ""

msgid "``splithost()``"
msgstr ""

msgid "``splitnport()``"
msgstr ""

msgid "``splitpasswd()``"
msgstr ""

msgid "``splitport()``"
msgstr ""

msgid "``splitquery()``"
msgstr ""

msgid "``splittag()``"
msgstr ""

msgid "``splittype()``"
msgstr ""

msgid "``splituser()``"
msgstr ""

msgid "``splitvalue()``"
msgstr ""

msgid "``to_bytes()``"
msgstr ""

msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ""

msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`~xml."
"etree.ElementTree.Element` is deprecated. In a future release it will always "
"return ``True``. Prefer explicit ``len(elem)`` or ``elem is not None`` tests "
"instead."
msgstr ""

msgid ""
":func:`sys._clear_type_cache` is deprecated: use :func:`sys."
"_clear_internal_caches` instead."
msgstr ""

msgid "CPython bytecode changes"
msgstr ""

msgid ""
"Replaced the opcode ``BINARY_SUBSCR`` by :opcode:`BINARY_OP` with oparg "
"``NB_SUBSCR``. (Contributed by Irit Katriel in :gh:`100239`.)"
msgstr ""

msgid "Porting to Python 3.14"
msgstr ""

msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""

msgid "Changes in the Python API"
msgstr ""

msgid ""
":class:`functools.partial` is now a method descriptor. Wrap it in :func:"
"`staticmethod` if you want to preserve the old behavior. (Contributed by "
"Serhiy Storchaka and Dominykas Grigonis in :gh:`121027`.)"
msgstr ""

msgid ""
"The :ref:`garbage collector is now incremental <whatsnew314-incremental-"
"gc>`, which means that the behavior of :func:`gc.collect` changes slightly:"
msgstr ""

msgid ""
"The :func:`locale.nl_langinfo` function now temporarily sets the "
"``LC_CTYPE`` locale in some cases. This temporary change affects other "
"threads. (Contributed by Serhiy Storchaka in :gh:`69998`.)"
msgstr ""

msgid ""
":class:`types.UnionType` is now an alias for :class:`typing.Union`, causing "
"changes in some behaviors. See :ref:`above <whatsnew314-typing-union>` for "
"more details. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""

msgid ""
"The runtime behavior of annotations has changed in various ways; see :ref:"
"`above <whatsnew314-pep649>` for details. While most code that interacts "
"with annotations should continue to work, some undocumented details may "
"behave differently."
msgstr ""

msgid "Build changes"
msgstr ""

msgid ""
"GNU Autoconf 2.72 is now required to generate :file:`configure`. "
"(Contributed by Erlend Aasland in :gh:`115765`.)"
msgstr ""

msgid ""
"``#pragma``-based linking with ``python3*.lib`` can now be switched off "
"with :c:expr:`Py_NO_LINK_LIB`. (Contributed by Jean-Christophe Fillion-Robin "
"in :gh:`82909`.)"
msgstr ""

msgid "PEP 761: Discontinuation of PGP signatures"
msgstr ""

msgid ""
"PGP signatures will not be available for CPython 3.14 and onwards. Users "
"verifying artifacts must use `Sigstore verification materials`_ for "
"verifying CPython artifacts. This change in release process is specified in :"
"pep:`761`."
msgstr ""

msgid "C API changes"
msgstr ""

msgid ""
"Add :c:func:`PyLong_GetSign` function to get the sign of :class:`int` "
"objects. (Contributed by Sergey B Kirpichev in :gh:`116560`.)"
msgstr ""

msgid ""
"Add a new :c:type:`PyUnicodeWriter` API to create a Python :class:`str` "
"object:"
msgstr ""

msgid ":c:func:`PyUnicodeWriter_Create`"
msgstr ""

msgid ":c:func:`PyUnicodeWriter_DecodeUTF8Stateful`"
msgstr ""

msgid ":c:func:`PyUnicodeWriter_Discard`"
msgstr ""

msgid ":c:func:`PyUnicodeWriter_Finish`"
msgstr ""

msgid ":c:func:`PyUnicodeWriter_Format`"
msgstr ""

msgid ":c:func:`PyUnicodeWriter_WriteASCII`"
msgstr ""

msgid ":c:func:`PyUnicodeWriter_WriteChar`"
msgstr ""

msgid ":c:func:`PyUnicodeWriter_WriteRepr`"
msgstr ""

msgid ":c:func:`PyUnicodeWriter_WriteStr`"
msgstr ""

msgid ":c:func:`PyUnicodeWriter_WriteSubstring`"
msgstr ""

msgid ":c:func:`PyUnicodeWriter_WriteUCS4`"
msgstr ""

msgid ":c:func:`PyUnicodeWriter_WriteUTF8`"
msgstr ""

msgid ":c:func:`PyUnicodeWriter_WriteWideChar`"
msgstr ""

msgid "(Contributed by Victor Stinner in :gh:`119182`.)"
msgstr ""

msgid ""
"Add :c:func:`PyIter_NextItem` to replace :c:func:`PyIter_Next`, which has an "
"ambiguous return value. (Contributed by Irit Katriel and Erlend Aasland in :"
"gh:`105201`.)"
msgstr ""

msgid ""
"Add :c:func:`PyLong_IsPositive`, :c:func:`PyLong_IsNegative` and :c:func:"
"`PyLong_IsZero` for checking if :c:type:`PyLongObject` is positive, "
"negative, or zero, respectively. (Contributed by James Roy and Sergey B "
"Kirpichev in :gh:`126061`.)"
msgstr ""

msgid ""
"Add new functions to convert C ``<stdint.h>`` numbers from/to Python :class:"
"`int`:"
msgstr ""

msgid ":c:func:`PyLong_AsInt32`"
msgstr ""

msgid ":c:func:`PyLong_AsInt64`"
msgstr ""

msgid ":c:func:`PyLong_AsUInt32`"
msgstr ""

msgid ":c:func:`PyLong_AsUInt64`"
msgstr ""

msgid ":c:func:`PyLong_FromInt32`"
msgstr ""

msgid ":c:func:`PyLong_FromInt64`"
msgstr ""

msgid ":c:func:`PyLong_FromUInt32`"
msgstr ""

msgid ":c:func:`PyLong_FromUInt64`"
msgstr ""

msgid "(Contributed by Victor Stinner in :gh:`120389`.)"
msgstr ""

msgid ""
"Add :c:func:`PyBytes_Join(sep, iterable) <PyBytes_Join>` function, similar "
"to ``sep.join(iterable)`` in Python. (Contributed by Victor Stinner in :gh:"
"`121645`.)"
msgstr ""

msgid ""
"Add :c:func:`Py_HashBuffer` to compute and return the hash value of a "
"buffer. (Contributed by Antoine Pitrou and Victor Stinner in :gh:`122854`.)"
msgstr ""

msgid ""
"Add functions to get and set the current runtime Python configuration (:pep:"
"`741`):"
msgstr ""

msgid ":c:func:`PyConfig_Get`"
msgstr ""

msgid ":c:func:`PyConfig_GetInt`"
msgstr ""

msgid ":c:func:`PyConfig_Set`"
msgstr ""

msgid ":c:func:`PyConfig_Names`"
msgstr ""

msgid "Add functions to configure the Python initialization (:pep:`741`):"
msgstr ""

msgid ":c:func:`Py_InitializeFromInitConfig`"
msgstr ""

msgid ":c:func:`PyInitConfig_AddModule`"
msgstr ""

msgid ":c:func:`PyInitConfig_Create`"
msgstr ""

msgid ":c:func:`PyInitConfig_Free`"
msgstr ""

msgid ":c:func:`PyInitConfig_FreeStrList`"
msgstr ""

msgid ":c:func:`PyInitConfig_GetError`"
msgstr ""

msgid ":c:func:`PyInitConfig_GetExitCode`"
msgstr ""

msgid ":c:func:`PyInitConfig_GetInt`"
msgstr ""

msgid ":c:func:`PyInitConfig_GetStr`"
msgstr ""

msgid ":c:func:`PyInitConfig_GetStrList`"
msgstr ""

msgid ":c:func:`PyInitConfig_HasOption`"
msgstr ""

msgid ":c:func:`PyInitConfig_SetInt`"
msgstr ""

msgid ":c:func:`PyInitConfig_SetStr`"
msgstr ""

msgid ":c:func:`PyInitConfig_SetStrList`"
msgstr ""

msgid ""
"Add a new import and export API for Python :class:`int` objects (:pep:`757`):"
msgstr ""

msgid ":c:func:`PyLong_GetNativeLayout`"
msgstr ""

msgid ":c:func:`PyLong_Export`"
msgstr ""

msgid ":c:func:`PyLong_FreeExport`"
msgstr ""

msgid ":c:func:`PyLongWriter_Create`"
msgstr ""

msgid ":c:func:`PyLongWriter_Finish`"
msgstr ""

msgid ":c:func:`PyLongWriter_Discard`"
msgstr ""

msgid "(Contributed by Sergey B Kirpichev and Victor Stinner in :gh:`102471`.)"
msgstr ""

msgid ""
"Add :c:func:`PyType_GetBaseByToken` and :c:data:`Py_tp_token` slot for "
"easier superclass identification, which attempts to resolve the `type "
"checking issue <https://peps.python.org/pep-0630/#type-checking>`__ "
"mentioned in :pep:`630`. (Contributed in :gh:`124153`.)"
msgstr ""

msgid ""
"Add :c:func:`PyUnicode_Equal` function to the limited C API: test if two "
"strings are equal. (Contributed by Victor Stinner in :gh:`124502`.)"
msgstr ""

msgid ""
"Add :c:func:`PyType_Freeze` function to make a type immutable. (Contributed "
"by Victor Stinner in :gh:`121654`.)"
msgstr ""

msgid ""
"Add :c:func:`PyUnstable_Object_EnableDeferredRefcount` for enabling deferred "
"reference counting, as outlined in :pep:`703`."
msgstr ""

msgid ""
"Add :c:func:`PyMonitoring_FireBranchLeftEvent` and :c:func:"
"`PyMonitoring_FireBranchRightEvent` for generating :monitoring-event:"
"`BRANCH_LEFT` and :monitoring-event:`BRANCH_RIGHT` events, respectively."
msgstr ""

msgid ""
"Add :c:func:`Py_fopen` function to open a file. Similar to the :c:func:`!"
"fopen` function, but the *path* parameter is a Python object and an "
"exception is set on error. Add also :c:func:`Py_fclose` function to close a "
"file. (Contributed by Victor Stinner in :gh:`127350`.)"
msgstr ""

msgid ""
"The ``k`` and ``K`` formats in :c:func:`PyArg_ParseTuple` and similar "
"functions now use :meth:`~object.__index__` if available, like all other "
"integer formats. (Contributed by Serhiy Storchaka in :gh:`112068`.)"
msgstr ""

msgid ""
"Add macros :c:func:`Py_PACK_VERSION` and :c:func:`Py_PACK_FULL_VERSION` for "
"bit-packing Python version numbers. (Contributed by Petr Viktorin in :gh:"
"`128629`.)"
msgstr ""

msgid ""
"Add :c:func:`PyUnstable_IsImmortal` for determining whether an object is :"
"term:`immortal`, for debugging purposes."
msgstr ""

msgid ""
"Add :c:func:`PyImport_ImportModuleAttr` and :c:func:"
"`PyImport_ImportModuleAttrString` helper functions to import a module and "
"get an attribute of the module. (Contributed by Victor Stinner in :gh:"
"`128911`.)"
msgstr ""

msgid ""
"Add support for a new ``p`` format unit in :c:func:`Py_BuildValue` that "
"allows taking a C integer and produces a Python :class:`bool` object. "
"(Contributed by Pablo Galindo in :issue:`45325`.)"
msgstr ""

msgid ""
"Add :c:func:`PyUnstable_Object_IsUniqueReferencedTemporary` to determine if "
"an object is a unique temporary object on the interpreter's operand stack. "
"This can be used in some cases as a replacement for checking if :c:func:"
"`Py_REFCNT` is ``1`` for Python objects passed as arguments to C API "
"functions."
msgstr ""

msgid ""
"Add :c:func:`PyUnstable_Object_IsUniquelyReferenced` as a replacement for "
"``Py_REFCNT(op) == 1`` on :term:`free threaded <free threading>` builds. "
"(Contributed by Peter Bierma in :gh:`133140`.)"
msgstr ""

msgid "Limited C API changes"
msgstr ""

msgid ""
"In the limited C API 3.14 and newer, :c:func:`Py_TYPE` and :c:func:"
"`Py_REFCNT` are now implemented as an opaque function call to hide "
"implementation details. (Contributed by Victor Stinner in :gh:`120600` and :"
"gh:`124127`.)"
msgstr ""

msgid ""
"Remove the :c:macro:`PySequence_Fast_GET_SIZE`, :c:macro:"
"`PySequence_Fast_GET_ITEM` and :c:macro:`PySequence_Fast_ITEMS` macros from "
"the limited C API, since these macros never worked in the limited C API. "
"Keep :c:func:`PySequence_Fast` in the limited C API. (Contributed by Victor "
"Stinner in :gh:`91417`.)"
msgstr ""

msgid ""
":c:func:`Py_Finalize` now deletes all interned strings. This is backwards "
"incompatible to any C-Extension that holds onto an interned string after a "
"call to :c:func:`Py_Finalize` and is then reused after a call to :c:func:"
"`Py_Initialize`.  Any issues arising from this behavior will normally result "
"in crashes during the execution of the subsequent call to :c:func:"
"`Py_Initialize` from accessing uninitialized memory. To fix, use an address "
"sanitizer to identify any use-after-free coming from an interned string and "
"deallocate it during module shutdown. (Contributed by Eddie Elizondo in :gh:"
"`113601`.)"
msgstr ""

msgid ""
"The :ref:`Unicode Exception Objects <unicodeexceptions>` C API now raises a :"
"exc:`TypeError` if its exception argument is not a :exc:`UnicodeError` "
"object. (Contributed by Bénédikt Tran in :gh:`127691`.)"
msgstr ""

msgid ""
"The interpreter internally avoids some reference count modifications when "
"loading objects onto the operands stack by :term:`borrowing <borrowed "
"reference>` references when possible. This can lead to smaller reference "
"count values compared to previous Python versions. C API extensions that "
"checked :c:func:`Py_REFCNT` of ``1`` to determine if an function argument is "
"not referenced by any other code should instead use :c:func:"
"`PyUnstable_Object_IsUniqueReferencedTemporary` as a safer replacement."
msgstr ""

msgid "Private functions promoted to public C APIs:"
msgstr ""

msgid "``_PyBytes_Join()``: :c:func:`PyBytes_Join`"
msgstr ""

msgid "``_PyLong_IsNegative()``: :c:func:`PyLong_IsNegative`"
msgstr ""

msgid "``_PyLong_IsPositive()``: :c:func:`PyLong_IsPositive`"
msgstr ""

msgid "``_PyLong_IsZero()``: :c:func:`PyLong_IsZero`"
msgstr ""

msgid "``_PyLong_Sign()``: :c:func:`PyLong_GetSign`"
msgstr ""

msgid "``_PyUnicodeWriter_Dealloc()``: :c:func:`PyUnicodeWriter_Discard`"
msgstr ""

msgid "``_PyUnicodeWriter_Finish()``: :c:func:`PyUnicodeWriter_Finish`"
msgstr ""

msgid "``_PyUnicodeWriter_Init()``: use :c:func:`PyUnicodeWriter_Create`"
msgstr ""

msgid "``_PyUnicodeWriter_Prepare()``: (no replacement)"
msgstr ""

msgid "``_PyUnicodeWriter_PrepareKind()``: (no replacement)"
msgstr ""

msgid "``_PyUnicodeWriter_WriteChar()``: :c:func:`PyUnicodeWriter_WriteChar`"
msgstr ""

msgid "``_PyUnicodeWriter_WriteStr()``: :c:func:`PyUnicodeWriter_WriteStr`"
msgstr ""

msgid ""
"``_PyUnicodeWriter_WriteSubstring()``: :c:func:"
"`PyUnicodeWriter_WriteSubstring`"
msgstr ""

msgid "``_PyUnicode_EQ()``: :c:func:`PyUnicode_Equal`"
msgstr ""

msgid "``_PyUnicode_Equal()``: :c:func:`PyUnicode_Equal`"
msgstr ""

msgid ""
"``_Py_GetConfig()``: :c:func:`PyConfig_Get` and :c:func:`PyConfig_GetInt`"
msgstr ""

msgid "``_Py_HashBytes()``: :c:func:`Py_HashBuffer`"
msgstr ""

msgid "``_Py_fopen_obj()``: :c:func:`Py_fopen`"
msgstr ""

msgid "``PyMutex_IsLocked()`` : :c:func:`PyMutex_IsLocked`"
msgstr ""

msgid ""
"The `pythoncapi-compat project`_ can be used to get most of these new "
"functions on Python 3.13 and older."
msgstr ""

msgid ""
"The :c:macro:`!Py_HUGE_VAL` macro is :term:`soft deprecated`, use :c:macro:`!"
"Py_INFINITY` instead. (Contributed by Sergey B Kirpichev in :gh:`120026`.)"
msgstr ""

msgid ""
"Macros :c:macro:`!Py_IS_NAN`, :c:macro:`!Py_IS_INFINITY` and :c:macro:`!"
"Py_IS_FINITE` are :term:`soft deprecated`, use instead :c:macro:`!isnan`, :c:"
"macro:`!isinf` and :c:macro:`!isfinite` available from :file:`math.h` since "
"C99.  (Contributed by Sergey B Kirpichev in :gh:`119613`.)"
msgstr ""

msgid ""
"Non-tuple sequences are deprecated as argument for the ``(items)`` format "
"unit in :c:func:`PyArg_ParseTuple` and other :ref:`argument parsing <arg-"
"parsing>` functions if *items* contains format units which store a :ref:"
"`borrowed buffer <c-arg-borrowed-buffer>` or a :term:`borrowed reference`. "
"(Contributed by Serhiy Storchaka in :gh:`50333`.)"
msgstr ""

msgid ""
"The previously undocumented function :c:func:`PySequence_In` is :term:`soft "
"deprecated`. Use :c:func:`PySequence_Contains` instead. (Contributed by Yuki "
"Kobayashi in :gh:`127896`.)"
msgstr ""

msgid ""
"The ``PyMonitoring_FireBranchEvent`` function is deprecated and should be "
"replaced with calls to :c:func:`PyMonitoring_FireBranchLeftEvent` and :c:"
"func:`PyMonitoring_FireBranchRightEvent`."
msgstr ""

msgid ""
"The following private functions are deprecated and planned for removal in "
"Python 3.18:"
msgstr ""

msgid ":c:func:`!_PyBytes_Join`: use :c:func:`PyBytes_Join`."
msgstr ""

msgid ""
":c:func:`!_PyDict_GetItemStringWithError`: use :c:func:"
"`PyDict_GetItemStringRef`."
msgstr ""

msgid ":c:func:`!_PyDict_Pop()`: use :c:func:`PyDict_Pop`."
msgstr ""

msgid ":c:func:`!_PyLong_Sign()`: use :c:func:`PyLong_GetSign`."
msgstr ""

msgid ""
":c:func:`!_PyLong_FromDigits` and :c:func:`!_PyLong_New`: use :c:func:"
"`PyLongWriter_Create`."
msgstr ""

msgid ""
":c:func:`!_PyThreadState_UncheckedGet`: use :c:func:"
"`PyThreadState_GetUnchecked`."
msgstr ""

msgid ":c:func:`!_PyUnicode_AsString`: use :c:func:`PyUnicode_AsUTF8`."
msgstr ""

msgid ""
":c:func:`!_PyUnicodeWriter_Init`: replace ``_PyUnicodeWriter_Init(&writer)`` "
"with :c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`."
msgstr ""

msgid ""
":c:func:`!_PyUnicodeWriter_Finish`: replace "
"``_PyUnicodeWriter_Finish(&writer)`` with :c:func:"
"`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`."
msgstr ""

msgid ""
":c:func:`!_PyUnicodeWriter_Dealloc`: replace "
"``_PyUnicodeWriter_Dealloc(&writer)`` with :c:func:"
"`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`."
msgstr ""

msgid ""
":c:func:`!_PyUnicodeWriter_WriteChar`: replace "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` with :c:func:"
"`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."
msgstr ""

msgid ""
":c:func:`!_PyUnicodeWriter_WriteStr`: replace "
"``_PyUnicodeWriter_WriteStr(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteStr(writer, str) <PyUnicodeWriter_WriteStr>`."
msgstr ""

msgid ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: replace "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` with :c:func:"
"`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`."
msgstr ""

msgid ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: replace "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteASCII(writer, str) <PyUnicodeWriter_WriteASCII>`."
msgstr ""

msgid ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: replace "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."
msgstr ""

msgid ":c:func:`!_Py_HashPointer`: use :c:func:`Py_HashPointer`."
msgstr ""

msgid ":c:func:`!_Py_fopen_obj`: use :c:func:`Py_fopen`."
msgstr ""

msgid ""
"The `pythoncapi-compat project`_ can be used to get these new public "
"functions on Python 3.13 and older. (Contributed by Victor Stinner in :gh:"
"`128863`.)"
msgstr ""

msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use :c:func:"
"`PyImport_ImportModule` instead."
msgstr ""

msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use :c:"
"func:`PyWeakref_GetRef` instead. The `pythoncapi-compat project <https://"
"github.com/python/pythoncapi-compat/>`__ can be used to get :c:func:"
"`PyWeakref_GetRef` on Python 3.12 and older."
msgstr ""

msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use :c:"
"type:`wchar_t` instead."
msgstr ""

msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ""

msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`str`, such as :class:`bytes`."
msgstr ""

msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ""

msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`bytes`, such as :class:`str`."
msgstr ""

msgid "Python initialization functions, deprecated in Python 3.13:"
msgstr ""

msgid ""
":c:func:`Py_GetPath`: Use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) instead."
msgstr ""

msgid ""
":c:func:`Py_GetPrefix`: Use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) if :ref:"
"`virtual environments <venv-def>` need to be handled."
msgstr ""

msgid ""
":c:func:`Py_GetExecPrefix`: Use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` (:data:`sys.exec_prefix`) if :"
"ref:`virtual environments <venv-def>` need to be handled."
msgstr ""

msgid ""
":c:func:`Py_GetProgramFullPath`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""

msgid ""
":c:func:`Py_GetProgramName`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""

msgid ""
":c:func:`Py_GetPythonHome`: Use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` or the :envvar:`PYTHONHOME` environment variable instead."
msgstr ""

msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get :c:func:`PyConfig_Get` on Python 3.13 and older."
msgstr ""

msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr ""

msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""

msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""

msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""

msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ""

msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and :data:`!"
"warnings.filters` instead."
msgstr ""

msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead."
msgstr ""

msgid "Global configuration variables:"
msgstr ""

msgid ""
":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` or :c:func:"
"`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` or :c:func:"
"`PyConfig_Get(\"verbose\") <PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` or :c:func:"
"`PyConfig_Get(\"quiet\") <PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` or :c:func:"
"`PyConfig_Get(\"interactive\") <PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` or :c:func:"
"`PyConfig_Get(\"inspect\") <PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` or :c:"
"func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` or :c:func:"
"`PyConfig_Get(\"site_import\") <PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` or :c:"
"func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` or :c:"
"func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"or :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"or :c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use :c:member:`PyConfig."
"user_site_directory` or :c:func:`PyConfig_Get(\"user_site_directory\") "
"<PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` or :"
"c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` or :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` or :c:func:"
"`PyConfig_Get(\"isolated\") <PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` or :c:func:"
"`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use :c:member:`PyConfig."
"legacy_windows_stdio` or :c:func:`PyConfig_Get(\"legacy_windows_stdio\") "
"<PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`, :c:var:`!"
"Py_HasFileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` or :c:func:`PyConfig_Get(\"filesystem_encoding\") "
"<PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use :c:member:`PyConfig."
"filesystem_errors` or :c:func:`PyConfig_Get(\"filesystem_errors\") "
"<PyConfig_Get>` instead."
msgstr ""

msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` or :c:func:"
"`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` instead. (see :c:func:"
"`Py_PreInitialize`)"
msgstr ""

msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` to set these options. Or :c:func:`PyConfig_Get` can be used to "
"get these options at runtime."
msgstr ""

msgid "The bundled copy of ``libmpdec``."
msgstr ""

msgid "Pending removal in Python 3.18"
msgstr ""

msgid "Deprecated private functions (:gh:`128863`):"
msgstr ""

msgid ":c:func:`!_PyDict_Pop()`: :c:func:`PyDict_Pop`."
msgstr ""

msgid ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: replace "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."
msgstr ""

msgid ":c:func:`!_PyUnicodeWriter_Prepare`: (no replacement)."
msgstr ""

msgid ":c:func:`!_PyUnicodeWriter_PrepareKind`: (no replacement)."
msgstr ""

msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get these new public functions on Python 3.13 and older."
msgstr ""

msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr ""

msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Unneeded since Python 3.8."
msgstr ""

msgid ":c:func:`PyErr_Fetch`: Use :c:func:`PyErr_GetRaisedException` instead."
msgstr ""

msgid ""
":c:func:`PyErr_NormalizeException`: Use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""

msgid ""
":c:func:`PyErr_Restore`: Use :c:func:`PyErr_SetRaisedException` instead."
msgstr ""

msgid ""
":c:func:`PyModule_GetFilename`: Use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""

msgid ":c:func:`PyOS_AfterFork`: Use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ""

msgid ""
":c:func:`PySlice_GetIndicesEx`: Use :c:func:`PySlice_Unpack` and :c:func:"
"`PySlice_AdjustIndices` instead."
msgstr ""

msgid ":c:func:`PyUnicode_READY`: Unneeded since Python 3.12"
msgstr ""

msgid ":c:func:`!PyErr_Display`: Use :c:func:`PyErr_DisplayException` instead."
msgstr ""

msgid ""
":c:func:`!_PyErr_ChainExceptions`: Use :c:func:`!_PyErr_ChainExceptions1` "
"instead."
msgstr ""

msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ""

msgid "Thread Local Storage (TLS) API:"
msgstr ""

msgid ""
":c:func:`PyThread_create_key`: Use :c:func:`PyThread_tss_alloc` instead."
msgstr ""

msgid ":c:func:`PyThread_delete_key`: Use :c:func:`PyThread_tss_free` instead."
msgstr ""

msgid ""
":c:func:`PyThread_set_key_value`: Use :c:func:`PyThread_tss_set` instead."
msgstr ""

msgid ""
":c:func:`PyThread_get_key_value`: Use :c:func:`PyThread_tss_get` instead."
msgstr ""

msgid ""
":c:func:`PyThread_delete_key_value`: Use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""

msgid ":c:func:`PyThread_ReInitTLS`: Unneeded since Python 3.7."
msgstr ""

msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases was deprecated since 3.12 and now raises a :exc:`TypeError`."
msgstr ""

msgid ""
"Remove ``PyDictObject.ma_version_tag`` member which was deprecated since "
"Python 3.12. Use the :c:func:`PyDict_AddWatcher` API instead. (Contributed "
"by Sam Gross in :gh:`124296`.)"
msgstr ""

msgid ""
"Remove the private ``_Py_InitializeMain()`` function. It was a :term:"
"`provisional API` added to Python 3.8 by :pep:`587`. (Contributed by Victor "
"Stinner in :gh:`129033`.)"
msgstr ""

msgid ""
"The undocumented APIs :c:macro:`!Py_C_RECURSION_LIMIT` and :c:member:`!"
"PyThreadState.c_recursion_remaining`, added in 3.13, are removed without a "
"deprecation period. Please use :c:func:`Py_EnterRecursiveCall` to guard "
"against runaway recursion in C code. (Removed in :gh:`133079`, see also :gh:"
"`130396`.)"
msgstr ""
