# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!builtins` --- Built-in objects"
msgstr ""

msgid ""
"This module provides direct access to all 'built-in' identifiers of Python; "
"for example, ``builtins.open`` is the full name for the built-in function :"
"func:`open`."
msgstr ""

msgid ""
"This module is not normally accessed explicitly by most applications, but "
"can be useful in modules that provide objects with the same name as a built-"
"in value, but in which the built-in of that name is also needed.  For "
"example, in a module that wants to implement an :func:`open` function that "
"wraps the built-in :func:`open`, this module can be used directly::"
msgstr ""

msgid ""
"import builtins\n"
"\n"
"def open(path):\n"
"    f = builtins.open(path, 'r')\n"
"    return UpperCaser(f)\n"
"\n"
"class UpperCaser:\n"
"    '''Wrapper around a file that converts output to uppercase.'''\n"
"\n"
"    def __init__(self, f):\n"
"        self._f = f\n"
"\n"
"    def read(self, count=-1):\n"
"        return self._f.read(count).upper()\n"
"\n"
"    # ..."
msgstr ""

msgid ""
"As an implementation detail, most modules have the name ``__builtins__`` "
"made available as part of their globals.  The value of ``__builtins__`` is "
"normally either this module or the value of this module's :attr:`~object."
"__dict__` attribute. Since this is an implementation detail, it may not be "
"used by alternate implementations of Python."
msgstr ""

msgid ":ref:`built-in-consts`"
msgstr ""

msgid ":ref:`bltin-exceptions`"
msgstr ""

msgid ":ref:`built-in-funcs`"
msgstr ""

msgid ":ref:`bltin-types`"
msgstr ""
