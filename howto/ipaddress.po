# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-17 14:16+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "An introduction to the ipaddress module"
msgstr ""

msgid "author"
msgstr ""

msgid "Peter Moody"
msgstr ""

msgid "Nick Coghlan"
msgstr ""

msgid "Overview"
msgstr ""

msgid ""
"This document aims to provide a gentle introduction to the :mod:`ipaddress` "
"module. It is aimed primarily at users that aren't already familiar with IP "
"networking terminology, but may also be useful to network engineers wanting "
"an overview of how :mod:`ipaddress` represents IP network addressing "
"concepts."
msgstr ""

msgid "Creating Address/Network/Interface objects"
msgstr ""

msgid ""
"Since :mod:`ipaddress` is a module for inspecting and manipulating IP "
"addresses, the first thing you'll want to do is create some objects.  You "
"can use :mod:`ipaddress` to create objects from strings and integers."
msgstr ""

msgid "A Note on IP Versions"
msgstr ""

msgid ""
"For readers that aren't particularly familiar with IP addressing, it's "
"important to know that the Internet Protocol (IP) is currently in the "
"process of moving from version 4 of the protocol to version 6. This "
"transition is occurring largely because version 4 of the protocol doesn't "
"provide enough addresses to handle the needs of the whole world, especially "
"given the increasing number of devices with direct connections to the "
"internet."
msgstr ""

msgid ""
"Explaining the details of the differences between the two versions of the "
"protocol is beyond the scope of this introduction, but readers need to at "
"least be aware that these two versions exist, and it will sometimes be "
"necessary to force the use of one version or the other."
msgstr ""

msgid "IP Host Addresses"
msgstr ""

msgid ""
"Addresses, often referred to as \"host addresses\" are the most basic unit "
"when working with IP addressing. The simplest way to create addresses is to "
"use the :func:`ipaddress.ip_address` factory function, which automatically "
"determines whether to create an IPv4 or IPv6 address based on the passed in "
"value:"
msgstr ""

msgid ""
"Addresses can also be created directly from integers. Values that will fit "
"within 32 bits are assumed to be IPv4 addresses::"
msgstr ""

msgid ""
">>> ipaddress.ip_address(3221225985)\n"
"IPv4Address('192.0.2.1')\n"
">>> ipaddress.ip_address(42540766411282592856903984951653826561)\n"
"IPv6Address('2001:db8::1')"
msgstr ""

msgid ""
"To force the use of IPv4 or IPv6 addresses, the relevant classes can be "
"invoked directly. This is particularly useful to force creation of IPv6 "
"addresses for small integers::"
msgstr ""

msgid ""
">>> ipaddress.ip_address(1)\n"
"IPv4Address('0.0.0.1')\n"
">>> ipaddress.IPv4Address(1)\n"
"IPv4Address('0.0.0.1')\n"
">>> ipaddress.IPv6Address(1)\n"
"IPv6Address('::1')"
msgstr ""

msgid "Defining Networks"
msgstr ""

msgid ""
"Host addresses are usually grouped together into IP networks, so :mod:"
"`ipaddress` provides a way to create, inspect and manipulate network "
"definitions. IP network objects are constructed from strings that define the "
"range of host addresses that are part of that network. The simplest form for "
"that information is a \"network address/network prefix\" pair, where the "
"prefix defines the number of leading bits that are compared to determine "
"whether or not an address is part of the network and the network address "
"defines the expected value of those bits."
msgstr ""

msgid ""
"As for addresses, a factory function is provided that determines the correct "
"IP version automatically::"
msgstr ""

msgid ""
">>> ipaddress.ip_network('192.0.2.0/24')\n"
"IPv4Network('192.0.2.0/24')\n"
">>> ipaddress.ip_network('2001:db8::0/96')\n"
"IPv6Network('2001:db8::/96')"
msgstr ""

msgid ""
"Network objects cannot have any host bits set.  The practical effect of this "
"is that ``192.0.2.1/24`` does not describe a network.  Such definitions are "
"referred to as interface objects since the ip-on-a-network notation is "
"commonly used to describe network interfaces of a computer on a given "
"network and are described further in the next section."
msgstr ""

msgid ""
"By default, attempting to create a network object with host bits set will "
"result in :exc:`ValueError` being raised. To request that the additional "
"bits instead be coerced to zero, the flag ``strict=False`` can be passed to "
"the constructor::"
msgstr ""

msgid ""
">>> ipaddress.ip_network('192.0.2.1/24')\n"
"Traceback (most recent call last):\n"
"   ...\n"
"ValueError: 192.0.2.1/24 has host bits set\n"
">>> ipaddress.ip_network('192.0.2.1/24', strict=False)\n"
"IPv4Network('192.0.2.0/24')"
msgstr ""

msgid ""
"While the string form offers significantly more flexibility, networks can "
"also be defined with integers, just like host addresses. In this case, the "
"network is considered to contain only the single address identified by the "
"integer, so the network prefix includes the entire network address::"
msgstr ""

msgid ""
">>> ipaddress.ip_network(3221225984)\n"
"IPv4Network('192.0.2.0/32')\n"
">>> ipaddress.ip_network(42540766411282592856903984951653826560)\n"
"IPv6Network('2001:db8::/128')"
msgstr ""

msgid ""
"As with addresses, creation of a particular kind of network can be forced by "
"calling the class constructor directly instead of using the factory function."
msgstr ""

msgid "Host Interfaces"
msgstr ""

msgid ""
"As mentioned just above, if you need to describe an address on a particular "
"network, neither the address nor the network classes are sufficient. "
"Notation like ``192.0.2.1/24`` is commonly used by network engineers and the "
"people who write tools for firewalls and routers as shorthand for \"the host "
"``192.0.2.1`` on the network ``192.0.2.0/24``\", Accordingly, :mod:"
"`ipaddress` provides a set of hybrid classes that associate an address with "
"a particular network. The interface for creation is identical to that for "
"defining network objects, except that the address portion isn't constrained "
"to being a network address."
msgstr ""

msgid ""
"Integer inputs are accepted (as with networks), and use of a particular IP "
"version can be forced by calling the relevant constructor directly."
msgstr ""

msgid "Inspecting Address/Network/Interface Objects"
msgstr ""

msgid ""
"You've gone to the trouble of creating an IPv(4|6)(Address|Network|"
"Interface) object, so you probably want to get information about it.  :mod:"
"`ipaddress` tries to make doing this easy and intuitive."
msgstr ""

msgid "Extracting the IP version::"
msgstr ""

msgid ""
">>> addr4 = ipaddress.ip_address('192.0.2.1')\n"
">>> addr6 = ipaddress.ip_address('2001:db8::1')\n"
">>> addr6.version\n"
"6\n"
">>> addr4.version\n"
"4"
msgstr ""

msgid "Obtaining the network from an interface::"
msgstr ""

msgid ""
">>> host4 = ipaddress.ip_interface('192.0.2.1/24')\n"
">>> host4.network\n"
"IPv4Network('192.0.2.0/24')\n"
">>> host6 = ipaddress.ip_interface('2001:db8::1/96')\n"
">>> host6.network\n"
"IPv6Network('2001:db8::/96')"
msgstr ""

msgid "Finding out how many individual addresses are in a network::"
msgstr ""

msgid ""
">>> net4 = ipaddress.ip_network('192.0.2.0/24')\n"
">>> net4.num_addresses\n"
"256\n"
">>> net6 = ipaddress.ip_network('2001:db8::0/96')\n"
">>> net6.num_addresses\n"
"4294967296"
msgstr ""

msgid "Iterating through the \"usable\" addresses on a network::"
msgstr ""

msgid ""
">>> net4 = ipaddress.ip_network('192.0.2.0/24')\n"
">>> for x in net4.hosts():\n"
"...     print(x)\n"
"192.0.2.1\n"
"192.0.2.2\n"
"192.0.2.3\n"
"192.0.2.4\n"
"...\n"
"192.0.2.252\n"
"192.0.2.253\n"
"192.0.2.254"
msgstr ""

msgid ""
"Obtaining the netmask (i.e. set bits corresponding to the network prefix) or "
"the hostmask (any bits that are not part of the netmask):"
msgstr ""

msgid "Exploding or compressing the address::"
msgstr ""

msgid ""
">>> addr6.exploded\n"
"'2001:0db8:0000:0000:0000:0000:0000:0001'\n"
">>> addr6.compressed\n"
"'2001:db8::1'\n"
">>> net6.exploded\n"
"'2001:0db8:0000:0000:0000:0000:0000:0000/96'\n"
">>> net6.compressed\n"
"'2001:db8::/96'"
msgstr ""

msgid ""
"While IPv4 doesn't support explosion or compression, the associated objects "
"still provide the relevant properties so that version neutral code can "
"easily ensure the most concise or most verbose form is used for IPv6 "
"addresses while still correctly handling IPv4 addresses."
msgstr ""

msgid "Networks as lists of Addresses"
msgstr ""

msgid ""
"It's sometimes useful to treat networks as lists.  This means it is possible "
"to index them like this::"
msgstr ""

msgid ""
">>> net4[1]\n"
"IPv4Address('192.0.2.1')\n"
">>> net4[-1]\n"
"IPv4Address('192.0.2.255')\n"
">>> net6[1]\n"
"IPv6Address('2001:db8::1')\n"
">>> net6[-1]\n"
"IPv6Address('2001:db8::ffff:ffff')"
msgstr ""

msgid ""
"It also means that network objects lend themselves to using the list "
"membership test syntax like this::"
msgstr ""

msgid ""
"if address in network:\n"
"    # do something"
msgstr ""

msgid "Containment testing is done efficiently based on the network prefix::"
msgstr ""

msgid ""
">>> addr4 = ipaddress.ip_address('192.0.2.1')\n"
">>> addr4 in ipaddress.ip_network('192.0.2.0/24')\n"
"True\n"
">>> addr4 in ipaddress.ip_network('192.0.3.0/24')\n"
"False"
msgstr ""

msgid "Comparisons"
msgstr ""

msgid ""
":mod:`ipaddress` provides some simple, hopefully intuitive ways to compare "
"objects, where it makes sense::"
msgstr ""

msgid ""
">>> ipaddress.ip_address('192.0.2.1') < ipaddress.ip_address('192.0.2.2')\n"
"True"
msgstr ""

msgid ""
"A :exc:`TypeError` exception is raised if you try to compare objects of "
"different versions or different types."
msgstr ""

msgid "Using IP Addresses with other modules"
msgstr ""

msgid ""
"Other modules that use IP addresses (such as :mod:`socket`) usually won't "
"accept objects from this module directly. Instead, they must be coerced to "
"an integer or string that the other module will accept::"
msgstr ""

msgid ""
">>> addr4 = ipaddress.ip_address('192.0.2.1')\n"
">>> str(addr4)\n"
"'192.0.2.1'\n"
">>> int(addr4)\n"
"3221225985"
msgstr ""

msgid "Getting more detail when instance creation fails"
msgstr ""

msgid ""
"When creating address/network/interface objects using the version-agnostic "
"factory functions, any errors will be reported as :exc:`ValueError` with a "
"generic error message that simply says the passed in value was not "
"recognized as an object of that type. The lack of a specific error is "
"because it's necessary to know whether the value is *supposed* to be IPv4 or "
"IPv6 in order to provide more detail on why it has been rejected."
msgstr ""

msgid ""
"To support use cases where it is useful to have access to this additional "
"detail, the individual class constructors actually raise the :exc:"
"`ValueError` subclasses :exc:`ipaddress.AddressValueError` and :exc:"
"`ipaddress.NetmaskValueError` to indicate exactly which part of the "
"definition failed to parse correctly."
msgstr ""

msgid ""
"The error messages are significantly more detailed when using the class "
"constructors directly. For example::"
msgstr ""

msgid ""
">>> ipaddress.ip_address(\"192.168.0.256\")\n"
"Traceback (most recent call last):\n"
"  ...\n"
"ValueError: '192.168.0.256' does not appear to be an IPv4 or IPv6 address\n"
">>> ipaddress.IPv4Address(\"192.168.0.256\")\n"
"Traceback (most recent call last):\n"
"  ...\n"
"ipaddress.AddressValueError: Octet 256 (> 255) not permitted in "
"'192.168.0.256'\n"
"\n"
">>> ipaddress.ip_network(\"192.168.0.1/64\")\n"
"Traceback (most recent call last):\n"
"  ...\n"
"ValueError: '192.168.0.1/64' does not appear to be an IPv4 or IPv6 network\n"
">>> ipaddress.IPv4Network(\"192.168.0.1/64\")\n"
"Traceback (most recent call last):\n"
"  ...\n"
"ipaddress.NetmaskValueError: '64' is not a valid netmask"
msgstr ""

msgid ""
"However, both of the module specific exceptions have :exc:`ValueError` as "
"their parent class, so if you're not concerned with the particular type of "
"error, you can still write code like the following::"
msgstr ""

msgid ""
"try:\n"
"    network = ipaddress.IPv4Network(address)\n"
"except ValueError:\n"
"    print('address/netmask is invalid for IPv4:', address)"
msgstr ""
