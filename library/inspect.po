# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!inspect` --- Inspect live objects"
msgstr ":mod:`!inspect` --- Inspektera live-objekt"

msgid "**Source code:** :source:`Lib/inspect.py`"
msgstr "**Källkod:** :source:`Lib/inspect.py`"

msgid ""
"The :mod:`inspect` module provides several useful functions to help get "
"information about live objects such as modules, classes, methods, functions, "
"tracebacks, frame objects, and code objects.  For example, it can help you "
"examine the contents of a class, retrieve the source code of a method, "
"extract and format the argument list for a function, or get all the "
"information you need to display a detailed traceback."
msgstr ""
"Modulen :mod:`inspect` innehåller flera användbara funktioner som hjälper "
"dig att få information om aktiva objekt som moduler, klasser, metoder, "
"funktioner, spårningar, ramobjekt och kodobjekt.  Den kan till exempel "
"hjälpa dig att undersöka innehållet i en klass, hämta källkoden för en "
"metod, extrahera och formatera argumentlistan för en funktion eller få all "
"information du behöver för att visa en detaljerad spårning."

msgid ""
"There are four main kinds of services provided by this module: type "
"checking, getting source code, inspecting classes and functions, and "
"examining the interpreter stack."
msgstr ""
"Det finns fyra huvudtyper av tjänster som tillhandahålls av denna modul: "
"typkontroll, hämtning av källkod, inspektion av klasser och funktioner samt "
"undersökning av tolkens stack."

msgid "Types and members"
msgstr "Typer och medlemmar"

msgid ""
"The :func:`getmembers` function retrieves the members of an object such as a "
"class or module. The functions whose names begin with \"is\" are mainly "
"provided as convenient choices for the second argument to :func:"
"`getmembers`. They also help you determine when you can expect to find the "
"following special attributes (see :ref:`import-mod-attrs` for module "
"attributes):"
msgstr ""
"Funktionen :func:`getmembers` hämtar medlemmarna i ett objekt, t.ex. en "
"klass eller en modul. De funktioner vars namn börjar med \"is\" är "
"huvudsakligen praktiska val för det andra argumentet till :func:"
"`getmembers`. De hjälper dig också att avgöra när du kan förvänta dig att "
"hitta följande specialattribut (se :ref:`import-mod-attrs` för "
"modulattribut):"

msgid "Type"
msgstr "Typ"

msgid "Attribute"
msgstr "Attribut"

msgid "Description"
msgstr "Beskrivning"

msgid "class"
msgstr "class"

msgid "__doc__"
msgstr "__doc__"

msgid "documentation string"
msgstr "dokumentationssträng"

msgid "__name__"
msgstr "__name__"

msgid "name with which this class was defined"
msgstr "namn med vilket denna klass definierades"

msgid "__qualname__"
msgstr "__qualname__"

msgid "qualified name"
msgstr "kvalificerat namn"

msgid "__module__"
msgstr "__module__"

msgid "name of module in which this class was defined"
msgstr "namnet på den modul där denna klass definierades"

msgid "__type_params__"
msgstr "__type_params__"

msgid ""
"A tuple containing the :ref:`type parameters <type-params>` of a generic "
"class"
msgstr ""
"En tupel som innehåller :ref:`typ-parametrar <type-params>` för en generisk "
"klass"

msgid "method"
msgstr "metod"

msgid "name with which this method was defined"
msgstr "namn med vilket denna metod definierades"

msgid "__func__"
msgstr "__func__"

msgid "function object containing implementation of method"
msgstr "funktionsobjekt som innehåller implementering av metod"

msgid "__self__"
msgstr "__self__"

msgid "instance to which this method is bound, or ``None``"
msgstr "instans som denna metod är bunden till, eller ``None``"

msgid "name of module in which this method was defined"
msgstr "namn på modul där denna metod definierades"

msgid "function"
msgstr "function"

msgid "name with which this function was defined"
msgstr "namn med vilket denna funktion definierades"

msgid "__code__"
msgstr "__code__"

msgid "code object containing compiled function :term:`bytecode`"
msgstr "kodobjekt som innehåller kompilerad funktion :term:`bytecode`"

msgid "__defaults__"
msgstr "__defaults__"

msgid "tuple of any default values for positional or keyword parameters"
msgstr ""
"tupel av eventuella standardvärden för positions- eller nyckelordsparametrar"

msgid "__kwdefaults__"
msgstr "__kwdefaults__"

msgid "mapping of any default values for keyword-only parameters"
msgstr ""
"mappning av eventuella standardvärden för parametrar som endast innehåller "
"nyckelord"

msgid "__globals__"
msgstr "__globals__"

msgid "global namespace in which this function was defined"
msgstr "global namnrymd där denna funktion definierades"

msgid "__builtins__"
msgstr "__builtins__"

msgid "builtins namespace"
msgstr "namnrymd för inbyggda komponenter"

msgid "__annotations__"
msgstr "__annotations__"

msgid ""
"mapping of parameters names to annotations; ``\"return\"`` key is reserved "
"for return annotations."
msgstr ""
"mappning av parameternamn till annoteringar; ``\"return\"`` nyckel är "
"reserverad för return-annoteringar."

msgid ""
"A tuple containing the :ref:`type parameters <type-params>` of a generic "
"function"
msgstr ""
"En tupel som innehåller :ref:`typ-parametrarna <type-params>` för en "
"generisk funktion"

msgid "name of module in which this function was defined"
msgstr "namn på modul där denna funktion definierades"

msgid "traceback"
msgstr "traceback"

msgid "tb_frame"
msgstr "tb_frame"

msgid "frame object at this level"
msgstr "ramobjekt på denna nivå"

msgid "tb_lasti"
msgstr "tb_lasti"

msgid "index of last attempted instruction in bytecode"
msgstr "index för det senaste försöket till instruktion i bytecode"

msgid "tb_lineno"
msgstr "tb_lineno"

msgid "current line number in Python source code"
msgstr "aktuellt radnummer i Python-källkoden"

msgid "tb_next"
msgstr "tb_next"

msgid "next inner traceback object (called by this level)"
msgstr "nästa inre traceback-objekt (anropas av denna nivå)"

msgid "frame"
msgstr "frame"

msgid "f_back"
msgstr "f_back"

msgid "next outer frame object (this frame's caller)"
msgstr "nästa yttre ramobjekt (den här ramens anropare)"

msgid "f_builtins"
msgstr "f_builtins"

msgid "builtins namespace seen by this frame"
msgstr "builtins namnrymd som ses av denna ram"

msgid "f_code"
msgstr "f_code"

msgid "code object being executed in this frame"
msgstr "kodobjekt som exekveras i denna bildruta"

msgid "f_globals"
msgstr "f_globals"

msgid "global namespace seen by this frame"
msgstr "global namnrymd som ses av denna ram"

msgid "f_lasti"
msgstr "f_lasti"

msgid "f_lineno"
msgstr "f_lineno"

msgid "f_locals"
msgstr "f_locals"

msgid "local namespace seen by this frame"
msgstr "lokalt namnområde som ses av denna ram"

msgid "f_generator"
msgstr "f_generator"

msgid ""
"returns the generator or coroutine object that owns this frame, or ``None`` "
"if the frame is of a regular function"
msgstr ""
"returnerar generatorn eller coroutine-objektet som äger den här ramen, eller "
"``None`` om ramen är en vanlig funktion"

msgid "f_trace"
msgstr "f_trace"

msgid "tracing function for this frame, or ``None``"
msgstr "spårningsfunktion för denna ram, eller ``None``"

msgid "f_trace_lines"
msgstr "f_trace_lines"

msgid ""
"indicate whether a tracing event is triggered for each source source line"
msgstr "ange om en spårningshändelse ska utlösas för varje källkodslinje"

msgid "f_trace_opcodes"
msgstr "f_trace_opcodes"

msgid "indicate whether per-opcode events are requested"
msgstr "ange om händelser per opcode begärs"

msgid "clear()"
msgstr "clear()"

msgid "used to clear all references to local variables"
msgstr "används för att rensa alla referenser till lokala variabler"

msgid "code"
msgstr "code"

msgid "co_argcount"
msgstr "co_argcount"

msgid ""
"number of arguments (not including keyword only arguments, \\* or \\*\\* "
"args)"
msgstr ""
"antal argument (inkluderar inte argument med endast nyckelord, \\* eller "
"\\*\\* args)"

msgid "co_code"
msgstr "co_code"

msgid "string of raw compiled bytecode"
msgstr "sträng av rå kompilerad bytecode"

msgid "co_cellvars"
msgstr "co_cellvars"

msgid "tuple of names of cell variables (referenced by containing scopes)"
msgstr "tupel av namn på cellvariabler (refererade av innehållande scopes)"

msgid "co_consts"
msgstr "co_consts"

msgid "tuple of constants used in the bytecode"
msgstr "tuple av konstanter som används i bytekoden"

msgid "co_filename"
msgstr "co_filename"

msgid "name of file in which this code object was created"
msgstr "namn på filen där detta kodobjekt skapades"

msgid "co_firstlineno"
msgstr "co_firstlineno"

msgid "number of first line in Python source code"
msgstr "nummer på första raden i Python-källkod"

msgid "co_flags"
msgstr "co_flags"

msgid ""
"bitmap of ``CO_*`` flags, read more :ref:`here <inspect-module-co-flags>`"
msgstr ""
"bitmapp av ``CO_*`` flaggor, läs mer :ref:`här <inspect-module-co-flags>`"

msgid "co_lnotab"
msgstr "co_lnotab"

msgid "encoded mapping of line numbers to bytecode indices"
msgstr "kodad mappning av radnummer till bytecode-index"

msgid "co_freevars"
msgstr "co_freevars"

msgid "tuple of names of free variables (referenced via a function's closure)"
msgstr "tupel av namn på fria variabler (refereras via en funktions closure)"

msgid "co_posonlyargcount"
msgstr "co_posonlyargcount"

msgid "number of positional only arguments"
msgstr "antal positionella argument"

msgid "co_kwonlyargcount"
msgstr "co_kwonlyargcount"

msgid "number of keyword only arguments (not including \\*\\* arg)"
msgstr "antal argument för endast nyckelord (ej inkluderande \\*\\* argument)"

msgid "co_name"
msgstr "co_name"

msgid "name with which this code object was defined"
msgstr "namn med vilket detta kodobjekt definierades"

msgid "co_qualname"
msgstr "co_qualname"

msgid "fully qualified name with which this code object was defined"
msgstr "fullständigt kvalificerat namn med vilket detta kodobjekt definierades"

msgid "co_names"
msgstr "co_names"

msgid "tuple of names other than arguments and function locals"
msgstr "tupel av namn som inte är argument och funktionslokaler"

msgid "co_nlocals"
msgstr "co_nlocals"

msgid "number of local variables"
msgstr "antal lokala variabler"

msgid "co_stacksize"
msgstr "co_stacksize"

msgid "virtual machine stack space required"
msgstr "stackutrymme för virtuell maskin krävs"

msgid "co_varnames"
msgstr "co_varnames"

msgid "tuple of names of arguments and local variables"
msgstr "tupel av namn på argument och lokala variabler"

msgid "co_lines()"
msgstr "co_lines()"

msgid "returns an iterator that yields successive bytecode ranges"
msgstr "returnerar en iterator som ger successiva bytecode-intervall"

msgid "co_positions()"
msgstr "co_positions()"

msgid ""
"returns an iterator of source code positions for each bytecode instruction"
msgstr ""
"returnerar en iterator med källkodspositioner för varje bytecode-instruktion"

msgid "replace()"
msgstr "replace()"

msgid "returns a copy of the code object with new values"
msgstr "returnerar en kopia av kodobjektet med nya värden"

msgid "generator"
msgstr "generator"

msgid "name"
msgstr "namn"

msgid "gi_frame"
msgstr "gi_frame"

msgid "gi_running"
msgstr "gi_running"

msgid "is the generator running?"
msgstr "är generatorn igång?"

msgid "gi_code"
msgstr "gi_code"

msgid "gi_yieldfrom"
msgstr "gi_yieldfrom"

msgid "object being iterated by ``yield from``, or ``None``"
msgstr "objekt som itereras av ``yield from``, eller ``None``"

msgid "async generator"
msgstr "asynkron generator"

msgid "ag_await"
msgstr "ag_await"

msgid "object being awaited on, or ``None``"
msgstr "objektet som väntar på, eller ``None``"

msgid "ag_frame"
msgstr "ag_frame"

msgid "ag_running"
msgstr "ag_running"

msgid "ag_code"
msgstr "ag_code"

msgid "coroutine"
msgstr "coroutine"

msgid "cr_await"
msgstr "cr_await"

msgid "cr_frame"
msgstr "cr_frame"

msgid "cr_running"
msgstr "cr_running"

msgid "is the coroutine running?"
msgstr "är coroutinen igång?"

msgid "cr_code"
msgstr "cr_code"

msgid "cr_origin"
msgstr "cr_origin"

msgid "where coroutine was created, or ``None``. See |coroutine-origin-link|"
msgstr "där coroutine skapades, eller ``None``. Se |coroutine-ursprungslänk|"

msgid "builtin"
msgstr "inbyggd"

msgid "original name of this function or method"
msgstr "ursprungliga namnet på denna funktion eller metod"

msgid "instance to which a method is bound, or ``None``"
msgstr "instans som en metod är bunden till, eller ``None``"

msgid "Add ``__qualname__`` and ``gi_yieldfrom`` attributes to generators."
msgstr ""
"Lägg till attributen ``__qualname__`` och ``gi_yieldfrom`` till generatorer."

msgid ""
"The ``__name__`` attribute of generators is now set from the function name, "
"instead of the code name, and it can now be modified."
msgstr ""
"Attributet ``__name__`` för generatorer sätts nu utifrån funktionsnamnet, "
"istället för kodnamnet, och det kan nu ändras."

msgid "Add ``cr_origin`` attribute to coroutines."
msgstr "Lägg till attributet ``cr_origin`` för coroutines."

msgid "Add ``__builtins__`` attribute to functions."
msgstr "Lägg till attributet ``__builtins__`` för funktioner."

msgid "Add ``f_generator`` attribute to frames."
msgstr "Lägg till attributet ``f_generator`` för ramar."

msgid ""
"Return all the members of an object in a list of ``(name, value)`` pairs "
"sorted by name. If the optional *predicate* argument—which will be called "
"with the ``value`` object of each member—is supplied, only members for which "
"the predicate returns a true value are included."
msgstr ""
"Returnerar alla medlemmar i ett objekt i en lista med ``(namn, värde)``-par "
"sorterade efter namn. Om det valfria argumentet *predicate* - som kommer att "
"anropas med ``value``-objektet för varje medlem - anges, inkluderas endast "
"de medlemmar för vilka predikatet returnerar ett sant värde."

msgid ""
":func:`getmembers` will only return class attributes defined in the "
"metaclass when the argument is a class and those attributes have been listed "
"in the metaclass' custom :meth:`~object.__dir__`."
msgstr ""
":func:`getmembers` returnerar endast klassattribut som definieras i "
"metaklassen när argumentet är en klass och dessa attribut har listats i "
"metaklassens anpassade :meth:`~object.__dir__`."

msgid ""
"Return all the members of an object in a list of ``(name, value)`` pairs "
"sorted by name without triggering dynamic lookup via the descriptor "
"protocol, __getattr__ or __getattribute__. Optionally, only return members "
"that satisfy a given predicate."
msgstr ""
"Returnerar alla medlemmar i ett objekt i en lista med ``(namn, värde)``-par "
"sorterade efter namn utan att utlösa dynamisk sökning via "
"deskriptorprotokollet, __getattr__ eller __getattribute__. Alternativt kan "
"du bara returnera medlemmar som uppfyller ett givet predikat."

msgid ""
":func:`getmembers_static` may not be able to retrieve all members that "
"getmembers can fetch (like dynamically created attributes) and may find "
"members that getmembers can't (like descriptors that raise AttributeError). "
"It can also return descriptor objects instead of instance members in some "
"cases."
msgstr ""
":func:`getmembers_static` kanske inte kan hämta alla medlemmar som "
"getmembers kan hämta (som dynamiskt skapade attribut) och kan hitta "
"medlemmar som getmembers inte kan (som deskriptorer som ger upphov till "
"AttributeError). Den kan också returnera deskriptorobjekt i stället för "
"instansmedlemmar i vissa fall."

msgid ""
"Return the name of the module named by the file *path*, without including "
"the names of enclosing packages. The file extension is checked against all "
"of the entries in :func:`importlib.machinery.all_suffixes`. If it matches, "
"the final path component is returned with the extension removed. Otherwise, "
"``None`` is returned."
msgstr ""
"Returnerar namnet på modulen som namnges av filen *path*, utan att inkludera "
"namnen på omslutande paket. Filtillägget kontrolleras mot alla poster i :"
"func:`importlib.machinery.all_suffixes`. Om det matchar returneras den "
"slutliga sökvägskomponenten med tillägget borttaget. I annat fall returneras "
"``None``."

msgid ""
"Note that this function *only* returns a meaningful name for actual Python "
"modules - paths that potentially refer to Python packages will still return "
"``None``."
msgstr ""
"Observera att denna funktion *endast* returnerar ett meningsfullt namn för "
"faktiska Python-moduler - sökvägar som potentiellt hänvisar till Python-"
"paket kommer fortfarande att returnera ``None``."

msgid "The function is based directly on :mod:`importlib`."
msgstr "Funktionen är direkt baserad på :mod:`importlib`."

msgid "Return ``True`` if the object is a module."
msgstr "Returnerar ``True`` om objektet är en modul."

msgid ""
"Return ``True`` if the object is a class, whether built-in or created in "
"Python code."
msgstr ""
"Returnerar ``True`` om objektet är en klass, oavsett om den är inbyggd eller "
"skapad i Python-kod."

msgid "Return ``True`` if the object is a bound method written in Python."
msgstr "Returnerar ``True`` om objektet är en bunden metod skriven i Python."

msgid "Return ``True`` if the object is a :term:`package`."
msgstr "Returnerar ``True`` om objektet är en :term:`package`."

msgid ""
"Return ``True`` if the object is a Python function, which includes functions "
"created by a :term:`lambda` expression."
msgstr ""
"Returnerar ``True`` om objektet är en Python-funktion, vilket inkluderar "
"funktioner som skapats av ett :term:`lambda`-uttryck."

msgid "Return ``True`` if the object is a Python generator function."
msgstr "Returnerar ``True`` om objektet är en Python-generatorfunktion."

msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is a Python generator function."
msgstr ""
"Funktioner inlindade i :func:`functools.partial` returnerar nu ``True`` om "
"den inlindade funktionen är en Python-generatorfunktion."

msgid ""
"Functions wrapped in :func:`functools.partialmethod` now return ``True`` if "
"the wrapped function is a Python generator function."
msgstr ""
"Funktioner inlindade i :func:`functools.partialmethod` returnerar nu "
"``True`` om den inlindade funktionen är en Python-generatorfunktion."

msgid "Return ``True`` if the object is a generator."
msgstr "Returnerar ``True`` om objektet är en generator."

msgid ""
"Return ``True`` if the object is a :term:`coroutine function` (a function "
"defined with an :keyword:`async def` syntax), a :func:`functools.partial` "
"wrapping a :term:`coroutine function`, or a sync function marked with :func:"
"`markcoroutinefunction`."
msgstr ""
"Returnerar ``True`` om objektet är en :term:`coroutine function` (en "
"funktion definierad med en :keyword:`async def` syntax), en :func:`functools."
"partial` som omsluter en :term:`coroutine function`, eller en sync-funktion "
"markerad med :func:`markcoroutinefunction`."

msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is a :term:`coroutine function`."
msgstr ""
"Funktioner inlindade i :func:`functools.partial` returnerar nu ``True`` om "
"den inlindade funktionen är en :term:`coroutine function`."

msgid ""
"Sync functions marked with :func:`markcoroutinefunction` now return ``True``."
msgstr ""
"Synkroniseringsfunktioner markerade med :func:`markcoroutinefunction` "
"returnerar nu ``True``."

msgid ""
"Functions wrapped in :func:`functools.partialmethod` now return ``True`` if "
"the wrapped function is a :term:`coroutine function`."
msgstr ""
"Funktioner inlindade i :func:`functools.partialmethod` returnerar nu "
"``True`` om den inlindade funktionen är en :term:`coroutine function`."

msgid ""
"Decorator to mark a callable as a :term:`coroutine function` if it would not "
"otherwise be detected by :func:`iscoroutinefunction`."
msgstr ""
"Dekorator för att markera en anropbar funktion som en :term:"
"`coroutinefunktion` om den annars inte skulle upptäckas av :func:"
"`iscoroutinefunktion`."

msgid ""
"This may be of use for sync functions that return a :term:`coroutine`, if "
"the function is passed to an API that requires :func:`iscoroutinefunction`."
msgstr ""
"Detta kan vara användbart för sync-funktioner som returnerar en :term:"
"`coroutine`, om funktionen skickas till ett API som kräver :func:"
"`iscoroutinefunction`."

msgid ""
"When possible, using an :keyword:`async def` function is preferred. Also "
"acceptable is calling the function and testing the return with :func:"
"`iscoroutine`."
msgstr ""
"När det är möjligt är det att föredra att använda en :keyword:`async def`-"
"funktion. Det är också acceptabelt att anropa funktionen och testa returen "
"med :func:`iscoroutine`."

msgid ""
"Return ``True`` if the object is a :term:`coroutine` created by an :keyword:"
"`async def` function."
msgstr ""
"Returnerar ``True`` om objektet är en :term:`coroutine` som skapats av en :"
"keyword:`async def`-funktion."

msgid ""
"Return ``True`` if the object can be used in :keyword:`await` expression."
msgstr ""
"Returnerar ``True`` om objektet kan användas i :keyword:`await`-uttryck."

msgid ""
"Can also be used to distinguish generator-based coroutines from regular "
"generators:"
msgstr ""
"Kan också användas för att skilja generatorbaserade coroutines från vanliga "
"generatorer:"

msgid ""
"import types\n"
"\n"
"def gen():\n"
"    yield\n"
"@types.coroutine\n"
"def gen_coro():\n"
"    yield\n"
"\n"
"assert not isawaitable(gen())\n"
"assert isawaitable(gen_coro())"
msgstr ""
"import types\n"
"\n"
"def gen():\n"
"    yield\n"
"@types.coroutine\n"
"def gen_coro():\n"
"    yield\n"
"\n"
"assert not isawaitable(gen())\n"
"assert isawaitable(gen_coro())"

msgid ""
"Return ``True`` if the object is an :term:`asynchronous generator` function, "
"for example:"
msgstr ""
"Returnerar ``True`` om objektet är en :term:`asynkron generator`-funktion, "
"till exempel:"

msgid ""
">>> async def agen():\n"
"...     yield 1\n"
"...\n"
">>> inspect.isasyncgenfunction(agen)\n"
"True"
msgstr ""
">>> async def agen():\n"
"...     yield 1\n"
"...\n"
">>> inspect.isasyncgenfunction(agen)\n"
"True"

msgid ""
"Functions wrapped in :func:`functools.partial` now return ``True`` if the "
"wrapped function is an :term:`asynchronous generator` function."
msgstr ""
"Funktioner inlindade i :func:`functools.partial` returnerar nu ``True`` om "
"den inlindade funktionen är en :term:`asynkron generator`-funktion."

msgid ""
"Return ``True`` if the object is an :term:`asynchronous generator iterator` "
"created by an :term:`asynchronous generator` function."
msgstr ""
"Returnerar ``True`` om objektet är en :term:`asynkron generator iterator` "
"skapad av en :term:`asynkron generator` funktion."

msgid "Return ``True`` if the object is a traceback."
msgstr "Returnerar ``True`` om objektet är en traceback."

msgid "Return ``True`` if the object is a frame."
msgstr "Returnerar ``True`` om objektet är en ram."

msgid "Return ``True`` if the object is a code."
msgstr "Returnerar ``True`` om objektet är en kod."

msgid ""
"Return ``True`` if the object is a built-in function or a bound built-in "
"method."
msgstr ""
"Returnerar ``True`` om objektet är en inbyggd funktion eller en bunden "
"inbyggd metod."

msgid ""
"Return ``True`` if the type of object is a :class:`~types.MethodWrapperType`."
msgstr ""
"Returnerar ``True`` om objekttypen är en :class:`~types.MethodWrapperType`."

msgid ""
"These are instances of :class:`~types.MethodWrapperType`, such as :meth:"
"`~object.__str__`, :meth:`~object.__eq__` and :meth:`~object.__repr__`."
msgstr ""
"Dessa är instanser av :class:`~types.MethodWrapperType`, till exempel :meth:"
"`~object.__str__`, :meth:`~object.__eq__` och :meth:`~object.__repr__`."

msgid ""
"Return ``True`` if the object is a user-defined or built-in function or "
"method."
msgstr ""
"Returnerar ``True`` om objektet är en användardefinierad eller inbyggd "
"funktion eller metod."

msgid "Return ``True`` if the object is an abstract base class."
msgstr "Returnerar ``True`` om objektet är en abstrakt basklass."

msgid ""
"Return ``True`` if the object is a method descriptor, but not if :func:"
"`ismethod`, :func:`isclass`, :func:`isfunction` or :func:`isbuiltin` are "
"true."
msgstr ""
"Returnerar ``True`` om objektet är en metodbeskrivare, men inte om :func:"
"`ismethod`, :func:`isclass`, :func:`isfunction` eller :func:`isbuiltin` är "
"true."

msgid ""
"This, for example, is true of ``int.__add__``.  An object passing this test "
"has a :meth:`~object.__get__` method, but not a :meth:`~object.__set__` "
"method or a :meth:`~object.__delete__` method.  Beyond that, the set of "
"attributes varies.  A :attr:`~definition.__name__` attribute is usually "
"sensible, and :attr:`~definition.__doc__` often is."
msgstr ""
"Detta är till exempel sant för ``int.__add__``.  Ett objekt som klarar detta "
"test har en :meth:`~object.__get__`-metod, men inte en :meth:`~object."
"__set__`-metod eller en :meth:`~object.__delete__`-metod.  Utöver detta "
"varierar uppsättningen attribut.  Ett :attr:`~definition.__name__`-attribut "
"är vanligtvis förnuftigt, och :attr:`~definition.__doc__` är det ofta."

msgid ""
"Methods implemented via descriptors that also pass one of the other tests "
"return ``False`` from the :func:`ismethoddescriptor` test, simply because "
"the other tests promise more -- you can, e.g., count on having the :attr:"
"`~method.__func__` attribute (etc) when an object passes :func:`ismethod`."
msgstr ""
"Metoder som implementeras via deskriptorer som också klarar något av de "
"andra testerna returnerar ``False`` från :func:`ismethoddescriptor`-testet, "
"helt enkelt för att de andra testerna lovar mer -- du kan t.ex. räkna med "
"att ha attributet :attr:`~method.__func__` (etc) när ett objekt klarar :func:"
"`ismethod`."

msgid ""
"This function no longer incorrectly reports objects with :meth:`~object."
"__get__` and :meth:`~object.__delete__`, but not :meth:`~object.__set__`, as "
"being method descriptors (such objects are data descriptors, not method "
"descriptors)."
msgstr ""
"Denna funktion rapporterar inte längre felaktigt objekt med :meth:`~object."
"__get__` och :meth:`~object.__delete__`, men inte :meth:`~object.__set__`, "
"som metoddeskriptorer (sådana objekt är databeskriptorer, inte "
"metoddeskriptorer)."

msgid "Return ``True`` if the object is a data descriptor."
msgstr "Returnerar ``True`` om objektet är en databeskrivare."

msgid ""
"Data descriptors have a :attr:`~object.__set__` or a :attr:`~object."
"__delete__` method. Examples are properties (defined in Python), getsets, "
"and members.  The latter two are defined in C and there are more specific "
"tests available for those types, which is robust across Python "
"implementations.  Typically, data descriptors will also have :attr:"
"`~definition.__name__` and :attr:`!__doc__` attributes (properties, getsets, "
"and members have both of these attributes), but this is not guaranteed."
msgstr ""
"Databeskrivare har en :attr:`~object.__set__` eller en :attr:`~object."
"__delete__` metod. Exempel är properties (definierade i Python), getsets och "
"members.  De två sistnämnda definieras i C och det finns mer specifika "
"tester tillgängliga för dessa typer, som är robusta över Python-"
"implementationer.  Vanligtvis har databeskrivare också attributen :attr:"
"`~definition.__name__` och :attr:`!__doc__` (properties, getsets och members "
"har båda dessa attribut), men detta är inte garanterat."

msgid "Return ``True`` if the object is a getset descriptor."
msgstr "Returnerar ``True`` om objektet är en getset-descriptor."

msgid ""
"getsets are attributes defined in extension modules via :c:type:"
"`PyGetSetDef` structures.  For Python implementations without such types, "
"this method will always return ``False``."
msgstr ""
"getsets är attribut som definieras i tilläggsmoduler via :c:type:"
"`PyGetSetDef`-strukturer.  För Python-implementationer utan sådana typer "
"kommer denna metod alltid att returnera ``False``."

msgid "Return ``True`` if the object is a member descriptor."
msgstr "Returnerar ``True`` om objektet är en member descriptor."

msgid ""
"Member descriptors are attributes defined in extension modules via :c:type:"
"`PyMemberDef` structures.  For Python implementations without such types, "
"this method will always return ``False``."
msgstr ""
"Medlemsdeskriptorer är attribut som definieras i tilläggsmoduler via :c:type:"
"`PyMemberDef`-strukturer.  För Python-implementationer utan sådana typer "
"kommer denna metod alltid att returnera ``False``."

msgid "Retrieving source code"
msgstr "Hämtning av källkod"

msgid ""
"Get the documentation string for an object, cleaned up with :func:"
"`cleandoc`. If the documentation string for an object is not provided and "
"the object is a class, a method, a property or a descriptor, retrieve the "
"documentation string from the inheritance hierarchy. Return ``None`` if the "
"documentation string is invalid or missing."
msgstr ""
"Hämtar dokumentationssträngen för ett objekt, rensad med :func:`cleandoc`. "
"Om dokumentationssträngen för ett objekt inte anges och objektet är en "
"klass, en metod, en egenskap eller en deskriptor, hämtas "
"dokumentationssträngen från arvshierarkin. Returnerar ``None`` om "
"dokumentationssträngen är ogiltig eller saknas."

msgid "Documentation strings are now inherited if not overridden."
msgstr "Dokumentationssträngar ärvs nu om de inte åsidosätts."

msgid ""
"Return in a single string any lines of comments immediately preceding the "
"object's source code (for a class, function, or method), or at the top of "
"the Python source file (if the object is a module).  If the object's source "
"code is unavailable, return ``None``.  This could happen if the object has "
"been defined in C or the interactive shell."
msgstr ""
"Returnerar i en enda sträng alla rader med kommentarer som omedelbart "
"föregår objektets källkod (för en klass, funktion eller metod), eller högst "
"upp i Python-källfilen (om objektet är en modul).  Om objektets källkod inte "
"är tillgänglig returneras ``None``.  Detta kan hända om objektet har "
"definierats i C eller i det interaktiva skalet."

msgid ""
"Return the name of the (text or binary) file in which an object was defined. "
"This will fail with a :exc:`TypeError` if the object is a built-in module, "
"class, or function."
msgstr ""
"Returnerar namnet på den fil (text eller binär) i vilken ett objekt "
"definierades. Detta kommer att misslyckas med ett :exc:`TypeError` om "
"objektet är en inbyggd modul, klass eller funktion."

msgid ""
"Try to guess which module an object was defined in. Return ``None`` if the "
"module cannot be determined."
msgstr ""
"Försök att gissa vilken modul ett objekt definierades i. Returnerar ``None`` "
"om modulen inte kan bestämmas."

msgid ""
"Return the name of the Python source file in which an object was defined or "
"``None`` if no way can be identified to get the source.  This will fail with "
"a :exc:`TypeError` if the object is a built-in module, class, or function."
msgstr ""
"Returnerar namnet på Python-källfilen där ett objekt definierades eller "
"``None`` om inget sätt kan identifieras för att hämta källan.  Detta kommer "
"att misslyckas med ett :exc:`TypeError` om objektet är en inbyggd modul, "
"klass eller funktion."

msgid ""
"Return a list of source lines and starting line number for an object. The "
"argument may be a module, class, method, function, traceback, frame, or code "
"object.  The source code is returned as a list of the lines corresponding to "
"the object and the line number indicates where in the original source file "
"the first line of code was found.  An :exc:`OSError` is raised if the source "
"code cannot be retrieved. A :exc:`TypeError` is raised if the object is a "
"built-in module, class, or function."
msgstr ""
"Returnerar en lista med källrader och startradnummer för ett objekt. "
"Argumentet kan vara en modul, klass, metod, funktion, traceback, frame eller "
"kodobjekt.  Källkoden returneras som en lista över de rader som motsvarar "
"objektet och radnumret anger var i den ursprungliga källfilen den första "
"kodraden hittades.  Ett :exc:`OSError` genereras om källkoden inte kan "
"hämtas. Ett :exc:`TypeError` visas om objektet är en inbyggd modul, klass "
"eller funktion."

msgid ""
":exc:`OSError` is raised instead of :exc:`IOError`, now an alias of the "
"former."
msgstr ""
":exc:`OSError` tas upp i stället för :exc:`IOError`, som nu är ett alias för "
"det förra."

msgid ""
"Return the text of the source code for an object. The argument may be a "
"module, class, method, function, traceback, frame, or code object.  The "
"source code is returned as a single string.  An :exc:`OSError` is raised if "
"the source code cannot be retrieved. A :exc:`TypeError` is raised if the "
"object is a built-in module, class, or function."
msgstr ""
"Returnerar texten i källkoden för ett objekt. Argumentet kan vara en modul, "
"en klass, en metod, en funktion, en spårning, en ram eller ett kodobjekt.  "
"Källkoden returneras som en enda sträng.  Ett :exc:`OSError` uppstår om "
"källkoden inte kan hämtas. Ett :exc:`TypeError` visas om objektet är en "
"inbyggd modul, klass eller funktion."

msgid ""
"Clean up indentation from docstrings that are indented to line up with "
"blocks of code."
msgstr ""
"Städa upp indrag från dokumentsträngar som är indragna för att stämma "
"överens med kodblock."

msgid ""
"All leading whitespace is removed from the first line.  Any leading "
"whitespace that can be uniformly removed from the second line onwards is "
"removed.  Empty lines at the beginning and end are subsequently removed.  "
"Also, all tabs are expanded to spaces."
msgstr ""
"Alla inledande blanksteg tas bort från den första raden.  Alla inledande "
"blanksteg som kan tas bort på ett enhetligt sätt från den andra raden och "
"framåt tas bort.  Tomma rader i början och slutet tas därefter bort.  "
"Dessutom expanderas alla tabbar till mellanslag."

msgid "Introspecting callables with the Signature object"
msgstr "Introspektering av anropsbara objekt med signaturobjektet"

msgid ""
"The :class:`Signature` object represents the call signature of a callable "
"object and its return annotation. To retrieve a :class:`!Signature` object, "
"use the :func:`!signature` function."
msgstr ""
"Objektet :class:`Signature` representerar anropssignaturen för ett "
"anropsbart objekt och dess returannotation. För att hämta ett :class:`!"
"Signature`-objekt, använd funktionen :func:`!signature`."

msgid "Return a :class:`Signature` object for the given *callable*:"
msgstr "Returnerar ett :class:`Signature`-objekt för den givna *callable*:"

msgid ""
">>> from inspect import signature\n"
">>> def foo(a, *, b:int, **kwargs):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
"\n"
">>> str(sig)\n"
"'(a, *, b: int, **kwargs)'\n"
"\n"
">>> str(sig.parameters['b'])\n"
"'b: int'\n"
"\n"
">>> sig.parameters['b'].annotation\n"
"<class 'int'>"
msgstr ""
">>> from inspect import signature\n"
">>> def foo(a, *, b:int, **kwargs):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
"\n"
">>> str(sig)\n"
"'(a, *, b: int, **kwargs)'\n"
"\n"
">>> str(sig.parameters['b'])\n"
"'b: int'\n"
"\n"
">>> sig.parameters['b'].annotation\n"
"<class 'int'>"

msgid ""
"Accepts a wide range of Python callables, from plain functions and classes "
"to :func:`functools.partial` objects."
msgstr ""
"Accepterar ett brett utbud av Python-kallbara, från vanliga funktioner och "
"klasser till :func:`functools.partial`-objekt."

msgid ""
"If some of the annotations are strings (e.g., because ``from __future__ "
"import annotations`` was used), :func:`signature` will attempt to "
"automatically un-stringize the annotations using :func:`annotationlib."
"get_annotations`.  The *globals*, *locals*, and *eval_str* parameters are "
"passed into :func:`!annotationlib.get_annotations` when resolving the "
"annotations; see the documentation for :func:`!annotationlib."
"get_annotations` for instructions on how to use these parameters. A member "
"of the :class:`annotationlib.Format` enum can be passed to the "
"*annotation_format* parameter to control the format of the returned "
"annotations. For example, use ``annotation_format=annotationlib.Format."
"STRING`` to return annotations in string format."
msgstr ""
"Om några av anteckningarna är strängar (t.ex. för att ``from __future__ "
"import annotations`` användes), kommer :func:`signature` att försöka att "
"automatiskt avstränga anteckningarna med hjälp av :func:`annotationlib."
"get_annotations`.  Parametrarna *globals*, *locals* och *eval_str* skickas "
"till :func:`!annotationlib.get_annotations` när anteckningarna löses upp; se "
"dokumentationen för :func:`!annotationlib.get_annotations` för instruktioner "
"om hur dessa parametrar används. En medlem i enum :class:`annotationlib."
"Format` kan skickas till parametern *annotation_format* för att styra "
"formatet på de returnerade anteckningarna. Använd t.ex. "
"``annotation_format=annotationlib.Format.STRING`` för att returnera "
"anteckningar i strängformat."

msgid ""
"Raises :exc:`ValueError` if no signature can be provided, and :exc:"
"`TypeError` if that type of object is not supported.  Also, if the "
"annotations are stringized, and *eval_str* is not false, the ``eval()`` "
"call(s) to un-stringize the annotations in :func:`annotationlib."
"get_annotations` could potentially raise any kind of exception."
msgstr ""
"Utlöser :exc:`ValueError` om ingen signatur kan anges, och :exc:`TypeError` "
"om den typen av objekt inte stöds.  Om anteckningarna är strängade och "
"*eval_str* inte är false, kan dessutom ``eval()``-anropen för att avstränga "
"anteckningarna i :func:`annotationlib.get_annotations` potentiellt ge upphov "
"till alla typer av undantag."

msgid ""
"A slash (/) in the signature of a function denotes that the parameters prior "
"to it are positional-only. For more info, see :ref:`the FAQ entry on "
"positional-only parameters <faq-positional-only-arguments>`."
msgstr ""
"Ett snedstreck (/) i signaturen för en funktion anger att parametrarna före "
"den är endast positionella. För mer information, se :ref:`` FAQ-posten om "
"parametrar som endast är positionella <faq-positional-only-arguments>`."

msgid ""
"The *follow_wrapped* parameter was added. Pass ``False`` to get a signature "
"of *callable* specifically (``callable.__wrapped__`` will not be used to "
"unwrap decorated callables.)"
msgstr ""
"Parametern *follow_wrapped* har lagts till. Passera ``False`` för att få en "
"signatur av *callable* specifikt (``callable.__wrapped__`` kommer inte att "
"användas för att packa upp dekorerade callables)"

msgid "The *globals*, *locals*, and *eval_str* parameters were added."
msgstr "Parametrarna *globals*, *locals* och *eval_str* har lagts till."

msgid "The *annotation_format* parameter was added."
msgstr "Parametern *annotation_format* har lagts till."

msgid ""
"Some callables may not be introspectable in certain implementations of "
"Python.  For example, in CPython, some built-in functions defined in C "
"provide no metadata about their arguments."
msgstr ""
"Vissa callables kanske inte är introspekterbara i vissa implementationer av "
"Python.  I CPython tillhandahåller till exempel vissa inbyggda funktioner "
"som definieras i C inga metadata om sina argument."

msgid ""
"If the passed object has a :attr:`!__signature__` attribute, we may use it "
"to create the signature. The exact semantics are an implementation detail "
"and are subject to unannounced changes. Consult the source code for current "
"semantics."
msgstr ""
"Om det objekt som skickas har ett attribut :attr:`!__signature__` kan vi "
"använda det för att skapa signaturen. Den exakta semantiken är en "
"implementationsdetalj och kan komma att ändras utan förvarning. Se källkoden "
"för aktuell semantik."

msgid ""
"A :class:`!Signature` object represents the call signature of a function and "
"its return annotation.  For each parameter accepted by the function it "
"stores a :class:`Parameter` object in its :attr:`parameters` collection."
msgstr ""
"Ett :class:`!Signature`-objekt representerar anropssignaturen för en "
"funktion och dess returannotation.  För varje parameter som accepteras av "
"funktionen lagras ett :class:`Parameter`-objekt i dess :attr:`parameters`-"
"samling."

msgid ""
"The optional *parameters* argument is a sequence of :class:`Parameter` "
"objects, which is validated to check that there are no parameters with "
"duplicate names, and that the parameters are in the right order, i.e. "
"positional-only first, then positional-or-keyword, and that parameters with "
"defaults follow parameters without defaults."
msgstr ""
"Det valfria argumentet *parameters* är en sekvens av :class:`Parameter`-"
"objekt, som valideras för att kontrollera att det inte finns några "
"parametrar med duplicerade namn, och att parametrarna är i rätt ordning, "
"dvs. först positional-only, sedan positional-or-keyword, och att parametrar "
"med standardvärden följer parametrar utan standardvärden."

msgid ""
"The optional *return_annotation* argument can be an arbitrary Python object. "
"It represents the \"return\" annotation of the callable."
msgstr ""
"Det valfria *return_annotation*-argumentet kan vara ett godtyckligt Python-"
"objekt. Det representerar \"return\"-annoteringen för den anropbara "
"funktionen."

msgid ""
":class:`!Signature` objects are *immutable*.  Use :meth:`Signature.replace` "
"or :func:`copy.replace` to make a modified copy."
msgstr ""
":class:`!Signature`-objekt är *föränderliga*.  Använd :meth:`Signature."
"replace` eller :func:`copy.replace` för att göra en modifierad kopia."

msgid ":class:`!Signature` objects are now picklable and :term:`hashable`."
msgstr ":class:`!Signature`-objekt är nu plockbara och :term:`hashable`."

msgid "A special class-level marker to specify absence of a return annotation."
msgstr ""
"En speciell markör på klassnivå för att ange avsaknad av en returannotation."

msgid ""
"An ordered mapping of parameters' names to the corresponding :class:"
"`Parameter` objects.  Parameters appear in strict definition order, "
"including keyword-only parameters."
msgstr ""
"En ordnad mappning av parameternamn till motsvarande :class:`Parameter`-"
"objekt.  Parametrar visas i strikt definitionsordning, inklusive parametrar "
"som endast innehåller nyckelord."

msgid ""
"Python only explicitly guaranteed that it preserved the declaration order of "
"keyword-only parameters as of version 3.7, although in practice this order "
"had always been preserved in Python 3."
msgstr ""
"Python garanterade endast uttryckligen att deklarationsordningen för "
"parametrar som endast innehåller nyckelord skulle bevaras från och med "
"version 3.7, även om denna ordning i praktiken alltid hade bevarats i Python "
"3."

msgid ""
"The \"return\" annotation for the callable.  If the callable has no "
"\"return\" annotation, this attribute is set to :attr:`Signature.empty`."
msgstr ""
"\"Return\"-annoteringen för den anropbara funktionen.  Om anropsbarheten "
"inte har någon \"return\"-annotation, sätts detta attribut till :attr:"
"`Signature.empty`."

msgid ""
"Create a mapping from positional and keyword arguments to parameters. "
"Returns :class:`BoundArguments` if ``*args`` and ``**kwargs`` match the "
"signature, or raises a :exc:`TypeError`."
msgstr ""
"Skapar en mappning från positions- och nyckelordsargument till parametrar. "
"Returnerar :class:`BoundArguments` om ``*args`` och ``**kwargs`` matchar "
"signaturen, eller ger upphov till ett :exc:`TypeError`."

msgid ""
"Works the same way as :meth:`Signature.bind`, but allows the omission of "
"some required arguments (mimics :func:`functools.partial` behavior.) "
"Returns :class:`BoundArguments`, or raises a :exc:`TypeError` if the passed "
"arguments do not match the signature."
msgstr ""
"Fungerar på samma sätt som :meth:`Signature.bind`, men tillåter utelämnande "
"av vissa nödvändiga argument (efterliknar :func:`functools.partial` "
"beteende.) Returnerar :class:`BoundArguments`, eller ger upphov till ett :"
"exc:`TypeError` om de passerade argumenten inte matchar signaturen."

msgid ""
"Create a new :class:`Signature` instance based on the instance :meth:"
"`replace` was invoked on. It is possible to pass different *parameters* and/"
"or *return_annotation* to override the corresponding properties of the base "
"signature.  To remove ``return_annotation`` from the copied :class:`!"
"Signature`, pass in :attr:`Signature.empty`."
msgstr ""
"Skapar en ny :class:`Signature`-instans baserat på den instans som :meth:"
"`replace` anropades på. Det är möjligt att skicka olika *parametrar* och/"
"eller *return_annotation* för att åsidosätta motsvarande egenskaper hos "
"bassignaturen.  För att ta bort ``return_annotation`` från den kopierade :"
"class:`!Signature`, skicka in :attr:`Signature.empty`."

msgid ""
">>> def test(a, b):\n"
"...     pass\n"
"...\n"
">>> sig = signature(test)\n"
">>> new_sig = sig.replace(return_annotation=\"new return anno\")\n"
">>> str(new_sig)\n"
"\"(a, b) -> 'new return anno'\""
msgstr ""
">>> def test(a, b):\n"
"...     pass\n"
"...\n"
">>> sig = signature(test)\n"
">>> new_sig = sig.replace(return_annotation=\"new return anno\")\n"
">>> str(new_sig)\n"
"\"(a, b) -> 'new return anno'\""

msgid ""
":class:`Signature` objects are also supported by the generic function :func:"
"`copy.replace`."
msgstr ""
":class:`Signature`-objekt stöds också av den generiska funktionen :func:"
"`copy.replace`."

msgid "Create a string representation of the :class:`Signature` object."
msgstr "Skapa en strängrepresentation av objektet :class:`Signature`."

msgid ""
"If *max_width* is passed, the method will attempt to fit the signature into "
"lines of at most *max_width* characters. If the signature is longer than "
"*max_width*, all parameters will be on separate lines."
msgstr ""
"Om *max_width* anges kommer metoden att försöka passa in signaturen på rader "
"med högst *max_width* tecken. Om signaturen är längre än *max_width* kommer "
"alla parametrar att stå på separata rader."

msgid ""
"If *quote_annotation_strings* is False, :term:`annotations <annotation>` in "
"the signature are displayed without opening and closing quotation marks if "
"they are strings. This is useful if the signature was created with the :attr:"
"`~annotationlib.Format.STRING` format or if ``from __future__ import "
"annotations`` was used."
msgstr ""
"Om *quote_annotation_strings* är False visas :term:`annotations "
"<annotation>` i signaturen utan inledande och avslutande citattecken om de "
"är strängar. Detta är användbart om signaturen skapades med formatet :attr:"
"`~annotationlib.Format.STRING` eller om ``from __future__ import "
"annotations`` användes."

msgid "The *unquote_annotations* parameter was added."
msgstr "Parametern *unquote_annotations* har lagts till."

msgid ""
"Return a :class:`Signature` (or its subclass) object for a given callable "
"*obj*."
msgstr ""
"Returnera ett :class:`Signature`-objekt (eller dess underklass) för en given "
"anropbar *obj*."

msgid "This method simplifies subclassing of :class:`Signature`:"
msgstr "Denna metod förenklar underklassning av :class:`Signature`:"

msgid ""
"class MySignature(Signature):\n"
"    pass\n"
"sig = MySignature.from_callable(sum)\n"
"assert isinstance(sig, MySignature)"
msgstr ""
"class MySignature(Signature):\n"
"    pass\n"
"sig = MySignature.from_callable(sum)\n"
"assert isinstance(sig, MySignature)"

msgid "Its behavior is otherwise identical to that of :func:`signature`."
msgstr "Dess beteende är i övrigt identiskt med det för :func:`signature`."

msgid ""
":class:`!Parameter` objects are *immutable*. Instead of modifying a :class:`!"
"Parameter` object, you can use :meth:`Parameter.replace` or :func:`copy."
"replace` to create a modified copy."
msgstr ""
":class:`!Parameter`-objekt är *föränderliga*. Istället för att modifiera "
"ett :class:`!Parameter`-objekt kan du använda :meth:`Parameter.replace` "
"eller :func:`copy.replace` för att skapa en modifierad kopia."

msgid "Parameter objects are now picklable and :term:`hashable`."
msgstr "Parameterobjekt är nu picklbara och :term:`hashable`."

msgid ""
"A special class-level marker to specify absence of default values and "
"annotations."
msgstr ""
"En särskild markör på klassnivå för att ange avsaknad av standardvärden och "
"annoteringar."

msgid ""
"The name of the parameter as a string.  The name must be a valid Python "
"identifier."
msgstr ""
"Namnet på parametern som en sträng.  Namnet måste vara en giltig Python-"
"identifierare."

msgid ""
"CPython generates implicit parameter names of the form ``.0`` on the code "
"objects used to implement comprehensions and generator expressions."
msgstr ""
"CPython genererar implicita parameternamn av formen ``.0`` på de kodobjekt "
"som används för att implementera förståelser och generatoruttryck."

msgid ""
"These parameter names are now exposed by this module as names like "
"``implicit0``."
msgstr ""
"Dessa parameternamn exponeras nu av denna modul som namn som ``implicit0``."

msgid ""
"The default value for the parameter.  If the parameter has no default value, "
"this attribute is set to :attr:`Parameter.empty`."
msgstr ""
"Standardvärdet för parametern.  Om parametern inte har något standardvärde, "
"sätts detta attribut till :attr:`Parameter.empty`."

msgid ""
"The annotation for the parameter.  If the parameter has no annotation, this "
"attribute is set to :attr:`Parameter.empty`."
msgstr ""
"Annotationen för parametern.  Om parametern inte har någon annotation, sätts "
"detta attribut till :attr:`Parameter.empty`."

msgid ""
"Describes how argument values are bound to the parameter.  The possible "
"values are accessible via :class:`Parameter` (like ``Parameter."
"KEYWORD_ONLY``), and support comparison and ordering, in the following order:"
msgstr ""
"Beskriver hur argumentvärden binds till parametern.  De möjliga värdena är "
"tillgängliga via :class:`Parameter` (som ``Parameter.KEYWORD_ONLY``), och "
"stöder jämförelse och ordning, i följande ordning:"

msgid "Name"
msgstr "Namn"

msgid "Meaning"
msgstr "Betydelse"

msgid "*POSITIONAL_ONLY*"
msgstr "*POSITIONAL_ONLY*"

msgid ""
"Value must be supplied as a positional argument. Positional only parameters "
"are those which appear before a ``/`` entry (if present) in a Python "
"function definition."
msgstr ""
"Värdet måste anges som ett positionellt argument. Endast positionella "
"parametrar är de som visas före en ``/``-post (om sådan finns) i en Python-"
"funktionsdefinition."

msgid "*POSITIONAL_OR_KEYWORD*"
msgstr "*POSITIONAL_OR_KEYWORD*"

msgid ""
"Value may be supplied as either a keyword or positional argument (this is "
"the standard binding behaviour for functions implemented in Python.)"
msgstr ""
"Värdet kan anges som antingen ett nyckelord eller ett positionellt argument "
"(detta är standardbindningsbeteendet för funktioner som implementeras i "
"Python)"

msgid "*VAR_POSITIONAL*"
msgstr "*VAR_POSITIONAL*"

msgid ""
"A tuple of positional arguments that aren't bound to any other parameter. "
"This corresponds to a ``*args`` parameter in a Python function definition."
msgstr ""
"En tupel av positionella argument som inte är bundna till någon annan "
"parameter. Detta motsvarar en ``*args``-parameter i en Python-"
"funktionsdefinition."

msgid "*KEYWORD_ONLY*"
msgstr "*KEYWORD_ONLY*"

msgid ""
"Value must be supplied as a keyword argument. Keyword only parameters are "
"those which appear after a ``*`` or ``*args`` entry in a Python function "
"definition."
msgstr ""
"Värdet måste anges som ett nyckelordsargument. Parametrar som endast "
"innehåller nyckelord är de som visas efter en ``*`` eller ``*args`` post i "
"en Python-funktionsdefinition."

msgid "*VAR_KEYWORD*"
msgstr "*VAR_KEYWORD*"

msgid ""
"A dict of keyword arguments that aren't bound to any other parameter. This "
"corresponds to a ``**kwargs`` parameter in a Python function definition."
msgstr ""
"Ett dict med nyckelordsargument som inte är bundna till någon annan "
"parameter. Detta motsvarar en ``**kwargs``-parameter i en Python-"
"funktionsdefinition."

msgid "Example: print all keyword-only arguments without default values:"
msgstr ""
"Exempel: Skriv ut alla argument som bara innehåller nyckelord utan "
"standardvärden:"

msgid ""
">>> def foo(a, b, *, c, d=10):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
">>> for param in sig.parameters.values():\n"
"...     if (param.kind == param.KEYWORD_ONLY and\n"
"...                        param.default is param.empty):\n"
"...         print('Parameter:', param)\n"
"Parameter: c"
msgstr ""
">>> def foo(a, b, *, c, d=10):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
">>> for param in sig.parameters.values():\n"
"...     if (param.kind == param.KEYWORD_ONLY and\n"
"...                        param.default is param.empty):\n"
"...         print('Parameter:', param)\n"
"Parameter: c"

msgid "Describes an enum value of :attr:`Parameter.kind`."
msgstr "Beskriver ett enumvärde av :attr:`Parameter.kind`."

msgid "Example: print all descriptions of arguments:"
msgstr "Exempel: Skriv ut alla beskrivningar av argument:"

msgid ""
">>> def foo(a, b, *, c, d=10):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
">>> for param in sig.parameters.values():\n"
"...     print(param.kind.description)\n"
"positional or keyword\n"
"positional or keyword\n"
"keyword-only\n"
"keyword-only"
msgstr ""
">>> def foo(a, b, *, c, d=10):\n"
"...     pass\n"
"\n"
">>> sig = signature(foo)\n"
">>> for param in sig.parameters.values():\n"
"...     print(param.kind.description)\n"
"positional or keyword\n"
"positional or keyword\n"
"keyword-only\n"
"keyword-only"

msgid ""
"Create a new :class:`Parameter` instance based on the instance replaced was "
"invoked on.  To override a :class:`!Parameter` attribute, pass the "
"corresponding argument.  To remove a default value or/and an annotation from "
"a :class:`!Parameter`, pass :attr:`Parameter.empty`."
msgstr ""
"Skapar en ny :class:`Parameter`-instans baserat på den instans som replaced "
"anropades på.  För att åsidosätta ett :class:`!Parameter`-attribut, skicka "
"motsvarande argument.  För att ta bort ett standardvärde eller/och en "
"annotering från en :class:`!Parameter`, skicka :attr:`Parameter.empty`."

msgid ""
">>> from inspect import Parameter\n"
">>> param = Parameter('foo', Parameter.KEYWORD_ONLY, default=42)\n"
">>> str(param)\n"
"'foo=42'\n"
"\n"
">>> str(param.replace()) # Will create a shallow copy of 'param'\n"
"'foo=42'\n"
"\n"
">>> str(param.replace(default=Parameter.empty, annotation='spam'))\n"
"\"foo: 'spam'\""
msgstr ""
">>> from inspect import Parameter\n"
">>> param = Parameter('foo', Parameter.KEYWORD_ONLY, default=42)\n"
">>> str(param)\n"
"'foo=42'\n"
"\n"
">>> str(param.replace()) # Will create a shallow copy of 'param'\n"
"'foo=42'\n"
"\n"
">>> str(param.replace(default=Parameter.empty, annotation='spam'))\n"
"\"foo: 'spam'\""

msgid ""
":class:`Parameter` objects are also supported by the generic function :func:"
"`copy.replace`."
msgstr ""
":class:`Parameter`-objekt stöds också av den generiska funktionen :func:"
"`copy.replace`."

msgid ""
"In Python 3.3 :class:`Parameter` objects were allowed to have ``name`` set "
"to ``None`` if their ``kind`` was set to ``POSITIONAL_ONLY``. This is no "
"longer permitted."
msgstr ""
"I Python 3.3 tilläts :class:`Parameter`-objekt att ha ``name`` satt till "
"``None`` om deras ``kind`` var satt till ``POSITIONAL_ONLY``. Detta är inte "
"längre tillåtet."

msgid ""
"Result of a :meth:`Signature.bind` or :meth:`Signature.bind_partial` call. "
"Holds the mapping of arguments to the function's parameters."
msgstr ""
"Resultatet av ett anrop av :meth:`Signature.bind` eller :meth:`Signature."
"bind_partial`. Innehåller mappningen av argument till funktionens parametrar."

msgid ""
"A mutable mapping of parameters' names to arguments' values. Contains only "
"explicitly bound arguments.  Changes in :attr:`arguments` will reflect in :"
"attr:`args` and :attr:`kwargs`."
msgstr ""
"En föränderlig mappning av parameternamn till argumentvärden. Innehåller "
"endast explicit bundna argument.  Ändringar i :attr:`arguments` kommer att "
"återspeglas i :attr:`args` och :attr:`kwargs`."

msgid ""
"Should be used in conjunction with :attr:`Signature.parameters` for any "
"argument processing purposes."
msgstr ""
"Bör användas tillsammans med :attr:`Signature.parameters` för eventuell "
"bearbetning av argument."

msgid ""
"Arguments for which :meth:`Signature.bind` or :meth:`Signature.bind_partial` "
"relied on a default value are skipped. However, if needed, use :meth:"
"`BoundArguments.apply_defaults` to add them."
msgstr ""
"Argument för vilka :meth:`Signature.bind` eller :meth:`Signature."
"bind_partial` förlitade sig på ett standardvärde hoppas över. Om det behövs "
"kan du dock använda :meth:`BoundArguments.apply_defaults` för att lägga till "
"dem."

msgid ""
":attr:`arguments` is now of type :class:`dict`. Formerly, it was of type :"
"class:`collections.OrderedDict`."
msgstr ""
":attr:`arguments` är nu av typen :class:`dict`. Tidigare var den av typen :"
"class:`collections.OrderedDict`."

msgid ""
"A tuple of positional arguments values.  Dynamically computed from the :attr:"
"`arguments` attribute."
msgstr ""
"En tupel av positionella argumentvärden.  Dynamiskt beräknad från "
"attributet :attr:`arguments`."

msgid ""
"A dict of keyword arguments values.  Dynamically computed from the :attr:"
"`arguments` attribute.  Arguments that can be passed positionally are "
"included in :attr:`args` instead."
msgstr ""
"Ett dict av nyckelordsargumentvärden.  Beräknas dynamiskt från attributet :"
"attr:`arguments`.  Argument som kan skickas positionellt inkluderas i :attr:"
"`args` istället."

msgid "A reference to the parent :class:`Signature` object."
msgstr "En referens till det överordnade :class:`Signature`-objektet."

msgid "Set default values for missing arguments."
msgstr "Ange standardvärden för saknade argument."

msgid ""
"For variable-positional arguments (``*args``) the default is an empty tuple."
msgstr ""
"För variable-positional argument (``*args``) är standardvärdet en tom tupel."

msgid ""
"For variable-keyword arguments (``**kwargs``) the default is an empty dict."
msgstr ""
"För argument med nyckelord för variabler (``**kwargs``) är standardvärdet en "
"tom dict."

msgid ""
">>> def foo(a, b='ham', *args): pass\n"
">>> ba = inspect.signature(foo).bind('spam')\n"
">>> ba.apply_defaults()\n"
">>> ba.arguments\n"
"{'a': 'spam', 'b': 'ham', 'args': ()}"
msgstr ""
">>> def foo(a, b='ham', *args): pass\n"
">>> ba = inspect.signature(foo).bind('spam')\n"
">>> ba.apply_defaults()\n"
">>> ba.arguments\n"
"{'a': 'spam', 'b': 'ham', 'args': ()}"

msgid ""
"The :attr:`args` and :attr:`kwargs` properties can be used to invoke "
"functions:"
msgstr ""
"Egenskaperna :attr:`args` och :attr:`kwargs` kan användas för att anropa "
"funktioner:"

msgid ""
"def test(a, *, b):\n"
"    ...\n"
"\n"
"sig = signature(test)\n"
"ba = sig.bind(10, b=20)\n"
"test(*ba.args, **ba.kwargs)"
msgstr ""
"def test(a, *, b):\n"
"    ...\n"
"\n"
"sig = signature(test)\n"
"ba = sig.bind(10, b=20)\n"
"test(*ba.args, **ba.kwargs)"

msgid ":pep:`362` - Function Signature Object."
msgstr ":pep:`362` - Funktion Signatur Objekt."

msgid "The detailed specification, implementation details and examples."
msgstr "Den detaljerade specifikationen, implementeringsdetaljer och exempel."

msgid "Classes and functions"
msgstr "Klasser och funktioner"

msgid ""
"Arrange the given list of classes into a hierarchy of nested lists. Where a "
"nested list appears, it contains classes derived from the class whose entry "
"immediately precedes the list.  Each entry is a 2-tuple containing a class "
"and a tuple of its base classes.  If the *unique* argument is true, exactly "
"one entry appears in the returned structure for each class in the given "
"list.  Otherwise, classes using multiple inheritance and their descendants "
"will appear multiple times."
msgstr ""
"Ordna den angivna listan över klasser i en hierarki av nästlade listor. Där "
"en nästlad lista visas innehåller den klasser som härrör från den klass vars "
"post omedelbart föregår listan.  Varje post är en 2-tupel som innehåller en "
"klass och en tupel av dess basklasser.  Om argumentet *unique* är sant, "
"visas exakt en post i den returnerade strukturen för varje klass i den "
"angivna listan.  I annat fall kommer klasser som använder multipel "
"nedärvning och deras ättlingar att visas flera gånger."

msgid ""
"Get the names and default values of a Python function's parameters.  A :term:"
"`named tuple` is returned:"
msgstr ""
"Hämta namn och standardvärden för en Python-funktions parametrar.  En :term:"
"`namngiven tupel` returneras:"

msgid ""
"``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, "
"annotations)``"
msgstr ""
"``FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, "
"annotations)``"

msgid ""
"*args* is a list of the positional parameter names. *varargs* is the name of "
"the ``*`` parameter or ``None`` if arbitrary positional arguments are not "
"accepted. *varkw* is the name of the ``**`` parameter or ``None`` if "
"arbitrary keyword arguments are not accepted. *defaults* is an *n*-tuple of "
"default argument values corresponding to the last *n* positional parameters, "
"or ``None`` if there are no such defaults defined. *kwonlyargs* is a list of "
"keyword-only parameter names in declaration order. *kwonlydefaults* is a "
"dictionary mapping parameter names from *kwonlyargs* to the default values "
"used if no argument is supplied. *annotations* is a dictionary mapping "
"parameter names to annotations. The special key ``\"return\"`` is used to "
"report the function return value annotation (if any)."
msgstr ""
"*args* är en lista med namn på positionella parametrar. *varargs* är namnet "
"på parametern ``*`` eller ``None`` om godtyckliga positionella argument inte "
"accepteras. *varkw* är namnet på parametern ``**`` eller ``None`` om "
"godtyckliga nyckelordsargument inte accepteras. *defaults* är en *n*-tupel "
"av standardargumentvärden som motsvarar de sista *n* positionella "
"parametrarna, eller ``None`` om inga sådana standardvärden har definierats. "
"*kwonlyargs* är en lista med parameternamn som endast innehåller nyckelord i "
"deklarationsordning. *kwonlydefaults* är en ordbok som mappar parameternamn "
"från *kwonlyargs* till de standardvärden som används om inget argument "
"anges. *annotations* är en ordbok som mappar parameternamn till annotations. "
"Den speciella nyckeln ``\"return\"`` används för att rapportera funktionens "
"returvärde (om någon)."

msgid ""
"Note that :func:`signature` and :ref:`Signature Object <inspect-signature-"
"object>` provide the recommended API for callable introspection, and support "
"additional behaviours (like positional-only arguments) that are sometimes "
"encountered in extension module APIs. This function is retained primarily "
"for use in code that needs to maintain compatibility with the Python 2 "
"``inspect`` module API."
msgstr ""
"Notera att :func:`signature` och :ref:`Signature Object <inspect-signature-"
"object>` tillhandahåller det rekommenderade API:et för anropsbar "
"introspektion och stödjer ytterligare beteenden (som enbart positionella "
"argument) som ibland påträffas i API:er för tilläggsmoduler. Denna funktion "
"behålls främst för användning i kod som behöver upprätthålla kompatibilitet "
"med Python 2 ``inspect`` modul API."

msgid ""
"This function is now based on :func:`signature`, but still ignores "
"``__wrapped__`` attributes and includes the already bound first parameter in "
"the signature output for bound methods."
msgstr ""
"Denna funktion är nu baserad på :func:`signature`, men ignorerar fortfarande "
"``__wrapped__``-attribut och inkluderar den redan bundna första parametern i "
"signaturutmatningen för bundna metoder."

msgid ""
"This method was previously documented as deprecated in favour of :func:"
"`signature` in Python 3.5, but that decision has been reversed in order to "
"restore a clearly supported standard interface for single-source Python 2/3 "
"code migrating away from the legacy :func:`getargspec` API."
msgstr ""
"Denna metod var tidigare dokumenterad som utfasad till förmån för :func:"
"`signature` i Python 3.5, men det beslutet har återtagits för att återställa "
"ett tydligt standardgränssnitt för Python 2/3-kod med en enda källa som "
"migrerar bort från det äldre :func:`getargspec` API."

msgid ""
"Get information about arguments passed into a particular frame.  A :term:"
"`named tuple` ``ArgInfo(args, varargs, keywords, locals)`` is returned. "
"*args* is a list of the argument names.  *varargs* and *keywords* are the "
"names of the ``*`` and ``**`` arguments or ``None``.  *locals* is the locals "
"dictionary of the given frame."
msgstr ""
"Hämta information om argument som skickas in i en viss frame.  En :term:"
"`named tuple` ``ArgInfo(args, varargs, keywords, locals)`` returneras. "
"*args* är en lista över argumentens namn.  *varargs* och *keywords* är "
"namnen på argumenten ``*`` och ``**`` eller ``None``.  *locals* är locals-"
"ordlistan för den givna ramen."

msgid "This function was inadvertently marked as deprecated in Python 3.5."
msgstr "Denna funktion markerades oavsiktligt som föråldrad i Python 3.5."

msgid ""
"Format a pretty argument spec from the four values returned by :func:"
"`getargvalues`.  The format\\* arguments are the corresponding optional "
"formatting functions that are called to turn names and values into strings."
msgstr ""
"Formaterar en vacker argumentspecifikation från de fyra värden som "
"returneras av :func:`getargvalues`.  Argumenten format\\* är motsvarande "
"valfria formateringsfunktioner som anropas för att omvandla namn och värden "
"till strängar."

msgid ""
"Return a tuple of class cls's base classes, including cls, in method "
"resolution order.  No class appears more than once in this tuple. Note that "
"the method resolution order depends on cls's type.  Unless a very peculiar "
"user-defined metatype is in use, cls will be the first element of the tuple."
msgstr ""
"Returnerar en tupel av klass cls basklasser, inklusive cls, i "
"metodupplösningsordning.  Ingen klass förekommer mer än en gång i denna "
"tupel. Observera att metodupplösningsordningen beror på cls:s typ.  Om inte "
"en mycket märklig användardefinierad metatyp används, kommer cls att vara "
"det första elementet i tupeln."

msgid ""
"Bind the *args* and *kwds* to the argument names of the Python function or "
"method *func*, as if it was called with them. For bound methods, bind also "
"the first argument (typically named ``self``) to the associated instance. A "
"dict is returned, mapping the argument names (including the names of the "
"``*`` and ``**`` arguments, if any) to their values from *args* and *kwds*. "
"In case of invoking *func* incorrectly, i.e. whenever ``func(*args, "
"**kwds)`` would raise an exception because of incompatible signature, an "
"exception of the same type and the same or similar message is raised. For "
"example:"
msgstr ""
"Bind *args* och *kwds* till argumentnamnen i Python-funktionen eller -"
"metoden *func*, som om den anropades med dem. För bundna metoder binds även "
"det första argumentet (vanligtvis kallat ``self``) till den associerade "
"instansen. En dict returneras, som mappar argumentnamnen (inklusive namnen "
"på argumenten ``*`` och ``**``, om sådana finns) till deras värden från "
"*args* och *kwds*. Om *func* anropas på fel sätt, dvs. när ``func(*args, "
"**kwds)`` skulle ge upphov till ett undantag på grund av inkompatibel "
"signatur, ges ett undantag av samma typ och med samma eller liknande "
"meddelande. Ett exempel:"

msgid ""
">>> from inspect import getcallargs\n"
">>> def f(a, b=1, *pos, **named):\n"
"...     pass\n"
"...\n"
">>> getcallargs(f, 1, 2, 3) == {'a': 1, 'named': {}, 'b': 2, 'pos': (3,)}\n"
"True\n"
">>> getcallargs(f, a=2, x=4) == {'a': 2, 'named': {'x': 4}, 'b': 1, 'pos': "
"()}\n"
"True\n"
">>> getcallargs(f)\n"
"Traceback (most recent call last):\n"
"...\n"
"TypeError: f() missing 1 required positional argument: 'a'"
msgstr ""
">>> from inspect import getcallargs\n"
">>> def f(a, b=1, *pos, **named):\n"
"...     pass\n"
"...\n"
">>> getcallargs(f, 1, 2, 3) == {'a': 1, 'named': {}, 'b': 2, 'pos': (3,)}\n"
"True\n"
">>> getcallargs(f, a=2, x=4) == {'a': 2, 'named': {'x': 4}, 'b': 1, 'pos': "
"()}\n"
"True\n"
">>> getcallargs(f)\n"
"Traceback (most recent call last):\n"
"...\n"
"TypeError: f() missing 1 required positional argument: 'a'"

msgid "Use :meth:`Signature.bind` and :meth:`Signature.bind_partial` instead."
msgstr ""
"Använd :meth:`Signature.bind` och :meth:`Signature.bind_partial` istället."

msgid ""
"Get the mapping of external name references in a Python function or method "
"*func* to their current values. A :term:`named tuple` "
"``ClosureVars(nonlocals, globals, builtins, unbound)`` is returned. "
"*nonlocals* maps referenced names to lexical closure variables, *globals* to "
"the function's module globals and *builtins* to the builtins visible from "
"the function body. *unbound* is the set of names referenced in the function "
"that could not be resolved at all given the current module globals and "
"builtins."
msgstr ""
"Hämta mappningen av externa namnreferenser i en Python-funktion eller -metod "
"*func* till deras aktuella värden. En :term:`named tuple` "
"``ClosureVars(nonlocals, globals, builtins, unbound)`` returneras. "
"*nonlocals* mappar refererade namn till lexikala stängningsvariabler, "
"*globals* till funktionens modulglobaler och *builtins* till de builtins som "
"är synliga från funktionens kropp. *unbound* är den uppsättning namn som "
"refereras till i funktionen och som inte kunde lösas alls med tanke på de "
"aktuella modulglobalerna och builtins."

msgid ""
":exc:`TypeError` is raised if *func* is not a Python function or method."
msgstr ""
":exc:`TypeError` uppstår om *func* inte är en Python-funktion eller -metod."

msgid ""
"Get the object wrapped by *func*. It follows the chain of :attr:"
"`__wrapped__` attributes returning the last object in the chain."
msgstr ""
"Hämta objektet som är inlindat av *func*. Den följer kedjan av :attr:"
"`__wrapped__`-attribut och returnerar det sista objektet i kedjan."

msgid ""
"*stop* is an optional callback accepting an object in the wrapper chain as "
"its sole argument that allows the unwrapping to be terminated early if the "
"callback returns a true value. If the callback never returns a true value, "
"the last object in the chain is returned as usual. For example, :func:"
"`signature` uses this to stop unwrapping if any object in the chain has a "
"``__signature__`` attribute defined."
msgstr ""
"*stop* är en valfri callback som accepterar ett objekt i omslagskedjan som "
"sitt enda argument och som gör att uppackningen kan avslutas i förtid om "
"callbacken returnerar ett sant värde. Om callbacken aldrig returnerar ett "
"sant värde returneras det sista objektet i kedjan som vanligt. Till exempel "
"använder :func:`signature` detta för att stoppa uppackningen om något objekt "
"i kedjan har ett ``__signature__``-attribut definierat."

msgid ":exc:`ValueError` is raised if a cycle is encountered."
msgstr ":exc:`ValueError` utlöses om en cykel påträffas."

msgid "Compute the annotations dict for an object."
msgstr "Beräkna annoteringsdikten för ett objekt."

msgid ""
"This is an alias for :func:`annotationlib.get_annotations`; see the "
"documentation of that function for more information."
msgstr ""
"Detta är ett alias för :func:`annotationlib.get_annotations`; se "
"dokumentationen för den funktionen för mer information."

msgid ""
"This function is now an alias for :func:`annotationlib.get_annotations`. "
"Calling it as ``inspect.get_annotations`` will continue to work."
msgstr ""
"Den här funktionen är nu ett alias för :func:`annotationlib."
"get_annotations`. Att anropa den som ``inspect.get_annotations`` kommer att "
"fortsätta att fungera."

msgid "The interpreter stack"
msgstr "Tolkens stack"

msgid ""
"Some of the following functions return :class:`FrameInfo` objects. For "
"backwards compatibility these objects allow tuple-like operations on all "
"attributes except ``positions``. This behavior is considered deprecated and "
"may be removed in the future."
msgstr ""
"Några av följande funktioner returnerar :class:`FrameInfo`-objekt. För "
"bakåtkompatibilitet tillåter dessa objekt tuple-liknande operationer på alla "
"attribut utom ``positions``. Detta beteende anses vara föråldrat och kan "
"komma att tas bort i framtiden."

msgid "The :ref:`frame object <frame-objects>` that the record corresponds to."
msgstr "Den :ref:`ramobjekt <frame-objects>` som posten motsvarar."

msgid ""
"The file name associated with the code being executed by the frame this "
"record corresponds to."
msgstr ""
"Filnamnet som associeras med den kod som körs av den ram som denna post "
"motsvarar."

msgid ""
"The line number of the current line associated with the code being executed "
"by the frame this record corresponds to."
msgstr ""
"Radnumret på den aktuella raden som är kopplad till den kod som körs av den "
"ram som denna post motsvarar."

msgid ""
"The function name that is being executed by the frame this record "
"corresponds to."
msgstr "Namnet på den funktion som utförs av den ram som denna post motsvarar."

msgid ""
"A list of lines of context from the source code that's being executed by the "
"frame this record corresponds to."
msgstr ""
"En lista med kontextrader från källkoden som exekveras av den ram som den "
"här posten motsvarar."

msgid ""
"The index of the current line being executed in the :attr:`code_context` "
"list."
msgstr "Index för den aktuella raden som körs i listan :attr:`code_context`."

msgid ""
"A :class:`dis.Positions` object containing the start line number, end line "
"number, start column offset, and end column offset associated with the "
"instruction being executed by the frame this record corresponds to."
msgstr ""
"Ett :class:`dis.Positions`-objekt som innehåller startradenummer, "
"slutradenummer, startkolumnförskjutning och slutkolumnförskjutning som är "
"associerade med den instruktion som utförs av den ram som denna post "
"motsvarar."

msgid "Return a :term:`named tuple` instead of a :class:`tuple`."
msgstr "Returnera en :term:`named tuple` istället för en :class:`tuple`."

msgid ""
":class:`!FrameInfo` is now a class instance (that is backwards compatible "
"with the previous :term:`named tuple`)."
msgstr ""
":class:`!FrameInfo` är nu en klassinstans (som är bakåtkompatibel med den "
"tidigare :term:`named tuple`)."

msgid ""
"The file name associated with the code being executed by the frame this "
"traceback corresponds to."
msgstr ""
"Filnamnet som är associerat med koden som körs av den ram som denna "
"traceback motsvarar."

msgid ""
"The line number of the current line associated with the code being executed "
"by the frame this traceback corresponds to."
msgstr ""
"Radnumret för den aktuella raden som är kopplad till den kod som körs av den "
"ram som denna traceback motsvarar."

msgid ""
"The function name that is being executed by the frame this traceback "
"corresponds to."
msgstr ""
"Funktionsnamnet som exekveras av den ram som denna traceback motsvarar."

msgid ""
"A list of lines of context from the source code that's being executed by the "
"frame this traceback corresponds to."
msgstr ""
"En lista med kontextrader från källkoden som exekveras av den ram som denna "
"traceback motsvarar."

msgid ""
"A :class:`dis.Positions` object containing the start line number, end line "
"number, start column offset, and end column offset associated with the "
"instruction being executed by the frame this traceback corresponds to."
msgstr ""
"Ett :class:`dis.Positions`-objekt som innehåller startradnummer, "
"slutradnummer, startkolumnförskjutning och slutkolumnförskjutning som är "
"associerade med den instruktion som utförs av den ram som denna traceback "
"motsvarar."

msgid ""
":class:`!Traceback` is now a class instance (that is backwards compatible "
"with the previous :term:`named tuple`)."
msgstr ""
":class:`!Traceback` är nu en klassinstans (som är bakåtkompatibel med den "
"tidigare :term:`named tuple`)."

msgid ""
"Keeping references to frame objects, as found in the first element of the "
"frame records these functions return, can cause your program to create "
"reference cycles.  Once a reference cycle has been created, the lifespan of "
"all objects which can be accessed from the objects which form the cycle can "
"become much longer even if Python's optional cycle detector is enabled.  If "
"such cycles must be created, it is important to ensure they are explicitly "
"broken to avoid the delayed destruction of objects and increased memory "
"consumption which occurs."
msgstr ""
"Om man behåller referenser till ramobjekt, som finns i det första elementet "
"i de ramposter som dessa funktioner returnerar, kan det leda till att "
"programmet skapar referenscykler.  När en referenscykel har skapats kan "
"livslängden för alla objekt som kan nås från de objekt som bildar cykeln bli "
"mycket längre, även om Pythons valfria cykeldetektor är aktiverad.  Om "
"sådana cykler måste skapas är det viktigt att se till att de uttryckligen "
"bryts för att undvika den fördröjda förstörelsen av objekt och den ökade "
"minnesförbrukning som uppstår."

msgid ""
"Though the cycle detector will catch these, destruction of the frames (and "
"local variables) can be made deterministic by removing the cycle in a :"
"keyword:`finally` clause.  This is also important if the cycle detector was "
"disabled when Python was compiled or using :func:`gc.disable`.  For example::"
msgstr ""
"Även om cykeldetektorn kommer att fånga upp dessa, kan förstörelsen av "
"ramarna (och lokala variabler) göras deterministisk genom att ta bort cykeln "
"i en :keyword:`finally`-sats.  Detta är också viktigt om cykeldetektorn var "
"inaktiverad när Python kompilerades eller med :func:`gc.disable`.  Till "
"exempel::"

msgid ""
"def handle_stackframe_without_leak():\n"
"    frame = inspect.currentframe()\n"
"    try:\n"
"        # do something with the frame\n"
"    finally:\n"
"        del frame"
msgstr ""
"def handle_stackframe_without_leak():\n"
"    frame = inspect.currentframe()\n"
"    try:\n"
"        # do something with the frame\n"
"    finally:\n"
"        del frame"

msgid ""
"If you want to keep the frame around (for example to print a traceback "
"later), you can also break reference cycles by using the :meth:`frame.clear` "
"method."
msgstr ""
"Om du vill behålla ramen (t.ex. för att skriva ut en traceback senare) kan "
"du också bryta referenscykler genom att använda metoden :meth:`frame.clear`."

msgid ""
"The optional *context* argument supported by most of these functions "
"specifies the number of lines of context to return, which are centered "
"around the current line."
msgstr ""
"Det valfria argumentet *context* som stöds av de flesta av dessa funktioner "
"anger antalet rader med kontext som ska returneras, vilka är centrerade runt "
"den aktuella raden."

msgid ""
"Get information about a frame or traceback object.  A :class:`Traceback` "
"object is returned."
msgstr ""
"Hämta information om en ram eller ett traceback-objekt.  Ett :class:"
"`Traceback`-objekt returneras."

msgid "A :class:`Traceback` object is returned instead of a named tuple."
msgstr ""
"Ett :class:`Traceback`-objekt returneras istället för en namngiven tupel."

msgid ""
"Get a list of :class:`FrameInfo` objects for a frame and all outer frames. "
"These frames represent the calls that lead to the creation of *frame*. The "
"first entry in the returned list represents *frame*; the last entry "
"represents the outermost call on *frame*'s stack."
msgstr ""
"Hämta en lista med :class:`FrameInfo`-objekt för en ram och alla yttre "
"ramar. Dessa ramar representerar de anrop som leder till skapandet av "
"*frame*. Den första posten i den returnerade listan representerar *frame*; "
"den sista posten representerar det yttersta anropet på *frame*:s stack."

msgid ""
"A list of :term:`named tuples <named tuple>` ``FrameInfo(frame, filename, "
"lineno, function, code_context, index)`` is returned."
msgstr ""
"En lista med :term:`namngivna tupler <named tuple>` ``FrameInfo(frame, "
"filename, lineno, function, code_context, index)`` returneras."

msgid "A list of :class:`FrameInfo` objects is returned."
msgstr "En lista med :class:`FrameInfo`-objekt returneras."

msgid ""
"Get a list of :class:`FrameInfo` objects for a traceback's frame and all "
"inner frames.  These frames represent calls made as a consequence of "
"*frame*. The first entry in the list represents *traceback*; the last entry "
"represents where the exception was raised."
msgstr ""
"Hämta en lista med :class:`FrameInfo`-objekt för en tracebacks ram och alla "
"inre ramar.  Dessa ramar representerar anrop som görs som en konsekvens av "
"*frame*. Den första posten i listan representerar *traceback*; den sista "
"posten representerar var undantaget uppstod."

msgid "Return the frame object for the caller's stack frame."
msgstr "Returnerar ramobjektet för anroparens stackram."

msgid ""
"This function relies on Python stack frame support in the interpreter, which "
"isn't guaranteed to exist in all implementations of Python.  If running in "
"an implementation without Python stack frame support this function returns "
"``None``."
msgstr ""
"Denna funktion förlitar sig på Python stack frame-stöd i tolken, vilket inte "
"garanterat finns i alla implementationer av Python.  Om den körs i en "
"implementering utan stöd för Python stack frame returnerar denna funktion "
"``None``."

msgid ""
"Return a list of :class:`FrameInfo` objects for the caller's stack.  The "
"first entry in the returned list represents the caller; the last entry "
"represents the outermost call on the stack."
msgstr ""
"Returnerar en lista med :class:`FrameInfo`-objekt för anroparens stack.  Den "
"första posten i den returnerade listan representerar anroparen; den sista "
"posten representerar det yttersta anropet på stacken."

msgid ""
"Return a list of :class:`FrameInfo` objects for the stack between the "
"current frame and the frame in which an exception currently being handled "
"was raised in.  The first entry in the list represents the caller; the last "
"entry represents where the exception was raised."
msgstr ""
"Returnerar en lista med :class:`FrameInfo`-objekt för stacken mellan den "
"aktuella ramen och den ram i vilken ett undantag som för närvarande hanteras "
"uppstod.  Den första posten i listan representerar anroparen; den sista "
"posten representerar var undantaget uppstod."

msgid "Fetching attributes statically"
msgstr "Hämta attribut statiskt"

msgid ""
"Both :func:`getattr` and :func:`hasattr` can trigger code execution when "
"fetching or checking for the existence of attributes. Descriptors, like "
"properties, will be invoked and :meth:`~object.__getattr__` and :meth:"
"`~object.__getattribute__` may be called."
msgstr ""
"Både :func:`getattr` och :func:`hasattr` kan utlösa kodexekvering när de "
"hämtar eller kontrollerar om attribut finns. Deskriptorer, som egenskaper, "
"kommer att anropas och :meth:`~object.__getattr__` och :meth:`~object."
"__getattribute__` kan anropas."

msgid ""
"For cases where you want passive introspection, like documentation tools, "
"this can be inconvenient. :func:`getattr_static` has the same signature as :"
"func:`getattr` but avoids executing code when it fetches attributes."
msgstr ""
"För fall där du vill ha passiv introspektion, som dokumentationsverktyg, kan "
"detta vara obekvämt. :func:`getattr_static` har samma signatur som :func:"
"`getattr` men undviker att exekvera kod när den hämtar attribut."

msgid ""
"Retrieve attributes without triggering dynamic lookup via the descriptor "
"protocol, :meth:`~object.__getattr__` or :meth:`~object.__getattribute__`."
msgstr ""
"Hämta attribut utan att utlösa dynamisk uppslagning via descriptor-"
"protokollet, :meth:`~object.__getattr__` eller :meth:`~object."
"__getattribute__`."

msgid ""
"Note: this function may not be able to retrieve all attributes that getattr "
"can fetch (like dynamically created attributes) and may find attributes that "
"getattr can't (like descriptors that raise AttributeError). It can also "
"return descriptors objects instead of instance members."
msgstr ""
"Observera: den här funktionen kanske inte kan hämta alla attribut som "
"getattr kan hämta (t.ex. dynamiskt skapade attribut) och kan hitta attribut "
"som getattr inte kan (t.ex. beskrivningar som ger AttributeError). Den kan "
"också returnera deskriptorobjekt i stället för instansmedlemmar."

msgid ""
"If the instance :attr:`~object.__dict__` is shadowed by another member (for "
"example a property) then this function will be unable to find instance "
"members."
msgstr ""
"Om instansen :attr:`~object.__dict__` skuggas av en annan medlem (t.ex. en "
"egenskap) kommer denna funktion inte att kunna hitta instansmedlemmar."

msgid ""
":func:`getattr_static` does not resolve descriptors, for example slot "
"descriptors or getset descriptors on objects implemented in C. The "
"descriptor object is returned instead of the underlying attribute."
msgstr ""
":func:`getattr_static` löser inte deskriptorer, t.ex. slotdeskriptorer eller "
"getsetdeskriptorer på objekt som implementerats i C. Deskriptorobjektet "
"returneras i stället för det underliggande attributet."

msgid ""
"You can handle these with code like the following. Note that for arbitrary "
"getset descriptors invoking these may trigger code execution::"
msgstr ""
"Du kan hantera dessa med kod som följande. Observera att för godtyckliga "
"getset-beskrivare kan anrop av dessa utlösa kodkörning::"

msgid ""
"# example code for resolving the builtin descriptor types\n"
"class _foo:\n"
"    __slots__ = ['foo']\n"
"\n"
"slot_descriptor = type(_foo.foo)\n"
"getset_descriptor = type(type(open(__file__)).name)\n"
"wrapper_descriptor = type(str.__dict__['__add__'])\n"
"descriptor_types = (slot_descriptor, getset_descriptor, wrapper_descriptor)\n"
"\n"
"result = getattr_static(some_object, 'foo')\n"
"if type(result) in descriptor_types:\n"
"    try:\n"
"        result = result.__get__()\n"
"    except AttributeError:\n"
"        # descriptors can raise AttributeError to\n"
"        # indicate there is no underlying value\n"
"        # in which case the descriptor itself will\n"
"        # have to do\n"
"        pass"
msgstr ""
"# example code for resolving the builtin descriptor types\n"
"class _foo:\n"
"    __slots__ = ['foo']\n"
"\n"
"slot_descriptor = type(_foo.foo)\n"
"getset_descriptor = type(type(open(__file__)).name)\n"
"wrapper_descriptor = type(str.__dict__['__add__'])\n"
"descriptor_types = (slot_descriptor, getset_descriptor, wrapper_descriptor)\n"
"\n"
"result = getattr_static(some_object, 'foo')\n"
"if type(result) in descriptor_types:\n"
"    try:\n"
"        result = result.__get__()\n"
"    except AttributeError:\n"
"        # descriptors can raise AttributeError to\n"
"        # indicate there is no underlying value\n"
"        # in which case the descriptor itself will\n"
"        # have to do\n"
"        pass"

msgid "Current State of Generators, Coroutines, and Asynchronous Generators"
msgstr "Aktuellt läge för generatorer, coroutines och asynkrona generatorer"

msgid ""
"When implementing coroutine schedulers and for other advanced uses of "
"generators, it is useful to determine whether a generator is currently "
"executing, is waiting to start or resume or execution, or has already "
"terminated. :func:`getgeneratorstate` allows the current state of a "
"generator to be determined easily."
msgstr ""
"När man implementerar coroutine-schemaläggare och för andra avancerade "
"användningar av generatorer är det användbart att avgöra om en generator "
"körs för närvarande, väntar på att starta eller återuppta körningen eller "
"redan har avslutats. :func:`getgeneratorstate` gör det enkelt att avgöra en "
"generators aktuella tillstånd."

msgid "Get current state of a generator-iterator."
msgstr "Hämta aktuellt tillstånd för en generator-iterator."

msgid "Possible states are:"
msgstr "Möjliga tillstånd är:"

msgid "GEN_CREATED: Waiting to start execution."
msgstr "GEN_CREATED: Väntar på att starta exekvering."

msgid "GEN_RUNNING: Currently being executed by the interpreter."
msgstr "GEN_RUNNING: Exekveras för närvarande av tolken."

msgid "GEN_SUSPENDED: Currently suspended at a yield expression."
msgstr "GEN_SUSPENDED: För närvarande suspenderad vid ett yield-uttryck."

msgid "GEN_CLOSED: Execution has completed."
msgstr "GEN_CLOSED: Exekveringen har slutförts."

msgid ""
"Get current state of a coroutine object.  The function is intended to be "
"used with coroutine objects created by :keyword:`async def` functions, but "
"will accept any coroutine-like object that has ``cr_running`` and "
"``cr_frame`` attributes."
msgstr ""
"Hämta aktuellt tillstånd för ett coroutine-objekt.  Funktionen är avsedd att "
"användas med coroutine-objekt som skapats av :keyword:`async def`-"
"funktioner, men accepterar alla coroutine-liknande objekt som har attributen "
"``cr_running`` och ``cr_frame``."

msgid "CORO_CREATED: Waiting to start execution."
msgstr "CORO_CREATED: Väntar på att starta exekvering."

msgid "CORO_RUNNING: Currently being executed by the interpreter."
msgstr "CORO_RUNNING: Exekveras för närvarande av tolken."

msgid "CORO_SUSPENDED: Currently suspended at an await expression."
msgstr "CORO_SUSPENDED: För närvarande avbruten vid ett await-uttryck."

msgid "CORO_CLOSED: Execution has completed."
msgstr "CORO_CLOSED: Exekveringen har slutförts."

msgid ""
"Get current state of an asynchronous generator object.  The function is "
"intended to be used with asynchronous iterator objects created by :keyword:"
"`async def` functions which use the :keyword:`yield` statement, but will "
"accept any asynchronous generator-like object that has ``ag_running`` and "
"``ag_frame`` attributes."
msgstr ""
"Hämta aktuellt tillstånd för ett asynkront generatorobjekt.  Funktionen är "
"avsedd att användas med asynkrona iteratorobjekt som skapats av :keyword:"
"`async def`-funktioner som använder :keyword:`yield`-satsen, men accepterar "
"alla asynkrona generatorliknande objekt som har attributen ``ag_running`` "
"och ``ag_frame``."

msgid "AGEN_CREATED: Waiting to start execution."
msgstr "AGEN_CREATED: Väntar på att starta körning."

msgid "AGEN_RUNNING: Currently being executed by the interpreter."
msgstr "AGEN_RUNNING: Exekveras för närvarande av tolken."

msgid "AGEN_SUSPENDED: Currently suspended at a yield expression."
msgstr "AGEN_SUSPENDED: För närvarande suspenderad vid ett yield-uttryck."

msgid "AGEN_CLOSED: Execution has completed."
msgstr "AGEN_CLOSED: Exekveringen har slutförts."

msgid ""
"The current internal state of the generator can also be queried. This is "
"mostly useful for testing purposes, to ensure that internal state is being "
"updated as expected:"
msgstr ""
"Generatorns aktuella interna tillstånd kan också efterfrågas. Detta är mest "
"användbart för teständamål, för att säkerställa att det interna tillståndet "
"uppdateras som förväntat:"

msgid ""
"Get the mapping of live local variables in *generator* to their current "
"values.  A dictionary is returned that maps from variable names to values. "
"This is the equivalent of calling :func:`locals` in the body of the "
"generator, and all the same caveats apply."
msgstr ""
"Hämta mappningen av live lokala variabler i *generator* till deras aktuella "
"värden.  En ordbok returneras som mappar från variabelnamn till värden. "
"Detta är likvärdigt med att anropa :func:`locals` i generatorns kropp, och "
"alla samma varningar gäller."

msgid ""
"If *generator* is a :term:`generator` with no currently associated frame, "
"then an empty dictionary is returned.  :exc:`TypeError` is raised if "
"*generator* is not a Python generator object."
msgstr ""
"Om *generator* är en :term:`generator` utan någon associerad ram returneras "
"en tom ordbok. :exc:`TypeError` uppstår om *generator* inte är ett Python "
"generator-objekt."

msgid ""
"This function relies on the generator exposing a Python stack frame for "
"introspection, which isn't guaranteed to be the case in all implementations "
"of Python. In such cases, this function will always return an empty "
"dictionary."
msgstr ""
"Denna funktion förlitar sig på att generatorn exponerar en Python-stackram "
"för introspektion, vilket inte garanterat är fallet i alla implementationer "
"av Python. I sådana fall kommer denna funktion alltid att returnera en tom "
"ordbok."

msgid ""
"This function is analogous to :func:`~inspect.getgeneratorlocals`, but works "
"for coroutine objects created by :keyword:`async def` functions."
msgstr ""
"Denna funktion är analog med :func:`~inspect.getgeneratorlocals`, men "
"fungerar för coroutine-objekt som skapats av :keyword:`async def`-funktioner."

msgid ""
"This function is analogous to :func:`~inspect.getgeneratorlocals`, but works "
"for asynchronous generator objects created by :keyword:`async def` functions "
"which use the :keyword:`yield` statement."
msgstr ""
"Denna funktion är analog med :func:`~inspect.getgeneratorlocals`, men "
"fungerar för asynkrona generatorobjekt som skapats av :keyword:`async def`-"
"funktioner som använder :keyword:`yield`-satsen."

msgid "Code Objects Bit Flags"
msgstr "Kodobjekt Bit Flaggor"

msgid ""
"Python code objects have a :attr:`~codeobject.co_flags` attribute, which is "
"a bitmap of the following flags:"
msgstr ""
"Python-kodobjekt har ett :attr:`~codeobject.co_flags`-attribut, som är en "
"bitmapp av följande flaggor:"

msgid "The code object is optimized, using fast locals."
msgstr "Kodobjektet är optimerat och använder snabba lokala enheter."

msgid ""
"If set, a new dict will be created for the frame's :attr:`~frame.f_locals` "
"when the code object is executed."
msgstr ""
"Om den är inställd kommer en ny dict att skapas för ramens :attr:`~frame."
"f_locals` när kodobjektet exekveras."

msgid "The code object has a variable positional parameter (``*args``-like)."
msgstr ""
"Kodobjektet har en variabel positionell parameter (``*args``-liknande)."

msgid "The code object has a variable keyword parameter (``**kwargs``-like)."
msgstr ""
"Kodobjektet har en variabel nyckelordsparameter (``**kwargs``-liknande)."

msgid "The flag is set when the code object is a nested function."
msgstr "Flaggan sätts när kodobjektet är en nästlad funktion."

msgid ""
"The flag is set when the code object is a generator function, i.e. a "
"generator object is returned when the code object is executed."
msgstr ""
"Flaggan sätts när kodobjektet är en generatorfunktion, d.v.s. ett "
"generatorobjekt returneras när kodobjektet exekveras."

msgid ""
"The flag is set when the code object is a coroutine function. When the code "
"object is executed it returns a coroutine object. See :pep:`492` for more "
"details."
msgstr ""
"Flaggan sätts när kodobjektet är en coroutine-funktion. När kodobjektet "
"exekveras returnerar det ett coroutine-objekt. Se :pep:`492` för mer "
"information."

msgid ""
"The flag is used to transform generators into generator-based coroutines.  "
"Generator objects with this flag can be used in ``await`` expression, and "
"can ``yield from`` coroutine objects. See :pep:`492` for more details."
msgstr ""
"Flaggan används för att omvandla generatorer till generatorbaserade "
"coroutines.  Generatorobjekt med denna flagga kan användas i ``await``-"
"uttryck och kan ``yielda från`` coroutine-objekt. Se :pep:`492` för mer "
"information."

msgid ""
"The flag is set when the code object is an asynchronous generator function.  "
"When the code object is executed it returns an asynchronous generator "
"object.  See :pep:`525` for more details."
msgstr ""
"Flaggan sätts när kodobjektet är en asynkron generatorfunktion.  När "
"kodobjektet exekveras returnerar det ett asynkront generatorobjekt.  Se :pep:"
"`525` för mer information."

msgid ""
"The flag is set when there is a docstring for the code object in the source "
"code. If set, it will be the first item in :attr:`~codeobject.co_consts`."
msgstr ""
"Flaggan sätts när det finns en docstring för kodobjektet i källkoden. Om den "
"är satt kommer den att vara den första posten i :attr:`~codeobject."
"co_consts`."

msgid ""
"The flag is set when the code object is a function defined in class scope."
msgstr ""
"Flaggan sätts när kodobjektet är en funktion som definieras i klassomfånget."

msgid ""
"The flags are specific to CPython, and may not be defined in other Python "
"implementations.  Furthermore, the flags are an implementation detail, and "
"can be removed or deprecated in future Python releases. It's recommended to "
"use public APIs from the :mod:`inspect` module for any introspection needs."
msgstr ""
"Flaggorna är specifika för CPython och kanske inte definieras i andra Python-"
"implementationer.  Dessutom är flaggorna en implementationsdetalj och kan "
"tas bort eller föråldras i framtida Python-utgåvor. Det rekommenderas att "
"använda offentliga API:er från modulen :mod:`inspect` för alla "
"introspektionsbehov."

msgid "Buffer flags"
msgstr "Buffertflaggor"

msgid ""
"This is an :class:`enum.IntFlag` that represents the flags that can be "
"passed to the :meth:`~object.__buffer__` method of objects implementing the :"
"ref:`buffer protocol <bufferobjects>`."
msgstr ""
"Detta är en :class:`enum.IntFlag` som representerar de flaggor som kan "
"skickas till :meth:`~object.__buffer__`-metoden för objekt som "
"implementerar :ref:`buffer protocol <bufferobjects>`."

msgid "The meaning of the flags is explained at :ref:`buffer-request-types`."
msgstr "Betydelsen av flaggorna förklaras i :ref:`buffer-request-types`."

msgid "Command Line Interface"
msgstr "Kommandoradsgränssnitt"

msgid ""
"The :mod:`inspect` module also provides a basic introspection capability "
"from the command line."
msgstr ""
"Modulen :mod:`inspect` ger också en grundläggande möjlighet till "
"introspektion från kommandoraden."

msgid ""
"By default, accepts the name of a module and prints the source of that "
"module. A class or function within the module can be printed instead by "
"appended a colon and the qualified name of the target object."
msgstr ""
"Accepterar som standard namnet på en modul och skriver ut källan till den "
"modulen. En klass eller funktion inom modulen kan skrivas ut istället genom "
"att lägga till ett kolon och det kvalificerade namnet på målobjektet."

msgid ""
"Print information about the specified object rather than the source code"
msgstr "Skriv ut information om det angivna objektet i stället för källkoden"
