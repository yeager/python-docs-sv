# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's New in Python 2.0"
msgstr "Vad är nytt i Python 2.0"

msgid "Author"
msgstr "Författare"

msgid "A.M. Kuchling and Moshe Zadka"
msgstr "A.M. Kuchling och Moshe Zadka"

msgid "Introduction"
msgstr "Introduktion"

msgid ""
"A new release of Python, version 2.0, was released on October 16, 2000. This "
"article covers the exciting new features in 2.0, highlights some other "
"useful changes, and points out a few incompatible changes that may require "
"rewriting code."
msgstr ""
"En ny version av Python, version 2.0, släpptes den 16 oktober 2000. Den här "
"artikeln beskriver de spännande nyheterna i 2.0, lyfter fram några andra "
"användbara ändringar och pekar på några inkompatibla ändringar som kan kräva "
"att koden skrivs om."

msgid ""
"Python's development never completely stops between releases, and a steady "
"flow of bug fixes and improvements are always being submitted. A host of "
"minor fixes, a few optimizations, additional docstrings, and better error "
"messages went into 2.0; to list them all would be impossible, but they're "
"certainly significant. Consult the publicly available CVS logs if you want "
"to see the full list.  This progress is due to the five developers working "
"for  PythonLabs are now getting paid to spend their days fixing bugs, and "
"also due to the improved communication resulting  from moving to SourceForge."
msgstr ""
"Pythons utveckling stannar aldrig helt upp mellan utgåvorna, och ett stadigt "
"flöde av buggfixar och förbättringar skickas alltid in. En mängd mindre "
"korrigeringar, några optimeringar, ytterligare dokumentationer och bättre "
"felmeddelanden gick in i 2.0; att lista dem alla skulle vara omöjligt, men "
"de är verkligen betydelsefulla. Konsultera de offentligt tillgängliga CVS-"
"loggarna om du vill se hela listan.  Dessa framsteg beror på att de fem "
"utvecklare som arbetar för PythonLabs nu får betalt för att spendera sina "
"dagar med att fixa buggar, och även på grund av den förbättrade "
"kommunikationen som följer av att flytta till SourceForge."

msgid "What About Python 1.6?"
msgstr "Vad sägs om Python 1.6?"

msgid ""
"Python 1.6 can be thought of as the Contractual Obligations Python release. "
"After the core development team left CNRI in May 2000, CNRI requested that a "
"1.6 release be created, containing all the work on Python that had been "
"performed at CNRI.  Python 1.6 therefore represents the state of the CVS "
"tree as of May 2000, with the most significant new feature being Unicode "
"support.  Development continued after May, of course, so the 1.6 tree "
"received a few fixes to ensure that it's forward-compatible with Python "
"2.0.  1.6 is therefore part of Python's evolution, and not a side branch."
msgstr ""
"Python 1.6 kan ses som Python-versionen för kontraktsförpliktelser. Efter "
"att kärnutvecklingsgruppen lämnade CNRI i maj 2000 begärde CNRI att en 1.6-"
"version skulle skapas, som skulle innehålla allt arbete med Python som hade "
"utförts på CNRI.  Python 1.6 representerar därför tillståndet i CVS-trädet i "
"maj 2000, med den mest betydande nya funktionen Unicode-stöd.  Utvecklingen "
"fortsatte naturligtvis efter maj, så 1.6-trädet fick några korrigeringar för "
"att säkerställa att det är framåtkompatibelt med Python 2.0.  1.6 är därför "
"en del av Pythons utveckling, och inte en sidogren."

msgid ""
"So, should you take much interest in Python 1.6?  Probably not.  The "
"1.6final and 2.0beta1 releases were made on the same day (September 5, "
"2000), the plan being to finalize Python 2.0 within a month or so.  If you "
"have applications to maintain, there seems little point in breaking things "
"by moving to 1.6, fixing them, and then having another round of breakage "
"within a month by moving to 2.0; you're better off just going straight to "
"2.0.  Most of the really interesting features described in this document are "
"only in 2.0, because a lot of work was done between May and September."
msgstr ""
"Så, borde du intressera dig för Python 1.6?  Förmodligen inte.  Versionerna "
"1.6final och 2.0beta1 släpptes samma dag (5 september 2000) och planen är "
"att Python 2.0 ska vara färdig inom en månad eller så.  Om du har "
"applikationer att underhålla verkar det inte finnas någon mening med att "
"bryta saker genom att flytta till 1.6, fixa dem och sedan ha en ny omgång av "
"brott inom en månad genom att flytta till 2.0; det är bättre att bara gå "
"direkt till 2.0.  De flesta av de riktigt intressanta funktionerna som "
"beskrivs i det här dokumentet finns bara i 2.0, eftersom mycket arbete "
"gjordes mellan maj och september."

msgid "New Development Process"
msgstr "Ny utvecklingsprocess"

msgid ""
"The most important change in Python 2.0 may not be to the code at all, but "
"to how Python is developed: in May 2000 the Python developers began using "
"the tools made available by SourceForge for storing  source code, tracking "
"bug reports, and managing the queue of patch submissions.  To report bugs or "
"submit patches for Python 2.0, use the bug tracking and patch manager tools "
"available from Python's project page, located at https://sourceforge.net/"
"projects/python/."
msgstr ""
"Den viktigaste förändringen i Python 2.0 är kanske inte alls i koden, utan i "
"hur Python utvecklas: i maj 2000 började Python-utvecklarna använda de "
"verktyg som SourceForge tillhandahåller för att lagra källkod, spåra "
"felrapporter och hantera kön av patchar som skickas in.  För att rapportera "
"buggar eller skicka in patchar för Python 2.0, använd verktygen för "
"buggspårning och patchhantering som finns tillgängliga på Pythons "
"projektsida, som finns på https://sourceforge.net/projects/python/."

msgid ""
"The most important of the services now hosted at SourceForge is the Python "
"CVS tree, the version-controlled repository containing the source code for "
"Python. Previously, there were roughly 7 or so people who had write access "
"to the CVS tree, and all patches had to be inspected and checked in by one "
"of the people on this short list. Obviously, this wasn't very scalable.  By "
"moving the CVS tree to SourceForge, it became possible to grant write access "
"to more people; as of September 2000 there were 27 people able to check in "
"changes, a fourfold increase.  This makes possible large-scale changes that "
"wouldn't be attempted if they'd have to be filtered through the small group "
"of core developers.  For example, one day Peter Schneider-Kamp took it into "
"his head to drop K&R C compatibility and convert the C source for Python to "
"ANSI C. After getting approval on the python-dev mailing list, he launched "
"into a flurry of checkins that lasted about a week, other developers joined "
"in to help, and the job was done.  If there were only 5 people with write "
"access, probably that task would have been viewed as \"nice, but not worth "
"the time and effort needed\" and it would never have gotten done."
msgstr ""
"Den viktigaste av de tjänster som nu finns hos SourceForge är Pythons CVS-"
"träd, det versionsstyrda arkiv som innehåller källkoden för Python. Tidigare "
"fanns det ungefär 7 personer som hade skrivrättigheter till CVS-trädet, och "
"alla patchar måste inspekteras och checkas in av någon av personerna på "
"denna korta lista. Det här var naturligtvis inte särskilt skalbart.  Genom "
"att flytta CVS-trädet till SourceForge blev det möjligt att ge fler personer "
"skrivbehörighet; i september 2000 kunde 27 personer checka in ändringar, "
"vilket är en fyrfaldig ökning.  Detta möjliggör storskaliga förändringar som "
"inte skulle ha genomförts om de hade behövt filtreras genom den lilla "
"gruppen av kärnutvecklare.  En dag fick till exempel Peter Schneider-Kamp "
"för sig att släppa K&R C-kompatibiliteten och konvertera C-källan för Python "
"till ANSI C. Efter att ha fått godkännande på e-postlistan python-dev satte "
"han igång med en mängd incheckningar som varade i ungefär en vecka, andra "
"utvecklare anslöt sig för att hjälpa till och jobbet var gjort.  Om det bara "
"hade funnits fem personer med skrivbehörighet hade den uppgiften förmodligen "
"betraktats som \"trevlig, men inte värd den tid och ansträngning som krävs\" "
"och den hade aldrig blivit utförd."

msgid ""
"The shift to using SourceForge's services has resulted in a remarkable "
"increase in the speed of development.  Patches now get submitted, commented "
"on, revised by people other than the original submitter, and bounced back "
"and forth between people until the patch is deemed worth checking in.  Bugs "
"are tracked in one central location and can be assigned to a specific person "
"for fixing, and we can count the number of open bugs to measure progress.  "
"This didn't come without a cost: developers now have more e-mail to deal "
"with, more mailing lists to follow, and special tools had to be written for "
"the new environment. For example, SourceForge sends default patch and bug "
"notification e-mail messages that are completely unhelpful, so Ka-Ping Yee "
"wrote an HTML screen-scraper that sends more useful messages."
msgstr ""
"Övergången till att använda SourceForges tjänster har resulterat i en "
"anmärkningsvärd ökning av utvecklingshastigheten.  Patchar skickas nu in, "
"kommenteras, revideras av andra personer än den som ursprungligen skickade "
"in dem och skickas fram och tillbaka mellan olika personer tills patchen "
"anses vara värd att checka in.  Buggar spåras på en central plats och kan "
"tilldelas en specifik person för åtgärdande, och vi kan räkna antalet öppna "
"buggar för att mäta framstegen.  Detta har inte skett utan kostnad: "
"utvecklarna har nu mer e-post att hantera, fler e-postlistor att följa och "
"särskilda verktyg måste skrivas för den nya miljön. SourceForge skickar till "
"exempel standardmeddelanden om patch- och buggaviseringar som är helt "
"oanvändbara, så Ka-Ping Yee skrev en HTML-skärmskrapa som skickar mer "
"användbara meddelanden."

msgid ""
"The ease of adding code caused a few initial growing pains, such as code was "
"checked in before it was ready or without getting clear agreement from the "
"developer group.  The approval process that has emerged is somewhat similar "
"to that used by the Apache group. Developers can vote +1, +0, -0, or -1 on a "
"patch; +1 and -1 denote acceptance or rejection, while +0 and -0 mean the "
"developer is mostly indifferent to the change, though with a slight positive "
"or negative slant.  The most significant change from the Apache model is "
"that the voting is essentially advisory, letting Guido van Rossum, who has "
"Benevolent Dictator For Life status, know what the general opinion is. He "
"can still ignore the result of a vote, and approve or reject a change even "
"if the community disagrees with him."
msgstr ""
"Det enkla sättet att lägga till kod orsakade en del initiala växtvärk, till "
"exempel att kod checkades in innan den var klar eller utan att få ett "
"tydligt godkännande från utvecklargruppen.  Den godkännandeprocess som har "
"utvecklats liknar till viss del den som används av Apache-gruppen. "
"Utvecklare kan rösta +1, +0, -0 eller -1 på en patch. +1 och -1 innebär att "
"man godkänner eller förkastar en patch, medan +0 och -0 innebär att "
"utvecklaren i stort sett är likgiltig inför förändringen, men med en liten "
"positiv eller negativ lutning.  Den viktigaste förändringen jämfört med "
"Apache-modellen är att omröstningen i huvudsak är rådgivande, vilket gör att "
"Guido van Rossum, som har status som Benevolent Dictator For Life, vet vad "
"den allmänna uppfattningen är. Han kan fortfarande ignorera resultatet av en "
"omröstning och godkänna eller förkasta en ändring även om communityn inte "
"håller med honom."

msgid ""
"Producing an actual patch is the last step in adding a new feature, and is "
"usually easy compared to the earlier task of coming up with a good design. "
"Discussions of new features can often explode into lengthy mailing list "
"threads, making the discussion hard to follow, and no one can read every "
"posting to python-dev.  Therefore, a relatively formal process has been set "
"up to write Python Enhancement Proposals (PEPs), modelled on the internet "
"RFC process.  PEPs are draft documents that describe a proposed new feature, "
"and are continually revised until the community reaches a consensus, either "
"accepting or rejecting the proposal.  Quoting from the introduction to :pep:"
"`1`, \"PEP Purpose and Guidelines\":"
msgstr ""
"Att producera en faktisk patch är det sista steget i att lägga till en ny "
"funktion, och är vanligtvis lätt jämfört med den tidigare uppgiften att "
"komma på en bra design. Diskussioner om nya funktioner kan ofta explodera i "
"långa trådar på e-postlistor, vilket gör diskussionen svår att följa, och "
"ingen kan läsa alla inlägg till python-dev.  Därför har en relativt formell "
"process inrättats för att skriva Python Enhancement Proposals (PEPs), med "
"RFC-processen på internet som förebild.  PEPs är utkast till dokument som "
"beskriver en föreslagen ny funktion, och revideras kontinuerligt tills "
"communityn når ett samförstånd, antingen accepterar eller förkastar "
"förslaget.  Citat från introduktionen till :pep:`1`, \"PEP Purpose and "
"Guidelines\":"

msgid ""
"PEP stands for Python Enhancement Proposal.  A PEP is a design document "
"providing information to the Python community, or describing a new feature "
"for Python.  The PEP should provide a concise technical specification of the "
"feature and a rationale for the feature."
msgstr ""
"PEP står för Python Enhancement Proposal (förslag till förbättring av "
"Python).  Ett PEP är ett designdokument som ger information till Python-"
"gemenskapen eller beskriver en ny funktion för Python.  PEP ska innehålla en "
"kortfattad teknisk specifikation av funktionen och en motivering för "
"funktionen."

msgid ""
"We intend PEPs to be the primary mechanisms for proposing new features, for "
"collecting community input on an issue, and for documenting the design "
"decisions that have gone into Python.  The PEP author is responsible for "
"building consensus within the community and documenting dissenting opinions."
msgstr ""
"Vi avser att PEP:er ska vara de primära mekanismerna för att föreslå nya "
"funktioner, för att samla in synpunkter på en fråga och för att dokumentera "
"de designbeslut som har tagits i Python.  PEP-författaren är ansvarig för "
"att bygga konsensus inom gemenskapen och dokumentera avvikande åsikter."

msgid ""
"Read the rest of :pep:`1` for the details of the PEP editorial process, "
"style, and format.  PEPs are kept in the Python CVS tree on SourceForge, "
"though they're not part of the Python 2.0 distribution, and are also "
"available in HTML form from https://peps.python.org/.  As of September 2000, "
"there are 25 PEPs, ranging from :pep:`201`, \"Lockstep Iteration\", to PEP "
"225, \"Elementwise/Objectwise Operators\"."
msgstr ""
"Läs resten av :pep:`1` för detaljer om PEP:s redaktionella process, stil och "
"format.  PEPs finns i Python CVS-trädet på SourceForge, även om de inte är "
"en del av Python 2.0-distributionen, och finns också tillgängliga i HTML-"
"format från https://peps.python.org/.  I september 2000 fanns det 25 PEP:er, "
"från :pep:`201`, \"Lockstep Iteration\", till PEP 225, \"Elementwise/"
"Objectwise Operators\"."

msgid "Unicode"
msgstr "Unicode"

msgid ""
"The largest new feature in Python 2.0 is a new fundamental data type: "
"Unicode strings.  Unicode uses 16-bit numbers to represent characters "
"instead of the 8-bit number used by ASCII, meaning that 65,536 distinct "
"characters can be supported."
msgstr ""
"Den största nyheten i Python 2.0 är en ny grundläggande datatyp: Unicode-"
"strängar.  Unicode använder 16-bitarsnummer för att representera tecken i "
"stället för 8-bitarsnummer som används av ASCII, vilket innebär att 65 536 "
"olika tecken kan stödjas."

msgid ""
"The final interface for Unicode support was arrived at through countless "
"often-stormy discussions on the python-dev mailing list, and mostly "
"implemented by Marc-André Lemburg, based on a Unicode string type "
"implementation by Fredrik Lundh.  A detailed explanation of the interface "
"was written up as :pep:`100`, \"Python Unicode Integration\". This article "
"will simply cover the most significant points about the Unicode interfaces."
msgstr ""
"Det slutliga gränssnittet för Unicode-stöd togs fram genom otaliga, ofta "
"stormiga diskussioner på e-postlistan python-dev, och implementerades till "
"största delen av Marc-André Lemburg, baserat på en Unicode-"
"strängtypsimplementering av Fredrik Lundh.  En detaljerad förklaring av "
"gränssnittet skrevs upp som :pep:`100`, \"Python Unicode Integration\". Den "
"här artikeln kommer helt enkelt att täcka de viktigaste punkterna om Unicode-"
"gränssnitten."

msgid ""
"In Python source code, Unicode strings are written as ``u\"string\"``.  "
"Arbitrary Unicode characters can be written using a new escape sequence, :"
"samp:`\\\\u{HHHH}`, where *HHHH* is a 4-digit hexadecimal number from 0000 "
"to FFFF.  The existing :samp:`\\\\x{HH}` escape sequence can also be used, "
"and octal escapes can be used for characters up to U+01FF, which is "
"represented by ``\\777``."
msgstr ""
"I Pythons källkod skrivs Unicode-strängar som ``u\"string\"``.  Godtyckliga "
"Unicode-tecken kan skrivas med hjälp av en ny escape-sekvens, :samp:`\\"
"\\u{HHHH}`, där *HHHH* är ett fyrsiffrigt hexadecimalt tal från 0000 till "
"FFFF.  Den befintliga escape-sekvensen :samp:`\\x{HH}` kan också användas, "
"och oktala escapes kan användas för tecken upp till U+01FF, som "
"representeras av ``\\777``."

msgid ""
"Unicode strings, just like regular strings, are an immutable sequence type. "
"They can be indexed and sliced, but not modified in place. Unicode strings "
"have an ``encode( [encoding] )`` method that returns an 8-bit string in the "
"desired encoding.  Encodings are named by strings, such as ``'ascii'``, "
"``'utf-8'``, ``'iso-8859-1'``, or whatever.  A codec API is defined for "
"implementing and registering new encodings that are then available "
"throughout a Python program. If an encoding isn't specified, the default "
"encoding is usually 7-bit ASCII, though it can be changed for your Python "
"installation by calling the ``sys.setdefaultencoding(encoding)`` function in "
"a customized version of :file:`site.py`."
msgstr ""
"Unicode-strängar är, precis som vanliga strängar, en oföränderlig "
"sekvenstyp. De kan indexeras och skivas, men inte modifieras på plats. "
"Unicode-strängar har en ``encode( [encoding] )``-metod som returnerar en 8-"
"bitars sträng i önskad kodning.  Kodningar namnges av strängar, till exempel "
"``'ascii'``, ``'utf-8'``, ``'iso-8859-1'``, eller vad som helst.  Ett codec-"
"API är definierat för att implementera och registrera nya kodningar som "
"sedan är tillgängliga i ett Python-program. Om en kodning inte specificeras "
"är standardkodningen vanligtvis 7-bitars ASCII, men den kan ändras för din "
"Python-installation genom att anropa funktionen ``sys."
"setdefaultencoding(encoding)`` i en anpassad version av :file:`site.py`."

msgid ""
"Combining 8-bit and Unicode strings always coerces to Unicode, using the "
"default ASCII encoding; the result of ``'a' + u'bc'`` is ``u'abc'``."
msgstr ""
"Kombination av 8-bitars och Unicode-strängar tvingar alltid till Unicode, "
"med hjälp av standard ASCII-kodning; resultatet av ``'a' + u'bc'`` är "
"``u'abc'``."

msgid ""
"New built-in functions have been added, and existing built-ins modified to "
"support Unicode:"
msgstr ""
"Nya inbyggda funktioner har lagts till och befintliga inbyggda funktioner "
"har modifierats för att stödja Unicode:"

msgid ""
"``unichr(ch)`` returns a Unicode string 1 character long, containing the "
"character *ch*."
msgstr ""
"``unichr(ch)`` returnerar en Unicode-sträng som är 1 tecken lång och "
"innehåller tecknet *ch*."

msgid ""
"``ord(u)``, where *u* is a 1-character regular or Unicode string, returns "
"the number of the character as an integer."
msgstr ""
"``ord(u)``, där *u* är en reguljär sträng eller Unicode-sträng med 1 tecken, "
"returnerar numret på tecknet som ett heltal."

msgid ""
"``unicode(string [, encoding]  [, errors] )`` creates a Unicode string from "
"an 8-bit string.  ``encoding`` is a string naming the encoding to use. The "
"``errors`` parameter specifies the treatment of characters that are invalid "
"for the current encoding; passing ``'strict'`` as the value causes an "
"exception to be raised on any encoding error, while ``'ignore'`` causes "
"errors to be silently ignored and ``'replace'`` uses U+FFFD, the official "
"replacement character, in case of any problems."
msgstr ""
"``unicode(string [, encoding] [, errors] )`` skapar en Unicode-sträng från "
"en 8-bitarssträng.  ``encoding`` är en sträng som anger vilken kodning som "
"skall användas. Parametern ``errors`` anger hur tecken som är ogiltiga för "
"den aktuella kodningen ska behandlas; om värdet ``'strict'`` anges kommer "
"ett undantag att uppstå vid alla kodningsfel, medan ``'ignore'`` gör att "
"felen ignoreras i tysthet och ``'replace'`` använder U+FFFD, det officiella "
"ersättningstecknet, vid eventuella problem."

msgid ""
"The ``exec`` statement, and various built-ins such as ``eval()``, "
"``getattr()``, and ``setattr()`` will also accept Unicode strings as well as "
"regular strings.  (It's possible that the process of fixing this missed some "
"built-ins; if you find a built-in function that accepts strings but doesn't "
"accept Unicode strings at all, please report it as a bug.)"
msgstr ""
"Satsen ``exec`` och olika inbyggda funktioner som ``eval()``, ``getattr()`` "
"och ``setattr()`` kommer också att acceptera Unicode-strängar såväl som "
"vanliga strängar.  (Det är möjligt att processen med att fixa detta missade "
"några inbyggda funktioner; om du hittar en inbyggd funktion som accepterar "
"strängar men inte accepterar Unicode-strängar alls, vänligen rapportera det "
"som en bugg)"

msgid ""
"A new module, :mod:`unicodedata`, provides an interface to Unicode character "
"properties.  For example, ``unicodedata.category(u'A')`` returns the 2-"
"character string 'Lu', the 'L' denoting it's a letter, and 'u' meaning that "
"it's uppercase. ``unicodedata.bidirectional(u'\\u0660')`` returns 'AN', "
"meaning that U+0660 is an Arabic number."
msgstr ""
"En ny modul, :mod:`unicodedata`, ger ett gränssnitt till Unicodes "
"teckenegenskaper.  Till exempel returnerar ``unicodedata.category(u'A')`` "
"den 2-teckens strängen 'Lu', där 'L' anger att det är en bokstav och 'u' "
"betyder att det är versaler. ``unicodedata.bidirectional(u'\\u0660')`` "
"returnerar 'AN', vilket betyder att U+0660 är ett arabiskt tal."

msgid ""
"The :mod:`codecs` module contains functions to look up existing encodings "
"and register new ones.  Unless you want to implement a new encoding, you'll "
"most often use the ``codecs.lookup(encoding)`` function, which returns a 4-"
"element tuple: ``(encode_func, decode_func, stream_reader, stream_writer)``."
msgstr ""
"Modulen :mod:`codecs` innehåller funktioner för att slå upp befintliga "
"kodningar och registrera nya.  Om du inte vill implementera en ny kodning "
"kommer du oftast att använda funktionen ``codecs.lookup(encoding)``, som "
"returnerar en tupel med 4 element: ``(encode_func, decode_func, "
"stream_reader, stream_writer)``."

msgid ""
"*encode_func* is a function that takes a Unicode string, and returns a 2-"
"tuple ``(string, length)``.  *string* is an 8-bit string containing a "
"portion (perhaps all) of the Unicode string converted into the given "
"encoding, and *length* tells you how much of the Unicode string was "
"converted."
msgstr ""
"*encode_func* är en funktion som tar en Unicode-sträng och returnerar en 2-"
"tupel ``(sträng, längd)``.  *string* är en 8-bitars sträng som innehåller en "
"del (kanske hela) av Unicode-strängen som konverterats till den givna "
"kodningen, och *length* berättar hur stor del av Unicode-strängen som "
"konverterades."

msgid ""
"*decode_func* is the opposite of *encode_func*, taking an 8-bit string and "
"returning a 2-tuple ``(ustring, length)``, consisting of the resulting "
"Unicode string *ustring* and the integer *length* telling how much of the 8-"
"bit string was consumed."
msgstr ""
"*decode_func* är motsatsen till *encode_func*, tar en 8-bitarssträng och "
"returnerar en 2-tupel ``(ustring, length)``, bestående av den resulterande "
"Unicode-strängen *ustring* och heltalet *length* som anger hur mycket av 8-"
"bitarssträngen som förbrukades."

msgid ""
"*stream_reader* is a class that supports decoding input from a stream. "
"*stream_reader(file_obj)* returns an object that supports the :meth:`!"
"read`, :meth:`!readline`, and :meth:`!readlines` methods.  These methods "
"will all translate from the given encoding and return Unicode strings."
msgstr ""
"*stream_reader* är en klass som stöder avkodning av indata från en ström. "
"*stream_reader(file_obj)* returnerar ett objekt som stöder metoderna :meth:`!"
"read`, :meth:`!readline` och :meth:`!readlines`.  Dessa metoder kommer alla "
"att översätta från den givna kodningen och returnera Unicode-strängar."

msgid ""
"*stream_writer*, similarly, is a class that supports encoding output to a "
"stream.  *stream_writer(file_obj)* returns an object that supports the :meth:"
"`!write` and :meth:`!writelines` methods.  These methods expect Unicode "
"strings, translating them to the given encoding on output."
msgstr ""
"*stream_writer* är på samma sätt en klass som stöder kodning av utdata till "
"en ström.  *stream_writer(file_obj)* returnerar ett objekt som stöder "
"metoderna :meth:`!write` och :meth:`!writelines`.  Dessa metoder förväntar "
"sig Unicode-strängar och översätter dem till den angivna kodningen vid "
"utmatning."

msgid ""
"For example, the following code writes a Unicode string into a file,  "
"encoding it as UTF-8::"
msgstr ""
"Följande kod skriver till exempel en Unicode-sträng till en fil och kodar "
"den som UTF-8::"

msgid ""
"import codecs\n"
"\n"
"unistr = u'\\u0660\\u2000ab ...'\n"
"\n"
"(UTF8_encode, UTF8_decode,\n"
" UTF8_streamreader, UTF8_streamwriter) = codecs.lookup('UTF-8')\n"
"\n"
"output = UTF8_streamwriter( open( '/tmp/output', 'wb') )\n"
"output.write( unistr )\n"
"output.close()"
msgstr ""
"import codecs\n"
"\n"
"unistr = u'\\u0660\\u2000ab ...'\n"
"\n"
"(UTF8_encode, UTF8_decode,\n"
" UTF8_streamreader, UTF8_streamwriter) = codecs.lookup('UTF-8')\n"
"\n"
"output = UTF8_streamwriter( open( '/tmp/output', 'wb') )\n"
"output.write( unistr )\n"
"output.close()"

msgid "The following code would then read UTF-8 input from the file::"
msgstr "Följande kod skulle då läsa UTF-8-data från filen::"

msgid ""
"input = UTF8_streamreader( open( '/tmp/output', 'rb') )\n"
"print repr(input.read())\n"
"input.close()"
msgstr ""
"input = UTF8_streamreader( open( '/tmp/output', 'rb') )\n"
"print repr(input.read())\n"
"input.close()"

msgid ""
"Unicode-aware regular expressions are available through the :mod:`re` "
"module, which has a new underlying implementation called SRE written by "
"Fredrik Lundh of Secret Labs AB."
msgstr ""
"Unicode-medvetna reguljära uttryck är tillgängliga via modulen :mod:`re`, "
"som har en ny underliggande implementation kallad SRE skriven av Fredrik "
"Lundh på Secret Labs AB."

msgid ""
"A ``-U`` command line option was added which causes the Python compiler to "
"interpret all string literals as Unicode string literals. This is intended "
"to be used in testing and future-proofing your Python code, since some "
"future version of Python may drop support for 8-bit strings and provide only "
"Unicode strings."
msgstr ""
"Ett kommandoradsalternativ ``-U`` har lagts till som gör att Python-"
"kompilatorn tolkar alla stränglitteraler som Unicode-stränglitteraler. Detta "
"är avsett att användas för att testa och framtidssäkra din Python-kod, "
"eftersom någon framtida version av Python kan släppa stödet för 8-bitars "
"strängar och endast tillhandahålla Unicode-strängar."

msgid "List Comprehensions"
msgstr "Listförståelse"

msgid ""
"Lists are a workhorse data type in Python, and many programs manipulate a "
"list at some point.  Two common operations on lists are to loop over them, "
"and either pick out the elements that meet a certain criterion, or apply "
"some function to each element.  For example, given a list of strings, you "
"might want to pull out all the strings containing a given substring, or "
"strip off trailing whitespace from each line."
msgstr ""
"Listor är en viktig datatyp i Python och många program manipulerar en lista "
"vid något tillfälle.  Två vanliga operationer på listor är att loopa över "
"dem och antingen välja ut de element som uppfyller ett visst kriterium eller "
"tillämpa någon funktion på varje element.  Om du till exempel har en lista "
"med strängar kanske du vill plocka ut alla strängar som innehåller en viss "
"delsträng, eller ta bort efterföljande blanksteg från varje rad."

msgid ""
"The existing :func:`map` and :func:`filter` functions can be used for this "
"purpose, but they require a function as one of their arguments.  This is "
"fine if there's an existing built-in function that can be passed directly, "
"but if there isn't, you have to create a little function to do the required "
"work, and Python's scoping rules make the result ugly if the little function "
"needs additional information.  Take the first example in the previous "
"paragraph, finding all the strings in the list containing a given "
"substring.  You could write the following to do it::"
msgstr ""
"De befintliga funktionerna :func:`map` och :func:`filter` kan användas för "
"detta ändamål, men de kräver en funktion som ett av sina argument.  Detta är "
"bra om det finns en befintlig inbyggd funktion som kan skickas direkt, men "
"om det inte finns det måste du skapa en liten funktion för att göra det "
"arbete som krävs, och Pythons scoping-regler gör resultatet fult om den "
"lilla funktionen behöver ytterligare information.  Ta det första exemplet i "
"föregående stycke, att hitta alla strängar i listan som innehåller en given "
"delsträng.  Du skulle kunna skriva följande för att göra det::"

msgid ""
"# Given the list L, make a list of all strings\n"
"# containing the substring S.\n"
"sublist = filter( lambda s, substring=S:\n"
"                     string.find(s, substring) != -1,\n"
"                  L)"
msgstr ""
"# Givet listan L, gör en lista över alla strängar\n"
"# som innehåller delsträngen S.\n"
"sublist = filter( lambda s, substring=S:\n"
"                     string.find(s, substring) != -1,\n"
"                  L)"

msgid ""
"Because of Python's scoping rules, a default argument is used so that the "
"anonymous function created by the :keyword:`lambda` expression knows what "
"substring is being searched for.  List comprehensions make this cleaner::"
msgstr ""
"På grund av Pythons scoping-regler används ett standardargument så att den "
"anonyma funktion som skapas av :keyword:`lambda'-uttrycket vet vilken "
"delsträng som söks.  Listförståelse gör detta renare::"

msgid "sublist = [ s for s in L if string.find(s, S) != -1 ]"
msgstr "sublist = [ s for s in L if string.find(s, S) != -1 ]"

msgid "List comprehensions have the form::"
msgstr "Listkomprehensioner har formen::"

msgid ""
"[ expression for expr in sequence1\n"
"             for expr2 in sequence2 ...\n"
"             for exprN in sequenceN\n"
"             if condition ]"
msgstr ""
"[ uttryck för expr i sekvens1\n"
"             för expr2 i sekvens2 ...\n"
"             för exprN i sekvensN\n"
"             om villkor ]"

msgid ""
"The :keyword:`!for`...\\ :keyword:`!in` clauses contain the sequences to be "
"iterated over.  The sequences do not have to be the same length, because "
"they are *not* iterated over in parallel, but from left to right; this is "
"explained more clearly in the following paragraphs.  The elements of the "
"generated list will be the successive values of *expression*.  The final :"
"keyword:`!if` clause is optional; if present, *expression* is only evaluated "
"and added to the result if *condition* is true."
msgstr ""
"Klausulerna :keyword:`!for`...\\ :keyword:`!in` innehåller de sekvenser som "
"skall itereras över.  Sekvenserna behöver inte vara lika långa, eftersom de "
"*inte* itereras parallellt, utan från vänster till höger; detta förklaras "
"tydligare i följande stycken.  Elementen i den genererade listan kommer att "
"vara de successiva värdena av *uttryck*.  Den avslutande :keyword:`!if`-"
"satsen är valfri; om den finns med utvärderas *uttryck* och läggs till i "
"resultatet endast om *villkor* är sant."

msgid ""
"To make the semantics very clear, a list comprehension is equivalent to the "
"following Python code::"
msgstr ""
"För att göra semantiken mycket tydlig är en listförståelse likvärdig med "
"följande Python-kod::"

msgid ""
"for expr1 in sequence1:\n"
"    for expr2 in sequence2:\n"
"    ...\n"
"        for exprN in sequenceN:\n"
"             if (condition):\n"
"                  # Append the value of\n"
"                  # the expression to the\n"
"                  # resulting list."
msgstr ""
"för expr1 i sekvens1:\n"
"    för expr2 i sekvens2:\n"
"    ...\n"
"        för exprN i sekvensN:\n"
"             if (villkor):\n"
"                  # Lägg till värdet av\n"
"                  # uttrycket till den\n"
"                  # resulterande listan."

msgid ""
"This means that when there are multiple :keyword:`!for`...\\ :keyword:`!in` "
"clauses, the resulting list will be equal to the product of the lengths of "
"all the sequences.  If you have two lists of length 3, the output list is 9 "
"elements long::"
msgstr ""
"Detta innebär att när det finns flera :keyword:`!for`...\\ :keyword:`!in`-"
"klausuler, kommer den resulterande listan att vara lika med produkten av "
"längden på alla sekvenser.  Om du har två listor med längden 3, är "
"utdatalistan 9 element lång::"

msgid ""
"seq1 = 'abc'\n"
"seq2 = (1,2,3)\n"
">>> [ (x,y) for x in seq1 for y in seq2]\n"
"[('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3), ('c', 1),\n"
"('c', 2), ('c', 3)]"
msgstr ""
"seq1 = \"abc\n"
"seq2 = (1,2,3)\n"
">>> [(x,y) for x in seq1 for y in seq2]\n"
"[('a', 1), ('a', 2), ('a', 3), ('b', 1), ('b', 2), ('b', 3), ('c', 1),\n"
"('c', 2), ('c', 3)]"

msgid ""
"To avoid introducing an ambiguity into Python's grammar, if *expression* is "
"creating a tuple, it must be surrounded with parentheses.  The first list "
"comprehension below is a syntax error, while the second one is correct::"
msgstr ""
"För att undvika att införa en tvetydighet i Pythons grammatik, om *uttryck* "
"skapar en tupel, måste den omges av parenteser.  Den första listförståelsen "
"nedan är ett syntaxfel, medan den andra är korrekt::"

msgid ""
"# Syntax error\n"
"[ x,y for x in seq1 for y in seq2]\n"
"# Correct\n"
"[ (x,y) for x in seq1 for y in seq2]"
msgstr ""
"# Syntaxfel\n"
"[ x,y för x i seq1 för y i seq2]\n"
"# Korrekt\n"
"[ (x,y) för x i seq1 för y i seq2]"

msgid ""
"The idea of list comprehensions originally comes from the functional "
"programming language Haskell (https://www.haskell.org).  Greg Ewing argued "
"most effectively for adding them to Python and wrote the initial list "
"comprehension patch, which was then discussed for a seemingly endless time "
"on the python-dev mailing list and kept up-to-date by Skip Montanaro."
msgstr ""
"Idén med listcomprehensions kommer ursprungligen från det funktionella "
"programmeringsspråket Haskell (https://www.haskell.org).  Greg Ewing "
"argumenterade mycket effektivt för att lägga till dem i Python och skrev den "
"första patchen för listförståelse, som sedan diskuterades under en till "
"synes oändlig tid på e-postlistan python-dev och hölls uppdaterad av Skip "
"Montanaro."

msgid "Augmented Assignment"
msgstr "Förstärkt uppdrag"

msgid ""
"Augmented assignment operators, another long-requested feature, have been "
"added to Python 2.0.  Augmented assignment operators include ``+=``, ``-=``, "
"``*=``, and so forth.  For example, the statement ``a += 2`` increments the "
"value of the variable  ``a`` by 2, equivalent to the slightly lengthier ``a "
"= a + 2``."
msgstr ""
"Augmented assignment operators, en annan länge efterfrågad funktion, har "
"lagts till i Python 2.0.  Förstärkta tilldelningsoperatorer inkluderar "
"``+=``, ``-=``, ``*=``, och så vidare.  Till exempel, uttalandet ``a += 2`` "
"ökar värdet på variabeln ``a`` med 2, vilket motsvarar den något längre ``a "
"= a + 2``."

msgid ""
"The full list of supported assignment operators is ``+=``, ``-=``, ``*=``, "
"``/=``, ``%=``, ``**=``, ``&=``, ``|=``, ``^=``, ``>>=``, and ``<<=``.  "
"Python classes can override the augmented assignment operators by defining "
"methods named :meth:`!__iadd__`, :meth:`!__isub__`, etc.  For example, the "
"following :class:`!Number` class stores a number and supports using += to "
"create a new instance with an incremented value."
msgstr ""
"Den fullständiga listan över tilldelningsoperatorer som stöds är ``+=``, ``-"
"=``, ``*=``, ``/=``, ``%=``, ``**=``, ``&=``, ``|=``, ``^=``, ``>>=`` och "
"``<<=``.  Python-klasser kan åsidosätta de utökade tilldelningsoperatorerna "
"genom att definiera metoder med namnet :meth:`!__iadd__`, :meth:`!__isub__`, "
"etc.  Till exempel lagrar följande :class:`!Number`-klass ett tal och stöder "
"användning av += för att skapa en ny instans med ett ökat värde."

msgid ""
"class Number:\n"
"    def __init__(self, value):\n"
"        self.value = value\n"
"    def __iadd__(self, increment):\n"
"        return Number( self.value + increment)\n"
"\n"
"n = Number(5)\n"
"n += 3\n"
"print n.value"
msgstr ""
"klass Nummer:\n"
"    def __init__(self, värde):\n"
"        self.value = värde\n"
"    def __iadd__(self, inkrement):\n"
"        return Number( self.value + ökning)\n"
"\n"
"n = Antal(5)\n"
"n += 3\n"
"print n.värde"

msgid ""
"The :meth:`!__iadd__` special method is called with the value of the "
"increment, and should return a new instance with an appropriately modified "
"value; this return value is bound as the new value of the variable on the "
"left-hand side."
msgstr ""
"Specialmetoden :meth:`!__iadd__` anropas med värdet av inkrementet och ska "
"returnera en ny instans med ett lämpligt modifierat värde; detta returvärde "
"binds som det nya värdet av variabeln på vänster sida."

msgid ""
"Augmented assignment operators were first introduced in the C programming "
"language, and most C-derived languages, such as :program:`awk`, C++, Java, "
"Perl, and PHP also support them.  The augmented assignment patch was "
"implemented by Thomas Wouters."
msgstr ""
"Augmented assignment-operatorer introducerades först i programmeringsspråket "
"C, och de flesta C-avledda språk, till exempel :program:`awk`, C++, Java, "
"Perl och PHP stöder dem också.  Augmented assignment-patchen implementerades "
"av Thomas Wouters."

msgid "String Methods"
msgstr "Strängmetoder"

msgid ""
"Until now string-manipulation functionality was in the :mod:`string` module, "
"which was usually a front-end for the :mod:`!strop` module written in C.  "
"The addition of Unicode posed a difficulty for the :mod:`!strop` module, "
"because the functions would all need to be rewritten in order to accept "
"either 8-bit or Unicode strings.  For functions such as :func:`!string."
"replace`, which takes 3 string arguments, that means eight possible "
"permutations, and correspondingly complicated code."
msgstr ""
"Hittills har strängmanipuleringsfunktionaliteten legat i modulen :mod:"
"`string`, som vanligtvis var en frontend för modulen :mod:`!strop` skriven i "
"C. Tillägget av Unicode innebar en svårighet för modulen :mod:`!strop`, "
"eftersom alla funktioner måste skrivas om för att acceptera antingen 8-"
"bitars eller Unicode-strängar.  För funktioner som :func:`!string.replace`, "
"som tar 3 strängargument, innebär det åtta möjliga permutationer och därmed "
"komplicerad kod."

msgid ""
"Instead, Python 2.0 pushes the problem onto the string type, making string "
"manipulation functionality available through methods on both 8-bit strings "
"and Unicode strings.   ::"
msgstr ""
"Istället flyttar Python 2.0 problemet till strängtypen, vilket gör "
"strängmanipuleringsfunktionalitet tillgänglig via metoder på både 8-bitars "
"strängar och Unicode-strängar:"

msgid ""
">>> 'andrew'.capitalize()\n"
"'Andrew'\n"
">>> 'hostname'.replace('os', 'linux')\n"
"'hlinuxtname'\n"
">>> 'moshe'.find('sh')\n"
"2"
msgstr ""
">>> 'andrew'.capitalize()\n"
"'Andrew'\n"
">>> 'hostname'.replace('os', 'linux')\n"
"'hlinuxtname'\n"
">>> 'moshe'.find('sh')\n"
"2"

msgid ""
"One thing that hasn't changed, a noteworthy April Fools' joke "
"notwithstanding, is that Python strings are immutable. Thus, the string "
"methods return new strings, and do not modify the string on which they "
"operate."
msgstr ""
"En sak som inte har förändrats, trots ett anmärkningsvärt aprilskämt, är att "
"Python-strängar är oföränderliga. Strängmetoderna returnerar alltså nya "
"strängar och ändrar inte den sträng som de arbetar med."

msgid ""
"The old :mod:`string` module is still around for backwards compatibility, "
"but it mostly acts as a front-end to the new string methods."
msgstr ""
"Den gamla :mod:`string`-modulen finns fortfarande kvar för "
"bakåtkompatibilitet, men den fungerar mest som en frontend till de nya "
"string-metoderna."

msgid ""
"Two methods which have no parallel in pre-2.0 versions, although they did "
"exist in JPython for quite some time, are :meth:`!startswith` and :meth:`!"
"endswith`. ``s.startswith(t)`` is equivalent to ``s[:len(t)] == t``, while "
"``s.endswith(t)`` is equivalent to ``s[-len(t):] == t``."
msgstr ""
"Två metoder som inte har någon parallell i pre-2.0-versioner, även om de "
"fanns i JPython under ganska lång tid, är :meth:`!startswith` och :meth:`!"
"endswith`. ``s.startswith(t)`` är likvärdigt med ``s[:len(t)] == t``, medan "
"``s.endswith(t)`` är likvärdigt med ``s[-len(t):] == t``."

msgid ""
"One other method which deserves special mention is :meth:`!join`.  The :meth:"
"`!join` method of a string receives one parameter, a sequence of strings, "
"and is equivalent to the :func:`!string.join` function from the old :mod:"
"`string` module, with the arguments reversed. In other words, ``s."
"join(seq)`` is equivalent to the old ``string.join(seq, s)``."
msgstr ""
"En annan metod som förtjänar ett särskilt omnämnande är :meth:`!join`.  "
"Metoden :meth:`!join` för en sträng tar emot en parameter, en sekvens av "
"strängar, och är likvärdig med funktionen :func:`!string.join` från den "
"gamla modulen :mod:`string`, med omvända argument. Med andra ord, ``s."
"join(seq)`` är likvärdig med den gamla ``string.join(seq, s)``."

msgid "Garbage Collection of Cycles"
msgstr "Sophämtning av cykler"

msgid ""
"The C implementation of Python uses reference counting to implement garbage "
"collection.  Every Python object maintains a count of the number of "
"references pointing to itself, and adjusts the count as references are "
"created or destroyed.  Once the reference count reaches zero, the object is "
"no longer accessible, since you need to have a reference to an object to "
"access it, and if the count is zero, no references exist any longer."
msgstr ""
"C-implementeringen av Python använder referensräkning för att implementera "
"skräpinsamling.  Varje Python-objekt håller reda på antalet referenser som "
"pekar på det självt och justerar antalet när referenser skapas eller "
"förstörs.  När referensantalet når noll är objektet inte längre "
"tillgängligt, eftersom du måste ha en referens till ett objekt för att komma "
"åt det, och om antalet är noll finns det inte längre några referenser."

msgid ""
"Reference counting has some pleasant properties: it's easy to understand and "
"implement, and the resulting implementation is portable, fairly fast, and "
"reacts well with other libraries that implement their own memory handling "
"schemes.  The major problem with reference counting is that it sometimes "
"doesn't realise that objects are no longer accessible, resulting in a memory "
"leak.  This happens when there are cycles of references."
msgstr ""
"Referensräkning har några trevliga egenskaper: det är lätt att förstå och "
"implementera, och den resulterande implementationen är portabel, ganska "
"snabb och reagerar bra med andra bibliotek som implementerar sina egna "
"minneshanteringsscheman.  Det stora problemet med referensräkning är att det "
"ibland inte inser att objekt inte längre är tillgängliga, vilket resulterar "
"i en minnesläcka.  Detta händer när det finns cykler av referenser."

msgid ""
"Consider the simplest possible cycle,  a class instance which has a "
"reference to itself::"
msgstr ""
"Tänk på den enklaste möjliga cykeln, en klassinstans som har en referens "
"till sig själv::"

msgid ""
"instance = SomeClass()\n"
"instance.myself = instance"
msgstr ""
"instance = NågonKlass()\n"
"instance.myself = instans"

msgid ""
"After the above two lines of code have been executed, the reference count of "
"``instance`` is 2; one reference is from the variable named ``'instance'``, "
"and the other is from the ``myself`` attribute of the instance."
msgstr ""
"Efter att ovanstående två rader kod har exekverats är referensantalet för "
"``instance`` 2; en referens är från variabeln med namnet ``'instance`` och "
"den andra är från ``myself``-attributet för instansen."

msgid ""
"If the next line of code is ``del instance``, what happens?  The reference "
"count of ``instance`` is decreased by 1, so it has a reference count of 1; "
"the reference in the ``myself`` attribute still exists.  Yet the instance is "
"no longer accessible through Python code, and it could be deleted.  Several "
"objects can participate in a cycle if they have references to each other, "
"causing all of the objects to be leaked."
msgstr ""
"Om nästa kodrad är ``del instance``, vad händer då?  Referensantalet för "
"``instance`` minskas med 1, så att det har ett referensantal på 1; "
"referensen i attributet ``myself`` existerar fortfarande.  Instansen är dock "
"inte längre tillgänglig via Python-kod och kan raderas.  Flera objekt kan "
"delta i en cykel om de har referenser till varandra, vilket leder till att "
"alla objekt läcker."

msgid ""
"Python 2.0 fixes this problem by periodically executing a cycle detection "
"algorithm which looks for inaccessible cycles and deletes the objects "
"involved. A new :mod:`gc` module provides functions to perform a garbage "
"collection, obtain debugging statistics, and tuning the collector's "
"parameters."
msgstr ""
"Python 2.0 löser detta problem genom att periodiskt köra en algoritm för "
"cykeldetektering som letar efter otillgängliga cykler och raderar de "
"inblandade objekten. En ny :mod:`gc`-modul innehåller funktioner för att "
"utföra en skräpsamling, få felsökningsstatistik och ställa in samlarens "
"parametrar."

msgid ""
"Running the cycle detection algorithm takes some time, and therefore will "
"result in some additional overhead.  It is hoped that after we've gotten "
"experience with the cycle collection from using 2.0, Python 2.1 will be able "
"to minimize the overhead with careful tuning.  It's not yet obvious how much "
"performance is lost, because benchmarking this is tricky and depends "
"crucially on how often the program creates and destroys objects.  The "
"detection of cycles can be disabled when Python is compiled, if you can't "
"afford even a tiny speed penalty or suspect that the cycle collection is "
"buggy, by specifying the :option:`!--without-cycle-gc` switch when running "
"the :program:`configure` script."
msgstr ""
"Att köra cykeldetekteringsalgoritmen tar lite tid och kommer därför att "
"resultera i lite extra overhead.  Förhoppningen är att Python 2.1, efter att "
"vi har fått erfarenhet av cykelinsamlingen från att använda 2.0, ska kunna "
"minimera overhead med noggrann inställning.  Det är ännu inte uppenbart hur "
"mycket prestanda som går förlorad, eftersom benchmarking av detta är knepigt "
"och beror avgörande på hur ofta programmet skapar och förstör objekt.  "
"Detekteringen av cykler kan inaktiveras när Python kompileras, om du inte "
"har råd med ens en liten hastighetsnedsättning eller misstänker att "
"cykelinsamlingen är buggig, genom att ange :option:`!--without-cycle-gc` "
"switch när du kör :program:`configure` scriptet."

msgid ""
"Several people tackled this problem and contributed to a solution.  An early "
"implementation of the cycle detection approach was written by Toby Kelsey.  "
"The current algorithm was suggested by Eric Tiedemann during a visit to "
"CNRI, and Guido van Rossum and Neil Schemenauer wrote two different "
"implementations, which were later integrated by Neil.  Lots of other people "
"offered suggestions along the way; the March 2000 archives of the python-dev "
"mailing list contain most of the relevant discussion, especially in the "
"threads titled \"Reference cycle collection for Python\" and \"Finalization "
"again\"."
msgstr ""
"Flera personer tog sig an detta problem och bidrog till en lösning.  En "
"tidig implementering av metoden för cykeldetektering skrevs av Toby Kelsey.  "
"Den nuvarande algoritmen föreslogs av Eric Tiedemann under ett besök på "
"CNRI, och Guido van Rossum och Neil Schemenauer skrev två olika "
"implementeringar, som senare integrerades av Neil.  Många andra personer kom "
"med förslag under resans gång; arkiven från mars 2000 på e-postlistan python-"
"dev innehåller de flesta relevanta diskussionerna, särskilt i trådarna med "
"titlarna \"Reference cycle collection for Python\" och \"Finalization "
"again\"."

msgid "Other Core Changes"
msgstr "Övriga förändringar i kärnverksamheten"

msgid ""
"Various minor changes have been made to Python's syntax and built-in "
"functions. None of the changes are very far-reaching, but they're handy "
"conveniences."
msgstr ""
"Olika mindre ändringar har gjorts i Pythons syntax och inbyggda funktioner. "
"Ingen av ändringarna är särskilt långtgående, men de är praktiska "
"bekvämligheter."

msgid "Minor Language Changes"
msgstr "Mindre språkliga ändringar"

msgid ""
"A new syntax makes it more convenient to call a given function with a tuple "
"of arguments and/or a dictionary of keyword arguments. In Python 1.5 and "
"earlier, you'd use the :func:`!apply` built-in function: ``apply(f, args, "
"kw)`` calls the function :func:`!f` with the argument tuple *args* and the "
"keyword arguments in the dictionary *kw*.  :func:`!apply`  is the same in "
"2.0, but thanks to a patch from Greg Ewing, ``f(*args, **kw)`` is a shorter "
"and clearer way to achieve the same effect.  This syntax is symmetrical with "
"the syntax for defining functions::"
msgstr ""
"En ny syntax gör det mer praktiskt att anropa en given funktion med en tupel "
"av argument och/eller en ordbok med nyckelordsargument. I Python 1.5 och "
"tidigare skulle du använda den inbyggda funktionen :func:`!apply`: "
"``apply(f, args, kw)`` anropar funktionen :func:`!f` med argumenttupeln "
"*args* och nyckelordsargumenten i ordlistan *kw*. :func:`!apply` är densamma "
"i 2.0, men tack vare en patch från Greg Ewing är ``f(*args, **kw)`` ett "
"kortare och tydligare sätt att uppnå samma effekt.  Denna syntax är "
"symmetrisk med syntaxen för att definiera funktioner::"

msgid ""
"def f(*args, **kw):\n"
"    # args is a tuple of positional args,\n"
"    # kw is a dictionary of keyword args\n"
"    ..."
msgstr ""
"def f(*args, **kw):\n"
"    # args är en tupel av positionella args,\n"
"    # kw är en ordbok med nyckelordsargument\n"
"    ..."

msgid ""
"The ``print`` statement can now have its output directed to a file-like "
"object by following the ``print`` with  ``>> file``, similar to the "
"redirection operator in Unix shells. Previously you'd either have to use "
"the :meth:`!write` method of the file-like object, which lacks the "
"convenience and simplicity of ``print``, or you could assign a new value to "
"``sys.stdout`` and then restore the old value.  For sending output to "
"standard error, it's much easier to write this::"
msgstr ""
"``print``-satsen kan nu få sin utdata riktad till ett filliknande objekt "
"genom att följa ``print`` med ``>> file``, liknande omdirigeringsoperatorn i "
"Unix-skal. Tidigare var man tvungen att antingen använda :meth:`!write`-"
"metoden för det filliknande objektet, vilket inte är lika bekvämt och enkelt "
"som ``print``, eller så kunde man tilldela ett nytt värde till ``sys."
"stdout`` och sedan återställa det gamla värdet.  För att skicka utdata till "
"standardfel är det mycket enklare att skriva detta::"

msgid "print >> sys.stderr, \"Warning: action field not supplied\""
msgstr "print >> sys.stderr, \"Warning: action field not supplied\""

msgid ""
"Modules can now be renamed on importing them, using the syntax ``import "
"module as name`` or ``from module import name as othername``.  The patch was "
"submitted by Thomas Wouters."
msgstr ""
"Moduler kan nu döpas om när de importeras, med syntaxen ``import module as "
"name`` eller ``from module import name as othername``.  Korrigeringen "
"skickades in av Thomas Wouters."

msgid ""
"A new format style is available when using the ``%`` operator; '%r' will "
"insert the :func:`repr` of its argument.  This was also added from symmetry "
"considerations, this time for symmetry with the existing '%s' format style, "
"which inserts the :func:`str` of its argument.  For example, ``'%r %s' % "
"('abc', 'abc')`` returns a string containing ``'abc' abc``."
msgstr ""
"En ny formateringsstil är tillgänglig när operatorn ``%`` används; '%r' "
"infogar argumentets :func:`repr`.  Detta lades också till av symmetriskäl, "
"den här gången för symmetri med den befintliga formatstilen '%s', som "
"infogar :func:`str` för sitt argument.  Till exempel returnerar ``'%r %s' % "
"('abc', 'abc')`` en sträng som innehåller ``'abc' abc``."

msgid ""
"Previously there was no way to implement a class that overrode Python's "
"built-in :keyword:`in` operator and implemented a custom version.  ``obj in "
"seq`` returns true if *obj* is present in the sequence *seq*; Python "
"computes this by simply trying every index of the sequence until either "
"*obj* is found or an :exc:`IndexError` is encountered.  Moshe Zadka "
"contributed a patch which adds a :meth:`!__contains__` magic method for "
"providing a custom implementation for :keyword:`!in`. Additionally, new "
"built-in objects written in C can define what :keyword:`!in` means for them "
"via a new slot in the sequence protocol."
msgstr ""
"Tidigare fanns det inget sätt att implementera en klass som åsidosatte "
"Pythons inbyggda :keyword:`in`-operator och implementerade en anpassad "
"version.  ``obj in seq`` returnerar sant om *obj* finns i sekvensen *seq*; "
"Python beräknar detta genom att helt enkelt prova varje index i sekvensen "
"tills antingen *obj* hittas eller ett :exc:`IndexError` påträffas.  Moshe "
"Zadka bidrog med en patch som lägger till en :meth:`!__contains__` magisk "
"metod för att tillhandahålla en anpassad implementation för :keyword:`!in`. "
"Dessutom kan nya inbyggda objekt skrivna i C definiera vad :keyword:`!in` "
"betyder för dem via en ny slot i sekvensprotokollet."

msgid ""
"Earlier versions of Python used a recursive algorithm for deleting objects. "
"Deeply nested data structures could cause the interpreter to fill up the C "
"stack and crash; Christian Tismer rewrote the deletion logic to fix this "
"problem.  On a related note, comparing recursive objects recursed infinitely "
"and crashed; Jeremy Hylton rewrote the code to no longer crash, producing a "
"useful result instead.  For example, after this code::"
msgstr ""
"I tidigare versioner av Python användes en rekursiv algoritm för att radera "
"objekt. Djupt nästlade datastrukturer kunde leda till att tolken fyllde upp "
"C-stacken och kraschade; Christian Tismer skrev om raderingslogiken för att "
"åtgärda detta problem.  Jeremy Hylton skrev om koden så att den inte längre "
"kraschade, utan istället gav ett användbart resultat.  Till exempel efter "
"den här koden::"

msgid ""
"a = []\n"
"b = []\n"
"a.append(a)\n"
"b.append(b)"
msgstr ""
"a = []\n"
"b = []\n"
"a.append(a)\n"
"b.append(b)"

msgid ""
"The comparison ``a==b`` returns true, because the two recursive data "
"structures are isomorphic. See the thread \"trashcan and PR#7\" in the April "
"2000 archives of the python-dev mailing list for the discussion leading up "
"to this implementation, and some useful relevant links.    Note that "
"comparisons can now also raise exceptions. In earlier versions of Python, a "
"comparison operation such as ``cmp(a,b)`` would always produce an answer, "
"even if a user-defined :meth:`!__cmp__` method encountered an error, since "
"the resulting exception would simply be silently swallowed."
msgstr ""
"Jämförelsen ``a==b`` returnerar sant, eftersom de två rekursiva "
"datastrukturerna är isomorfa. Se tråden \"trashcan and PR#7\" i april 2000-"
"arkiven på e-postlistan python-dev för diskussionen som ledde fram till den "
"här implementationen och några användbara relevanta länkar.    Observera att "
"jämförelser nu också kan ge upphov till undantag. I tidigare versioner av "
"Python skulle en jämförelseoperation som ``cmp(a,b)`` alltid ge ett svar, "
"även om en användardefinierad :meth:`!__cmp__`-metod stötte på ett fel, "
"eftersom det resulterande undantaget helt enkelt skulle sväljas i tysthet."

msgid ""
"Work has been done on porting Python to 64-bit Windows on the Itanium "
"processor, mostly by Trent Mick of ActiveState.  (Confusingly, ``sys."
"platform`` is still ``'win32'`` on Win64 because it seems that for ease of "
"porting, MS Visual C++ treats code as 32 bit on Itanium.) PythonWin also "
"supports Windows CE; see the Python CE page at https://pythonce.sourceforge."
"net/ for more information."
msgstr ""
"Arbete har gjorts för att portera Python till 64-bitars Windows på Itanium-"
"processorn, mestadels av Trent Mick från ActiveState.  (Förvirrande nog är "
"``sys.platform`` fortfarande ``'win32`` på Win64 eftersom det verkar som om "
"MS Visual C++ för att underlätta portning behandlar kod som 32-bitars på "
"Itanium) PythonWin stöder också Windows CE; se Python CE-sidan på https://"
"pythonce.sourceforge.net/ för mer information."

msgid ""
"Another new platform is Darwin/MacOS X; initial support for it is in Python "
"2.0. Dynamic loading works, if you specify \"configure --with-dyld --with-"
"suffix=.x\". Consult the README in the Python source distribution for more "
"instructions."
msgstr ""
"En annan ny plattform är Darwin/MacOS X; initialt stöd för den finns i "
"Python 2.0. Dynamisk laddning fungerar om du anger \"configure --with-dyld --"
"with-suffix=.x\". Mer information finns i README i Pythons källdistribution."

msgid ""
"An attempt has been made to alleviate one of Python's warts, the often-"
"confusing :exc:`NameError` exception when code refers to a local variable "
"before the variable has been assigned a value.  For example, the following "
"code raises an exception on the ``print`` statement in both 1.5.2 and 2.0; "
"in 1.5.2 a :exc:`NameError` exception is raised, while 2.0 raises a new :exc:"
"`UnboundLocalError` exception. :exc:`UnboundLocalError` is a subclass of :"
"exc:`NameError`, so any existing code that expects :exc:`NameError` to be "
"raised should still work. ::"
msgstr ""
"Ett försök har gjorts för att lindra ett av Pythons problem, det ofta "
"förvirrande :exc:`NameError`-undantaget när kod refererar till en lokal "
"variabel innan variabeln har tilldelats ett värde.  Följande kod ger till "
"exempel upphov till ett undantag vid ``print``-satsen i både 1.5.2 och 2.0; "
"i 1.5.2 ges ett :exc:`NameError`-undantag, medan 2.0 ger upphov till ett "
"nytt :exc:`UnboundLocalError`-undantag. :exc:`UnboundLocalError` är en "
"underklass till :exc:`NameError`, så all befintlig kod som förväntar sig "
"att :exc:`NameError` ska ges upphov till bör fortfarande fungera:"

msgid ""
"def f():\n"
"    print \"i=\",i\n"
"    i = i + 1\n"
"f()"
msgstr ""
"def f():\n"
"    print \"i=\",i\n"
"    i = i + 1\n"
"f()"

msgid ""
"Two new exceptions, :exc:`TabError` and :exc:`IndentationError`, have been "
"introduced.  They're both subclasses of :exc:`SyntaxError`, and are raised "
"when Python code is found to be improperly indented."
msgstr ""
"Två nya undantag, :exc:`TabError` och :exc:`IndentationError`, har "
"introducerats.  De är båda underklasser till :exc:`SyntaxError` och uppstår "
"när Python-kod är felaktigt indragen."

msgid "Changes to Built-in Functions"
msgstr "Ändringar av inbyggda funktioner"

msgid ""
"A new built-in, ``zip(seq1, seq2, ...)``, has been added.  :func:`zip` "
"returns a list of tuples where each tuple contains the i-th element from "
"each of the argument sequences.  The difference between :func:`zip` and "
"``map(None, seq1, seq2)`` is that :func:`map` pads the sequences with "
"``None`` if the sequences aren't all of the same length, while :func:`zip` "
"truncates the returned list to the length of the shortest argument sequence."
msgstr ""
"En ny inbyggd funktion, ``zip(seq1, seq2, ...)``, har lagts till.  :func:"
"`zip` returnerar en lista med tupler där varje tupel innehåller det i:te "
"elementet från var och en av argumentsekvenserna.  Skillnaden mellan :func:"
"`zip` och ``map(None, seq1, seq2)`` är att :func:`map` fyller sekvenserna "
"med ``None`` om sekvenserna inte alla är lika långa, medan :func:`zip` "
"trunkerar den returnerade listan till längden på den kortaste "
"argumentsekvensen."

msgid ""
"The :func:`int` and :func:`!long` functions now accept an optional \"base\" "
"parameter when the first argument is a string. ``int('123', 10)`` returns "
"123, while ``int('123', 16)`` returns 291.  ``int(123, 16)`` raises a :exc:"
"`TypeError` exception with the message \"can't convert non-string with "
"explicit base\"."
msgstr ""
"Funktionerna :func:`int` och :func:`!long` accepterar nu en valfri \"base\"-"
"parameter när det första argumentet är en sträng. ``int('123', 10)`` "
"returnerar 123, medan ``int('123', 16)`` returnerar 291.  ``int(123, 16)`` "
"ger upphov till ett :exc:`TypeError`-undantag med meddelandet \"can't "
"convert non-string with explicit base\"."

msgid ""
"A new variable holding more detailed version information has been added to "
"the :mod:`sys` module.  ``sys.version_info`` is a tuple ``(major, minor, "
"micro, level, serial)`` For example, in a hypothetical 2.0.1beta1, ``sys."
"version_info`` would be ``(2, 0, 1, 'beta', 1)``. *level* is a string such "
"as ``\"alpha\"``, ``\"beta\"``, or ``\"final\"`` for a final release."
msgstr ""
"En ny variabel som innehåller mer detaljerad versionsinformation har lagts "
"till i modulen :mod:`sys`.  ```sys.version_info`` är en tupel ``(major, "
"minor, micro, level, serial)`` Till exempel, i en hypotetisk 2.0.1beta1, "
"skulle ``sys.version_info`` vara ``(2, 0, 1, 'beta', 1)``. *level* är en "
"sträng som ``\"alpha\"``, ``\"beta\"`` eller ``\"final\"`` för en slutlig "
"version."

msgid ""
"Dictionaries have an odd new method, ``setdefault(key, default)``, which "
"behaves similarly to the existing :meth:`!get` method.  However, if the key "
"is missing, :meth:`!setdefault` both returns the value of *default* as :meth:"
"`!get` would do, and also inserts it into the dictionary as the value for "
"*key*.  Thus, the following lines of code::"
msgstr ""
"Dictionaries har en udda ny metod, ``setdefault(key, default)``, som beter "
"sig på samma sätt som den befintliga metoden :meth:`!get`.  Men om nyckeln "
"saknas, returnerar :meth:`!setdefault` både värdet på *default* som :meth:`!"
"get` skulle göra, och infogar det också i ordboken som värdet för *key*.  "
"Således följande rader med kod::"

msgid ""
"if dict.has_key( key ): return dict[key]\n"
"else:\n"
"    dict[key] = []\n"
"    return dict[key]"
msgstr ""
"if dict.has_key( nyckel ): return dict[nyckel]\n"
"annat:\n"
"    dict[key] = []\n"
"    returnera dict[nyckel]"

msgid ""
"can be reduced to a single ``return dict.setdefault(key, [])`` statement."
msgstr "kan reduceras till en enda ``return dict.setdefault(key, [])``-sats."

msgid ""
"The interpreter sets a maximum recursion depth in order to catch runaway "
"recursion before filling the C stack and causing a core dump or GPF.. "
"Previously this limit was fixed when you compiled Python, but in 2.0 the "
"maximum recursion depth can be read and modified using :func:`sys."
"getrecursionlimit` and :func:`sys.setrecursionlimit`. The default value is "
"1000, and a rough maximum value for a given platform can be found by running "
"a new script, :file:`Misc/find_recursionlimit.py`."
msgstr ""
"Tolken ställer in ett maximalt rekursionsdjup för att fånga upp "
"okontrollerad rekursion innan C-stacken fylls och orsakar en kärndump eller "
"GPF. Tidigare fastställdes denna gräns när du kompilerade Python, men i 2.0 "
"kan det maximala rekursionsdjupet läsas och ändras med hjälp av :func:`sys."
"getrecursionlimit` och :func:`sys.setrecursionlimit`. Standardvärdet är "
"1000, och ett ungefärligt maximalt värde för en viss plattform kan hittas "
"genom att köra ett nytt skript, :file:`Misc/find_recursionlimit.py`."

msgid "Porting to 2.0"
msgstr "Portning till 2.0"

msgid ""
"New Python releases try hard to be compatible with previous releases, and "
"the record has been pretty good.  However, some changes are considered "
"useful enough, usually because they fix initial design decisions that turned "
"out to be actively mistaken, that breaking backward compatibility can't "
"always be avoided. This section lists the changes in Python 2.0 that may "
"cause old Python code to break."
msgstr ""
"Nya Python-utgåvor försöker hårt att vara kompatibla med tidigare utgåvor, "
"och resultatet har varit ganska bra.  Vissa ändringar anses dock vara "
"tillräckligt användbara, vanligtvis för att de åtgärdar ursprungliga "
"designbeslut som visade sig vara aktivt felaktiga, för att bryta "
"bakåtkompatibilitet inte alltid kan undvikas. I detta avsnitt listas de "
"ändringar i Python 2.0 som kan orsaka att gammal Python-kod bryts."

msgid ""
"The change which will probably break the most code is tightening up the "
"arguments accepted by some methods.  Some methods would take multiple "
"arguments and treat them as a tuple, particularly various list methods such "
"as :meth:`!append` and :meth:`!insert`. In earlier versions of Python, if "
"``L`` is a list, ``L.append( 1,2 )`` appends the tuple ``(1,2)`` to the "
"list.  In Python 2.0 this causes a :exc:`TypeError` exception to be raised, "
"with the message: 'append requires exactly 1 argument; 2 given'.  The fix is "
"to simply add an extra set of parentheses to pass both values as a tuple:  "
"``L.append( (1,2) )``."
msgstr ""
"Den förändring som förmodligen kommer att bryta mest kod är att strama upp "
"de argument som accepteras av vissa metoder.  Vissa metoder skulle ta flera "
"argument och behandla dem som en tupel, särskilt olika listmetoder som :meth:"
"`!append` och :meth:`!insert`. I tidigare versioner av Python, om ``L`` är "
"en lista, lägger ``L.append( 1,2 )`` till tupeln ``(1,2)`` till listan.  I "
"Python 2.0 orsakar detta ett :exc:`TypeError`-undantag, med meddelandet: "
"\"append kräver exakt 1 argument; 2 ges\".  Lösningen är att helt enkelt "
"lägga till en extra uppsättning parenteser för att skicka båda värdena som "
"en tupel:  ``L.append( (1,2) )``."

msgid ""
"The earlier versions of these methods were more forgiving because they used "
"an old function in Python's C interface to parse their arguments; 2.0 "
"modernizes them to use :c:func:`PyArg_ParseTuple`, the current argument "
"parsing function, which provides more helpful error messages and treats "
"multi-argument calls as errors.  If you absolutely must use 2.0 but can't "
"fix your code, you can edit :file:`Objects/listobject.c` and define the "
"preprocessor symbol ``NO_STRICT_LIST_APPEND`` to preserve the old behaviour; "
"this isn't recommended."
msgstr ""
"De tidigare versionerna av dessa metoder var mer förlåtande eftersom de "
"använde en gammal funktion i Pythons C-gränssnitt för att analysera sina "
"argument; 2.0 moderniserar dem till att använda :c:func:`PyArg_ParseTuple`, "
"den aktuella argumentanalysfunktionen, som ger mer användbara felmeddelanden "
"och behandlar anrop med flera argument som fel.  Om du absolut måste använda "
"2.0 men inte kan fixa din kod kan du redigera :file:`Objects/listobject.c` "
"och definiera preprocessorsymbolen ``NO_STRICT_LIST_APPEND`` för att bevara "
"det gamla beteendet; detta rekommenderas dock inte."

msgid ""
"Some of the functions in the :mod:`socket` module are still forgiving in "
"this way.  For example, ``socket.connect( ('hostname', 25) )`` is the "
"correct form, passing a tuple representing an IP address, but ``socket."
"connect('hostname', 25)`` also works. :meth:`socket.connect_ex <socket."
"socket.connect_ex>` and :meth:`socket.bind <socket.socket.bind>` are "
"similarly easy-going.  2.0alpha1 tightened these functions up, but because "
"the documentation actually used the erroneous multiple argument form, many "
"people wrote code which would break with the stricter checking.  GvR backed "
"out the changes in the face of public reaction, so for the :mod:`socket` "
"module, the documentation was fixed and the multiple argument form is simply "
"marked as deprecated; it *will* be tightened up again in a future Python "
"version."
msgstr ""
"Vissa av funktionerna i modulen :mod:`socket` är fortfarande förlåtande på "
"det här sättet.  Till exempel är ``socket.connect( ('hostname', 25) )`` den "
"korrekta formen, som skickar en tupel som representerar en IP-adress, men "
"``socket.connect('hostname', 25)`` fungerar också. :meth:`socket.connect_ex "
"<socket.socket.connect_ex>` och :meth:`socket.bind <socket.socket.bind>` är "
"på samma sätt lättsamma.  2.0alpha1 skärpte dessa funktioner, men eftersom "
"dokumentationen faktiskt använde den felaktiga formen med flera argument "
"skrev många människor kod som skulle brytas med den strängare kontrollen.  "
"GvR backade ur förändringarna inför allmänhetens reaktion, så för :mod:"
"`socket`-modulen fixades dokumentationen och formen med flera argument är "
"helt enkelt markerad som föråldrad; den *kommer* att skärpas igen i en "
"framtida Python-version."

msgid ""
"The ``\\x`` escape in string literals now takes exactly 2 hex digits.  "
"Previously it would consume all the hex digits following the 'x' and take "
"the lowest 8 bits of the result, so ``\\x123456`` was equivalent to "
"``\\x56``."
msgstr ""
"Escapen ``x`` i stränglitteraler tar nu exakt 2 hexsiffror.  Tidigare "
"användes alla hexadecimaler efter \"x\" och de lägsta 8 bitarna av "
"resultatet, så att \"x123456\" motsvarade \"x56\"."

msgid ""
"The :exc:`AttributeError` and :exc:`NameError` exceptions have a more "
"friendly error message, whose text will be something like ``'Spam' instance "
"has no attribute 'eggs'`` or ``name 'eggs' is not defined``.  Previously the "
"error message was just the missing attribute name ``eggs``, and code written "
"to take advantage of this fact will break in 2.0."
msgstr ""
"Undantagen :exc:`AttributeError` och :exc:`NameError` har fått ett mer "
"vänligt felmeddelande, vars text kommer att vara något i stil med ``'Spam'-"
"instansen har inget attribut 'ägg'`` eller ``namnet 'ägg' är inte "
"definierat``.  Tidigare var felmeddelandet bara det saknade attributnamnet "
"``ägg``, och kod skriven för att dra nytta av detta faktum kommer att brytas "
"i 2.0."

msgid ""
"Some work has been done to make integers and long integers a bit more "
"interchangeable.  In 1.5.2, large-file support was added for Solaris, to "
"allow reading files larger than 2 GiB; this made the :meth:`!tell` method of "
"file objects return a long integer instead of a regular integer.  Some code "
"would subtract two file offsets and attempt to use the result to multiply a "
"sequence or slice a string, but this raised a :exc:`TypeError`.  In 2.0, "
"long integers can be used to multiply or slice a sequence, and it'll behave "
"as you'd intuitively expect it to; ``3L * 'abc'`` produces 'abcabcabc', and "
"``(0,1,2,3)[2L:4L]`` produces (2,3). Long integers can also be used in "
"various contexts where previously only integers were accepted, such as in "
"the :meth:`!seek` method of file objects, and in the formats supported by "
"the ``%`` operator (``%d``, ``%i``, ``%x``, etc.).  For example, ``\"%d\" % "
"2L**64`` will produce the string ``18446744073709551616``."
msgstr ""
"En del arbete har gjorts för att göra heltal och långa heltal lite mer "
"utbytbara.  I 1.5.2 lades stöd för stora filer till för Solaris, för att "
"göra det möjligt att läsa filer större än 2 GiB; detta gjorde att :meth:`!"
"tell`-metoden för filobjekt returnerade ett långt heltal istället för ett "
"vanligt heltal.  Viss kod subtraherade två filoffset och försökte använda "
"resultatet för att multiplicera en sekvens eller skära en sträng, men detta "
"gav upphov till ett :exc:`TypeError`.  I 2.0 kan långa heltal användas för "
"att multiplicera eller skära en sekvens, och det kommer att bete sig som du "
"intuitivt förväntar dig; ``3L * 'abc'`` ger 'abcabcabc', och ``(0,1,2,3)"
"[2L:4L]`` ger (2,3). Långa heltal kan också användas i olika sammanhang där "
"tidigare endast heltal accepterades, t.ex. i metoden :meth:`!seek` för "
"filobjekt och i de format som stöds av operatorn ``%`` (``%d``, ``%i``, "
"``%x`` etc.).  Till exempel kommer ``\"%d\" % 2L**64`` att ge strängen "
"``18446744073709551616``."

msgid ""
"The subtlest long integer change of all is that the :func:`str` of a long "
"integer no longer has a trailing 'L' character, though :func:`repr` still "
"includes it.  The 'L' annoyed many people who wanted to print long integers "
"that looked just like regular integers, since they had to go out of their "
"way to chop off the character.  This is no longer a problem in 2.0, but code "
"which does ``str(longval)[:-1]`` and assumes the 'L' is there, will now lose "
"the final digit."
msgstr ""
"Den mest subtila förändringen för långa heltal är att :func:`str` av ett "
"långt heltal inte längre har ett efterföljande \"L\"-tecken, även om :func:"
"`repr` fortfarande innehåller det.  'L' irriterade många som ville skriva ut "
"långa heltal som såg ut precis som vanliga heltal, eftersom de var tvungna "
"att anstränga sig för att klippa bort tecknet.  Detta är inte längre ett "
"problem i 2.0, men kod som gör ``str(longval)[:-1]`` och antar att 'L' finns "
"där, kommer nu att förlora den sista siffran."

msgid ""
"Taking the :func:`repr` of a float now uses a different formatting precision "
"than :func:`str`.  :func:`repr` uses ``%.17g`` format string for C's :func:`!"
"sprintf`, while :func:`str` uses ``%.12g`` as before.  The effect is that :"
"func:`repr` may occasionally show more decimal places than  :func:`str`, for "
"certain numbers.  For example, the number 8.1 can't be represented exactly "
"in binary, so ``repr(8.1)`` is ``'8.0999999999999996'``, while str(8.1) is "
"``'8.1'``."
msgstr ""
"Att ta :func:`repr` av en float använder nu en annan formateringsprecision "
"än :func:`str`. :func:`repr` använder ``%.17g`` formatsträng för C:s :func:`!"
"sprintf`, medan :func:`str` använder ``%.12g`` som tidigare.  Effekten är "
"att :func:`repr` ibland kan visa fler decimaler än :func:`str`, för vissa "
"tal.  Till exempel kan talet 8,1 inte representeras exakt binärt, så "
"``repr(8,1)`` är ``'8,0999999999999996'``, medan str(8,1) är ``'8,1'``."

msgid ""
"The ``-X`` command-line option, which turned all standard exceptions into "
"strings instead of classes, has been removed; the standard exceptions will "
"now always be classes.  The :mod:`!exceptions` module containing the "
"standard exceptions was translated from Python to a built-in C module, "
"written by Barry Warsaw and Fredrik Lundh."
msgstr ""
"Kommandoradsalternativet ``-X``, som förvandlade alla standardundantag till "
"strängar istället för klasser, har tagits bort; standardundantagen kommer nu "
"alltid att vara klasser.  Modulen :mod:`!exceptions` som innehåller "
"standardundantagen har översatts från Python till en inbyggd C-modul, "
"skriven av Barry Warsaw och Fredrik Lundh."

msgid "Extending/Embedding Changes"
msgstr "Förändringar av utbyggnad och inbäddning"

msgid ""
"Some of the changes are under the covers, and will only be apparent to "
"people writing C extension modules or embedding a Python interpreter in a "
"larger application.  If you aren't dealing with Python's C API, you can "
"safely skip this section."
msgstr ""
"Vissa av ändringarna är dolda och kommer bara att vara uppenbara för "
"personer som skriver C-tilläggsmoduler eller bäddar in en Python-tolk i en "
"större applikation.  Om du inte har att göra med Pythons C API kan du hoppa "
"över det här avsnittet."

msgid ""
"The version number of the Python C API was incremented, so C extensions "
"compiled for 1.5.2 must be recompiled in order to work with 2.0.  On "
"Windows, it's not possible for Python 2.0 to import a third party extension "
"built for Python 1.5.x due to how Windows DLLs work, so Python will raise an "
"exception and the import will fail."
msgstr ""
"Versionsnumret för Python C API ökades, så C-tillägg som kompilerats för "
"1.5.2 måste kompileras om för att fungera med 2.0.  På Windows är det inte "
"möjligt för Python 2.0 att importera ett tredjepartstillägg som är byggt för "
"Python 1.5.x på grund av hur Windows DLL:er fungerar, så Python kommer att "
"ge upphov till ett undantag och importen misslyckas."

msgid ""
"Users of Jim Fulton's ExtensionClass module will be pleased to find out that "
"hooks have been added so that ExtensionClasses are now supported by :func:"
"`isinstance` and :func:`issubclass`. This means you no longer have to "
"remember to write code such as ``if type(obj) == myExtensionClass``, but can "
"use the more natural ``if isinstance(obj, myExtensionClass)``."
msgstr ""
"Användare av Jim Fultons ExtensionClass-modul kommer att bli glada över att "
"få reda på att krokar har lagts till så att ExtensionClasses nu stöds av :"
"func:`isinstance` och :func:`issubclass`. Detta innebär att du inte längre "
"behöver komma ihåg att skriva kod som ``if type(obj) == myExtensionClass``, "
"utan kan använda den mer naturliga ``if isinstance(obj, myExtensionClass)``."

msgid ""
"The :file:`Python/importdl.c` file, which was a mass of #ifdefs to support "
"dynamic loading on many different platforms, was cleaned up and reorganised "
"by Greg Stein.  :file:`importdl.c` is now quite small, and platform-specific "
"code has been moved into a bunch of :file:`Python/dynload_\\*.c` files.  "
"Another cleanup: there were also a number of :file:`my\\*.h` files in the "
"Include/ directory that held various portability hacks; they've been merged "
"into a single file, :file:`Include/pyport.h`."
msgstr ""
"Filen :file:`Python/importdl.c`, som var en massa #ifdefs för att stödja "
"dynamisk laddning på många olika plattformar, rensades upp och "
"omorganiserades av Greg Stein. :file:`importdl.c` är nu ganska liten, och "
"plattformsspecifik kod har flyttats till ett gäng :file:`Python/dynload_\\*."
"c`-filer.  En annan uppstädning: det fanns också ett antal :file:`my\\*.h`-"
"filer i Include/-katalogen som innehöll olika portabilitetshacks; de har "
"slagits samman till en enda fil, :file:`Include/pyport.h`."

msgid ""
"Vladimir Marangozov's long-awaited malloc restructuring was completed, to "
"make it easy to have the Python interpreter use a custom allocator instead "
"of C's standard :c:func:`malloc`.  For documentation, read the comments in :"
"file:`Include/pymem.h` and :file:`Include/objimpl.h`.  For the lengthy "
"discussions during which the interface was hammered out, see the web "
"archives of the 'patches' and 'python-dev' lists at python.org."
msgstr ""
"Vladimir Marangozovs efterlängtade malloc-omstrukturering slutfördes, för "
"att göra det enkelt att få Python-tolken att använda en anpassad allokering "
"istället för C:s standard :c:func:`malloc`.  För dokumentation, läs "
"kommentarerna i :file:`Include/pymem.h` och :file:`Include/objimpl.h`.  För "
"de långa diskussioner under vilka gränssnittet hamrades fram, se webbarkiven "
"för listorna 'patches' och 'python-dev' på python.org."

msgid ""
"Recent versions of the GUSI development environment for MacOS support POSIX "
"threads.  Therefore, Python's POSIX threading support now works on the "
"Macintosh.  Threading support using the user-space GNU ``pth`` library was "
"also contributed."
msgstr ""
"Nya versioner av utvecklingsmiljön GUSI för MacOS har stöd för POSIX-"
"trådar.  Därför fungerar nu Pythons stöd för POSIX-trådar på Macintosh.  "
"Stöd för trådar som använder GNU ``pth``-biblioteket i användarutrymmet har "
"också bidragit."

msgid ""
"Threading support on Windows was enhanced, too.  Windows supports thread "
"locks that use kernel objects only in case of contention; in the common case "
"when there's no contention, they use simpler functions which are an order of "
"magnitude faster.  A threaded version of Python 1.5.2 on NT is twice as slow "
"as an unthreaded version; with the 2.0 changes, the difference is only 10%.  "
"These improvements were contributed by Yakov Markovitch."
msgstr ""
"Stödet för trådar i Windows har också förbättrats.  Windows stöder trådlås "
"som använder kärnobjekt endast i händelse av konkurrens; i det vanliga "
"fallet när det inte finns någon konkurrens använder de enklare funktioner "
"som är en storleksordning snabbare.  En trådad version av Python 1.5.2 på NT "
"är dubbelt så långsam som en otrådad version; med ändringarna i 2.0 är "
"skillnaden bara 10%.  Yakov Markovitch har bidragit med dessa förbättringar."

msgid ""
"Python 2.0's source now uses only ANSI C prototypes, so compiling Python now "
"requires an ANSI C compiler, and can no longer be done using a compiler that "
"only supports K&R C."
msgstr ""
"Python 2.0:s källkod använder nu bara ANSI C-prototyper, så för att "
"kompilera Python krävs nu en ANSI C-kompilator och det går inte längre att "
"använda en kompilator som bara stöder K&R C."

msgid ""
"Previously the Python virtual machine used 16-bit numbers in its bytecode, "
"limiting the size of source files.  In particular, this affected the maximum "
"size of literal lists and dictionaries in Python source; occasionally people "
"who are generating Python code would run into this limit.  A patch by "
"Charles G. Waldman raises the limit from ``2**16`` to ``2**32``."
msgstr ""
"Tidigare använde den virtuella Python-maskinen 16-bitars tal i sin bytekod, "
"vilket begränsade storleken på källfiler.  I synnerhet påverkade detta den "
"maximala storleken på bokstavslistor och lexikon i Python-källkod; ibland "
"kunde personer som genererade Python-kod stöta på denna gräns.  En patch av "
"Charles G. Waldman höjer gränsen från ``2**16`` till ``2**32``."

msgid ""
"Three new convenience functions intended for adding constants to a module's "
"dictionary at module initialization time were added: :c:func:"
"`PyModule_AddObject`, :c:func:`PyModule_AddIntConstant`, and :c:func:"
"`PyModule_AddStringConstant`.  Each of these functions takes a module "
"object, a null-terminated C string containing the name to be added, and a "
"third argument for the value to be assigned to the name.  This third "
"argument is, respectively, a Python object, a C long, or a C string."
msgstr ""
"Tre nya bekvämlighetsfunktioner avsedda för att lägga till konstanter till "
"en moduls ordbok vid modulens initialiseringstid har lagts till: :c:func:"
"`PyModule_AddObject`, :c:func:`PyModule_AddIntConstant` och :c:func:"
"`PyModule_AddStringConstant`.  Var och en av dessa funktioner tar ett "
"modulobjekt, en nollavslutad C-sträng som innehåller det namn som ska läggas "
"till och ett tredje argument för det värde som ska tilldelas namnet.  Det "
"tredje argumentet är ett Python-objekt, en C-long eller en C-sträng."

msgid ""
"A wrapper API was added for Unix-style signal handlers. :c:func:"
"`PyOS_getsig` gets a signal handler and :c:func:`PyOS_setsig` will set a new "
"handler."
msgstr ""
"Ett omslags-API har lagts till för signalhanterare i Unix-stil. :c:func:"
"`PyOS_getsig` hämtar en signalhanterare och :c:func:`PyOS_setsig` ställer in "
"en ny hanterare."

msgid "Distutils: Making Modules Easy to Install"
msgstr "Distutils: Gör det enkelt att installera moduler"

msgid ""
"Before Python 2.0, installing modules was a tedious affair -- there was no "
"way to figure out automatically where Python is installed, or what compiler "
"options to use for extension modules.  Software authors had to go through an "
"arduous ritual of editing Makefiles and configuration files, which only "
"really work on Unix and leave Windows and MacOS unsupported.  Python users "
"faced wildly differing installation instructions which varied between "
"different extension packages, which made administering a Python installation "
"something of  a chore."
msgstr ""
"Före Python 2.0 var det en tråkig historia att installera moduler - det "
"fanns inget sätt att automatiskt ta reda på var Python var installerat eller "
"vilka kompilatoralternativ som skulle användas för tilläggsmoduler.  "
"Programvaruförfattare var tvungna att gå igenom en mödosam ritual med att "
"redigera Makefiles och konfigurationsfiler, som egentligen bara fungerar på "
"Unix och inte stöder Windows och MacOS.  Python-användare möttes av vitt "
"skilda installationsinstruktioner som varierade mellan olika tilläggspaket, "
"vilket gjorde det till något av en utmaning att administrera en Python-"
"installation."

msgid ""
"The SIG for distribution utilities, shepherded by Greg Ward, has created the "
"Distutils, a system to make package installation much easier.  They form the "
"``distutils`` package, a new part of Python's standard library. In the best "
"case, installing a Python module from source will require the same steps: "
"first you simply mean unpack the tarball or zip archive, and the run "
"\"``python setup.py install``\".  The platform will be automatically "
"detected, the compiler will be recognized, C extension modules will be "
"compiled, and the distribution installed into the proper directory.  "
"Optional command-line arguments provide more control over the installation "
"process, the distutils package offers many places to override defaults -- "
"separating the build from the install, building or installing in non-default "
"directories, and more."
msgstr ""
"SIG för distributionsverktyg, under ledning av Greg Ward, har skapat "
"Distutils, ett system för att göra paketinstallationen mycket enklare.  De "
"bildar paketet ``distutils``, en ny del av Pythons standardbibliotek. I "
"bästa fall kräver installation av en Python-modul från källan samma steg: "
"först betyder du helt enkelt packa upp tarball- eller zip-arkivet och kör "
"\"``python setup.py install``\".  Plattformen kommer automatiskt att "
"upptäckas, kompilatorn kommer att kännas igen, C-tilläggsmoduler kommer att "
"kompileras och distributionen installeras i rätt katalog.  Valfria "
"kommandoradsargument ger mer kontroll över installationsprocessen, distutils-"
"paketet erbjuder många ställen att åsidosätta standardinställningar - "
"separera byggandet från installationen, bygga eller installera i icke-"
"standardkataloger, med mera."

msgid ""
"In order to use the Distutils, you need to write a :file:`setup.py` script.  "
"For the simple case, when the software contains only .py files, a minimal :"
"file:`setup.py` can be just a few lines long::"
msgstr ""
"För att kunna använda Distutils måste du skriva ett :file:`setup.py`-"
"skript.  I det enkla fallet, när programvaran bara innehåller .py-filer, kan "
"en minimal :file:`setup.py` vara bara några rader lång::"

msgid ""
"from distutils.core import setup\n"
"setup (name = \"foo\", version = \"1.0\",\n"
"       py_modules = [\"module1\", \"module2\"])"
msgstr ""
"från distutils.core import setup\n"
"setup (namn = \"foo\", version = \"1.0\",\n"
"       py_modules = [\"modul1\", \"modul2\"])"

msgid ""
"The :file:`setup.py` file isn't much more complicated if the software "
"consists of a few packages::"
msgstr ""
"Filen :file:`setup.py` är inte mycket mer komplicerad om programvaran består "
"av ett fåtal paket::"

msgid ""
"from distutils.core import setup\n"
"setup (name = \"foo\", version = \"1.0\",\n"
"       packages = [\"package\", \"package.subpackage\"])"
msgstr ""
"från distutils.core import setup\n"
"setup (namn = \"foo\", version = \"1.0\",\n"
"       paket = [\"paket\", \"paket.underpaket\"])"

msgid ""
"A C extension can be the most complicated case; here's an example taken from "
"the PyXML package::"
msgstr ""
"Ett C-tillägg kan vara det mest komplicerade fallet; här är ett exempel "
"hämtat från PyXML-paketet::"

msgid ""
"from distutils.core import setup, Extension\n"
"\n"
"expat_extension = Extension('xml.parsers.pyexpat',\n"
"     define_macros = [('XML_NS', None)],\n"
"     include_dirs = [ 'extensions/expat/xmltok',\n"
"                      'extensions/expat/xmlparse' ],\n"
"     sources = [ 'extensions/pyexpat.c',\n"
"                 'extensions/expat/xmltok/xmltok.c',\n"
"                 'extensions/expat/xmltok/xmlrole.c', ]\n"
"       )\n"
"setup (name = \"PyXML\", version = \"0.5.4\",\n"
"       ext_modules =[ expat_extension ] )"
msgstr ""
"from distutils.core import setup, Extension\n"
"\n"
"expat_extension = Extension('xml.parsers.pyexpat',\n"
"     define_macros = [('XML_NS', None)],\n"
"     include_dirs = [ 'extensions/expat/xmltok',\n"
"                      'extensions/expat/xmlparse' ],\n"
"     sources = [ 'extensions/pyexpat.c',\n"
"                 'extensions/expat/xmltok/xmltok.c',\n"
"                 'extensions/expat/xmltok/xmlrole.c', ]\n"
"       )\n"
"setup (name = \"PyXML\", version = \"0.5.4\",\n"
"       ext_modules =[ expat_extension ] )"

msgid ""
"The Distutils can also take care of creating source and binary "
"distributions. The \"sdist\" command, run by \"``python setup.py sdist``', "
"builds a source distribution such as :file:`foo-1.0.tar.gz`. Adding new "
"commands isn't difficult, \"bdist_rpm\" and \"bdist_wininst\" commands have "
"already been contributed to create an RPM distribution and a Windows "
"installer for the software, respectively.  Commands to create other "
"distribution formats such as Debian packages and Solaris :file:`.pkg` files "
"are in various stages of development."
msgstr ""
"Distutils kan också ta hand om att skapa källkods- och binärdistributioner. "
"Kommandot \"sdist\", som körs av \"``python setup.py sdist``\", bygger en "
"källkodsdistribution som :file:`foo-1.0.tar.gz`. Det är inte svårt att lägga "
"till nya kommandon, kommandona \"bdist_rpm\" och \"bdist_wininst\" har redan "
"bidragit för att skapa en RPM-distribution respektive en Windows-"
"installation för programvaran.  Kommandon för att skapa andra "
"distributionsformat, t.ex. Debian-paket och Solaris :file:`.pkg`-filer, är i "
"olika utvecklingsstadier."

msgid ""
"All this is documented in a new manual, *Distributing Python Modules*, that "
"joins the basic set of Python documentation."
msgstr ""
"Allt detta finns dokumenterat i en ny manual, *Distributing Python Modules*, "
"som ansluter sig till den grundläggande Python-dokumentationen."

msgid "XML Modules"
msgstr "XML-moduler"

msgid ""
"Python 1.5.2 included a simple XML parser in the form of the :mod:`!xmllib` "
"module, contributed by Sjoerd Mullender.  Since 1.5.2's release, two "
"different interfaces for processing XML have become common: SAX2 (version 2 "
"of the Simple API for XML) provides an event-driven interface with some "
"similarities to :mod:`!xmllib`, and the DOM (Document Object Model) provides "
"a tree-based interface, transforming an XML document into a tree of nodes "
"that can be traversed and modified.  Python 2.0 includes a SAX2 interface "
"and a stripped-down DOM interface as part of the :mod:`xml` package. Here we "
"will give a brief overview of these new interfaces; consult the Python "
"documentation or the source code for complete details. The Python XML SIG is "
"also working on improved documentation."
msgstr ""
"Python 1.5.2 innehöll en enkel XML-parser i form av modulen :mod:`!xmllib`, "
"som Sjoerd Mullender bidrog med.  Sedan 1.5.2 släpptes har två olika "
"gränssnitt för bearbetning av XML blivit vanliga: SAX2 (version 2 av Simple "
"API for XML) tillhandahåller ett händelsedrivet gränssnitt med vissa "
"likheter med :mod:`!xmllib`, och DOM (Document Object Model) tillhandahåller "
"ett trädbaserat gränssnitt som omvandlar ett XML-dokument till ett träd med "
"noder som kan korsas och modifieras.  Python 2.0 innehåller ett SAX2-"
"gränssnitt och ett nedbantat DOM-gränssnitt som en del av paketet :mod:"
"`xml`. Här kommer vi att ge en kort översikt över dessa nya gränssnitt; se "
"Python-dokumentationen eller källkoden för fullständiga detaljer. Python XML "
"SIG arbetar också med att förbättra dokumentationen."

msgid "SAX2 Support"
msgstr "SAX2-stöd"

msgid ""
"SAX defines an event-driven interface for parsing XML.  To use SAX, you must "
"write a SAX handler class.  Handler classes inherit from various classes "
"provided by SAX, and override various methods that will then be called by "
"the XML parser.  For example, the :meth:`~xml.sax.handler.ContentHandler."
"startElement` and :meth:`~xml.sax.handler.ContentHandler.endElement` methods "
"are called for every starting and end tag encountered by the parser, the :"
"meth:`~xml.sax.handler.ContentHandler.characters` method is called for every "
"chunk of character data, and so forth."
msgstr ""
"SAX definierar ett händelsestyrt gränssnitt för parsning av XML.  För att "
"använda SAX måste du skriva en SAX-hanterarklass.  Hanteringsklasser ärver "
"från olika klasser som tillhandahålls av SAX och åsidosätter olika metoder "
"som sedan anropas av XML-parsern.  Till exempel anropas metoderna :meth:"
"`~xml.sax.handler.ContentHandler.startElement` och :meth:`~xml.sax.handler."
"ContentHandler.endElement` för varje start- och sluttagg som parsaren stöter "
"på, metoden :meth:`~xml.sax.handler.ContentHandler.characters` anropas för "
"varje bit teckeninformation, och så vidare."

msgid ""
"The advantage of the event-driven approach is that the whole document "
"doesn't have to be resident in memory at any one time, which matters if you "
"are processing really huge documents.  However, writing the SAX handler "
"class can get very complicated if you're trying to modify the document "
"structure in some elaborate way."
msgstr ""
"Fördelen med det händelsestyrda tillvägagångssättet är att hela dokumentet "
"inte behöver finnas i minnet vid varje tillfälle, vilket är viktigt om du "
"bearbetar riktigt stora dokument.  Att skriva SAX-hanterarklassen kan dock "
"bli mycket komplicerat om du försöker ändra dokumentstrukturen på något "
"detaljerat sätt."

msgid ""
"For example, this little example program defines a handler that prints a "
"message for every starting and ending tag, and then parses the file :file:"
"`hamlet.xml` using it::"
msgstr ""
"Det här lilla exempelprogrammet definierar till exempel en hanterare som "
"skriver ut ett meddelande för varje start- och sluttagg och sedan analyserar "
"filen :file:`hamlet.xml` med hjälp av den::"

msgid ""
"from xml import sax\n"
"\n"
"class SimpleHandler(sax.ContentHandler):\n"
"    def startElement(self, name, attrs):\n"
"        print 'Start of element:', name, attrs.keys()\n"
"\n"
"    def endElement(self, name):\n"
"        print 'End of element:', name\n"
"\n"
"# Create a parser object\n"
"parser = sax.make_parser()\n"
"\n"
"# Tell it what handler to use\n"
"handler = SimpleHandler()\n"
"parser.setContentHandler( handler )\n"
"\n"
"# Parse a file!\n"
"parser.parse( 'hamlet.xml' )"
msgstr ""
"från xml import sax\n"
"\n"
"klass SimpleHandler(sax.ContentHandler):\n"
"    def startElement(self, name, attrs):\n"
"        print 'Början på element:', name, attrs.keys()\n"
"\n"
"    def endElement(self, namn):\n"
"        print \"Slut på elementet:\", name\n"
"\n"
"# Skapa ett parser-objekt\n"
"parser = sax.make_parser()\n"
"\n"
"# Berätta vilken hanterare som ska användas\n"
"handler = SimpleHandler()\n"
"parser.setContentHandler( handler )\n"
"\n"
"# Parsa en fil!\n"
"parser.parse( 'hamlet.xml' )"

msgid ""
"For more information, consult the Python documentation, or the XML HOWTO at "
"https://pyxml.sourceforge.net/topics/howto/xml-howto.html."
msgstr ""
"Mer information finns i Python-dokumentationen eller i XML HOWTO på https://"
"pyxml.sourceforge.net/topics/howto/xml-howto.html."

msgid "DOM Support"
msgstr "DOM-stöd"

msgid ""
"The Document Object Model is a tree-based representation for an XML "
"document.  A top-level :class:`!Document` instance is the root of the tree, "
"and has a single child which is the top-level :class:`!Element` instance. "
"This :class:`!Element` has children nodes representing character data and "
"any sub-elements, which may have further children of their own, and so "
"forth.  Using the DOM you can traverse the resulting tree any way you like, "
"access element and attribute values, insert and delete nodes, and convert "
"the tree back into XML."
msgstr ""
"Document Object Model är en trädbaserad representation för ett XML-"
"dokument.  En toppnivå :class:`!Document`-instans är roten i trädet och har "
"ett enda barn som är toppnivå :class:`!Element`-instansen. Detta :class:`!"
"Element` har barnnoder som representerar teckeninformation och eventuella "
"underelement, som kan ha ytterligare egna barn, och så vidare.  Med hjälp av "
"DOM kan du korsa det resulterande trädet hur du vill, komma åt element- och "
"attributvärden, infoga och ta bort noder och konvertera trädet tillbaka till "
"XML."

msgid ""
"The DOM is useful for modifying XML documents, because you can create a DOM "
"tree, modify it by adding new nodes or rearranging subtrees, and then "
"produce a new XML document as output.  You can also construct a DOM tree "
"manually and convert it to XML, which can be a more flexible way of "
"producing XML output than simply writing ``<tag1>``...\\ ``</tag1>`` to a "
"file."
msgstr ""
"DOM är användbart för att modifiera XML-dokument, eftersom du kan skapa ett "
"DOM-träd, modifiera det genom att lägga till nya noder eller omorganisera "
"underträd och sedan producera ett nytt XML-dokument som utdata.  Du kan "
"också konstruera ett DOM-träd manuellt och konvertera det till XML, vilket "
"kan vara ett mer flexibelt sätt att producera XML-utdata än att bara "
"skriva<tag1>````...\\ ````</tag1> till en fil."

msgid ""
"The DOM implementation included with Python lives in the :mod:`xml.dom."
"minidom` module.  It's a lightweight implementation of the Level 1 DOM with "
"support for XML namespaces.  The  :func:`!parse` and :func:`!parseString` "
"convenience functions are provided for generating a DOM tree::"
msgstr ""
"Den DOM-implementering som ingår i Python finns i modulen :mod:`xml.dom."
"minidom`.  Det är en lättviktsimplementering av DOM på nivå 1 med stöd för "
"XML-namnrymder.  Bekvämlighetsfunktionerna :func:`!parse` och :func:`!"
"parseString` tillhandahålls för att generera ett DOM-träd::"

msgid ""
"from xml.dom import minidom\n"
"doc = minidom.parse('hamlet.xml')"
msgstr ""
"från xml.dom import minidom\n"
"doc = minidom.parse('hamlet.xml')"

msgid ""
"``doc`` is a :class:`!Document` instance.  :class:`!Document`, like all the "
"other DOM classes such as :class:`!Element` and :class:`Text`, is a subclass "
"of the :class:`!Node` base class.  All the nodes in a DOM tree therefore "
"support certain common methods, such as :meth:`!toxml` which returns a "
"string containing the XML representation of the node and its children.  Each "
"class also has special methods of its own; for example, :class:`!Element` "
"and :class:`!Document` instances have a method to find all child elements "
"with a given tag name. Continuing from the previous 2-line example::"
msgstr ""
"``doc`` är en :class:`!Document`-instans. :class:`!Document`, liksom alla "
"andra DOM-klasser som :class:`!Element` och :class:`Text`, är en underklass "
"av basklassen :class:`!Node`.  Alla noder i ett DOM-träd stöder därför vissa "
"gemensamma metoder, t.ex. :meth:`!toxml` som returnerar en sträng som "
"innehåller XML-representationen av noden och dess barn.  Varje klass har "
"också sina egna specialmetoder; till exempel har :class:`!Element` och :"
"class:`!Document` en metod för att hitta alla underordnade element med ett "
"givet taggnamn. Fortsättning från det tidigare 2-radiga exemplet::"

msgid ""
"perslist = doc.getElementsByTagName( 'PERSONA' )\n"
"print perslist[0].toxml()\n"
"print perslist[1].toxml()"
msgstr ""
"perslist = doc.getElementsByTagName( 'PERSONA' )\n"
"print perslist[0].toxml()\n"
"print perslist[1].toxml()"

msgid "For the *Hamlet* XML file, the above few lines output::"
msgstr "För XML-filen *Hamlet* ger ovanstående rader följande resultat::"

msgid ""
"<PERSONA>CLAUDIUS, king of Denmark. </PERSONA>\n"
"<PERSONA>HAMLET, son to the late, and nephew to the present king.</PERSONA>"
msgstr ""
"<PERSONA>CLAUDIUS, kung av Danmark. </PERSONA>\n"
"<PERSONA>HAMLET, son till den avlidne och brorson till den nuvarande kungen."
"</PERSONA>"

msgid ""
"The root element of the document is available as ``doc.documentElement``, "
"and its children can be easily modified by deleting, adding, or removing "
"nodes::"
msgstr ""
"Dokumentets rotelement finns tillgängligt som ``doc.documentElement``, och "
"dess barn kan enkelt ändras genom att ta bort, lägga till eller ta bort "
"noder::"

msgid ""
"root = doc.documentElement\n"
"\n"
"# Remove the first child\n"
"root.removeChild( root.childNodes[0] )\n"
"\n"
"# Move the new first child to the end\n"
"root.appendChild( root.childNodes[0] )\n"
"\n"
"# Insert the new first child (originally,\n"
"# the third child) before the 20th child.\n"
"root.insertBefore( root.childNodes[0], root.childNodes[20] )"
msgstr ""
"root = doc.documentElement\n"
"\n"
"# Ta bort det första barnet\n"
"root.removeChild( root.childNodes[0] )\n"
"\n"
"# Flytta det nya första barnet till slutet\n"
"root.appendChild( root.childNodes[0] )\n"
"\n"
"# Infoga det nya första barnet (ursprungligen,\n"
"# det tredje barnet) före det 20:e barnet.\n"
"root.insertBefore( root.childNodes[0], root.childNodes[20] )"

msgid ""
"Again, I will refer you to the Python documentation for a complete listing "
"of the different :class:`!Node` classes and their various methods."
msgstr ""
"Återigen hänvisar jag till Python-dokumentationen för en fullständig lista "
"över de olika :class:`!Node`-klasserna och deras olika metoder."

msgid "Relationship to PyXML"
msgstr "Förhållande till PyXML"

msgid ""
"The XML Special Interest Group has been working on XML-related Python code "
"for a while.  Its code distribution, called PyXML, is available from the "
"SIG's web pages at https://www.python.org/community/sigs/current/xml-sig. "
"The PyXML distribution also used the package name ``xml``.  If you've "
"written programs that used PyXML, you're probably wondering about its "
"compatibility with the 2.0 :mod:`xml` package."
msgstr ""
"XML Special Interest Group har arbetat med XML-relaterad Python-kod under en "
"tid.  Dess koddistribution, kallad PyXML, finns tillgänglig från SIG:s "
"webbsidor på https://www.python.org/community/sigs/current/xml-sig. PyXML-"
"distributionen använde också paketnamnet ``xml``.  Om du har skrivit program "
"som använder PyXML undrar du säkert om det är kompatibelt med paketet 2.0 :"
"mod:`xml`."

msgid ""
"The answer is that Python 2.0's :mod:`xml` package isn't compatible with "
"PyXML, but can be made compatible by installing a recent version PyXML.  "
"Many applications can get by with the XML support that is included with "
"Python 2.0, but more complicated applications will require that the full "
"PyXML package will be installed.  When installed, PyXML versions 0.6.0 or "
"greater will replace the :mod:`xml` package shipped with Python, and will be "
"a strict superset of the standard package, adding a bunch of additional "
"features.  Some of the additional features in PyXML include:"
msgstr ""
"Svaret är att Python 2.0:s :mod:`xml`-paket inte är kompatibelt med PyXML, "
"men kan göras kompatibelt genom att installera en ny version av PyXML.  "
"Många applikationer kan klara sig med XML-stödet som ingår i Python 2.0, men "
"mer komplicerade applikationer kräver att hela PyXML-paketet installeras.  "
"När PyXML version 0.6.0 eller senare installeras kommer den att ersätta :mod:"
"`xml`-paketet som levereras med Python, och kommer att vara en strikt "
"överuppsättning av standardpaketet och lägga till en massa ytterligare "
"funktioner.  Några av de ytterligare funktionerna i PyXML inkluderar:"

msgid "4DOM, a full DOM implementation from FourThought, Inc."
msgstr "4DOM, en fullständig DOM-implementering från FourThought, Inc."

msgid "The xmlproc validating parser, written by Lars Marius Garshol."
msgstr "Den validerande parsern xmlproc, skriven av Lars Marius Garshol."

msgid "The :mod:`!sgmlop` parser accelerator module, written by Fredrik Lundh."
msgstr "Parseracceleratormodulen :mod:`!sgmlop`, skriven av Fredrik Lundh."

msgid "Module changes"
msgstr "Moduländringar"

msgid ""
"Lots of improvements and bugfixes were made to Python's extensive standard "
"library; some of the affected modules include :mod:`readline`, :mod:"
"`ConfigParser <configparser>`, :mod:`!cgi`, :mod:`calendar`, :mod:`posix`, :"
"mod:`readline`, :mod:`!xmllib`, :mod:`!aifc`, :mod:`!chunk`, :mod:`wave`, :"
"mod:`random`, :mod:`shelve`, and :mod:`!nntplib`.  Consult the CVS logs for "
"the exact patch-by-patch details."
msgstr ""
"Massor av förbättringar och buggfixar har gjorts i Pythons omfattande "
"standardbibliotek; några av de berörda modulerna inkluderar :mod:"
"`readline`, :mod:`ConfigParser <configparser>`, :mod:`!cgi`, :mod:"
"`calendar`, :mod:`posix`, :mod:`readline`, :mod:`!xmllib`, :mod:`!aifc`, :"
"mod:`!chunk`, :mod:`wave`, :mod:`random`, :mod:`shelve`, och :mod:`!"
"nntplib`.  Se CVS-loggarna för exakta detaljer för varje patch."

msgid ""
"Brian Gallew contributed OpenSSL support for the :mod:`socket` module.  "
"OpenSSL is an implementation of the Secure Socket Layer, which encrypts the "
"data being sent over a socket.  When compiling Python, you can edit :file:"
"`Modules/Setup` to include SSL support, which adds an additional function to "
"the :mod:`socket` module: ``socket.ssl(socket, keyfile, certfile)``, which "
"takes a socket object and returns an SSL socket.  The :mod:`httplib <http>` "
"and :mod:`urllib` modules were also changed to support ``https://`` URLs, "
"though no one has implemented FTP or SMTP over SSL."
msgstr ""
"Brian Gallew har bidragit med OpenSSL-stöd för modulen :mod:`socket`.  "
"OpenSSL är en implementering av Secure Socket Layer, som krypterar data som "
"skickas över ett uttag.  När du kompilerar Python kan du redigera :file:"
"`Modules/Setup` för att inkludera SSL-stöd, vilket lägger till en "
"ytterligare funktion till :mod:`socket`-modulen: ``socket.ssl(socket, "
"keyfile, certfile)``, som tar ett socket-objekt och returnerar ett SSL-"
"socket.  Modulerna :mod:`httplib <http>` och :mod:`urllib` ändrades också "
"för att stödja ``https://`` URL:er, även om ingen har implementerat FTP "
"eller SMTP över SSL."

msgid ""
"The :mod:`httplib <http>` module has been rewritten by Greg Stein to support "
"HTTP/1.1."
msgstr ""
"Modulen :mod:`httplib <http>` har skrivits om av Greg Stein för att stödja "
"HTTP/1.1."

msgid ""
"Backward compatibility with the 1.5 version of :mod:`!httplib` is provided, "
"though using HTTP/1.1 features such as pipelining will require rewriting "
"code to use a different set of interfaces."
msgstr ""
"Bakåtkompatibilitet med 1.5-versionen av :mod:`!httplib` tillhandahålls, men "
"för att använda HTTP/1.1-funktioner som pipelining måste koden skrivas om "
"för att använda en annan uppsättning gränssnitt."

msgid ""
"The :mod:`!Tkinter` module now supports Tcl/Tk version 8.1, 8.2, or 8.3, and "
"support for the older 7.x versions has been dropped.  The Tkinter module now "
"supports displaying Unicode strings in Tk widgets. Also, Fredrik Lundh "
"contributed an optimization which makes operations like ``create_line`` and "
"``create_polygon`` much faster, especially when using lots of coordinates."
msgstr ""
"Modulen :mod:`!Tkinter` stöder nu Tcl/Tk version 8.1, 8.2 eller 8.3, och "
"stödet för de äldre 7.x-versionerna har tagits bort.  Tkinter-modulen stöder "
"nu visning av Unicode-strängar i Tk-widgetar. Fredrik Lundh har också "
"bidragit med en optimering som gör operationer som ``create_line`` och "
"``create_polygon`` mycket snabbare, särskilt när många koordinater används."

msgid ""
"The :mod:`curses` module has been greatly extended, starting from Oliver "
"Andrich's enhanced version, to provide many additional functions from "
"ncurses and SYSV curses, such as colour, alternative character set support, "
"pads, and mouse support.  This means the module is no longer compatible with "
"operating systems that only have BSD curses, but there don't seem to be any "
"currently maintained OSes that fall into this category."
msgstr ""
"Modulen :mod:`curses` har utökats kraftigt, med utgångspunkt från Oliver "
"Andrichs förbättrade version, för att tillhandahålla många ytterligare "
"funktioner från ncurses och SYSV curses, t.ex. färg, stöd för alternativa "
"teckenuppsättningar, paddar och musstöd.  Detta innebär att modulen inte "
"längre är kompatibel med operativsystem som endast har BSD-curses, men det "
"verkar inte finnas några operativsystem som för närvarande underhålls som "
"faller inom denna kategori."

msgid ""
"As mentioned in the earlier discussion of 2.0's Unicode support, the "
"underlying implementation of the regular expressions provided by the :mod:"
"`re` module has been changed.  SRE, a new regular expression engine written "
"by Fredrik Lundh and partially funded by Hewlett Packard, supports matching "
"against both 8-bit strings and Unicode strings."
msgstr ""
"Som nämndes i den tidigare diskussionen om 2.0:s Unicode-stöd har den "
"underliggande implementeringen av de reguljära uttryck som tillhandahålls av "
"modulen :mod:`re` ändrats.  SRE, en ny motor för reguljära uttryck skriven "
"av Fredrik Lundh och delvis finansierad av Hewlett Packard, stöder matchning "
"mot både 8-bitarssträngar och Unicode-strängar."

msgid "New modules"
msgstr "Nya moduler"

msgid ""
"A number of new modules were added.  We'll simply list them with brief "
"descriptions; consult the 2.0 documentation for the details of a particular "
"module."
msgstr ""
"Ett antal nya moduler har tillkommit.  Vi listar dem helt enkelt med korta "
"beskrivningar; se 2.0-dokumentationen för detaljerna i en viss modul."

msgid ""
":mod:`atexit`:  For registering functions to be called before the Python "
"interpreter exits. Code that currently sets ``sys.exitfunc`` directly should "
"be changed to  use the :mod:`atexit` module instead, importing :mod:`atexit` "
"and calling :func:`atexit.register` with  the function to be called on exit. "
"(Contributed by Skip Montanaro.)"
msgstr ""
":mod:`atexit`:  För registrering av funktioner som ska anropas innan Python-"
"tolken avslutas. Kod som för närvarande anger ``sys.exitfunc`` direkt bör "
"ändras så att den istället använder modulen :mod:`atexit`, importerar :mod:"
"`atexit` och anropar :func:`atexit.register` med den funktion som ska "
"anropas vid avslut. (Bidrag från Skip Montanaro.)"

msgid ""
":mod:`codecs`, :mod:`!encodings`, :mod:`unicodedata`:  Added as part of the "
"new Unicode support."
msgstr ""
":mod:`codecs`, :mod:`!encodings`, :mod:`unicodedata`:  Tillagd som en del av "
"det nya Unicode-stödet."

msgid ""
":mod:`filecmp`: Supersedes the old :mod:`!cmp`, :mod:`!cmpcache` and :mod:`!"
"dircmp` modules, which have now become deprecated. (Contributed by Gordon "
"MacMillan and Moshe Zadka.)"
msgstr ""
":mod:`filecmp`: Ersätter de gamla modulerna :mod:`!cmp`, :mod:`!cmpcache` "
"och :mod:`!dircmp`, som nu har blivit föråldrade. (Bidrag från Gordon "
"MacMillan och Moshe Zadka.)"

msgid ""
":mod:`gettext`: This module provides internationalization (I18N) and "
"localization (L10N) support for Python programs by providing an interface to "
"the GNU gettext message catalog library. (Integrated by Barry Warsaw, from "
"separate contributions by Martin  von Löwis, Peter Funk, and James "
"Henstridge.)"
msgstr ""
":mod:`gettext`: Denna modul ger stöd för internationalisering (I18N) och "
"lokalisering (L10N) för Python-program genom att tillhandahålla ett "
"gränssnitt till meddelandekatalogbiblioteket GNU gettext. (Integrerad av "
"Barry Warsaw, från separata bidrag av Martin von Löwis, Peter Funk och James "
"Henstridge)"

msgid ""
":mod:`!linuxaudiodev`: Support for the :file:`/dev/audio` device on Linux, a "
"twin to the existing :mod:`!sunaudiodev` module. (Contributed by Peter "
"Bosch, with fixes by Jeremy Hylton.)"
msgstr ""
":mod:`!linuxaudiodev`: Stöd för enheten :file:`/dev/audio` på Linux, en "
"tvilling till den befintliga modulen :mod:`!sunaudiodev`. (Bidrag från Peter "
"Bosch, med korrigeringar av Jeremy Hylton.)"

msgid ""
":mod:`mmap`: An interface to memory-mapped files on both Windows and Unix.  "
"A file's contents can be mapped directly into memory, at which point it "
"behaves like a mutable string, so its contents can be read and modified.  "
"They can even be passed to functions that expect ordinary strings, such as "
"the :mod:`re` module. (Contributed by Sam Rushing, with some extensions by A."
"M. Kuchling.)"
msgstr ""
":mod:`mmap`: Ett gränssnitt för minnesmappade filer på både Windows och "
"Unix.  En fils innehåll kan mappas direkt till minnet, varvid den beter sig "
"som en föränderlig sträng, så att dess innehåll kan läsas och ändras.  De "
"kan även skickas till funktioner som förväntar sig vanliga strängar, t.ex. "
"modulen :mod:`re`. (Bidrag från Sam Rushing, med vissa tillägg av A.M. "
"Kuchling.)"

msgid ""
":mod:`!pyexpat`: An interface to the Expat XML parser. (Contributed by Paul "
"Prescod.)"
msgstr ""
":mod:`!pyexpat`: Ett gränssnitt till XML-parsern Expat. (Bidrag från Paul "
"Prescod.)"

msgid ""
":mod:`robotparser <urllib.robotparser>`: Parse a :file:`robots.txt` file, "
"which is used for writing web spiders that politely avoid certain areas of a "
"web site.  The parser accepts the contents of a :file:`robots.txt` file, "
"builds a set of rules from it, and can then answer questions about the "
"fetchability of a given URL.  (Contributed by Skip Montanaro.)"
msgstr ""
":mod:`robotparser <urllib.robotparser>`: Parsa en :file:`robots.txt`-fil, "
"som används för att skriva webbspindlar som artigt undviker vissa områden på "
"en webbplats.  Parsern accepterar innehållet i en :file:`robots.txt`-fil, "
"bygger en uppsättning regler från den och kan sedan svara på frågor om "
"hämtbarheten för en given URL.  (Bidrag från Skip Montanaro.)"

msgid ""
":mod:`tabnanny`: A module/script to  check Python source code for ambiguous "
"indentation. (Contributed by Tim Peters.)"
msgstr ""
":mod:`tabnanny`: En modul/ett skript för att kontrollera Python-källkod för "
"tvetydig indragning. (Bidrag från Tim Peters.)"

msgid ""
":mod:`!UserString`: A base class useful for deriving objects that behave "
"like strings."
msgstr ""
":mod:`!UserString`: En basklass som är användbar för att härleda objekt som "
"beter sig som strängar."

msgid ""
":mod:`webbrowser`: A module that provides a platform independent way to "
"launch a web browser on a specific URL. For each platform, various browsers "
"are tried in a specific order. The user can alter which browser is launched "
"by setting the *BROWSER* environment variable.  (Originally inspired by Eric "
"S. Raymond's patch to :mod:`urllib` which added similar functionality, but "
"the final module comes from code originally  implemented by Fred Drake as :"
"file:`Tools/idle/BrowserControl.py`, and adapted for the standard library by "
"Fred.)"
msgstr ""
":mod:`webbrowser`: En modul som tillhandahåller ett plattformsoberoende sätt "
"att starta en webbläsare på en specifik URL. För varje plattform testas "
"olika webbläsare i en specifik ordning. Användaren kan ändra vilken "
"webbläsare som startas genom att ställa in miljövariabeln *BROWSER*.  "
"(Ursprungligen inspirerad av Eric S. Raymonds patch till :mod:`urllib` som "
"lade till liknande funktionalitet, men den slutliga modulen kommer från kod "
"som ursprungligen implementerades av Fred Drake som :file:`Tools/idle/"
"BrowserControl.py`, och anpassades för standardbiblioteket av Fred)"

msgid ""
":mod:`_winreg <winreg>`: An interface to the Windows registry.  :mod:`!"
"_winreg` is an adaptation of functions that have been part of PythonWin "
"since 1995, but has now been added to the core  distribution, and enhanced "
"to support Unicode. :mod:`!_winreg` was written by Bill Tutt and Mark "
"Hammond."
msgstr ""
":mod:`_winreg <winreg>`: Ett gränssnitt till Windows-registret. :mod:`!"
"_winreg` är en anpassning av funktioner som har ingått i PythonWin sedan "
"1995, men som nu har lagts till i kärndistributionen och förbättrats för att "
"stödja Unicode. :mod:`!_winreg` skrevs av Bill Tutt och Mark Hammond."

msgid ""
":mod:`zipfile`: A module for reading and writing ZIP-format archives.  These "
"are archives produced by :program:`PKZIP` on DOS/Windows or :program:`zip` "
"on Unix, not to be confused with :program:`gzip`\\ -format files (which are "
"supported by the :mod:`gzip` module) (Contributed by James C. Ahlstrom.)"
msgstr ""
":mod:`zipfile`: En modul för att läsa och skriva ZIP-formatarkiv.  Det här "
"är arkiv som produceras av :program:`PKZIP` på DOS/Windows eller :program:"
"`zip` på Unix, inte att förväxla med :program:`gzip` -formatfiler (som stöds "
"av modulen :mod:`gzip`) (Bidrag från James C. Ahlstrom.)"

msgid ""
":mod:`!imputil`: A module that provides a simpler way for writing customized "
"import hooks, in comparison to the existing :mod:`!ihooks` module.  "
"(Implemented by Greg Stein, with much discussion on python-dev along the "
"way.)"
msgstr ""
":mod:`!imputil`: En modul som ger ett enklare sätt att skriva anpassade "
"importkrokar, jämfört med den befintliga modulen :mod:`!ihooks`.  "
"(Implementerad av Greg Stein, med mycket diskussion på python-dev under "
"resans gång)"

msgid "IDLE Improvements"
msgstr "IDLE Förbättringar"

msgid ""
"IDLE is the official Python cross-platform IDE, written using Tkinter. "
"Python 2.0 includes IDLE 0.6, which adds a number of new features and "
"improvements.  A partial list:"
msgstr ""
"IDLE är Pythons officiella plattformsoberoende IDE, skriven med hjälp av "
"Tkinter. Python 2.0 inkluderar IDLE 0.6, som lägger till ett antal nya "
"funktioner och förbättringar.  En partiell lista:"

msgid ""
"UI improvements and optimizations, especially in the area of syntax "
"highlighting and auto-indentation."
msgstr ""
"Förbättringar och optimeringar av användargränssnittet, särskilt när det "
"gäller syntaxmarkering och automatisk indentation."

msgid ""
"The class browser now shows more information, such as the top level "
"functions in a module."
msgstr ""
"Klassbläddraren visar nu mer information, t.ex. funktionerna på högsta nivån "
"i en modul."

msgid ""
"Tab width is now a user settable option. When opening an existing Python "
"file, IDLE automatically detects the indentation conventions, and adapts."
msgstr ""
"Tabbredd är nu ett alternativ som kan ställas in av användaren. När du "
"öppnar en befintlig Python-fil upptäcker IDLE automatiskt "
"indragningskonventionerna och anpassar sig."

msgid ""
"There is now support for calling browsers on various platforms, used to open "
"the Python documentation in a browser."
msgstr ""
"Det finns nu stöd för att anropa webbläsare på olika plattformar, som "
"används för att öppna Python-dokumentationen i en webbläsare."

msgid ""
"IDLE now has a command line, which is largely similar to  the vanilla Python "
"interpreter."
msgstr "IDLE har nu en kommandorad som i stort sett liknar Pythons vaniljtolk."

msgid "Call tips were added in many places."
msgstr "Samtalstips har lagts till på många ställen."

msgid "IDLE can now be installed as a package."
msgstr "IDLE kan nu installeras som ett paket."

msgid "In the editor window, there is now a line/column bar at the bottom."
msgstr "I redigeringsfönstret finns det nu en rad-/kolumnrad längst ned."

msgid ""
"Three new keystroke commands: Check module (:kbd:`Alt-F5`), Import module (:"
"kbd:`F5`) and Run script (:kbd:`Ctrl-F5`)."
msgstr ""
"Tre nya tangenttryckningskommandon: Kontrollera modul (:kbd:`Alt-F5`), "
"Importera modul (:kbd:`F5`) och Kör skript (:kbd:`Ctrl-F5`)."

msgid "Deleted and Deprecated Modules"
msgstr "Borttagna och föråldrade moduler"

msgid ""
"A few modules have been dropped because they're obsolete, or because there "
"are now better ways to do the same thing.  The :mod:`!stdwin` module is "
"gone; it was for a platform-independent windowing toolkit that's no longer "
"developed."
msgstr ""
"Några moduler har tagits bort eftersom de är föråldrade eller för att det nu "
"finns bättre sätt att göra samma sak.  Modulen :mod:`!stdwin` är borta; den "
"var för en plattformsoberoende verktygslåda för fönster som inte längre "
"utvecklas."

msgid ""
"A number of modules have been moved to the :file:`lib-old` subdirectory: :"
"mod:`!cmp`, :mod:`!cmpcache`, :mod:`!dircmp`, :mod:`!dump`,  :mod:`!find`, :"
"mod:`!grep`, :mod:`!packmail`,  :mod:`!poly`, :mod:`!util`, :mod:`!"
"whatsound`, :mod:`!zmod`.  If you have code which relies on a module  that's "
"been moved to :file:`lib-old`, you can simply add that directory to ``sys."
"path``   to get them back, but you're encouraged to update any code that "
"uses these modules."
msgstr ""
"Ett antal moduler har flyttats till underkatalogen :file:`lib-old`: :mod:`!"
"cmp`, :mod:`!cmpcache`, :mod:`!dircmp`, :mod:`!dump`, :mod:`!find`, :mod:`!"
"grep`, :mod:`!packmail`, :mod:`!poly`, :mod:`!util`, :mod:`!whatsound`, :mod:"
"`!zmod`.  Om du har kod som förlitar sig på en modul som har flyttats till :"
"file:`lib-old`, kan du helt enkelt lägga till den katalogen i ``sys.path`` "
"för att få tillbaka dem, men du uppmanas att uppdatera all kod som använder "
"dessa moduler."

msgid "Acknowledgements"
msgstr "Tack till"

msgid ""
"The authors would like to thank the following people for offering "
"suggestions on various drafts of this article: David Bolen, Mark Hammond, "
"Gregg Hauser, Jeremy Hylton, Fredrik Lundh, Detlef Lannert, Aahz Maruch, "
"Skip Montanaro, Vladimir Marangozov, Tobias Polzin, Guido van Rossum, Neil "
"Schemenauer, and Russ Schmidt."
msgstr ""
"Författarna vill tacka följande personer för förslag på olika utkast till "
"denna artikel: David Bolen, Mark Hammond, Gregg Hauser, Jeremy Hylton, "
"Fredrik Lundh, Detlef Lannert, Aahz Maruch, Skip Montanaro, Vladimir "
"Marangozov, Tobias Polzin, Guido van Rossum, Neil Schemenauer och Russ "
"Schmidt."
