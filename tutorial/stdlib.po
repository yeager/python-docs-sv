# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Brief Tour of the Standard Library"
msgstr "Kort rundtur i standardbiblioteket"

msgid "Operating System Interface"
msgstr "Operativsystemets gränssnitt"

msgid ""
"The :mod:`os` module provides dozens of functions for interacting with the "
"operating system::"
msgstr ""
"Modulen :mod:`os` innehåller dussintals funktioner för att interagera med "
"operativsystemet::"

msgid ""
">>> import os\n"
">>> os.getcwd()      # Return the current working directory\n"
"'C:\\\\Python314'\n"
">>> os.chdir('/server/accesslogs')   # Change current working directory\n"
">>> os.system('mkdir today')   # Run the command mkdir in the system shell\n"
"0"
msgstr ""
">>> import os\n"
">>> os.getcwd()      # Return the current working directory\n"
"'C:\\\\Python314'\n"
">>> os.chdir('/server/accesslogs')   # Change current working directory\n"
">>> os.system('mkdir today')   # Run the command mkdir in the system shell\n"
"0"

msgid ""
"Be sure to use the ``import os`` style instead of ``from os import *``.  "
"This will keep :func:`os.open` from shadowing the built-in :func:`open` "
"function which operates much differently."
msgstr ""
"Var noga med att använda ``import os``-stilen istället för ``from os import "
"*``.  Detta förhindrar att :func:`os.open` skuggar den inbyggda :func:`open`-"
"funktionen som fungerar på ett helt annat sätt."

msgid ""
"The built-in :func:`dir` and :func:`help` functions are useful as "
"interactive aids for working with large modules like :mod:`os`::"
msgstr ""
"De inbyggda funktionerna :func:`dir` och :func:`help` är användbara som "
"interaktiva hjälpmedel för att arbeta med stora moduler som :mod:`os`::"

msgid ""
">>> import os\n"
">>> dir(os)\n"
"<returns a list of all module functions>\n"
">>> help(os)\n"
"<returns an extensive manual page created from the module's docstrings>"
msgstr ""
">>> import os\n"
">>> dir(os)\n"
"<returns a list of all module functions>\n"
">>> help(os)\n"
"<returns an extensive manual page created from the module's docstrings>"

msgid ""
"For daily file and directory management tasks, the :mod:`shutil` module "
"provides a higher level interface that is easier to use::"
msgstr ""
"För daglig fil- och kataloghantering tillhandahåller modulen :mod:`shutil` "
"ett gränssnitt på högre nivå som är enklare att använda::"

msgid ""
">>> import shutil\n"
">>> shutil.copyfile('data.db', 'archive.db')\n"
"'archive.db'\n"
">>> shutil.move('/build/executables', 'installdir')\n"
"'installdir'"
msgstr ""
">>> import shutil\n"
">>> shutil.copyfile('data.db', 'archive.db')\n"
"'archive.db'\n"
">>> shutil.move('/build/executables', 'installdir')\n"
"\"installdir"

msgid "File Wildcards"
msgstr "Jokertecken för filer"

msgid ""
"The :mod:`glob` module provides a function for making file lists from "
"directory wildcard searches::"
msgstr ""
"Modulen :mod:`glob` tillhandahåller en funktion för att skapa fillistor från "
"katalogsökningar med jokertecken::"

msgid ""
">>> import glob\n"
">>> glob.glob('*.py')\n"
"['primes.py', 'random.py', 'quote.py']"
msgstr ""
">>> import glob\n"
">>> glob.glob('*.py')\n"
"['primes.py', 'random.py', 'quote.py']"

msgid "Command Line Arguments"
msgstr "Argument på kommandoraden"

msgid ""
"Common utility scripts often need to process command line arguments. These "
"arguments are stored in the :mod:`sys` module's *argv* attribute as a list.  "
"For instance, let's take the following :file:`demo.py` file::"
msgstr ""
"Vanliga verktygsskript behöver ofta bearbeta kommandoradsargument. Dessa "
"argument lagras i modulen :mod:`sys` attribut *argv* som en lista.  Låt oss "
"till exempel ta följande :file:`demo.py` file::"

msgid ""
"# File demo.py\n"
"import sys\n"
"print(sys.argv)"
msgstr ""
"# File demo.py\n"
"import sys\n"
"print(sys.argv)"

msgid ""
"Here is the output from running ``python demo.py one two three`` at the "
"command line::"
msgstr ""
"Här är utdata från att köra ``python demo.py one two three`` på "
"kommandoraden::"

msgid "['demo.py', 'one', 'two', 'three']"
msgstr "['demo.py', 'ett', 'två', 'tre']"

msgid ""
"The :mod:`argparse` module provides a more sophisticated mechanism to "
"process command line arguments.  The following script extracts one or more "
"filenames and an optional number of lines to be displayed::"
msgstr ""
"Modulen :mod:`argparse` tillhandahåller en mer sofistikerad mekanism för att "
"bearbeta kommandoradsargument.  Följande skript extraherar ett eller flera "
"filnamn och ett valfritt antal rader som skall visas::"

msgid ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(\n"
"    prog='top',\n"
"    description='Show top lines from each file')\n"
"parser.add_argument('filenames', nargs='+')\n"
"parser.add_argument('-l', '--lines', type=int, default=10)\n"
"args = parser.parse_args()\n"
"print(args)"
msgstr ""
"import argparse\n"
"\n"
"parser = argparse.ArgumentParser(\n"
"    prog='top',\n"
"    description='Show top lines from each file')\n"
"parser.add_argument('filenames', nargs='+')\n"
"parser.add_argument('-l', '--lines', type=int, default=10)\n"
"args = parser.parse_args()\n"
"print(args)"

msgid ""
"When run at the command line with ``python top.py --lines=5 alpha.txt beta."
"txt``, the script sets ``args.lines`` to ``5`` and ``args.filenames`` to "
"``['alpha.txt', 'beta.txt']``."
msgstr ""
"När skriptet körs på kommandoraden med ``python top.py --lines=5 alpha.txt "
"beta.txt``, sätts ``args.lines`` till ``5`` och ``args.filenames`` till "
"``['alpha.txt', 'beta.txt']``."

msgid "Error Output Redirection and Program Termination"
msgstr "Omdirigering av felutgång och programavslutning"

msgid ""
"The :mod:`sys` module also has attributes for *stdin*, *stdout*, and "
"*stderr*. The latter is useful for emitting warnings and error messages to "
"make them visible even when *stdout* has been redirected::"
msgstr ""
"Modulen :mod:`sys` har också attribut för *stdin*, *stdout* och *stderr*. "
"Det senare är användbart för att avge varningar och felmeddelanden så att de "
"blir synliga även när *stdout* har omdirigerats::"

msgid ""
">>> sys.stderr.write('Warning, log file not found starting a new one\\n')\n"
"Warning, log file not found starting a new one"
msgstr ""
">>> sys.stderr.write('Varning, loggfil hittades inte starta en ny\\n')\n"
"Varning, loggfilen hittades inte när en ny startades"

msgid "The most direct way to terminate a script is to use ``sys.exit()``."
msgstr ""
"Det mest direkta sättet att avsluta ett skript är att använda ``sys.exit()``."

msgid "String Pattern Matching"
msgstr "Matchning av strängmönster"

msgid ""
"The :mod:`re` module provides regular expression tools for advanced string "
"processing. For complex matching and manipulation, regular expressions offer "
"succinct, optimized solutions::"
msgstr ""
"Modulen :mod:`re` tillhandahåller verktyg för reguljära uttryck för "
"avancerad strängbehandling. För komplex matchning och manipulation erbjuder "
"reguljära uttryck kortfattade, optimerade lösningar::"

msgid ""
">>> import re\n"
">>> re.findall(r'\\bf[a-z]*', 'which foot or hand fell fastest')\n"
"['foot', 'fell', 'fastest']\n"
">>> re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'cat in the the hat')\n"
"'cat in the hat'"
msgstr ""
">>> import re\n"
">>> re.findall(r'\\bf[a-z]*', 'vilken fot eller hand föll snabbast')\n"
"['fot', 'föll', 'snabbast']\n"
">>> re.sub(r'(\\b[a-z]+) \\1', r'\\1', 'katten i hatten')\n"
"\"katten i hatten"

msgid ""
"When only simple capabilities are needed, string methods are preferred "
"because they are easier to read and debug::"
msgstr ""
"När det bara behövs enkla funktioner är strängmetoder att föredra eftersom "
"de är lättare att läsa och felsöka::"

msgid ""
">>> 'tea for too'.replace('too', 'two')\n"
"'tea for two'"
msgstr ""
">>> 'te för för'.replace('för', 'två')\n"
"'te för två'"

msgid "Mathematics"
msgstr "Matematik"

msgid ""
"The :mod:`math` module gives access to the underlying C library functions "
"for floating-point math::"
msgstr ""
"Modulen :mod:`math` ger tillgång till de underliggande C-"
"biblioteksfunktionerna för flyttalsmatematik::"

msgid ""
">>> import math\n"
">>> math.cos(math.pi / 4)\n"
"0.70710678118654757\n"
">>> math.log(1024, 2)\n"
"10.0"
msgstr ""
">>> import math\n"
">>> math.cos(math.pi / 4)\n"
"0.70710678118654757\n"
">>> math.log(1024, 2)\n"
"10.0"

msgid "The :mod:`random` module provides tools for making random selections::"
msgstr ""
"Modulen :mod:`random` innehåller verktyg för att göra slumpmässiga urval::"

msgid ""
">>> import random\n"
">>> random.choice(['apple', 'pear', 'banana'])\n"
"'apple'\n"
">>> random.sample(range(100), 10)   # sampling without replacement\n"
"[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]\n"
">>> random.random()    # random float from the interval [0.0, 1.0)\n"
"0.17970987693706186\n"
">>> random.randrange(6)    # random integer chosen from range(6)\n"
"4"
msgstr ""
">>> import slumpmässig\n"
">>> random.choice(['äpple', 'päron', 'banan'])\n"
"'äpple'\n"
">>> slumpmässigt.prov(intervall(100), 10)   # provtagning utan ersättning\n"
"[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]\n"
">>> random.random() # slumpmässig flottör från intervallet [0,0, 1,0]\n"
"0.17970987693706186\n"
">>> random.randrange(6) # slumpmässigt heltal valt från intervallet(6)\n"
"4"

msgid ""
"The :mod:`statistics` module calculates basic statistical properties (the "
"mean, median, variance, etc.) of numeric data::"
msgstr ""
"Modulen :mod:`statistics` beräknar grundläggande statistiska egenskaper "
"(medelvärde, median, varians etc.) för numeriska data::"

msgid ""
">>> import statistics\n"
">>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\n"
">>> statistics.mean(data)\n"
"1.6071428571428572\n"
">>> statistics.median(data)\n"
"1.25\n"
">>> statistics.variance(data)\n"
"1.3720238095238095"
msgstr ""
">>> import statistik\n"
">>> data = [2,75, 1,75, 1,25, 0,25, 0,5, 1,25, 3,5]\n"
">>> statistik.medelvärde(data)\n"
"1.6071428571428572\n"
">>> statistik.median(data)\n"
"1.25\n"
">>> statistik.varians(data)\n"
"1.3720238095238095"

msgid ""
"The SciPy project <https://scipy.org> has many other modules for numerical "
"computations."
msgstr ""
"SciPy-projektet <https://scipy.org> har många andra moduler för numeriska "
"beräkningar."

msgid "Internet Access"
msgstr "Tillgång till internet"

msgid ""
"There are a number of modules for accessing the internet and processing "
"internet protocols. Two of the simplest are :mod:`urllib.request` for "
"retrieving data from URLs and :mod:`smtplib` for sending mail::"
msgstr ""
"Det finns ett antal moduler för att komma åt Internet och hantera "
"Internetprotokoll. Två av de enklaste är :mod:`urllib.request` för att hämta "
"data från URL:er och :mod:`smtplib` för att skicka e-post:"

msgid ""
">>> from urllib.request import urlopen\n"
">>> with urlopen('http://worldtimeapi.org/api/timezone/etc/UTC.txt') as "
"response:\n"
"...     for line in response:\n"
"...         line = line.decode()             # Convert bytes to a str\n"
"...         if line.startswith('datetime'):\n"
"...             print(line.rstrip())         # Remove trailing newline\n"
"...\n"
"datetime: 2022-01-01T01:36:47.689215+00:00\n"
"\n"
">>> import smtplib\n"
">>> server = smtplib.SMTP('localhost')\n"
">>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',\n"
"... \"\"\"To: jcaesar@example.org\n"
"... From: soothsayer@example.org\n"
"...\n"
"... Beware the Ides of March.\n"
"... \"\"\")\n"
">>> server.quit()"
msgstr ""
">>> from urllib.request import urlopen\n"
">>> with urlopen('http://worldtimeapi.org/api/timezone/etc/UTC.txt') as "
"response:\n"
"...     for line in response:\n"
"...         line = line.decode()             # Convert bytes to a str\n"
"...         if line.startswith('datetime'):\n"
"...             print(line.rstrip())         # Remove trailing newline\n"
"...\n"
"datetime: 2022-01-01T01:36:47.689215+00:00\n"
"\n"
">>> import smtplib\n"
">>> server = smtplib.SMTP('localhost')\n"
">>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',\n"
"... \"\"\"To: jcaesar@example.org\n"
"... From: soothsayer@example.org\n"
"...\n"
"... Beware the Ides of March.\n"
"... \"\"\")\n"
">>> server.quit()"

msgid "(Note that the second example needs a mailserver running on localhost.)"
msgstr ""
"(Observera att det andra exemplet kräver en mailserver som körs på localhost)"

msgid "Dates and Times"
msgstr "Datum och tider"

msgid ""
"The :mod:`datetime` module supplies classes for manipulating dates and times "
"in both simple and complex ways. While date and time arithmetic is "
"supported, the focus of the implementation is on efficient member extraction "
"for output formatting and manipulation.  The module also supports objects "
"that are timezone aware. ::"
msgstr ""
"Modulen :mod:`datetime` tillhandahåller klasser för att manipulera datum och "
"tider på både enkla och komplexa sätt. Aritmetik för datum och tid stöds, "
"men fokus för implementationen ligger på effektiv extrahering av medlemmar "
"för formatering och manipulation av utdata.  Modulen stöder också objekt som "
"är medvetna om tidszoner. ::"

msgid ""
">>> # dates are easily constructed and formatted\n"
">>> from datetime import date\n"
">>> now = date.today()\n"
">>> now\n"
"datetime.date(2003, 12, 2)\n"
">>> now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\")\n"
"'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'\n"
"\n"
">>> # dates support calendar arithmetic\n"
">>> birthday = date(1964, 7, 31)\n"
">>> age = now - birthday\n"
">>> age.days\n"
"14368"
msgstr ""
">>> # dates are easily constructed and formatted\n"
">>> from datetime import date\n"
">>> now = date.today()\n"
">>> now\n"
"datetime.date(2003, 12, 2)\n"
">>> now.strftime(\"%m-%d-%y. %d %b %Y is a %A on the %d day of %B.\")\n"
"'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'\n"
"\n"
">>> # dates support calendar arithmetic\n"
">>> birthday = date(1964, 7, 31)\n"
">>> age = now - birthday\n"
">>> age.days\n"
"14368"

msgid "Data Compression"
msgstr "Komprimering av data"

msgid ""
"Common data archiving and compression formats are directly supported by "
"modules including: :mod:`zlib`, :mod:`gzip`, :mod:`bz2`, :mod:`lzma`, :mod:"
"`zipfile` and :mod:`tarfile`. ::"
msgstr ""
"Vanliga format för dataarkivering och komprimering stöds direkt av moduler, "
"inklusive: :mod:`zlib`, :mod:`gzip`, :mod:`bz2`, :mod:`lzma`, :mod:`zipfile` "
"och :mod:`tarfile`:"

msgid ""
">>> import zlib\n"
">>> s = b'witch which has which witches wrist watch'\n"
">>> len(s)\n"
"41\n"
">>> t = zlib.compress(s)\n"
">>> len(t)\n"
"37\n"
">>> zlib.decompress(t)\n"
"b'witch which has which witches wrist watch'\n"
">>> zlib.crc32(s)\n"
"226805979"
msgstr ""
">>> import zlib\n"
">>> s = b'witch which has which witches wrist watch'\n"
">>> len(s)\n"
"41\n"
">>> t = zlib.compress(s)\n"
">>> len(t)\n"
"37\n"
">>> zlib.decompress(t)\n"
"b'witch which has which witches wrist watch'\n"
">>> zlib.crc32(s)\n"
"226805979"

msgid "Performance Measurement"
msgstr "Prestationsmätning"

msgid ""
"Some Python users develop a deep interest in knowing the relative "
"performance of different approaches to the same problem. Python provides a "
"measurement tool that answers those questions immediately."
msgstr ""
"Vissa Python-användare utvecklar ett djupt intresse för att känna till den "
"relativa prestandan hos olika metoder för samma problem. Python "
"tillhandahåller ett mätverktyg som svarar på dessa frågor omedelbart."

msgid ""
"For example, it may be tempting to use the tuple packing and unpacking "
"feature instead of the traditional approach to swapping arguments. The :mod:"
"`timeit` module quickly demonstrates a modest performance advantage::"
msgstr ""
"Det kan till exempel vara frestande att använda funktionen för att packa och "
"packa upp tuplar i stället för den traditionella metoden att byta argument. "
"Modulen :mod:`timeit` demonstrerar snabbt en blygsam prestandafördel::"

msgid ""
">>> from timeit import Timer\n"
">>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()\n"
"0.57535828626024577\n"
">>> Timer('a,b = b,a', 'a=1; b=2').timeit()\n"
"0.54962537085770791"
msgstr ""
">>> from timeit import Timer\n"
">>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()\n"
"0.57535828626024577\n"
">>> Timer('a,b = b,a', 'a=1; b=2').timeit()\n"
"0.54962537085770791"

msgid ""
"In contrast to :mod:`timeit`'s fine level of granularity, the :mod:`profile` "
"and :mod:`pstats` modules provide tools for identifying time critical "
"sections in larger blocks of code."
msgstr ""
"I motsats till :mod:`timeit`, som har en mycket hög detaljeringsgrad, ger "
"modulerna :mod:`profile` och :mod:`pstats` verktyg för att identifiera "
"tidskritiska avsnitt i större kodblock."

msgid "Quality Control"
msgstr "Kvalitetskontroll"

msgid ""
"One approach for developing high quality software is to write tests for each "
"function as it is developed and to run those tests frequently during the "
"development process."
msgstr ""
"En metod för att utveckla programvara av hög kvalitet är att skriva tester "
"för varje funktion när den utvecklas och att köra dessa tester ofta under "
"utvecklingsprocessen."

msgid ""
"The :mod:`doctest` module provides a tool for scanning a module and "
"validating tests embedded in a program's docstrings.  Test construction is "
"as simple as cutting-and-pasting a typical call along with its results into "
"the docstring. This improves the documentation by providing the user with an "
"example and it allows the doctest module to make sure the code remains true "
"to the documentation::"
msgstr ""
"Modulen :mod:`doctest` tillhandahåller ett verktyg för att skanna en modul "
"och validera tester som är inbäddade i ett programs dokumentsträngar.  "
"Testkonstruktionen är så enkel som att klippa och klistra in ett typiskt "
"anrop tillsammans med dess resultat i dokumentsträngen. Detta förbättrar "
"dokumentationen genom att ge användaren ett exempel och gör det möjligt för "
"doctest-modulen att se till att koden följer dokumentationen:"

msgid ""
"def average(values):\n"
"    \"\"\"Computes the arithmetic mean of a list of numbers.\n"
"\n"
"    >>> print(average([20, 30, 70]))\n"
"    40.0\n"
"    \"\"\"\n"
"    return sum(values) / len(values)\n"
"\n"
"import doctest\n"
"doctest.testmod()   # automatically validate the embedded tests"
msgstr ""
"def genomsnitt(värden):\n"
"    \"\"\"Beräknar det aritmetiska medelvärdet av en lista med tal.\n"
"\n"
"    >>> print(genomsnitt([20, 30, 70]))\n"
"    40.0\n"
"    \"\"\"\n"
"    return sum(värden) / len(värden)\n"
"\n"
"import doctest\n"
"doctest.testmod() # validerar automatiskt de inbäddade testerna"

msgid ""
"The :mod:`unittest` module is not as effortless as the :mod:`doctest` "
"module, but it allows a more comprehensive set of tests to be maintained in "
"a separate file::"
msgstr ""
"Modulen :mod:`unittest` är inte lika enkel som modulen :mod:`doctest`, men "
"den gör det möjligt att underhålla en mer omfattande uppsättning tester i en "
"separat fil::"

msgid ""
"import unittest\n"
"\n"
"class TestStatisticalFunctions(unittest.TestCase):\n"
"\n"
"    def test_average(self):\n"
"        self.assertEqual(average([20, 30, 70]), 40.0)\n"
"        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)\n"
"        with self.assertRaises(ZeroDivisionError):\n"
"            average([])\n"
"        with self.assertRaises(TypeError):\n"
"            average(20, 30, 70)\n"
"\n"
"unittest.main()  # Calling from the command line invokes all tests"
msgstr ""
"import unittest\n"
"\n"
"class TestStatisticalFunctions(unittest.TestCase):\n"
"\n"
"    def test_average(self):\n"
"        self.assertEqual(average([20, 30, 70]), 40.0)\n"
"        self.assertEqual(round(average([1, 5, 7]), 1), 4.3)\n"
"        with self.assertRaises(ZeroDivisionError):\n"
"            average([])\n"
"        with self.assertRaises(TypeError):\n"
"            average(20, 30, 70)\n"
"\n"
"unittest.main()  # Calling from the command line invokes all tests"

msgid "Batteries Included"
msgstr "Batterier ingår"

msgid ""
"Python has a \"batteries included\" philosophy.  This is best seen through "
"the sophisticated and robust capabilities of its larger packages. For "
"example:"
msgstr ""
"Python har en \"batterier ingår\"-filosofi.  Detta märks bäst genom de "
"sofistikerade och robusta funktionerna i de större paketen. Till exempel:"

msgid ""
"The :mod:`xmlrpc.client` and :mod:`xmlrpc.server` modules make implementing "
"remote procedure calls into an almost trivial task.  Despite the modules' "
"names, no direct knowledge or handling of XML is needed."
msgstr ""
"Modulerna :mod:`xmlrpc.client` och :mod:`xmlrpc.server` gör det nästan "
"trivialt att implementera remote procedure calls.  Trots modulernas namn "
"behövs ingen direkt kunskap om eller hantering av XML."

msgid ""
"The :mod:`email` package is a library for managing email messages, including "
"MIME and other :rfc:`2822`-based message documents. Unlike :mod:`smtplib` "
"and :mod:`poplib` which actually send and receive messages, the email "
"package has a complete toolset for building or decoding complex message "
"structures (including attachments) and for implementing internet encoding "
"and header protocols."
msgstr ""
"Paketet :mod:`email` är ett bibliotek för hantering av e-postmeddelanden, "
"inklusive MIME och andra :rfc:`2822`-baserade meddelandedokument. Till "
"skillnad från :mod:`smtplib` och :mod:`poplib`, som faktiskt skickar och tar "
"emot meddelanden, har e-postpaketet en komplett verktygslåda för att bygga "
"eller avkoda komplexa meddelandestrukturer (inklusive bilagor) och för att "
"implementera Internet-kodning och rubrikprotokoll."

msgid ""
"The :mod:`json` package provides robust support for parsing this popular "
"data interchange format.  The :mod:`csv` module supports direct reading and "
"writing of files in Comma-Separated Value format, commonly supported by "
"databases and spreadsheets.  XML processing is supported by the :mod:`xml."
"etree.ElementTree`, :mod:`xml.dom` and :mod:`xml.sax` packages. Together, "
"these modules and packages greatly simplify data interchange between Python "
"applications and other tools."
msgstr ""
"Paketet :mod:`json` ger robust stöd för parsning av detta populära "
"datautbytesformat.  Modulen :mod:`csv` stöder direkt läsning och skrivning "
"av filer i formatet Comma-Separated Value, som ofta används i databaser och "
"kalkylblad.  XML-bearbetning stöds av paketen :mod:`xml.etree.ElementTree`, :"
"mod:`xml.dom` och :mod:`xml.sax`. Tillsammans förenklar dessa moduler och "
"paket i hög grad datautbytet mellan Python-applikationer och andra verktyg."

msgid ""
"The :mod:`sqlite3` module is a wrapper for the SQLite database library, "
"providing a persistent database that can be updated and accessed using "
"slightly nonstandard SQL syntax."
msgstr ""
"Modulen :mod:`sqlite3` är en omslagsmodul för databasbiblioteket SQLite, som "
"tillhandahåller en beständig databas som kan uppdateras och nås med hjälp av "
"SQL-syntax som inte är helt standardiserad."

msgid ""
"Internationalization is supported by a number of modules including :mod:"
"`gettext`, :mod:`locale`, and the :mod:`codecs` package."
msgstr ""
"Internationalisering stöds av ett antal moduler, inklusive :mod:`gettext`, :"
"mod:`locale` och paketet :mod:`codecs`."

msgid "built-in function"
msgstr "inbyggd funktion"

msgid "help"
msgstr "hjälp"
