# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!venv` --- Creation of virtual environments"
msgstr ":mod:`!venv` --- Skapande av virtuella miljöer"

msgid "**Source code:** :source:`Lib/venv/`"
msgstr "**Källkod:** :källa:`Lib/venv/`"

msgid ""
"The :mod:`!venv` module supports creating lightweight \"virtual "
"environments\", each with their own independent set of Python packages "
"installed in their :mod:`site` directories. A virtual environment is created "
"on top of an existing Python installation, known as the virtual "
"environment's \"base\" Python, and by default is isolated from the packages "
"in the base environment, so that only those explicitly installed in the "
"virtual environment are available. See :ref:`sys-path-init-virtual-"
"environments` and :mod:`site`'s :ref:`virtual environments documentation "
"<site-virtual-environments-configuration>` for more information."
msgstr ""
"Modulen :mod:`!venv` stöder skapandet av lättviktiga \"virtuella miljöer\", "
"var och en med sin egen oberoende uppsättning Python-paket installerade i "
"sina :mod:`site`-kataloger. En virtuell miljö skapas ovanpå en befintlig "
"Python-installation, känd som den virtuella miljöns \"bas\"-Python, och är "
"som standard isolerad från paketen i basmiljön, så att endast de som "
"uttryckligen har installerats i den virtuella miljön är tillgängliga. Se :"
"ref:`sys-path-init-virtual-environments` och :mod:`site`:s :ref:``virtual "
"environments documentation <site-virtual-environments-configuration>` för "
"mer information."

msgid ""
"When used from within a virtual environment, common installation tools such "
"as :pypi:`pip` will install Python packages into a virtual environment "
"without needing to be told to do so explicitly."
msgstr ""
"När de används i en virtuell miljö kommer vanliga installationsverktyg som :"
"pypi:`pip` att installera Python-paket i en virtuell miljö utan att du "
"uttryckligen behöver be dem att göra det."

msgid "A virtual environment is (amongst other things):"
msgstr "En virtuell miljö är (bland annat):"

msgid ""
"Used to contain a specific Python interpreter and software libraries and "
"binaries which are needed to support a project (library or application). "
"These are by default isolated from software in other virtual environments "
"and Python interpreters and libraries installed in the operating system."
msgstr ""
"Används för att innehålla en specifik Python-tolk och programvarubibliotek "
"och binärfiler som behövs för att stödja ett projekt (bibliotek eller "
"applikation). Dessa är som standard isolerade från programvara i andra "
"virtuella miljöer och Python-tolkar och -bibliotek som är installerade i "
"operativsystemet."

msgid ""
"Contained in a directory, conventionally named ``.venv`` or ``venv`` in the "
"project directory, or under a container directory for lots of virtual "
"environments, such as ``~/.virtualenvs``."
msgstr ""
"Innehålls i en katalog som vanligtvis heter ``.venv`` eller ``venv`` i "
"projektkatalogen eller under en behållarkatalog för många virtuella miljöer, "
"t.ex. ``~/.virtualenvs``."

msgid "Not checked into source control systems such as Git."
msgstr "Inte checkat in i källkontrollsystem som Git."

msgid ""
"Considered as disposable -- it should be simple to delete and recreate it "
"from scratch. You don't place any project code in the environment."
msgstr ""
"Betraktas som engångsbruk - det ska vara enkelt att ta bort och återskapa "
"den från grunden. Du placerar inte någon projektkod i miljön."

msgid ""
"Not considered as movable or copyable -- you just recreate the same "
"environment in the target location."
msgstr ""
"Betraktas inte som flyttbar eller kopierbar - man återskapar bara samma "
"miljö på målplatsen."

msgid "See :pep:`405` for more background on Python virtual environments."
msgstr "Se :pep:`405` för mer bakgrund om virtuella Python-miljöer."

msgid ""
"`Python Packaging User Guide: Creating and using virtual environments "
"<https://packaging.python.org/guides/installing-using-pip-and-virtual-"
"environments/#create-and-use-virtual-environments>`__"
msgstr ""
"`Python Packaging Användarhandbok: Skapa och använda virtuella miljöer "
"<https://packaging.python.org/guides/installing-using-pip-and-virtual-"
"environments/#create-and-use-virtual-environments>`__"

msgid "Availability"
msgstr "Tillgänglighet"

msgid ""
"This module is not supported on :ref:`mobile platforms <mobile-"
"availability>` or :ref:`WebAssembly platforms <wasm-availability>`."
msgstr ""
"Denna modul stöds inte på :ref:`mobile platforms <mobile-availability>` "
"eller :ref:`WebAssembly platforms <wasm-availability>`."

msgid "Creating virtual environments"
msgstr "Skapa virtuella miljöer"

msgid ""
":ref:`Virtual environments <venv-def>` are created by executing the ``venv`` "
"module:"
msgstr ""
":ref:``Virtuella miljöer <venv-def>`` skapas genom att köra modulen ``venv``:"

msgid "python -m venv /path/to/new/virtual/environment"
msgstr "python -m venv /stig/till/ny/virtuell/miljö"

msgid ""
"This creates the target directory (including parent directories as needed) "
"and places a :file:`pyvenv.cfg` file in it with a ``home`` key pointing to "
"the Python installation from which the command was run. It also creates a :"
"file:`bin` (or :file:`Scripts` on Windows) subdirectory containing a copy or "
"symlink of the Python executable (as appropriate for the platform or "
"arguments used at environment creation time). It also creates a :file:`lib/"
"pythonX.Y/site-packages` subdirectory (on Windows, this is :file:`Lib\\site-"
"packages`). If an existing directory is specified, it will be re-used."
msgstr ""
"Detta skapar målkatalogen (inklusive överordnade kataloger efter behov) och "
"placerar en :file:`pyvenv.cfg`-fil i den med en ``home``-nyckel som pekar på "
"den Python-installation från vilken kommandot kördes. Det skapar också en :"
"file:`bin` (eller :file:`Scripts` i Windows) underkatalog som innehåller en "
"kopia eller symlänk av den körbara Python-filen (beroende på vilken "
"plattform eller vilka argument som användes när miljön skapades). Den skapar "
"också en :file:`lib/pythonX.Y/site-packages`-underkatalog (i Windows är "
"detta :file:`Lib\\site-packages`). Om en befintlig katalog anges kommer den "
"att återanvändas."

msgid ""
"The use of ``venv`` is now recommended for creating virtual environments."
msgstr ""
"Användningen av ``venv`` rekommenderas nu för att skapa virtuella miljöer."

msgid ""
":program:`pyvenv` was the recommended tool for creating virtual environments "
"for Python 3.3 and 3.4, and replaced in 3.5 by executing ``venv`` directly."
msgstr ""
":program:`pyvenv` var det rekommenderade verktyget för att skapa virtuella "
"miljöer för Python 3.3 och 3.4, och ersattes i 3.5 av att ``venv`` körs "
"direkt."

msgid "On Windows, invoke the ``venv`` command as follows:"
msgstr "I Windows anropar du kommandot ``venv`` på följande sätt:"

msgid "PS> python -m venv C:\\path\\to\\new\\virtual\\environment"
msgstr "PS> python -m venv C:\\path\\to\\new\\virtual\\environment"

msgid "The command, if run with ``-h``, will show the available options::"
msgstr ""
"Kommandot, om det körs med ``-h``, kommer att visa de tillgängliga "
"alternativen::"

msgid ""
"usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]\n"
"            [--upgrade] [--without-pip] [--prompt PROMPT] [--upgrade-deps]\n"
"            [--without-scm-ignore-files]\n"
"            ENV_DIR [ENV_DIR ...]\n"
"\n"
"Creates virtual Python environments in one or more target directories.\n"
"\n"
"Once an environment has been created, you may wish to activate it, e.g. by\n"
"sourcing an activate script in its bin directory."
msgstr ""
"användning: venv [-h] [--system-site-packages] [--symlänkar | --kopior] [--"
"clear]\n"
"            [--upgrade] [--without-pip] [--prompt PROMPT] [--upgrade-deps]\n"
"            [--without-scm-ignore-files]\n"
"            ENV_DIR [ENV_DIR ...]\n"
"\n"
"Skapar virtuella Python-miljöer i en eller flera målkataloger.\n"
"\n"
"När en miljö har skapats kanske du vill aktivera den, t.ex. genom att hämta "
"ett\n"
"ett activate-skript i dess bin-katalog."

msgid ""
"A required argument specifying the directory to create the environment in."
msgstr ""
"Ett obligatoriskt argument som anger den katalog där miljön ska skapas."

msgid ""
"Give the virtual environment access to the system site-packages directory."
msgstr "Ge den virtuella miljön tillgång till systemkatalogen site-packages."

msgid ""
"Try to use symlinks rather than copies, when symlinks are not the default "
"for the platform."
msgstr ""
"Försök att använda symlänkar i stället för kopior, när symlänkar inte är "
"standard för plattformen."

msgid ""
"Try to use copies rather than symlinks, even when symlinks are the default "
"for the platform."
msgstr ""
"Försök att använda kopior i stället för symlänkar, även om symlänkar är "
"standard för plattformen."

msgid ""
"Delete the contents of the environment directory if it already exists, "
"before environment creation."
msgstr ""
"Ta bort innehållet i miljökatalogen om den redan finns, innan miljön skapas."

msgid ""
"Upgrade the environment directory to use this version of Python, assuming "
"Python has been upgraded in-place."
msgstr ""
"Uppgradera miljökatalogen så att den använder den här versionen av Python, "
"förutsatt att Python har uppgraderats på plats."

msgid ""
"Skips installing or upgrading pip in the virtual environment (pip is "
"bootstrapped by default)."
msgstr ""
"Skippar installation eller uppgradering av pip i den virtuella miljön (pip "
"startas som standard)."

msgid "Provides an alternative prompt prefix for this environment."
msgstr "Ger ett alternativt promptprefix för denna miljö."

msgid "Upgrade core dependencies (pip) to the latest version in PyPI."
msgstr "Uppgradera kärnberoenden (pip) till den senaste versionen i PyPI."

msgid ""
"Skips adding SCM ignore files to the environment directory (Git is supported "
"by default)."
msgstr ""
"Skippar att lägga till SCM ignore-filer i miljökatalogen (Git stöds som "
"standard)."

msgid ""
"Installs pip by default, added the ``--without-pip``  and ``--copies`` "
"options."
msgstr ""
"Installerar pip som standard, lade till alternativen ``--without-pip`` och "
"``--copies``."

msgid ""
"In earlier versions, if the target directory already existed, an error was "
"raised, unless the ``--clear`` or ``--upgrade`` option was provided."
msgstr ""
"I tidigare versioner gavs ett felmeddelande ut om målkatalogen redan fanns, "
"såvida inte alternativet ``--clear`` eller ``--upgrade`` hade angetts."

msgid ""
"Add ``--upgrade-deps`` option to upgrade pip + setuptools to the latest on "
"PyPI."
msgstr ""
"Lägg till ``--upgrade-deps`` alternativ för att uppgradera pip + setuptools "
"till det senaste på PyPI."

msgid "``setuptools`` is no longer a core venv dependency."
msgstr "``setuptools`` är inte längre ett centralt venv-beroende."

msgid "Added the ``--without-scm-ignore-files`` option."
msgstr "Lagt till alternativet ``--without-scm-ignore-files``."

msgid "``venv`` now creates a :file:`.gitignore` file for Git by default."
msgstr "``venv`` skapar nu en :file:`.gitignore`-fil för Git som standard."

msgid ""
"While symlinks are supported on Windows, they are not recommended. Of "
"particular note is that double-clicking ``python.exe`` in File Explorer will "
"resolve the symlink eagerly and ignore the virtual environment."
msgstr ""
"Även om symlinks stöds i Windows rekommenderas de inte. Särskilt värt att "
"notera är att om du dubbelklickar på ``python.exe`` i File Explorer kommer "
"symbollänken att lösas ivrigt och ignorera den virtuella miljön."

msgid ""
"On Microsoft Windows, it may be required to enable the ``Activate.ps1`` "
"script by setting the execution policy for the user. You can do this by "
"issuing the following PowerShell command:"
msgstr ""
"I Microsoft Windows kan det vara nödvändigt att aktivera skriptet ``Activate."
"ps1`` genom att ange exekveringsprincipen för användaren. Du kan göra detta "
"genom att utfärda följande PowerShell-kommando:"

msgid ""
"PS C:\\> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser"
msgstr ""
"PS C:\\> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser"

msgid ""
"See `About Execution Policies <https://go.microsoft.com/fwlink/?"
"LinkID=135170>`_ for more information."
msgstr ""
"Se \"Om körningsprinciper <https://go.microsoft.com/fwlink/?"
"LinkID=135170>`_\" för mer information."

msgid ""
"The created :file:`pyvenv.cfg` file also includes the ``include-system-site-"
"packages`` key, set to ``true`` if ``venv`` is run with the ``--system-site-"
"packages`` option, ``false`` otherwise."
msgstr ""
"Den skapade filen :file:`pyvenv.cfg` innehåller även nyckeln ``include-"
"system-site-packages``, som sätts till ``true`` om ``venv`` körs med "
"alternativet ``--system-site-packages``, annars ``false``."

msgid ""
"Unless the ``--without-pip`` option is given, :mod:`ensurepip` will be "
"invoked to bootstrap ``pip`` into the virtual environment."
msgstr ""
"Om inte alternativet ``--without-pip`` anges, kommer :mod:`ensurepip`` att "
"anropas för att starta upp ``pip`` i den virtuella miljön."

msgid ""
"Multiple paths can be given to ``venv``, in which case an identical virtual "
"environment will be created, according to the given options, at each "
"provided path."
msgstr ""
"Flera sökvägar kan anges för ``venv``, i vilket fall en identisk virtuell "
"miljö kommer att skapas, i enlighet med de angivna alternativen, på varje "
"angiven sökväg."

msgid "How venvs work"
msgstr "Hur venv fungerar"

msgid ""
"When a Python interpreter is running from a virtual environment, :data:`sys."
"prefix` and :data:`sys.exec_prefix` point to the directories of the virtual "
"environment, whereas :data:`sys.base_prefix` and :data:`sys."
"base_exec_prefix` point to those of the base Python used to create the "
"environment. It is sufficient to check ``sys.prefix != sys.base_prefix`` to "
"determine if the current interpreter is running from a virtual environment."
msgstr ""
"När en Python-tolk körs från en virtuell miljö pekar :data:`sys.prefix` och :"
"data:`sys.exec_prefix` på katalogerna i den virtuella miljön, medan :data:"
"`sys.base_prefix` och :data:`sys.base_exec_prefix` pekar på katalogerna i "
"den bas-Python som användes för att skapa miljön. Det räcker att kontrollera "
"``sys.prefix != sys.base_prefix`` för att avgöra om den aktuella tolken körs "
"från en virtuell miljö."

msgid ""
"A virtual environment may be \"activated\" using a script in its binary "
"directory (``bin`` on POSIX; ``Scripts`` on Windows). This will prepend that "
"directory to your :envvar:`PATH`, so that running :program:`python` will "
"invoke the environment's Python interpreter and you can run installed "
"scripts without having to use their full path. The invocation of the "
"activation script is platform-specific (:samp:`{<venv>}` must be replaced by "
"the path to the directory containing the virtual environment):"
msgstr ""
"En virtuell miljö kan \"aktiveras\" med hjälp av ett skript i dess "
"binärkatalog (``bin`` på POSIX; ``Scripts`` på Windows). Då läggs katalogen "
"till i :envvar:`PATH`, så att om du kör :program:`python` kommer miljöns "
"Python-tolk att anropas och du kan köra installerade skript utan att behöva "
"använda hela sökvägen. Aktiveringsskriptets anrop är plattformsspecifikt (:"
"samp:`{<venv>}` måste ersättas med sökvägen till den katalog som innehåller "
"den virtuella miljön):"

msgid "Platform"
msgstr "Plattform"

msgid "Shell"
msgstr "Skal"

msgid "Command to activate virtual environment"
msgstr "Kommando för att aktivera virtuell miljö"

msgid "POSIX"
msgstr "POSIX"

msgid "bash/zsh"
msgstr "bash/zsh"

msgid ":samp:`$ source {<venv>}/bin/activate`"
msgstr ":samp:`$ källa {<venv>}/bin/activate`"

msgid "fish"
msgstr "fisk"

msgid ":samp:`$ source {<venv>}/bin/activate.fish`"
msgstr ":samp:`$ källa {<venv>}/bin/activate.fish`"

msgid "csh/tcsh"
msgstr "csh/tcsh"

msgid ":samp:`$ source {<venv>}/bin/activate.csh`"
msgstr ":samp:`$ källa {<venv>}/bin/activate.csh`"

msgid "pwsh"
msgstr "pwsh"

msgid ":samp:`$ {<venv>}/bin/Activate.ps1`"
msgstr ":samp:`$ {<venv>}/bin/Activate.ps1`"

msgid "Windows"
msgstr "Fönster"

msgid "cmd.exe"
msgstr "cmd.exe"

msgid ":samp:`C:\\\\> {<venv>}\\\\Scripts\\\\activate.bat`"
msgstr ":samp:`C:\\\\&gt; {<venv>}\\\\Scripts\\\\activate.bat`"

msgid "PowerShell"
msgstr "PowerShell"

msgid ":samp:`PS C:\\\\> {<venv>}\\\\Scripts\\\\Activate.ps1`"
msgstr ":samp:`PS C:\\\\&gt; {<venv>}\\\\Scripts\\\\Activate.ps1``"

msgid ":program:`fish` and :program:`csh` activation scripts."
msgstr ":program:`fish` och :program:`csh` aktiveringsskript."

msgid ""
"PowerShell activation scripts installed under POSIX for PowerShell Core "
"support."
msgstr ""
"PowerShell-aktiveringsskript installerade under POSIX för PowerShell Core-"
"stöd."

msgid ""
"You don't specifically *need* to activate a virtual environment, as you can "
"just specify the full path to that environment's Python interpreter when "
"invoking Python. Furthermore, all scripts installed in the environment "
"should be runnable without activating it."
msgstr ""
"Du behöver inte specifikt *aktivera* en virtuell miljö, eftersom du bara kan "
"ange den fullständiga sökvägen till den miljöns Python-tolk när du anropar "
"Python. Dessutom bör alla skript som är installerade i miljön kunna köras "
"utan att den aktiveras."

msgid ""
"In order to achieve this, scripts installed into virtual environments have a "
"\"shebang\" line which points to the environment's Python interpreter, :samp:"
"`#!/{<path-to-venv>}/bin/python`. This means that the script will run with "
"that interpreter regardless of the value of :envvar:`PATH`. On Windows, "
"\"shebang\" line processing is supported if you have the :ref:`launcher` "
"installed. Thus, double-clicking an installed script in a Windows Explorer "
"window should run it with the correct interpreter without the environment "
"needing to be activated or on the :envvar:`PATH`."
msgstr ""
"För att uppnå detta har skript som installeras i virtuella miljöer en "
"\"shebang\"-rad som pekar på miljöns Python-tolk, :samp:`#!/{<path-to-venv>}/"
"bin/python`. Det innebär att skriptet kommer att köras med den tolken "
"oavsett värdet på :envvar:`PATH`. På Windows stöds \"shebang\" radbehandling "
"om du har :ref:`launcher` installerat. Om du dubbelklickar på ett "
"installerat skript i ett Windows Explorer-fönster kommer det att köras med "
"rätt tolk utan att miljön behöver vara aktiverad eller på :envvar:`PATH`."

msgid ""
"When a virtual environment has been activated, the :envvar:`!VIRTUAL_ENV` "
"environment variable is set to the path of the environment. Since explicitly "
"activating a virtual environment is not required to use it, :envvar:`!"
"VIRTUAL_ENV` cannot be relied upon to determine whether a virtual "
"environment is being used."
msgstr ""
"När en virtuell miljö har aktiverats sätts miljövariabeln :envvar:`!"
"VIRTUAL_ENV` till sökvägen för miljön. Eftersom det inte krävs någon "
"explicit aktivering av en virtuell miljö för att använda den, kan man inte "
"förlita sig på :envvar:`!VIRTUAL_ENV` för att avgöra om en virtuell miljö "
"används."

msgid ""
"Because scripts installed in environments should not expect the environment "
"to be activated, their shebang lines contain the absolute paths to their "
"environment's interpreters. Because of this, environments are inherently non-"
"portable, in the general case. You should always have a simple means of "
"recreating an environment (for example, if you have a requirements file "
"``requirements.txt``, you can invoke ``pip install -r requirements.txt`` "
"using the environment's ``pip`` to install all of the packages needed by the "
"environment). If for any reason you need to move the environment to a new "
"location, you should recreate it at the desired location and delete the one "
"at the old location. If you move an environment because you moved a parent "
"directory of it, you should recreate the environment in its new location. "
"Otherwise, software installed into the environment may not work as expected."
msgstr ""
"Eftersom skript som installeras i miljöer inte bör förvänta sig att miljön "
"ska aktiveras innehåller deras shebang-rader de absoluta sökvägarna till "
"miljöns tolkar. På grund av detta är miljöer i sig inte portabla, i det "
"allmänna fallet. Du bör alltid ha ett enkelt sätt att återskapa en miljö (om "
"du till exempel har en kravfil ``requirements.txt`` kan du anropa ``pip "
"install -r requirements.txt`` med hjälp av miljöns ``pip`` för att "
"installera alla paket som behövs i miljön). Om du av någon anledning behöver "
"flytta miljön till en ny plats, bör du återskapa den på den önskade platsen "
"och ta bort den på den gamla platsen. Om du flyttar en miljö för att du har "
"flyttat en överordnad katalog till den, bör du återskapa miljön på dess nya "
"plats. Annars kan det hända att programvara som installerats i miljön inte "
"fungerar som förväntat."

msgid ""
"You can deactivate a virtual environment by typing ``deactivate`` in your "
"shell. The exact mechanism is platform-specific and is an internal "
"implementation detail (typically, a script or shell function will be used)."
msgstr ""
"Du kan inaktivera en virtuell miljö genom att skriva ``deactivate`` i ditt "
"skal. Den exakta mekanismen är plattformsspecifik och är en intern "
"implementeringsdetalj (vanligtvis används ett skript eller en skalfunktion)."

msgid "API"
msgstr "API"

msgid ""
"The high-level method described above makes use of a simple API which "
"provides mechanisms for third-party virtual environment creators to "
"customize environment creation according to their needs, the :class:"
"`EnvBuilder` class."
msgstr ""
"Den högnivåmetod som beskrivs ovan använder sig av ett enkelt API som "
"tillhandahåller mekanismer för tredjepartsskapare av virtuella miljöer för "
"att anpassa skapandet av miljöer efter deras behov, :class:`EnvBuilder`-"
"klassen."

msgid ""
"The :class:`EnvBuilder` class accepts the following keyword arguments on "
"instantiation:"
msgstr ""
"Klassen :class:`EnvBuilder` accepterar följande nyckelordsargument vid "
"instansiering:"

msgid ""
"*system_site_packages* -- a boolean value indicating that the system Python "
"site-packages should be available to the environment (defaults to ``False``)."
msgstr ""
"*system_site_packages* -- ett booleskt värde som anger att systemets Python-"
"site-paket ska vara tillgängliga för miljön (standard är ``False``)."

msgid ""
"*clear* -- a boolean value which, if true, will delete the contents of any "
"existing target directory, before creating the environment."
msgstr ""
"*clear* -- ett booleskt värde som, om det är sant, raderar innehållet i en "
"eventuell befintlig målkatalog innan miljön skapas."

msgid ""
"*symlinks* -- a boolean value indicating whether to attempt to symlink the "
"Python binary rather than copying."
msgstr ""
"*symlinks* -- ett booleanskt värde som anger om Python-binärfilen ska "
"försöka symlänkas i stället för att kopieras."

msgid ""
"*upgrade* -- a boolean value which, if true, will upgrade an existing "
"environment with the running Python - for use when that Python has been "
"upgraded in-place (defaults to ``False``)."
msgstr ""
"*upgrade* -- ett booleskt värde som, om det är sant, kommer att uppgradera "
"en befintlig miljö med den Python som körs - för användning när Python har "
"uppgraderats på plats (standard är ``False``)."

msgid ""
"*with_pip* -- a boolean value which, if true, ensures pip is installed in "
"the virtual environment. This uses :mod:`ensurepip` with the ``--default-"
"pip`` option."
msgstr ""
"*with_pip* -- ett booleskt värde som, om det är sant, säkerställer att pip "
"är installerat i den virtuella miljön. Detta använder :mod:`ensurepip` med "
"alternativet ``--default-pip``."

msgid ""
"*prompt* -- a string to be used after virtual environment is activated "
"(defaults to ``None`` which means directory name of the environment would be "
"used). If the special string ``\".\"`` is provided, the basename of the "
"current directory is used as the prompt."
msgstr ""
"*prompt* -- en sträng som ska användas när den virtuella miljön aktiveras "
"(standardvärdet är ``None``, vilket innebär att katalognamnet för miljön "
"används). Om den speciella strängen ``\".\"`` anges, används basnamnet för "
"den aktuella katalogen som prompt."

msgid "*upgrade_deps* -- Update the base venv modules to the latest on PyPI"
msgstr ""
"*upgrade_deps* -- Uppdatera basmodulerna för venv till de senaste på PyPI"

msgid ""
"*scm_ignore_files* -- Create ignore files based for the specified source "
"control managers (SCM) in the iterable. Support is defined by having a "
"method named ``create_{scm}_ignore_file``. The only value supported by "
"default is ``\"git\"`` via :meth:`create_git_ignore_file`."
msgstr ""
"*scm_ignore_files* -- Skapar ignoreringsfiler baserade på de angivna "
"källkontrollhanterarna (SCM) i iterabeln. Stöd definieras genom att ha en "
"metod med namnet ``create_{scm}_ignore_file``. Det enda värdet som stöds som "
"standard är ``\"git\"`` via :meth:`create_git_ignore_file`."

msgid "Added the ``with_pip`` parameter"
msgstr "Lagt till parametern ``with_pip``"

msgid "Added the ``prompt`` parameter"
msgstr "Lagt till parametern ``prompt``"

msgid "Added the ``upgrade_deps`` parameter"
msgstr "Lagt till parametern ``upgrade_deps``"

msgid "Added the ``scm_ignore_files`` parameter"
msgstr "Lagt till parametern ```cm_ignore_files``"

msgid ":class:`EnvBuilder` may be used as a base class."
msgstr ":class:`EnvBuilder` kan användas som basklass."

msgid ""
"Create a virtual environment by specifying the target directory (absolute or "
"relative to the current directory) which is to contain the virtual "
"environment.  The ``create`` method will either create the environment in "
"the specified directory, or raise an appropriate exception."
msgstr ""
"Skapa en virtuell miljö genom att ange den målkatalog (absolut eller "
"relativt den aktuella katalogen) som ska innehålla den virtuella miljön.  "
"Metoden ``create`` kommer antingen att skapa miljön i den angivna katalogen "
"eller ge upphov till ett lämpligt undantag."

msgid ""
"The ``create`` method of the :class:`EnvBuilder` class illustrates the hooks "
"available for subclass customization::"
msgstr ""
"Metoden ``create`` i klassen :class:`EnvBuilder` illustrerar de krokar som "
"finns tillgängliga för anpassning av underklasser::"

msgid ""
"def create(self, env_dir):\n"
"    \"\"\"\n"
"    Create a virtualized Python environment in a directory.\n"
"    env_dir is the target directory to create an environment in.\n"
"    \"\"\"\n"
"    env_dir = os.path.abspath(env_dir)\n"
"    context = self.ensure_directories(env_dir)\n"
"    self.create_configuration(context)\n"
"    self.setup_python(context)\n"
"    self.setup_scripts(context)\n"
"    self.post_setup(context)"
msgstr ""
"def create(self, env_dir):\n"
"    \"\"\"\n"
"    Skapa en virtualiserad Python-miljö i en katalog.\n"
"    env_dir är målkatalogen för att skapa en miljö i.\n"
"    \"\"\"\n"
"    env_dir = os.path.abspath(env_dir)\n"
"    context = self.ensure_directories(env_dir)\n"
"    self.create_configuration(sammanhang)\n"
"    self.setup_python(kontext)\n"
"    self.setup_scripts(kontext)\n"
"    self.post_setup(kontext)"

msgid ""
"Each of the methods :meth:`ensure_directories`, :meth:"
"`create_configuration`, :meth:`setup_python`, :meth:`setup_scripts` and :"
"meth:`post_setup` can be overridden."
msgstr ""
"Var och en av metoderna :meth:`ensure_directories`, :meth:"
"`create_configuration`, :meth:`setup_python`, :meth:`setup_scripts` och :"
"meth:`post_setup` kan åsidosättas."

msgid ""
"Creates the environment directory and all necessary subdirectories that "
"don't already exist, and returns a context object.  This context object is "
"just a holder for attributes (such as paths) for use by the other methods.  "
"If the :class:`EnvBuilder` is created with the arg ``clear=True``, contents "
"of the environment directory will be cleared and then all necessary "
"subdirectories will be recreated."
msgstr ""
"Skapar miljökatalogen och alla nödvändiga underkataloger som inte redan "
"finns, och returnerar ett kontextobjekt.  Detta kontextobjekt är bara en "
"hållare för attribut (t.ex. sökvägar) som kan användas av de andra "
"metoderna.  Om :class:`EnvBuilder` skapas med argumentet ``clear=True``, "
"kommer innehållet i miljökatalogen att rensas och sedan kommer alla "
"nödvändiga underkataloger att återskapas."

msgid ""
"The returned context object is a :class:`types.SimpleNamespace` with the "
"following attributes:"
msgstr ""
"Det returnerade kontextobjektet är en :class:`types.SimpleNamespace` med "
"följande attribut:"

msgid ""
"``env_dir`` - The location of the virtual environment. Used for "
"``__VENV_DIR__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""
"``env_dir`` - Platsen för den virtuella miljön. Används för ``__VENV_DIR__`` "
"i aktiveringsskript (se :meth:`install_scripts`)."

msgid ""
"``env_name`` - The name of the virtual environment. Used for "
"``__VENV_NAME__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""
"``env_name`` - Namnet på den virtuella miljön. Används för ``__VENV_NAME__`` "
"i aktiveringsskript (se :meth:`install_scripts`)."

msgid ""
"``prompt`` - The prompt to be used by the activation scripts. Used for "
"``__VENV_PROMPT__`` in activation scripts (see :meth:`install_scripts`)."
msgstr ""
"``prompt`` - Prompten som ska användas av aktiveringsskripten. Används för "
"``__VENV_PROMPT__`` i aktiveringsskript (se :meth:`install_scripts`)."

msgid ""
"``executable`` - The underlying Python executable used by the virtual "
"environment. This takes into account the case where a virtual environment is "
"created from another virtual environment."
msgstr ""
"``executable`` - Den underliggande Python-körbara filen som används av den "
"virtuella miljön. Detta tar hänsyn till det fall då en virtuell miljö skapas "
"från en annan virtuell miljö."

msgid "``inc_path`` - The include path for the virtual environment."
msgstr "``inc_path`` - Inkluderingssökvägen för den virtuella miljön."

msgid "``lib_path`` - The purelib path for the virtual environment."
msgstr "``lib_path`` - Sökvägen till purelib för den virtuella miljön."

msgid "``bin_path`` - The script path for the virtual environment."
msgstr "``bin_path`` - Skriptsökvägen för den virtuella miljön."

msgid ""
"``bin_name`` - The name of the script path relative to the virtual "
"environment location. Used for ``__VENV_BIN_NAME__`` in activation scripts "
"(see :meth:`install_scripts`)."
msgstr ""
"``bin_name`` - Namnet på skriptsökvägen i förhållande till den virtuella "
"miljöns plats. Används för ``__VENV_BIN_NAME__`` i aktiveringsskript (se :"
"meth:`install_scripts`)."

msgid ""
"``env_exe`` - The name of the Python interpreter in the virtual environment. "
"Used for ``__VENV_PYTHON__`` in activation scripts (see :meth:"
"`install_scripts`)."
msgstr ""
"``env_exe`` - Namnet på Python-tolken i den virtuella miljön. Används för "
"``__VENV_PYTHON__`` i aktiveringsskript (se :meth:`install_scripts`)."

msgid ""
"``env_exec_cmd`` - The name of the Python interpreter, taking into account "
"filesystem redirections. This can be used to run Python in the virtual "
"environment."
msgstr ""
"``env_exec_cmd`` - Namnet på Python-tolken, med hänsyn tagen till "
"omdirigeringar i filsystemet. Detta kan användas för att köra Python i den "
"virtuella miljön."

msgid ""
"The *venv* :ref:`sysconfig installation scheme <installation_paths>` is used "
"to construct the paths of the created directories."
msgstr ""
"*venv* :ref:`sysconfig-installationsschemat <installation_paths>` används "
"för att konstruera sökvägarna till de skapade katalogerna."

msgid ""
"The attribute ``lib_path`` was added to the context, and the context object "
"was documented."
msgstr ""
"Attributet ``lib_path`` lades till i kontexten och kontextobjektet "
"dokumenterades."

msgid "Creates the ``pyvenv.cfg`` configuration file in the environment."
msgstr "Skapar konfigurationsfilen ``pyvenv.cfg`` i miljön."

msgid ""
"Creates a copy or symlink to the Python executable in the environment. On "
"POSIX systems, if a specific executable ``python3.x`` was used, symlinks to "
"``python`` and ``python3`` will be created pointing to that executable, "
"unless files with those names already exist."
msgstr ""
"Skapar en kopia eller en symbolisk länk till den körbara Python-filen i "
"miljön. På POSIX-system, om en specifik körbar ``python3.x`` användes, "
"kommer symlänkar till ``python`` och ``python3`` att skapas som pekar på den "
"körbara filen, såvida inte filer med dessa namn redan finns."

msgid ""
"Installs activation scripts appropriate to the platform into the virtual "
"environment."
msgstr ""
"Installerar aktiveringsskript som är lämpliga för plattformen i den "
"virtuella miljön."

msgid ""
"Upgrades the core venv dependency packages (currently :pypi:`pip`) in the "
"environment. This is done by shelling out to the ``pip`` executable in the "
"environment."
msgstr ""
"Uppgraderar de centrala venv-beroendepaketen (för närvarande :pypi:`pip`) i "
"miljön. Detta görs genom att skriva ut till den körbara filen ``pip`` i "
"miljön."

msgid ":pypi:`setuptools` is no longer a core venv dependency."
msgstr ":pypi:`setuptools` är inte längre ett centralt venv-beroende."

msgid ""
"A placeholder method which can be overridden in third party implementations "
"to pre-install packages in the virtual environment or perform other post-"
"creation steps."
msgstr ""
"En platshållande metod som kan åsidosättas i tredjepartsimplementeringar för "
"att förinstallera paket i den virtuella miljön eller utföra andra steg efter "
"skapandet."

msgid ""
"This method can be called from :meth:`setup_scripts` or :meth:`post_setup` "
"in subclasses to assist in installing custom scripts into the virtual "
"environment."
msgstr ""
"Den här metoden kan anropas från :meth:`setup_scripts` eller :meth:"
"`post_setup` i underklasser för att hjälpa till att installera anpassade "
"skript i den virtuella miljön."

msgid ""
"*path* is the path to a directory that should contain subdirectories "
"``common``, ``posix``, ``nt``; each containing scripts destined for the "
"``bin`` directory in the environment.  The contents of ``common`` and the "
"directory corresponding to :data:`os.name` are copied after some text "
"replacement of placeholders:"
msgstr ""
"*path* är sökvägen till en katalog som bör innehålla underkatalogerna "
"``common``, ``posix``, ``nt``; var och en innehållande skript avsedda för "
"``bin``-katalogen i miljön.  Innehållet i ``common`` och den katalog som "
"motsvarar :data:`os.name` kopieras efter att platshållare har ersatts med "
"text:"

msgid ""
"``__VENV_DIR__`` is replaced with the absolute path of the environment "
"directory."
msgstr ""
"``__VENV_DIR__`` ersätts med den absoluta sökvägen till miljökatalogen."

msgid ""
"``__VENV_NAME__`` is replaced with the environment name (final path segment "
"of environment directory)."
msgstr ""
"``__VENV_NAME__`` ersätts med miljönamnet (sista sökvägssegmentet i "
"miljökatalogen)."

msgid ""
"``__VENV_PROMPT__`` is replaced with the prompt (the environment name "
"surrounded by parentheses and with a following space)"
msgstr ""
"``__VENV_PROMPT__`` ersätts med prompt (miljöns namn omgivet av parenteser "
"och med ett efterföljande mellanslag)"

msgid ""
"``__VENV_BIN_NAME__`` is replaced with the name of the bin directory (either "
"``bin`` or ``Scripts``)."
msgstr ""
"``__VENV_BIN_NAME__`` ersätts med namnet på bin-katalogen (antingen ``bin`` "
"eller ``Scripts``)."

msgid ""
"``__VENV_PYTHON__`` is replaced with the absolute path of the environment's "
"executable."
msgstr ""
"``__VENV_PYTHON__`` ersätts med den absoluta sökvägen till miljöns körbara "
"fil."

msgid ""
"The directories are allowed to exist (for when an existing environment is "
"being upgraded)."
msgstr "Katalogerna får existera (för när en befintlig miljö uppgraderas)."

msgid ""
"Creates a ``.gitignore`` file within the virtual environment that causes the "
"entire directory to be ignored by the Git source control manager."
msgstr ""
"Skapar en fil med namnet ``.gitignore`` i den virtuella miljön som gör att "
"hela katalogen ignoreras av källkontrollhanteraren Git."

msgid ""
"Windows now uses redirector scripts for ``python[w].exe`` instead of copying "
"the actual binaries. In 3.7.2 only :meth:`setup_python` does nothing unless "
"running from a build in the source tree."
msgstr ""
"Windows använder nu omdirigeringsskript för ``python[w].exe`` istället för "
"att kopiera de faktiska binärerna. I 3.7.2 gör endast :meth:`setup_python` "
"ingenting om den inte körs från en build i källträdet."

msgid ""
"Windows copies the redirector scripts as part of :meth:`setup_python` "
"instead of :meth:`setup_scripts`. This was not the case in 3.7.2. When using "
"symlinks, the original executables will be linked."
msgstr ""
"Windows kopierar redirector-skript som en del av :meth:`setup_python` "
"istället för :meth:`setup_scripts`. Detta var inte fallet i 3.7.2. Vid "
"användning av symlänkar länkas de ursprungliga körbara filerna."

msgid "There is also a module-level convenience function:"
msgstr "Det finns också en bekvämlighetsfunktion på modulnivå:"

msgid ""
"Create an :class:`EnvBuilder` with the given keyword arguments, and call "
"its :meth:`~EnvBuilder.create` method with the *env_dir* argument."
msgstr ""
"Skapa en :class:`EnvBuilder` med de angivna nyckelordsargumenten, och anropa "
"dess :meth:`~EnvBuilder.create`-metod med argumentet *env_dir*."

msgid "Added the *with_pip* parameter"
msgstr "Parametern *with_pip* har lagts till"

msgid "Added the *prompt* parameter"
msgstr "Parametern *prompt* har lagts till"

msgid "Added the *upgrade_deps* parameter"
msgstr "Parametern *upgrade_deps* har lagts till"

msgid "Added the *scm_ignore_files* parameter"
msgstr "Parametern *scm_ignore_files* har lagts till"

msgid "An example of extending ``EnvBuilder``"
msgstr "Ett exempel på utökning av ``EnvBuilder``"

msgid ""
"The following script shows how to extend :class:`EnvBuilder` by implementing "
"a subclass which installs setuptools and pip into a created virtual "
"environment::"
msgstr ""
"Följande skript visar hur man utökar :class:`EnvBuilder` genom att "
"implementera en underklass som installerar setuptools och pip i en skapad "
"virtuell miljö::"

msgid ""
"import os\n"
"import os.path\n"
"from subprocess import Popen, PIPE\n"
"import sys\n"
"from threading import Thread\n"
"from urllib.parse import urlparse\n"
"from urllib.request import urlretrieve\n"
"import venv\n"
"\n"
"class ExtendedEnvBuilder(venv.EnvBuilder):\n"
"    \"\"\"\n"
"    This builder installs setuptools and pip so that you can pip or\n"
"    easy_install other packages into the created virtual environment.\n"
"\n"
"    :param nodist: If true, setuptools and pip are not installed into the\n"
"                   created virtual environment.\n"
"    :param nopip: If true, pip is not installed into the created\n"
"                  virtual environment.\n"
"    :param progress: If setuptools or pip are installed, the progress of "
"the\n"
"                     installation can be monitored by passing a progress\n"
"                     callable. If specified, it is called with two\n"
"                     arguments: a string indicating some progress, and a\n"
"                     context indicating where the string is coming from.\n"
"                     The context argument can have one of three values:\n"
"                     'main', indicating that it is called from virtualize()\n"
"                     itself, and 'stdout' and 'stderr', which are obtained\n"
"                     by reading lines from the output streams of a "
"subprocess\n"
"                     which is used to install the app.\n"
"\n"
"                     If a callable is not specified, default progress\n"
"                     information is output to sys.stderr.\n"
"    \"\"\"\n"
"\n"
"    def __init__(self, *args, **kwargs):\n"
"        self.nodist = kwargs.pop('nodist', False)\n"
"        self.nopip = kwargs.pop('nopip', False)\n"
"        self.progress = kwargs.pop('progress', None)\n"
"        self.verbose = kwargs.pop('verbose', False)\n"
"        super().__init__(*args, **kwargs)\n"
"\n"
"    def post_setup(self, context):\n"
"        \"\"\"\n"
"        Set up any packages which need to be pre-installed into the\n"
"        virtual environment being created.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        os.environ['VIRTUAL_ENV'] = context.env_dir\n"
"        if not self.nodist:\n"
"            self.install_setuptools(context)\n"
"        # Can't install pip without setuptools\n"
"        if not self.nopip and not self.nodist:\n"
"            self.install_pip(context)\n"
"\n"
"    def reader(self, stream, context):\n"
"        \"\"\"\n"
"        Read lines from a subprocess' output stream and either pass to a "
"progress\n"
"        callable (if specified) or write progress information to sys."
"stderr.\n"
"        \"\"\"\n"
"        progress = self.progress\n"
"        while True:\n"
"            s = stream.readline()\n"
"            if not s:\n"
"                break\n"
"            if progress is not None:\n"
"                progress(s, context)\n"
"            else:\n"
"                if not self.verbose:\n"
"                    sys.stderr.write('.')\n"
"                else:\n"
"                    sys.stderr.write(s.decode('utf-8'))\n"
"                sys.stderr.flush()\n"
"        stream.close()\n"
"\n"
"    def install_script(self, context, name, url):\n"
"        _, _, path, _, _, _ = urlparse(url)\n"
"        fn = os.path.split(path)[-1]\n"
"        binpath = context.bin_path\n"
"        distpath = os.path.join(binpath, fn)\n"
"        # Download script into the virtual environment's binaries folder\n"
"        urlretrieve(url, distpath)\n"
"        progress = self.progress\n"
"        if self.verbose:\n"
"            term = '\\n'\n"
"        else:\n"
"            term = ''\n"
"        if progress is not None:\n"
"            progress('Installing %s ...%s' % (name, term), 'main')\n"
"        else:\n"
"            sys.stderr.write('Installing %s ...%s' % (name, term))\n"
"            sys.stderr.flush()\n"
"        # Install in the virtual environment\n"
"        args = [context.env_exe, fn]\n"
"        p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=binpath)\n"
"        t1 = Thread(target=self.reader, args=(p.stdout, 'stdout'))\n"
"        t1.start()\n"
"        t2 = Thread(target=self.reader, args=(p.stderr, 'stderr'))\n"
"        t2.start()\n"
"        p.wait()\n"
"        t1.join()\n"
"        t2.join()\n"
"        if progress is not None:\n"
"            progress('done.', 'main')\n"
"        else:\n"
"            sys.stderr.write('done.\\n')\n"
"        # Clean up - no longer needed\n"
"        os.unlink(distpath)\n"
"\n"
"    def install_setuptools(self, context):\n"
"        \"\"\"\n"
"        Install setuptools in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = \"https://bootstrap.pypa.io/ez_setup.py\"\n"
"        self.install_script(context, 'setuptools', url)\n"
"        # clear up the setuptools archive which gets downloaded\n"
"        pred = lambda o: o.startswith('setuptools-') and o.endswith('.tar."
"gz')\n"
"        files = filter(pred, os.listdir(context.bin_path))\n"
"        for f in files:\n"
"            f = os.path.join(context.bin_path, f)\n"
"            os.unlink(f)\n"
"\n"
"    def install_pip(self, context):\n"
"        \"\"\"\n"
"        Install pip in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = 'https://bootstrap.pypa.io/get-pip.py'\n"
"        self.install_script(context, 'pip', url)\n"
"\n"
"\n"
"def main(args=None):\n"
"    import argparse\n"
"\n"
"    parser = argparse.ArgumentParser(prog=__name__,\n"
"                                     description='Creates virtual Python '\n"
"                                                 'environments in one or '\n"
"                                                 'more target '\n"
"                                                 'directories.')\n"
"    parser.add_argument('dirs', metavar='ENV_DIR', nargs='+',\n"
"                        help='A directory in which to create the '\n"
"                             'virtual environment.')\n"
"    parser.add_argument('--no-setuptools', default=False,\n"
"                        action='store_true', dest='nodist',\n"
"                        help=\"Don't install setuptools or pip in the \"\n"
"                             \"virtual environment.\")\n"
"    parser.add_argument('--no-pip', default=False,\n"
"                        action='store_true', dest='nopip',\n"
"                        help=\"Don't install pip in the virtual \"\n"
"                             \"environment.\")\n"
"    parser.add_argument('--system-site-packages', default=False,\n"
"                        action='store_true', dest='system_site',\n"
"                        help='Give the virtual environment access to the '\n"
"                             'system site-packages dir.')\n"
"    if os.name == 'nt':\n"
"        use_symlinks = False\n"
"    else:\n"
"        use_symlinks = True\n"
"    parser.add_argument('--symlinks', default=use_symlinks,\n"
"                        action='store_true', dest='symlinks',\n"
"                        help='Try to use symlinks rather than copies, '\n"
"                             'when symlinks are not the default for '\n"
"                             'the platform.')\n"
"    parser.add_argument('--clear', default=False, action='store_true',\n"
"                        dest='clear', help='Delete the contents of the '\n"
"                                           'virtual environment '\n"
"                                           'directory if it already '\n"
"                                           'exists, before virtual '\n"
"                                           'environment creation.')\n"
"    parser.add_argument('--upgrade', default=False, action='store_true',\n"
"                        dest='upgrade', help='Upgrade the virtual '\n"
"                                             'environment directory to '\n"
"                                             'use this version of '\n"
"                                             'Python, assuming Python '\n"
"                                             'has been upgraded '\n"
"                                             'in-place.')\n"
"    parser.add_argument('--verbose', default=False, action='store_true',\n"
"                        dest='verbose', help='Display the output '\n"
"                                             'from the scripts which '\n"
"                                             'install setuptools and pip.')\n"
"    options = parser.parse_args(args)\n"
"    if options.upgrade and options.clear:\n"
"        raise ValueError('you cannot supply --upgrade and --clear "
"together.')\n"
"    builder = ExtendedEnvBuilder(system_site_packages=options.system_site,\n"
"                                   clear=options.clear,\n"
"                                   symlinks=options.symlinks,\n"
"                                   upgrade=options.upgrade,\n"
"                                   nodist=options.nodist,\n"
"                                   nopip=options.nopip,\n"
"                                   verbose=options.verbose)\n"
"    for d in options.dirs:\n"
"        builder.create(d)\n"
"\n"
"if __name__ == '__main__':\n"
"    rc = 1\n"
"    try:\n"
"        main()\n"
"        rc = 0\n"
"    except Exception as e:\n"
"        print('Error: %s' % e, file=sys.stderr)\n"
"    sys.exit(rc)"
msgstr ""
"import os\n"
"import os.path\n"
"from subprocess import Popen, PIPE\n"
"import sys\n"
"from threading import Thread\n"
"from urllib.parse import urlparse\n"
"from urllib.request import urlretrieve\n"
"import venv\n"
"\n"
"class ExtendedEnvBuilder(venv.EnvBuilder):\n"
"    \"\"\"\n"
"    This builder installs setuptools and pip so that you can pip or\n"
"    easy_install other packages into the created virtual environment.\n"
"\n"
"    :param nodist: If true, setuptools and pip are not installed into the\n"
"                   created virtual environment.\n"
"    :param nopip: If true, pip is not installed into the created\n"
"                  virtual environment.\n"
"    :param progress: If setuptools or pip are installed, the progress of "
"the\n"
"                     installation can be monitored by passing a progress\n"
"                     callable. If specified, it is called with two\n"
"                     arguments: a string indicating some progress, and a\n"
"                     context indicating where the string is coming from.\n"
"                     The context argument can have one of three values:\n"
"                     'main', indicating that it is called from virtualize()\n"
"                     itself, and 'stdout' and 'stderr', which are obtained\n"
"                     by reading lines from the output streams of a "
"subprocess\n"
"                     which is used to install the app.\n"
"\n"
"                     If a callable is not specified, default progress\n"
"                     information is output to sys.stderr.\n"
"    \"\"\"\n"
"\n"
"    def __init__(self, *args, **kwargs):\n"
"        self.nodist = kwargs.pop('nodist', False)\n"
"        self.nopip = kwargs.pop('nopip', False)\n"
"        self.progress = kwargs.pop('progress', None)\n"
"        self.verbose = kwargs.pop('verbose', False)\n"
"        super().__init__(*args, **kwargs)\n"
"\n"
"    def post_setup(self, context):\n"
"        \"\"\"\n"
"        Set up any packages which need to be pre-installed into the\n"
"        virtual environment being created.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        os.environ['VIRTUAL_ENV'] = context.env_dir\n"
"        if not self.nodist:\n"
"            self.install_setuptools(context)\n"
"        # Can't install pip without setuptools\n"
"        if not self.nopip and not self.nodist:\n"
"            self.install_pip(context)\n"
"\n"
"    def reader(self, stream, context):\n"
"        \"\"\"\n"
"        Read lines from a subprocess' output stream and either pass to a "
"progress\n"
"        callable (if specified) or write progress information to sys."
"stderr.\n"
"        \"\"\"\n"
"        progress = self.progress\n"
"        while True:\n"
"            s = stream.readline()\n"
"            if not s:\n"
"                break\n"
"            if progress is not None:\n"
"                progress(s, context)\n"
"            else:\n"
"                if not self.verbose:\n"
"                    sys.stderr.write('.')\n"
"                else:\n"
"                    sys.stderr.write(s.decode('utf-8'))\n"
"                sys.stderr.flush()\n"
"        stream.close()\n"
"\n"
"    def install_script(self, context, name, url):\n"
"        _, _, path, _, _, _ = urlparse(url)\n"
"        fn = os.path.split(path)[-1]\n"
"        binpath = context.bin_path\n"
"        distpath = os.path.join(binpath, fn)\n"
"        # Download script into the virtual environment's binaries folder\n"
"        urlretrieve(url, distpath)\n"
"        progress = self.progress\n"
"        if self.verbose:\n"
"            term = '\\n'\n"
"        else:\n"
"            term = ''\n"
"        if progress is not None:\n"
"            progress('Installing %s ...%s' % (name, term), 'main')\n"
"        else:\n"
"            sys.stderr.write('Installing %s ...%s' % (name, term))\n"
"            sys.stderr.flush()\n"
"        # Install in the virtual environment\n"
"        args = [context.env_exe, fn]\n"
"        p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=binpath)\n"
"        t1 = Thread(target=self.reader, args=(p.stdout, 'stdout'))\n"
"        t1.start()\n"
"        t2 = Thread(target=self.reader, args=(p.stderr, 'stderr'))\n"
"        t2.start()\n"
"        p.wait()\n"
"        t1.join()\n"
"        t2.join()\n"
"        if progress is not None:\n"
"            progress('done.', 'main')\n"
"        else:\n"
"            sys.stderr.write('done.\\n')\n"
"        # Clean up - no longer needed\n"
"        os.unlink(distpath)\n"
"\n"
"    def install_setuptools(self, context):\n"
"        \"\"\"\n"
"        Install setuptools in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = \"https://bootstrap.pypa.io/ez_setup.py\"\n"
"        self.install_script(context, 'setuptools', url)\n"
"        # clear up the setuptools archive which gets downloaded\n"
"        pred = lambda o: o.startswith('setuptools-') and o.endswith('.tar."
"gz')\n"
"        files = filter(pred, os.listdir(context.bin_path))\n"
"        for f in files:\n"
"            f = os.path.join(context.bin_path, f)\n"
"            os.unlink(f)\n"
"\n"
"    def install_pip(self, context):\n"
"        \"\"\"\n"
"        Install pip in the virtual environment.\n"
"\n"
"        :param context: The information for the virtual environment\n"
"                        creation request being processed.\n"
"        \"\"\"\n"
"        url = 'https://bootstrap.pypa.io/get-pip.py'\n"
"        self.install_script(context, 'pip', url)\n"
"\n"
"\n"
"def main(args=None):\n"
"    import argparse\n"
"\n"
"    parser = argparse.ArgumentParser(prog=__name__,\n"
"                                     description='Creates virtual Python '\n"
"                                                 'environments in one or '\n"
"                                                 'more target '\n"
"                                                 'directories.')\n"
"    parser.add_argument('dirs', metavar='ENV_DIR', nargs='+',\n"
"                        help='A directory in which to create the '\n"
"                             'virtual environment.')\n"
"    parser.add_argument('--no-setuptools', default=False,\n"
"                        action='store_true', dest='nodist',\n"
"                        help=\"Don't install setuptools or pip in the \"\n"
"                             \"virtual environment.\")\n"
"    parser.add_argument('--no-pip', default=False,\n"
"                        action='store_true', dest='nopip',\n"
"                        help=\"Don't install pip in the virtual \"\n"
"                             \"environment.\")\n"
"    parser.add_argument('--system-site-packages', default=False,\n"
"                        action='store_true', dest='system_site',\n"
"                        help='Give the virtual environment access to the '\n"
"                             'system site-packages dir.')\n"
"    if os.name == 'nt':\n"
"        use_symlinks = False\n"
"    else:\n"
"        use_symlinks = True\n"
"    parser.add_argument('--symlinks', default=use_symlinks,\n"
"                        action='store_true', dest='symlinks',\n"
"                        help='Try to use symlinks rather than copies, '\n"
"                             'when symlinks are not the default for '\n"
"                             'the platform.')\n"
"    parser.add_argument('--clear', default=False, action='store_true',\n"
"                        dest='clear', help='Delete the contents of the '\n"
"                                           'virtual environment '\n"
"                                           'directory if it already '\n"
"                                           'exists, before virtual '\n"
"                                           'environment creation.')\n"
"    parser.add_argument('--upgrade', default=False, action='store_true',\n"
"                        dest='upgrade', help='Upgrade the virtual '\n"
"                                             'environment directory to '\n"
"                                             'use this version of '\n"
"                                             'Python, assuming Python '\n"
"                                             'has been upgraded '\n"
"                                             'in-place.')\n"
"    parser.add_argument('--verbose', default=False, action='store_true',\n"
"                        dest='verbose', help='Display the output '\n"
"                                             'from the scripts which '\n"
"                                             'install setuptools and pip.')\n"
"    options = parser.parse_args(args)\n"
"    if options.upgrade and options.clear:\n"
"        raise ValueError('you cannot supply --upgrade and --clear "
"together.')\n"
"    builder = ExtendedEnvBuilder(system_site_packages=options.system_site,\n"
"                                   clear=options.clear,\n"
"                                   symlinks=options.symlinks,\n"
"                                   upgrade=options.upgrade,\n"
"                                   nodist=options.nodist,\n"
"                                   nopip=options.nopip,\n"
"                                   verbose=options.verbose)\n"
"    for d in options.dirs:\n"
"        builder.create(d)\n"
"\n"
"if __name__ == '__main__':\n"
"    rc = 1\n"
"    try:\n"
"        main()\n"
"        rc = 0\n"
"    except Exception as e:\n"
"        print('Error: %s' % e, file=sys.stderr)\n"
"    sys.exit(rc)"

msgid ""
"This script is also available for download `online <https://gist.github.com/"
"vsajip/4673395>`_."
msgstr ""
"Detta skript finns också tillgängligt för nedladdning `online <https://gist."
"github.com/vsajip/4673395>`_."

msgid "Environments"
msgstr "Miljöer"

msgid "virtual"
msgstr "virtuell"
