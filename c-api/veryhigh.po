# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "The Very High Level Layer"
msgstr "Lagret på mycket hög nivå"

msgid ""
"The functions in this chapter will let you execute Python source code given "
"in a file or a buffer, but they will not let you interact in a more detailed "
"way with the interpreter."
msgstr ""
"Funktionerna i det här kapitlet låter dig exekvera Python-källkod som finns "
"i en fil eller en buffert, men de låter dig inte interagera på ett mer "
"detaljerat sätt med tolken."

msgid ""
"Several of these functions accept a start symbol from the grammar as a "
"parameter.  The available start symbols are :c:data:`Py_eval_input`, :c:data:"
"`Py_file_input`, and :c:data:`Py_single_input`.  These are described "
"following the functions which accept them as parameters."
msgstr ""
"Flera av dessa funktioner accepterar en startsymbol från grammatiken som en "
"parameter.  De tillgängliga startsymbolerna är :c:data:`Py_eval_input`, :c:"
"data:`Py_file_input` och :c:data:`Py_single_input`.  Dessa beskrivs efter de "
"funktioner som accepterar dem som parametrar."

msgid ""
"Note also that several of these functions take :c:expr:`FILE*` parameters.  "
"One particular issue which needs to be handled carefully is that the :c:type:"
"`FILE` structure for different C libraries can be different and "
"incompatible.  Under Windows (at least), it is possible for dynamically "
"linked extensions to actually use different libraries, so care should be "
"taken that :c:expr:`FILE*` parameters are only passed to these functions if "
"it is certain that they were created by the same library that the Python "
"runtime is using."
msgstr ""
"Notera också att flera av dessa funktioner tar :c:expr:`FILE*` parametrar.  "
"En särskild fråga som måste hanteras noggrant är att :c:type:`FILE`-"
"strukturen för olika C-bibliotek kan vara olika och inkompatibla.  Under "
"Windows (åtminstone) är det möjligt för dynamiskt länkade tillägg att "
"faktiskt använda olika bibliotek, så man bör vara noga med att :c:expr:"
"`FILE*`-parametrar bara skickas till dessa funktioner om det är säkert att "
"de skapades av samma bibliotek som Python-körtiden använder."

msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving *closeit* set to ``0`` and *flags* set to ``NULL``."
msgstr ""
"Detta är ett förenklat gränssnitt till :c:func:`PyRun_AnyFileExFlags` nedan, "
"där *closeit* är satt till ``0`` och *flags* är satt till ``NULL``."

msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving the *closeit* argument set to ``0``."
msgstr ""
"Detta är ett förenklat gränssnitt till :c:func:`PyRun_AnyFileExFlags` nedan, "
"där *closeit*-argumentet är satt till ``0``."

msgid ""
"This is a simplified interface to :c:func:`PyRun_AnyFileExFlags` below, "
"leaving the *flags* argument set to ``NULL``."
msgstr ""
"Detta är ett förenklat gränssnitt till :c:func:`PyRun_AnyFileExFlags` nedan, "
"där argumentet *flags* är satt till ``NULL``."

msgid ""
"If *fp* refers to a file associated with an interactive device (console or "
"terminal input or Unix pseudo-terminal), return the value of :c:func:"
"`PyRun_InteractiveLoop`, otherwise return the result of :c:func:"
"`PyRun_SimpleFile`.  *filename* is decoded from the filesystem encoding (:"
"func:`sys.getfilesystemencoding`).  If *filename* is ``NULL``, this function "
"uses ``\"???\"`` as the filename. If *closeit* is true, the file is closed "
"before ``PyRun_SimpleFileExFlags()`` returns."
msgstr ""
"Om *fp* hänvisar till en fil som är kopplad till en interaktiv enhet (konsol "
"eller terminalinmatning eller Unix pseudoterminal), returneras värdet av :c:"
"func:`PyRun_InteractiveLoop`, annars returneras resultatet av :c:func:"
"`PyRun_SimpleFile`.  *filnamn* avkodas från filsystemets kodning (:func:`sys."
"getfilesystemencoding`).  Om *filename* är ``NULL`` använder den här "
"funktionen ``\"???\"`` som filnamn. Om *closeit* är true, stängs filen innan "
"``PyRun_SimpleFileExFlags()`` returneras."

msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleStringFlags` below, "
"leaving the :c:struct:`PyCompilerFlags`\\* argument set to ``NULL``."
msgstr ""
"Detta är ett förenklat gränssnitt till :c:func:`PyRun_SimpleStringFlags` "
"nedan, där argumentet :c:struct:`PyCompilerFlags`\\* är satt till ``NULL``."

msgid ""
"Executes the Python source code from *command* in the :mod:`__main__` module "
"according to the *flags* argument. If :mod:`__main__` does not already "
"exist, it is created.  Returns ``0`` on success or ``-1`` if an exception "
"was raised.  If there was an error, there is no way to get the exception "
"information. For the meaning of *flags*, see below."
msgstr ""
"Exekverar Python-källkoden från *command* i modulen :mod:`__main__` i "
"enlighet med argumentet *flags*. Om :mod:`__main__` inte redan finns, skapas "
"den.  Returnerar ``0`` vid framgång eller ``-1`` om ett undantag uppstod.  "
"Om det uppstod ett fel finns det inget sätt att få information om "
"undantaget. För betydelsen av *flags*, se nedan."

msgid ""
"Note that if an otherwise unhandled :exc:`SystemExit` is raised, this "
"function will not return ``-1``, but exit the process, as long as :c:member:"
"`PyConfig.inspect` is zero."
msgstr ""
"Observera att om en annars ohanterad :exc:`SystemExit` uppstår, kommer denna "
"funktion inte att returnera ``-1``, utan avsluta processen, så länge som :c:"
"member:`PyConfig.inspect` är noll."

msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` below, "
"leaving *closeit* set to ``0`` and *flags* set to ``NULL``."
msgstr ""
"Detta är ett förenklat gränssnitt till :c:func:`PyRun_SimpleFileExFlags` "
"nedan, där *closeit* är satt till ``0`` och *flags* är satt till ``NULL``."

msgid ""
"This is a simplified interface to :c:func:`PyRun_SimpleFileExFlags` below, "
"leaving *flags* set to ``NULL``."
msgstr ""
"Detta är ett förenklat gränssnitt till :c:func:`PyRun_SimpleFileExFlags` "
"nedan, där *flags* är satt till ``NULL``."

msgid ""
"Similar to :c:func:`PyRun_SimpleStringFlags`, but the Python source code is "
"read from *fp* instead of an in-memory string. *filename* should be the name "
"of the file, it is decoded from :term:`filesystem encoding and error "
"handler`. If *closeit* is true, the file is closed before "
"``PyRun_SimpleFileExFlags()`` returns."
msgstr ""
"Liknar :c:func:`PyRun_SimpleStringFlags`, men Python-källkoden läses från "
"*fp* istället för en sträng i minnet. *filename* ska vara namnet på filen, "
"det avkodas från :term:`filsystem encoding and error handler`. Om *closeit* "
"är true, stängs filen innan ``PyRun_SimpleFileExFlags()`` returneras."

msgid ""
"On Windows, *fp* should be opened as binary mode (e.g. ``fopen(filename, "
"\"rb\")``). Otherwise, Python may not handle script file with LF line ending "
"correctly."
msgstr ""
"På Windows bör *fp* öppnas i binärt läge (t.ex. ``fopen(filnamn, \"rb\")``). "
"Annars kan det hända att Python inte hanterar skriptfiler med LF-radavslut "
"korrekt."

msgid ""
"This is a simplified interface to :c:func:`PyRun_InteractiveOneFlags` below, "
"leaving *flags* set to ``NULL``."
msgstr ""
"Detta är ett förenklat gränssnitt till :c:func:`PyRun_InteractiveOneFlags` "
"nedan, där *flags* är satt till ``NULL``."

msgid ""
"Read and execute a single statement from a file associated with an "
"interactive device according to the *flags* argument.  The user will be "
"prompted using ``sys.ps1`` and ``sys.ps2``.  *filename* is decoded from the :"
"term:`filesystem encoding and error handler`."
msgstr ""
"Läs och kör ett enda uttalande från en fil som är kopplad till en interaktiv "
"enhet enligt argumentet *flags*.  Användaren kommer att uppmanas att använda "
"``sys.ps1`` och ``sys.ps2``.  *filnamn* avkodas från :term:`filsystemets "
"kodning och felhantering`."

msgid ""
"Returns ``0`` when the input was executed successfully, ``-1`` if there was "
"an exception, or an error code from the :file:`errcode.h` include file "
"distributed as part of Python if there was a parse error.  (Note that :file:"
"`errcode.h` is not included by :file:`Python.h`, so must be included "
"specifically if needed.)"
msgstr ""
"Returnerar ``0`` när indata exekverades framgångsrikt, ``-1`` om det fanns "
"ett undantag, eller en felkod från :file:`errcode.h` include-filen som "
"distribueras som en del av Python om det fanns ett parse-fel.  (Observera "
"att :file:`errcode.h` inte inkluderas av :file:`Python.h`, så den måste "
"inkluderas specifikt om det behövs)"

msgid ""
"This is a simplified interface to :c:func:`PyRun_InteractiveLoopFlags` "
"below, leaving *flags* set to ``NULL``."
msgstr ""
"Detta är ett förenklat gränssnitt till :c:func:`PyRun_InteractiveLoopFlags` "
"nedan, där *flags* är satt till ``NULL``."

msgid ""
"Read and execute statements from a file associated with an interactive "
"device until EOF is reached.  The user will be prompted using ``sys.ps1`` "
"and ``sys.ps2``.  *filename* is decoded from the :term:`filesystem encoding "
"and error handler`.  Returns ``0`` at EOF or a negative number upon failure."
msgstr ""
"Läs och kör satser från en fil som är kopplad till en interaktiv enhet tills "
"EOF nås.  Användaren kommer att uppmanas att använda ``sys.ps1`` och ``sys."
"ps2``.  *filnamn* avkodas från :term:`filsystemets kodning och "
"felhantering`.  Returnerar ``0`` vid EOF eller ett negativt tal vid "
"misslyckande."

msgid ""
"Can be set to point to a function with the prototype ``int func(void)``.  "
"The function will be called when Python's interpreter prompt is about to "
"become idle and wait for user input from the terminal.  The return value is "
"ignored.  Overriding this hook can be used to integrate the interpreter's "
"prompt with other event loops, as done in the :file:`Modules/_tkinter.c` in "
"the Python source code."
msgstr ""
"Kan ställas in så att den pekar på en funktion med prototypen ``int "
"func(void)``.  Funktionen kommer att anropas när Pythons tolkprompt är på "
"väg att bli inaktiv och väntar på användarinmatning från terminalen.  "
"Returvärdet ignoreras.  Åsidosättande av denna krok kan användas för att "
"integrera tolkens prompt med andra händelseslingor, vilket görs i :file:"
"`Modules/_tkinter.c` i Pythons källkod."

msgid ""
"This function is only called from the :ref:`main interpreter <sub-"
"interpreter-support>`."
msgstr ""
"Denna funktion anropas endast från :ref:`huvudtolken <sub-interpreter-"
"support>`."

msgid ""
"Can be set to point to a function with the prototype ``char *func(FILE "
"*stdin, FILE *stdout, char *prompt)``, overriding the default function used "
"to read a single line of input at the interpreter's prompt.  The function is "
"expected to output the string *prompt* if it's not ``NULL``, and then read a "
"line of input from the provided standard input file, returning the resulting "
"string.  For example, The :mod:`readline` module sets this hook to provide "
"line-editing and tab-completion features."
msgstr ""
"Kan sättas till att peka på en funktion med prototypen ``char *func(FILE "
"*stdin, FILE *stdout, char *prompt)``, som åsidosätter standardfunktionen "
"som används för att läsa en enda rad indata vid tolkens prompt.  Funktionen "
"förväntas mata ut strängen *prompt* om den inte är ``NULL``, och sedan läsa "
"en rad indata från den angivna standardinmatningsfilen och returnera den "
"resulterande strängen.  Exempel: Modulen :mod:`readline` sätter denna krok "
"för att tillhandahålla funktioner för radredigering och tabbkomplettering."

msgid ""
"The result must be a string allocated by :c:func:`PyMem_RawMalloc` or :c:"
"func:`PyMem_RawRealloc`, or ``NULL`` if an error occurred."
msgstr ""
"Resultatet måste vara en sträng som allokerats av :c:func:`PyMem_RawMalloc` "
"eller :c:func:`PyMem_RawRealloc`, eller ``NULL`` om ett fel inträffat."

msgid ""
"The result must be allocated by :c:func:`PyMem_RawMalloc` or :c:func:"
"`PyMem_RawRealloc`, instead of being allocated by :c:func:`PyMem_Malloc` or :"
"c:func:`PyMem_Realloc`."
msgstr ""
"Resultatet måste allokeras med :c:func:`PyMem_RawMalloc` eller :c:func:"
"`PyMem_RawRealloc`, istället för att allokeras med :c:func:`PyMem_Malloc` "
"eller :c:func:`PyMem_Realloc`."

msgid ""
"This is a simplified interface to :c:func:`PyRun_StringFlags` below, leaving "
"*flags* set to ``NULL``."
msgstr ""
"Detta är ett förenklat gränssnitt till :c:func:`PyRun_StringFlags` nedan, "
"där *flags* är satt till ``NULL``."

msgid ""
"Execute Python source code from *str* in the context specified by the "
"objects *globals* and *locals* with the compiler flags specified by "
"*flags*.  *globals* must be a dictionary; *locals* can be any object that "
"implements the mapping protocol.  The parameter *start* specifies the start "
"token that should be used to parse the source code."
msgstr ""
"Exekvera Python-källkod från *str* i det sammanhang som anges av objekten "
"*globals* och *locals* med de kompilatorflaggor som anges av *flags*.  "
"*globals* måste vara en ordbok; *locals* kan vara vilket objekt som helst "
"som implementerar mappningsprotokollet.  Parametern *start* anger den "
"starttoken som ska användas för att analysera källkoden."

msgid ""
"Returns the result of executing the code as a Python object, or ``NULL`` if "
"an exception was raised."
msgstr ""
"Returnerar resultatet av att exekvera koden som ett Python-objekt, eller "
"``NULL`` om ett undantag uppstod."

msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving "
"*closeit* set to ``0`` and *flags* set to ``NULL``."
msgstr ""
"Detta är ett förenklat gränssnitt till :c:func:`PyRun_FileExFlags` nedan, "
"där *closeit* är satt till ``0`` och *flags* är satt till ``NULL``."

msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving "
"*flags* set to ``NULL``."
msgstr ""
"Detta är ett förenklat gränssnitt till :c:func:`PyRun_FileExFlags` nedan, "
"där *flags* är satt till ``NULL``."

msgid ""
"This is a simplified interface to :c:func:`PyRun_FileExFlags` below, leaving "
"*closeit* set to ``0``."
msgstr ""
"Detta är ett förenklat gränssnitt till :c:func:`PyRun_FileExFlags` nedan, "
"där *closeit* är satt till ``0``."

msgid ""
"Similar to :c:func:`PyRun_StringFlags`, but the Python source code is read "
"from *fp* instead of an in-memory string. *filename* should be the name of "
"the file, it is decoded from the :term:`filesystem encoding and error "
"handler`. If *closeit* is true, the file is closed before :c:func:"
"`PyRun_FileExFlags` returns."
msgstr ""
"Liknar :c:func:`PyRun_StringFlags`, men Python-källkoden läses från *fp* "
"istället för en sträng i minnet. *filename* bör vara namnet på filen, det "
"avkodas från :term:`filsystem encoding and error handler`. Om *closeit* är "
"true, stängs filen innan :c:func:`PyRun_FileExFlags` returneras."

msgid ""
"This is a simplified interface to :c:func:`Py_CompileStringFlags` below, "
"leaving *flags* set to ``NULL``."
msgstr ""
"Detta är ett förenklat gränssnitt till :c:func:`Py_CompileStringFlags` "
"nedan, där *flags* är satt till ``NULL``."

msgid ""
"This is a simplified interface to :c:func:`Py_CompileStringExFlags` below, "
"with *optimize* set to ``-1``."
msgstr ""
"Detta är ett förenklat gränssnitt till :c:func:`Py_CompileStringExFlags` "
"nedan, med *optimize* satt till ``-1``."

msgid ""
"Parse and compile the Python source code in *str*, returning the resulting "
"code object.  The start token is given by *start*; this can be used to "
"constrain the code which can be compiled and should be :c:data:"
"`Py_eval_input`, :c:data:`Py_file_input`, or :c:data:`Py_single_input`.  The "
"filename specified by *filename* is used to construct the code object and "
"may appear in tracebacks or :exc:`SyntaxError` exception messages.  This "
"returns ``NULL`` if the code cannot be parsed or compiled."
msgstr ""
"Analyserar och kompilerar Python-källkoden i *str* och returnerar det "
"resulterande kodobjektet.  Starttoken ges av *start*; detta kan användas för "
"att begränsa den kod som kan kompileras och bör vara :c:data:"
"`Py_eval_input`, :c:data:`Py_file_input` eller :c:data:`Py_single_input`.  "
"Filnamnet som anges av *filnamn* används för att konstruera kodobjektet och "
"kan visas i spårningar eller :exc:`SyntaxError` undantagsmeddelanden.  Detta "
"returnerar ``NULL`` om koden inte kan analyseras eller kompileras."

msgid ""
"The integer *optimize* specifies the optimization level of the compiler; a "
"value of ``-1`` selects the optimization level of the interpreter as given "
"by :option:`-O` options.  Explicit levels are ``0`` (no optimization; "
"``__debug__`` is true), ``1`` (asserts are removed, ``__debug__`` is false) "
"or ``2`` (docstrings are removed too)."
msgstr ""
"Heltalet *optimize* anger kompilatorns optimeringsnivå; ett värde på ``-1`` "
"väljer tolkens optimeringsnivå som anges i :option:`-O`-alternativen.  "
"Explicita nivåer är ``0`` (ingen optimering; ``__debug__`` är sant), ``1`` "
"(asserts tas bort, ``__debug__`` är falskt) eller ``2`` (docstrings tas "
"också bort)."

msgid ""
"Like :c:func:`Py_CompileStringObject`, but *filename* is a byte string "
"decoded from the :term:`filesystem encoding and error handler`."
msgstr ""
"Som :c:func:`Py_CompileStringObject`, men *filnamn* är en byte-sträng "
"avkodad från :term:`filsystemets kodning och felhantering`."

msgid ""
"This is a simplified interface to :c:func:`PyEval_EvalCodeEx`, with just the "
"code object, and global and local variables.  The other arguments are set to "
"``NULL``."
msgstr ""
"Detta är ett förenklat gränssnitt till :c:func:`PyEval_EvalCodeEx`, med bara "
"kodobjektet samt globala och lokala variabler.  De andra argumenten sätts "
"till ``NULL``."

msgid ""
"Evaluate a precompiled code object, given a particular environment for its "
"evaluation.  This environment consists of a dictionary of global variables, "
"a mapping object of local variables, arrays of arguments, keywords and "
"defaults, a dictionary of default values for :ref:`keyword-only <keyword-"
"only_parameter>` arguments and a closure tuple of cells."
msgstr ""
"Utvärdera ett förkompilerat kodobjekt, givet en viss miljö för dess "
"utvärdering.  Denna miljö består av en ordbok med globala variabler, ett "
"mappningsobjekt med lokala variabler, matriser med argument, nyckelord och "
"standardvärden, en ordbok med standardvärden för :ref:`keyword-only <keyword-"
"only_parameter>`-argument och en closure-tupel av celler."

msgid ""
"Evaluate an execution frame.  This is a simplified interface to :c:func:"
"`PyEval_EvalFrameEx`, for backward compatibility."
msgstr ""
"Utvärderar en exekveringsram.  Detta är ett förenklat gränssnitt till :c:"
"func:`PyEval_EvalFrameEx`, för bakåtkompatibilitet."

msgid ""
"This is the main, unvarnished function of Python interpretation.  The code "
"object associated with the execution frame *f* is executed, interpreting "
"bytecode and executing calls as needed.  The additional *throwflag* "
"parameter can mostly be ignored - if true, then it causes an exception to "
"immediately be thrown; this is used for the :meth:`~generator.throw` methods "
"of generator objects."
msgstr ""
"Detta är den huvudsakliga, oförfalskade funktionen för Python-tolkning.  "
"Kodobjektet som är associerat med exekveringsramen *f* exekveras, tolkar "
"bytekod och utför anrop efter behov.  Den extra parametern *throwflag* kan "
"för det mesta ignoreras - om den är sann leder den till att ett undantag "
"omedelbart kastas; detta används för :meth:`~generator.throw`-metoderna för "
"generatorobjekt."

msgid ""
"This function now includes a debug assertion to help ensure that it does not "
"silently discard an active exception."
msgstr ""
"Denna funktion innehåller nu ett debug-assertion för att säkerställa att den "
"inte i tysthet kasserar ett aktivt undantag."

msgid ""
"This function changes the flags of the current evaluation frame, and returns "
"true on success, false on failure."
msgstr ""
"Denna funktion ändrar flaggorna för den aktuella utvärderingsramen och "
"returnerar true om den lyckas, false om den misslyckas."

msgid ""
"The start symbol from the Python grammar for isolated expressions; for use "
"with :c:func:`Py_CompileString`."
msgstr ""
"Startsymbolen från Pythons grammatik för isolerade uttryck; för användning "
"med :c:func:`Py_CompileString`."

msgid ""
"The start symbol from the Python grammar for sequences of statements as read "
"from a file or other source; for use with :c:func:`Py_CompileString`.  This "
"is the symbol to use when compiling arbitrarily long Python source code."
msgstr ""
"Startsymbolen från Python-grammatiken för sekvenser av satser som läses från "
"en fil eller annan källa; för användning med :c:func:`Py_CompileString`.  "
"Detta är den symbol som ska användas när man kompilerar godtyckligt lång "
"Python-källkod."

msgid ""
"The start symbol from the Python grammar for a single statement; for use "
"with :c:func:`Py_CompileString`. This is the symbol used for the interactive "
"interpreter loop."
msgstr ""
"Startsymbolen från Python-grammatiken för ett enda uttalande; för användning "
"med :c:func:`Py_CompileString`. Detta är den symbol som används för den "
"interaktiva tolkens loop."

msgid ""
"This is the structure used to hold compiler flags.  In cases where code is "
"only being compiled, it is passed as ``int flags``, and in cases where code "
"is being executed, it is passed as ``PyCompilerFlags *flags``.  In this "
"case, ``from __future__ import`` can modify *flags*."
msgstr ""
"Detta är den struktur som används för att hålla kompilatorflaggor.  I fall "
"där kod endast kompileras, skickas den som ``int flags``, och i fall där kod "
"exekveras, skickas den som ``PyCompilerFlags *flags``.  I det här fallet kan "
"``from __future__ import`` modifiera *flags*."

msgid ""
"Whenever ``PyCompilerFlags *flags`` is ``NULL``, :c:member:`~PyCompilerFlags."
"cf_flags` is treated as equal to ``0``, and any modification due to ``from "
"__future__ import`` is discarded."
msgstr ""
"När ``PyCompilerFlags *flags`` är ``NULL``, :c:member:`~PyCompilerFlags."
"cf_flags`` behandlas som lika med ``0``, och alla ändringar på grund av "
"``from __future__ import`` kasseras."

msgid "Compiler flags."
msgstr "Flaggor för kompilator."

msgid ""
"*cf_feature_version* is the minor Python version. It should be initialized "
"to ``PY_MINOR_VERSION``."
msgstr ""
"*cf_feature_version* är den mindre Python-versionen. Den bör initialiseras "
"till ``PY_MINOR_VERSION``."

msgid ""
"The field is ignored by default, it is used if and only if ``PyCF_ONLY_AST`` "
"flag is set in :c:member:`~PyCompilerFlags.cf_flags`."
msgstr ""
"Fältet ignoreras som standard, det används endast om flaggan "
"``PyCF_ONLY_AST`` är inställd i :c:member:`~PyCompilerFlags.cf_flags`."

msgid "Added *cf_feature_version* field."
msgstr "Fältet *cf_feature_version* har lagts till."

msgid "The available compiler flags are accessible as macros:"
msgstr "De tillgängliga kompilatorflaggorna är tillgängliga som makron:"

msgid ""
"See :ref:`compiler flags <ast-compiler-flags>` in documentation of the :py:"
"mod:`!ast` Python module, which exports these constants under the same names."
msgstr ""
"Se :ref:`compiler flags <ast-compiler-flags>` i dokumentationen av Python-"
"modulen :py:mod:`!ast`, som exporterar dessa konstanter under samma namn."

msgid ""
"The \"``PyCF``\" flags above can be combined with \"``CO_FUTURE``\" flags "
"such as :c:macro:`CO_FUTURE_ANNOTATIONS` to enable features normally "
"selectable using :ref:`future statements <future>`. See :ref:"
"`c_codeobject_flags` for a complete list."
msgstr ""
"\"``PyCF``\"-flaggorna ovan kan kombineras med \"``CO_FUTURE``\"-flaggor "
"som :c:macro:`CO_FUTURE_ANNOTATIONS` för att aktivera funktioner som normalt "
"kan väljas med :ref:``future statements <future>`. Se :ref:"
"`c_codeobject_flags` för en fullständig lista."

msgid "Py_CompileString (C function)"
msgstr "Py_CompileString (C-funktion)"
