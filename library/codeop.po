# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!codeop` --- Compile Python code"
msgstr ":mod:`!codeop` --- Kompilera Python-kod"

msgid "**Source code:** :source:`Lib/codeop.py`"
msgstr "**Källkod:** :source:`Lib/codeop.py`"

msgid ""
"The :mod:`codeop` module provides utilities upon which the Python read-eval-"
"print loop can be emulated, as is done in the :mod:`code` module.  As a "
"result, you probably don't want to use the module directly; if you want to "
"include such a loop in your program you probably want to use the :mod:`code` "
"module instead."
msgstr ""
"Modulen :mod:`codeop` tillhandahåller verktyg som Pythons read-eval-print-"
"loop kan emuleras med, på samma sätt som görs i modulen :mod:`code`.  Som "
"ett resultat av detta vill du förmodligen inte använda modulen direkt; om du "
"vill inkludera en sådan slinga i ditt program vill du förmodligen använda "
"modulen :mod:`code` istället."

msgid "There are two parts to this job:"
msgstr "Det här jobbet består av två delar:"

msgid ""
"Being able to tell if a line of input completes a Python statement: in "
"short, telling whether to print '``>>>``' or '``...``' next."
msgstr ""
"Att kunna avgöra om en inmatningsrad avslutar en Python-sats: kort sagt, att "
"avgöra om man ska skriva ut \"``>>>``\" eller \"``...``\" nästa gång."

msgid ""
"Remembering which future statements the user has entered, so subsequent "
"input can be compiled with these in effect."
msgstr ""
"Kommer ihåg vilka framtida uttalanden som användaren har angett, så att "
"efterföljande inmatning kan sammanställas med dessa som effekt."

msgid ""
"The :mod:`codeop` module provides a way of doing each of these things, and a "
"way of doing them both."
msgstr ""
"Modulen :mod:`codeop` tillhandahåller ett sätt att göra var och en av dessa "
"saker, och ett sätt att göra dem båda."

msgid "To do just the former:"
msgstr "För att göra just det förstnämnda:"

msgid ""
"Tries to compile *source*, which should be a string of Python code and "
"return a code object if *source* is valid Python code.  In that case, the "
"filename attribute of the code object will be *filename*, which defaults to "
"``'<input>'``.  Returns ``None`` if *source* is *not* valid Python code, but "
"is a prefix of valid Python code."
msgstr ""
"Försöker kompilera *källa*, som ska vara en sträng med Python-kod och "
"returnerar ett kodobjekt om *källa* är giltig Python-kod.  I så fall kommer "
"filnamnsattributet för kodobjektet att vara *filnamn*, vilket som standard "
"är ``'<input>'``.  Returnerar ``None`` om *källan* *inte* är giltig Python-"
"kod, men är ett prefix av giltig Python-kod."

msgid ""
"If there is a problem with *source*, an exception will be raised. :exc:"
"`SyntaxError` is raised if there is invalid Python syntax, and :exc:"
"`OverflowError` or :exc:`ValueError` if there is an invalid literal."
msgstr ""
"Om det finns ett problem med *källa*, kommer ett undantag att uppstå. :exc:"
"`SyntaxError` uppstår om det finns en ogiltig Python-syntax, och :exc:"
"`OverflowError` eller :exc:`ValueError` om det finns en ogiltig bokstav."

msgid ""
"The *symbol* argument determines whether *source* is compiled as a statement "
"(``'single'``, the default), as a sequence of :term:`statement` (``'exec'``) "
"or as an :term:`expression` (``'eval'``).  Any other value will cause :exc:"
"`ValueError` to be raised."
msgstr ""
"Argumentet *symbol* avgör om *källa* kompileras som en sats (``'single'``, "
"standard), som en sekvens av :term:`satser` (``'exec'``) eller som ett :term:"
"`uttryck` (``'eval'``).  Alla andra värden kommer att orsaka :exc:"
"`ValueError`."

msgid ""
"It is possible (but not likely) that the parser stops parsing with a "
"successful outcome before reaching the end of the source; in this case, "
"trailing symbols may be ignored instead of causing an error.  For example, a "
"backslash followed by two newlines may be followed by arbitrary garbage. "
"This will be fixed once the API for the parser is better."
msgstr ""
"Det är möjligt (men inte troligt) att parsern slutar parsa med ett lyckat "
"resultat innan den når slutet av källan; i så fall kan efterföljande "
"symboler ignoreras istället för att orsaka ett fel.  Till exempel kan en "
"backslash följd av två nya streck följas av godtyckligt skräp. Detta kommer "
"att åtgärdas när API:et för parsern är bättre."

msgid ""
"Instances of this class have :meth:`~object.__call__` methods identical in "
"signature to the built-in function :func:`compile`, but with the difference "
"that if the instance compiles program text containing a :mod:`__future__` "
"statement, the instance 'remembers' and compiles all subsequent program "
"texts with the statement in force."
msgstr ""
"Instanser av denna klass har :meth:`~object.__call__`-metoder med samma "
"signatur som den inbyggda funktionen :func:`compile`, men med skillnaden att "
"om instansen kompilerar programtext som innehåller en :mod:`__future__`-"
"sats, \"minns\" instansen och kompilerar alla efterföljande programtexter "
"med satsen i kraft."

msgid ""
"Instances of this class have :meth:`~object.__call__` methods identical in "
"signature to :func:`compile_command`; the difference is that if the instance "
"compiles program text containing a :mod:`__future__` statement, the instance "
"'remembers' and compiles all subsequent program texts with the statement in "
"force."
msgstr ""
"Instanser av denna klass har :meth:`~object.__call__`-metoder med samma "
"signatur som :func:`compile_command`; skillnaden är att om instansen "
"kompilerar programtext som innehåller en :mod:`__future__`-sats, \"minns\" "
"instansen och kompilerar alla efterföljande programtexter med satsen i kraft."
