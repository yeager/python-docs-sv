# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Context Variables Objects"
msgstr ""

msgid ""
"In Python 3.7.1 the signatures of all context variables C APIs were "
"**changed** to use :c:type:`PyObject` pointers instead of :c:type:"
"`PyContext`, :c:type:`PyContextVar`, and :c:type:`PyContextToken`, e.g.::"
msgstr ""

msgid ""
"// in 3.7.0:\n"
"PyContext *PyContext_New(void);\n"
"\n"
"// in 3.7.1+:\n"
"PyObject *PyContext_New(void);"
msgstr ""

msgid "See :issue:`34762` for more details."
msgstr ""

msgid ""
"This section details the public C API for the :mod:`contextvars` module."
msgstr ""

msgid ""
"The C structure used to represent a :class:`contextvars.Context` object."
msgstr ""

msgid ""
"The C structure used to represent a :class:`contextvars.ContextVar` object."
msgstr ""

msgid "The C structure used to represent a :class:`contextvars.Token` object."
msgstr ""

msgid "The type object representing the *context* type."
msgstr ""

msgid "The type object representing the *context variable* type."
msgstr ""

msgid "The type object representing the *context variable token* type."
msgstr ""

msgid "Type-check macros:"
msgstr ""

msgid ""
"Return true if *o* is of type :c:data:`PyContext_Type`. *o* must not be "
"``NULL``.  This function always succeeds."
msgstr ""

msgid ""
"Return true if *o* is of type :c:data:`PyContextVar_Type`. *o* must not be "
"``NULL``.  This function always succeeds."
msgstr ""

msgid ""
"Return true if *o* is of type :c:data:`PyContextToken_Type`. *o* must not be "
"``NULL``.  This function always succeeds."
msgstr ""

msgid "Context object management functions:"
msgstr ""

msgid ""
"Create a new empty context object.  Returns ``NULL`` if an error has "
"occurred."
msgstr ""

msgid ""
"Create a shallow copy of the passed *ctx* context object. Returns ``NULL`` "
"if an error has occurred."
msgstr ""

msgid ""
"Create a shallow copy of the current thread context. Returns ``NULL`` if an "
"error has occurred."
msgstr ""

msgid ""
"Set *ctx* as the current context for the current thread. Returns ``0`` on "
"success, and ``-1`` on error."
msgstr ""

msgid ""
"Deactivate the *ctx* context and restore the previous context as the current "
"context for the current thread.  Returns ``0`` on success, and ``-1`` on "
"error."
msgstr ""

msgid ""
"Register *callback* as a context object watcher for the current interpreter. "
"Return an ID which may be passed to :c:func:`PyContext_ClearWatcher`. In "
"case of error (e.g. no more watcher IDs available), return ``-1`` and set an "
"exception."
msgstr ""

msgid ""
"Clear watcher identified by *watcher_id* previously returned from :c:func:"
"`PyContext_AddWatcher` for the current interpreter. Return ``0`` on success, "
"or ``-1`` and set an exception on error (e.g. if the given *watcher_id* was "
"never registered.)"
msgstr ""

msgid "Enumeration of possible context object watcher events:"
msgstr ""

msgid ""
"``Py_CONTEXT_SWITCHED``: The :term:`current context` has switched to a "
"different context.  The object passed to the watch callback is the now-"
"current :class:`contextvars.Context` object, or None if no context is "
"current."
msgstr ""

msgid ""
"Context object watcher callback function.  The object passed to the callback "
"is event-specific; see :c:type:`PyContextEvent` for details."
msgstr ""

msgid ""
"If the callback returns with an exception set, it must return ``-1``; this "
"exception will be printed as an unraisable exception using :c:func:"
"`PyErr_FormatUnraisable`. Otherwise it should return ``0``."
msgstr ""

msgid ""
"There may already be a pending exception set on entry to the callback. In "
"this case, the callback should return ``0`` with the same exception still "
"set. This means the callback may not call any other API that can set an "
"exception unless it saves and clears the exception state first, and restores "
"it before returning."
msgstr ""

msgid "Context variable functions:"
msgstr ""

msgid ""
"Create a new ``ContextVar`` object.  The *name* parameter is used for "
"introspection and debug purposes.  The *def* parameter specifies a default "
"value for the context variable, or ``NULL`` for no default. If an error has "
"occurred, this function returns ``NULL``."
msgstr ""

msgid ""
"Get the value of a context variable.  Returns ``-1`` if an error has "
"occurred during lookup, and ``0`` if no error occurred, whether or not a "
"value was found."
msgstr ""

msgid ""
"If the context variable was found, *value* will be a pointer to it. If the "
"context variable was *not* found, *value* will point to:"
msgstr ""

msgid "*default_value*, if not ``NULL``;"
msgstr ""

msgid "the default value of *var*, if not ``NULL``;"
msgstr ""

msgid "``NULL``"
msgstr ""

msgid "Except for ``NULL``, the function returns a new reference."
msgstr ""

msgid ""
"Set the value of *var* to *value* in the current context.  Returns a new "
"token object for this change, or ``NULL`` if an error has occurred."
msgstr ""

msgid ""
"Reset the state of the *var* context variable to that it was in before :c:"
"func:`PyContextVar_Set` that returned the *token* was called. This function "
"returns ``0`` on success and ``-1`` on error."
msgstr ""
