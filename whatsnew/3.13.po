# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's New In Python 3.13"
msgstr "Vad är nytt i Python 3.13"

msgid "Editors"
msgstr "Redigerare"

msgid "Adam Turner and Thomas Wouters"
msgstr "Adam Turner och Thomas Wouters"

msgid ""
"This article explains the new features in Python 3.13, compared to 3.12. "
"Python 3.13 was released on October 7, 2024. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"I den här artikeln förklaras de nya funktionerna i Python 3.13 jämfört med "
"3.12. Python 3.13 släpptes den 7 oktober 2024. För fullständig information, "
"se :ref:`changelog <changelog>`."

msgid ":pep:`719` -- Python 3.13 Release Schedule"
msgstr ":pep:`719` -- Python 3.13 Utgivningsschema"

msgid "Summary -- Release Highlights"
msgstr "Sammanfattning -- Release Highlights"

msgid ""
"Python 3.13 is the latest stable release of the Python programming language, "
"with a mix of changes to the language, the implementation and the standard "
"library. The biggest changes include a new `interactive interpreter "
"<whatsnew313-better-interactive-interpreter_>`_, experimental support for "
"running in a `free-threaded mode <whatsnew313-free-threaded-cpython_>`_ (:"
"pep:`703`), and a `Just-In-Time compiler <whatsnew313-jit-compiler_>`_ (:pep:"
"`744`)."
msgstr ""
"Python 3.13 är den senaste stabila versionen av programmeringsspråket "
"Python, med en blandning av ändringar i språket, implementeringen och "
"standardbiblioteket. De största förändringarna inkluderar en ny interaktiv "
"tolk <whatsnew313-better-interactive-interpreter_>`_, experimentellt stöd "
"för att köra i ett \"free-threaded mode\" <whatsnew313-free-threaded-"
"cpython_>`_ (:pep:`703``) och en \"Just-In-Time-compiler\" <whatsnew313-jit-"
"compiler_>`_ (:pep:`744``)."

msgid ""
"Error messages continue to improve, with tracebacks now highlighted in color "
"by default. The :func:`locals` builtin now has :ref:`defined semantics "
"<whatsnew313-locals-semantics>` for changing the returned mapping, and type "
"parameters now support default values."
msgstr ""
"Felmeddelanden fortsätter att förbättras, med spårningar nu markerade i färg "
"som standard. Inbyggda :func:`locals` har nu :ref:`defined semantics "
"<whatsnew313-locals-semantics>` för att ändra den returnerade mappningen, "
"och typ-parametrar stöder nu standardvärden."

msgid ""
"The library changes contain removal of deprecated APIs and modules, as well "
"as the usual improvements in user-friendliness and correctness. Several "
"legacy standard library modules have now `been removed <whatsnew313-"
"pep594_>`_ following their deprecation in Python 3.11 (:pep:`594`)."
msgstr ""
"Biblioteksändringarna innehåller borttagning av föråldrade API:er och "
"moduler, samt de vanliga förbättringarna i användarvänlighet och korrekthet. "
"Flera äldre standardbiblioteksmoduler har nu \"tagits bort <whatsnew313-"
"pep594_>`_ efter att de tagits bort i Python 3.11 (:pep:`594`)."

msgid ""
"This article doesn't attempt to provide a complete specification of all new "
"features, but instead gives a convenient overview. For full details refer to "
"the documentation, such as the :ref:`Library Reference <library-index>` and :"
"ref:`Language Reference <reference-index>`. To understand the complete "
"implementation and design rationale for a change, refer to the PEP for a "
"particular new feature; but note that PEPs usually are not kept up-to-date "
"once a feature has been fully implemented. See `Porting to Python 3.13`_ for "
"guidance on upgrading from earlier versions of Python."
msgstr ""
"Den här artikeln försöker inte ge en fullständig specifikation av alla nya "
"funktioner, utan ger istället en praktisk översikt. För fullständig "
"information hänvisas till dokumentationen, t.ex. :ref:`Library Reference "
"<library-index>` och :ref:`Language Reference <reference-index>`. För att "
"förstå den fullständiga implementeringen och designrationalen för en "
"förändring, se PEP för en viss ny funktion; men notera att PEP vanligtvis "
"inte hålls uppdaterade när en funktion har implementerats fullt ut. Se "
"`Porting to Python 3.13`_ för vägledning om uppgradering från tidigare "
"versioner av Python."

msgid "Interpreter improvements:"
msgstr "Förbättringar av tolkar:"

msgid ""
"A greatly improved :ref:`interactive interpreter <whatsnew313-better-"
"interactive-interpreter>` and :ref:`improved error messages <whatsnew313-"
"improved-error-messages>`."
msgstr ""
"En kraftigt förbättrad :ref:`interaktiv tolk <whatsnew313-better-interactive-"
"interpreter>` och :ref:`förbättrade felmeddelanden <whatsnew313-improved-"
"error-messages>`."

msgid ""
":pep:`667`: The :func:`locals` builtin now has :ref:`defined semantics "
"<whatsnew313-locals-semantics>` when mutating the returned mapping. Python "
"debuggers and similar tools may now more reliably update local variables in "
"optimized scopes even during concurrent code execution."
msgstr ""
":pep:`667`: Inbyggda :func:`locals` har nu :ref:`definierad semantik "
"<whatsnew313-locals-semantics>` vid mutation av den returnerade mappningen. "
"Python-debuggar och liknande verktyg kan nu på ett mer tillförlitligt sätt "
"uppdatera lokala variabler i optimerade scopes även under samtidig "
"kodkörning."

msgid ""
":pep:`703`: CPython 3.13 has experimental support for running with the :term:"
"`global interpreter lock` disabled. See :ref:`Free-threaded CPython "
"<whatsnew313-free-threaded-cpython>` for more details."
msgstr ""
":pep:`703`: CPython 3.13 har experimentellt stöd för att köra med :term:"
"`global interpreter lock` inaktiverat. Se :ref:``Fri-trådad CPython "
"<whatsnew313-free-threaded-cpython>`` för mer information."

msgid ""
":pep:`744`: A basic :ref:`JIT compiler <whatsnew313-jit-compiler>` was "
"added. It is currently disabled by default (though we may turn it on later). "
"Performance improvements are modest -- we expect to improve this over the "
"next few releases."
msgstr ""
":pep:`744`: En grundläggande :ref:`JIT-kompilator <whatsnew313-jit-"
"compiler>` har lagts till. Den är för närvarande inaktiverad som standard "
"(men vi kan komma att aktivera den senare). Prestandaförbättringarna är "
"blygsamma -- vi förväntar oss att förbättra detta under de kommande "
"utgåvorna."

msgid ""
"Color support in the new :ref:`interactive interpreter <whatsnew313-better-"
"interactive-interpreter>`, as well as in :ref:`tracebacks <whatsnew313-"
"improved-error-messages>` and :ref:`doctest <whatsnew313-doctest>` output. "
"This can be disabled through the :envvar:`PYTHON_COLORS` and |NO_COLOR|_ "
"environment variables."
msgstr ""
"Färgstöd i den nya :ref:`interaktiva tolken <whatsnew313-better-interactive-"
"interpreter>`, samt i :ref:`tracebacks <whatsnew313-improved-error-"
"messages>` och :ref:`doctest <whatsnew313-doctest>` utdata. Detta kan "
"inaktiveras genom miljövariablerna :envvar:`PYTHON_COLORS` och |NO_COLOR|_."

msgid "Python data model improvements:"
msgstr "Förbättringar av Python-datamodellen:"

msgid ""
":attr:`~type.__static_attributes__` stores the names of attributes accessed "
"through ``self.X`` in any function in a class body."
msgstr ""
":attr:`~type.__static_attributes__` lagrar namnen på attribut som nås via "
"``self.X`` i valfri funktion i en klass kropp."

msgid ""
":attr:`~type.__firstlineno__` records the first line number of a class "
"definition."
msgstr ""
":attr:`~type.__firstlineno__` registrerar det första radnumret i en "
"klassdefinition."

msgid "Significant improvements in the standard library:"
msgstr "Betydande förbättringar i standardbiblioteket:"

msgid ""
"Add a new :exc:`PythonFinalizationError` exception, raised when an operation "
"is blocked during :term:`finalization <interpreter shutdown>`."
msgstr ""
"Lägg till ett nytt :exc:`PythonFinalizationError`-undantag, som uppstår när "
"en operation blockeras under :term:`finalization <interpreter shutdown>`."

msgid ""
"The :mod:`argparse` module now supports deprecating command-line options, "
"positional arguments, and subcommands."
msgstr ""
"Modulen :mod:`argparse` stöder nu föråldrade kommandoradsalternativ, "
"positionella argument och underkommandon."

msgid ""
"The new functions :func:`base64.z85encode` and :func:`base64.z85decode` "
"support encoding and decoding `Z85 data`_."
msgstr ""
"De nya funktionerna :func:`base64.z85encode` och :func:`base64.z85decode` "
"stöder kodning och avkodning av `Z85-data`_."

msgid ""
"The :mod:`copy` module now has a :func:`copy.replace` function, with support "
"for many builtin types and any class defining the :func:`~object."
"__replace__` method."
msgstr ""
"Modulen :mod:`copy` har nu en funktion :func:`copy.replace`, med stöd för "
"många inbyggda typer och alla klasser som definierar metoden :func:`~object."
"__replace__`."

msgid ""
"The new :mod:`dbm.sqlite3` module is now the default :mod:`dbm` backend."
msgstr "Den nya :mod:`dbm.sqlite3`-modulen är nu standard :mod:`dbm`-backend."

msgid ""
"The :mod:`os` module has a :ref:`suite of new functions <os-timerfd>` for "
"working with Linux's timer notification file descriptors."
msgstr ""
"Modulen :mod:`os` har en :ref:`svit av nya funktioner <os-timerfd>` för att "
"arbeta med Linux timer notification file descriptors."

msgid ""
"The :mod:`random` module now has a :ref:`command-line interface <random-"
"cli>`."
msgstr ""
"Modulen :mod:`random` har nu ett :ref:`kommandoradsgränssnitt <random-cli>`."

msgid "Security improvements:"
msgstr "Förbättringar av säkerheten:"

msgid ""
":func:`ssl.create_default_context` sets :data:`ssl."
"VERIFY_X509_PARTIAL_CHAIN` and :data:`ssl.VERIFY_X509_STRICT` as default "
"flags."
msgstr ""
":func:`ssl.create_default_context` anger :data:`ssl."
"VERIFY_X509_PARTIAL_CHAIN` och :data:`ssl.VERIFY_X509_STRICT` som "
"standardflaggor."

msgid "C API improvements:"
msgstr "Förbättringar av C API:"

msgid ""
"The :c:data:`Py_mod_gil` slot is now used to indicate that an extension "
"module supports running with the :term:`GIL` disabled."
msgstr ""
"Platsen :c:data:`Py_mod_gil` används nu för att indikera att en "
"tilläggsmodul stöder körning med :term:`GIL` inaktiverad."

msgid ""
"The :doc:`PyTime C API </c-api/time>` has been added, providing access to "
"system clocks."
msgstr ""
":doc:`PyTime C API </c-api/time>` har lagts till och ger tillgång till "
"systemklockor."

msgid ""
":c:type:`PyMutex` is a new lightweight mutex that occupies a single byte."
msgstr ":c:type:`PyMutex` är en ny lättviktig mutex som upptar en enda byte."

msgid ""
"There is a new :ref:`suite of functions <c-api-monitoring>` for generating :"
"pep:`669` monitoring events in the C API."
msgstr ""
"Det finns en ny :ref:`svit av funktioner <c-api-monitoring>` för att "
"generera :pep:`669` övervakningshändelser i C API."

msgid "New typing features:"
msgstr "Nya funktioner för skrivning:"

msgid ""
":pep:`696`: Type parameters (:data:`typing.TypeVar`, :data:`typing."
"ParamSpec`, and :data:`typing.TypeVarTuple`) now support defaults."
msgstr ""
":pep:`696`: Typparametrar (:data:`typing.TypeVar`, :data:`typing.ParamSpec`, "
"och :data:`typing.TypeVarTuple`) stöder nu standardvärden."

msgid ""
":pep:`702`: The new :func:`warnings.deprecated` decorator adds support for "
"marking deprecations in the type system and at runtime."
msgstr ""
":pep:`702`: Den nya :func:`warnings.deprecated`-dekoratorn lägger till stöd "
"för att markera deprecations i typsystemet och vid körning."

msgid ""
":pep:`705`: :data:`typing.ReadOnly` can be used to mark an item of a :class:"
"`typing.TypedDict` as read-only for type checkers."
msgstr ""
":pep:`705`: :data:`typing.ReadOnly` kan användas för att markera ett objekt "
"i en :class:`typing.TypedDict` som skrivskyddat för typkontrollanter."

msgid ""
":pep:`742`: :data:`typing.TypeIs` provides more intuitive type narrowing "
"behavior, as an alternative to :data:`typing.TypeGuard`."
msgstr ""
":pep:`742`: :data:`typing.TypeIs` ger ett mer intuitivt beteende för "
"typbegränsning, som ett alternativ till :data:`typing.TypeGuard`."

msgid "Platform support:"
msgstr "Stöd för plattform:"

msgid ""
":pep:`730`: Apple's iOS is now an :ref:`officially supported platform "
"<whatsnew313-platform-support>`, at :pep:`tier 3 <11#tier-3>`."
msgstr ""
":pep:`730`: Apples iOS är nu en :ref:`officiellt stödd plattform "
"<whatsnew313-platform-support>`, på :pep:`nivå 3 <11#tier-3>`."

msgid ""
":pep:`738`: Android is now an :ref:`officially supported platform "
"<whatsnew313-platform-support>`, at :pep:`tier 3 <11#tier-3>`."
msgstr ""
":pep:`738`: Android är nu en :ref:`officiellt stödd plattform <whatsnew313-"
"platform-support>`, på :pep:`nivå 3 <11#tier-3>`."

msgid ""
"``wasm32-wasi`` is now supported as a :pep:`tier 2 <11#tier-2>` platform."
msgstr "``wasm32-wasi`` stöds nu som en :pep:`tier 2 <11#tier-2>`-plattform."

msgid "``wasm32-emscripten`` is no longer an officially supported platform."
msgstr "``wasm32-emscripten`` är inte längre en officiellt stödd plattform."

msgid "Important removals:"
msgstr "Viktiga flyttningar:"

msgid ""
":ref:`PEP 594 <whatsnew313-pep594>`: The remaining 19 \"dead "
"batteries\" (legacy stdlib modules) have been removed from the standard "
"library: :mod:`!aifc`, :mod:`!audioop`, :mod:`!cgi`, :mod:`!cgitb`, :mod:`!"
"chunk`, :mod:`!crypt`, :mod:`!imghdr`, :mod:`!mailcap`, :mod:`!msilib`, :mod:"
"`!nis`, :mod:`!nntplib`, :mod:`!ossaudiodev`, :mod:`!pipes`, :mod:`!"
"sndhdr`, :mod:`!spwd`, :mod:`!sunau`, :mod:`!telnetlib`, :mod:`!uu` and :mod:"
"`!xdrlib`."
msgstr ""
":ref:`PEP 594 <whatsnew313-pep594>`: De återstående 19 \"döda "
"batterierna\" (legacy stdlib modules) har tagits bort från "
"standardbiblioteket: :mod:`!aifc`, :mod:`!audioop`, :mod:`!cgi`, :mod:`!"
"cgitb`, :mod:`!chunk`, :mod:`!crypt`, :mod:`!imghdr`, :mod:`!mailcap`, :mod:"
"`!msilib`, :mod:`!nis`, :mod:`!nntplib`, :mod:`!ossaudiodev`, :mod:`!"
"pipes`, :mod:`!sndhdr`, :mod:`!spwd`, :mod:`!sunau`, :mod:`!telnetlib`, :mod:"
"`!uu` och :mod:`!xdrlib`."

msgid ""
"Remove the :program:`2to3` tool and :mod:`!lib2to3` module (deprecated in "
"Python 3.11)."
msgstr ""
"Ta bort verktyget :program:`2to3` och modulen :mod:`!lib2to3` (föråldrad i "
"Python 3.11)."

msgid "Remove the :mod:`!tkinter.tix` module (deprecated in Python 3.6)."
msgstr "Ta bort modulen :mod:`!tkinter.tix` (föråldrad i Python 3.6)."

msgid "Remove the :func:`!locale.resetlocale` function."
msgstr "Ta bort funktionen :func:`!locale.resetlocale`."

msgid "Remove the :mod:`!typing.io` and :mod:`!typing.re` namespaces."
msgstr "Ta bort namnområdena :mod:`!typing.io` och :mod:`!typing.re`."

msgid "Remove chained :class:`classmethod` descriptors."
msgstr "Ta bort kedjade :class:`classmethod`-beskrivningar."

msgid "Release schedule changes:"
msgstr "Ändringar i lanseringsschemat:"

msgid ""
":pep:`602` (\"Annual Release Cycle for Python\") has been updated to extend "
"the full support ('bugfix') period for new releases to two years. This "
"updated policy means that:"
msgstr ""
":pep:`602` (\"Årlig utgivningscykel för Python\") har uppdaterats för att "
"förlänga perioden för fullt stöd (\"bugfix\") för nya utgåvor till två år. "
"Denna uppdaterade policy innebär att:"

msgid ""
"Python 3.9--3.12 have one and a half years of full support, followed by "
"three and a half years of security fixes."
msgstr ""
"Python 3.9--3.12 har ett och ett halvt års full support, följt av tre och "
"ett halvt år med säkerhetsfixar."

msgid ""
"Python 3.13 and later have two years of full support, followed by three "
"years of security fixes."
msgstr ""
"Python 3.13 och senare har två års full support, följt av tre års "
"säkerhetsfixar."

msgid "New Features"
msgstr "Nya funktioner"

msgid "A better interactive interpreter"
msgstr "En bättre interaktiv tolk"

msgid ""
"Python now uses a new :term:`interactive` shell by default, based on code "
"from the `PyPy project`_. When the user starts the :term:`REPL` from an "
"interactive terminal, the following new features are now supported:"
msgstr ""
"Python använder nu ett nytt :term:`interaktivt` skal som standard, baserat "
"på kod från `PyPy-projektet`_. När användaren startar :term:`REPL` från en "
"interaktiv terminal stöds nu följande nya funktioner:"

msgid "Multiline editing with history preservation."
msgstr "Flerlinjig redigering med historiskt bevarande."

msgid ""
"Direct support for REPL-specific commands like :kbd:`help`, :kbd:`exit`, "
"and :kbd:`quit`, without the need to call them as functions."
msgstr ""
"Direkt stöd för REPL-specifika kommandon som :kbd:`help`, :kbd:`exit` och :"
"kbd:`quit`, utan att behöva anropa dem som funktioner."

msgid ""
"Prompts and tracebacks with :ref:`color enabled by default <using-on-"
"controlling-color>`."
msgstr ""
"Prompts och tracebacks med :ref:`färg aktiverad som standard <using-on-"
"controlling-color>`."

msgid ""
"Interactive help browsing using :kbd:`F1` with a separate command history."
msgstr "Interaktiv hjälpsökning med :kbd:`F1` med en separat kommandohistorik."

msgid ""
"History browsing using :kbd:`F2` that skips output as well as the :term:"
"`>>>` and :term:`...` prompts."
msgstr ""
"Historikbläddring med :kbd:`F2` som hoppar över utdata samt uppmaningarna :"
"term:`>>>` och :term:`...`."

msgid ""
"\"Paste mode\" with :kbd:`F3` that makes pasting larger blocks of code "
"easier (press :kbd:`F3` again to return to the regular prompt)."
msgstr ""
"\"Paste mode\" med :kbd:`F3` som gör det enklare att klistra in större "
"kodblock (tryck på :kbd:`F3` igen för att återgå till den vanliga prompten)."

msgid ""
"To disable the new interactive shell, set the :envvar:`PYTHON_BASIC_REPL` "
"environment variable. For more on interactive mode, see :ref:`tut-interac`."
msgstr ""
"Om du vill inaktivera det nya interaktiva skalet ställer du in "
"miljövariabeln :envvar:`PYTHON_BASIC_REPL`. För mer information om "
"interaktivt läge, se :ref:`tut-interac`."

msgid ""
"(Contributed by Pablo Galindo Salgado, Łukasz Langa, and Lysandros Nikolaou "
"in :gh:`111201` based on code from the PyPy project. Windows support "
"contributed by Dino Viehland and Anthony Shaw.)"
msgstr ""
"(Bidrag från Pablo Galindo Salgado, Łukasz Langa och Lysandros Nikolaou i :"
"gh:`111201` baserat på kod från PyPy-projektet. Windows-stöd har "
"tillhandahållits av Dino Viehland och Anthony Shaw)"

msgid "Improved error messages"
msgstr "Förbättrade felmeddelanden"

msgid ""
"The interpreter now uses color by default when displaying tracebacks in the "
"terminal. This feature :ref:`can be controlled <using-on-controlling-color>` "
"via the new :envvar:`PYTHON_COLORS` environment variable as well as the "
"canonical |NO_COLOR|_ and |FORCE_COLOR|_ environment variables. (Contributed "
"by Pablo Galindo Salgado in :gh:`112730`.)"
msgstr ""
"Tolken använder nu färg som standard när den visar spårningar i terminalen. "
"Denna funktion :ref:`kan kontrolleras <using-on-controlling-color>` via den "
"nya miljövariabeln :envvar:`PYTHON_COLORS` samt de kanoniska "
"miljövariablerna |NO_COLOR|_ och |FORCE_COLOR|_. (Bidrag från Pablo Galindo "
"Salgado i :gh:`112730`.)"

msgid ""
"A common mistake is to write a script with the same name as a standard "
"library module. When this results in errors, we now display a more helpful "
"error message:"
msgstr ""
"Ett vanligt misstag är att skriva ett skript med samma namn som en modul i "
"standardbiblioteket. När detta leder till fel visar vi nu ett mer användbart "
"felmeddelande:"

msgid ""
"$ python random.py\n"
"Traceback (most recent call last):\n"
"  File \"/home/me/random.py\", line 1, in <module>\n"
"    import random\n"
"  File \"/home/me/random.py\", line 3, in <module>\n"
"    print(random.randint(5))\n"
"          ^^^^^^^^^^^^^^\n"
"AttributeError: module 'random' has no attribute 'randint' (consider "
"renaming '/home/me/random.py' since it has the same name as the standard "
"library module named 'random' and prevents importing that standard library "
"module)"
msgstr ""
"$ python random.py\n"
"Traceback (most recent call last):\n"
"  File \"/home/me/random.py\", line 1, in <module>\n"
"    import random\n"
"  File \"/home/me/random.py\", line 3, in <module>\n"
"    print(random.randint(5))\n"
"          ^^^^^^^^^^^^^^\n"
"AttributeError: module 'random' has no attribute 'randint' (consider "
"renaming '/home/me/random.py' since it has the same name as the standard "
"library module named 'random' and prevents importing that standard library "
"module)"

msgid ""
"Similarly, if a script has the same name as a third-party module that it "
"attempts to import and this results in errors, we also display a more "
"helpful error message:"
msgstr ""
"På samma sätt visar vi ett mer användbart felmeddelande om ett skript har "
"samma namn som en tredjepartsmodul som det försöker importera och detta "
"leder till fel:"

msgid ""
"$ python numpy.py\n"
"Traceback (most recent call last):\n"
"  File \"/home/me/numpy.py\", line 1, in <module>\n"
"    import numpy as np\n"
"  File \"/home/me/numpy.py\", line 3, in <module>\n"
"    np.array([1, 2, 3])\n"
"    ^^^^^^^^\n"
"AttributeError: module 'numpy' has no attribute 'array' (consider renaming '/"
"home/me/numpy.py' if it has the same name as a library you intended to "
"import)"
msgstr ""
"$ python numpy.py\n"
"Traceback (most recent call last):\n"
"  File \"/home/me/numpy.py\", line 1, in <module>\n"
"    import numpy as np\n"
"  File \"/home/me/numpy.py\", line 3, in <module>\n"
"    np.array([1, 2, 3])\n"
"    ^^^^^^^^\n"
"AttributeError: module 'numpy' has no attribute 'array' (consider renaming '/"
"home/me/numpy.py' if it has the same name as a library you intended to "
"import)"

msgid "(Contributed by Shantanu Jain in :gh:`95754`.)"
msgstr "(Bidrag från Shantanu Jain i :gh:`95754`.)"

msgid ""
"The error message now tries to suggest the correct keyword argument when an "
"incorrect keyword argument is passed to a function."
msgstr ""
"Felmeddelandet försöker nu föreslå det korrekta nyckelordsargumentet när ett "
"felaktigt nyckelordsargument skickas till en funktion."

msgid ""
">>> \"Better error messages!\".split(max_split=1)\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-0>\", line 1, in <module>\n"
"    \"Better error messages!\".split(max_split=1)\n"
"    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^\n"
"TypeError: split() got an unexpected keyword argument 'max_split'. Did you "
"mean 'maxsplit'?"
msgstr ""
"&gt;&gt;&gt; \"Bättre felmeddelanden!\".split(max_split=1)\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<python-input-0>\", rad 1, i <module>\n"
"    \"Bättre felmeddelanden!\".split(max_split=1)\n"
"    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^\n"
"TypeError: split() fick ett oväntat nyckelordsargument 'max_split'. Menade "
"du \"maxsplit\"?"

msgid ""
"(Contributed by Pablo Galindo Salgado and Shantanu Jain in :gh:`107944`.)"
msgstr "(Bidrag från Pablo Galindo Salgado och Shantanu Jain i :gh:`107944`.)"

msgid "Free-threaded CPython"
msgstr "Fri trådad CPython"

msgid ""
"CPython now has experimental support for running in a free-threaded mode, "
"with the :term:`global interpreter lock` (GIL) disabled. This is an "
"experimental feature and therefore is not enabled by default. The free-"
"threaded mode requires a different executable, usually called "
"``python3.13t`` or ``python3.13t.exe``. Pre-built binaries marked as *free-"
"threaded* can be installed as part of the official :ref:`Windows <install-"
"freethreaded-windows>` and :ref:`macOS <install-freethreaded-macos>` "
"installers, or CPython can be built from source with the :option:`--disable-"
"gil` option."
msgstr ""
"CPython har nu experimentellt stöd för att köras i ett fritt trådat läge, "
"med :term:`global interpreter lock` (GIL) inaktiverat. Detta är en "
"experimentell funktion och är därför inte aktiverad som standard. Det fritt "
"trådade läget kräver en annan körbar fil, som vanligtvis kallas "
"``python3.13t`` eller ``python3.13t.exe``. Förbyggda binärfiler markerade "
"som *free-threaded* kan installeras som en del av de officiella :ref:"
"``Windows <install-freethreaded-windows>`` och :ref:``macOS <install-"
"freethreaded-macos>`` installationsprogrammen, eller så kan CPython byggas "
"från källan med :option:`--disable-gil` alternativet."

msgid ""
"Free-threaded execution allows for full utilization of the available "
"processing power by running threads in parallel on available CPU cores. "
"While not all software will benefit from this automatically, programs "
"designed with threading in mind will run faster on multi-core hardware. "
"**The free-threaded mode is experimental** and work is ongoing to improve "
"it: expect some bugs and a substantial single-threaded performance hit. Free-"
"threaded builds of CPython support optionally running with the GIL enabled "
"at runtime using the environment variable :envvar:`PYTHON_GIL` or the "
"command-line option :option:`-X gil=1`."
msgstr ""
"Fri trådning gör det möjligt att utnyttja den tillgängliga processorkraften "
"fullt ut genom att köra trådar parallellt på tillgängliga CPU-kärnor. Även "
"om inte all programvara kan dra nytta av detta automatiskt, kommer program "
"som utformats med trådning i åtanke att köras snabbare på flerkärnig "
"maskinvara. **Det fritt trådade läget är experimentellt** och arbete pågår "
"för att förbättra det: förvänta dig vissa buggar och en betydande "
"prestandaförlust för enstaka trådar. Fri-trådade versioner av CPython stöder "
"valfri körning med GIL aktiverad vid körning med hjälp av miljövariabeln :"
"envvar:`PYTHON_GIL` eller kommandoradsalternativet :option:`-X gil=1`."

msgid ""
"To check if the current interpreter supports free-threading, :option:`python "
"-VV <-V>` and :data:`sys.version` contain \"experimental free-threading "
"build\". The new :func:`!sys._is_gil_enabled` function can be used to check "
"whether the GIL is actually disabled in the running process."
msgstr ""
"För att kontrollera om den aktuella tolken stöder free-threading, "
"innehåller :option:`python -VV <-V>` och :data:`sys.version` \"experimental "
"free-threading build\". Den nya funktionen :func:`!sys._is_gil_enabled` kan "
"användas för att kontrollera om GIL faktiskt är inaktiverad i den process "
"som körs."

msgid ""
"C-API extension modules need to be built specifically for the free-threaded "
"build. Extensions that support running with the :term:`GIL` disabled should "
"use the :c:data:`Py_mod_gil` slot. Extensions using single-phase init should "
"use :c:func:`PyUnstable_Module_SetGIL` to indicate whether they support "
"running with the GIL disabled. Importing C extensions that don't use these "
"mechanisms will cause the GIL to be enabled, unless the GIL was explicitly "
"disabled with the :envvar:`PYTHON_GIL` environment variable or the :option:`-"
"X gil=0` option. pip 24.1 or newer is required to install packages with C "
"extensions in the free-threaded build."
msgstr ""
"C-API-tilläggsmoduler måste byggas specifikt för den fritt trådade "
"versionen. Tillägg som stöder körning med :term:`GIL` inaktiverad bör "
"använda :c:data:`Py_mod_gil` slot. Tillägg som använder enfasig init bör "
"använda :c:func:`PyUnstable_Module_SetGIL` för att ange om de stöder körning "
"med GIL inaktiverad. Import av C-tillägg som inte använder dessa mekanismer "
"kommer att leda till att GIL aktiveras, såvida inte GIL uttryckligen "
"inaktiverats med miljövariabeln :envvar:`PYTHON_GIL` eller alternativet :"
"option:`-X gil=0`. pip 24.1 eller nyare krävs för att installera paket med C-"
"tillägg i den frittrådade byggnaden."

msgid ""
"This work was made possible thanks to many individuals and organizations, "
"including the large community of contributors to Python and third-party "
"projects to test and enable free-threading support. Notable contributors "
"include: Sam Gross, Ken Jin, Donghee Na, Itamar Oren, Matt Page, Brett "
"Simmers, Dino Viehland, Carl Meyer, Nathan Goldbaum, Ralf Gommers, Lysandros "
"Nikolaou, and many others. Many of these contributors are employed by Meta, "
"which has provided significant engineering resources to support this project."
msgstr ""
"Detta arbete har möjliggjorts tack vare många individer och organisationer, "
"inklusive den stora gruppen av bidragsgivare till Python och "
"tredjepartsprojekt för att testa och möjliggöra stöd för free-threading. "
"Anmärkningsvärda bidragsgivare inkluderar: Sam Gross, Ken Jin, Donghee Na, "
"Itamar Oren, Matt Page, Brett Simmers, Dino Viehland, Carl Meyer, Nathan "
"Goldbaum, Ralf Gommers, Lysandros Nikolaou och många andra. Många av dessa "
"bidragsgivare är anställda av Meta, som har tillhandahållit betydande "
"tekniska resurser för att stödja detta projekt."

msgid ""
":pep:`703` \"Making the Global Interpreter Lock Optional in CPython\" "
"contains rationale and information surrounding this work."
msgstr ""
":pep:`703` \"Making the Global Interpreter Lock Optional in CPython\" "
"innehåller motivering och information om detta arbete."

msgid ""
"`Porting Extension Modules to Support Free-Threading <https://py-free-"
"threading.github.io/porting/>`_: A community-maintained porting guide for "
"extension authors."
msgstr ""
"\"Portning av tilläggsmoduler för att stödja fri trådning <https://py-free-"
"threading.github.io/porting/>`_: En community-underhållen portningsguide för "
"tilläggsförfattare."

msgid "An experimental just-in-time (JIT) compiler"
msgstr "En experimentell JIT-kompilator (just-in-time)"

msgid ""
"When CPython is configured and built using the :option:`!--enable-"
"experimental-jit` option, a just-in-time (JIT) compiler is added which may "
"speed up some Python programs. On Windows, use ``PCbuild/build.bat --"
"experimental-jit`` to enable the JIT or ``--experimental-jit-interpreter`` "
"to enable the Tier 2 interpreter. Build requirements and further supporting "
"information `are contained at`__ :file:`Tools/jit/README.md`."
msgstr ""
"När CPython konfigureras och byggs med alternativet :option:`!--enable-"
"experimental-jit` läggs en JIT-kompilator (just-in-time) till, vilket kan "
"snabba upp vissa Python-program. I Windows använder du ``PCbuild/build.bat --"
"experimental-jit`` för att aktivera JIT eller ``--experimental-jit-"
"interpreter`` för att aktivera Tier 2-tolken. Byggkrav och ytterligare "
"stödjande information finns i :file:`Tools/jit/README.md`."

msgid ""
"The :option:`!--enable-experimental-jit` option takes these (optional) "
"values, defaulting to ``yes`` if :option:`!--enable-experimental-jit` is "
"present without the optional value."
msgstr ""
"Alternativet :option:`!--enable-experimental-jit` tar dessa (valfria) "
"värden, med standardvärdet ``yes`` om :option:`!--enable-experimental-jit` "
"finns utan det valfria värdet."

msgid "``no``: Disable the entire Tier 2 and JIT pipeline."
msgstr "``no``: Inaktivera hela Tier 2- och JIT-pipelinen."

msgid ""
"``yes``: Enable the JIT. To disable the JIT at runtime, pass the environment "
"variable ``PYTHON_JIT=0``."
msgstr ""
"``ja``: Aktivera JIT. För att inaktivera JIT vid körning, skicka "
"miljövariabeln ``PYTHON_JIT=0``."

msgid ""
"``yes-off``: Build the JIT but disable it by default. To enable the JIT at "
"runtime, pass the environment variable ``PYTHON_JIT=1``."
msgstr ""
"``yes-off``: Bygg JIT men inaktivera den som standard. För att aktivera JIT "
"vid körning, skicka miljövariabeln ``PYTHON_JIT=1``."

msgid ""
"``interpreter``: Enable the Tier 2 interpreter but disable the JIT. The "
"interpreter can be disabled by running with ``PYTHON_JIT=0``."
msgstr ""
"``tolk``: Aktiverar Tier 2-tolken men inaktiverar JIT. Tolken kan "
"avaktiveras genom att köra med ``PYTHON_JIT=0``."

msgid "The internal architecture is roughly as follows:"
msgstr "Den interna arkitekturen är ungefär som följer:"

msgid ""
"We start with specialized *Tier 1 bytecode*. See :ref:`What's new in 3.11 "
"<whatsnew311-pep659>` for details."
msgstr ""
"Vi börjar med specialiserad *Tier 1 bytecode*. Se :ref:`Vad är nytt i 3.11 "
"<whatsnew311-pep659>` för detaljer."

msgid ""
"When the Tier 1 bytecode gets hot enough, it gets translated to a new purely "
"internal intermediate representation (IR), called the *Tier 2 IR*, and "
"sometimes referred to as micro-ops (\"uops\")."
msgstr ""
"När bytekoden på Tier 1 blir tillräckligt varm översätts den till en ny rent "
"intern intermediär representation (IR), kallad *Tier 2 IR*, och ibland "
"kallad mikro-ops (\"uops\")."

msgid ""
"The Tier 2 IR uses the same stack-based virtual machine as Tier 1, but the "
"instruction format is better suited to translation to machine code."
msgstr ""
"Tier 2 IR använder samma stackbaserade virtuella maskin som Tier 1, men "
"instruktionsformatet är bättre lämpat för översättning till maskinkod."

msgid ""
"We have several optimization passes for Tier 2 IR, which are applied before "
"it is interpreted or translated to machine code."
msgstr ""
"Vi har flera optimeringspass för Tier 2 IR, som tillämpas innan den tolkas "
"eller översätts till maskinkod."

msgid ""
"There is a Tier 2 interpreter, but it is mostly intended for debugging the "
"earlier stages of the optimization pipeline. The Tier 2 interpreter can be "
"enabled by configuring Python with ``--enable-experimental-jit=interpreter``."
msgstr ""
"Det finns en Tier 2-tolk, men den är främst avsedd för felsökning av de "
"tidigare stegen i optimeringspipelinen. Tier 2-tolken kan aktiveras genom "
"att konfigurera Python med ``--enable-experimental-jit=interpreter``."

msgid ""
"When the JIT is enabled, the optimized Tier 2 IR is translated to machine "
"code, which is then executed."
msgstr ""
"När JIT är aktiverat översätts den optimerade Tier 2 IR till maskinkod, som "
"sedan exekveras."

msgid ""
"The machine code translation process uses a technique called *copy-and-"
"patch*. It has no runtime dependencies, but there is a new build-time "
"dependency on LLVM."
msgstr ""
"Översättningsprocessen för maskinkod använder en teknik som kallas *copy-and-"
"patch*. Den har inga runtime-beroenden, men det finns ett nytt build-time-"
"beroende av LLVM."

msgid ":pep:`744`"
msgstr ":pep:`744``"

msgid ""
"(JIT by Brandt Bucher, inspired by a paper by Haoran Xu and Fredrik "
"Kjolstad. Tier 2 IR by Mark Shannon and Guido van Rossum. Tier 2 optimizer "
"by Ken Jin.)"
msgstr ""
"(JIT av Brandt Bucher, inspirerad av en artikel av Haoran Xu och Fredrik "
"Kjolstad. Tier 2 IR av Mark Shannon och Guido van Rossum. Tier 2-optimerare "
"av Ken Jin)"

msgid "Defined mutation semantics for :py:func:`locals`"
msgstr "Definierad mutationssemantik för :py:func:`locals`"

msgid ""
"Historically, the expected result of mutating the return value of :func:"
"`locals` has been left to individual Python implementations to define. "
"Starting from Python 3.13, :pep:`667` standardises the historical behavior "
"of CPython for most code execution scopes, but changes :term:`optimized "
"scopes <optimized scope>` (functions, generators, coroutines, "
"comprehensions, and generator expressions) to explicitly return independent "
"snapshots of the currently assigned local variables, including locally "
"referenced nonlocal variables captured in closures."
msgstr ""
"Historiskt sett har det förväntade resultatet av att mutera returvärdet för :"
"func:`locals` lämnats till enskilda Python-implementationer att definiera. "
"Från och med Python 3.13 standardiserar :pep:`667` det historiska beteendet "
"hos CPython för de flesta kodkörningsområden, men ändrar :term:`optimized "
"scopes <optimized scope>` (funktioner, generatorer, coroutines, "
"comprehensions och generatoruttryck) för att uttryckligen returnera "
"oberoende ögonblicksbilder av de för närvarande tilldelade lokala "
"variablerna, inklusive lokalt refererade icke-lokala variabler som fångas i "
"closures."

msgid ""
"This change to the semantics of :func:`locals` in optimized scopes also "
"affects the default behavior of code execution functions that implicitly "
"target :func:`!locals` if no explicit namespace is provided (such as :func:"
"`exec` and :func:`eval`). In previous versions, whether or not changes could "
"be accessed by calling :func:`!locals` after calling the code execution "
"function was implementation-dependent. In CPython specifically, such code "
"would typically appear to work as desired, but could sometimes fail in "
"optimized scopes based on other code (including debuggers and code execution "
"tracing tools) potentially resetting the shared snapshot in that scope. Now, "
"the code will always run against an independent snapshot of the local "
"variables in optimized scopes, and hence the changes will never be visible "
"in subsequent calls to :func:`!locals`. To access the changes made in these "
"cases, an explicit namespace reference must now be passed to the relevant "
"function. Alternatively, it may make sense to update affected code to use a "
"higher level code execution API that returns the resulting code execution "
"namespace (e.g. :func:`runpy.run_path` when executing Python files from "
"disk)."
msgstr ""
"Denna ändring av semantiken för :func:`locals` i optimerade scopes påverkar "
"även standardbeteendet för kodexekveringsfunktioner som implicit riktar sig "
"till :func:`!locals` om inget explicit namnområde anges (t.ex. :func:`exec` "
"och :func:`eval`). I tidigare versioner var det implementationsberoende om "
"ändringar kunde nås genom att anropa :func:`!locals` efter anrop av "
"kodkörningsfunktionen eller inte. I CPython specifikt skulle sådan kod "
"vanligtvis verka fungera som önskat, men kunde ibland misslyckas i "
"optimerade scope baserat på annan kod (inklusive debuggar och verktyg för "
"spårning av kodexekvering) som potentiellt återställde den delade "
"ögonblicksbilden i det scope. Nu kommer koden alltid att köras mot en "
"oberoende ögonblicksbild av de lokala variablerna i optimerade scopes, och "
"därför kommer ändringarna aldrig att vara synliga i efterföljande anrop "
"till :func:`!locals`. För att komma åt de ändringar som gjorts i dessa fall "
"måste en explicit namnrymdsreferens nu skickas till den relevanta "
"funktionen. Alternativt kan det vara klokt att uppdatera berörd kod så att "
"den använder ett API för kodkörning på högre nivå som returnerar det "
"resulterande namnområdet för kodkörning (t.ex. :func:`runpy.run_path` när "
"Python-filer körs från disk)."

msgid ""
"To ensure debuggers and similar tools can reliably update local variables in "
"scopes affected by this change, :attr:`FrameType.f_locals <frame.f_locals>` "
"now returns a write-through proxy to the frame's local and locally "
"referenced nonlocal variables in these scopes, rather than returning an "
"inconsistently updated shared ``dict`` instance with undefined runtime "
"semantics."
msgstr ""
"För att säkerställa att debuggar och liknande verktyg på ett tillförlitligt "
"sätt kan uppdatera lokala variabler i scopes som påverkas av denna ändring, "
"returnerar :attr:`FrameType.f_locals <frame.f_locals>` nu en write-through "
"proxy till ramens lokala och lokalt refererade icke-lokala variabler i dessa "
"scopes, i stället för att returnera en inkonsekvent uppdaterad delad "
"``dict``-instans med odefinierad körtidssemantik."

msgid ""
"See :pep:`667` for more details, including related C API changes and "
"deprecations. Porting notes are also provided below for the affected :ref:"
"`Python APIs <pep667-porting-notes-py>` and :ref:`C APIs <pep667-porting-"
"notes-c>`."
msgstr ""
"Se :pep:`667` för mer information, inklusive relaterade C API-ändringar och "
"deprecations. Portningsnoteringar finns också nedan för de berörda :ref:"
"`Python APIs <pep667-porting-notes-py>` och :ref:`C APIs <pep667-porting-"
"notes-c>`."

msgid ""
"(PEP and implementation contributed by Mark Shannon and Tian Gao in :gh:"
"`74929`. Documentation updates provided by Guido van Rossum and Alyssa "
"Coghlan.)"
msgstr ""
"(PEP och implementering bidragit av Mark Shannon och Tian Gao i :gh:`74929`. "
"Uppdateringar av dokumentation har tillhandahållits av Guido van Rossum och "
"Alyssa Coghlan)"

msgid "Support for mobile platforms"
msgstr "Stöd för mobila plattformar"

msgid ""
":pep:`730`: iOS is now a :pep:`11` supported platform, with the ``arm64-"
"apple-ios`` and ``arm64-apple-ios-simulator`` targets at tier 3 (iPhone and "
"iPad devices released after 2013 and the Xcode iOS simulator running on "
"Apple silicon hardware, respectively). ``x86_64-apple-ios-simulator`` (the "
"Xcode iOS simulator running on older ``x86_64`` hardware) is not a tier 3 "
"supported platform, but will have best-effort support. (PEP written and "
"implementation contributed by Russell Keith-Magee in :gh:`114099`.)"
msgstr ""
":pep:`730`: iOS är nu en plattform som stöds av :pep:`11`, med målen ``arm64-"
"apple-ios`` och ``arm64-apple-ios-simulator`` på nivå 3 (iPhone- och iPad-"
"enheter som släpptes efter 2013 respektive Xcode iOS-simulatorn som körs på "
"Apple-kiselhårdvara). ``x86_64-apple-ios-simulator`` (Xcode iOS-simulatorn "
"som körs på äldre ``x86_64``-hårdvara) är inte en plattform som stöds på "
"nivå 3, men kommer att ha bästa möjliga stöd. (PEP skriven och "
"implementering bidragit av Russell Keith-Magee i :gh:`114099`.)"

msgid ""
":pep:`738`: Android is now a :pep:`11` supported platform, with the "
"``aarch64-linux-android`` and ``x86_64-linux-android`` targets at tier 3. "
"The 32-bit targets ``arm-linux-androideabi`` and ``i686-linux-android`` are "
"not tier 3 supported platforms, but will have best-effort support. (PEP "
"written and implementation contributed by Malcolm Smith in :gh:`116622`.)"
msgstr ""
":pep:`738`: Android är nu en plattform som stöds av :pep:`11`, med målen "
"``aarch64-linux-android`` och ``x86_64-linux-android`` på nivå 3. 32-bitars "
"målen ``arm-linux-androideabi`` och ``i686-linux-android`` är inte "
"plattformar som stöds på nivå 3, men kommer att ha stöd efter bästa förmåga. "
"(PEP skriven och implementeringen bidragit av Malcolm Smith i :gh:`116622`.)"

msgid ":pep:`730`, :pep:`738`"
msgstr ":pep:`730`, :pep:`738`"

msgid "Other Language Changes"
msgstr "Andra språkliga förändringar"

msgid ""
"The compiler now strips common leading whitespace from every line in a "
"docstring. This reduces the size of the :term:`bytecode cache <bytecode>` "
"(such as ``.pyc`` files), with reductions in file size of around 5%, for "
"example in :mod:`!sqlalchemy.orm.session` from SQLAlchemy 2.0. This change "
"affects tools that use docstrings, such as :mod:`doctest`."
msgstr ""
"Kompilatorn tar nu bort vanliga ledande blanksteg från varje rad i en "
"dokumentsträng. Detta minskar storleken på :term:`bytecode cache <bytecode>` "
"(såsom ``.pyc``-filer), med minskningar i filstorlek på cirka 5%, till "
"exempel i :mod:`!sqlalchemy.orm.session` från SQLAlchemy 2.0. Denna ändring "
"påverkar verktyg som använder dokumentsträngar, t.ex. :mod:`doctest`."

msgid ""
">>> def spam():\n"
"...     \"\"\"\n"
"...         This is a docstring with\n"
"...           leading whitespace.\n"
"...\n"
"...         It even has multiple paragraphs!\n"
"...     \"\"\"\n"
"...\n"
">>> spam.__doc__\n"
"'\\nThis is a docstring with\\n  leading whitespace.\\n\\nIt even has "
"multiple paragraphs!\\n'"
msgstr ""
">>> def spam():\n"
"...     \"\"\"\n"
"...         Detta är en dokumentsträng med\n"
"... inledande blanksteg.\n"
"...\n"
"...         Den har till och med flera stycken!\n"
"...     \"\"\"\n"
"...\n"
">>> spam.__doc__\n"
"'\\nDetta är en dokumentsträng med\\n ledande blanksteg.\\n\\nDet har till "
"och med flera stycken!\\n'"

msgid "(Contributed by Inada Naoki in :gh:`81283`.)"
msgstr "(Bidrag från Inada Naoki i :gh:`81283`.)"

msgid ""
":ref:`Annotation scopes <annotation-scopes>` within class scopes can now "
"contain lambdas and comprehensions. Comprehensions that are located within "
"class scopes are not inlined into their parent scope."
msgstr ""
":ref:`Annotation scopes <annotation-scopes>` inom class scopes kan nu "
"innehålla lambdas och förståelser. Förståelser som ligger inom klass-scopes "
"inlinas inte i sitt föräldra-scope."

msgid ""
"class C[T]:\n"
"    type Alias = lambda: T"
msgstr ""
"klass C[T]:\n"
"    typ Alias = lambda: T"

msgid "(Contributed by Jelle Zijlstra in :gh:`109118` and :gh:`118160`.)"
msgstr "(Bidrag från Jelle Zijlstra i :gh:`109118` och :gh:`118160`.)"

msgid ""
":ref:`Future statements <future>` are no longer triggered by relative "
"imports of the :mod:`__future__` module, meaning that statements of the form "
"``from .__future__ import ...`` are now simply standard relative imports, "
"with no special features activated. (Contributed by Jeremiah Gabriel Pascual "
"in :gh:`118216`.)"
msgstr ""
":ref:``Future statements <future>`` utlöses inte längre av relativ import av "
"modulen :mod:`__future__`, vilket innebär att statements av formen ``from ."
"__future__ import ...`` nu helt enkelt är standard relativ import, utan att "
"några speciella funktioner aktiveras. (Bidrag från Jeremiah Gabriel Pascual "
"i :gh:`118216`.)"

msgid ""
":keyword:`global` declarations are now permitted in :keyword:`except` blocks "
"when that global is used in the :keyword:`else` block. Previously this "
"raised an erroneous :exc:`SyntaxError`. (Contributed by Irit Katriel in :gh:"
"`111123`.)"
msgstr ""
":keyword:`global`-deklarationer är nu tillåtna i :keyword:`except`-block när "
"den globala används i :keyword:`else`-blocket. Tidigare gav detta upphov "
"till ett felaktigt :exc:`SyntaxError`. (Bidrag från Irit Katriel i :gh:"
"`111123`.)"

msgid ""
"Add :envvar:`PYTHON_FROZEN_MODULES`, a new environment variable that "
"determines whether frozen modules are ignored by the import machinery, "
"equivalent to the :option:`-X frozen_modules <-X>` command-line option. "
"(Contributed by Yilei Yang in :gh:`111374`.)"
msgstr ""
"Lägg till :envvar:`PYTHON_FROZEN_MODULES`, en ny miljövariabel som avgör om "
"frysta moduler ignoreras av importmaskineriet, motsvarande :option:`-X "
"frozen_modules <-X>` kommandoradsalternativet. (Bidrag från Yilei Yang i :gh:"
"`111374`.)"

msgid ""
"Add :ref:`support for the perf profiler <perf_profiling>` working without "
"`frame pointers <https://en.wikipedia.org/wiki/Call_stack>`_ through the new "
"environment variable :envvar:`PYTHON_PERF_JIT_SUPPORT` and command-line "
"option :option:`-X perf_jit <-X>`. (Contributed by Pablo Galindo in :gh:"
"`118518`.)"
msgstr ""
"Lägg till :ref:`stöd för perf-profileraren <perf_profiling>` som arbetar "
"utan `rampekare &lt;https://en.wikipedia.org/wiki/Call_stack&gt;`_ genom den "
"nya miljövariabeln :envvar:`PYTHON_PERF_JIT_SUPPORT` och "
"kommandoradsalternativet :option:`-X perf_jit <-X>`. (Bidrag från Pablo "
"Galindo i :gh:`118518`.)"

msgid ""
"The location of a :file:`.python_history` file can be changed via the new :"
"envvar:`PYTHON_HISTORY` environment variable. (Contributed by Levi Sabah, "
"Zackery Spytz and Hugo van Kemenade in :gh:`73965`.)"
msgstr ""
"Platsen för en :file:`.python_history`-fil kan ändras via den nya :envvar:"
"`PYTHON_HISTORY`-miljövariabeln. (Bidrag från Levi Sabah, Zackery Spytz och "
"Hugo van Kemenade i :gh:`73965`.)"

msgid ""
"Classes have a new :attr:`~type.__static_attributes__` attribute. This is "
"populated by the compiler with a tuple of the class's attribute names which "
"are assigned through ``self.<name>`` from any function in its body. "
"(Contributed by Irit Katriel in :gh:`115775`.)"
msgstr ""
"Klasser har ett nytt attribut :attr:`~type.__static_attributes__`. Detta "
"fylls i av kompilatorn med en tupel av klassens attributnamn som tilldelas "
"genom ``self.<name>`` från vilken funktion som helst i dess kropp. (Bidrag "
"från Irit Katriel i :gh:`115775`.)"

msgid ""
"The compiler now creates a :attr:`!__firstlineno__` attribute on classes "
"with the line number of the first line of the class definition. (Contributed "
"by Serhiy Storchaka in :gh:`118465`.)"
msgstr ""
"Kompilatorn skapar nu ett :attr:`!__firstlineno__`-attribut på klasser med "
"radnumret för den första raden i klassdefinitionen. (Bidrag från Serhiy "
"Storchaka i :gh:`118465`.)"

msgid ""
"The :func:`exec` and :func:`eval` builtins now accept the *globals* and "
"*locals* arguments as keywords. (Contributed by Raphael Gaschignard in :gh:"
"`105879`)"
msgstr ""
"Inbyggnaderna :func:`exec` och :func:`eval` accepterar nu argumenten "
"*globals* och *locals* som nyckelord. (Bidrag från Raphael Gaschignard i :gh:"
"`105879`)"

msgid ""
"The :func:`compile` builtin now accepts a new flag, ``ast."
"PyCF_OPTIMIZED_AST``, which is similar to ``ast.PyCF_ONLY_AST`` except that "
"the returned AST is optimized according to the value of the *optimize* "
"argument. (Contributed by Irit Katriel in :gh:`108113`)."
msgstr ""
"Inbyggda :func:`compile` accepterar nu en ny flagga, ``ast."
"PyCF_OPTIMIZED_AST``, som liknar ``ast.PyCF_ONLY_AST`` förutom att den "
"returnerade AST:en optimeras enligt värdet på argumentet *optimize*. (Bidrag "
"från Irit Katriel i :gh:`108113`)."

msgid ""
"Add a :attr:`~property.__name__` attribute on :class:`property` objects. "
"(Contributed by Eugene Toder in :gh:`101860`.)"
msgstr ""
"Lägg till ett :attr:`~property.__name__`-attribut på :class:`property`-"
"objekt. (Bidrag från Eugene Toder i :gh:`101860`.)"

msgid ""
"Add :exc:`PythonFinalizationError`, a new exception derived from :exc:"
"`RuntimeError` and used to signal when operations are blocked during :term:"
"`finalization <interpreter shutdown>`. The following callables now raise :"
"exc:`!PythonFinalizationError`, instead of :exc:`RuntimeError`:"
msgstr ""
"Lägg till :exc:`PythonFinalizationError`, ett nytt undantag härlett från :"
"exc:`RuntimeError` och som används för att signalera när operationer "
"blockeras under :term:`finalization <interpreter shutdown>`. Följande "
"anropsbara filer ger nu :exc:`!PythonFinalizationError`, istället för :exc:"
"`RuntimeError`:"

msgid ":func:`_thread.start_new_thread`"
msgstr ":func:`_tråd.start_ny_tråd`"

msgid ":func:`os.fork`"
msgstr ":func:`os.gaffel`"

msgid ":func:`os.forkpty`"
msgstr ":func:`os.forkpty`"

msgid ":class:`subprocess.Popen`"
msgstr ":class:`subprocess.Popen`"

msgid "(Contributed by Victor Stinner in :gh:`114570`.)"
msgstr "(Bidrag från Victor Stinner i :gh:`114570`.)"

msgid ""
"Allow the *count* argument of :meth:`str.replace` to be a keyword. "
"(Contributed by Hugo van Kemenade in :gh:`106487`.)"
msgstr ""
"Tillåt argumentet *count* i :meth:`str.replace` att vara ett nyckelord. "
"(Bidrag från Hugo van Kemenade i :gh:`106487`.)"

msgid ""
"Many functions now emit a warning if a boolean value is passed as a file "
"descriptor argument. This can help catch some errors earlier. (Contributed "
"by Serhiy Storchaka in :gh:`82626`.)"
msgstr ""
"Många funktioner avger nu en varning om ett booleskt värde skickas som ett "
"filbeskrivningsargument. Detta kan hjälpa till att fånga upp vissa fel "
"tidigare. (Bidrag från Serhiy Storchaka i :gh:`82626`.)"

msgid ""
"Added :attr:`!name` and :attr:`!mode` attributes for compressed and archived "
"file-like objects in the :mod:`bz2`, :mod:`lzma`, :mod:`tarfile`, and :mod:"
"`zipfile` modules. (Contributed by Serhiy Storchaka in :gh:`115961`.)"
msgstr ""
"Lade till attributen :attr:`!name` och :attr:`!mode` för komprimerade och "
"arkiverade filliknande objekt i modulerna :mod:`bz2`, :mod:`lzma`, :mod:"
"`tarfile` och :mod:`zipfile`. (Bidrag från Serhiy Storchaka i :gh:`115961`.)"

msgid "New Modules"
msgstr "Nya moduler"

msgid ""
":mod:`dbm.sqlite3`: An SQLite backend for :mod:`dbm`. (Contributed by "
"Raymond Hettinger and Erlend E. Aasland in :gh:`100414`.)"
msgstr ""
":mod:`dbm.sqlite3`: En SQLite-backend för :mod:`dbm`. (Bidrag från Raymond "
"Hettinger och Erlend E. Aasland i :gh:`100414`.)"

msgid "Improved Modules"
msgstr "Förbättrade moduler"

msgid "argparse"
msgstr "argparse"

msgid ""
"Add the *deprecated* parameter to the :meth:`~argparse.ArgumentParser."
"add_argument` and :meth:`!add_parser` methods, to enable deprecating command-"
"line options, positional arguments, and subcommands. (Contributed by Serhiy "
"Storchaka in :gh:`83648`.)"
msgstr ""
"Lägg till parametern *deprecated* i metoderna :meth:`~argparse."
"ArgumentParser.add_argument` och :meth:`!add_parser` för att aktivera "
"föråldrade kommandoradsalternativ, positionella argument och underkommandon. "
"(Bidrag från Serhiy Storchaka i :gh:`83648`.)"

msgid "array"
msgstr "array"

msgid ""
"Add the ``'w'`` type code (``Py_UCS4``) for Unicode characters. It should be "
"used instead of the deprecated ``'u'`` type code. (Contributed by Inada "
"Naoki in :gh:`80480`.)"
msgstr ""
"Lägg till typkoden ``'w'`` (``Py_UCS4``) för Unicode-tecken. Den bör "
"användas istället för den föråldrade typkoden ``'u``. (Bidrag från Inada "
"Naoki i :gh:`80480`.)"

msgid ""
"Register :class:`array.array` as a :class:`~collections.abc.MutableSequence` "
"by implementing the :meth:`~array.array.clear` method. (Contributed by Mike "
"Zimin in :gh:`114894`.)"
msgstr ""
"Registrera :class:`array.array` som en :class:`~collections.abc."
"MutableSequence` genom att implementera metoden :meth:`~array.array.clear`. "
"(Bidrag från Mike Zimin i :gh:`114894`.)"

msgid "ast"
msgstr "ast"

msgid ""
"The constructors of node types in the :mod:`ast` module are now stricter in "
"the arguments they accept, with more intuitive behavior when arguments are "
"omitted."
msgstr ""
"Konstruktörerna för nodtyper i modulen :mod:`ast` är nu striktare när det "
"gäller vilka argument de accepterar, med ett mer intuitivt beteende när "
"argument utelämnas."

msgid ""
"If an optional field on an AST node is not included as an argument when "
"constructing an instance, the field will now be set to ``None``. Similarly, "
"if a list field is omitted, that field will now be set to an empty list, and "
"if an :class:`!expr_context` field is omitted, it defaults to :class:`Load() "
"<ast.Load>`. (Previously, in all cases, the attribute would be missing on "
"the newly constructed AST node instance.)"
msgstr ""
"Om ett valfritt fält på en AST-nod inte inkluderas som ett argument när en "
"instans konstrueras, kommer fältet nu att sättas till ``None``. På samma "
"sätt, om ett listfält utelämnas, kommer det fältet nu att sättas till en tom "
"lista, och om ett :class:`!expr_context`-fält utelämnas, kommer det som "
"standard att sättas till :class:`Load() <ast.Load>`. (Tidigare saknades "
"attributet i samtliga fall på den nykonstruerade AST-nodinstansen)"

msgid ""
"In all other cases, where a required argument is omitted, the node "
"constructor will emit a :exc:`DeprecationWarning`. This will raise an "
"exception in Python 3.15. Similarly, passing a keyword argument to the "
"constructor that does not map to a field on the AST node is now deprecated, "
"and will raise an exception in Python 3.15."
msgstr ""
"I alla andra fall, där ett obligatoriskt argument utelämnas, kommer "
"nodkonstruktören att avge en :exc:`DeprecationWarning`. Detta kommer att ge "
"upphov till ett undantag i Python 3.15. På samma sätt är det nu föråldrat "
"att skicka ett nyckelordsargument till konstruktören som inte mappar till "
"ett fält på AST-noden och det kommer att leda till ett undantag i Python "
"3.15."

msgid ""
"These changes do not apply to user-defined subclasses of :class:`ast.AST` "
"unless the class opts in to the new behavior by defining the :attr:`.AST."
"_field_types` mapping."
msgstr ""
"Dessa ändringar gäller inte för användardefinierade underklasser till :class:"
"`ast.AST` om inte klassen väljer att använda det nya beteendet genom att "
"definiera :attr:`.AST._field_types`-mappningen."

msgid ""
"(Contributed by Jelle Zijlstra in :gh:`105858`, :gh:`117486`, and :gh:"
"`118851`.)"
msgstr ""
"(Bidrag från Jelle Zijlstra i :gh:`105858`, :gh:`117486`, och :gh:`118851`.)"

msgid ""
":func:`ast.parse` now accepts an optional argument *optimize* which is "
"passed on to :func:`compile`. This makes it possible to obtain an optimized "
"AST. (Contributed by Irit Katriel in :gh:`108113`.)"
msgstr ""
":func:`ast.parse` accepterar nu ett valfritt argument *optimize* som skickas "
"vidare till :func:`compile`. Detta gör det möjligt att erhålla en optimerad "
"AST. (Bidrag från Irit Katriel i :gh:`108113`.)"

msgid "asyncio"
msgstr "asyncio"

msgid ""
":func:`asyncio.as_completed` now returns an object that is both an :term:"
"`asynchronous iterator` and a plain :term:`iterator` of :term:`awaitables "
"<awaitable>`. The awaitables yielded by asynchronous iteration include "
"original task or future objects that were passed in, making it easier to "
"associate results with the tasks being completed. (Contributed by Justin "
"Arthur in :gh:`77714`.)"
msgstr ""
":func:`asyncio.as_completed` returnerar nu ett objekt som är både en :term:"
"`asynkron iterator` och en vanlig :term:`iterator` av :term:`awaitables "
"<awaitable>`. De awaitables som returneras av asynkron iteration inkluderar "
"ursprungliga uppgifts- eller framtidsobjekt som skickades in, vilket gör det "
"enklare att associera resultat med de uppgifter som slutförs. (Bidrag från "
"Justin Arthur i :gh:`77714`.)"

msgid ""
":meth:`asyncio.loop.create_unix_server` will now automatically remove the "
"Unix socket when the server is closed. (Contributed by Pierre Ossman in :gh:"
"`111246`.)"
msgstr ""
":meth:`asyncio.loop.create_unix_server` kommer nu automatiskt att ta bort "
"Unix-sockeln när servern stängs. (Bidrag från Pierre Ossman i :gh:`111246`.)"

msgid ""
":meth:`.DatagramTransport.sendto` will now send zero-length datagrams if "
"called with an empty bytes object. The transport flow control also now "
"accounts for the datagram header when calculating the buffer size. "
"(Contributed by Jamie Phan in :gh:`115199`.)"
msgstr ""
":meth:`.DatagramTransport.sendto` kommer nu att skicka datagram med noll "
"längd om det anropas med ett tomt bytes-objekt. Transportflödeskontrollen "
"tar nu också hänsyn till datagramhuvudet när buffertstorleken beräknas. "
"(Bidrag från Jamie Phan i :gh:`115199`.)"

msgid ""
"Add :meth:`Queue.shutdown <asyncio.Queue.shutdown>` and :exc:`~asyncio."
"QueueShutDown` to manage queue termination. (Contributed by Laurie Opperman "
"and Yves Duprat in :gh:`104228`.)"
msgstr ""
"Lägg till :meth:`Queue.shutdown <asyncio.Queue.shutdown>` och :exc:`~asyncio."
"QueueShutDown` för att hantera köavslut. (Bidrag från Laurie Opperman och "
"Yves Duprat i :gh:`104228`.)"

msgid ""
"Add the :meth:`.Server.close_clients` and :meth:`.Server.abort_clients` "
"methods, which more forcefully close an asyncio server. (Contributed by "
"Pierre Ossman in :gh:`113538`.)"
msgstr ""
"Lägg till metoderna :meth:`.Server.close_clients` och :meth:`.Server."
"abort_clients`, som mer kraftfullt stänger en asyncio-server. (Bidrag från "
"Pierre Ossman i :gh:`113538`.)"

msgid ""
"Accept a tuple of separators in :meth:`.StreamReader.readuntil`, stopping "
"when any one of them is encountered. (Contributed by Bruce Merry in :gh:"
"`81322`.)"
msgstr ""
"Accepterar en tupel av separatorer i :meth:`.StreamReader.readuntil`, och "
"stoppar när någon av dem påträffas. (Bidrag från Bruce Merry i :gh:`81322`.)"

msgid ""
"Improve the behavior of :class:`~asyncio.TaskGroup` when an external "
"cancellation collides with an internal cancellation. For example, when two "
"task groups are nested and both experience an exception in a child task "
"simultaneously, it was possible that the outer task group would hang, "
"because its internal cancellation was swallowed by the inner task group."
msgstr ""
"Förbättra beteendet hos :class:`~asyncio.TaskGroup` när en extern "
"annullering kolliderar med en intern annullering. Till exempel, när två "
"uppgiftsgrupper är nästlade och båda upplever ett undantag i en underordnad "
"uppgift samtidigt, var det möjligt att den yttre uppgiftsgruppen skulle "
"hänga sig, eftersom dess interna annullering svaldes av den inre "
"uppgiftsgruppen."

msgid ""
"In the case where a task group is cancelled externally and also must raise "
"an :exc:`ExceptionGroup`, it will now call the parent task's :meth:`~asyncio."
"Task.cancel` method. This ensures that a :exc:`~asyncio.CancelledError` will "
"be raised at the next :keyword:`await`, so the cancellation is not lost."
msgstr ""
"I det fall en uppgiftsgrupp avbryts externt och även måste skapa en :exc:"
"`ExceptionGroup`, kommer den nu att anropa den överordnade uppgiftens :meth:"
"`~asyncio.Task.cancel`-metod. Detta säkerställer att ett :exc:`~asyncio."
"CancelledError` kommer att uppstå vid nästa :keyword:`await`, så att "
"annulleringen inte går förlorad."

msgid ""
"An added benefit of these changes is that task groups now preserve the "
"cancellation count (:meth:`~asyncio.Task.cancelling`)."
msgstr ""
"En extra fördel med dessa ändringar är att uppgiftsgrupper nu bevarar "
"antalet avbokningar (:meth:`~asyncio.Task.cancelling`)."

msgid ""
"In order to handle some corner cases, :meth:`~asyncio.Task.uncancel` may now "
"reset the undocumented ``_must_cancel`` flag when the cancellation count "
"reaches zero."
msgstr ""
"För att hantera vissa hörnfall kan :meth:`~asyncio.Task.uncancel` nu "
"återställa den odokumenterade flaggan ``_must_cancel`` när antalet "
"avbokningar når noll."

msgid "(Inspired by an issue reported by Arthur Tacca in :gh:`116720`.)"
msgstr ""
"(Inspirerad av ett problem som rapporterades av Arthur Tacca i :gh:`116720`.)"

msgid ""
"When :meth:`.TaskGroup.create_task` is called on an inactive :class:"
"`~asyncio.TaskGroup`, the given coroutine will be closed (which prevents a :"
"exc:`RuntimeWarning` about the given coroutine being never awaited). "
"(Contributed by Arthur Tacca and Jason Zhang in :gh:`115957`.)"
msgstr ""
"När :meth:`.TaskGroup.create_task` anropas på en inaktiv :class:`~asyncio."
"TaskGroup`, kommer den givna coroutinen att stängas (vilket förhindrar en :"
"exc:`RuntimeWarning` om att den givna coroutinen aldrig väntas). (Bidrag "
"från Arthur Tacca och Jason Zhang i :gh:`115957`.)"

msgid ""
"The function and methods named ``create_task`` have received a new "
"``**kwargs`` argument that is passed through to the task constructor. This "
"change was accidentally added in 3.13.3, and broke the API contract for "
"custom task factories. Several third-party task factories implemented "
"workarounds for this. In 3.13.4 and later releases the old factory contract "
"is honored once again (until 3.14). To keep the workarounds working, the "
"extra ``**kwargs`` argument still allows passing additional keyword "
"arguments to :class:`~asyncio.Task` and to custom task factories."
msgstr ""
"Funktionen och metoderna med namnet ``create_task`` har fått ett nytt "
"``**kwargs``-argument som skickas till uppgiftskonstruktören. Den här "
"ändringen lades till av misstag i 3.13.3 och bröt API-kontraktet för "
"anpassade uppgiftsfabriker. Flera uppgiftsfabriker från tredje part "
"implementerade lösningar för detta. I 3.13.4 och senare utgåvor respekteras "
"det gamla fabriksavtalet igen (fram till 3.14). För att hålla lösningarna "
"fungerande tillåter det extra ``**kwargs``-argumentet fortfarande att man "
"skickar ytterligare nyckelordsargument till :class:`~asyncio.Task` och till "
"anpassade uppgiftsfabriker."

msgid ""
"This affects the following function and methods: :meth:`asyncio."
"create_task`, :meth:`asyncio.loop.create_task`, :meth:`asyncio.TaskGroup."
"create_task`. (Contributed by Thomas Grainger in :gh:`128307`.)"
msgstr ""
"Detta påverkar följande funktioner och metoder: :meth:`asyncio."
"create_task`, :meth:`asyncio.loop.create_task`, :meth:`asyncio.TaskGroup."
"create_task`. (Bidrag från Thomas Grainger i :gh:`128307`.)"

msgid "base64"
msgstr "bas64"

msgid ""
"Add :func:`~base64.z85encode` and :func:`~base64.z85decode` functions for "
"encoding :class:`bytes` as `Z85 data`_ and decoding Z85-encoded data to :"
"class:`!bytes`. (Contributed by Matan Perelman in :gh:`75299`.)"
msgstr ""
"Lägg till funktionerna :func:`~base64.z85encode` och :func:`~base64."
"z85decode` för kodning av :class:`bytes` som `Z85 data`_ och avkodning av "
"Z85-kodade data till :class:`!bytes`. (Bidrag från Matan Perelman i :gh:"
"`75299`.)"

msgid "compileall"
msgstr "kompilera alla"

msgid ""
"The default number of worker threads and processes is now selected using :"
"func:`os.process_cpu_count` instead of :func:`os.cpu_count`. (Contributed by "
"Victor Stinner in :gh:`109649`.)"
msgstr ""
"Standardantalet arbetstrådar och processer väljs nu med hjälp av :func:`os."
"process_cpu_count` istället för :func:`os.cpu_count`. (Bidrag från Victor "
"Stinner i :gh:`109649`.)"

msgid "concurrent.futures"
msgstr "concurrent.futures"

msgid "configparser"
msgstr "konfigurationsanalysator"

msgid ""
":class:`~configparser.ConfigParser` now has support for unnamed sections, "
"which allows for top-level key-value pairs. This can be enabled with the new "
"*allow_unnamed_section* parameter. (Contributed by Pedro Sousa Lacerda in :"
"gh:`66449`.)"
msgstr ""
":class:`~configparser.ConfigParser` har nu stöd för icke namngivna "
"sektioner, vilket möjliggör nyckel-värdepar på toppnivå. Detta kan aktiveras "
"med den nya parametern *allow_unnamed_section*. (Bidrag från Pedro Sousa "
"Lacerda i :gh:`66449`.)"

msgid "copy"
msgstr "kopiera"

msgid ""
"The new :func:`~copy.replace` function and the :meth:`replace protocol "
"<object.__replace__>` make creating modified copies of objects much simpler. "
"This is especially useful when working with immutable objects. The following "
"types support the :func:`~copy.replace` function and implement the replace "
"protocol:"
msgstr ""
"Den nya funktionen :func:`~copy.replace` och :meth:`replace protocol <object."
"__replace__>` gör det mycket enklare att skapa modifierade kopior av objekt. "
"Detta är särskilt användbart när man arbetar med oföränderliga objekt. "
"Följande typer stöder funktionen :func:`~copy.replace` och implementerar "
"replace-protokollet:"

msgid ":func:`collections.namedtuple`"
msgstr ":func:`kollektioner.namntuple`"

msgid ":class:`dataclasses.dataclass`"
msgstr ":class:`dataklasser.dataklass`"

msgid ""
":class:`datetime.datetime`, :class:`datetime.date`, :class:`datetime.time`"
msgstr ""
":class:`datetime.datetime`, :class:`datetime.date`, :class:`datetime.time`"

msgid ":class:`inspect.Signature`, :class:`inspect.Parameter`"
msgstr ":class:`inspect.Signature`, :class:`inspect.Parameter`"

msgid ":class:`types.SimpleNamespace`"
msgstr ":class:`types.SimpleNamespace`"

msgid ":ref:`code objects <code-objects>`"
msgstr ":ref:`kodobjekt <code-objects>`"

msgid ""
"Any user-defined class can also support :func:`copy.replace` by defining "
"the :meth:`~object.__replace__` method. (Contributed by Serhiy Storchaka in :"
"gh:`108751`.)"
msgstr ""
"Alla användardefinierade klasser kan också stödja :func:`copy.replace` genom "
"att definiera metoden :meth:`~object.__replace__`. (Bidrag från Serhiy "
"Storchaka i :gh:`108751`.)"

msgid "ctypes"
msgstr "ctyper"

msgid ""
"As a consequence of necessary internal refactoring, initialization of "
"internal metaclasses now happens in ``__init__`` rather than in ``__new__``. "
"This affects projects that subclass these internal metaclasses to provide "
"custom initialization. Generally:"
msgstr ""
"Som en följd av en nödvändig intern refaktorisering sker initialiseringen av "
"interna metaklasser nu i ``__init__`` i stället för i ``__new__``. Detta "
"påverkar projekt som underklassar dessa interna metaklasser för att "
"tillhandahålla anpassad initialisering. I allmänhet:"

msgid ""
"Custom logic that was done in ``__new__`` after calling ``super().__new__`` "
"should be moved to ``__init__``."
msgstr ""
"Anpassad logik som gjordes i ``__new__`` efter anrop av ``super().__new__`` "
"bör flyttas till ``__init__``."

msgid ""
"To create a class, call the metaclass, not only the metaclass's ``__new__`` "
"method."
msgstr ""
"För att skapa en klass anropar du metaklassen, inte bara metaklassens metod "
"``__new__``."

msgid ""
"See :gh:`124520` for discussion and links to changes in some affected "
"projects."
msgstr ""
"Se :gh:`124520` för diskussion och länkar till ändringar i vissa berörda "
"projekt."

msgid ""
":class:`ctypes.Structure` objects have a new :attr:`~ctypes.Structure."
"_align_` attribute which allows the alignment of the structure being packed "
"to/from memory to be specified explicitly. (Contributed by Matt Sanderson "
"in :gh:`112433`)"
msgstr ""
":class:`ctypes.Structure`-objekt har ett nytt :attr:`~ctypes.Structure."
"_align_`-attribut som gör det möjligt att explicit ange inriktningen för den "
"struktur som packas till/från minnet. (Bidrag från Matt Sanderson i :gh:"
"`112433`)"

msgid "dbm"
msgstr "dbm"

msgid ""
"Add :mod:`dbm.sqlite3`, a new module which implements an SQLite backend, and "
"make it the default :mod:`!dbm` backend. (Contributed by Raymond Hettinger "
"and Erlend E. Aasland in :gh:`100414`.)"
msgstr ""
"Lägg till :mod:`dbm.sqlite3`, en ny modul som implementerar en SQLite-"
"backend, och gör den till standard :mod:`!dbm`-backend. (Bidrag från Raymond "
"Hettinger och Erlend E. Aasland i :gh:`100414`.)"

msgid ""
"Allow removing all items from the database through the new :meth:`.gdbm."
"clear` and :meth:`.ndbm.clear` methods. (Contributed by Donghee Na in :gh:"
"`107122`.)"
msgstr ""
"Gör det möjligt att ta bort alla objekt från databasen genom de nya "
"metoderna :meth:`.gdbm.clear` och :meth:`.ndbm.clear`. (Bidrag från Donghee "
"Na i :gh:`107122`.)"

msgid "dis"
msgstr "dis"

msgid ""
"Change the output of :mod:`dis` module functions to show logical labels for "
"jump targets and exception handlers, rather than offsets. The offsets can be "
"added with the new :option:`-O <dis --show-offsets>` command-line option or "
"the *show_offsets* argument. (Contributed by Irit Katriel in :gh:`112137`.)"
msgstr ""
"Ändra utdata för modulfunktionerna :mod:`dis` så att logiska etiketter för "
"hoppmål och undantagshanterare visas i stället för offsets. Offseten kan "
"läggas till med det nya kommandoradsalternativet :option:`-O <dis --show-"
"offsets>` eller argumentet *show_offsets*. (Bidrag från Irit Katriel i :gh:"
"`112137`.)"

msgid ""
":meth:`~dis.get_instructions` no longer represents cache entries as separate "
"instructions. Instead, it returns them as part of the :class:`~dis."
"Instruction`, in the new *cache_info* field. The *show_caches* argument to :"
"meth:`~dis.get_instructions` is deprecated and no longer has any effect. "
"(Contributed by Irit Katriel in :gh:`112962`.)"
msgstr ""
":meth:`~dis.get_instructions` representerar inte längre cacheposter som "
"separata instruktioner. Istället returneras de som en del av :class:`~dis."
"Instruction`, i det nya fältet *cache_info*. Argumentet *show_caches* till :"
"meth:`~dis.get_instructions` är föråldrat och har inte längre någon effekt. "
"(Bidrag från Irit Katriel i :gh:`112962`.)"

msgid "doctest"
msgstr "doktest"

msgid ""
":mod:`doctest` output is now colored by default. This can be controlled via "
"the new :envvar:`PYTHON_COLORS` environment variable as well as the "
"canonical |NO_COLOR|_ and |FORCE_COLOR|_ environment variables. See also :"
"ref:`using-on-controlling-color`. (Contributed by Hugo van Kemenade in :gh:"
"`117225`.)"
msgstr ""
":mod:`doctest`-utdata är nu färgade som standard. Detta kan kontrolleras via "
"den nya miljövariabeln :envvar:`PYTHON_COLORS` samt de kanoniska "
"miljövariablerna |NO_COLOR|_ och |FORCE_COLOR|_. Se även :ref:`using-on-"
"controlling-color`. (Bidrag från Hugo van Kemenade i :gh:`117225`.)"

msgid ""
"The :meth:`.DocTestRunner.run` method now counts the number of skipped "
"tests. Add the :attr:`.DocTestRunner.skips` and :attr:`.TestResults.skipped` "
"attributes. (Contributed by Victor Stinner in :gh:`108794`.)"
msgstr ""
"Metoden :meth:`.DocTestRunner.run` räknar nu antalet överhoppade tester. "
"Lägg till attributen :attr:`.DocTestRunner.skips` och :attr:`.TestResults."
"skipped`. (Bidrag från Victor Stinner i :gh:`108794`.)"

msgid "email"
msgstr "e-post"

msgid ""
"Headers with embedded newlines are now quoted on output. The :mod:`~email."
"generator` will now refuse to serialize (write) headers that are improperly "
"folded or delimited, such that they would be parsed as multiple headers or "
"joined with adjacent data. If you need to turn this safety feature off, set :"
"attr:`~email.policy.Policy.verify_generated_headers`. (Contributed by Bas "
"Bloemsaat and Petr Viktorin in :gh:`121650`.)"
msgstr ""
"Rubriker med inbäddade nya linjer citeras nu vid utmatning. :mod:`~email."
"generator` vägrar nu att serialisera (skriva) rubriker som är felaktigt "
"vikta eller avgränsade, så att de skulle tolkas som flera rubriker eller "
"sammanfogas med angränsande data. Om du behöver stänga av den här "
"säkerhetsfunktionen, ange :attr:`~email.policy.Policy."
"verify_generated_headers`. (Bidrag från Bas Bloemsaat och Petr Viktorin i :"
"gh:`121650`.)"

msgid ""
":func:`~email.utils.getaddresses` and :func:`~email.utils.parseaddr` now "
"return ``('', '')`` pairs in more situations where invalid email addresses "
"are encountered instead of potentially inaccurate values. The two functions "
"have a new optional *strict* parameter (default ``True``). To get the old "
"behavior (accepting malformed input), use ``strict=False``. ``getattr(email."
"utils, 'supports_strict_parsing', False)`` can be used to check if the "
"*strict* parameter is available. (Contributed by Thomas Dwyer and Victor "
"Stinner for :gh:`102988` to improve the :cve:`2023-27043` fix.)"
msgstr ""
":func:`~email.utils.getaddresses` och :func:`~email.utils.parseaddr` "
"returnerar nu ``('', ''')`` par i fler situationer där ogiltiga e-"
"postadresser påträffas istället för potentiellt felaktiga värden. De två "
"funktionerna har en ny valfri *strict*-parameter (standard ``True``). För "
"att få det gamla beteendet (acceptera felaktig inmatning), använd "
"``strict=False``. ``getattr(email.utils, 'supports_strict_parsing', False)`` "
"kan användas för att kontrollera om parametern *strict* är tillgänglig. "
"(Bidrag från Thomas Dwyer och Victor Stinner för :gh:`102988` för att "
"förbättra :cve:`2023-27043`-fixen)"

msgid "enum"
msgstr "enum"

msgid ""
":class:`~enum.EnumDict` has been made public to better support subclassing :"
"class:`~enum.EnumType`."
msgstr ""
":class:`~enum.EnumDict` har gjorts publik för att bättre stödja subklassning "
"av :class:`~enum.EnumType`."

msgid "fractions"
msgstr "fraktioner"

msgid ""
":class:`~fractions.Fraction` objects now support the standard :ref:`format "
"specification mini-language <formatspec>` rules for fill, alignment, sign "
"handling, minimum width, and grouping. (Contributed by Mark Dickinson in :gh:"
"`111320`.)"
msgstr ""
":class:`~fractions.Fraction`-objekt stöder nu standard :ref:``format "
"specification mini-language <formatspec>`-reglerna för fyllning, justering, "
"teckenhantering, minsta bredd och gruppering. (Bidrag från Mark Dickinson i :"
"gh:`111320`.)"

msgid "glob"
msgstr "klot"

msgid ""
"Add :func:`~glob.translate`, a function to convert a path specification with "
"shell-style wildcards to a regular expression. (Contributed by Barney Gale "
"in :gh:`72904`.)"
msgstr ""
"Lägg till :func:`~glob.translate`, en funktion för att konvertera en "
"sökvägsspecifikation med jokertecken i shell-stil till ett reguljärt "
"uttryck. (Bidrag från Barney Gale i :gh:`72904`.)"

msgid "importlib"
msgstr "importlib"

msgid ""
"The following functions in :mod:`importlib.resources` now allow accessing a "
"directory (or tree) of resources, using multiple positional arguments (the "
"*encoding* and *errors* arguments in the text-reading functions are now "
"keyword-only):"
msgstr ""
"Följande funktioner i :mod:`importlib.resources` tillåter nu åtkomst till en "
"katalog (eller ett träd) med resurser, med hjälp av flera positionella "
"argument (argumenten *encoding* och *errors* i textläsningsfunktionerna är "
"nu endast nyckelord):"

msgid ":func:`~importlib.resources.is_resource`"
msgstr ":func:`~importlib.resources.is_resource`"

msgid ":func:`~importlib.resources.open_binary`"
msgstr ":func:`~importlib.resources.open_binary`"

msgid ":func:`~importlib.resources.open_text`"
msgstr ":func:`~importlib.resources.open_text`"

msgid ":func:`~importlib.resources.path`"
msgstr ":func:`~importlib.resources.path`"

msgid ":func:`~importlib.resources.read_binary`"
msgstr ":func:`~importlib.resources.read_binary`"

msgid ":func:`~importlib.resources.read_text`"
msgstr ":func:`~importlib.resources.read_text`"

msgid ""
"These functions are no longer deprecated and are not scheduled for removal. "
"(Contributed by Petr Viktorin in :gh:`116608`.)"
msgstr ""
"Dessa funktioner är inte längre föråldrade och är inte planerade att tas "
"bort. (Bidrag från Petr Viktorin i :gh:`116608`.)"

msgid ""
":func:`~importlib.resources.contents` remains deprecated in favor of the "
"fully-featured :class:`~importlib.resources.abc.Traversable` API. However, "
"there is now no plan to remove it. (Contributed by Petr Viktorin in :gh:"
"`116608`.)"
msgstr ""
":func:`~importlib.resources.contents` är fortfarande föråldrad till förmån "
"för det fullt utrustade :class:`~importlib.resources.abc.Traversable` API:"
"et. Det finns dock nu ingen plan på att ta bort det. (Bidrag från Petr "
"Viktorin i :gh:`116608`.)"

msgid "io"
msgstr "io"

msgid ""
"The :class:`~io.IOBase` finalizer now logs any errors raised by the :meth:"
"`~io.IOBase.close` method with :data:`sys.unraisablehook`. Previously, "
"errors were ignored silently by default, and only logged in :ref:`Python "
"Development Mode <devmode>` or when using a :ref:`Python debug build <debug-"
"build>`. (Contributed by Victor Stinner in :gh:`62948`.)"
msgstr ""
"Finalizern :class:`~io.IOBase` loggar nu alla fel som uppstår i metoden :"
"meth:`~io.IOBase.close` med :data:`sys.unraisablehook`. Tidigare ignorerades "
"fel tyst som standard, och loggades endast i :ref:`Python Development Mode "
"<devmode>` eller när man använde en :ref:`Python debug build <debug-build>`. "
"(Bidrag från Victor Stinner i :gh:`62948`.)"

msgid "ipaddress"
msgstr "ipadress"

msgid ""
"Add the :attr:`.IPv4Address.ipv6_mapped` property, which returns the IPv4-"
"mapped IPv6 address. (Contributed by Charles Machalow in :gh:`109466`.)"
msgstr ""
"Lägg till egenskapen :attr:`.IPv4Address.ipv6_mapped`, som returnerar den "
"IPv4-mappade IPv6-adressen. (Bidrag från Charles Machalow i :gh:`109466`.)"

msgid ""
"Fix ``is_global`` and ``is_private`` behavior in :class:`~ipaddress."
"IPv4Address`, :class:`~ipaddress.IPv6Address`, :class:`~ipaddress."
"IPv4Network`, and :class:`~ipaddress.IPv6Network`. (Contributed by Jakub "
"Stasiak in :gh:`113171`.)"
msgstr ""
"Åtgärdat ``is_global`` och ``is_private`` beteende i :class:`~ipaddress."
"IPv4Address`, :class:`~ipaddress.IPv6Address`, :class:`~ipaddress."
"IPv4Network`, och :class:`~ipaddress.IPv6Network`. (Bidrag från Jakub "
"Stasiak i :gh:`113171`.)"

msgid "itertools"
msgstr "itertools"

msgid ""
":func:`~itertools.batched` has a new *strict* parameter, which raises a :exc:"
"`ValueError` if the final batch is shorter than the specified batch size. "
"(Contributed by Raymond Hettinger in :gh:`113202`.)"
msgstr ""
":func:`~itertools.batched` har en ny *strict* parameter, som ger upphov till "
"ett :exc:`ValueError` om den slutliga batchen är kortare än den angivna "
"batchstorleken. (Bidrag från Raymond Hettinger i :gh:`113202`.)"

msgid "marshal"
msgstr "sheriff"

msgid ""
"Add the *allow_code* parameter in module functions. Passing "
"``allow_code=False`` prevents serialization and de-serialization of code "
"objects which are incompatible between Python versions. (Contributed by "
"Serhiy Storchaka in :gh:`113626`.)"
msgstr ""
"Lägg till parametern *allow_code* i modulfunktioner. Genom att ange "
"``allow_code=False`` förhindras serialisering och de-serialisering av "
"kodobjekt som är inkompatibla mellan Python-versioner. (Bidrag från Serhiy "
"Storchaka i :gh:`113626`.)"

msgid "math"
msgstr "matematik"

msgid ""
"The new function :func:`~math.fma` performs fused multiply-add operations. "
"This computes ``x * y + z`` with only a single round, and so avoids any "
"intermediate loss of precision. It wraps the ``fma()`` function provided by "
"C99, and follows the specification of the IEEE 754 \"fusedMultiplyAdd\" "
"operation for special cases. (Contributed by Mark Dickinson and Victor "
"Stinner in :gh:`73468`.)"
msgstr ""
"Den nya funktionen :func:`~math.fma` utför sammanslagna multiplicerings- och "
"additionsoperationer. Detta beräknar ``x * y + z`` med endast en enda "
"omgång, och undviker sålunda någon mellanliggande förlust av precision. Den "
"omsluter funktionen ``fma()`` som tillhandahålls av C99 och följer "
"specifikationen för IEEE 754 \"fusedMultiplyAdd\"-operationen för "
"specialfall. (Bidrag från Mark Dickinson och Victor Stinner i :gh:`73468`.)"

msgid "mimetypes"
msgstr "mimetyper"

msgid ""
"Add the :func:`~mimetypes.guess_file_type` function to guess a MIME type "
"from a filesystem path. Using paths with :func:`~mimetypes.guess_type` is "
"now :term:`soft deprecated`. (Contributed by Serhiy Storchaka in :gh:"
"`66543`.)"
msgstr ""
"Lägg till funktionen :func:`~mimetypes.guess_file_type` för att gissa en "
"MIME-typ från en filsystemssökväg. Att använda sökvägar med :func:"
"`~mimetypes.guess_type` är nu :term:`soft deprecated`. (Bidrag från Serhiy "
"Storchaka i :gh:`66543`.)"

msgid "mmap"
msgstr "mmap"

msgid ""
":class:`~mmap.mmap` is now protected from crashing on Windows when the "
"mapped memory is inaccessible due to file system errors or access "
"violations. (Contributed by Jannis Weigend in :gh:`118209`.)"
msgstr ""
":class:`~mmap.mmap` är nu skyddad från att krascha i Windows när det mappade "
"minnet är otillgängligt på grund av filsystemfel eller accessöverträdelser. "
"(Bidrag från Jannis Weigend i :gh:`118209`.)"

msgid ""
":class:`~mmap.mmap` has a new :meth:`~mmap.mmap.seekable` method that can be "
"used when a seekable file-like object is required. The :meth:`~mmap.mmap."
"seek` method now returns the new absolute position. (Contributed by Donghee "
"Na and Sylvie Liberman in :gh:`111835`.)"
msgstr ""
":class:`~mmap.mmap` har en ny :meth:`~mmap.mmap.seekable`-metod som kan "
"användas när ett sökbart filliknande objekt krävs. Metoden :meth:`~mmap.mmap."
"seek` returnerar nu den nya absoluta positionen. (Bidrag från Donghee Na och "
"Sylvie Liberman i :gh:`111835`.)"

msgid ""
"The new UNIX-only *trackfd* parameter for :class:`~mmap.mmap` controls file "
"descriptor duplication; if false, the file descriptor specified by *fileno* "
"will not be duplicated. (Contributed by Zackery Spytz and Petr Viktorin in :"
"gh:`78502`.)"
msgstr ""
"Den nya UNIX-parametern *trackfd* för :class:`~mmap.mmap` kontrollerar "
"duplicering av filbeskrivare; om den är falsk kommer filbeskrivaren som "
"anges av *fileno* inte att dupliceras. (Bidrag från Zackery Spytz och Petr "
"Viktorin i :gh:`78502`.)"

msgid "multiprocessing"
msgstr "multiprocessing"

msgid "os"
msgstr "os"

msgid ""
"Add :func:`~os.process_cpu_count` function to get the number of logical CPU "
"cores usable by the calling thread of the current process. (Contributed by "
"Victor Stinner in :gh:`109649`.)"
msgstr ""
"Lägg till funktionen :func:`~os.process_cpu_count` för att få fram antalet "
"logiska processorkärnor som kan användas av den anropande tråden i den "
"aktuella processen. (Bidrag från Victor Stinner i :gh:`109649`.)"

msgid ""
":func:`~os.cpu_count` and :func:`~os.process_cpu_count` can be overridden "
"through the new environment variable :envvar:`PYTHON_CPU_COUNT` or the new "
"command-line option :option:`-X cpu_count <-X>`. This option is useful for "
"users who need to limit CPU resources of a container system without having "
"to modify application code or the container itself. (Contributed by Donghee "
"Na in :gh:`109595`.)"
msgstr ""
":func:`~os.cpu_count` och :func:`~os.process_cpu_count` kan åsidosättas med "
"den nya miljövariabeln :envvar:`PYTHON_CPU_COUNT` eller det nya "
"kommandoradsalternativet :option:`-X cpu_count <-X>`. Detta alternativ är "
"användbart för användare som behöver begränsa CPU-resurserna i ett "
"containersystem utan att behöva modifiera programkoden eller själva "
"containern. (Bidrag från Donghee Na i :gh:`109595`.)"

msgid ""
"Add a :ref:`low level interface <os-timerfd>` to Linux's :manpage:`timer "
"file descriptors <timerfd_create(2)>` via :func:`~os.timerfd_create`, :func:"
"`~os.timerfd_settime`, :func:`~os.timerfd_settime_ns`, :func:`~os."
"timerfd_gettime`, :func:`~os.timerfd_gettime_ns`, :const:`~os."
"TFD_NONBLOCK`, :const:`~os.TFD_CLOEXEC`, :const:`~os.TFD_TIMER_ABSTIME`, "
"and :const:`~os.TFD_TIMER_CANCEL_ON_SET` (Contributed by Masaru Tsuchiyama "
"in :gh:`108277`.)"
msgstr ""
"Lägg till ett :ref:`lågnivågränssnitt <os-timerfd>` till Linux :manpage:"
"`timer file descriptors <timerfd_create(2)>` via :func:`~os."
"timerfd_create`, :func:`~os.timerfd_settime`, :func:`~os."
"timerfd_settime_ns`, :func:`~os.timerfd_gettime`, :func:`~os."
"timerfd_gettime_ns`, :const:`~os.TFD_NONBLOCK`, :const:`~os.TFD_CLOEXEC`, :"
"const:`~os.TFD_TIMER_ABSTIME`, och :const:`~os.TFD_TIMER_CANCEL_ON_SET` "
"(Bidrag från Masaru Tsuchiyama i :gh:`108277`.)"

msgid ""
":func:`~os.lchmod` and the *follow_symlinks* argument of :func:`~os.chmod` "
"are both now available on Windows. Note that the default value of "
"*follow_symlinks* in :func:`!lchmod` is ``False`` on Windows. (Contributed "
"by Serhiy Storchaka in :gh:`59616`.)"
msgstr ""
":func:`~os.lchmod` och argumentet *follow_symlinks* i :func:`~os.chmod` är "
"nu båda tillgängliga i Windows. Observera att standardvärdet för "
"*follow_symlinks* i :func:`!lchmod` är ``False`` i Windows. (Bidrag från "
"Serhiy Storchaka i :gh:`59616`.)"

msgid ""
":func:`~os.fchmod` and support for file descriptors in :func:`~os.chmod` are "
"both now available on Windows. (Contributed by Serhiy Storchaka in :gh:"
"`113191`.)"
msgstr ""
":func:`~os.fchmod` och stöd för filbeskrivare i :func:`~os.chmod` är nu båda "
"tillgängliga i Windows. (Bidrag från Serhiy Storchaka i :gh:`113191`.)"

msgid ""
"On Windows, :func:`~os.mkdir` and :func:`~os.makedirs` now support passing a "
"*mode* value of ``0o700`` to apply access control to the new directory. This "
"implicitly affects :func:`tempfile.mkdtemp` and is a mitigation for :cve:"
"`2024-4030`. Other values for *mode* continue to be ignored. (Contributed by "
"Steve Dower in :gh:`118486`.)"
msgstr ""
"I Windows har :func:`~os.mkdir` och :func:`~os.makedirs` nu stöd för att "
"skicka ett *mode*-värde på ``0o700`` för att tillämpa åtkomstkontroll på den "
"nya katalogen. Detta påverkar implicit :func:`tempfile.mkdtemp` och är en "
"begränsning av :cve:`2024-4030`. Andra värden för *mode* fortsätter att "
"ignoreras. (Bidrag från Steve Dower i :gh:`118486`.)"

msgid ""
":func:`~os.posix_spawn` now accepts ``None`` for the *env* argument, which "
"makes the newly spawned process use the current process environment. "
"(Contributed by Jakub Kulik in :gh:`113119`.)"
msgstr ""
":func:`~os.posix_spawn` accepterar nu ``None`` för argumentet *env*, vilket "
"gör att den nyligen skapade processen använder den aktuella processmiljön. "
"(Bidrag från Jakub Kulik i :gh:`113119`.)"

msgid ""
":func:`~os.posix_spawn` can now use the :const:`~os.POSIX_SPAWN_CLOSEFROM` "
"attribute in the *file_actions* parameter on platforms that support :c:func:"
"`!posix_spawn_file_actions_addclosefrom_np`. (Contributed by Jakub Kulik in :"
"gh:`113117`.)"
msgstr ""
":func:`~os.posix_spawn` kan nu använda attributet :const:`~os."
"POSIX_SPAWN_CLOSEFROM` i parametern *file_actions* på plattformar som "
"stöder :c:func:`!posix_spawn_file_actions_addclosefrom_np`. (Bidrag från "
"Jakub Kulik i :gh:`113117`.)"

msgid "os.path"
msgstr "os.sökväg"

msgid ""
"Add :func:`~os.path.isreserved` to check if a path is reserved on the "
"current system. This function is only available on Windows. (Contributed by "
"Barney Gale in :gh:`88569`.)"
msgstr ""
"Lägg till :func:`~os.path.isreserved` för att kontrollera om en sökväg är "
"reserverad i det aktuella systemet. Denna funktion är endast tillgänglig på "
"Windows. (Bidrag från Barney Gale i :gh:`88569`.)"

msgid ""
"On Windows, :func:`~os.path.isabs` no longer considers paths starting with "
"exactly one slash (``\\`` or ``/``) to be absolute. (Contributed by Barney "
"Gale and Jon Foster in :gh:`44626`.)"
msgstr ""
"I Windows anser :func:`~os.path.isabs` inte längre att sökvägar som börjar "
"med exakt ett snedstreck (```` eller ``/``) är absoluta. (Bidrag från Barney "
"Gale och Jon Foster i :gh:`44626`.)"

msgid ""
":func:`~os.path.realpath` now resolves MS-DOS style file names even if the "
"file is not accessible. (Contributed by Moonsik Park in :gh:`82367`.)"
msgstr ""
":func:`~os.path.realpath` löser nu filnamn i MS-DOS-stil även om filen inte "
"är tillgänglig. (Bidrag från Moonsik Park i :gh:`82367`.)"

msgid "pathlib"
msgstr "sökväg"

msgid ""
"Add :exc:`~pathlib.UnsupportedOperation`, which is raised instead of :exc:"
"`NotImplementedError` when a path operation isn't supported. (Contributed by "
"Barney Gale in :gh:`89812`.)"
msgstr ""
"Lägg till :exc:`~pathlib.UnsupportedOperation`, som visas i stället för :exc:"
"`NotImplementedError` när en sökvägsoperation inte stöds. (Bidrag från "
"Barney Gale i :gh:`89812`.)"

msgid ""
"Add a new constructor for creating :class:`~pathlib.Path` objects from "
"'file' URIs (``file:///``), :meth:`.Path.from_uri`. (Contributed by Barney "
"Gale in :gh:`107465`.)"
msgstr ""
"Lägg till en ny konstruktör för att skapa :class:`~pathlib.Path`-objekt från "
"'fil'-URI:er (``file:///``), :meth:`.Path.from_uri`. (Bidrag från Barney "
"Gale i :gh:`107465`.)"

msgid ""
"Add :meth:`.PurePath.full_match` for matching paths with shell-style "
"wildcards, including the recursive wildcard \"``**``\". (Contributed by "
"Barney Gale in :gh:`73435`.)"
msgstr ""
"Lägg till :meth:`.PurePath.full_match` för matchning av sökvägar med "
"jokertecken i shell-stil, inklusive det rekursiva jokertecknet \"``**``\". "
"(Bidrag från Barney Gale i :gh:`73435`.)"

msgid ""
"Add the :attr:`.PurePath.parser` class attribute to store the implementation "
"of :mod:`os.path` used for low-level path parsing and joining. This will be "
"either :mod:`!posixpath` or :mod:`!ntpath`."
msgstr ""
"Lägg till klassattributet :attr:`.PurePath.parser` för att lagra "
"implementeringen av :mod:`os.path` som används för lågnivåanalys och "
"sammanfogning av sökvägar. Detta kommer att vara antingen :mod:`!posixpath` "
"eller :mod:`!ntpath`."

msgid ""
"Add *recurse_symlinks* keyword-only argument to :meth:`.Path.glob` and :meth:"
"`~pathlib.Path.rglob`. (Contributed by Barney Gale in :gh:`77609`.)"
msgstr ""
"Lägg till *recurse_symlinks* endast nyckelordsargument till :meth:`.Path."
"glob` och :meth:`~pathlib.Path.rglob`. (Bidrag från Barney Gale i :gh:"
"`77609`.)"

msgid ""
":meth:`.Path.glob` and :meth:`~pathlib.Path.rglob` now return files and "
"directories when given a pattern that ends with \"``**``\". Previously, only "
"directories were returned. (Contributed by Barney Gale in :gh:`70303`.)"
msgstr ""
":meth:`.Path.glob` och :meth:`~pathlib.Path.rglob` returnerar nu filer och "
"kataloger när de får ett mönster som slutar med \"``**``\". Tidigare "
"returnerades endast kataloger. (Bidrag från Barney Gale i :gh:`70303`.)"

msgid ""
"Add the *follow_symlinks* keyword-only argument to :meth:`Path.is_file "
"<pathlib.Path.is_file>`, :meth:`Path.is_dir <pathlib.Path.is_dir>`, :meth:`."
"Path.owner`, and :meth:`.Path.group`. (Contributed by Barney Gale in :gh:"
"`105793` and Kamil Turek in :gh:`107962`.)"
msgstr ""
"Lägg till argumentet *follow_symlinks* med endast nyckelord till :meth:`Path."
"is_file <pathlib.Path.is_file>`, :meth:`Path.is_dir <pathlib.Path.is_dir>`, :"
"meth:`.Path.owner` och :meth:`.Path.group`. (Bidrag från Barney Gale i :gh:"
"`105793` och Kamil Turek i :gh:`107962`.)"

msgid "pdb"
msgstr "pdb"

msgid ""
":func:`breakpoint` and :func:`~pdb.set_trace` now enter the debugger "
"immediately rather than on the next line of code to be executed. This change "
"prevents the debugger from breaking outside of the context when :func:`!"
"breakpoint` is positioned at the end of the context. (Contributed by Tian "
"Gao in :gh:`118579`.)"
msgstr ""
":func:`breakpoint` och :func:`~pdb.set_trace` går nu in i felsökaren "
"omedelbart i stället för på nästa kodrad som ska exekveras. Denna ändring "
"förhindrar att felsökaren bryts utanför kontexten när :func:`!breakpoint` är "
"placerad i slutet av kontexten. (Bidrag från Tian Gao i :gh:`118579`.)"

msgid ""
"``sys.path[0]`` is no longer replaced by the directory of the script being "
"debugged when :attr:`sys.flags.safe_path` is set. (Contributed by Tian Gao "
"and Christian Walther in :gh:`111762`.)"
msgstr ""
"``sys.path[0]`` ersätts inte längre av katalogen för det skript som felsöks "
"när :attr:`sys.flags.safe_path` är inställd. (Bidrag från Tian Gao och "
"Christian Walther i :gh:`111762`.)"

msgid ""
":mod:`zipapp` is now supported as a debugging target. (Contributed by Tian "
"Gao in :gh:`118501`.)"
msgstr ""
":mod:`zipapp` stöds nu som ett felsökningsmål. (Bidrag från Tian Gao i :gh:"
"`118501`.)"

msgid ""
"Add ability to move between chained exceptions during post-mortem debugging "
"in :func:`~pdb.pm` using the new :pdbcmd:`exceptions [exc_number] "
"<exceptions>` command for Pdb. (Contributed by Matthias Bussonnier in :gh:"
"`106676`.)"
msgstr ""
"Lägg till möjligheten att flytta mellan kedjade undantag under post-mortem-"
"felsökning i :func:`~pdb.pm` med det nya kommandot :pdbcmd:`exceptions "
"[exc_number] <exceptions>` för Pdb. (Bidrag från Matthias Bussonnier i :gh:"
"`106676`.)"

msgid ""
"Expressions and statements whose prefix is a pdb command are now correctly "
"identified and executed. (Contributed by Tian Gao in :gh:`108464`.)"
msgstr ""
"Uttryck och satser vars prefix är ett pdb-kommando identifieras och "
"exekveras nu korrekt. (Bidrag från Tian Gao i :gh:`108464`.)"

msgid "queue"
msgstr "kö"

msgid ""
"Add :meth:`Queue.shutdown <queue.Queue.shutdown>` and :exc:`~queue.ShutDown` "
"to manage queue termination. (Contributed by Laurie Opperman and Yves Duprat "
"in :gh:`104750`.)"
msgstr ""
"Lägg till :meth:`Queue.shutdown <queue.Queue.shutdown>` och :exc:`~queue."
"ShutDown` för att hantera köavslut. (Bidrag från Laurie Opperman och Yves "
"Duprat i :gh:`104750`.)"

msgid "random"
msgstr "slumpvis"

msgid ""
"Add a :ref:`command-line interface <random-cli>`. (Contributed by Hugo van "
"Kemenade in :gh:`118131`.)"
msgstr ""
"Lägg till ett :ref:`kommandoradsgränssnitt <random-cli>`. (Bidrag från Hugo "
"van Kemenade i :gh:`118131`.)"

msgid "re"
msgstr "re"

msgid ""
"Rename :exc:`!re.error` to :exc:`~re.PatternError` for improved clarity. :"
"exc:`!re.error` is kept for backward compatibility."
msgstr ""
"Byt namn på :exc:`!re.error` till :exc:`~re.PatternError` för ökad "
"tydlighet. :exc:`!re.error` behålls för bakåtkompatibilitet."

msgid "shutil"
msgstr "shutil"

msgid ""
"Support the *dir_fd* and *follow_symlinks* keyword arguments in :func:"
"`~shutil.chown`. (Contributed by Berker Peksag and Tahia K in :gh:`62308`)"
msgstr ""
"Stöd för nyckelordsargumenten *dir_fd* och *follow_symlinks* i :func:"
"`~shutil.chown`. (Bidrag från Berker Peksag och Tahia K i :gh:`62308`)"

msgid "site"
msgstr "plats"

msgid ""
":file:`.pth` files are now decoded using UTF-8 first, and then with the :"
"term:`locale encoding` if UTF-8 decoding fails. (Contributed by Inada Naoki "
"in :gh:`117802`.)"
msgstr ""
":file:`.pth`-filer avkodas nu först med UTF-8, och sedan med :term:`locale "
"encoding` om UTF-8-avkodningen misslyckas. (Bidrag från Inada Naoki i :gh:"
"`117802`.)"

msgid "sqlite3"
msgstr "sqlite3"

msgid ""
"A :exc:`ResourceWarning` is now emitted if a :class:`~sqlite3.Connection` "
"object is not :meth:`closed <sqlite3.Connection.close>` explicitly. "
"(Contributed by Erlend E. Aasland in :gh:`105539`.)"
msgstr ""
"En :exc:`ResourceWarning` skickas nu ut om ett :class:`~sqlite3.Connection`-"
"objekt inte :meth:`closed <sqlite3.Connection.close>` explicit. (Bidrag från "
"Erlend E. Aasland i :gh:`105539`.)"

msgid ""
"Add the *filter* keyword-only parameter to :meth:`.Connection.iterdump` for "
"filtering database objects to dump. (Contributed by Mariusz Felisiak in :gh:"
"`91602`.)"
msgstr ""
"Lägg till parametern *filter* med endast nyckelord till :meth:`.Connection."
"iterdump` för filtrering av databasobjekt som ska dumpas. (Bidrag från "
"Mariusz Felisiak i :gh:`91602`.)"

msgid "ssl"
msgstr "ssl"

msgid ""
"The :func:`~ssl.create_default_context` API now includes :data:`~ssl."
"VERIFY_X509_PARTIAL_CHAIN` and :data:`~ssl.VERIFY_X509_STRICT` in its "
"default flags."
msgstr ""
"API:et :func:`~ssl.create_default_context` inkluderar nu :data:`~ssl."
"VERIFY_X509_PARTIAL_CHAIN` och :data:`~ssl.VERIFY_X509_STRICT` i sina "
"standardflaggor."

msgid ""
":data:`~ssl.VERIFY_X509_STRICT` may reject pre-:rfc:`5280` or malformed "
"certificates that the underlying OpenSSL implementation might otherwise "
"accept. Whilst disabling this is not recommended, you can do so using:"
msgstr ""
":data:`~ssl.VERIFY_X509_STRICT` kan avvisa pre-:rfc:`5280` eller missbildade "
"certifikat som den underliggande OpenSSL-implementationen annars skulle "
"kunna acceptera. Det är inte rekommenderat att inaktivera detta, men du kan "
"göra det genom att använda:"

msgid ""
"import ssl\n"
"\n"
"ctx = ssl.create_default_context()\n"
"ctx.verify_flags &= ~ssl.VERIFY_X509_STRICT"
msgstr ""
"import ssl\n"
"\n"
"ctx = ssl.create_default_context()\n"
"ctx.verify_flags &= ~ssl.VERIFY_X509_STRICT"

msgid "(Contributed by William Woodruff in :gh:`112389`.)"
msgstr "(Bidrag från William Woodruff i :gh:`112389`.)"

msgid "statistics"
msgstr "statistik"

msgid ""
"Add :func:`~statistics.kde` for kernel density estimation. This makes it "
"possible to estimate a continuous probability density function from a fixed "
"number of discrete samples. (Contributed by Raymond Hettinger in :gh:"
"`115863`.)"
msgstr ""
"Lägg till :func:`~statistics.kde` för skattning av kärntäthet. Detta gör det "
"möjligt att skatta en kontinuerlig sannolikhetstäthetsfunktion från ett fast "
"antal diskreta prover. (Bidrag från Raymond Hettinger i :gh:`115863`.)"

msgid ""
"Add :func:`~statistics.kde_random` for sampling from an estimated "
"probability density function created by :func:`~statistics.kde`. "
"(Contributed by Raymond Hettinger in :gh:`115863`.)"
msgstr ""
"Lägg till :func:`~statistics.kde_random` för provtagning från en uppskattad "
"sannolikhetstäthetsfunktion skapad av :func:`~statistics.kde`. (Bidrag från "
"Raymond Hettinger i :gh:`115863`.)"

msgid "subprocess"
msgstr "delprocess"

msgid ""
"The :mod:`subprocess` module now uses the :func:`~os.posix_spawn` function "
"in more situations."
msgstr ""
"Modulen :mod:`subprocess` använder nu funktionen :func:`~os.posix_spawn` i "
"fler situationer."

msgid ""
"Notably, when *close_fds* is ``True`` (the default), :func:`~os.posix_spawn` "
"will be used when the C library provides :c:func:`!"
"posix_spawn_file_actions_addclosefrom_np`, which includes recent versions of "
"Linux, FreeBSD, and Solaris. On Linux, this should perform similarly to the "
"existing Linux :c:func:`!vfork` based code."
msgstr ""
"När *close_fds* är ``True`` (standard) kommer :func:`~os.posix_spawn` att "
"användas när C-biblioteket tillhandahåller :c:func:`!"
"posix_spawn_file_actions_addclosefrom_np`, vilket inkluderar de senaste "
"versionerna av Linux, FreeBSD och Solaris. På Linux bör detta fungera på "
"liknande sätt som den befintliga Linux :c:func:`!vfork`-baserade koden."

msgid ""
"A private control knob :attr:`!subprocess._USE_POSIX_SPAWN` can be set to "
"``False`` if you need to force :mod:`subprocess` to never use :func:`~os."
"posix_spawn`. Please report your reason and platform details in the :ref:"
"`issue tracker <using-the-tracker>` if you set this so that we can improve "
"our API selection logic for everyone. (Contributed by Jakub Kulik in :gh:"
"`113117`.)"
msgstr ""
"En privat kontrollknapp :attr:`!subprocess._USE_POSIX_SPAWN` kan sättas till "
"``False`` om du behöver tvinga :mod:`subprocess` att aldrig använda :func:"
"`~os.posix_spawn`. Vänligen rapportera din anledning och plattformsdetaljer "
"i :ref:``issue tracker <using-the-tracker>`` om du ställer in detta så att "
"vi kan förbättra vår API-valslogik för alla. (Bidrag från Jakub Kulik i :gh:"
"`113117`.)"

msgid "sys"
msgstr "system"

msgid ""
"Add the :func:`~sys._is_interned` function to test if a string was interned. "
"This function is not guaranteed to exist in all implementations of Python. "
"(Contributed by Serhiy Storchaka in :gh:`78573`.)"
msgstr ""
"Lägg till funktionen :func:`~sys._is_interned` för att testa om en sträng "
"har internerats. Det är inte säkert att den här funktionen finns i alla "
"implementationer av Python. (Bidrag från Serhiy Storchaka i :gh:`78573`.)"

msgid "tempfile"
msgstr "tempfil"

msgid ""
"On Windows, the default mode ``0o700`` used by :func:`tempfile.mkdtemp` now "
"limits access to the new directory due to changes to :func:`os.mkdir`. This "
"is a mitigation for :cve:`2024-4030`. (Contributed by Steve Dower in :gh:"
"`118486`.)"
msgstr ""
"I Windows begränsar standardläget ``0o700`` som används av :func:`tempfile."
"mkdtemp` nu åtkomsten till den nya katalogen på grund av ändringar i :func:"
"`os.mkdir`. Detta är en begränsning av :cve:`2024-4030`. (Bidrag från Steve "
"Dower i :gh:`118486`.)"

msgid "time"
msgstr "tid"

msgid ""
"On Windows, :func:`~time.monotonic` now uses the "
"``QueryPerformanceCounter()`` clock for a resolution of 1 microsecond, "
"instead of the ``GetTickCount64()`` clock which has a resolution of 15.6 "
"milliseconds. (Contributed by Victor Stinner in :gh:`88494`.)"
msgstr ""
"I Windows använder :func:`~time.monotonic` nu klockan "
"``QueryPerformanceCounter()`` med en upplösning på 1 mikrosekund, istället "
"för klockan ``GetTickCount64()`` som har en upplösning på 15,6 "
"millisekunder. (Bidrag från Victor Stinner i :gh:`88494`.)"

msgid ""
"On Windows, :func:`~time.time` now uses the "
"``GetSystemTimePreciseAsFileTime()`` clock for a resolution of 1 "
"microsecond, instead of the ``GetSystemTimeAsFileTime()`` clock which has a "
"resolution of 15.6 milliseconds. (Contributed by Victor Stinner in :gh:"
"`63207`.)"
msgstr ""
"I Windows använder :func:`~time.time` nu klockan "
"``GetSystemTimePreciseAsFileTime()`` med en upplösning på 1 mikrosekund, "
"istället för klockan ``GetSystemTimeAsFileTime()`` som har en upplösning på "
"15,6 millisekunder. (Bidrag från Victor Stinner i :gh:`63207`.)"

msgid "tkinter"
msgstr "tkinter"

msgid ""
"Add :mod:`tkinter` widget methods: :meth:`!tk_busy_hold`, :meth:`!"
"tk_busy_configure`, :meth:`!tk_busy_cget`, :meth:`!tk_busy_forget`, :meth:`!"
"tk_busy_current`, and :meth:`!tk_busy_status`. (Contributed by Miguel, "
"klappnase and Serhiy Storchaka in :gh:`72684`.)"
msgstr ""
"Lägg till :mod:`tkinter` widgetmetoder: :meth:`!tk_busy_hold`, :meth:`!"
"tk_busy_configure`, :meth:`!tk_busy_cget`, :meth:`!tk_busy_forget`, :meth:`!"
"tk_busy_current`, och :meth:`!tk_busy_status`. (Bidrag från Miguel, "
"klappnase och Serhiy Storchaka i :gh:`72684`.)"

msgid ""
"The :mod:`tkinter` widget method :meth:`!wm_attributes` now accepts the "
"attribute name without the minus prefix to get window attributes, for "
"example ``w.wm_attributes('alpha')`` and allows specifying attributes and "
"values to set as keyword arguments, for example ``w."
"wm_attributes(alpha=0.5)``. (Contributed by Serhiy Storchaka in :gh:`43457`.)"
msgstr ""
"Widgetmetoden :mod:`tkinter` :meth:`!wm_attributes` accepterar nu "
"attributnamnet utan minusprefixet för att få fönsterattribut, till exempel "
"``w.wm_attributes('alpha')`` och tillåter att attribut och värden anges som "
"nyckelordsargument, till exempel ``w.wm_attributes(alpha=0.5)``. (Bidrag "
"från Serhiy Storchaka i :gh:`43457`.)"

msgid ""
":meth:`!wm_attributes` can now return attributes as a :class:`dict`, by "
"using the new optional keyword-only parameter *return_python_dict*. "
"(Contributed by Serhiy Storchaka in :gh:`43457`.)"
msgstr ""
":meth:`!wm_attributes` kan nu returnera attribut som en :class:`dict`, genom "
"att använda den nya valfria parametern *return_python_dict*, som endast "
"innehåller nyckelord. (Bidrag från Serhiy Storchaka i :gh:`43457`.)"

msgid ""
":meth:`!Text.count` can now return a simple :class:`int` when the new "
"optional keyword-only parameter *return_ints* is used. Otherwise, the single "
"count is returned as a 1-tuple or ``None``. (Contributed by Serhiy Storchaka "
"in :gh:`97928`.)"
msgstr ""
":meth:`!Text.count` kan nu returnera en enkel :class:`int` när den nya "
"valfria parametern *return_ints* används. Annars returneras den enskilda "
"räkningen som en 1-tupel eller ``None``. (Bidrag från Serhiy Storchaka i :gh:"
"`97928`.)"

msgid ""
"Support the \"vsapi\" element type in the :meth:`~tkinter.ttk.Style."
"element_create` method of :class:`tkinter.ttk.Style`. (Contributed by Serhiy "
"Storchaka in :gh:`68166`.)"
msgstr ""
"Stöd för elementtypen \"vsapi\" i metoden :meth:`~tkinter.ttk.Style."
"element_create` i :class:`tkinter.ttk.Style`. (Bidrag från Serhiy Storchaka "
"i :gh:`68166`.)"

msgid ""
"Add the :meth:`!after_info` method for Tkinter widgets. (Contributed by "
"Cheryl Sabella in :gh:`77020`.)"
msgstr ""
"Lägg till :meth:`!after_info`-metoden för Tkinter-widgetar. (Bidrag från "
"Cheryl Sabella i :gh:`77020`.)"

msgid ""
"Add a new :meth:`!copy_replace` method to :class:`!PhotoImage` to copy a "
"region from one image to another, possibly with pixel zooming, subsampling, "
"or both. (Contributed by Serhiy Storchaka in :gh:`118225`.)"
msgstr ""
"Lägg till en ny :meth:`!copy_replace`-metod till :class:`!PhotoImage` för "
"att kopiera en region från en bild till en annan, eventuellt med "
"pixelzoomning, subsampling eller båda. (Bidrag från Serhiy Storchaka i :gh:"
"`118225`.)"

msgid ""
"Add *from_coords* parameter to the :class:`!PhotoImage` methods :meth:`!"
"copy`, :meth:`!zoom` and :meth:`!subsample`. Add *zoom* and *subsample* "
"parameters to the :class:`!PhotoImage` method :meth:`!copy`. (Contributed by "
"Serhiy Storchaka in :gh:`118225`.)"
msgstr ""
"Lägg till parametern *from_coords* i :class:`!PhotoImage`-metoderna :meth:`!"
"copy`, :meth:`!zoom` och :meth:`!subsample`. Lägg till parametrarna *zoom* "
"och *subsample* i :class:`!PhotoImage`-metoden :meth:`!copy`. (Bidrag från "
"Serhiy Storchaka i :gh:`118225`.)"

msgid ""
"Add the :class:`!PhotoImage` methods :meth:`!read` to read an image from a "
"file and :meth:`!data` to get the image data. Add *background* and "
"*grayscale* parameters to the :meth:`!write` method. (Contributed by Serhiy "
"Storchaka in :gh:`118271`.)"
msgstr ""
"Lägg till :class:`!PhotoImage`-metoderna :meth:`!read` för att läsa en bild "
"från en fil och :meth:`!data` för att hämta bilddata. Lägg till parametrarna "
"*background* och *grayscale* i metoden :meth:`!write`. (Bidrag från Serhiy "
"Storchaka i :gh:`118271`.)"

msgid "traceback"
msgstr "spårning"

msgid ""
"Add the :attr:`~traceback.TracebackException.exc_type_str` attribute to :"
"class:`~traceback.TracebackException`, which holds a string display of the "
"*exc_type*. Deprecate the :attr:`~traceback.TracebackException.exc_type` "
"attribute, which holds the type object itself. Add parameter *save_exc_type* "
"(default ``True``) to indicate whether ``exc_type`` should be saved. "
"(Contributed by Irit Katriel in :gh:`112332`.)"
msgstr ""
"Lägg till attributet :attr:`~traceback.TracebackException.exc_type_str` "
"till :class:`~traceback.TracebackException`, som innehåller en strängvisning "
"av *exc_type*. Utgå från attributet :attr:`~traceback.TracebackException."
"exc_type`, som innehåller själva typobjektet. Lägg till parametern "
"*save_exc_type* (standard ``True``) för att ange om ``exc_type`` ska sparas. "
"(Bidrag från Irit Katriel i :gh:`112332`.)"

msgid ""
"Add a new *show_group* keyword-only parameter to :meth:`.TracebackException."
"format_exception_only` to (recursively) format the nested exceptions of a :"
"exc:`BaseExceptionGroup` instance. (Contributed by Irit Katriel in :gh:"
"`105292`.)"
msgstr ""
"Lägg till en ny *show_group* parameter med nyckelord endast till :meth:`."
"TracebackException.format_exception_only` för att (rekursivt) formatera de "
"nästlade undantagen i en :exc:`BaseExceptionGroup`-instans. (Bidrag från "
"Irit Katriel i :gh:`105292`.)"

msgid "types"
msgstr "typer"

msgid ""
":class:`~types.SimpleNamespace` can now take a single positional argument to "
"initialise the namespace's arguments. This argument must either be a mapping "
"or an iterable of key-value pairs. (Contributed by Serhiy Storchaka in :gh:"
"`108191`.)"
msgstr ""
":class:`~types.SimpleNamespace` kan nu ta ett enda positionellt argument för "
"att initiera namnrymdens argument. Detta argument måste antingen vara en "
"mappning eller en iterabel av nyckel-värde-par. (Bidrag från Serhiy "
"Storchaka i :gh:`108191`.)"

msgid "typing"
msgstr "maskinskrivning"

msgid ""
":pep:`705`: Add :data:`~typing.ReadOnly`, a special typing construct to mark "
"a :class:`~typing.TypedDict` item as read-only for type checkers."
msgstr ""
":pep:`705`: Lägg till :data:`~typing.ReadOnly`, en speciell "
"typningskonstruktion för att markera ett :class:`~typing.TypedDict`-objekt "
"som skrivskyddat för typkontrollanter."

msgid ""
":pep:`742`: Add :data:`~typing.TypeIs`, a typing construct that can be used "
"to instruct a type checker how to narrow a type."
msgstr ""
":pep:`742`: Lägg till :data:`~typing.TypeIs`, en typkonstruktion som kan "
"användas för att instruera en typkontrollant hur en typ ska begränsas."

msgid ""
"Add :data:`~typing.NoDefault`, a sentinel object used to represent the "
"defaults of some parameters in the :mod:`typing` module. (Contributed by "
"Jelle Zijlstra in :gh:`116126`.)"
msgstr ""
"Lägg till :data:`~typing.NoDefault`, ett sentinel-objekt som används för att "
"representera standardvärdena för vissa parametrar i modulen :mod:`typing`. "
"(Bidrag från Jelle Zijlstra i :gh:`116126`.)"

msgid ""
"Add :func:`~typing.get_protocol_members` to return the set of members "
"defining a :class:`typing.Protocol`. (Contributed by Jelle Zijlstra in :gh:"
"`104873`.)"
msgstr ""
"Lägg till :func:`~typing.get_protocol_members` för att returnera "
"uppsättningen medlemmar som definierar en :class:`typing.Protocol`. (Bidrag "
"från Jelle Zijlstra i :gh:`104873`.)"

msgid ""
"Add :func:`~typing.is_protocol` to check whether a class is a :class:"
"`~typing.Protocol`. (Contributed by Jelle Zijlstra in :gh:`104873`.)"
msgstr ""
"Lägg till :func:`~typing.is_protocol` för att kontrollera om en klass är en :"
"class:`~typing.Protocol`. (Bidrag från Jelle Zijlstra i :gh:`104873`.)"

msgid ""
":data:`~typing.ClassVar` can now be nested in :data:`~typing.Final`, and "
"vice versa. (Contributed by Mehdi Drissi in :gh:`89547`.)"
msgstr ""
":data:`~typing.ClassVar` kan nu nestas i :data:`~typing.Final`, och vice "
"versa. (Bidrag från Mehdi Drissi i :gh:`89547`.)"

msgid "unicodedata"
msgstr "unicodedata"

msgid ""
"Update the Unicode database to `version 15.1.0`__. (Contributed by James "
"Gerity in :gh:`109559`.)"
msgstr ""
"Uppdatera Unicode-databasen till `version 15.1.0`__. (Bidrag från James "
"Gerity i :gh:`109559`.)"

msgid "venv"
msgstr "ven"

msgid ""
"Add support for creating source control management (SCM) ignore files in a "
"virtual environment's directory. By default, Git is supported. This is "
"implemented as opt-in via the API, which can be extended to support other "
"SCMs (:class:`~venv.EnvBuilder` and :func:`~venv.create`), and opt-out via "
"the CLI, using :option:`!--without-scm-ignore-files`. (Contributed by Brett "
"Cannon in :gh:`108125`.)"
msgstr ""
"Lägg till stöd för att skapa ignoreringsfiler för SCM (Source Control "
"Management) i en virtuell miljös katalog. Som standard stöds Git. Detta "
"implementeras som opt-in via API:et, som kan utökas för att stödja andra SCM:"
"er (:class:`~venv.EnvBuilder` och :func:`~venv.create`), och opt-out via "
"CLI, med :option:`!--without-scm-ignore-files`. (Bidrag från Brett Cannon i :"
"gh:`108125`.)"

msgid "warnings"
msgstr "varningar"

msgid ""
":pep:`702`: The new :func:`warnings.deprecated` decorator provides a way to "
"communicate deprecations to a :term:`static type checker` and to warn on "
"usage of deprecated classes and functions. A :exc:`DeprecationWarning` may "
"also be emitted when a decorated function or class is used at runtime. "
"(Contributed by Jelle Zijlstra in :gh:`104003`.)"
msgstr ""
":pep:`702`: Den nya :func:`warnings.deprecated` dekoratorn ger ett sätt att "
"kommunicera deprecations till en :term:`statisk typkontroll` och att varna "
"för användning av deprecated klasser och funktioner. En :exc:"
"`DeprecationWarning` kan också sändas ut när en dekorerad funktion eller "
"klass används vid körning. (Bidrag från Jelle Zijlstra i :gh:`104003`.)"

msgid "xml"
msgstr "xml"

msgid ""
"Allow controlling Expat >=2.6.0 reparse deferral (:cve:`2023-52425`) by "
"adding five new methods:"
msgstr ""
"Tillåt kontroll av Expat >=2.6.0 reparse deferral (:cve:`2023-52425`) genom "
"att lägga till fem nya metoder:"

msgid ":meth:`xml.etree.ElementTree.XMLParser.flush`"
msgstr ":meth:`xml.etree.ElementTree.XMLParser.flush`"

msgid ":meth:`xml.etree.ElementTree.XMLPullParser.flush`"
msgstr ":meth:`xml.etree.ElementTree.XMLPullParser.flush`"

msgid ":meth:`xml.parsers.expat.xmlparser.GetReparseDeferralEnabled`"
msgstr ":meth:`xml.parsers.expat.xmlparser.GetReparseDeferralEnabled`"

msgid ":meth:`xml.parsers.expat.xmlparser.SetReparseDeferralEnabled`"
msgstr ":meth:`xml.parsers.expat.xmlparser.SetReparseDeferralEnabled`"

msgid ":meth:`!xml.sax.expatreader.ExpatParser.flush`"
msgstr ":meth:`!xml.sax.expatreader.ExpatParser.flush`"

msgid "(Contributed by Sebastian Pipping in :gh:`115623`.)"
msgstr "(Bidrag från Sebastian Pipping i :gh:`115623`.)"

msgid ""
"Add the :meth:`!close` method for the iterator returned by :func:`~xml.etree."
"ElementTree.iterparse` for explicit cleanup. (Contributed by Serhiy "
"Storchaka in :gh:`69893`.)"
msgstr ""
"Lägg till metoden :meth:`!close` för iteratorn som returneras av :func:`~xml."
"etree.ElementTree.iterparse` för explicit rensning. (Bidrag från Serhiy "
"Storchaka i :gh:`69893`.)"

msgid "zipimport"
msgstr "zipimport"

msgid ""
"Add support for ZIP64_ format files. Everybody loves huge data, right? "
"(Contributed by Tim Hatch in :gh:`94146`.)"
msgstr ""
"Lägg till stöd för filer i ZIP64_-format. Alla älskar stora datamängder, "
"eller hur? (Bidrag från Tim Hatch i :gh:`94146`.)"

msgid "Optimizations"
msgstr "Optimeringar"

msgid ""
"Several standard library modules have had their import times significantly "
"improved. For example, the import time of the :mod:`typing` module has been "
"reduced by around a third by removing dependencies on :mod:`re` and :mod:"
"`contextlib`. Other modules to enjoy import-time speedups include :mod:"
"`email.utils`, :mod:`enum`, :mod:`functools`, :mod:`importlib.metadata`, "
"and :mod:`threading`. (Contributed by Alex Waygood, Shantanu Jain, Adam "
"Turner, Daniel Hollas, and others in :gh:`109653`.)"
msgstr ""
"Flera standardbiblioteksmoduler har fått sina importtider avsevärt "
"förbättrade. Till exempel har importtiden för modulen :mod:`typing` minskats "
"med ungefär en tredjedel genom att ta bort beroenden av :mod:`re` och :mod:"
"`contextlib`. Andra moduler som har fått snabbare importtid är :mod:`email."
"utils`, :mod:`enum`, :mod:`functools`, :mod:`importlib.metadata` och :mod:"
"`threading`. (Bidrag från Alex Waygood, Shantanu Jain, Adam Turner, Daniel "
"Hollas, och andra i :gh:`109653`.)"

msgid ""
":func:`textwrap.indent` is now around 30% faster than before for large "
"input. (Contributed by Inada Naoki in :gh:`107369`.)"
msgstr ""
":func:`textwrap.indent` är nu cirka 30% faster än tidigare för stora "
"inmatningar. (Bidrag från Inada Naoki i :gh:`107369`.)"

msgid ""
"The :mod:`subprocess` module now uses the :func:`~os.posix_spawn` function "
"in more situations, including when *close_fds* is ``True`` (the default) on "
"many modern platforms. This should provide a notable performance increase "
"when launching processes on FreeBSD and Solaris. See the :ref:`subprocess "
"<whatsnew313-subprocess>` section above for details. (Contributed by Jakub "
"Kulik in :gh:`113117`.)"
msgstr ""
"Modulen :mod:`subprocess` använder nu funktionen :func:`~os.posix_spawn` i "
"fler situationer, inklusive när *close_fds* är ``True`` (standard) på många "
"moderna plattformar. Detta bör ge en märkbar prestandaökning när processer "
"startas på FreeBSD och Solaris. Se avsnittet :ref:`subprocess <whatsnew313-"
"subprocess>` ovan för detaljer. (Bidrag från Jakub Kulik i :gh:`113117`.)"

msgid "Removed Modules And APIs"
msgstr "Borttagna moduler och API:er"

msgid "PEP 594: Remove \"dead batteries\" from the standard library"
msgstr "PEP 594: Ta bort \"döda batterier\" från standardbiblioteket"

msgid ""
":pep:`594` proposed removing 19 modules from the standard library, "
"colloquially referred to as 'dead batteries' due to their historic, "
"obsolete, or insecure status. All of the following modules were deprecated "
"in Python 3.11, and are now removed:"
msgstr ""
":pep:`594` föreslog att 19 moduler skulle tas bort från standardbiblioteket, "
"i dagligt tal kallade \"döda batterier\" på grund av deras historiska, "
"föråldrade eller osäkra status. Alla följande moduler var föråldrade i "
"Python 3.11 och tas nu bort:"

msgid ":mod:`!aifc`"
msgstr ":mod:`!aifc``"

msgid ""
":pypi:`standard-aifc`: Use the redistribution of ``aifc`` library from PyPI."
msgstr ""
":pypi:`standard-aifc`: Använd omfördelningen av biblioteket ``aifc`` från "
"PyPI."

msgid ":mod:`!audioop`"
msgstr ":mod:`!audioop`"

msgid ":pypi:`audioop-lts`: Use ``audioop-lts`` library from PyPI."
msgstr ":pypi:`audioop-lts`: Använd biblioteket ``audioop-lts`` från PyPI."

msgid ":mod:`!chunk`"
msgstr ":mod:`!chunk`"

msgid ""
":pypi:`standard-chunk`: Use the redistribution of ``chunk`` library from "
"PyPI."
msgstr ""
":pypi:`standard-chunk`: Använd omfördelningen av biblioteket ``chunk`` från "
"PyPI."

msgid ":mod:`!cgi` and :mod:`!cgitb`"
msgstr ":mod:`!cgi` och :mod:`!cgitb`"

msgid ""
":class:`!cgi.FieldStorage` can typically be replaced with :func:`urllib."
"parse.parse_qsl` for ``GET`` and ``HEAD`` requests, and the :mod:`email."
"message` module or the :pypi:`multipart` library for ``POST`` and ``PUT`` "
"requests."
msgstr ""
":class:`!cgi.FieldStorage` kan vanligtvis ersättas med :func:`urllib.parse."
"parse_qsl` för ``GET`` och ``HEAD`` förfrågningar, och :mod:`email.message`-"
"modulen eller :pypi:`multipart`-biblioteket för ``POST`` och ``PUT`` "
"förfrågningar."

msgid ""
":func:`!cgi.parse` can be replaced by calling :func:`urllib.parse.parse_qs` "
"directly on the desired query string, unless the input is ``multipart/form-"
"data``, which should be replaced as described below for :func:`!cgi."
"parse_multipart`."
msgstr ""
":func:`!cgi.parse` kan ersättas genom att anropa :func:`urllib.parse."
"parse_qs` direkt på den önskade frågesträngen, såvida inte indata är "
"``multipart/form-data``, som bör ersättas enligt beskrivningen nedan för :"
"func:`!cgi.parse_multipart`."

msgid ""
":func:`!cgi.parse_header` can be replaced with the functionality in the :mod:"
"`email` package, which implements the same MIME RFCs. For example, with :"
"class:`email.message.EmailMessage`:"
msgstr ""
":func:`!cgi.parse_header` kan ersättas med funktionaliteten i paketet :mod:"
"`email`, som implementerar samma MIME RFC:er. Till exempel med :class:`email."
"message.EmailMessage`:"

msgid ""
"from email.message import EmailMessage\n"
"\n"
"msg = EmailMessage()\n"
"msg['content-type'] = 'application/json; charset=\"utf8\"'\n"
"main, params = msg.get_content_type(), msg['content-type'].params"
msgstr ""
"from email.message import EmailMessage\n"
"\n"
"msg = EmailMessage()\n"
"msg['content-type'] = 'application/json; charset=\"utf8\"'\n"
"main, params = msg.get_content_type(), msg['content-type'].params"

msgid ""
":func:`!cgi.parse_multipart` can be replaced with the functionality in the :"
"mod:`email` package, which implements the same MIME RFCs, or with the :pypi:"
"`multipart` library. For example, the :class:`email.message.EmailMessage` "
"and :class:`email.message.Message` classes."
msgstr ""
":func:`!cgi.parse_multipart` kan ersättas med funktionaliteten i paketet :"
"mod:`email`, som implementerar samma MIME RFC:er, eller med biblioteket :"
"pypi:`multipart`. Till exempel klasserna :class:`email.message.EmailMessage` "
"och :class:`email.message.Message`."

msgid ""
":pypi:`standard-cgi`: and :pypi:`standard-cgitb`: Use the redistribution of "
"``cgi`` and ``cgitb`` library from PyPI."
msgstr ""
":pypi:`standard-cgi`: och :pypi:`standard-cgitb`: Använd omfördelningen av "
"biblioteken ``cgi`` och ``cgitb`` från PyPI."

msgid ""
":mod:`!crypt` and the private :mod:`!_crypt` extension. The :mod:`hashlib` "
"module may be an appropriate replacement when simply hashing a value is "
"required. Otherwise, various third-party libraries on PyPI are available:"
msgstr ""
":mod:`!crypt` och det privata tillägget :mod:`!_crypt`. Modulen :mod:"
"`hashlib` kan vara en lämplig ersättning när det bara krävs hashning av ett "
"värde. Annars finns olika tredjepartsbibliotek på PyPI tillgängliga:"

msgid ""
":pypi:`bcrypt`: Modern password hashing for your software and your servers."
msgstr ""
":pypi:`bcrypt`: Modern lösenordshashing för din programvara och dina servrar."

msgid ""
":pypi:`passlib`: Comprehensive password hashing framework supporting over 30 "
"schemes."
msgstr ""
":pypi:`passlib`: Omfattande ramverk för hashing av lösenord med stöd för "
"över 30 system."

msgid ":pypi:`argon2-cffi`: The secure Argon2 password hashing algorithm."
msgstr ":pypi:`argon2-cffi`: Den säkra lösenordshashingalgoritmen Argon2."

msgid ""
":pypi:`legacycrypt`: :mod:`ctypes` wrapper to the POSIX crypt library call "
"and associated functionality."
msgstr ""
":pypi:`legacycrypt`: :mod:`ctypes` omslag till POSIX crypt-biblioteksanropet "
"och tillhörande funktionalitet."

msgid ""
":pypi:`crypt_r`: Fork of the :mod:`!crypt` module, wrapper to the :manpage:"
"`crypt_r(3)` library call and associated functionality."
msgstr ""
":pypi:`crypt_r`: Förgrening av modulen :mod:`!crypt`, omslag till "
"biblioteksanropet :manpage:`crypt_r(3)` och tillhörande funktionalitet."

msgid ""
":pypi:`standard-crypt` and :pypi:`deprecated-crypt-alternative`: Use the "
"redistribution of ``crypt`` and reimplementation of ``_crypt`` libraries "
"from PyPI."
msgstr ""
":pypi:`standard-crypt` och :pypi:`deprecated-crypt-alternative`: Använd "
"omfördelningen av ``crypt`` och återimplementeringen av ``_crypt``-"
"biblioteken från PyPI."

msgid ""
":mod:`!imghdr`: The :pypi:`filetype`, :pypi:`puremagic`, or :pypi:`python-"
"magic` libraries should be used as replacements. For example, the :func:`!"
"puremagic.what` function can be used to replace the :func:`!imghdr.what` "
"function for all file formats that were supported by :mod:`!imghdr`."
msgstr ""
":mod:`!imghdr`: Biblioteken :pypi:`filetype`, :pypi:`puremagic` eller :pypi:"
"`python-magic` bör användas som ersättare. Till exempel kan funktionen :func:"
"`!puremagic.what` användas för att ersätta funktionen :func:`!imghdr.what` "
"för alla filformat som stöddes av :mod:`!imghdr`."

msgid ""
":pypi:`standard-imghdr`: Use the redistribution of ``imghdr`` library from "
"PyPI."
msgstr ""
":pypi:`standard-imghdr`: Använd omfördelningen av biblioteket ``imghdr`` "
"från PyPI."

msgid ":mod:`!mailcap`: Use the :mod:`mimetypes` module instead."
msgstr ":mod:`!mailcap`: Använd modulen :mod:`mimetypes` istället."

msgid ""
":pypi:`standard-mailcap`: Use the redistribution of ``mailcap`` library from "
"PyPI."
msgstr ""
":pypi:`standard-mailcap`: Använd omfördelningen av ``mailcap``-biblioteket "
"från PyPI."

msgid ":mod:`!msilib`"
msgstr ":mod:`!msilib`"

msgid ":mod:`!nis`"
msgstr ":mod:`!nis`"

msgid ":mod:`!nntplib`: Use the :pypi:`pynntp` library from PyPI instead."
msgstr ":mod:`!nntplib`: Använd istället biblioteket :pypi:`pynntp` från PyPI."

msgid ""
":pypi:`standard-nntplib`: Use the redistribution of ``nntplib`` library from "
"PyPI."
msgstr ""
":pypi:`standard-nntplib`: Använd omfördelningen av biblioteket ``nntplib`` "
"från PyPI."

msgid ""
":mod:`!ossaudiodev`: For audio playback, use the :pypi:`pygame` library from "
"PyPI instead."
msgstr ""
":mod:`!ossaudiodev`: För uppspelning av ljud, använd istället biblioteket :"
"pypi:`pygame` från PyPI."

msgid ""
":mod:`!pipes`: Use the :mod:`subprocess` module instead. Use :func:`shlex."
"quote` to replace the undocumented ``pipes.quote`` function."
msgstr ""
":mod:`!pipes`: Använd modulen :mod:`subprocess` istället. Använd :func:"
"`shlex.quote` för att ersätta den odokumenterade funktionen ``pipes.quote``."

msgid ""
":pypi:`standard-pipes`: Use the redistribution of ``pipes`` library from "
"PyPI."
msgstr ""
":pypi:`standard-pipes`: Använd omfördelningen av biblioteket ``pipes`` från "
"PyPI."

msgid ""
":mod:`!sndhdr`: The :pypi:`filetype`, :pypi:`puremagic`, or :pypi:`python-"
"magic` libraries should be used as replacements."
msgstr ""
":mod:`!sndhdr`: Biblioteken :pypi:`filetype`, :pypi:`puremagic` eller :pypi:"
"`python-magic` bör användas som ersättare."

msgid ""
":pypi:`standard-sndhdr`: Use the redistribution of ``sndhdr`` library from "
"PyPI."
msgstr ""
":pypi:`standard-sndhdr`: Använd omfördelningen av biblioteket ``sndhdr`` "
"från PyPI."

msgid ":mod:`!spwd`: Use the :pypi:`python-pam` library from PyPI instead."
msgstr ""
":mod:`!spwd`: Använd biblioteket :pypi:`python-pam` från PyPI istället."

msgid ":mod:`!sunau`"
msgstr ":mod:`!sunau`"

msgid ""
":pypi:`standard-sunau`: Use the redistribution of ``sunau`` library from "
"PyPI."
msgstr ""
":pypi:`standard-sunau`: Använd omfördelningen av biblioteket ``sunau`` från "
"PyPI."

msgid ""
":mod:`!telnetlib`, Use the :pypi:`telnetlib3` or :pypi:`Exscript` libraries "
"from PyPI instead."
msgstr ""
":mod:`!telnetlib`, Använd istället biblioteken :pypi:`telnetlib3` eller :"
"pypi:`Exscript` från PyPI."

msgid ""
":pypi:`standard-telnetlib`: Use the redistribution of ``telnetlib`` library "
"from PyPI."
msgstr ""
":pypi:`standard-telnetlib`: Använd omfördelningen av biblioteket "
"``telnetlib`` från PyPI."

msgid ""
":mod:`!uu`: Use the :mod:`base64` module instead, as a modern alternative."
msgstr ""
":mod:`!uu`: Använd modulen :mod:`base64` istället, som ett modernt "
"alternativ."

msgid ""
":pypi:`standard-uu`: Use the redistribution of ``uu`` library from PyPI."
msgstr ""
":pypi:`standard-uu`: Använd omfördelningen av biblioteket ``uu`` från PyPI."

msgid ":mod:`!xdrlib`"
msgstr ":mod:`!xdrlib`"

msgid ""
":pypi:`standard-xdrlib`: Use the redistribution of ``xdrlib`` library from "
"PyPI."
msgstr ""
":pypi:`standard-xdrlib`: Använd omfördelningen av biblioteket ``xdrlib`` "
"från PyPI."

msgid ""
"(Contributed by Victor Stinner and Zachary Ware in :gh:`104773` and :gh:"
"`104780`.)"
msgstr ""
"(Bidrag från Victor Stinner och Zachary Ware i :gh:`104773` och :gh:"
"`104780`.)"

msgid "2to3"
msgstr "2to3"

msgid ""
"Remove the :program:`2to3` program and the :mod:`!lib2to3` module, "
"previously deprecated in Python 3.11. (Contributed by Victor Stinner in :gh:"
"`104780`.)"
msgstr ""
"Ta bort programmet :program:`2to3` och modulen :mod:`!lib2to3`, som tidigare "
"var föråldrade i Python 3.11. (Bidrag från Victor Stinner i :gh:`104780`.)"

msgid "builtins"
msgstr "inbyggda"

msgid ""
"Remove support for chained :class:`classmethod` descriptors (introduced in :"
"gh:`63272`). These can no longer be used to wrap other descriptors, such as :"
"class:`property`. The core design of this feature was flawed and led to "
"several problems. To \"pass-through\" a :class:`classmethod`, consider using "
"the :attr:`!__wrapped__` attribute that was added in Python 3.10. "
"(Contributed by Raymond Hettinger in :gh:`89519`.)"
msgstr ""
"Ta bort stöd för kedjade :class:`classmethod`-beskrivare (introducerat i :gh:"
"`63272`). Dessa kan inte längre användas för att omsluta andra deskriptorer, "
"t.ex. :class:`property`. Grunddesignen för denna funktion var bristfällig "
"och ledde till flera problem. För att \"pass-through\" en :class:"
"`classmethod`, överväg att använda attributet :attr:`!__wrapped__` som lades "
"till i Python 3.10. (Bidrag från Raymond Hettinger i :gh:`89519`.)"

msgid ""
"Raise a :exc:`RuntimeError` when calling :meth:`frame.clear` on a suspended "
"frame (as has always been the case for an executing frame). (Contributed by "
"Irit Katriel in :gh:`79932`.)"
msgstr ""
"Utlöser ett :exc:`RuntimeError` när man anropar :meth:`frame.clear` på en "
"avbruten ram (vilket alltid har varit fallet för en exekverande ram). "
"(Bidrag från Irit Katriel i :gh:`79932`.)"

msgid ""
"Remove the undocumented :class:`!LegacyInterpolation` class, deprecated in "
"the docstring since Python 3.2, and at runtime since Python 3.11. "
"(Contributed by Hugo van Kemenade in :gh:`104886`.)"
msgstr ""
"Ta bort den odokumenterade :class:`!LegacyInterpolation`-klassen, som är "
"föråldrad i dokumentsträngen sedan Python 3.2 och vid körning sedan Python "
"3.11. (Bidrag från Hugo van Kemenade i :gh:`104886`.)"

msgid "importlib.metadata"
msgstr "importlib.metadata"

msgid ""
"Remove deprecated subscript (:meth:`~object.__getitem__`) access for :ref:"
"`EntryPoint <entry-points>` objects. (Contributed by Jason R. Coombs in :gh:"
"`113175`.)"
msgstr ""
"Ta bort föråldrad subscript (:meth:`~object.__getitem__`) åtkomst för :ref:"
"`EntryPoint <entry-points>` objekt. (Bidrag från Jason R. Coombs i :gh:"
"`113175`.)"

msgid "locale"
msgstr "lokal"

msgid ""
"Remove the :func:`!locale.resetlocale` function, deprecated in Python 3.11. "
"Use ``locale.setlocale(locale.LC_ALL, \"\")`` instead. (Contributed by "
"Victor Stinner in :gh:`104783`.)"
msgstr ""
"Ta bort :func:`!locale.resetlocale`-funktionen, föråldrad i Python 3.11. "
"Använd ``locale.setlocale(locale.LC_ALL, \"\")`` istället. (Bidrag från "
"Victor Stinner i :gh:`104783`.)"

msgid "opcode"
msgstr "opkod"

msgid ""
"Move :attr:`!opcode.ENABLE_SPECIALIZATION` to :attr:`!_opcode."
"ENABLE_SPECIALIZATION`. This field was added in 3.12, it was never "
"documented, and is not intended for external use. (Contributed by Irit "
"Katriel in :gh:`105481`.)"
msgstr ""
"Flytta :attr:`!opcode.ENABLE_SPECIALIZATION` till :attr:`!_opcode."
"ENABLE_SPECIALIZATION`. Detta fält lades till i 3.12, det dokumenterades "
"aldrig och är inte avsett för extern användning. (Bidrag från Irit Katriel "
"i :gh:`105481`.)"

msgid ""
"Remove :func:`!opcode.is_pseudo`, :attr:`!opcode.MIN_PSEUDO_OPCODE`, and :"
"attr:`!opcode.MAX_PSEUDO_OPCODE`, which were added in Python 3.12, but were "
"neither documented nor exposed through :mod:`dis`, and were not intended to "
"be used externally. (Contributed by Irit Katriel in :gh:`105481`.)"
msgstr ""
"Ta bort :func:`!opcode.is_pseudo`, :attr:`!opcode.MIN_PSEUDO_OPCODE`, och :"
"attr:`!opcode.MAX_PSEUDO_OPCODE`, som lades till i Python 3.12, men varken "
"dokumenterades eller exponerades genom :mod:`dis`, och var inte avsedda att "
"användas externt. (Bidrag från Irit Katriel i :gh:`105481`.)"

msgid "optparse"
msgstr "optparse"

msgid ""
"This module is no longer considered :term:`soft deprecated`. While :mod:"
"`argparse` remains preferred for new projects that aren't using a third "
"party command line argument processing library, there are aspects of the way "
"``argparse`` works that mean the lower level ``optparse`` module may provide "
"a better foundation for *writing* argument processing libraries, and for "
"implementing command line applications which adhere more strictly than "
"``argparse`` does to various Unix command line processing conventions that "
"originate in the behaviour of the C :c:func:`!getopt` function . "
"(Contributed by Alyssa Coghlan and Serhiy Storchaka in :gh:`126180`.)"
msgstr ""
"Denna modul anses inte längre vara :term:`soft deprecated`. Medan :mod:"
"`argparse` fortfarande är att föredra för nya projekt som inte använder ett "
"tredjeparts kommandoradsargumentbehandlingsbibliotek, finns det aspekter av "
"hur ``argparse`` fungerar som innebär att den lägre modulen ``optparse`` kan "
"ge en bättre grund för att *skriva* argumentbehandlingsbibliotek och för att "
"implementera kommandoradsapplikationer som mer strikt än ``argparse`` följer "
"olika Unix kommandoradsbehandlingskonventioner som har sitt ursprung i "
"beteendet hos C :c:func:`!getopt`-funktionen . (Bidrag från Alyssa Coghlan "
"och Serhiy Storchaka i :gh:`126180`.)"

msgid ""
"Remove the ability to use :class:`~pathlib.Path` objects as context "
"managers. This functionality was deprecated and has had no effect since "
"Python 3.9. (Contributed by Barney Gale in :gh:`83863`.)"
msgstr ""
"Ta bort möjligheten att använda :class:`~pathlib.Path`-objekt som "
"kontexthanterare. Denna funktionalitet var föråldrad och har inte haft någon "
"effekt sedan Python 3.9. (Bidrag från Barney Gale i :gh:`83863`.)"

msgid ""
"Remove the undocumented, deprecated, and broken :func:`!re.template` "
"function and :attr:`!re.TEMPLATE` / :attr:`!re.T` flag. (Contributed by "
"Serhiy Storchaka and Nikita Sobolev in :gh:`105687`.)"
msgstr ""
"Ta bort den odokumenterade, föråldrade och trasiga funktionen :func:`!re."
"template` och flaggan :attr:`!re.TEMPLATE` / :attr:`!re.T`. (Bidrag från "
"Serhiy Storchaka och Nikita Sobolev i :gh:`105687`.)"

msgid "tkinter.tix"
msgstr "tkinter.tix"

msgid ""
"Remove the :mod:`!tkinter.tix` module, deprecated in Python 3.6. The third-"
"party Tix library which the module wrapped is unmaintained. (Contributed by "
"Zachary Ware in :gh:`75552`.)"
msgstr ""
"Ta bort :mod:`!tkinter.tix`-modulen, föråldrad i Python 3.6. Tix-biblioteket "
"från tredje part som modulen omslöt underhålls inte längre. (Bidrag från "
"Zachary Ware i :gh:`75552`.)"

msgid "turtle"
msgstr "sköldpadda"

msgid ""
"Remove the :meth:`!RawTurtle.settiltangle` method, deprecated in the "
"documentation since Python 3.1 and at runtime since Python 3.11. "
"(Contributed by Hugo van Kemenade in :gh:`104876`.)"
msgstr ""
"Ta bort metoden :meth:`!RawTurtle.settiltangle`, som är föråldrad i "
"dokumentationen sedan Python 3.1 och i körtid sedan Python 3.11. (Bidrag "
"från Hugo van Kemenade i :gh:`104876`.)"

msgid ""
"Remove the :mod:`!typing.io` and :mod:`!typing.re` namespaces, deprecated "
"since Python 3.8. The items in those namespaces can be imported directly "
"from the :mod:`typing` module. (Contributed by Sebastian Rittau in :gh:"
"`92871`.)"
msgstr ""
"Ta bort namnrymderna :mod:`!typing.io` och :mod:`!typing.re`, föråldrade "
"sedan Python 3.8. Objekten i dessa namnrymder kan importeras direkt från "
"modulen :mod:`typing`. (Bidrag från Sebastian Rittau i :gh:`92871`.)"

msgid ""
"Remove the keyword-argument method of creating :class:`~typing.TypedDict` "
"types, deprecated in Python 3.11. (Contributed by Tomas Roun in :gh:"
"`104786`.)"
msgstr ""
"Ta bort nyckelordsargumentmetoden för att skapa :class:`~typing.TypedDict`-"
"typer, föråldrad i Python 3.11. (Bidrag från Tomas Roun i :gh:`104786`.)"

msgid "unittest"
msgstr "unittest"

msgid ""
"Remove the following :mod:`unittest` functions, deprecated in Python 3.11:"
msgstr "Ta bort följande :mod:`unittest`-funktioner, föråldrade i Python 3.11:"

msgid ":func:`!unittest.findTestCases`"
msgstr ":func:`!unittest.findTestCases`"

msgid ":func:`!unittest.makeSuite`"
msgstr ":func:`!unittest.makeSuite`"

msgid ":func:`!unittest.getTestCaseNames`"
msgstr ":func:`!unittest.getTestCaseNames`"

msgid "Use :class:`~unittest.TestLoader` methods instead:"
msgstr "Använd istället :class:`~unittest.TestLoader`-metoder:"

msgid ":meth:`~unittest.TestLoader.loadTestsFromModule`"
msgstr ":meth:`~unittest.TestLoader.loadTestsFromModule`"

msgid ":meth:`~unittest.TestLoader.loadTestsFromTestCase`"
msgstr ":meth:`~unittest.TestLoader.loadTestsFromTestCase`"

msgid ":meth:`~unittest.TestLoader.getTestCaseNames`"
msgstr ":meth:`~unittest.TestLoader.getTestCaseNames`"

msgid "(Contributed by Hugo van Kemenade in :gh:`104835`.)"
msgstr "(Bidrag från Hugo van Kemenade i :gh:`104835`.)"

msgid ""
"Remove the untested and undocumented :meth:`!TestProgram.usageExit` method, "
"deprecated in Python 3.11. (Contributed by Hugo van Kemenade in :gh:"
"`104992`.)"
msgstr ""
"Ta bort den otestade och odokumenterade :meth:`!TestProgram.usageExit`-"
"metoden, föråldrad i Python 3.11. (Bidrag från Hugo van Kemenade i :gh:"
"`104992`.)"

msgid "urllib"
msgstr "urllib"

msgid ""
"Remove the *cafile*, *capath*, and *cadefault* parameters of the :func:"
"`urllib.request.urlopen` function, deprecated in Python 3.6. Use the "
"*context* parameter instead with an :class:`~ssl.SSLContext` instance. The :"
"meth:`ssl.SSLContext.load_cert_chain` function can be used to load specific "
"certificates, or let :func:`ssl.create_default_context` select the operating "
"system's trusted certificate authority (CA) certificates. (Contributed by "
"Victor Stinner in :gh:`105382`.)"
msgstr ""
"Ta bort parametrarna *cafile*, *capath* och *cadefault* i funktionen :func:"
"`urllib.request.urlopen`, föråldrad i Python 3.6. Använd istället parametern "
"*context* med en instans av :class:`~ssl.SSLContext`. Funktionen :meth:`ssl."
"SSLContext.load_cert_chain` kan användas för att ladda specifika certifikat "
"eller låta :func:`ssl.create_default_context` välja operativsystemets "
"betrodda certifikat från certifikatutfärdaren (CA). (Bidrag från Victor "
"Stinner i :gh:`105382`.)"

msgid "webbrowser"
msgstr "webbläsare"

msgid ""
"Remove the untested and undocumented :class:`!MacOSX` class, deprecated in "
"Python 3.11. Use the :class:`!MacOSXOSAScript` class (introduced in Python "
"3.2) instead. (Contributed by Hugo van Kemenade in :gh:`104804`.)"
msgstr ""
"Ta bort den otestade och odokumenterade :class:`!MacOSX`-klassen, utfasad i "
"Python 3.11. Använd :class:`!MacOSXOSAScript`-klassen (introducerad i Python "
"3.2) istället. (Bidrag från Hugo van Kemenade i :gh:`104804`.)"

msgid ""
"Remove the deprecated :attr:`!MacOSXOSAScript._name` attribute. Use the :"
"attr:`MacOSXOSAScript.name <webbrowser.controller.name>` attribute instead. "
"(Contributed by Nikita Sobolev in :gh:`105546`.)"
msgstr ""
"Ta bort det föråldrade attributet :attr:`!MacOSXOSAScript._name`. Använd "
"istället attributet :attr:`MacOSXOSAScript.name <webbrowser.controller."
"name>`. (Bidrag från Nikita Sobolev i :gh:`105546`.)"

msgid "New Deprecations"
msgstr "Nya avskrivningar"

msgid ":ref:`User-defined functions <user-defined-funcs>`:"
msgstr ":ref:`Användardefinierade funktioner <user-defined-funcs>`:"

msgid ""
"Deprecate assignment to a function's :attr:`~function.__code__` attribute, "
"where the new code object's type does not match the function's type. The "
"different types are: plain function, generator, async generator, and "
"coroutine. (Contributed by Irit Katriel in :gh:`81137`.)"
msgstr ""
"Avskaffa tilldelning till en funktions :attr:`~function.__code__`-attribut, "
"där det nya kodobjektets typ inte överensstämmer med funktionens typ. De "
"olika typerna är: vanlig funktion, generator, async-generator och coroutine. "
"(Bidrag från Irit Katriel i :gh:`81137`.)"

msgid ":mod:`array`:"
msgstr ":mod:`array`:"

msgid ""
"Deprecate the ``'u'`` format code (:c:type:`wchar_t`) at runtime. This "
"format code has been deprecated in documentation since Python 3.3, and will "
"be removed in Python 3.16. Use the ``'w'`` format code (:c:type:`Py_UCS4`) "
"for Unicode characters instead. (Contributed by Hugo van Kemenade in :gh:"
"`80480`.)"
msgstr ""
"Avskaffa formatkoden ``'u'`` (:c:type:`wchar_t`) vid körning. Denna "
"formatkod har varit föråldrad i dokumentation sedan Python 3.3 och kommer "
"att tas bort i Python 3.16. Använd formatkoden ``'w'`` (:c:type:`Py_UCS4`) "
"för Unicode-tecken istället. (Bidrag från Hugo van Kemenade i :gh:`80480`.)"

msgid ":mod:`ctypes`:"
msgstr ":mod:`ctypes`:"

msgid ""
"Deprecate the undocumented :func:`!SetPointerType` function, to be removed "
"in Python 3.15. (Contributed by Victor Stinner in :gh:`105733`.)"
msgstr ""
"Avveckla den odokumenterade funktionen :func:`!SetPointerType`, som kommer "
"att tas bort i Python 3.15. (Bidrag från Victor Stinner i :gh:`105733`.)"

msgid ""
":term:`Soft-deprecate <soft deprecated>` the :func:`~ctypes.ARRAY` function "
"in favour of ``type * length`` multiplication. (Contributed by Victor "
"Stinner in :gh:`105733`.)"
msgstr ""
":term:`Soft-deprecate <soft deprecated>` funktionen :func:`~ctypes.ARRAY` "
"till förmån för multiplikation av ``typ * längd``. (Bidrag från Victor "
"Stinner i :gh:`105733`.)"

msgid ":mod:`decimal`:"
msgstr ":mod:`decimal`:"

msgid ""
"Deprecate the non-standard and undocumented :class:`~decimal.Decimal` format "
"specifier ``'N'``, which is only supported in the :mod:`!decimal` module's C "
"implementation. (Contributed by Serhiy Storchaka in :gh:`89902`.)"
msgstr ""
"Avskaffa den icke-standardiserade och odokumenterade :class:`~decimal."
"Decimal`-formatspecificeraren ``'N'``, som endast stöds i :mod:`!decimal`-"
"modulens C-implementering. (Bidrag från Serhiy Storchaka i :gh:`89902`.)"

msgid ":mod:`dis`:"
msgstr ":mod:`dis`:"

msgid ""
"Deprecate the :attr:`!HAVE_ARGUMENT` separator. Check membership in :data:"
"`~dis.hasarg` instead. (Contributed by Irit Katriel in :gh:`109319`.)"
msgstr ""
"Avveckla :attr:`!HAVE_ARGUMENT`-avgränsaren. Kontrollera medlemskap i :data:"
"`~dis.hasarg` istället. (Bidrag från Irit Katriel i :gh:`109319`.)"

msgid ":mod:`gettext`:"
msgstr ":mod:`gettext`:"

msgid ""
"Deprecate non-integer numbers as arguments to functions and methods that "
"consider plural forms in the :mod:`!gettext` module, even if no translation "
"was found. (Contributed by Serhiy Storchaka in :gh:`88434`.)"
msgstr ""
"Ta bort icke-integrala tal som argument till funktioner och metoder som "
"beaktar pluralformer i modulen :mod:`!gettext`, även om ingen översättning "
"hittades. (Bidrag från Serhiy Storchaka i :gh:`88434`.)"

msgid ":mod:`glob`:"
msgstr ":mod:`glob`:"

msgid ""
"Deprecate the undocumented :func:`!glob0` and :func:`!glob1` functions. Use :"
"func:`~glob.glob` and pass a :term:`path-like object` specifying the root "
"directory to the *root_dir* parameter instead. (Contributed by Barney Gale "
"in :gh:`117337`.)"
msgstr ""
"Utgå från de odokumenterade funktionerna :func:`!glob0` och :func:`!glob1`. "
"Använd :func:`~glob.glob` och skicka ett :term:`path-liknande objekt` som "
"anger rotkatalogen till parametern *root_dir* istället. (Bidrag från Barney "
"Gale i :gh:`117337`.)"

msgid ":mod:`http.server`:"
msgstr ":mod:`http.server`:"

msgid ""
"Deprecate :class:`~http.server.CGIHTTPRequestHandler`, to be removed in "
"Python 3.15. Process-based CGI HTTP servers have been out of favor for a "
"very long time. This code was outdated, unmaintained, and rarely used. It "
"has a high potential for both security and functionality bugs. (Contributed "
"by Gregory P. Smith in :gh:`109096`.)"
msgstr ""
"Avveckla :class:`~http.server.CGIHTTPRequestHandler`, tas bort i Python "
"3.15. Processbaserade CGI HTTP-servrar har varit i onåd under en mycket lång "
"tid. Denna kod var föråldrad, ounderhållen och användes sällan. Den har en "
"hög potential för både säkerhets- och funktionsbuggar. (Bidrag från Gregory "
"P. Smith i :gh:`109096`.)"

msgid ""
"Deprecate the :option:`!--cgi` flag to the :program:`python -m http.server` "
"command-line interface, to be removed in Python 3.15. (Contributed by "
"Gregory P. Smith in :gh:`109096`.)"
msgstr ""
"Avveckla :option:`!--cgi`-flaggan till :program:`python -m http.server`-"
"kommandoradsgränssnittet, som kommer att tas bort i Python 3.15. (Bidrag "
"från Gregory P. Smith i :gh:`109096`.)"

msgid ":mod:`mimetypes`:"
msgstr ":mod:`mimetypes`:"

msgid ""
":term:`Soft-deprecate <soft deprecated>` file path arguments to :func:"
"`~mimetypes.guess_type`, use :func:`~mimetypes.guess_file_type` instead. "
"(Contributed by Serhiy Storchaka in :gh:`66543`.)"
msgstr ""
":term:`Soft-deprecate <soft deprecated>` filvägsargument till :func:"
"`~mimetypes.guess_type`, använd :func:`~mimetypes.guess_file_type` istället. "
"(Bidrag från Serhiy Storchaka i :gh:`66543`.)"

msgid ":mod:`re`:"
msgstr ":mod:`re`:"

msgid ""
"Deprecate passing the optional *maxsplit*, *count*, or *flags* arguments as "
"positional arguments to the module-level :func:`~re.split`, :func:`~re.sub`, "
"and :func:`~re.subn` functions. These parameters will become :ref:`keyword-"
"only <keyword-only_parameter>` in a future version of Python. (Contributed "
"by Serhiy Storchaka in :gh:`56166`.)"
msgstr ""
"Avstå från att skicka de valfria argumenten *maxsplit*, *count* eller "
"*flags* som positionella argument till modulnivåfunktionerna :func:`~re."
"split`, :func:`~re.sub` och :func:`~re.subn`. Dessa parametrar kommer att "
"bli :ref:`keyword-only <keyword-only_parameter>` i en framtida version av "
"Python. (Bidrag från Serhiy Storchaka i :gh:`56166`.)"

msgid ":mod:`pathlib`:"
msgstr ":mod:`pathlib`:"

msgid ""
"Deprecate :meth:`.PurePath.is_reserved`, to be removed in Python 3.15. Use :"
"func:`os.path.isreserved` to detect reserved paths on Windows. (Contributed "
"by Barney Gale in :gh:`88569`.)"
msgstr ""
"Avveckla :meth:`.PurePath.is_reserved`, kommer att tas bort i Python 3.15. "
"Använd :func:`os.path.isreserved` för att upptäcka reserverade sökvägar på "
"Windows. (Bidrag från Barney Gale i :gh:`88569`.)"

msgid ":mod:`platform`:"
msgstr ":mod:`plattform`:"

msgid ""
"Deprecate :func:`~platform.java_ver`, to be removed in Python 3.15. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested. (Contributed by Nikita Sobolev in :gh:`116349`.)"
msgstr ""
"Utgå :func:`~platform.java_ver`, kommer att tas bort i Python 3.15. Denna "
"funktion är endast användbar för Jython-stöd, har ett förvirrande API och är "
"i stort sett otestad. (Bidrag från Nikita Sobolev i :gh:`116349`.)"

msgid ":mod:`pydoc`:"
msgstr ":mod:`pydoc`:"

msgid ""
"Deprecate the undocumented :func:`!ispackage` function. (Contributed by "
"Zackery Spytz in :gh:`64020`.)"
msgstr ""
"Avveckla den odokumenterade funktionen :func:`!ispackage`. (Bidrag från "
"Zackery Spytz i :gh:`64020`.)"

msgid ":mod:`sqlite3`:"
msgstr ":mod:`sqlite3`:"

msgid ""
"Deprecate passing more than one positional argument to the :func:`~sqlite3."
"connect` function and the :class:`~sqlite3.Connection` constructor. The "
"remaining parameters will become keyword-only in Python 3.15. (Contributed "
"by Erlend E. Aasland in :gh:`107948`.)"
msgstr ""
"Avskaffa att skicka mer än ett positionellt argument till funktionen :func:"
"`~sqlite3.connect` och konstruktören :class:`~sqlite3.Connection`. De "
"återstående parametrarna kommer att bli nyckelordsbundna i Python 3.15. "
"(Bidrag från Erlend E. Aasland i :gh:`107948`.)"

msgid ""
"Deprecate passing name, number of arguments, and the callable as keyword "
"arguments for :meth:`.Connection.create_function` and :meth:`.Connection."
"create_aggregate` These parameters will become positional-only in Python "
"3.15. (Contributed by Erlend E. Aasland in :gh:`108278`.)"
msgstr ""
"Utgå från att skicka namn, antal argument och anropbar som "
"nyckelordsargument för :meth:`.Connection.create_function` och :meth:`."
"Connection.create_aggregate` Dessa parametrar kommer att bli enbart "
"positionella i Python 3.15. (Bidrag från Erlend E. Aasland i :gh:`108278`.)"

msgid ""
"Deprecate passing the callback callable by keyword for the :meth:`~sqlite3."
"Connection.set_authorizer`, :meth:`~sqlite3.Connection."
"set_progress_handler`, and :meth:`~sqlite3.Connection.set_trace_callback` :"
"class:`~sqlite3.Connection` methods. The callback callables will become "
"positional-only in Python 3.15. (Contributed by Erlend E. Aasland in :gh:"
"`108278`.)"
msgstr ""
"Avskaffa att skicka callback callable med nyckelord för metoderna :meth:"
"`~sqlite3.Connection.set_authorizer`, :meth:`~sqlite3.Connection."
"set_progress_handler` och :meth:`~sqlite3.Connection.set_trace_callback` :"
"class:`~sqlite3.Connection`. Callback callables kommer att bli positional-"
"only i Python 3.15. (Bidrag från Erlend E. Aasland i :gh:`108278`.)"

msgid ":mod:`sys`:"
msgstr ":mod:`sys`:"

msgid ""
"Deprecate the :func:`~sys._enablelegacywindowsfsencoding` function, to be "
"removed in Python 3.16. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead. (Contributed by Inada Naoki in :gh:`73427`.)"
msgstr ""
"Utgå från funktionen :func:`~sys._enablelegacywindowsfsencoding`, som kommer "
"att tas bort i Python 3.16. Använd miljövariabeln :envvar:"
"`PYTHONLEGACYWINDOWSFSENCODING` istället. (Bidrag från Inada Naoki i :gh:"
"`73427`.)"

msgid ":mod:`tarfile`:"
msgstr ":mod:`tarfile`:"

msgid ""
"Deprecate the undocumented and unused :attr:`!TarFile.tarfile` attribute, to "
"be removed in Python 3.16. (Contributed in :gh:`115256`.)"
msgstr ""
"Avveckla det odokumenterade och oanvända attributet :attr:`!TarFile."
"tarfile`, som ska tas bort i Python 3.16. (Bidrag från :gh:`115256`.)"

msgid ":mod:`traceback`:"
msgstr ":mod:`traceback`:"

msgid ""
"Deprecate the :attr:`.TracebackException.exc_type` attribute. Use :attr:`."
"TracebackException.exc_type_str` instead. (Contributed by Irit Katriel in :"
"gh:`112332`.)"
msgstr ""
"Utgå från attributet :attr:`.TracebackException.exc_type`. Använd :attr:`."
"TracebackException.exc_type_str` istället. (Bidrag från Irit Katriel i :gh:"
"`112332`.)"

msgid ":mod:`typing`:"
msgstr ":mod:`typning`:"

msgid ""
"Deprecate the undocumented keyword argument syntax for creating :class:"
"`~typing.NamedTuple` classes (e.g. ``Point = NamedTuple(\"Point\", x=int, "
"y=int)``), to be removed in Python 3.15. Use the class-based syntax or the "
"functional syntax instead. (Contributed by Alex Waygood in :gh:`105566`.)"
msgstr ""
"Avveckla den odokumenterade syntaxen för nyckelordsargument för att skapa :"
"class:`~typing.NamedTuple`-klasser (t.ex. ``Point = NamedTuple(\"Point\", "
"x=int, y=int)``), kommer att tas bort i Python 3.15. Använd den "
"klassbaserade syntaxen eller den funktionella syntaxen istället. (Bidrag "
"från Alex Waygood i :gh:`105566`.)"

msgid ""
"Deprecate omitting the *fields* parameter when creating a :class:`~typing."
"NamedTuple` or :class:`typing.TypedDict` class, and deprecate passing "
"``None`` to the *fields* parameter of both types. Python 3.15 will require a "
"valid sequence for the *fields* parameter. To create a NamedTuple class with "
"zero fields, use ``class NT(NamedTuple): pass`` or ``NT = NamedTuple(\"NT\", "
"())``. To create a TypedDict class with zero fields, use ``class "
"TD(TypedDict): pass`` or ``TD = TypedDict(\"TD\", {})``. (Contributed by "
"Alex Waygood in :gh:`105566` and :gh:`105570`.)"
msgstr ""
"Avstå från att utelämna *fields*-parametern när du skapar en :class:`~typing."
"NamedTuple`- eller :class:`typing.TypedDict`-klass, och avstå från att "
"skicka ``None`` till *fields*-parametern för båda typerna. Python 3.15 "
"kommer att kräva en giltig sekvens för parametern *fields*. För att skapa en "
"NamedTuple-klass med noll fält, använd ``class NT(NamedTuple): pass`` eller "
"``NT = NamedTuple(\"NT\", ())``. För att skapa en TypedDict-klass med noll "
"fält, använd ``class TD(TypedDict): pass`` eller ``TD = TypedDict(\"TD\", "
"{})``. (Bidrag från Alex Waygood i :gh:`105566` och :gh:`105570`.)"

msgid ""
"Deprecate the :func:`typing.no_type_check_decorator` decorator function, to "
"be removed in Python 3.15. After eight years in the :mod:`typing` module, it "
"has yet to be supported by any major type checker. (Contributed by Alex "
"Waygood in :gh:`106309`.)"
msgstr ""
"Avveckla dekoratorfunktionen :func:`typing.no_type_check_decorator`, som "
"kommer att tas bort i Python 3.15. Efter åtta år i modulen :mod:`typing` har "
"den ännu inte fått stöd av någon större typkontroll. (Bidrag från Alex "
"Waygood i :gh:`106309`.)"

msgid ""
"Deprecate :data:`typing.AnyStr`. In Python 3.16, it will be removed from "
"``typing.__all__``, and a :exc:`DeprecationWarning` will be emitted at "
"runtime when it is imported or accessed. It will be removed entirely in "
"Python 3.18. Use the new :ref:`type parameter syntax <type-params>` instead. "
"(Contributed by Michael The in :gh:`107116`.)"
msgstr ""
"Avveckla :data:`typing.AnyStr`. I Python 3.16 kommer den att tas bort från "
"``typing.__all__``, och en :exc:`DeprecationWarning` kommer att skickas ut "
"vid körning när den importeras eller används. Den kommer att tas bort helt i "
"Python 3.18. Använd den nya :ref:`typ-parametersyntaxen <type-params>` "
"istället. (Bidrag från Michael The i :gh:`107116`.)"

msgid ":mod:`wave`:"
msgstr ":mod:`våg`:"

msgid ""
"Deprecate the :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and :meth:"
"`~wave.Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` and :"
"class:`~wave.Wave_write` classes, to be removed in Python 3.15. (Contributed "
"by Victor Stinner in :gh:`105096`.)"
msgstr ""
"Avveckla metoderna :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, och :"
"meth:`~wave.Wave_read.getmarkers` i klasserna :class:`~wave.Wave_read` och :"
"class:`~wave.Wave_write`, tas bort i Python 3.15. (Bidrag från Victor "
"Stinner i :gh:`105096`.)"

msgid "Pending removal in Python 3.14"
msgstr "Väntar på borttagning i Python 3.14"

msgid ""
":mod:`argparse`: The *type*, *choices*, and *metavar* parameters of :class:`!"
"argparse.BooleanOptionalAction` are deprecated and will be removed in 3.14. "
"(Contributed by Nikita Sobolev in :gh:`92248`.)"
msgstr ""
":mod:`argparse`: Parametrarna *type*, *choices* och *metavar* i :class:`!"
"argparse.BooleanOptionalAction` är föråldrade och kommer att tas bort i "
"3.14. (Bidrag från Nikita Sobolev i :gh:`92248`.)"

msgid ""
":mod:`ast`: The following features have been deprecated in documentation "
"since Python 3.8, now cause a :exc:`DeprecationWarning` to be emitted at "
"runtime when they are accessed or used, and will be removed in Python 3.14:"
msgstr ""
":mod:`ast`: Följande funktioner har varit föråldrade i dokumentationen sedan "
"Python 3.8, orsakar nu en :exc:`DeprecationWarning` vid körning när de nås "
"eller används, och kommer att tas bort i Python 3.14:"

msgid ":class:`!ast.Num`"
msgstr ":class:`!ast.Num`"

msgid ":class:`!ast.Str`"
msgstr ":class:`!ast.Str`"

msgid ":class:`!ast.Bytes`"
msgstr ":class:`!ast.Bytes`"

msgid ":class:`!ast.NameConstant`"
msgstr ":class:`!ast.NamnKonstant`"

msgid ":class:`!ast.Ellipsis`"
msgstr ":class:`!ast.Ellipsis`"

msgid ""
"Use :class:`ast.Constant` instead. (Contributed by Serhiy Storchaka in :gh:"
"`90953`.)"
msgstr ""
"Använd :class:`ast.Constant` istället. (Bidrag från Serhiy Storchaka i :gh:"
"`90953`.)"

msgid ":mod:`asyncio`:"
msgstr ":mod:`asyncio`:"

msgid ""
"The child watcher classes :class:`!asyncio.MultiLoopChildWatcher`, :class:`!"
"asyncio.FastChildWatcher`, :class:`!asyncio.AbstractChildWatcher` and :class:"
"`!asyncio.SafeChildWatcher` are deprecated and will be removed in Python "
"3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""
"Barnvaktklasserna :class:`!asyncio.MultiLoopChildWatcher`, :class:`!asyncio."
"FastChildWatcher`, :class:`!asyncio.AbstractChildWatcher` och :class:`!"
"asyncio.SafeChildWatcher` är föråldrade och kommer att tas bort i Python "
"3.14. (Bidrag från Kumar Aditya i :gh:`94597`.)"

msgid ""
":func:`!asyncio.set_child_watcher`, :func:`!asyncio.get_child_watcher`, :"
"meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher` and :meth:`!"
"asyncio.AbstractEventLoopPolicy.get_child_watcher` are deprecated and will "
"be removed in Python 3.14. (Contributed by Kumar Aditya in :gh:`94597`.)"
msgstr ""
":func:`!asyncio.set_child_watcher`, :func:`!asyncio.get_child_watcher`, :"
"meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher` och :meth:`!"
"asyncio.AbstractEventLoopPolicy.get_child_watcher` är föråldrade och kommer "
"att tas bort i Python 3.14. (Bidrag från Kumar Aditya i :gh:`94597`.)"

msgid ""
"The :meth:`~asyncio.get_event_loop` method of the default event loop policy "
"now emits a :exc:`DeprecationWarning` if there is no current event loop set "
"and it decides to create one. (Contributed by Serhiy Storchaka and Guido van "
"Rossum in :gh:`100160`.)"
msgstr ""
"Metoden :meth:`~asyncio.get_event_loop` för standardpolicyn för "
"händelseslingor avger nu en :exc:`DeprecationWarning` om det inte finns "
"någon aktuell händelseslinga och den bestämmer sig för att skapa en. (Bidrag "
"från Serhiy Storchaka och Guido van Rossum i :gh:`100160`.)"

msgid ""
":mod:`collections.abc`: Deprecated :class:`!collections.abc.ByteString`. "
"Prefer :class:`!Sequence` or :class:`~collections.abc.Buffer`. For use in "
"typing, prefer a union, like ``bytes | bytearray``, or :class:`collections."
"abc.Buffer`. (Contributed by Shantanu Jain in :gh:`91896`.)"
msgstr ""
":mod:`collections.abc`: Föråldrad :class:`!collections.abc.ByteString`. "
"Föredra :class:`!Sequence` eller :class:`~collections.abc.Buffer`. För "
"användning vid typning, föredra en union, som ``bytes | bytearray``, eller :"
"class:`collections.abc.Buffer`. (Bidrag från Shantanu Jain i :gh:`91896`.)"

msgid ""
":mod:`email`: Deprecated the *isdst* parameter in :func:`email.utils."
"localtime`. (Contributed by Alan Williams in :gh:`72346`.)"
msgstr ""
":mod:`email`: Föråldrad *isdst* parameter i :func:`email.utils.localtime`. "
"(Bidrag från Alan Williams i :gh:`72346`.)"

msgid ":mod:`importlib.abc` deprecated classes:"
msgstr ":mod:`importlib.abc` föråldrade klasser:"

msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ":class:`!importlib.abc.ResourceReader`"

msgid ":class:`!importlib.abc.Traversable`"
msgstr ":class:`!importlib.abc.Traversable`"

msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ":class:`!importlib.abc.TraversableResources`"

msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr "Använd :mod:`importlib.resources.abc`-klasser istället:"

msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ":class:`importlib.resources.abc.Traversable`"

msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ":class:`importlib.resources.abc.TraversableResources`"

msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr "(Bidrag från Jason R. Coombs och Hugo van Kemenade i :gh:`93963`.)"

msgid ""
":mod:`itertools` had undocumented, inefficient, historically buggy, and "
"inconsistent support for copy, deepcopy, and pickle operations. This will be "
"removed in 3.14 for a significant reduction in code volume and maintenance "
"burden. (Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""
":mod:`itertools` hade odokumenterat, ineffektivt, historiskt buggigt och "
"inkonsekvent stöd för copy-, deepcopy- och pickle-operationer. Detta kommer "
"att tas bort i 3.14 för en betydande minskning av kodvolymen och "
"underhållsbördan. (Bidrag från Raymond Hettinger i :gh:`101588`.)"

msgid ""
":mod:`multiprocessing`: The default start method will change to a safer one "
"on Linux, BSDs, and other non-macOS POSIX platforms where ``'fork'`` is "
"currently the default (:gh:`84559`). Adding a runtime warning about this was "
"deemed too disruptive as the majority of code is not expected to care. Use "
"the :func:`~multiprocessing.get_context` or :func:`~multiprocessing."
"set_start_method` APIs to explicitly specify when your code *requires* "
"``'fork'``.  See :ref:`multiprocessing-start-methods`."
msgstr ""
":mod:`multiprocessing`: Standardstartmetoden kommer att ändras till en "
"säkrare metod på Linux, BSD och andra POSIX-plattformar som inte är MacOS "
"där ``'fork'`` för närvarande är standard (:gh:`84559`). Att lägga till en "
"körtidsvarning om detta ansågs vara alltför störande eftersom majoriteten av "
"koden inte förväntas bry sig. Använd API:erna :func:`~multiprocessing."
"get_context` eller :func:`~multiprocessing.set_start_method` för att "
"uttryckligen ange när din kod *kräver* ``'fork'``.  Se :ref:`multiprocessing-"
"start-methods`."

msgid ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` and :meth:`~pathlib."
"PurePath.relative_to`: passing additional arguments is deprecated."
msgstr ""
":mod:`pathlib`: :meth:`~pathlib.PurePath.is_relative_to` och :meth:`~pathlib."
"PurePath.relative_to`: att skicka ytterligare argument är föråldrat."

msgid ""
":mod:`pkgutil`: :func:`!pkgutil.find_loader` and :func:`!pkgutil.get_loader` "
"now raise :exc:`DeprecationWarning`; use :func:`importlib.util.find_spec` "
"instead. (Contributed by Nikita Sobolev in :gh:`97850`.)"
msgstr ""
":mod:`pkgutil`: :func:`!pkgutil.find_loader` och :func:`!pkgutil.get_loader` "
"ger nu upphov till :exc:`DeprecationWarning`; använd :func:`importlib.util."
"find_spec` istället. (Bidrag från Nikita Sobolev i :gh:`97850`.)"

msgid ":mod:`pty`:"
msgstr ":mod:`pty`:"

msgid "``master_open()``: use :func:`pty.openpty`."
msgstr "``master_open()``: använd :func:`pty.openpty`."

msgid "``slave_open()``: use :func:`pty.openpty`."
msgstr "```slave_open()``: använd :func:`pty.openpty`."

msgid ":data:`!version` and :data:`!version_info`."
msgstr ":data:`!version` och :data:`!version_info`."

msgid ""
":meth:`~sqlite3.Cursor.execute` and :meth:`~sqlite3.Cursor.executemany` if :"
"ref:`named placeholders <sqlite3-placeholders>` are used and *parameters* is "
"a sequence instead of a :class:`dict`."
msgstr ""
":meth:`~sqlite3.Cursor.execute` och :meth:`~sqlite3.Cursor.executemany` om :"
"ref:``named placeholders <sqlite3-placeholders>`` används och *parameters* "
"är en sekvens istället för en :class:`dict`."

msgid ""
":mod:`typing`: :class:`!typing.ByteString`, deprecated since Python 3.9, now "
"causes a :exc:`DeprecationWarning` to be emitted when it is used."
msgstr ""
":mod:`typing`: :class:`!typing.ByteString`, föråldrad sedan Python 3.9, "
"orsakar nu att en :exc:`DeprecationWarning` sänds ut när den används."

msgid ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` is deprecated: it was not "
"intended to be a public API. (Contributed by Gregory P. Smith in :gh:"
"`88168`.)"
msgstr ""
":mod:`urllib`: :class:`!urllib.parse.Quoter` is deprecated: det var inte "
"avsett att vara ett offentligt API. (Bidrag från Gregory P. Smith i :gh:"
"`88168`.)"

msgid "Pending removal in Python 3.15"
msgstr "Väntar på borttagning i Python 3.15"

msgid "The import system:"
msgstr "Importsystemet:"

msgid ""
"Setting :attr:`~module.__cached__` on a module while failing to set :attr:"
"`__spec__.cached <importlib.machinery.ModuleSpec.cached>` is deprecated. In "
"Python 3.15, :attr:`!__cached__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"Att ställa in :attr:`~module.__cached__` på en modul samtidigt som man "
"misslyckas med att ställa in :attr:`__spec__.cached <importlib.machinery."
"ModuleSpec.cached>` är föråldrat. I Python 3.15 kommer :attr:`!__cached__` "
"inte längre att anges eller tas i beaktande av importsystemet eller "
"standardbiblioteket. (:gh:`97879`)"

msgid ""
"Setting :attr:`~module.__package__` on a module while failing to set :attr:"
"`__spec__.parent <importlib.machinery.ModuleSpec.parent>` is deprecated. In "
"Python 3.15, :attr:`!__package__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"Att ställa in :attr:`~module.__package__` på en modul utan att ställa in :"
"attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>` är föråldrat. "
"I Python 3.15 kommer :attr:`!__package__` inte längre att anges eller tas i "
"beaktande av importsystemet eller standardbiblioteket. (:gh:`97879`)"

msgid ""
"The undocumented :func:`!ctypes.SetPointerType` function has been deprecated "
"since Python 3.13."
msgstr ""
"Den odokumenterade :func:`!ctypes.SetPointerType`-funktionen är föråldrad "
"sedan Python 3.13."

msgid ""
"The obsolete and rarely used :class:`~http.server.CGIHTTPRequestHandler` has "
"been deprecated since Python 3.13. No direct replacement exists. *Anything* "
"is better than CGI to interface a web server with a request handler."
msgstr ""
"Den föråldrade och sällan använda :class:`~http.server."
"CGIHTTPRequestHandler` har utgått sedan Python 3.13. Ingen direkt ersättare "
"finns. *Anything* är bättre än CGI för att koppla en webbserver till en "
"request-hanterare."

msgid ""
"The :option:`!--cgi` flag to the :program:`python -m http.server` command-"
"line interface has been deprecated since Python 3.13."
msgstr ""
"Flaggan :option:`!--cgi` till kommandoradsgränssnittet :program:`python -m "
"http.server` har utgått sedan Python 3.13."

msgid ":mod:`importlib`:"
msgstr ":mod:`importlib`:"

msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr "``load_module()`` metod: använd ``exec_module()`` istället."

msgid ":class:`locale`:"
msgstr ":class:`locale`:"

msgid ""
"The :func:`~locale.getdefaultlocale` function has been deprecated since "
"Python 3.11. Its removal was originally planned for Python 3.13 (:gh:"
"`90817`), but has been postponed to Python 3.15. Use :func:`~locale."
"getlocale`, :func:`~locale.setlocale`, and :func:`~locale.getencoding` "
"instead. (Contributed by Hugo van Kemenade in :gh:`111187`.)"
msgstr ""
"Funktionen :func:`~locale.getdefaultlocale` har varit föråldrad sedan Python "
"3.11. Dess borttagning var ursprungligen planerad till Python 3.13 (:gh:"
"`90817`), men har skjutits upp till Python 3.15. Använd :func:`~locale."
"getlocale`, :func:`~locale.setlocale`, och :func:`~locale.getencoding` "
"istället. (Bidrag från Hugo van Kemenade i :gh:`111187`.)"

msgid ""
":meth:`.PurePath.is_reserved` has been deprecated since Python 3.13. Use :"
"func:`os.path.isreserved` to detect reserved paths on Windows."
msgstr ""
":meth:`.PurePath.is_reserved` har utgått sedan Python 3.13. Använd :func:`os."
"path.isreserved` för att upptäcka reserverade sökvägar i Windows."

msgid ""
":func:`~platform.java_ver` has been deprecated since Python 3.13. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested."
msgstr ""
":func:`~platform.java_ver` har utgått sedan Python 3.13. Denna funktion är "
"endast användbar för Jython-stöd, har ett förvirrande API och är i stort "
"sett otestad."

msgid ":mod:`sysconfig`:"
msgstr ":mod:`sysconfig`:"

msgid ""
"The *check_home* argument of :func:`sysconfig.is_python_build` has been "
"deprecated since Python 3.12."
msgstr ""
"Argumentet *check_home* i :func:`sysconfig.is_python_build` har utgått sedan "
"Python 3.12."

msgid ":mod:`threading`:"
msgstr ":mod:`threading`:"

msgid ""
":func:`~threading.RLock` will take no arguments in Python 3.15. Passing any "
"arguments has been deprecated since Python 3.14, as the  Python version does "
"not permit any arguments, but the C version allows any number of positional "
"or keyword arguments, ignoring every argument."
msgstr ""
":func:`~threading.RLock` kommer inte att ta några argument i Python 3.15. "
"Att skicka några argument har varit föråldrat sedan Python 3.14, eftersom "
"Python-versionen inte tillåter några argument, men C-versionen tillåter "
"valfritt antal positionella eller nyckelordsargument och ignorerar varje "
"argument."

msgid ":mod:`types`:"
msgstr ":mod:`types`:"

msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.15. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. Kan komma att "
"tas bort i 3.15. (Bidrag från Nikita Sobolev i :gh:`101866`.)"

msgid ""
"The undocumented keyword argument syntax for creating :class:`~typing."
"NamedTuple` classes (for example, ``Point = NamedTuple(\"Point\", x=int, "
"y=int)``) has been deprecated since Python 3.13. Use the class-based syntax "
"or the functional syntax instead."
msgstr ""
"Den odokumenterade syntaxen för nyckelordsargument för att skapa :class:"
"`~typing.NamedTuple`-klasser (till exempel ``Point = NamedTuple(\"Point\", "
"x=int, y=int)``) har utgått sedan Python 3.13. Använd den klassbaserade "
"syntaxen eller den funktionella syntaxen istället."

msgid ""
"When using the functional syntax of :class:`~typing.TypedDict`\\s, failing "
"to pass a value to the *fields* parameter (``TD = TypedDict(\"TD\")``) or "
"passing ``None`` (``TD = TypedDict(\"TD\", None)``) has been deprecated "
"since Python 3.13. Use ``class TD(TypedDict): pass`` or ``TD = "
"TypedDict(\"TD\", {})`` to create a TypedDict with zero field."
msgstr ""
"När man använder den funktionella syntaxen för :class:`~typing."
"TypedDict`\\s, att inte skicka ett värde till parametern *fields* (``TD = "
"TypedDict(\"TD\")``) eller att skicka ``None`` (``TD = TypedDict(\"TD\", "
"None)``) har varit föråldrat sedan Python 3.13. Använd ``class "
"TD(TypedDict): pass`` eller ``TD = TypedDict(\"TD\", {})`` för att skapa en "
"TypedDict med noll fält."

msgid ""
"The :func:`typing.no_type_check_decorator` decorator function has been "
"deprecated since Python 3.13. After eight years in the :mod:`typing` module, "
"it has yet to be supported by any major type checker."
msgstr ""
"Dekoratorfunktionen :func:`typing.no_type_check_decorator` har varit "
"föråldrad sedan Python 3.13. Efter åtta år i modulen :mod:`typing` har den "
"ännu inte fått stöd av någon större typkontroll."

msgid ""
"The :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and :meth:`~wave."
"Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` and :class:"
"`~wave.Wave_write` classes have been deprecated since Python 3.13."
msgstr ""
"Metoderna :meth:`~wave.Wave_read.getmark`, :meth:`!setmark` och :meth:`~wave."
"Wave_read.getmarkers` i klasserna :class:`~wave.Wave_read` och :class:`~wave."
"Wave_write` har utgått sedan Python 3.13."

msgid ":mod:`zipimport`:"
msgstr ":mod:`zipimport`:"

msgid ""
":meth:`~zipimport.zipimporter.load_module` has been deprecated since Python "
"3.10. Use :meth:`~zipimport.zipimporter.exec_module` instead. (Contributed "
"by Jiahao Li in :gh:`125746`.)"
msgstr ""
":meth:`~zipimport.zipimporter.load_module` är föråldrad sedan Python 3.10. "
"Använd :meth:`~zipimport.zipimporter.exec_module` istället. (Bidrag från "
"Jiahao Li i :gh:`125746`.)"

msgid "Pending removal in Python 3.16"
msgstr "Väntar på borttagning i Python 3.16"

msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set :attr:"
"`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is deprecated. In "
"Python 3.16, :attr:`!__loader__` will cease to be set or taken into "
"consideration by the import system or the standard library."
msgstr ""
"Att ställa in :attr:`~module.__loader__` på en modul medan man misslyckas "
"med att ställa in :attr:`__spec__.loader <importlib.machinery.ModuleSpec."
"loader>` är föråldrat. I Python 3.16 kommer :attr:`!__loader__` inte längre "
"att anges eller tas i beaktande av importsystemet eller standardbiblioteket."

msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""
"Formatkoden ``'u'`` (:c:type:`wchar_t`) har utgått i dokumentation sedan "
"Python 3.3 och vid körning sedan Python 3.13. Använd istället formatkoden "
"``'w'`` (:c:type:`Py_UCS4`) för Unicode-tecken."

msgid ""
":func:`!asyncio.iscoroutinefunction` is deprecated and will be removed in "
"Python 3.16; use :func:`inspect.iscoroutinefunction` instead. (Contributed "
"by Jiahao Li and Kumar Aditya in :gh:`122875`.)"
msgstr ""
":func:`!asyncio.iscoroutinefunction` är föråldrad och kommer att tas bort i "
"Python 3.16; använd :func:`inspect.iscoroutinefunction` istället. (Bidrag "
"från Jiahao Li och Kumar Aditya i :gh:`122875`.)"

msgid ""
":mod:`asyncio` policy system is deprecated and will be removed in Python "
"3.16. In particular, the following classes and functions are deprecated:"
msgstr ""
":mod:`asyncio`-policysystemet är föråldrat och kommer att tas bort i Python "
"3.16. I synnerhet är följande klasser och funktioner föråldrade:"

msgid ":class:`asyncio.AbstractEventLoopPolicy`"
msgstr ":class:`asyncio.AbstractEventLoopPolicy`"

msgid ":class:`asyncio.DefaultEventLoopPolicy`"
msgstr ":class:`asyncio.DefaultEventLoopPolicy`"

msgid ":class:`asyncio.WindowsSelectorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsSelectorEventLoopPolicy`"

msgid ":class:`asyncio.WindowsProactorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsProactorEventLoopPolicy`"

msgid ":func:`asyncio.get_event_loop_policy`"
msgstr ":func:`asyncio.get_event_loop_policy`"

msgid ":func:`asyncio.set_event_loop_policy`"
msgstr ":func:`asyncio.set_event_loop_policy`"

msgid ""
"Users should use :func:`asyncio.run` or :class:`asyncio.Runner` with "
"*loop_factory* to use the desired event loop implementation."
msgstr ""
"Användare bör använda :func:`asyncio.run` eller :class:`asyncio.Runner` med "
"*loop_factory* för att använda önskad implementering av händelseslingan."

msgid "For example, to use :class:`asyncio.SelectorEventLoop` on Windows::"
msgstr ""
"Till exempel, för att använda :class:`asyncio.SelectorEventLoop` på Windows::"

msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"
msgstr ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"

msgid "(Contributed by Kumar Aditya in :gh:`127949`.)"
msgstr "(Bidrag från Kumar Aditya i :gh:`127949`.)"

msgid ":mod:`builtins`:"
msgstr ":mod:`builtins`:"

msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""
"Bitvis invertering på booleska typer, ``~True`` eller ``~False`` har varit "
"föråldrad sedan Python 3.12, eftersom det ger överraskande och ointuitiva "
"resultat (``-2`` och ``-1``). Använd ``not x`` istället för den logiska "
"negationen av en booleansk formel. I det sällsynta fallet att du behöver den "
"bitvisa inverteringen av det underliggande heltalet, konvertera till ``int`` "
"explicit (``~int(x)``)."

msgid ":mod:`functools`:"
msgstr ":mod:`functools`:"

msgid ""
"Calling the Python implementation of :func:`functools.reduce` with "
"*function* or *sequence* as keyword arguments has been deprecated since "
"Python 3.14."
msgstr ""
"Att anropa Python-implementationen av :func:`functools.reduce` med "
"*funktion* eller *sekvens* som nyckelordsargument är inte längre aktuellt "
"sedan Python 3.14."

msgid ":mod:`logging`:"
msgstr ":mod:`logging`:"

msgid ""
"Support for custom logging handlers with the *strm* argument is deprecated "
"and scheduled for removal in Python 3.16. Define handlers with the *stream* "
"argument instead. (Contributed by Mariusz Felisiak in :gh:`115032`.)"
msgstr ""
"Stöd för anpassade logghanterare med *strm*-argumentet är föråldrat och "
"planeras att tas bort i Python 3.16. Definiera hanterare med *stream*-"
"argumentet istället. (Bidrag från Mariusz Felisiak i :gh:`115032`.)"

msgid ""
"Valid extensions start with a '.' or are empty for :meth:`mimetypes."
"MimeTypes.add_type`. Undotted extensions are deprecated and will raise a :"
"exc:`ValueError` in Python 3.16. (Contributed by Hugo van Kemenade in :gh:"
"`75223`.)"
msgstr ""
"Giltiga tillägg börjar med en '.' eller är tomma för :meth:`mimetypes."
"MimeTypes.add_type`. Okommenterade tillägg är föråldrade och kommer att ge "
"upphov till ett :exc:`ValueError` i Python 3.16. (Bidrag från Hugo van "
"Kemenade i :gh:`75223`.)"

msgid ":mod:`shutil`:"
msgstr ":mod:`shutil`:"

msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is "
"now an alias of :exc:`RuntimeError`."
msgstr ""
"Undantaget :class:`!ExecError` har varit föråldrat sedan Python 3.14. Det "
"har inte använts av någon funktion i :mod:`!shutil` sedan Python 3.4, och är "
"nu ett alias för :exc:`RuntimeError`."

msgid ":mod:`symtable`:"
msgstr ":mod:`symtable`:"

msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""
"Metoden :meth:`Class.get_methods <symtable.Class.get_methods>` har utgått "
"sedan Python 3.14."

msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated "
"since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""
"Funktionen :func:`~sys._enablelegacywindowsfsencoding` är föråldrad sedan "
"Python 3.13. Använd miljövariabeln :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"istället."

msgid ""
"The :func:`!sysconfig.expand_makefile_vars` function has been deprecated "
"since Python 3.14. Use the ``vars`` argument of :func:`sysconfig.get_paths` "
"instead."
msgstr ""
"Funktionen :func:`!sysconfig.expand_makefile_vars` är föråldrad sedan Python "
"3.14. Använd ``vars``-argumentet i :func:`sysconfig.get_paths` istället."

msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr ""
"Det odokumenterade och oanvända attributet :attr:`!TarFile.tarfile` är "
"föråldrat sedan Python 3.13."

msgid "Pending removal in Python 3.17"
msgstr "Väntar på borttagning i Python 3.17"

msgid ""
"Before Python 3.14, old-style unions were implemented using the private "
"class ``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection "
"helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""
"Före Python 3.14 implementerades gamla tiders unioner med hjälp av den "
"privata klassen ``typing._UnionGenericAlias``. Denna klass behövs inte "
"längre för implementationen, men den har behållits för bakåtkompatibilitet, "
"med borttagning planerad till Python 3.17. Användare bör använda "
"dokumenterade introspektionshjälpmedel som :func:`typing.get_origin` och :"
"func:`typing.get_args` istället för att förlita sig på privata "
"implementationsdetaljer."

msgid "Pending removal in future versions"
msgstr "Avser att tas bort i framtida versioner"

msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr ""
"Följande API:er kommer att tas bort i framtiden, även om det för närvarande "
"inte finns något datum för när de ska tas bort."

msgid ":mod:`argparse`:"
msgstr ":mod:`argparse`:"

msgid ""
"Nesting argument groups and nesting mutually exclusive groups are deprecated."
msgstr ""
"Nesting av argumentgrupper och nesting av ömsesidigt uteslutande grupper är "
"avförda."

msgid ""
"Passing the undocumented keyword argument *prefix_chars* to :meth:`~argparse."
"ArgumentParser.add_argument_group` is now deprecated."
msgstr ""
"Att skicka det odokumenterade nyckelordsargumentet *prefix_chars* till :meth:"
"`~argparse.ArgumentParser.add_argument_group` är nu föråldrat."

msgid "The :class:`argparse.FileType` type converter is deprecated."
msgstr "Typomvandlaren :class:`argparse.FileType` är föråldrad."

msgid "``bool(NotImplemented)``."
msgstr "``bool(NotImplemented)``."

msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature "
"is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""
"Generatorer: ``throw(type, exc, tb)`` och ``athrow(type, exc, tb)`` "
"signaturen är förbrukad: använd ``throw(exc)`` och ``athrow(exc)`` istället, "
"signaturen med ett enda argument."

msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`.  In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""
"För närvarande accepterar Python numeriska literaler omedelbart följt av "
"nyckelord, till exempel ``0in x``, ``1or x``, ``0if 1else 2``.  Det tillåter "
"förvirrande och tvetydiga uttryck som ``[0x1for x in y]`` (som kan tolkas "
"som ``[0x1 for x in y]`` eller ``[0x1f or x in y]``).  En syntaxvarning "
"visas om den numeriska litteralen omedelbart följs av något av nyckelorden :"
"keyword:`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:"
"`in`, :keyword:`is` och :keyword:`or`.  I en framtida version kommer det att "
"ändras till ett syntaxfel. (:gh:`87999`)"

msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type: "
"these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""
"Stöd för metoderna ``__index__()`` och ``__int__()`` som returnerar icke-int-"
"typer: dessa metoder kommer att behöva returnera en instans av en strikt "
"underklass av :class:`int`."

msgid ""
"Support for ``__float__()`` method returning a strict subclass of :class:"
"`float`: these methods will be required to return an instance of :class:"
"`float`."
msgstr ""
"Stöd för metoden ``__float__()`` som returnerar en strikt underklass av :"
"class:`float`: dessa metoder måste returnera en instans av :class:`float`."

msgid ""
"Support for ``__complex__()`` method returning a strict subclass of :class:"
"`complex`: these methods will be required to return an instance of :class:"
"`complex`."
msgstr ""
"Stöd för metoden ``__complex__()`` som returnerar en strikt underklass av :"
"class:`complex`: dessa metoder måste returnera en instans av :class:"
"`complex`."

msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr "Delegering av ``int()`` till metoden ``__trunc__()``."

msgid ""
"Passing a complex number as the *real* or *imag* argument in the :func:"
"`complex` constructor is now deprecated; it should only be passed as a "
"single positional argument. (Contributed by Serhiy Storchaka in :gh:"
"`109218`.)"
msgstr ""
"Att skicka ett komplext tal som *real* eller *imag* argument i :func:"
"`complex`-konstruktorn är nu föråldrat; det bör endast skickas som ett enda "
"positionellt argument. (Bidrag från Serhiy Storchaka i :gh:`109218`.)"

msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and :data:`calendar."
"FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""
":mod:`calendar`: Konstanterna ``calendar.January`` och ``calendar.February`` "
"är föråldrade och ersätts av :data:`calendar.JANUARY` och :data:`calendar."
"FEBRUARY`. (Bidrag från Prince Roshan i :gh:`103636`.)"

msgid ""
":mod:`codecs`: use :func:`open` instead of :func:`codecs.open`. (:gh:"
"`133038`)"
msgstr ""
":mod:`codecs`: använd :func:`open` istället för :func:`codecs.open`. (:gh:"
"`133038`)"

msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ""
":attr:`codeobject.co_lnotab`: använd istället metoden :meth:`codeobject."
"co_lines`."

msgid ":mod:`datetime`:"
msgstr ":mod:`datumtid`:"

msgid ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcnow`: använd ``datetime.datetime."
"now(tz=datetime.UTC)``."

msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcfromtimestamp`: använd ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."

msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ":mod:`gettext`: Pluralvärdet måste vara ett heltal."

msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""
":func:`~importlib.util.cache_from_source` Parametern *debug_override* är "
"föråldrad: använd parametern *optimization* istället."

msgid ":mod:`importlib.metadata`:"
msgstr ":mod:`importlib.metadata`:"

msgid "``EntryPoints`` tuple interface."
msgstr "``EntryPoints`` tuple-gränssnitt."

msgid "Implicit ``None`` on return values."
msgstr "Implicit ``None`` på returvärden."

msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""
":mod:`logging`: metoden ``warn()`` har utgått sedan Python 3.3, använd :meth:"
"`~logging.warning` istället."

msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ""
":mod:`mailbox`: Användning av StringIO-ingång och textläge är föråldrad, "
"använd BytesIO och binärt läge istället."

msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ":mod:`os`: Anropar :func:`os.register_at_fork` i flertrådad process."

msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is "
"deprecated, use an exception instance."
msgstr ""
":class:`!pydoc.ErrorDuringImport`: Ett tupelvärde för parametern *exc_info* "
"är föråldrat, använd en undantagsinstans."

msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
":mod:`re`: Strängare regler tillämpas nu för numeriska gruppreferenser och "
"gruppnamn i reguljära uttryck.  Endast sekvenser av ASCII-siffror accepteras "
"nu som numeriska referenser.  Gruppnamnet i bytesmönster och "
"ersättningssträngar kan nu endast innehålla ASCII-bokstäver och siffror samt "
"understreck. (Bidrag från Serhiy Storchaka i :gh:`91760`.)"

msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ""
"modulerna :mod:`!sre_compile`, :mod:`!sre_constants` och :mod:`!sre_parse`."

msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."
msgstr ""
":mod:`shutil`: :func:`~shutil.rmtree`:s parameter *onerror* är föråldrad i "
"Python 3.12; använd istället parametern *onexc*."

msgid ":mod:`ssl` options and protocols:"
msgstr ":mod:`ssl` alternativ och protokoll:"

msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ":class:`ssl.SSLContext` utan protokollargument är föråldrad."

msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."

msgid "``ssl.OP_NO_SSL*`` options"
msgstr "``ssl.OP_NO_SSL*`` alternativ"

msgid "``ssl.OP_NO_TLS*`` options"
msgstr "``ssl.OP_NO_TLS*`` alternativ"

msgid "``ssl.PROTOCOL_SSLv3``"
msgstr "``ssl.PROTOCOL_SSLv3``"

msgid "``ssl.PROTOCOL_TLS``"
msgstr "``ssl.PROTOCOL_TLS``"

msgid "``ssl.PROTOCOL_TLSv1``"
msgstr "``ssl.PROTOCOL_TLSv1``"

msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr "``ssl.PROTOCOL_TLSv1_1``"

msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr "``ssl.PROTOCOL_TLSv1_2``"

msgid "``ssl.TLSVersion.SSLv3``"
msgstr "``ssl.TLSVersion.SSLv3``"

msgid "``ssl.TLSVersion.TLSv1``"
msgstr "``ssl.TLSVersion.TLSv1``"

msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr "``ssl.TLSVersion.TLSv1_1``"

msgid ":mod:`threading` methods:"
msgstr ":mod:`threading` metoder:"

msgid ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."
msgstr ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."

msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ""
":meth:`!threading.Event.isSet`: använd :meth:`~threading.Event.is_set`."

msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."
msgstr ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: "
"använd attributet :attr:`threading.Thread.daemon`."

msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."
msgstr ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: använd "
"attributet :attr:`threading.Thread.name`."

msgid ":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""
":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."

msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."

msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ":class:`typing.Text` (:gh:`92332`)."

msgid ""
"The internal class ``typing._UnionGenericAlias`` is no longer used to "
"implement :class:`typing.Union`. To preserve compatibility with users using "
"this private class, a compatibility shim will be provided until at least "
"Python 3.17. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""
"Den interna klassen ``typing._UnionGenericAlias`` används inte längre för "
"att implementera :class:`typing.Union`. För att bevara kompatibiliteten med "
"användare som använder denna privata klass, kommer en kompatibilitets-shim "
"att tillhandahållas åtminstone fram till Python 3.17. (Bidrag från Jelle "
"Zijlstra i :gh:`105499`.)"

msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""
":class:`unittest.IsolatedAsyncioTestCase`: det är förkastligt att returnera "
"ett värde som inte är ``None`` från ett testfall."

msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ""
":mod:`urllib.parse` föråldrade funktioner: :func:`~urllib.parse.urlparse` "
"istället"

msgid "``splitattr()``"
msgstr "``splitattr()``"

msgid "``splithost()``"
msgstr "``splithost()```"

msgid "``splitnport()``"
msgstr "``splitnport()``"

msgid "``splitpasswd()``"
msgstr "``splitpasswd()``"

msgid "``splitport()``"
msgstr "``splitport()```"

msgid "``splitquery()``"
msgstr "```splitquery()```"

msgid "``splittag()``"
msgstr "``splittag()``"

msgid "``splittype()``"
msgstr "```splittype()```"

msgid "``splituser()``"
msgstr "``splituser()```"

msgid "``splitvalue()``"
msgstr "``splitvärde()``"

msgid "``to_bytes()``"
msgstr "``to_bytes()```"

msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` bör inte göra partiella "
"skrivningar."

msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`~xml."
"etree.ElementTree.Element` is deprecated. In a future release it will always "
"return ``True``. Prefer explicit ``len(elem)`` or ``elem is not None`` tests "
"instead."
msgstr ""
":mod:`xml.etree.ElementTree`: Att testa sanningsvärdet för en :class:`~xml."
"etree.ElementTree.Element` är föråldrat. I en framtida version kommer det "
"alltid att returnera ``True``. Föredra istället explicita ``len(elem)`` "
"eller ``elem is not None`` tester."

msgid ""
":func:`sys._clear_type_cache` is deprecated: use :func:`sys."
"_clear_internal_caches` instead."
msgstr ""
":func:`sys._clear_type_cache` är föråldrad: använd :func:`sys."
"_clear_internal_caches` istället."

msgid "CPython Bytecode Changes"
msgstr "CPython Bytecode-ändringar"

msgid ""
"The oparg of :opcode:`YIELD_VALUE` is now ``1`` if the yield is part of a "
"yield-from or await, and ``0`` otherwise. The oparg of :opcode:`RESUME` was "
"changed to add a bit indicating if the except-depth is 1, which is needed to "
"optimize closing of generators. (Contributed by Irit Katriel in :gh:"
"`111354`.)"
msgstr ""
"Oparg för :opcode:`YIELD_VALUE` är nu ``1`` om yield är en del av en yield-"
"from eller await, och ``0`` annars. Oparg för :opcode:`RESUME` ändrades för "
"att lägga till en bit som anger om except-depth är 1, vilket behövs för att "
"optimera stängning av generatorer. (Bidrag från Irit Katriel i :gh:`111354`.)"

msgid "C API Changes"
msgstr "Ändringar i C API"

msgid ""
"Add the :ref:`PyMonitoring C API <c-api-monitoring>` for generating :pep:"
"`669` monitoring events:"
msgstr ""
"Lägg till :ref:`PyMonitoring C API <c-api-monitoring>` för att generera :pep:"
"`669` övervakningshändelser:"

msgid ":c:type:`PyMonitoringState`"
msgstr ":c:type:`PyMonitoringState`"

msgid ":c:func:`PyMonitoring_FirePyStartEvent`"
msgstr ":c:func:`PyMonitoring_FirePyStartEvent`"

msgid ":c:func:`PyMonitoring_FirePyResumeEvent`"
msgstr ":c:func:`PyMonitoring_FirePyResumeEvent`"

msgid ":c:func:`PyMonitoring_FirePyReturnEvent`"
msgstr ":c:func:`PyMonitoring_FirePyReturnEvent`"

msgid ":c:func:`PyMonitoring_FirePyYieldEvent`"
msgstr ":c:func:`PyMonitoring_FirePyYieldEvent`"

msgid ":c:func:`PyMonitoring_FireCallEvent`"
msgstr ":c:func:`PyMonitoring_FireCallEvent`"

msgid ":c:func:`PyMonitoring_FireLineEvent`"
msgstr ":c:func:`PyMonitoring_FireLineEvent`"

msgid ":c:func:`PyMonitoring_FireJumpEvent`"
msgstr ":c:func:`PyMonitoring_FireJumpEvent`"

msgid "``PyMonitoring_FireBranchEvent``"
msgstr "``PyMonitoring_FireBranchEvent``"

msgid ":c:func:`PyMonitoring_FireCReturnEvent`"
msgstr ":c:func:`PyMonitoring_FireCReturnEvent`"

msgid ":c:func:`PyMonitoring_FirePyThrowEvent`"
msgstr ":c:func:`PyMonitoring_FirePyThrowEvent`"

msgid ":c:func:`PyMonitoring_FireRaiseEvent`"
msgstr ":c:func:`PyMonitoring_FireRaiseEvent`"

msgid ":c:func:`PyMonitoring_FireCRaiseEvent`"
msgstr ":c:func:`PyMonitoring_FireCRaiseEvent`"

msgid ":c:func:`PyMonitoring_FireReraiseEvent`"
msgstr ":c:func:`PyMonitoring_FireReraiseEvent`"

msgid ":c:func:`PyMonitoring_FireExceptionHandledEvent`"
msgstr ":c:func:`PyMonitoring_FireExceptionHandledEvent`"

msgid ":c:func:`PyMonitoring_FirePyUnwindEvent`"
msgstr ":c:func:`PyMonitoring_FirePyUnwindEvent`"

msgid ":c:func:`PyMonitoring_FireStopIterationEvent`"
msgstr ":c:func:`PyMonitoring_FireStopIterationEvent`"

msgid ":c:func:`PyMonitoring_EnterScope`"
msgstr ":c:func:`PyMonitoring_EnterScope`"

msgid ":c:func:`PyMonitoring_ExitScope`"
msgstr ":c:func:`PyMonitoring_ExitScope`"

msgid "(Contributed by Irit Katriel in :gh:`111997`)."
msgstr "(Bidrag från Irit Katriel i :gh:`111997`)."

msgid ""
"Add :c:type:`PyMutex`, a lightweight mutex that occupies a single byte, and "
"the new :c:func:`PyMutex_Lock` and :c:func:`PyMutex_Unlock` functions. :c:"
"func:`!PyMutex_Lock` will release the :term:`GIL` (if currently held) if the "
"operation needs to block. (Contributed by Sam Gross in :gh:`108724`.)"
msgstr ""
"Lägg till :c:type:`PyMutex`, en lättviktig mutex som tar upp en enda byte, "
"och de nya funktionerna :c:func:`PyMutex_Lock` och :c:func:"
"`PyMutex_Unlock`. :c:func:`!PyMutex_Lock` kommer att släppa :term:`GIL` (om "
"den för närvarande hålls) om operationen behöver blockeras. (Bidrag från Sam "
"Gross i :gh:`108724`.)"

msgid ""
"Add the :ref:`PyTime C API <c-api-time>` to provide access to system clocks:"
msgstr ""
"Lägg till :ref:`PyTime C API <c-api-time>` för att ge åtkomst till "
"systemklockor:"

msgid ":c:type:`PyTime_t`."
msgstr ":c:type:`PyTime_t`."

msgid ":c:var:`PyTime_MIN` and :c:var:`PyTime_MAX`."
msgstr ":c:var:`PyTime_MIN` och :c:var:`PyTime_MAX`."

msgid ":c:func:`PyTime_AsSecondsDouble`."
msgstr ":c:func:`PyTime_AsSecondsDouble`."

msgid ":c:func:`PyTime_Monotonic`."
msgstr ":c:func:`PyTime_Monotonic`."

msgid ":c:func:`PyTime_MonotonicRaw`."
msgstr ":c:func:`PyTime_MonotonicRaw`."

msgid ":c:func:`PyTime_PerfCounter`."
msgstr ":c:func:`PyTime_PerfCounter`."

msgid ":c:func:`PyTime_PerfCounterRaw`."
msgstr ":c:func:`PyTime_PerfCounterRaw`."

msgid ":c:func:`PyTime_Time`."
msgstr ":c:func:`PyTime_Time`."

msgid ":c:func:`PyTime_TimeRaw`."
msgstr ":c:func:`PyTime_TimeRaw`."

msgid "(Contributed by Victor Stinner and Petr Viktorin in :gh:`110850`.)"
msgstr "(Bidrag från Victor Stinner och Petr Viktorin i :gh:`110850`.)"

msgid ""
"Add the :c:func:`PyDict_ContainsString` function with the same behavior as :"
"c:func:`PyDict_Contains`, but *key* is specified as a :c:expr:`const char*` "
"UTF-8 encoded bytes string, rather than a :c:expr:`PyObject*`. (Contributed "
"by Victor Stinner in :gh:`108314`.)"
msgstr ""
"Lägg till funktionen :c:func:`PyDict_ContainsString` med samma beteende som :"
"c:func:`PyDict_Contains`, men *key* anges som en :c:expr:`const char*` UTF-8-"
"kodad bytessträng, snarare än ett :c:expr:`PyObject*`. (Bidrag från Victor "
"Stinner i :gh:`108314`.)"

msgid ""
"Add the :c:func:`PyDict_GetItemRef` and :c:func:`PyDict_GetItemStringRef` "
"functions, which behave similarly to :c:func:`PyDict_GetItemWithError`, but "
"return a  :term:`strong reference` instead of a :term:`borrowed reference`. "
"Moreover, these functions return ``-1`` on error, removing the need to "
"check :c:func:`!PyErr_Occurred`. (Contributed by Victor Stinner in :gh:"
"`106004`.)"
msgstr ""
"Lägg till funktionerna :c:func:`PyDict_GetItemRef` och :c:func:"
"`PyDict_GetItemStringRef`, som beter sig på liknande sätt som :c:func:"
"`PyDict_GetItemWithError`, men returnerar en :term:`strong reference` "
"istället för en :term:`borrowed reference`. Dessutom returnerar dessa "
"funktioner ``-1`` vid fel, vilket tar bort behovet av att kontrollera :c:"
"func:`!PyErr_Occurred`. (Bidrag från Victor Stinner i :gh:`106004`.)"

msgid ""
"Add the :c:func:`PyDict_SetDefaultRef` function, which behaves similarly to :"
"c:func:`PyDict_SetDefault`, but returns a :term:`strong reference` instead "
"of a :term:`borrowed reference`. This function returns ``-1`` on error, "
"``0`` on insertion, and ``1`` if the key was already present in the "
"dictionary. (Contributed by Sam Gross in :gh:`112066`.)"
msgstr ""
"Lägg till funktionen :c:func:`PyDict_SetDefaultRef`, som beter sig på samma "
"sätt som :c:func:`PyDict_SetDefault`, men returnerar en :term:`strong "
"reference` istället för en :term:`borrowed reference`. Denna funktion "
"returnerar ``-1`` vid fel, ``0`` vid infogning och ``1`` om nyckeln redan "
"fanns i ordlistan. (Bidrag från Sam Gross i :gh:`112066`.)"

msgid ""
"Add the :c:func:`PyDict_Pop` and :c:func:`PyDict_PopString` functions to "
"remove a key from a dictionary and optionally return the removed value. This "
"is similar to :meth:`dict.pop`, though there is no default value, and :exc:"
"`KeyError` is not raised for missing keys. (Contributed by Stefan Behnel and "
"Victor Stinner in :gh:`111262`.)"
msgstr ""
"Lägg till funktionerna :c:func:`PyDict_Pop` och :c:func:`PyDict_PopString` "
"för att ta bort en nyckel från en ordbok och eventuellt returnera det "
"borttagna värdet. Detta liknar :meth:`dict.pop`, även om det inte finns "
"något standardvärde och :exc:`KeyError` inte tas upp för saknade nycklar. "
"(Bidrag från Stefan Behnel och Victor Stinner i :gh:`111262`.)"

msgid ""
"Add the :c:func:`PyMapping_GetOptionalItem` and :c:func:"
"`PyMapping_GetOptionalItemString` functions as alternatives to :c:func:"
"`PyObject_GetItem` and :c:func:`PyMapping_GetItemString` respectively. The "
"new functions do not raise :exc:`KeyError` if the requested key is missing "
"from the mapping. These variants are more convenient and faster if a missing "
"key should not be treated as a failure. (Contributed by Serhiy Storchaka in :"
"gh:`106307`.)"
msgstr ""
"Lägg till funktionerna :c:func:`PyMapping_GetOptionalItem` och :c:func:"
"`PyMapping_GetOptionalItemString` som alternativ till :c:func:"
"`PyObject_GetItem` respektive :c:func:`PyMapping_GetItemString`. De nya "
"funktionerna ger inte upphov till :exc:`KeyError` om den begärda nyckeln "
"saknas i mappningen. Dessa varianter är mer praktiska och snabbare om en "
"saknad nyckel inte ska behandlas som ett fel. (Bidrag från Serhiy Storchaka "
"i :gh:`106307`.)"

msgid ""
"Add the :c:func:`PyObject_GetOptionalAttr` and :c:func:"
"`PyObject_GetOptionalAttrString` functions as alternatives to  :c:func:"
"`PyObject_GetAttr` and :c:func:`PyObject_GetAttrString` respectively. The "
"new functions do not raise :exc:`AttributeError` if the requested attribute "
"is not found on the object. These variants are more convenient and faster if "
"the missing attribute should not be treated as a failure. (Contributed by "
"Serhiy Storchaka in :gh:`106521`.)"
msgstr ""
"Lägg till funktionerna :c:func:`PyObject_GetOptionalAttr` och :c:func:"
"`PyObject_GetOptionalAttrString` som alternativ till :c:func:"
"`PyObject_GetAttr` respektive :c:func:`PyObject_GetAttrString`. De nya "
"funktionerna ger inte upphov till :exc:`AttributeError` om det begärda "
"attributet inte finns på objektet. Dessa varianter är mer praktiska och "
"snabbare om det saknade attributet inte ska behandlas som ett fel. (Bidrag "
"från Serhiy Storchaka i :gh:`106521`.)"

msgid ""
"Add the :c:func:`PyErr_FormatUnraisable` function as an extension to :c:func:"
"`PyErr_WriteUnraisable` that allows customizing the warning message. "
"(Contributed by Serhiy Storchaka in :gh:`108082`.)"
msgstr ""
"Lägg till funktionen :c:func:`PyErr_FormatUnraisable` som ett tillägg till :"
"c:func:`PyErr_WriteUnraisable` som gör det möjligt att anpassa "
"varningsmeddelandet. (Bidrag från Serhiy Storchaka i :gh:`108082`.)"

msgid ""
"Add new functions that return a :term:`strong reference` instead of a :term:"
"`borrowed reference` for frame locals, globals, and builtins, as part of :"
"ref:`PEP 667 <whatsnew313-locals-semantics>`:"
msgstr ""
"Lägg till nya funktioner som returnerar en :term:`strong reference` istället "
"för en :term:`borrowed reference` för frame locals, globals och builtins, "
"som en del av :ref:`PEP 667 <whatsnew313-locals-semantics>`:"

msgid ":c:func:`PyEval_GetFrameBuiltins` replaces :c:func:`PyEval_GetBuiltins`"
msgstr ""
":c:func:`PyEval_GetFrameBuiltins` ersätter :c:func:`PyEval_GetBuiltins`"

msgid ":c:func:`PyEval_GetFrameGlobals` replaces :c:func:`PyEval_GetGlobals`"
msgstr ":c:func:`PyEval_GetFrameGlobals` ersätter :c:func:`PyEval_GetGlobals`"

msgid ":c:func:`PyEval_GetFrameLocals` replaces :c:func:`PyEval_GetLocals`"
msgstr ":c:func:`PyEval_GetFrameLocals` ersätter :c:func:`PyEval_GetLocals`"

msgid "(Contributed by Mark Shannon and Tian Gao in :gh:`74929`.)"
msgstr "(Bidrag från Mark Shannon och Tian Gao i :gh:`74929`.)"

msgid ""
"Add the :c:func:`Py_GetConstant` and :c:func:`Py_GetConstantBorrowed` "
"functions to get :term:`strong <strong reference>` or :term:`borrowed "
"<borrowed reference>` references to constants. For example, "
"``Py_GetConstant(Py_CONSTANT_ZERO)`` returns a strong reference to the "
"constant zero. (Contributed by Victor  Stinner in :gh:`115754`.)"
msgstr ""
"Lägg till funktionerna :c:func:`Py_GetConstant` och :c:func:"
"`Py_GetConstantBorrowed` för att få :term:`strong <strong reference>` eller :"
"term:`borrowed <borrowed reference>` referenser till konstanter. Till "
"exempel, ``Py_GetConstant(Py_CONSTANT_ZERO)`` returnerar en stark referens "
"till konstanten noll. (Bidrag från Victor Stinner i :gh:`115754`.)"

msgid ""
"Add the :c:func:`PyImport_AddModuleRef` function as a replacement for :c:"
"func:`PyImport_AddModule` that returns a :term:`strong reference` instead of "
"a :term:`borrowed reference`. (Contributed by Victor Stinner in :gh:"
"`105922`.)"
msgstr ""
"Lägg till funktionen :c:func:`PyImport_AddModuleRef` som ersättning för :c:"
"func:`PyImport_AddModule` som returnerar en :term:`strong reference` "
"istället för en :term:`borrowed reference`. (Bidrag från Victor Stinner i :"
"gh:`105922`.)"

msgid ""
"Add the :c:func:`Py_IsFinalizing` function to check whether the main Python "
"interpreter is :term:`shutting down <interpreter shutdown>`. (Contributed by "
"Victor Stinner in :gh:`108014`.)"
msgstr ""
"Lägg till funktionen :c:func:`Py_IsFinalizing` för att kontrollera om "
"huvudtolken för Python :term:`stänger ner <interpreter shutdown>`. (Bidrag "
"från Victor Stinner i :gh:`108014`.)"

msgid ""
"Add the :c:func:`PyList_GetItemRef` function as a replacement for :c:func:"
"`PyList_GetItem` that returns a :term:`strong reference` instead of a :term:"
"`borrowed reference`. (Contributed by Sam Gross in :gh:`114329`.)"
msgstr ""
"Lägg till funktionen :c:func:`PyList_GetItemRef` som ersättning för :c:func:"
"`PyList_GetItem` som returnerar en :term:`strong reference` istället för en :"
"term:`borrowed reference`. (Bidrag från Sam Gross i :gh:`114329`.)"

msgid ""
"Add the :c:func:`PyList_Extend` and :c:func:`PyList_Clear` functions, "
"mirroring the Python :meth:`!list.extend` and :meth:`!list.clear` methods. "
"(Contributed by Victor Stinner in :gh:`111138`.)"
msgstr ""
"Lägg till funktionerna :c:func:`PyList_Extend` och :c:func:`PyList_Clear`, "
"som speglar Pythons metoder :meth:`!list.extend` och :meth:`!list.clear`. "
"(Bidrag från Victor Stinner i :gh:`111138`.)"

msgid ""
"Add the :c:func:`PyLong_AsInt` function. It behaves similarly to :c:func:"
"`PyLong_AsLong`, but stores the result in a C :c:expr:`int` instead of a C :"
"c:expr:`long`. (Contributed by Victor Stinner in :gh:`108014`.)"
msgstr ""
"Lägg till funktionen :c:func:`PyLong_AsInt`. Den beter sig på liknande sätt "
"som :c:func:`PyLong_AsLong`, men lagrar resultatet i en C :c:expr:`int` "
"istället för en C :c:expr:`long`. (Bidrag från Victor Stinner i :gh:"
"`108014`.)"

msgid ""
"Add the :c:func:`PyLong_AsNativeBytes`, :c:func:`PyLong_FromNativeBytes`, "
"and :c:func:`PyLong_FromUnsignedNativeBytes` functions to simplify "
"converting between native integer types and Python :class:`int` objects. "
"(Contributed by Steve Dower in :gh:`111140`.)"
msgstr ""
"Lägg till funktionerna :c:func:`PyLong_AsNativeBytes`, :c:func:"
"`PyLong_FromNativeBytes` och :c:func:`PyLong_FromUnsignedNativeBytes` för "
"att förenkla konvertering mellan inbyggda heltalstyper och Python :class:"
"`int`-objekt. (Bidrag från Steve Dower i :gh:`111140`.)"

msgid ""
"Add :c:func:`PyModule_Add` function, which is similar to :c:func:"
"`PyModule_AddObjectRef` and :c:func:`PyModule_AddObject`, but always steals "
"a reference to the value. (Contributed by Serhiy Storchaka in :gh:`86493`.)"
msgstr ""
"Lägg till funktionen :c:func:`PyModule_Add`, som liknar :c:func:"
"`PyModule_AddObjectRef` och :c:func:`PyModule_AddObject`, men som alltid "
"stjäl en referens till värdet. (Bidrag från Serhiy Storchaka i :gh:`86493`.)"

msgid ""
"Add the :c:func:`PyObject_GenericHash` function that implements the default "
"hashing function of a Python object. (Contributed by Serhiy Storchaka in :gh:"
"`113024`.)"
msgstr ""
"Lägg till funktionen :c:func:`PyObject_GenericHash` som implementerar "
"standardhashfunktionen för ett Python-objekt. (Bidrag från Serhiy Storchaka "
"i :gh:`113024`.)"

msgid ""
"Add the :c:func:`Py_HashPointer` function to hash a raw pointer. "
"(Contributed by Victor Stinner in :gh:`111545`.)"
msgstr ""
"Lägg till funktionen :c:func:`Py_HashPointer` för att hasha en rå pekare. "
"(Bidrag från Victor Stinner i :gh:`111545`.)"

msgid ""
"Add the :c:func:`PyObject_VisitManagedDict` and :c:func:"
"`PyObject_ClearManagedDict` functions. which must be called by the traverse "
"and clear functions of a type using the :c:macro:`Py_TPFLAGS_MANAGED_DICT` "
"flag. The `pythoncapi-compat project`_ can be used to use these functions "
"with Python 3.11 and 3.12. (Contributed by Victor Stinner in :gh:`107073`.)"
msgstr ""
"Lägg till funktionerna :c:func:`PyObject_VisitManagedDict` och :c:func:"
"`PyObject_ClearManagedDict`. som måste anropas av funktionerna traverse och "
"clear för en typ som använder flaggan :c:macro:`Py_TPFLAGS_MANAGED_DICT`. "
"Projektet `pythoncapi-compat`_ kan användas för att använda dessa funktioner "
"med Python 3.11 och 3.12. (Bidrag från Victor Stinner i :gh:`107073`.)"

msgid ""
"Add the :c:func:`PyRefTracer_SetTracer` and :c:func:`PyRefTracer_GetTracer` "
"functions, which enable tracking object creation and destruction in the same "
"way that the :mod:`tracemalloc` module does. (Contributed by Pablo Galindo "
"in :gh:`93502`.)"
msgstr ""
"Lägg till funktionerna :c:func:`PyRefTracer_SetTracer` och :c:func:"
"`PyRefTracer_GetTracer`, som gör det möjligt att spåra skapande och "
"förstörelse av objekt på samma sätt som modulen :mod:`tracemalloc` gör. "
"(Bidrag från Pablo Galindo i :gh:`93502`.)"

msgid ""
"Add the :c:func:`PySys_AuditTuple` function as an alternative to :c:func:"
"`PySys_Audit` that takes event arguments as a Python :class:`tuple` object. "
"(Contributed by Victor Stinner in :gh:`85283`.)"
msgstr ""
"Lägg till funktionen :c:func:`PySys_AuditTuple` som ett alternativ till :c:"
"func:`PySys_Audit` som tar händelseargument som ett Python :class:`tuple`-"
"objekt. (Bidrag från Victor Stinner i :gh:`85283`.)"

msgid ""
"Add the :c:func:`PyThreadState_GetUnchecked()` function as an alternative "
"to :c:func:`PyThreadState_Get()` that doesn't kill the process with a fatal "
"error if it is ``NULL``. The caller is responsible for checking if the "
"result is ``NULL``. (Contributed by Victor Stinner in :gh:`108867`.)"
msgstr ""
"Lägg till funktionen :c:func:`PyThreadState_GetUnchecked()` som ett "
"alternativ till :c:func:`PyThreadState_Get()` som inte dödar processen med "
"ett fatalt fel om den är ``NULL``. Den som anropar är ansvarig för att "
"kontrollera om resultatet är ``NULL``. (Bidrag från Victor Stinner i :gh:"
"`108867`.)"

msgid ""
"Add the :c:func:`PyType_GetFullyQualifiedName` function to get the type's "
"fully qualified name. The module name is prepended if :attr:`type."
"__module__` is a string and is not equal to either ``'builtins'`` or "
"``'__main__'``. (Contributed by Victor Stinner in :gh:`111696`.)"
msgstr ""
"Lägg till funktionen :c:func:`PyType_GetFullyQualifiedName` för att hämta "
"typens fullständigt kvalificerade namn. Modulnamnet läggs till om :attr:"
"`type.__module__` är en sträng och inte är lika med antingen ``'builtins'`` "
"eller ``'__main__'``. (Bidrag från Victor Stinner i :gh:`111696`.)"

msgid ""
"Add the :c:func:`PyType_GetModuleName` function to get the type's module "
"name. This is equivalent to getting the :attr:`type.__module__` attribute. "
"(Contributed by Eric Snow and Victor Stinner in :gh:`111696`.)"
msgstr ""
"Lägg till funktionen :c:func:`PyType_GetModuleName` för att hämta typens "
"modulnamn. Detta motsvarar att hämta attributet :attr:`type.__module__`. "
"(Bidrag från Eric Snow och Victor Stinner i :gh:`111696`.)"

msgid ""
"Add the :c:func:`PyUnicode_EqualToUTF8AndSize` and :c:func:"
"`PyUnicode_EqualToUTF8` functions to compare a Unicode object with a :c:expr:"
"`const char*` UTF-8 encoded string and ``1`` if they are equal or ``0`` "
"otherwise. These functions do not raise exceptions. (Contributed by Serhiy "
"Storchaka in :gh:`110289`.)"
msgstr ""
"Lägg till funktionerna :c:func:`PyUnicode_EqualToUTF8AndSize` och :c:func:"
"`PyUnicode_EqualToUTF8` för att jämföra ett Unicode-objekt med en :c:expr:"
"`const char*` UTF-8-kodad sträng och ``1`` om de är lika eller ``0`` annars. "
"Dessa funktioner ger inte upphov till undantag. (Bidrag från Serhiy "
"Storchaka i :gh:`110289`.)"

msgid ""
"Add the :c:func:`PyWeakref_GetRef` function as an alternative to  :c:func:"
"`PyWeakref_GetObject` that returns a :term:`strong reference` or ``NULL`` if "
"the referent is no longer live. (Contributed by Victor Stinner in :gh:"
"`105927`.)"
msgstr ""
"Lägg till funktionen :c:func:`PyWeakref_GetRef` som ett alternativ till :c:"
"func:`PyWeakref_GetObject` som returnerar en :term:`strong reference` eller "
"``NULL`` om referenten inte längre är live. (Bidrag från Victor Stinner i :"
"gh:`105927`.)"

msgid "Add fixed variants of functions which silently ignore errors:"
msgstr "Lägg till fasta varianter av funktioner som tyst ignorerar fel:"

msgid ""
":c:func:`PyObject_HasAttrWithError` replaces :c:func:`PyObject_HasAttr`."
msgstr ""
":c:func:`PyObject_HasAttrWithError` ersätter :c:func:`PyObject_HasAttr`."

msgid ""
":c:func:`PyObject_HasAttrStringWithError` replaces :c:func:"
"`PyObject_HasAttrString`."
msgstr ""
":c:func:`PyObject_HasAttrStringWithError` ersätter :c:func:"
"`PyObject_HasAttrString`."

msgid ""
":c:func:`PyMapping_HasKeyWithError` replaces :c:func:`PyMapping_HasKey`."
msgstr ""
":c:func:`PyMapping_HasKeyWithError` ersätter :c:func:`PyMapping_HasKey`."

msgid ""
":c:func:`PyMapping_HasKeyStringWithError` replaces :c:func:"
"`PyMapping_HasKeyString`."
msgstr ""
":c:func:`PyMapping_HasKeyStringWithError` ersätter :c:func:"
"`PyMapping_HasKeyString`."

msgid ""
"The new functions return ``-1`` for errors and the standard ``1`` for true "
"and ``0`` for false."
msgstr ""
"De nya funktionerna returnerar ``-1`` för fel och standard ``1`` för sant "
"och ``0`` för falskt."

msgid "(Contributed by Serhiy Storchaka in :gh:`108511`.)"
msgstr "(Bidrag från Serhiy Storchaka i :gh:`108511`.)"

msgid "Changed C APIs"
msgstr "Ändrade C API:er"

msgid ""
"The *keywords* parameter of :c:func:`PyArg_ParseTupleAndKeywords` and :c:"
"func:`PyArg_VaParseTupleAndKeywords` now has type :c:expr:`char * const *` "
"in C and :c:expr:`const char * const *` in C++, instead of :c:expr:`char "
"**`. In C++, this makes these functions compatible with arguments of type :c:"
"expr:`const char * const *`, :c:expr:`const char **`, or :c:expr:`char * "
"const *` without an explicit type cast. In C, the functions only support "
"arguments of type :c:expr:`char * const *`. This can be overridden with the :"
"c:macro:`PY_CXX_CONST` macro. (Contributed by Serhiy Storchaka in :gh:"
"`65210`.)"
msgstr ""
"Parametern *keywords* i :c:func:`PyArg_ParseTupleAndKeywords` och :c:func:"
"`PyArg_VaParseTupleAndKeywords` har nu typen :c:expr:`char * const *` i C "
"och :c:expr:`const char * const *` i C++, istället för :c:expr:`char **`. I "
"C++ gör detta dessa funktioner kompatibla med argument av typen :c:expr:"
"`const char * const *`, :c:expr:`const char **` eller :c:expr:`char * const "
"*` utan en explicit typcast. I C stöder funktionerna endast argument av "
"typen :c:expr:`char * const *`. Detta kan åsidosättas med makrot :c:macro:"
"`PY_CXX_CONST`. (Bidrag från Serhiy Storchaka i :gh:`65210`.)"

msgid ""
":c:func:`PyArg_ParseTupleAndKeywords` now supports non-ASCII keyword "
"parameter names. (Contributed by Serhiy Storchaka in :gh:`110815`.)"
msgstr ""
":c:func:`PyArg_ParseTupleAndKeywords` stöder nu parameternamn för nyckelord "
"som inte är ASCII. (Bidrag från Serhiy Storchaka i :gh:`110815`.)"

msgid ""
"The :c:func:`!PyCode_GetFirstFree` function is now unstable API and is now "
"named :c:func:`PyUnstable_Code_GetFirstFree`. (Contributed by Bogdan "
"Romanyuk in :gh:`115781`.)"
msgstr ""
"Funktionen :c:func:`!PyCode_GetFirstFree` är nu ett instabilt API och heter "
"nu :c:func:`PyUnstable_Code_GetFirstFree`. (Bidrag från Bogdan Romanyuk i :"
"gh:`115781`.)"

msgid ""
"The :c:func:`PyDict_GetItem`, :c:func:`PyDict_GetItemString`, :c:func:"
"`PyMapping_HasKey`, :c:func:`PyMapping_HasKeyString`, :c:func:"
"`PyObject_HasAttr`, :c:func:`PyObject_HasAttrString`, and :c:func:"
"`PySys_GetObject` functions, each of which clears all errors which occurred "
"when calling them now reports these errors using :func:`sys.unraisablehook`. "
"You may replace them with other functions as recommended in the "
"documentation. (Contributed by Serhiy Storchaka in :gh:`106672`.)"
msgstr ""
"Funktionerna :c:func:`PyDict_GetItem`, :c:func:`PyDict_GetItemString`, :c:"
"func:`PyMapping_HasKey`, :c:func:`PyMapping_HasKeyString`, :c:func:"
"`PyObject_HasAttr`, :c:func:`PyObject_HasAttrString`, och :c:func:"
"`PySys_GetObject` funktioner, som var och en rensar alla fel som uppstod när "
"de anropades, rapporterar nu dessa fel med :func:`sys.unraisablehook`. Du "
"kan ersätta dem med andra funktioner enligt rekommendationerna i "
"dokumentationen. (Bidrag från Serhiy Storchaka i :gh:`106672`.)"

msgid ""
"Add support for the ``%T``, ``%#T``, ``%N`` and ``%#N`` formats to :c:func:"
"`PyUnicode_FromFormat`:"
msgstr ""
"Lägg till stöd för formaten ``%T``, ``%#T``, ``%N`` och ``%#N`` till :c:func:"
"`PyUnicode_FromFormat`:"

msgid "``%T``: Get the fully qualified name of an object type"
msgstr "``%T``: Hämta det fullständigt kvalificerade namnet på en objekttyp"

msgid "``%#T``: As above, but use a colon as the separator"
msgstr "``%#T``: Som ovan, men använd ett kolon som avgränsare"

msgid "``%N``: Get the fully qualified name of a type"
msgstr "``%N``: Hämta det fullständigt kvalificerade namnet på en typ"

msgid "``%#N``: As above, but use a colon as the separator"
msgstr "``%#N``: Som ovan, men använd ett kolon som separator"

msgid ""
"See :pep:`737` for more information. (Contributed by Victor Stinner in :gh:"
"`111696`.)"
msgstr ""
"Se :pep:`737` för mer information. (Bidrag från Victor Stinner i :gh:"
"`111696`.)"

msgid ""
"You no longer have to define the ``PY_SSIZE_T_CLEAN`` macro before "
"including :file:`Python.h` when using ``#`` formats in :ref:`format codes "
"<arg-parsing-string-and-buffers>`. APIs accepting the format codes always "
"use ``Py_ssize_t`` for ``#`` formats. (Contributed by Inada Naoki in :gh:"
"`104922`.)"
msgstr ""
"Du behöver inte längre definiera makrot ``PY_SSIZE_T_CLEAN`` innan du "
"inkluderar :file:`Python.h`` när du använder ``#`` format i :ref:"
"`formatkoder <arg-parsing-string-and-buffers>``. API:er som accepterar "
"formatkoderna använder alltid ``Py_ssize_t`` för ``#``-format. (Bidrag från "
"Inada Naoki i :gh:`104922`.)"

msgid ""
"If Python is built in :ref:`debug mode <debug-build>` or :option:`with "
"assertions <--with-assertions>`, :c:func:`PyTuple_SET_ITEM` and :c:func:"
"`PyList_SET_ITEM` now check the index argument with an assertion. "
"(Contributed by Victor Stinner in :gh:`106168`.)"
msgstr ""
"Om Python är byggt i :ref:`debugläge <debug-build>` eller :option:`med "
"assertions <--with-assertions>`, kontrollerar nu :c:func:`PyTuple_SET_ITEM` "
"och :c:func:`PyList_SET_ITEM` index-argumentet med en assertion. (Bidrag "
"från Victor Stinner i :gh:`106168`.)"

msgid "Limited C API Changes"
msgstr "Ändringar i API för begränsad C"

msgid "The following functions are now included in the Limited C API:"
msgstr "Följande funktioner ingår nu i det begränsade C API:et:"

msgid ":c:func:`PyMem_RawMalloc`"
msgstr ":c:func:`PyMem_RawMalloc`"

msgid ":c:func:`PyMem_RawCalloc`"
msgstr ":c:func:`PyMem_RawCalloc`"

msgid ":c:func:`PyMem_RawRealloc`"
msgstr ":c:func:`PyMem_RawRealloc`"

msgid ":c:func:`PyMem_RawFree`"
msgstr ":c:func:`PyMem_RawFree`"

msgid ":c:func:`PySys_Audit`"
msgstr ":c:func:`PySys_Audit`"

msgid ":c:func:`PySys_AuditTuple`"
msgstr ":c:func:`PySys_AuditTuple`"

msgid ":c:func:`PyType_GetModuleByDef`"
msgstr ":c:func:`PyType_GetModuleByDef`"

msgid ""
"(Contributed by Victor Stinner in :gh:`85283`, :gh:`85283`, and :gh:"
"`116936`.)"
msgstr ""
"(Bidrag från Victor Stinner i :gh:`85283`, :gh:`85283`, och :gh:`116936`.)"

msgid ""
"Python built with :option:`--with-trace-refs` (tracing references) now "
"supports the :ref:`Limited API <limited-c-api>`. (Contributed by Victor "
"Stinner in :gh:`108634`.)"
msgstr ""
"Python byggt med :option:`--with-trace-refs` (spårning av referenser) stöder "
"nu :ref:`Limited API <limited-c-api>`. (Bidrag från Victor Stinner i :gh:"
"`108634`.)"

msgid "Removed C APIs"
msgstr "Borttagna C API:er"

msgid ""
"Remove several functions, macros, variables, etc with names prefixed by "
"``_Py`` or ``_PY`` (which are considered private). If your project is "
"affected  by one of these removals and you believe that the removed API "
"should remain available, please :ref:`open a new issue <using-the-tracker>` "
"to request a public C API and add ``cc: @vstinner`` to the issue to notify "
"Victor Stinner. (Contributed by Victor Stinner in :gh:`106320`.)"
msgstr ""
"Ta bort flera funktioner, makron, variabler, etc med namn som inleds med "
"``_Py`` eller ``_PY`` (som anses vara privata). Om ditt projekt påverkas av "
"en av dessa borttagningar och du anser att det borttagna API:et bör förbli "
"tillgängligt, vänligen :ref:``öppna en ny fråga <using-the-tracker>` för att "
"begära ett offentligt C API och lägg till ``cc: @vstinner`` till frågan för "
"att meddela Victor Stinner. (Bidrag från Victor Stinner i :gh:`106320`.)"

msgid ""
"Remove old buffer protocols deprecated in Python 3.0. Use :ref:"
"`bufferobjects` instead."
msgstr ""
"Ta bort gamla buffertprotokoll som är föråldrade i Python 3.0. Använd :ref:"
"`bufferobjects` istället."

msgid ""
":c:func:`!PyObject_CheckReadBuffer`: Use :c:func:`PyObject_CheckBuffer` to "
"test whether the object supports the buffer protocol. Note that :c:func:"
"`PyObject_CheckBuffer` doesn't guarantee that :c:func:`PyObject_GetBuffer` "
"will succeed. To test if the object is actually readable, see the next "
"example of :c:func:`PyObject_GetBuffer`."
msgstr ""
":c:func:`!PyObject_CheckReadBuffer`: Använd :c:func:`PyObject_CheckBuffer` "
"för att testa om objektet stöder buffertprotokollet. Observera att :c:func:"
"`PyObject_CheckBuffer` inte garanterar att :c:func:`PyObject_GetBuffer` "
"kommer att lyckas. För att testa om objektet faktiskt är läsbart, se nästa "
"exempel på :c:func:`PyObject_GetBuffer`."

msgid ""
":c:func:`!PyObject_AsCharBuffer`, :c:func:`!PyObject_AsReadBuffer`: Use :c:"
"func:`PyObject_GetBuffer` and :c:func:`PyBuffer_Release` instead:"
msgstr ""
":c:func:`!PyObject_AsCharBuffer`, :c:func:`!PyObject_AsReadBuffer`: Använd :"
"c:func:`PyObject_GetBuffer` och :c:func:`PyBuffer_Release` istället:"

msgid ""
"Py_buffer view;\n"
"if (PyObject_GetBuffer(obj, &view, PyBUF_SIMPLE) < 0) {\n"
"    return NULL;\n"
"}\n"
"// Use `view.buf` and `view.len` to read from the buffer.\n"
"// You may need to cast buf as `(const char*)view.buf`.\n"
"PyBuffer_Release(&view);"
msgstr ""
"Py_buffer vy;\n"
"if (PyObject_GetBuffer(obj, &view, PyBUF_SIMPLE) < 0) {\n"
"    returnera NULL;\n"
"}\n"
"// Använd `view.buf` och `view.len` för att läsa från bufferten.\n"
"// Du kan behöva casta buf som `(const char*)view.buf`.\n"
"PyBuffer_Release(&view);"

msgid ""
":c:func:`!PyObject_AsWriteBuffer`: Use :c:func:`PyObject_GetBuffer` and :c:"
"func:`PyBuffer_Release` instead:"
msgstr ""
":c:func:`!PyObject_AsWriteBuffer`: Använd :c:func:`PyObject_GetBuffer` och :"
"c:func:`PyBuffer_Release` istället:"

msgid ""
"Py_buffer view;\n"
"if (PyObject_GetBuffer(obj, &view, PyBUF_WRITABLE) < 0) {\n"
"    return NULL;\n"
"}\n"
"// Use `view.buf` and `view.len` to write to the buffer.\n"
"PyBuffer_Release(&view);"
msgstr ""
"Py_buffer vy;\n"
"if (PyObject_GetBuffer(obj, &view, PyBUF_WRITABLE) < 0) {\n"
"    returnera NULL;\n"
"}\n"
"// Använd `view.buf` och `view.len` för att skriva till bufferten.\n"
"PyBuffer_Release(&view);"

msgid "(Contributed by Inada Naoki in :gh:`85275`.)"
msgstr "(Bidrag från Inada Naoki i :gh:`85275`.)"

msgid "Remove various functions deprecated in Python 3.9:"
msgstr "Ta bort olika funktioner som är föråldrade i Python 3.9:"

msgid ""
":c:func:`!PyEval_CallObject`, :c:func:`!PyEval_CallObjectWithKeywords`: Use :"
"c:func:`PyObject_CallNoArgs` or :c:func:`PyObject_Call` instead."
msgstr ""
":c:func:`!PyEval_CallObject`, :c:func:`!PyEval_CallObjectWithKeywords`: "
"Använd :c:func:`PyObject_CallNoArgs` eller :c:func:`PyObject_Call` istället."

msgid ""
"In :c:func:`PyObject_Call`, positional arguments must be a :class:`tuple` "
"and must not be ``NULL``, and keyword arguments must be a :class:`dict` or "
"``NULL``, whereas the removed functions checked argument types and accepted "
"``NULL`` positional and keyword arguments. To replace "
"``PyEval_CallObjectWithKeywords(func, NULL, kwargs)`` with :c:func:"
"`PyObject_Call`, pass an empty tuple as positional arguments using :c:func:"
"`PyTuple_New(0) <PyTuple_New>`."
msgstr ""
"I :c:func:`PyObject_Call` måste positionella argument vara en :class:`tuple` "
"och får inte vara ``NULL``, och nyckelordsargument måste vara en :class:"
"`dict` eller ``NULL``, medan de borttagna funktionerna kontrollerade "
"argumenttyper och accepterade ``NULL`` positionella och nyckelordsargument. "
"För att ersätta ``PyEval_CallObjectWithKeywords(func, NULL, kwargs)`` med :c:"
"func:`PyObject_Call`, skicka en tom tupel som positionella argument med :c:"
"func:`PyTuple_New(0) <PyTuple_New>`."

msgid ""
":c:func:`!PyEval_CallFunction`: Use :c:func:`PyObject_CallFunction` instead."
msgstr ""
":c:func:`!PyEval_CallFunction`: Använd :c:func:`PyObject_CallFunction` "
"istället."

msgid ""
":c:func:`!PyEval_CallMethod`: Use :c:func:`PyObject_CallMethod` instead."
msgstr ""
":c:func:`!PyEval_CallMethod`: Använd :c:func:`PyObject_CallMethod` istället."

msgid ":c:func:`!PyCFunction_Call`: Use :c:func:`PyObject_Call` instead."
msgstr ":c:func:`!PyCFunction_Call`: Använd :c:func:`PyObject_Call` istället."

msgid "(Contributed by Victor Stinner in :gh:`105107`.)"
msgstr "(Bidrag från Victor Stinner i :gh:`105107`.)"

msgid ""
"Remove the following old functions to configure the Python initialization, "
"deprecated in Python 3.11:"
msgstr ""
"Ta bort följande gamla funktioner för att konfigurera Python-"
"initialiseringen, föråldrade i Python 3.11:"

msgid ""
":c:func:`!PySys_AddWarnOptionUnicode`: Use :c:member:`PyConfig.warnoptions` "
"instead."
msgstr ""
":c:func:`!PySys_AddWarnOptionUnicode`: Använd :c:member:`PyConfig."
"warnoptions` istället."

msgid ""
":c:func:`!PySys_AddWarnOption`: Use :c:member:`PyConfig.warnoptions` instead."
msgstr ""
":c:func:`!PySys_AddWarnOption`: Använd :c:member:`PyConfig.warnoptions` "
"istället."

msgid ":c:func:`!PySys_AddXOption`: Use :c:member:`PyConfig.xoptions` instead."
msgstr ""
":c:func:`!PySys_AddXOption`: Använd :c:member:`PyConfig.xoptions` istället."

msgid ""
":c:func:`!PySys_HasWarnOptions`: Use :c:member:`PyConfig.xoptions` instead."
msgstr ""
":c:func:`!PySys_HasWarnOptions`: Använd :c:member:`PyConfig.xoptions` "
"istället."

msgid ""
":c:func:`!PySys_SetPath`: Set :c:member:`PyConfig.module_search_paths` "
"instead."
msgstr ""
":c:func:`!PySys_SetPath`: Ställ in :c:member:`PyConfig.module_search_paths` "
"istället."

msgid ""
":c:func:`!Py_SetPath`: Set :c:member:`PyConfig.module_search_paths` instead."
msgstr ""
":c:func:`!Py_SetPath`: Ställ in :c:member:`PyConfig.module_search_paths` "
"istället."

msgid ""
":c:func:`!Py_SetStandardStreamEncoding`: Set :c:member:`PyConfig."
"stdio_encoding` instead, and set also maybe :c:member:`PyConfig."
"legacy_windows_stdio` (on Windows)."
msgstr ""
":c:func:`!Py_SetStandardStreamEncoding`: Ställ in :c:member:`PyConfig."
"stdio_encoding` istället, och ställ kanske också in :c:member:`PyConfig."
"legacy_windows_stdio` (på Windows)."

msgid ""
":c:func:`!_Py_SetProgramFullPath`: Set :c:member:`PyConfig.executable` "
"instead."
msgstr ""
":c:func:`!_Py_SetProgramFullPath`: Ställ in :c:member:`PyConfig.executable` "
"istället."

msgid ""
"Use the new :c:type:`PyConfig` API of the :ref:`Python Initialization "
"Configuration <init-config>` instead (:pep:`587`), added to Python 3.8. "
"(Contributed by Victor Stinner in :gh:`105145`.)"
msgstr ""
"Använd istället det nya :c:type:`PyConfig` API:et i :ref:`Python "
"Initialization Configuration <init-config>` (:pep:`587`), som tillkommit i "
"Python 3.8. (Bidrag från Victor Stinner i :gh:`105145`.)"

msgid ""
"Remove :c:func:`!PyEval_AcquireLock` and :c:func:`!PyEval_ReleaseLock` "
"functions, deprecated in Python 3.2. They didn't update the current thread "
"state. They can be replaced with:"
msgstr ""
"Ta bort funktionerna :c:func:`!PyEval_AcquireLock` och :c:func:`!"
"PyEval_ReleaseLock`, föråldrade i Python 3.2. De uppdaterade inte det "
"aktuella trådtillståndet. De kan ersättas med:"

msgid ":c:func:`PyEval_SaveThread` and :c:func:`PyEval_RestoreThread`;"
msgstr ":c:func:`PyEval_SaveThread` och :c:func:`PyEval_RestoreThread`;"

msgid ""
"low-level :c:func:`PyEval_AcquireThread` and :c:func:`PyEval_RestoreThread`;"
msgstr ""
"lågnivå :c:func:`PyEval_AcquireThread` och :c:func:`PyEval_RestoreThread`;"

msgid "or :c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release`."
msgstr "eller :c:func:`PyGILState_Ensure` och :c:func:`PyGILState_Release`."

msgid "(Contributed by Victor Stinner in :gh:`105182`.)"
msgstr "(Bidrag från Victor Stinner i :gh:`105182`.)"

msgid ""
"Remove the :c:func:`!PyEval_ThreadsInitialized` function, deprecated in "
"Python 3.9. Since Python 3.7, :c:func:`!Py_Initialize` always creates the "
"GIL: calling :c:func:`!PyEval_InitThreads` does nothing and :c:func:`!"
"PyEval_ThreadsInitialized` always returns non-zero. (Contributed by Victor "
"Stinner in :gh:`105182`.)"
msgstr ""
"Ta bort funktionen :c:func:`!PyEval_ThreadsInitialized`, föråldrad i Python "
"3.9. Sedan Python 3.7 skapar :c:func:`!Py_Initialize` alltid GIL: att "
"anropa :c:func:`!PyEval_InitThreads` gör ingenting och :c:func:`!"
"PyEval_ThreadsInitialized` returnerar alltid icke-noll. (Bidrag från Victor "
"Stinner i :gh:`105182`.)"

msgid ""
"Remove the :c:func:`!_PyInterpreterState_Get` alias to :c:func:"
"`PyInterpreterState_Get()` which was kept for backward compatibility with "
"Python 3.8. The `pythoncapi-compat project`_ can be used to get :c:func:"
"`PyInterpreterState_Get()` on Python 3.8 and older. (Contributed by Victor "
"Stinner in :gh:`106320`.)"
msgstr ""
"Ta bort :c:func:`!_PyInterpreterState_Get`-aliaset till :c:func:"
"`PyInterpreterState_Get()` som behölls för bakåtkompatibilitet med Python "
"3.8. Projektet `pythoncapi-compat`_ kan användas för att få :c:func:"
"`PyInterpreterState_Get()` på Python 3.8 och äldre. (Bidrag från Victor "
"Stinner i :gh:`106320`.)"

msgid ""
"Remove the private :c:func:`!_PyObject_FastCall` function: use :c:func:`!"
"PyObject_Vectorcall` which is available since Python 3.8 (:pep:`590`). "
"(Contributed by Victor Stinner in :gh:`106023`.)"
msgstr ""
"Ta bort den privata funktionen :c:func:`!_PyObject_FastCall`: använd :c:func:"
"`!PyObject_Vectorcall` som är tillgänglig sedan Python 3.8 (:pep:`590`). "
"(Bidrag från Victor Stinner i :gh:`106023`.)"

msgid ""
"Remove the ``cpython/pytime.h`` header file, which only contained private "
"functions. (Contributed by Victor Stinner in :gh:`106316`.)"
msgstr ""
"Ta bort huvudfilen ``cpython/pytime.h``, som endast innehöll privata "
"funktioner. (Bidrag från Victor Stinner i :gh:`106316`.)"

msgid ""
"Remove the undocumented ``PY_TIMEOUT_MAX`` constant from the limited C API. "
"(Contributed by Victor Stinner in :gh:`110014`.)"
msgstr ""
"Ta bort den odokumenterade konstanten ``PY_TIMEOUT_MAX`` från det begränsade "
"C API:et. (Bidrag från Victor Stinner i :gh:`110014`.)"

msgid ""
"Remove the old trashcan macros ``Py_TRASHCAN_SAFE_BEGIN`` and "
"``Py_TRASHCAN_SAFE_END``. Replace both with the new macros "
"``Py_TRASHCAN_BEGIN`` and ``Py_TRASHCAN_END``. (Contributed by Irit Katriel "
"in :gh:`105111`.)"
msgstr ""
"Ta bort de gamla papperskorgsmakrot ``Py_TRASHCAN_SAFE_BEGIN`` och "
"``Py_TRASHCAN_SAFE_END``. Ersätt båda med de nya makrona "
"``Py_TRASHCAN_BEGIN`` och ``Py_TRASHCAN_END``. (Bidrag från Irit Katriel i :"
"gh:`105111`.)"

msgid "Deprecated C APIs"
msgstr "Föråldrade C API:er"

msgid "Deprecate old Python initialization functions:"
msgstr "Avveckla gamla Python-initialiseringsfunktioner:"

msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and :data:`!"
"warnings.filters` instead."
msgstr ""
":c:func:`PySys_ResetWarnOptions`: Rensa :data:`sys.warnoptions` och :data:`!"
"warnings.filters` istället."

msgid ":c:func:`Py_GetExecPrefix`: Get :data:`sys.exec_prefix` instead."
msgstr ":c:func:`Py_GetExecPrefix`: Hämta :data:`sys.exec_prefix` istället."

msgid ":c:func:`Py_GetPath`: Get :data:`sys.path` instead."
msgstr ":c:func:`Py_GetPath`: Hämta :data:`sys.path` istället."

msgid ":c:func:`Py_GetPrefix`: Get :data:`sys.prefix` instead."
msgstr ":c:func:`Py_GetPrefix`: Hämta :data:`sys.prefix` istället."

msgid ":c:func:`Py_GetProgramFullPath`: Get :data:`sys.executable` instead."
msgstr ""
":c:func:`Py_GetProgramFullPath`: Hämta :data:`sys.executable` istället."

msgid ":c:func:`Py_GetProgramName`: Get :data:`sys.executable` instead."
msgstr ":c:func:`Py_GetProgramName`: Hämta :data:`sys.executable` istället."

msgid ""
":c:func:`Py_GetPythonHome`: Get :c:member:`PyConfig.home` or the :envvar:"
"`PYTHONHOME` environment variable instead."
msgstr ""
":c:func:`Py_GetPythonHome`: Hämta :c:member:`PyConfig.home` eller "
"miljövariabeln :envvar:`PYTHONHOME` istället."

msgid "(Contributed by Victor Stinner in :gh:`105145`.)"
msgstr "(Bidrag från Victor Stinner i :gh:`105145`.)"

msgid ""
":term:`Soft deprecate <soft deprecated>` the :c:func:`PyEval_GetBuiltins`, :"
"c:func:`PyEval_GetGlobals`, and :c:func:`PyEval_GetLocals` functions, which "
"return a :term:`borrowed reference`. (Soft deprecated as part of :pep:`667`.)"
msgstr ""
":term:`Soft deprecate <soft deprecated>` funktionerna :c:func:"
"`PyEval_GetBuiltins`, :c:func:`PyEval_GetGlobals`, och :c:func:"
"`PyEval_GetLocals`, som returnerar en :term:`lånad referens`. (Mjukt "
"föråldrad som en del av :pep:`667`.)"

msgid ""
"Deprecate the :c:func:`PyImport_ImportModuleNoBlock` function, which is just "
"an alias to :c:func:`PyImport_ImportModule` since Python 3.3. (Contributed "
"by Victor Stinner in :gh:`105396`.)"
msgstr ""
"Avveckla funktionen :c:func:`PyImport_ImportModuleNoBlock`, som bara är ett "
"alias till :c:func:`PyImport_ImportModule` sedan Python 3.3. (Bidrag från "
"Victor Stinner i :gh:`105396`.)"

msgid ""
":term:`Soft deprecate <soft deprecated>` the :c:func:`PyModule_AddObject` "
"function. It should be replaced with :c:func:`PyModule_Add` or :c:func:"
"`PyModule_AddObjectRef`. (Contributed by Serhiy Storchaka in :gh:`86493`.)"
msgstr ""
":term:`Soft deprecate <soft deprecated>` funktionen :c:func:"
"`PyModule_AddObject`. Den bör ersättas med :c:func:`PyModule_Add` eller :c:"
"func:`PyModule_AddObjectRef`. (Bidrag från Serhiy Storchaka i :gh:`86493`.)"

msgid ""
"Deprecate the old ``Py_UNICODE`` and ``PY_UNICODE_TYPE`` types and the :c:"
"macro:`!Py_UNICODE_WIDE` define. Use the :c:type:`wchar_t` type directly "
"instead. Since Python 3.3, ``Py_UNICODE`` and ``PY_UNICODE_TYPE`` are just "
"aliases to :c:type:`!wchar_t`. (Contributed by Victor Stinner in :gh:"
"`105156`.)"
msgstr ""
"Utgå från de gamla typerna ``Py_UNICODE`` och ``PY_UNICODE_TYPE`` och :c:"
"macro:`!Py_UNICODE_WIDE`-definitionen. Använd typen :c:type:`wchar_t` direkt "
"istället. Sedan Python 3.3 är ``Py_UNICODE`` och ``PY_UNICODE_TYPE`` bara "
"alias till :c:type:`!wchar_t`. (Bidrag från Victor Stinner i :gh:`105156`.)"

msgid ""
"Deprecate the :c:func:`PyWeakref_GetObject` and :c:func:"
"`PyWeakref_GET_OBJECT` functions, which return a :term:`borrowed reference`. "
"Replace them with the new :c:func:`PyWeakref_GetRef` function, which returns "
"a :term:`strong reference`. The `pythoncapi-compat project`_ can be used to "
"get :c:func:`PyWeakref_GetRef` on Python 3.12 and older. (Contributed by "
"Victor Stinner in :gh:`105927`.)"
msgstr ""
"Avveckla funktionerna :c:func:`PyWeakref_GetObject` och :c:func:"
"`PyWeakref_GET_OBJECT`, som returnerar en :term:`lånad referens`. Ersätt dem "
"med den nya funktionen :c:func:`PyWeakref_GetRef`, som returnerar en :term:"
"`strong reference`. Projektet `pythoncapi-compat`_ kan användas för att få :"
"c:func:`PyWeakref_GetRef` på Python 3.12 och äldre. (Bidrag från Victor "
"Stinner i :gh:`105927`.)"

msgid ""
"The ``ma_version_tag`` field in :c:type:`PyDictObject` for extension modules "
"(:pep:`699`; :gh:`101193`)."
msgstr ""
"Fältet ``ma_version_tag`` i :c:type:`PyDictObject` för tilläggsmoduler (:pep:"
"`699`; :gh:`101193``)."

msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases (:gh:`95388`)."
msgstr ""
"Skapar :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` med mutabla "
"baser (:gh:`95388`)."

msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use :c:func:"
"`PyImport_ImportModule` instead."
msgstr ""
":c:func:`PyImport_ImportModuleNoBlock`: Använd :c:func:"
"`PyImport_ImportModule` istället."

msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use :c:"
"func:`PyWeakref_GetRef` instead. The `pythoncapi-compat project <https://"
"github.com/python/pythoncapi-compat/>`__ can be used to get :c:func:"
"`PyWeakref_GetRef` on Python 3.12 and older."
msgstr ""
":c:func:`PyWeakref_GetObject` och :c:func:`PyWeakref_GET_OBJECT`: Använd :c:"
"func:`PyWeakref_GetRef` istället. Projektet `pythoncapi-compat <https://"
"github.com/python/pythoncapi-compat/>`__ kan användas för att hämta :c:func:"
"`PyWeakref_GetRef` på Python 3.12 och äldre."

msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use :c:"
"type:`wchar_t` instead."
msgstr ""
":c:type:`Py_UNICODE` typ och :c:macro:`!Py_UNICODE_WIDE` makro: Använd :c:"
"type:`wchar_t` istället."

msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ""
":c:func:`!PyUnicode_AsDecodedObject`: Använd :c:func:`PyCodec_Decode` "
"istället."

msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`str`, such as :class:`bytes`."
msgstr ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Använd :c:func:`PyCodec_Decode` "
"istället; Observera att vissa codecs (t.ex. \"base64\") kan returnera en "
"annan typ än :class:`str`, t.ex. :class:`bytes`."

msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ""
":c:func:`!PyUnicode_AsEncodedObject`: Använd :c:func:`PyCodec_Encode` "
"istället."

msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`bytes`, such as :class:`str`."
msgstr ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Använd :c:func:`PyCodec_Encode` "
"istället; Observera att vissa codecs (t.ex. \"base64\") kan returnera en "
"annan typ än :class:`bytes`, t.ex. :class:`str`."

msgid "Python initialization functions, deprecated in Python 3.13:"
msgstr "Python-initialiseringsfunktioner, föråldrade i Python 3.13:"

msgid ""
":c:func:`Py_GetPath`: Use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) instead."
msgstr ""
":c:func:`Py_GetPath`: Använd :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) istället."

msgid ""
":c:func:`Py_GetPrefix`: Use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) if :ref:"
"`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetPrefix`: Använd :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) istället. Använd :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) om :ref:"
"`virtuella miljöer <venv-def>` behöver hanteras."

msgid ""
":c:func:`Py_GetExecPrefix`: Use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` (:data:`sys.exec_prefix`) if :"
"ref:`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetExecPrefix`: Använd :c:func:"
"`PyConfig_Get(\"base_exec_prefix\") <PyConfig_Get>` (:data:`sys."
"base_exec_prefix`) istället. Använd :c:func:`PyConfig_Get(\"exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.exec_prefix`) om :ref:`virtuella miljöer <venv-"
"def>` behöver hanteras."

msgid ""
":c:func:`Py_GetProgramFullPath`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramFullPath`: Använd :c:func:"
"`PyConfig_Get(\"executable\") <PyConfig_Get>` (:data:`sys.executable`) "
"istället."

msgid ""
":c:func:`Py_GetProgramName`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramName`: Använd :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) istället."

msgid ""
":c:func:`Py_GetPythonHome`: Use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` or the :envvar:`PYTHONHOME` environment variable instead."
msgstr ""
":c:func:`Py_GetPythonHome`: Använd :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` eller miljövariabeln :envvar:`PYTHONHOME` istället."

msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get :c:func:`PyConfig_Get` on Python 3.13 and older."
msgstr ""
"Projektet `pythoncapi-compat <https://github.com/python/pythoncapi-compat/"
">`__ kan användas för att få :c:func:`PyConfig_Get` på Python 3.13 och äldre."

msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr ""
"Funktioner för att konfigurera Pythons initialisering, föråldrad i Python "
"3.11:"

msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""
":c:func:`!PySys_SetArgvEx()`: Ställ in :c:member:`PyConfig.argv` istället."

msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""
":c:func:`!PySys_SetArgv()`: Ställ in :c:member:`PyConfig.argv` istället."

msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""
":c:func:`!Py_SetProgramName()`: Ställ in :c:member:`PyConfig.program_name` "
"istället."

msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ""
":c:func:`!Py_SetPythonHome()`: Ställ in :c:member:`PyConfig.home` istället."

msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead."
msgstr ""
"API:t :c:func:`Py_InitializeFromConfig` bör användas med :c:type:`PyConfig` "
"istället."

msgid "Global configuration variables:"
msgstr "Variabler för global konfiguration:"

msgid ""
":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` or :c:func:"
"`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DebugFlag`: Använd :c:member:`PyConfig.parser_debug` eller :c:"
"func:`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` or :c:func:"
"`PyConfig_Get(\"verbose\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_VerboseFlag`: Använd :c:member:`PyConfig.verbose` eller :c:func:"
"`PyConfig_Get(\"verbose\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` or :c:func:"
"`PyConfig_Get(\"quiet\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_QuietFlag`: Använd :c:member:`PyConfig.quiet` eller :c:func:"
"`PyConfig_Get(\"quiet\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` or :c:func:"
"`PyConfig_Get(\"interactive\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InteractiveFlag`: Använd :c:member:`PyConfig.interactive` eller :"
"c:func:`PyConfig_Get(\"interactive\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` or :c:func:"
"`PyConfig_Get(\"inspect\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InspectFlag`: Använd :c:member:`PyConfig.inspect` eller :c:func:"
"`PyConfig_Get(\"inspect\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` or :c:"
"func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_OptimizeFlag`: Använd :c:member:`PyConfig.optimization_level` "
"eller :c:func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` or :c:func:"
"`PyConfig_Get(\"site_import\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoSiteFlag`: Använd :c:member:`PyConfig.site_import` eller :c:"
"func:`PyConfig_Get(\"site_import\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` or :c:"
"func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_BytesWarningFlag`: Använd :c:member:`PyConfig.bytes_warning` "
"eller :c:func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` or :c:"
"func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_FrozenFlag`: Använd :c:member:`PyConfig.pathconfig_warnings` "
"eller :c:func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` "
"istället."

msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"or :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`: Använd :c:member:`PyConfig."
"use_environment` eller :c:func:`PyConfig_Get(\"use_environment\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"or :c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: Använd :c:member:`PyConfig."
"write_bytecode` eller :c:func:`PyConfig_Get(\"write_bytecode\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use :c:member:`PyConfig."
"user_site_directory` or :c:func:`PyConfig_Get(\"user_site_directory\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: Använd :c:member:`PyConfig."
"user_site_directory` eller :c:func:`PyConfig_Get(\"user_site_directory\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` or :"
"c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: Använd :c:member:`PyConfig.buffered_stdio` "
"eller :c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` or :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_HashRandomizationFlag`: Använd :c:member:`PyConfig.use_hash_seed` "
"och :c:member:`PyConfig.hash_seed` eller :c:func:"
"`PyConfig_Get(\"hash_seed\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` or :c:func:"
"`PyConfig_Get(\"isolated\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IsolatedFlag`: Använd :c:member:`PyConfig.isolated` eller :c:func:"
"`PyConfig_Get(\"isolated\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` or :c:func:"
"`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Använd :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` eller :c:func:"
"`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use :c:member:`PyConfig."
"legacy_windows_stdio` or :c:func:`PyConfig_Get(\"legacy_windows_stdio\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: Använd :c:member:`PyConfig."
"legacy_windows_stdio` eller :c:func:`PyConfig_Get(\"legacy_windows_stdio\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`, :c:var:`!"
"Py_HasFileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` or :c:func:`PyConfig_Get(\"filesystem_encoding\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`, :c:var:`!"
"Py_HasFileSystemDefaultEncoding`: Använd :c:member:`PyConfig."
"filesystem_encoding` eller :c:func:`PyConfig_Get(\"filesystem_encoding\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use :c:member:`PyConfig."
"filesystem_errors` or :c:func:`PyConfig_Get(\"filesystem_errors\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Använd :c:member:`PyConfig."
"filesystem_errors` eller :c:func:`PyConfig_Get(\"filesystem_errors\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` or :c:func:"
"`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` instead. (see :c:func:"
"`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: Använd :c:member:`PyPreConfig.utf8_mode` eller :c:"
"func:`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` istället. (se :c:func:"
"`Py_PreInitialize`)"

msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` to set these options. Or :c:func:`PyConfig_Get` can be used to "
"get these options at runtime."
msgstr ""
"API:et :c:func:`Py_InitializeFromConfig` bör användas med :c:type:`PyConfig` "
"för att ställa in dessa alternativ. Eller så kan :c:func:`PyConfig_Get` "
"användas för att hämta dessa alternativ vid körning."

msgid "The bundled copy of ``libmpdec``."
msgstr "Den medföljande kopian av ``libmpdec``."

msgid "Pending removal in Python 3.18"
msgstr "Väntar på borttagning i Python 3.18"

msgid "Deprecated private functions (:gh:`128863`):"
msgstr "Föråldrade privata funktioner (:gh:`128863`):"

msgid ":c:func:`!_PyBytes_Join`: use :c:func:`PyBytes_Join`."
msgstr ":c:func:`!_PyBytes_Join`: använd :c:func:`PyBytes_Join`."

msgid ""
":c:func:`!_PyDict_GetItemStringWithError`: use :c:func:"
"`PyDict_GetItemStringRef`."
msgstr ""
":c:func:`!_PyDict_GetItemStringWithError`: använd :c:func:"
"`PyDict_GetItemStringRef`."

msgid ":c:func:`!_PyDict_Pop()`: :c:func:`PyDict_Pop`."
msgstr ":c:func:`!_PyDict_Pop()`: :c:func:`PyDict_Pop`."

msgid ":c:func:`!_PyLong_Sign()`: use :c:func:`PyLong_GetSign`."
msgstr ":c:func:`!_PyLong_Sign()`: använd :c:func:`PyLong_GetSign`."

msgid ""
":c:func:`!_PyLong_FromDigits` and :c:func:`!_PyLong_New`: use :c:func:"
"`PyLongWriter_Create`."
msgstr ""
":c:func:`!_PyLong_FromDigits` och :c:func:`!_PyLong_New`: använd :c:func:"
"`PyLongWriter_Create`."

msgid ""
":c:func:`!_PyThreadState_UncheckedGet`: use :c:func:"
"`PyThreadState_GetUnchecked`."
msgstr ""
":c:func:`!_PyThreadState_UncheckedGet`: använd :c:func:"
"`PyThreadState_GetUnchecked`."

msgid ":c:func:`!_PyUnicode_AsString`: use :c:func:`PyUnicode_AsUTF8`."
msgstr ":c:func:`!_PyUnicode_AsString`: använd :c:func:`PyUnicode_AsUTF8`."

msgid ""
":c:func:`!_PyUnicodeWriter_Init`: replace ``_PyUnicodeWriter_Init(&writer)`` "
"with :c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Init`: ersätt ``_PyUnicodeWriter_Init(&writer)`` "
"med :c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`."

msgid ""
":c:func:`!_PyUnicodeWriter_Finish`: replace "
"``_PyUnicodeWriter_Finish(&writer)`` with :c:func:"
"`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Finish`: ersätt "
"``_PyUnicodeWriter_Finish(&writer)`` med :c:func:"
"`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`."

msgid ""
":c:func:`!_PyUnicodeWriter_Dealloc`: replace "
"``_PyUnicodeWriter_Dealloc(&writer)`` with :c:func:"
"`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Dealloc`: ersätt "
"``_PyUnicodeWriter_Dealloc(&writer)`` med :c:func:"
"`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`."

msgid ""
":c:func:`!_PyUnicodeWriter_WriteChar`: replace "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` with :c:func:"
"`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteChar`: ersätt "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` med :c:func:"
"`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."

msgid ""
":c:func:`!_PyUnicodeWriter_WriteStr`: replace "
"``_PyUnicodeWriter_WriteStr(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteStr(writer, str) <PyUnicodeWriter_WriteStr>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteStr`: ersätt "
"``_PyUnicodeWriter_WriteStr(&writer, str)`` med :c:func:"
"`PyUnicodeWriter_WriteStr(writer, str) <PyUnicodeWriter_WriteStr>`."

msgid ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: replace "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` with :c:func:"
"`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: ersätt "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` med :c:func:"
"`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`."

msgid ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: replace "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: ersätt "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` med :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."

msgid ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: replace "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: ersätt "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` med :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."

msgid ":c:func:`!_PyUnicodeWriter_Prepare`: (no replacement)."
msgstr ":c:func:`!_PyUnicodeWriter_Prepare`: (ingen ersättning)."

msgid ":c:func:`!_PyUnicodeWriter_PrepareKind`: (no replacement)."
msgstr ":c:func:`!_PyUnicodeWriter_PrepareKind`: (ingen ersättning)."

msgid ":c:func:`!_Py_HashPointer`: use :c:func:`Py_HashPointer`."
msgstr ":c:func:`!_Py_HashPointer`: använd :c:func:`Py_HashPointer`."

msgid ":c:func:`!_Py_fopen_obj`: use :c:func:`Py_fopen`."
msgstr ":c:func:`!_Py_fopen_obj`: använd :c:func:`Py_fopen`."

msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get these new public functions on Python 3.13 and older."
msgstr ""
"Projektet `pythoncapi-compat <https://github.com/python/pythoncapi-compat/"
">`__ kan användas för att få dessa nya offentliga funktioner på Python 3.13 "
"och äldre."

msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr ""
"Följande API:er är föråldrade och kommer att tas bort, även om det för "
"närvarande inte finns något datum för när de ska tas bort."

msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Unneeded since Python 3.8."
msgstr ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Behövs inte sedan Python 3.8."

msgid ":c:func:`PyErr_Fetch`: Use :c:func:`PyErr_GetRaisedException` instead."
msgstr ""
":c:func:`PyErr_Fetch`: Använd :c:func:`PyErr_GetRaisedException` istället."

msgid ""
":c:func:`PyErr_NormalizeException`: Use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""
":c:func:`PyErr_NormalizeException`: Använd :c:func:"
"`PyErr_GetRaisedException` istället."

msgid ""
":c:func:`PyErr_Restore`: Use :c:func:`PyErr_SetRaisedException` instead."
msgstr ""
":c:func:`PyErr_Restore`: Använd :c:func:`PyErr_SetRaisedException` istället."

msgid ""
":c:func:`PyModule_GetFilename`: Use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""
":c:func:`PyModule_GetFilename`: Använd :c:func:`PyModule_GetFilenameObject` "
"istället."

msgid ":c:func:`PyOS_AfterFork`: Use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ""
":c:func:`PyOS_AfterFork`: Använd :c:func:`PyOS_AfterFork_Child` istället."

msgid ""
":c:func:`PySlice_GetIndicesEx`: Use :c:func:`PySlice_Unpack` and :c:func:"
"`PySlice_AdjustIndices` instead."
msgstr ""
":c:func:`PySlice_GetIndicesEx`: Använd :c:func:`PySlice_Unpack` och :c:func:"
"`PySlice_AdjustIndices` istället."

msgid ":c:func:`PyUnicode_READY`: Unneeded since Python 3.12"
msgstr ":c:func:`PyUnicode_READY`: Behövs inte sedan Python 3.12"

msgid ":c:func:`!PyErr_Display`: Use :c:func:`PyErr_DisplayException` instead."
msgstr ""
":c:func:`!PyErr_Display`: Använd :c:func:`PyErr_DisplayException` istället."

msgid ""
":c:func:`!_PyErr_ChainExceptions`: Use :c:func:`!_PyErr_ChainExceptions1` "
"instead."
msgstr ""
":c:func:`!_PyErr_ChainExceptions`: Använd :c:func:`!_PyErr_ChainExceptions1` "
"istället."

msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ""
":c:member:`!PyBytesObject.ob_shash` member: anropa :c:func:`PyObject_Hash` "
"istället."

msgid "Thread Local Storage (TLS) API:"
msgstr "API för lokal lagring av trådar (TLS):"

msgid ""
":c:func:`PyThread_create_key`: Use :c:func:`PyThread_tss_alloc` instead."
msgstr ""
":c:func:`PyThread_create_key`: Använd :c:func:`PyThread_tss_alloc` istället."

msgid ":c:func:`PyThread_delete_key`: Use :c:func:`PyThread_tss_free` instead."
msgstr ""
":c:func:`PyThread_delete_key`: Använd :c:func:`PyThread_tss_free` istället."

msgid ""
":c:func:`PyThread_set_key_value`: Use :c:func:`PyThread_tss_set` instead."
msgstr ""
":c:func:`PyThread_set_key_value`: Använd :c:func:`PyThread_tss_set` istället."

msgid ""
":c:func:`PyThread_get_key_value`: Use :c:func:`PyThread_tss_get` instead."
msgstr ""
":c:func:`PyThread_get_key_value`: Använd :c:func:`PyThread_tss_get` istället."

msgid ""
":c:func:`PyThread_delete_key_value`: Use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""
":c:func:`PyThread_delete_key_value`: Använd :c:func:`PyThread_tss_delete` "
"istället."

msgid ":c:func:`PyThread_ReInitTLS`: Unneeded since Python 3.7."
msgstr ":c:func:`PyThread_ReInitTLS`: Behövs inte sedan Python 3.7."

msgid "Build Changes"
msgstr "Förändringar i byggning"

msgid ""
"``arm64-apple-ios`` and ``arm64-apple-ios-simulator`` are both now :pep:`11` "
"tier 3 platforms. (:ref:`PEP 730 <whatsnew313-platform-support>` written and "
"implementation contributed by Russell Keith-Magee in :gh:`114099`.)"
msgstr ""
"``arm64-apple-ios`` och ``arm64-apple-ios-simulator`` är nu båda :pep:`11` "
"tier 3 plattformar. (:ref:`PEP 730 <whatsnew313-platform-support>` skriven "
"och implementerad av Russell Keith-Magee i :gh:`114099`.)"

msgid ""
"``aarch64-linux-android`` and ``x86_64-linux-android`` are both now :pep:"
"`11` tier 3 platforms. (:ref:`PEP 738 <whatsnew313-platform-support>` "
"written and implementation contributed by Malcolm Smith in :gh:`116622`.)"
msgstr ""
"``aarch64-linux-android`` och ``x86_64-linux-android`` är nu båda :pep:`11` "
"tier 3 plattformar. (:ref:``PEP 738 <whatsnew313-platform-support>`` skriven "
"och implementationen bidragit av Malcolm Smith i :gh:`116622`.)"

msgid ""
"``wasm32-wasi`` is now a :pep:`11` tier 2 platform. (Contributed by Brett "
"Cannon in :gh:`115192`.)"
msgstr ""
"``wasm32-wasi`` är nu en :pep:`11` tier 2 plattform. (Bidrag från Brett "
"Cannon i :gh:`115192`.)"

msgid ""
"``wasm32-emscripten`` is no longer a :pep:`11` supported platform. "
"(Contributed by Brett Cannon in :gh:`115192`.)"
msgstr ""
"``wasm32-emscripten`` är inte längre en plattform som stöds av :pep:`11`. "
"(Bidrag från Brett Cannon i :gh:`115192`.)"

msgid ""
"Building CPython now requires a compiler with support for the C11 atomic "
"library, GCC built-in atomic functions, or MSVC interlocked intrinsics."
msgstr ""
"För att bygga CPython krävs nu en kompilator med stöd för C11 Atomic "
"Library, GCC:s inbyggda atomfunktioner eller MSVC:s interlocked intrinsics."

msgid ""
"Autoconf 2.71 and aclocal 1.16.5 are now required to regenerate the :file:"
"`configure` script. (Contributed by Christian Heimes in :gh:`89886` and by "
"Victor Stinner in :gh:`112090`.)"
msgstr ""
"Autoconf 2.71 och aclocal 1.16.5 krävs nu för att regenerera :file:"
"`configure`-skriptet. (Bidrag från Christian Heimes i :gh:`89886` och av "
"Victor Stinner i :gh:`112090`.)"

msgid ""
"SQLite 3.15.2 or newer is required to build the :mod:`sqlite3` extension "
"module. (Contributed by Erlend Aasland in :gh:`105875`.)"
msgstr ""
"SQLite 3.15.2 eller nyare krävs för att bygga tilläggsmodulen :mod:"
"`sqlite3`. (Bidrag från Erlend Aasland i :gh:`105875`.)"

msgid ""
"CPython now bundles the `mimalloc library`_ by default. It is licensed under "
"the MIT license; see :ref:`mimalloc license <mimalloc-license>`. The bundled "
"mimalloc has custom changes, see :gh:`113141` for details. (Contributed by "
"Dino Viehland in :gh:`109914`.)"
msgstr ""
"CPython innehåller nu `mimalloc-biblioteket`_ som standard. Det är "
"licensierat under MIT-licensen; se :ref:`mimalloc license <mimalloc-"
"license>`. Den medföljande mimalloc har anpassade ändringar, se :gh:`113141` "
"för detaljer. (Bidrag från Dino Viehland i :gh:`109914`.)"

msgid ""
"The :file:`configure` option :option:`--with-system-libmpdec` now defaults "
"to ``yes``. The bundled copy of ``libmpdec`` will be removed in Python 3.16."
msgstr ""
"Alternativet :file:`configure` :option:`--with-system-libmpdec` har nu "
"``yes`` som standard. Den medföljande kopian av ``libmpdec`` kommer att tas "
"bort i Python 3.16."

msgid ""
"Python built with :file:`configure` :option:`--with-trace-refs` (tracing "
"references) is now ABI compatible with the Python release build and :ref:"
"`debug build <debug-build>`. (Contributed by Victor Stinner in :gh:`108634`.)"
msgstr ""
"Python byggt med :file:`configure` :option:`--with-trace-refs` "
"(spårningsreferenser) är nu ABI-kompatibelt med Python release build och :"
"ref:`debug build <debug-build>`. (Bidrag från Victor Stinner i :gh:`108634`.)"

msgid ""
"On POSIX systems, the pkg-config (``.pc``) filenames now include the ABI "
"flags.  For example, the free-threaded build generates ``python-3.13t.pc`` "
"and the debug build generates ``python-3.13d.pc``."
msgstr ""
"På POSIX-system innehåller filnamnen för pkg-config (``.pc``) nu ABI-"
"flaggorna.  Till exempel genererar free-threaded build ``python-3.13t.pc`` "
"och debug build genererar ``python-3.13d.pc``."

msgid ""
"The ``errno``, ``fcntl``, ``grp``, ``md5``, ``pwd``, ``resource``, "
"``termios``, ``winsound``, ``_ctypes_test``, ``_multiprocessing."
"posixshmem``, ``_scproxy``, ``_stat``, ``_statistics``, ``_testconsole``, "
"``_testimportmultiple`` and ``_uuid`` C extensions are now built with the :"
"ref:`limited C API <limited-c-api>`. (Contributed by Victor Stinner in :gh:"
"`85283`.)"
msgstr ""
"Funktionerna ``errno``, ``fcntl``, ``grp``, ``md5``, ``pwd``, ``resource``, "
"``termios``, ``winsound``, ``_ctypes_test``, ``multiprocessing.posixshmem``, "
"``_scproxy``, ``_stat``, ``_statistics``, ``_testconsole``, "
"``_testimportmultiple`` och ``_uuid`` C-tillägg är nu byggda med :ref:"
"``limited C API <limited-c-api>`. (Bidrag från Victor Stinner i :gh:`85283`.)"

msgid "Porting to Python 3.13"
msgstr "Portning till Python 3.13"

msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"I det här avsnittet listas tidigare beskrivna ändringar och andra buggfixar "
"som kan kräva ändringar i din kod."

msgid "Changes in the Python API"
msgstr "Ändringar i Python API"

msgid ""
":ref:`PEP 667 <whatsnew313-locals-semantics>` introduces several changes to "
"the semantics of :func:`locals` and :attr:`f_locals <frame.f_locals>`:"
msgstr ""
":ref:`PEP 667 <whatsnew313-locals-semantics>` inför flera ändringar i "
"semantiken för :func:`locals` och :attr:`f_locals <frame.f_locals>`:"

msgid ""
"Calling :func:`locals` in an :term:`optimized scope` now produces an "
"independent snapshot on each call, and hence no longer implicitly updates "
"previously returned references. Obtaining the legacy CPython behavior now "
"requires explicit calls to update the initially returned dictionary with the "
"results of subsequent calls to :func:`!locals`. Code execution functions "
"that implicitly target :func:`!locals` (such as ``exec`` and ``eval``) must "
"be passed an explicit namespace to access their results in an optimized "
"scope. (Changed as part of :pep:`667`.)"
msgstr ""
"Anrop av :func:`locals` i en :term:`optimized scope` producerar nu en "
"oberoende ögonblicksbild vid varje anrop och uppdaterar därför inte längre "
"implicit tidigare returnerade referenser. För att få det gamla CPython-"
"beteendet krävs nu uttryckliga anrop för att uppdatera den ursprungligen "
"returnerade ordlistan med resultaten av efterföljande anrop till :func:`!"
"locals`. Funktioner för exekvering av kod som implicit riktar sig till :func:"
"`!locals` (t.ex. ``exec`` och ``eval``) måste ges en explicit namnrymd för "
"att komma åt deras resultat i ett optimerat scope. (Ändrad som en del av :"
"pep:`667`.)"

msgid ""
"Calling :func:`locals` from a comprehension at module or class scope "
"(including via ``exec`` or ``eval``) once more behaves as if the "
"comprehension were running as an independent nested function (i.e. the local "
"variables from the containing scope are not included). In Python 3.12, this "
"had changed to include the local variables from the containing scope when "
"implementing :pep:`709`. (Changed as part of :pep:`667`.)"
msgstr ""
"Anrop av :func:`locals` från en förståelse i modul- eller klasscope "
"(inklusive via ``exec`` eller ``eval``) beter sig återigen som om "
"förståelsen kördes som en oberoende nästlad funktion (dvs. de lokala "
"variablerna från det innehållande scopet inkluderas inte). I Python 3.12 "
"hade detta ändrats till att inkludera de lokala variablerna från det "
"innehållande omfånget vid implementering av :pep:`709`. (Ändrat som en del "
"av :pep:`667`.)"

msgid ""
"Accessing :attr:`FrameType.f_locals <frame.f_locals>` in an :term:`optimized "
"scope` now returns a write-through proxy rather than a snapshot that gets "
"updated at ill-specified times. If a snapshot is desired, it must be created "
"explicitly with ``dict`` or the proxy's ``.copy()`` method. (Changed as part "
"of :pep:`667`.)"
msgstr ""
"Åtkomst till :attr:`FrameType.f_locals <frame.f_locals>` i en :term:"
"`optimized scope` returnerar nu en skrivbar proxy snarare än en "
"ögonblicksbild som uppdateras vid ospecificerade tidpunkter. Om en "
"ögonblicksbild önskas måste den skapas explicit med ``dict`` eller proxyns "
"metod ``.copy()``. (Ändrad som en del av :pep:`667`.)"

msgid ""
":class:`functools.partial` now emits a :exc:`FutureWarning` when used as a "
"method. The behavior will change in future Python versions. Wrap it in :func:"
"`staticmethod` if you want to preserve the old behavior. (Contributed by "
"Serhiy Storchaka in :gh:`121027`.)"
msgstr ""
":class:`functools.partial` avger nu en :exc:`FutureWarning` när den används "
"som en metod. Beteendet kommer att ändras i framtida Python-versioner. Packa "
"in den i :func:`staticmethod` om du vill bevara det gamla beteendet. (Bidrag "
"från Serhiy Storchaka i :gh:`121027`.)"

msgid ""
"An :exc:`OSError` is now raised by :func:`getpass.getuser` for any failure "
"to retrieve a username, instead of :exc:`ImportError` on non-Unix platforms "
"or :exc:`KeyError` on Unix platforms where the password database is empty."
msgstr ""
"Nu genereras ett :exc:`OSError` av :func:`getpass.getuser` om det inte går "
"att hämta ett användarnamn, istället för :exc:`ImportError` på plattformar "
"som inte är Unix eller :exc:`KeyError` på Unix-plattformar där "
"lösenordsdatabasen är tom."

msgid ""
"The value of the :attr:`!mode` attribute of :class:`gzip.GzipFile` is now a "
"string (``'rb'`` or ``'wb'``) instead of an integer (``1`` or ``2``). The "
"value of the :attr:`!mode` attribute of the readable file-like object "
"returned by :meth:`zipfile.ZipFile.open` is now ``'rb'`` instead of ``'r'``. "
"(Contributed by Serhiy Storchaka in :gh:`115961`.)"
msgstr ""
"Värdet på attributet :attr:`!mode` i :class:`gzip.GzipFile` är nu en sträng "
"(``'rb'`` eller ``'wb'``) i stället för ett heltal (``1`` eller ``2``). "
"Värdet på attributet :attr:`!mode` i det läsbara filliknande objektet som "
"returneras av :meth:`zipfile.ZipFile.open` är nu ``'rb'`` istället för "
"``'r'``. (Bidrag från Serhiy Storchaka i :gh:`115961`.)"

msgid ""
":class:`mailbox.Maildir` now ignores files with a leading dot (``.``). "
"(Contributed by Zackery Spytz in :gh:`65559`.)"
msgstr ""
":class:`mailbox.Maildir` ignorerar nu filer med en inledande punkt (``.``). "
"(Bidrag från Zackery Spytz i :gh:`65559`.)"

msgid ""
":meth:`pathlib.Path.glob` and :meth:`~pathlib.Path.rglob` now return both "
"files and directories if a pattern that ends with \"``**``\" is given, "
"rather than directories only. Add a trailing slash to keep the previous "
"behavior and only match directories."
msgstr ""
":meth:`pathlib.Path.glob` och :meth:`~pathlib.Path.rglob` returnerar nu både "
"filer och kataloger om ett mönster som slutar med \"``**``\" anges, i "
"stället för bara kataloger. Lägg till ett efterföljande snedstreck för att "
"behålla det tidigare beteendet och bara matcha kataloger."

msgid ""
"The :mod:`threading` module now expects the :mod:`!_thread` module to have "
"an :func:`!_is_main_interpreter` function. This function takes no arguments "
"and returns ``True`` if the current interpreter is the main interpreter."
msgstr ""
"Modulen :mod:`threading` förväntar sig nu att modulen :mod:`!_thread` har en "
"funktion :func:`!_is_main_interpreter`. Denna funktion tar inga argument och "
"returnerar ``True`` om den aktuella tolken är huvudtolken."

msgid ""
"Any library or application that provides a custom :mod:`!_thread` module "
"must provide :func:`!_is_main_interpreter`, just like the module's other "
"\"private\" attributes. (:gh:`112826`.)"
msgstr ""
"Alla bibliotek eller program som tillhandahåller en anpassad :mod:`!_thread`-"
"modul måste tillhandahålla :func:`!_is_main_interpreter`, precis som "
"modulens andra \"privata\" attribut. (:gh:`112826`.)"

msgid "Changes in the C API"
msgstr "Förändringar i C API"

msgid ""
"``Python.h`` no longer includes the ``<ieeefp.h>`` standard header. It was "
"included for the :c:func:`!finite` function which is now provided by the "
"``<math.h>`` header. It should now be included explicitly if needed. Remove "
"also the ``HAVE_IEEEFP_H`` macro. (Contributed by Victor Stinner in :gh:"
"`108765`.)"
msgstr ""
"``Python.h`` innehåller inte längre standardhuvudet ``<ieeefp.h>``. Den "
"inkluderades för :c:func:`!finite`-funktionen som nu tillhandahålls av "
"``<math.h>``-headern. Den bör nu inkluderas explicit om det behövs. Ta även "
"bort makrot ``HAVE_IEEEFP_H``. (Bidrag från Victor Stinner i :gh:`108765`.)"

msgid ""
"``Python.h`` no longer includes these standard header files: ``<time.h>``, "
"``<sys/select.h>`` and ``<sys/time.h>``. If needed, they should now be "
"included explicitly. For example, ``<time.h>`` provides the :c:func:`!clock` "
"and :c:func:`!gmtime` functions, ``<sys/select.h>`` provides the :c:func:`!"
"select` function, and ``<sys/time.h>`` provides the :c:func:`!futimes`, :c:"
"func:`!gettimeofday` and :c:func:`!setitimer` functions. (Contributed by "
"Victor Stinner in :gh:`108765`.)"
msgstr ""
"``Python.h`` innehåller inte längre dessa standardhuvudfiler: ``<time.h>``, "
"``<sys/select.h>`` och ``<sys/time.h>``. Om det behövs ska de nu inkluderas "
"explicit. Till exempel innehåller ``<time.h>`` funktionerna :c:func:`!clock` "
"och :c:func:`!gmtime`, ``<sys/select.h>`` innehåller funktionen :c:func:`!"
"select` och ``<sys/time.h>`` innehåller funktionerna :c:func:`!futimes`, :c:"
"func:`!gettimeofday` och :c:func:`!setitimer`. (Bidrag från Victor Stinner "
"i :gh:`108765`.)"

msgid ""
"On Windows, ``Python.h`` no longer includes the ``<stddef.h>`` standard "
"header file. If needed, it should now be included explicitly. For example, "
"it provides :c:func:`!offsetof` function, and ``size_t`` and ``ptrdiff_t`` "
"types. Including ``<stddef.h>`` explicitly was already needed by all other "
"platforms, the ``HAVE_STDDEF_H`` macro is only defined on Windows. "
"(Contributed by Victor Stinner in :gh:`108765`.)"
msgstr ""
"På Windows inkluderar inte längre ``Python.h`` standardhuvudfilen ``<stddef."
"h>``. Om det behövs bör den nu inkluderas explicit. Den tillhandahåller till "
"exempel :c:func:`!offsetof`-funktionen och typerna ``size_t`` och "
"``ptrdiff_t``. Att inkludera ``<stddef.h>`` explicit behövdes redan av alla "
"andra plattformar, makrot ``HAVE_STDDEF_H`` är endast definierat på Windows. "
"(Bidrag från Victor Stinner i :gh:`108765`.)"

msgid ""
"If the :c:macro:`Py_LIMITED_API` macro is defined, :c:macro:`!"
"Py_BUILD_CORE`, :c:macro:`!Py_BUILD_CORE_BUILTIN` and :c:macro:`!"
"Py_BUILD_CORE_MODULE` macros are now undefined by ``<Python.h>``. "
"(Contributed by Victor Stinner in :gh:`85283`.)"
msgstr ""
"Om makrot :c:macro:`Py_LIMITED_API` är definierat, är makrot :c:macro:`!"
"Py_BUILD_CORE`, :c:macro:`!Py_BUILD_CORE_BUILTIN` och :c:macro:`!"
"Py_BUILD_CORE_MODULE` nu odefinierade av ``<Python.h>``. (Bidrag från Victor "
"Stinner i :gh:`85283`.)"

msgid ""
"The old trashcan macros ``Py_TRASHCAN_SAFE_BEGIN`` and "
"``Py_TRASHCAN_SAFE_END`` were removed. They should be replaced by the new "
"macros ``Py_TRASHCAN_BEGIN`` and ``Py_TRASHCAN_END``."
msgstr ""
"De gamla papperskorgsmakrot ``Py_TRASHCAN_SAFE_BEGIN`` och "
"``Py_TRASHCAN_SAFE_END`` har tagits bort. De bör ersättas av de nya makrona "
"``Py_TRASHCAN_BEGIN`` och ``Py_TRASHCAN_END``."

msgid "A ``tp_dealloc`` function that has the old macros, such as::"
msgstr "En ``tp_dealloc``-funktion som har de gamla makron, som t.ex:"

msgid ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_SAFE_BEGIN(p);\n"
"    ...\n"
"    Py_TRASHCAN_SAFE_END\n"
"}"
msgstr ""
"statiskt void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_SAFE_BEGIN(p);\n"
"    ...\n"
"    Py_TRASHCAN_SAFE_END\n"
"}"

msgid "should migrate to the new macros as follows::"
msgstr "bör övergå till de nya makron enligt följande::"

msgid ""
"static void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_BEGIN(p, mytype_dealloc)\n"
"    ...\n"
"    Py_TRASHCAN_END\n"
"}"
msgstr ""
"statiskt void\n"
"mytype_dealloc(mytype *p)\n"
"{\n"
"    PyObject_GC_UnTrack(p);\n"
"    Py_TRASHCAN_BEGIN(p, mytype_dealloc)\n"
"    ...\n"
"    Py_TRASHCAN_END\n"
"}"

msgid ""
"Note that ``Py_TRASHCAN_BEGIN`` has a second argument which should be the "
"deallocation function it is in. The new macros were added in Python 3.8 and "
"the old macros were deprecated in Python 3.11. (Contributed by Irit Katriel "
"in :gh:`105111`.)"
msgstr ""
"Observera att ``Py_TRASHCAN_BEGIN`` har ett andra argument som bör vara den "
"deallokeringsfunktion den befinner sig i. De nya makrona lades till i Python "
"3.8 och de gamla makrona togs bort i Python 3.11. (Bidrag från Irit Katriel "
"i :gh:`105111`.)"

msgid ""
":ref:`PEP 667 <whatsnew313-locals-semantics>` introduces several changes to "
"frame-related functions:"
msgstr ""
":ref:`PEP 667 <whatsnew313-locals-semantics>` introducerar flera ändringar "
"av ramrelaterade funktioner:"

msgid ""
"The effects of mutating the dictionary returned from :c:func:"
"`PyEval_GetLocals` in an :term:`optimized scope` have changed. New dict "
"entries added this way will now *only* be visible to subsequent :c:func:"
"`PyEval_GetLocals` calls in that frame, as :c:func:`PyFrame_GetLocals`, :"
"func:`locals`, and :attr:`FrameType.f_locals <frame.f_locals>` no longer "
"access the same underlying cached dictionary. Changes made to entries for "
"actual variable names and names added via the write-through proxy interfaces "
"will be overwritten on subsequent calls to :c:func:`PyEval_GetLocals` in "
"that frame. The recommended code update depends on how the function was "
"being used, so refer to the deprecation notice on the function for details."
msgstr ""
"Effekterna av att mutera den ordbok som returneras från :c:func:"
"`PyEval_GetLocals` i en :term:`optimized scope` har ändrats. Nya dict-poster "
"som läggs till på detta sätt kommer nu *bara* att vara synliga för "
"efterföljande :c:func:`PyEval_GetLocals`-anrop i den ramen, eftersom :c:func:"
"`PyFrame_GetLocals`, :func:`locals` och :attr:`FrameType.f_locals <frame."
"f_locals>` inte längre har tillgång till samma underliggande cachade "
"dictionary. Ändringar som görs i poster för faktiska variabelnamn och namn "
"som läggs till via write-through proxy-gränssnitt kommer att skrivas över "
"vid efterföljande anrop till :c:func:`PyEval_GetLocals` i den ramen. Den "
"rekommenderade koduppdateringen beror på hur funktionen användes, så se "
"funktionens meddelande om utfasning för mer information."

msgid ""
"Calling :c:func:`PyFrame_GetLocals` in an :term:`optimized scope` now "
"returns a write-through proxy rather than a snapshot that gets updated at "
"ill-specified times. If a snapshot is desired, it must be created explicitly "
"(e.g. with :c:func:`PyDict_Copy`), or by calling the new :c:func:"
"`PyEval_GetFrameLocals` API."
msgstr ""
"Anrop av :c:func:`PyFrame_GetLocals` i en :term:`optimized scope` returnerar "
"nu en skrivbar proxy snarare än en ögonblicksbild som uppdateras vid "
"ospecificerade tidpunkter. Om en ögonblicksbild önskas måste den skapas "
"explicit (t.ex. med :c:func:`PyDict_Copy`), eller genom att anropa det nya :"
"c:func:`PyEval_GetFrameLocals` API:et."

msgid ""
":c:func:`!PyFrame_FastToLocals` and :c:func:`!PyFrame_FastToLocalsWithError` "
"no longer have any effect. Calling these functions has been redundant since "
"Python 3.11, when :c:func:`PyFrame_GetLocals` was first introduced."
msgstr ""
":c:func:`!PyFrame_FastToLocals` och :c:func:`!PyFrame_FastToLocalsWithError` "
"har inte längre någon effekt. Anrop av dessa funktioner har varit "
"överflödiga sedan Python 3.11, då :c:func:`PyFrame_GetLocals` först "
"introducerades."

msgid ""
":c:func:`!PyFrame_LocalsToFast` no longer has any effect. Calling this "
"function is redundant now that :c:func:`PyFrame_GetLocals` returns a write-"
"through proxy for :term:`optimized scopes <optimized scope>`."
msgstr ""
":c:func:`!PyFrame_LocalsToFast` har inte längre någon effekt. Anrop av denna "
"funktion är överflödig nu när :c:func:`PyFrame_GetLocals` returnerar en "
"skrivbar proxy för :term:`optimized scopes <optimized scope>`."

msgid ""
"Python 3.13 removed many private functions. Some of them can be replaced "
"using these alternatives:"
msgstr ""
"Python 3.13 tog bort många privata funktioner. Några av dem kan ersättas med "
"dessa alternativ:"

msgid "``_PyDict_Pop()``: :c:func:`PyDict_Pop` or :c:func:`PyDict_PopString`;"
msgstr ""
"``_PyDict_Pop()``: :c:func:`PyDict_Pop` eller :c:func:`PyDict_PopString`;"

msgid "``_PyDict_GetItemWithError()``: :c:func:`PyDict_GetItemRef`;"
msgstr "``_PyDict_GetItemWithError()``: :c:func:`PyDict_GetItemRef`;"

msgid "``_PyErr_WriteUnraisableMsg()``:  :c:func:`PyErr_FormatUnraisable`;"
msgstr "``_PyErr_WriteUnraisableMsg()``: :c:func:`PyErr_FormatUnraisable`;"

msgid ""
"``_PyEval_SetTrace()``: :c:func:`PyEval_SetTrace` or :c:func:"
"`PyEval_SetTraceAllThreads`;"
msgstr ""
"``_PyEval_SetTrace()``: :c:func:`PyEval_SetTrace` eller :c:func:"
"`PyEval_SetTraceAllThreads`;"

msgid "``_PyList_Extend()``: :c:func:`PyList_Extend`;"
msgstr "``_PyList_Extend()``: :c:func:`PyList_Extend`;"

msgid "``_PyLong_AsInt()``: :c:func:`PyLong_AsInt`;"
msgstr "``_PyLong_AsInt()``: :c:func:`PyLong_AsInt`;"

msgid "``_PyMem_RawStrdup()``: ``strdup()``;"
msgstr "``_PyMem_RawStrdup()``: ``strdup()``;"

msgid "``_PyMem_Strdup()``: ``strdup()``;"
msgstr "``_PyMem_Strdup()``: ``strdup()``;"

msgid "``_PyObject_ClearManagedDict()``: :c:func:`PyObject_ClearManagedDict`;"
msgstr "``_PyObject_ClearManagedDict()``: :c:func:`PyObject_ClearManagedDict`;"

msgid "``_PyObject_VisitManagedDict()``: :c:func:`PyObject_VisitManagedDict`;"
msgstr "``_PyObject_VisitManagedDict()``: :c:func:`PyObject_VisitManagedDict`;"

msgid ""
"``_PyThreadState_UncheckedGet()``: :c:func:`PyThreadState_GetUnchecked()`;"
msgstr ""
"``_PyThreadState_UncheckedGet()``: :c:func:`PyThreadState_GetUnchecked()`;"

msgid "``_PyTime_AsSecondsDouble()``: :c:func:`PyTime_AsSecondsDouble`;"
msgstr "``_PyTime_AsSecondsDouble()``: :c:func:`PyTime_AsSecondsDouble`;"

msgid ""
"``_PyTime_GetMonotonicClock()``: :c:func:`PyTime_Monotonic` or :c:func:"
"`PyTime_MonotonicRaw`;"
msgstr ""
"``_PyTime_GetMonotonicClock()``: :c:func:`PyTime_Monotonic` eller :c:func:"
"`PyTime_MonotonicRaw`;"

msgid ""
"``_PyTime_GetPerfCounter()``: :c:func:`PyTime_PerfCounter` or :c:func:"
"`PyTime_PerfCounterRaw`;"
msgstr ""
"``_PyTime_GetPerfCounter()``: :c:func:`PyTime_PerfCounter` eller :c:func:"
"`PyTime_PerfCounterRaw`;"

msgid ""
"``_PyTime_GetSystemClock()``: :c:func:`PyTime_Time` or :c:func:"
"`PyTime_TimeRaw`;"
msgstr ""
"``_PyTime_GetSystemClock()``: :c:func:`PyTime_Time` eller :c:func:"
"`PyTime_TimeRaw`;"

msgid "``_PyTime_MAX``: :c:var:`PyTime_MAX`;"
msgstr "``_PyTime_MAX``: :c:var:`PyTime_MAX`;"

msgid "``_PyTime_MIN``: :c:var:`PyTime_MIN`;"
msgstr "``_PyTime_MIN``: :c:var:`PyTime_MIN`;"

msgid "``_PyTime_t``: :c:type:`PyTime_t`;"
msgstr "``_PyTime_t``: :c:type:`PyTime_t`;"

msgid "``_Py_HashPointer()``: :c:func:`Py_HashPointer`;"
msgstr "``_Py_HashPointer()``: :c:func:`Py_HashPointer`;"

msgid "``_Py_IsFinalizing()``: :c:func:`Py_IsFinalizing`."
msgstr "``_Py_IsFinalizing()``: :c:func:`Py_IsFinalizing`."

msgid ""
"The `pythoncapi-compat project`_ can be used to get most of these new "
"functions on Python 3.12 and older."
msgstr ""
"Projektet `pythoncapi-compat`_ kan användas för att få de flesta av dessa "
"nya funktioner på Python 3.12 och äldre."

msgid "Regression Test Changes"
msgstr "Ändringar i regressionstest"

msgid ""
"Python built with :file:`configure` :option:`--with-pydebug` now supports a :"
"option:`-X presite=package.module <-X>` command-line option. If used, it "
"specifies a module that should be imported early in the lifecycle of the "
"interpreter, before ``site.py`` is executed. (Contributed by Łukasz Langa "
"in :gh:`110769`.)"
msgstr ""
"Python byggd med :file:`configure` :option:`--with-pydebug` stöder nu "
"kommandoradsoptionen :option:`-X presite=package.module <-X>`. Om det "
"används specificerar det en modul som ska importeras tidigt i tolkens "
"livscykel, innan ``site.py`` exekveras. (Bidrag från Łukasz Langa i :gh:"
"`110769`.)"
