# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-19 14:18+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!msvcrt` --- Useful routines from the MS VC++ runtime"
msgstr ""

msgid ""
"These functions provide access to some useful capabilities on Windows "
"platforms. Some higher-level modules use these functions to build the "
"Windows implementations of their services. For example, the :mod:`getpass` "
"module uses this in the implementation of the :func:`getpass` function."
msgstr ""

msgid ""
"Further documentation on these functions can be found in the Platform API "
"documentation."
msgstr ""

msgid ""
"The module implements both the normal and wide char variants of the console "
"I/O api. The normal API deals only with ASCII characters and is of limited "
"use for internationalized applications. The wide char API should be used "
"where ever possible."
msgstr ""

msgid ""
"Operations in this module now raise :exc:`OSError` where :exc:`IOError` was "
"raised."
msgstr ""

msgid "File Operations"
msgstr ""

msgid ""
"Lock part of a file based on file descriptor *fd* from the C runtime. "
"Raises :exc:`OSError` on failure. The locked region of the file extends from "
"the current file position for *nbytes* bytes, and may continue beyond the "
"end of the file. *mode* must be one of the :const:`!LK_\\*` constants listed "
"below. Multiple regions in a file may be locked at the same time, but may "
"not overlap. Adjacent regions are not merged; they must be unlocked "
"individually."
msgstr ""

msgid ""
"Raises an :ref:`auditing event <auditing>` ``msvcrt.locking`` with arguments "
"``fd``, ``mode``, ``nbytes``."
msgstr ""

msgid ""
"Locks the specified bytes. If the bytes cannot be locked, the program "
"immediately tries again after 1 second. If, after 10 attempts, the bytes "
"cannot be locked, :exc:`OSError` is raised."
msgstr ""

msgid ""
"Locks the specified bytes. If the bytes cannot be locked, :exc:`OSError` is "
"raised."
msgstr ""

msgid "Unlocks the specified bytes, which must have been previously locked."
msgstr ""

msgid ""
"Set the line-end translation mode for the file descriptor *fd*. To set it to "
"text mode, *flags* should be :const:`os.O_TEXT`; for binary, it should be :"
"const:`os.O_BINARY`."
msgstr ""

msgid ""
"Create a C runtime file descriptor from the file handle *handle*. The "
"*flags* parameter should be a bitwise OR of :const:`os.O_APPEND`, :const:`os."
"O_RDONLY`, :const:`os.O_TEXT` and :const:`os.O_NOINHERIT`. The returned file "
"descriptor may be used as a parameter to :func:`os.fdopen` to create a file "
"object."
msgstr ""

msgid ""
"The file descriptor is inheritable by default. Pass :const:`os.O_NOINHERIT` "
"flag to make it non inheritable."
msgstr ""

msgid ""
"Raises an :ref:`auditing event <auditing>` ``msvcrt.open_osfhandle`` with "
"arguments ``handle``, ``flags``."
msgstr ""

msgid ""
"Return the file handle for the file descriptor *fd*. Raises :exc:`OSError` "
"if *fd* is not recognized."
msgstr ""

msgid ""
"Raises an :ref:`auditing event <auditing>` ``msvcrt.get_osfhandle`` with "
"argument ``fd``."
msgstr ""

msgid "Console I/O"
msgstr ""

msgid ""
"Returns a nonzero value if a keypress is waiting to be read. Otherwise, "
"return 0."
msgstr ""

msgid ""
"Read a keypress and return the resulting character as a byte string. Nothing "
"is echoed to the console. This call will block if a keypress is not already "
"available, but will not wait for :kbd:`Enter` to be pressed. If the pressed "
"key was a special function key, this will return ``'\\000'`` or ``'\\xe0'``; "
"the next call will return the keycode. The :kbd:`Control-C` keypress cannot "
"be read with this function."
msgstr ""

msgid "Wide char variant of :func:`getch`, returning a Unicode value."
msgstr ""

msgid ""
"Similar to :func:`getch`, but the keypress will be echoed if it represents a "
"printable character."
msgstr ""

msgid "Wide char variant of :func:`getche`, returning a Unicode value."
msgstr ""

msgid "Print the byte string *char* to the console without buffering."
msgstr ""

msgid "Wide char variant of :func:`putch`, accepting a Unicode value."
msgstr ""

msgid ""
"Cause the byte string *char* to be \"pushed back\" into the console buffer; "
"it will be the next character read by :func:`getch` or :func:`getche`."
msgstr ""

msgid "Wide char variant of :func:`ungetch`, accepting a Unicode value."
msgstr ""

msgid "Other Functions"
msgstr ""

msgid ""
"Force the :c:func:`malloc` heap to clean itself up and return unused blocks "
"to the operating system. On failure, this raises :exc:`OSError`."
msgstr ""

msgid ""
"Changes the location where the C runtime writes an error message for an "
"error that might end the program. *mode* must be one of the :const:`!"
"OUT_\\*` constants listed below  or :const:`REPORT_ERRMODE`. Returns the old "
"setting or -1 if an error occurs. Only available in :ref:`debug build of "
"Python <debug-build>`."
msgstr ""

msgid ""
"Error sink is determined by the app's type. Only available in :ref:`debug "
"build of Python <debug-build>`."
msgstr ""

msgid ""
"Error sink is a standard error. Only available in :ref:`debug build of "
"Python <debug-build>`."
msgstr ""

msgid ""
"Error sink is a message box. Only available in :ref:`debug build of Python "
"<debug-build>`."
msgstr ""

msgid ""
"Report the current error mode value. Only available in :ref:`debug build of "
"Python <debug-build>`."
msgstr ""

msgid ""
"Specifies the destination or destinations for a specific report type "
"generated by :c:func:`!_CrtDbgReport` in the MS VC++ runtime. *type* must be "
"one of the :const:`!CRT_\\*` constants listed below. *mode* must be one of "
"the :const:`!CRTDBG_\\*` constants listed below. Only available in :ref:"
"`debug build of Python <debug-build>`."
msgstr ""

msgid ""
"After you use :func:`CrtSetReportMode` to specify :const:`CRTDBG_MODE_FILE`, "
"you can specify the file handle to receive the message text. *type* must be "
"one of the :const:`!CRT_\\*` constants listed below. *file* should be the "
"file handle your want specified. Only available in :ref:`debug build of "
"Python <debug-build>`."
msgstr ""

msgid ""
"Warnings, messages, and information that doesn't need immediate attention."
msgstr ""

msgid ""
"Errors, unrecoverable problems, and issues that require immediate attention."
msgstr ""

msgid "Assertion failures."
msgstr ""

msgid "Writes the message to the debugger's output window."
msgstr ""

msgid ""
"Writes the message to a user-supplied file handle. :func:`CrtSetReportFile` "
"should be called to define the specific file or stream to use as the "
"destination."
msgstr ""

msgid ""
"Creates a message box to display the message along with the ``Abort``, "
"``Retry``, and ``Ignore`` buttons."
msgstr ""

msgid "Returns current *mode* for the specified *type*."
msgstr ""

msgid "The CRT Assembly version, from the :file:`crtassem.h` header file."
msgstr ""

msgid ""
"The VC Assembly public key token, from the :file:`crtassem.h` header file."
msgstr ""

msgid ""
"The Libraries Assembly name prefix, from the :file:`crtassem.h` header file."
msgstr ""
