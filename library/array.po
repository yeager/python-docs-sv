# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-25 14:20+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!array` --- Efficient arrays of numeric values"
msgstr ""

msgid ""
"This module defines an object type which can compactly represent an array of "
"basic values: characters, integers, floating-point numbers.  Arrays are "
"sequence types and behave very much like lists, except that the type of "
"objects stored in them is constrained.  The type is specified at object "
"creation time by using a :dfn:`type code`, which is a single character.  The "
"following type codes are defined:"
msgstr ""

msgid "Type code"
msgstr ""

msgid "C Type"
msgstr ""

msgid "Python Type"
msgstr ""

msgid "Minimum size in bytes"
msgstr ""

msgid "Notes"
msgstr ""

msgid "``'b'``"
msgstr ""

msgid "signed char"
msgstr ""

msgid "int"
msgstr ""

msgid "1"
msgstr ""

msgid "``'B'``"
msgstr ""

msgid "unsigned char"
msgstr ""

msgid "``'u'``"
msgstr ""

msgid "wchar_t"
msgstr "wchar_t"

msgid "Unicode character"
msgstr ""

msgid "2"
msgstr ""

msgid "\\(1)"
msgstr ""

msgid "``'w'``"
msgstr ""

msgid "Py_UCS4"
msgstr ""

msgid "4"
msgstr ""

msgid "\\(2)"
msgstr ""

msgid "``'h'``"
msgstr ""

msgid "signed short"
msgstr ""

msgid "``'H'``"
msgstr ""

msgid "unsigned short"
msgstr ""

msgid "``'i'``"
msgstr ""

msgid "signed int"
msgstr ""

msgid "``'I'``"
msgstr ""

msgid "unsigned int"
msgstr ""

msgid "``'l'``"
msgstr ""

msgid "signed long"
msgstr ""

msgid "``'L'``"
msgstr ""

msgid "unsigned long"
msgstr ""

msgid "``'q'``"
msgstr ""

msgid "signed long long"
msgstr ""

msgid "8"
msgstr ""

msgid "``'Q'``"
msgstr ""

msgid "unsigned long long"
msgstr ""

msgid "``'f'``"
msgstr ""

msgid "float"
msgstr ""

msgid "``'d'``"
msgstr ""

msgid "double"
msgstr ""

msgid "Notes:"
msgstr ""

msgid "It can be 16 bits or 32 bits depending on the platform."
msgstr ""

msgid ""
"``array('u')`` now uses :c:type:`wchar_t` as C type instead of deprecated "
"``Py_UNICODE``. This change doesn't affect its behavior because "
"``Py_UNICODE`` is alias of :c:type:`wchar_t` since Python 3.3."
msgstr ""

msgid "Please migrate to ``'w'`` typecode."
msgstr ""

msgid ""
"The actual representation of values is determined by the machine "
"architecture (strictly speaking, by the C implementation).  The actual size "
"can be accessed through the :attr:`array.itemsize` attribute."
msgstr ""

msgid "The module defines the following item:"
msgstr ""

msgid "A string with all available type codes."
msgstr ""

msgid "The module defines the following type:"
msgstr ""

msgid ""
"A new array whose items are restricted by *typecode*, and initialized from "
"the optional *initializer* value, which must be a :class:`bytes` or :class:"
"`bytearray` object, a Unicode string, or iterable over elements of the "
"appropriate type."
msgstr ""

msgid ""
"If given a :class:`bytes` or :class:`bytearray` object, the initializer is "
"passed to the new array's :meth:`frombytes` method; if given a Unicode "
"string, the initializer is passed to the :meth:`fromunicode` method; "
"otherwise, the initializer's iterator is passed to the :meth:`extend` method "
"to add initial items to the array."
msgstr ""

msgid ""
"Array objects support the ordinary sequence operations of indexing, slicing, "
"concatenation, and multiplication.  When using slice assignment, the "
"assigned value must be an array object with the same type code; in all other "
"cases, :exc:`TypeError` is raised. Array objects also implement the buffer "
"interface, and may be used wherever :term:`bytes-like objects <bytes-like "
"object>` are supported."
msgstr ""

msgid ""
"Raises an :ref:`auditing event <auditing>` ``array.__new__`` with arguments "
"``typecode``, ``initializer``."
msgstr ""

msgid "The typecode character used to create the array."
msgstr ""

msgid "The length in bytes of one array item in the internal representation."
msgstr ""

msgid "Append a new item with value *x* to the end of the array."
msgstr ""

msgid ""
"Return a tuple ``(address, length)`` giving the current memory address and "
"the length in elements of the buffer used to hold array's contents.  The "
"size of the memory buffer in bytes can be computed as ``array.buffer_info()"
"[1] * array.itemsize``.  This is occasionally useful when working with low-"
"level (and inherently unsafe) I/O interfaces that require memory addresses, "
"such as certain :c:func:`!ioctl` operations.  The returned numbers are valid "
"as long as the array exists and no length-changing operations are applied to "
"it."
msgstr ""

msgid ""
"When using array objects from code written in C or C++ (the only way to "
"effectively make use of this information), it makes more sense to use the "
"buffer interface supported by array objects.  This method is maintained for "
"backward compatibility and should be avoided in new code.  The buffer "
"interface is documented in :ref:`bufferobjects`."
msgstr ""

msgid ""
"\"Byteswap\" all items of the array.  This is only supported for values "
"which are 1, 2, 4, or 8 bytes in size; for other types of values, :exc:"
"`RuntimeError` is raised.  It is useful when reading data from a file "
"written on a machine with a different byte order."
msgstr ""

msgid "Return the number of occurrences of *x* in the array."
msgstr ""

msgid ""
"Append items from *iterable* to the end of the array.  If *iterable* is "
"another array, it must have *exactly* the same type code; if not, :exc:"
"`TypeError` will be raised.  If *iterable* is not an array, it must be "
"iterable and its elements must be the right type to be appended to the array."
msgstr ""

msgid ""
"Appends items from the :term:`bytes-like object`, interpreting its content "
"as an array of machine values (as if it had been read from a file using the :"
"meth:`fromfile` method)."
msgstr ""

msgid ":meth:`!fromstring` is renamed to :meth:`frombytes` for clarity."
msgstr ""

msgid ""
"Read *n* items (as machine values) from the :term:`file object` *f* and "
"append them to the end of the array.  If less than *n* items are available, :"
"exc:`EOFError` is raised, but the items that were available are still "
"inserted into the array."
msgstr ""

msgid ""
"Append items from the list.  This is equivalent to ``for x in list: a."
"append(x)`` except that if there is a type error, the array is unchanged."
msgstr ""

msgid ""
"Extends this array with data from the given Unicode string. The array must "
"have type code ``'u'`` or ``'w'``; otherwise a :exc:`ValueError` is raised. "
"Use ``array.frombytes(unicodestring.encode(enc))`` to append Unicode data to "
"an array of some other type."
msgstr ""

msgid ""
"Return the smallest *i* such that *i* is the index of the first occurrence "
"of *x* in the array.  The optional arguments *start* and *stop* can be "
"specified to search for *x* within a subsection of the array.  Raise :exc:"
"`ValueError` if *x* is not found."
msgstr ""

msgid "Added optional *start* and *stop* parameters."
msgstr ""

msgid ""
"Insert a new item with value *x* in the array before position *i*. Negative "
"values are treated as being relative to the end of the array."
msgstr ""

msgid ""
"Removes the item with the index *i* from the array and returns it. The "
"optional argument defaults to ``-1``, so that by default the last item is "
"removed and returned."
msgstr ""

msgid "Remove the first occurrence of *x* from the array."
msgstr ""

msgid "Remove all elements from the array."
msgstr ""

msgid "Reverse the order of the items in the array."
msgstr ""

msgid ""
"Convert the array to an array of machine values and return the bytes "
"representation (the same sequence of bytes that would be written to a file "
"by the :meth:`tofile` method.)"
msgstr ""

msgid ":meth:`!tostring` is renamed to :meth:`tobytes` for clarity."
msgstr ""

msgid "Write all items (as machine values) to the :term:`file object` *f*."
msgstr ""

msgid "Convert the array to an ordinary list with the same items."
msgstr ""

msgid ""
"Convert the array to a Unicode string.  The array must have a type ``'u'`` "
"or ``'w'``; otherwise a :exc:`ValueError` is raised. Use ``array.tobytes()."
"decode(enc)`` to obtain a Unicode string from an array of some other type."
msgstr ""

msgid ""
"The string representation of array objects has the form ``array(typecode, "
"initializer)``. The *initializer* is omitted if the array is empty, "
"otherwise it is a Unicode string if the *typecode* is ``'u'`` or ``'w'``, "
"otherwise it is a list of numbers. The string representation is guaranteed "
"to be able to be converted back to an array with the same type and value "
"using :func:`eval`, so long as the :class:`~array.array` class has been "
"imported using ``from array import array``. Variables ``inf`` and ``nan`` "
"must also be defined if it contains corresponding floating-point values. "
"Examples::"
msgstr ""

msgid ""
"array('l')\n"
"array('w', 'hello \\u2641')\n"
"array('l', [1, 2, 3, 4, 5])\n"
"array('d', [1.0, 2.0, 3.14, -inf, nan])"
msgstr ""

msgid "Module :mod:`struct`"
msgstr ""

msgid "Packing and unpacking of heterogeneous binary data."
msgstr ""

msgid "`NumPy <https://numpy.org/>`_"
msgstr ""

msgid "The NumPy package defines another array type."
msgstr ""

msgid "arrays"
msgstr ""
