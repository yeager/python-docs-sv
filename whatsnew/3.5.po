# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's New In Python 3.5"
msgstr "Vad är nytt i Python 3.5"

msgid "Editors"
msgstr "Redigerare"

msgid "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"
msgstr "Elvis Pranskevichus <elvis@magic.io>, Yury Selivanov <yury@magic.io>"

msgid ""
"This article explains the new features in Python 3.5, compared to 3.4. "
"Python 3.5 was released on September 13, 2015.  See the `changelog <https://"
"docs.python.org/3.5/whatsnew/changelog.html>`_ for a full list of changes."
msgstr ""
"I den här artikeln förklaras de nya funktionerna i Python 3.5 jämfört med "
"3.4. Python 3.5 släpptes den 13 september 2015.  Se `changelog <https://docs."
"python.org/3.5/whatsnew/changelog.html>`_ för en fullständig lista över "
"ändringar."

msgid ":pep:`478` - Python 3.5 Release Schedule"
msgstr ":pep:`478` - Python 3.5 Utgivningsschema"

msgid "Summary -- Release highlights"
msgstr "Sammanfattning -- Release highlights"

msgid "New syntax features:"
msgstr "Nya syntaxfunktioner:"

msgid ""
":ref:`PEP 492 <whatsnew-pep-492>`, coroutines with async and await syntax."
msgstr ""
":ref:`PEP 492 <whatsnew-pep-492>`, coroutines med async- och await-syntax."

msgid ""
":ref:`PEP 465 <whatsnew-pep-465>`, a new matrix multiplication operator: ``a "
"@ b``."
msgstr ""
":ref:`PEP 465 <whatsnew-pep-465>`, en ny operator för matrismultiplikation: "
"``a @ b``."

msgid ""
":ref:`PEP 448 <whatsnew-pep-448>`, additional unpacking generalizations."
msgstr ""
":ref:`PEP 448 <whatsnew-pep-448>`, ytterligare uppackning av "
"generaliseringar."

msgid "New library modules:"
msgstr "Nya biblioteksmoduler:"

msgid ":mod:`typing`: :ref:`PEP 484 -- Type Hints <whatsnew-pep-484>`."
msgstr ":mod:`typing`: :ref:`PEP 484 -- Type Hints <whatsnew-pep-484>`."

msgid ""
":mod:`zipapp`: :ref:`PEP 441 Improving Python ZIP Application Support "
"<whatsnew-zipapp>`."
msgstr ""
":mod:`zipapp`: :ref:`PEP 441 Improving Python ZIP Application Support "
"<whatsnew-zipapp>`."

msgid "New built-in features:"
msgstr "Nya inbyggda funktioner:"

msgid ""
"``bytes % args``, ``bytearray % args``: :ref:`PEP 461 <whatsnew-pep-461>` -- "
"Adding ``%`` formatting to bytes and bytearray."
msgstr ""
"``bytes % args``, ``bytearray % args``: :ref:`PEP 461 <whatsnew-pep-461>` -- "
"Lägger till ``%`` formatering till bytes och bytearray."

msgid ""
"New :meth:`bytes.hex`, :meth:`bytearray.hex` and :meth:`memoryview.hex` "
"methods. (Contributed by Arnon Yaari in :issue:`9951`.)"
msgstr ""
"Nya metoder :meth:`bytes.hex`, :meth:`bytearray.hex` och :meth:`memoryview."
"hex`. (Bidrag från Arnon Yaari i :issue:`9951`.)"

msgid ""
":class:`memoryview` now supports tuple indexing (including multi-"
"dimensional). (Contributed by Antoine Pitrou in :issue:`23632`.)"
msgstr ""
":class:`memoryview` har nu stöd för tuple-indexering (inklusive "
"flerdimensionell). (Bidrag från Antoine Pitrou i :issue:`23632`.)"

msgid ""
"Generators have a new ``gi_yieldfrom`` attribute, which returns the object "
"being iterated by ``yield from`` expressions. (Contributed by Benno Leslie "
"and Yury Selivanov in :issue:`24450`.)"
msgstr ""
"Generatorer har ett nytt ``gi_yieldfrom``-attribut, som returnerar objektet "
"som itereras av ``yield from``-uttryck. (Bidrag från Benno Leslie och Yury "
"Selivanov i :issue:`24450`.)"

msgid ""
"A new :exc:`RecursionError` exception is now raised when maximum recursion "
"depth is reached.  (Contributed by Georg Brandl in :issue:`19235`.)"
msgstr ""
"Ett nytt :exc:`RecursionError`-undantag görs nu när maximalt rekursionsdjup "
"har uppnåtts.  (Bidrag från Georg Brandl i :issue:`19235`.)"

msgid "CPython implementation improvements:"
msgstr "Förbättringar av CPython-implementeringen:"

msgid ""
"When the ``LC_TYPE`` locale is the POSIX locale (``C`` locale), :py:data:"
"`sys.stdin` and :py:data:`sys.stdout` now use the ``surrogateescape`` error "
"handler, instead of the ``strict`` error handler. (Contributed by Victor "
"Stinner in :issue:`19977`.)"
msgstr ""
"När ``LC_TYPE`` locale är POSIX locale (``C`` locale), använder :py:data:"
"`sys.stdin` och :py:data:`sys.stdout` nu felhanteraren ``surrogateescape`` "
"istället för felhanteraren ``strict``. (Bidrag från Victor Stinner i :issue:"
"`19977`.)"

msgid ""
"``.pyo`` files are no longer used and have been replaced by a more flexible "
"scheme that includes the optimization level explicitly in ``.pyc`` name. "
"(See :ref:`PEP 488 overview <whatsnew-pep-488>`.)"
msgstr ""
"``.pyo``-filer används inte längre och har ersatts av ett mer flexibelt "
"system som inkluderar optimeringsnivån uttryckligen i ``.pyc``-namnet. (Se :"
"ref:`PEP 488 översikt <whatsnew-pep-488>`.)"

msgid ""
"Builtin and extension modules are now initialized in a multi-phase process, "
"which is similar to how Python modules are loaded. (See :ref:`PEP 489 "
"overview <whatsnew-pep-489>`.)"
msgstr ""
"Inbyggda moduler och tilläggsmoduler initialiseras nu i en flerfasprocess, "
"som liknar hur Python-moduler laddas. (Se :ref:`PEP 489 översikt <whatsnew-"
"pep-489>`.)"

msgid "Significant improvements in the standard library:"
msgstr "Betydande förbättringar i standardbiblioteket:"

msgid ""
":class:`collections.OrderedDict` is now :ref:`implemented in C <whatsnew-"
"ordereddict>`, which makes it 4 to 100 times faster."
msgstr ""
":class:`collections.OrderedDict` är nu :ref:`implemented in C <whatsnew-"
"ordereddict>`, vilket gör den 4 till 100 gånger snabbare."

msgid ""
"The :mod:`ssl` module gained :ref:`support for Memory BIO <whatsnew-"
"sslmemorybio>`, which decouples SSL protocol handling from network IO."
msgstr ""
"Modulen :mod:`ssl` fick :ref:`stöd för Memory BIO <whatsnew-sslmemorybio>`, "
"som frikopplar SSL-protokollhanteringen från nätverks-IO."

msgid ""
"The new :func:`os.scandir` function provides a :ref:`better and "
"significantly faster way <whatsnew-pep-471>` of directory traversal."
msgstr ""
"Den nya :func:`os.scandir`-funktionen ger ett :ref:`bättre och betydligt "
"snabbare sätt <whatsnew-pep-471>` att genomkorsa kataloger."

msgid ""
":func:`functools.lru_cache` has been mostly :ref:`reimplemented in C "
"<whatsnew-lrucache>`, yielding much better performance."
msgstr ""
":func:`functools.lru_cache` har till största delen :ref:`reimplementerats i "
"C <whatsnew-lrucache>`, vilket ger mycket bättre prestanda."

msgid ""
"The new :func:`subprocess.run` function provides a :ref:`streamlined way to "
"run subprocesses <whatsnew-subprocess>`."
msgstr ""
"Den nya funktionen :func:`subprocess.run` ger ett :ref:`strömlinjeformat "
"sätt att köra underprocesser <whatsnew-subprocess>`."

msgid ""
"The :mod:`traceback` module has been significantly :ref:`enhanced <whatsnew-"
"traceback>` for improved performance and developer convenience."
msgstr ""
"Modulen :mod:`traceback` har fått en betydande :ref:`enhanced <whatsnew-"
"traceback>` för att förbättra prestanda och underlätta för utvecklare."

msgid "Security improvements:"
msgstr "Förbättringar av säkerheten:"

msgid ""
"SSLv3 is now disabled throughout the standard library. It can still be "
"enabled by instantiating a :class:`ssl.SSLContext` manually.  (See :issue:"
"`22638` for more details; this change was backported to CPython 3.4 and 2.7.)"
msgstr ""
"SSLv3 är nu inaktiverat i hela standardbiblioteket. Det kan fortfarande "
"aktiveras genom att instansiera en :class:`ssl.SSLContext` manuellt.  (Se :"
"issue:`22638` för mer information; denna ändring har backporterats till "
"CPython 3.4 och 2.7.)"

msgid ""
"HTTP cookie parsing is now stricter, in order to protect against potential "
"injection attacks. (Contributed by Antoine Pitrou in :issue:`22796`.)"
msgstr ""
"Parsing av HTTP-cookies är nu striktare, för att skydda mot potentiella "
"injektionsattacker. (Bidrag från Antoine Pitrou i :issue:`22796`.)"

msgid "Windows improvements:"
msgstr "Förbättringar i Windows:"

msgid ""
"A new installer for Windows has replaced the old MSI. See :ref:`using-on-"
"windows` for more information."
msgstr ""
"Ett nytt installationsprogram för Windows har ersatt det gamla MSI-"
"programmet. Se :ref:`using-on-windows` för mer information."

msgid ""
"Windows builds now use Microsoft Visual C++ 14.0, and extension modules "
"should use the same."
msgstr ""
"Windows-versioner använder nu Microsoft Visual C++ 14.0, och tilläggsmoduler "
"bör använda samma sak."

msgid ""
"Please read on for a comprehensive list of user-facing changes, including "
"many other smaller improvements, CPython optimizations, deprecations, and "
"potential porting issues."
msgstr ""
"Läs vidare för en omfattande lista över användarorienterade ändringar, "
"inklusive många andra mindre förbättringar, CPython-optimeringar, "
"avskrivningar och potentiella portningsproblem."

msgid "New Features"
msgstr "Nya funktioner"

msgid "PEP 492 - Coroutines with async and await syntax"
msgstr "PEP 492 - Coroutines med async- och await-syntax"

msgid ""
":pep:`492` greatly improves support for asynchronous programming in Python "
"by adding :term:`awaitable objects <awaitable>`, :term:`coroutine functions "
"<coroutine function>`, :term:`asynchronous iteration <asynchronous "
"iterable>`, and :term:`asynchronous context managers <asynchronous context "
"manager>`."
msgstr ""
":pep:`492` förbättrar kraftigt stödet för asynkron programmering i Python "
"genom att lägga till :term:`awaitable objects <awaitable>`, :term:`coroutine "
"functions <coroutine function>`, :term:`asynchronous iteration <asynchronous "
"iterable>`, och :term:`asynchronous context managers <asynchronous context "
"manager>`."

msgid ""
"Coroutine functions are declared using the new :keyword:`async def` syntax::"
msgstr ""
"Coroutine-funktioner deklareras med hjälp av den nya :keyword:`async def` "
"syntaxen::"

msgid ""
">>> async def coro():\n"
"...     return 'spam'"
msgstr ""
">>> async def coro():\n"
"... returnera 'spam'"

msgid ""
"Inside a coroutine function, the new :keyword:`await` expression can be used "
"to suspend coroutine execution until the result is available.  Any object "
"can be *awaited*, as long as it implements the :term:`awaitable` protocol by "
"defining the :meth:`__await__` method."
msgstr ""
"Inom en coroutine-funktion kan det nya uttrycket :keyword:`await` användas "
"för att avbryta coroutine-exekveringen tills resultatet är tillgängligt.  "
"Alla objekt kan vara *awaited*, så länge som de implementerar :term:"
"`awaitable`-protokollet genom att definiera :meth:`__await__`-metoden."

msgid ""
"PEP 492 also adds :keyword:`async for` statement for convenient iteration "
"over asynchronous iterables."
msgstr ""
"PEP 492 lägger också till :keyword:`async for` statement för bekväm "
"iteration över asynkrona iterabler."

msgid "An example of a rudimentary HTTP client written using the new syntax::"
msgstr ""
"Ett exempel på en rudimentär HTTP-klient som skrivits med den nya syntaxen::"

msgid ""
"import asyncio\n"
"\n"
"async def http_get(domain):\n"
"    reader, writer = await asyncio.open_connection(domain, 80)\n"
"\n"
"    writer.write(b'\\r\\n'.join([\n"
"        b'GET / HTTP/1.1',\n"
"        b'Host: %b' % domain.encode('latin-1'),\n"
"        b'Connection: close',\n"
"        b'', b''\n"
"    ]))\n"
"\n"
"    async for line in reader:\n"
"        print('>>>', line)\n"
"\n"
"    writer.close()\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(http_get('example.com'))\n"
"finally:\n"
"    loop.close()"
msgstr ""
"import asyncio\n"
"\n"
"async def http_get(domain):\n"
"    reader, writer = await asyncio.open_connection(domain, 80)\n"
"\n"
"    writer.write(b'\\r\\n'.join([\n"
"        b'GET / HTTP/1.1',\n"
"        b'Host: %b' % domain.encode('latin-1'),\n"
"        b'Connection: close',\n"
"        b'', b''\n"
"    ]))\n"
"\n"
"    async for line in reader:\n"
"        print('>>>', line)\n"
"\n"
"    writer.close()\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(http_get('example.com'))\n"
"finally:\n"
"    loop.close()"

msgid ""
"Similarly to asynchronous iteration, there is a new syntax for asynchronous "
"context managers.  The following script::"
msgstr ""
"På samma sätt som för asynkron iteration finns det en ny syntax för "
"asynkrona kontexthanterare.  Följande skript::"

msgid ""
"import asyncio\n"
"\n"
"async def coro(name, lock):\n"
"    print('coro {}: waiting for lock'.format(name))\n"
"    async with lock:\n"
"        print('coro {}: holding the lock'.format(name))\n"
"        await asyncio.sleep(1)\n"
"        print('coro {}: releasing the lock'.format(name))\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"lock = asyncio.Lock()\n"
"coros = asyncio.gather(coro(1, lock), coro(2, lock))\n"
"try:\n"
"    loop.run_until_complete(coros)\n"
"finally:\n"
"    loop.close()"
msgstr ""
"import asyncio\n"
"\n"
"async def coro(name, lock):\n"
"    print('coro {}: waiting for lock'.format(name))\n"
"    async with lock:\n"
"        print('coro {}: holding the lock'.format(name))\n"
"        await asyncio.sleep(1)\n"
"        print('coro {}: releasing the lock'.format(name))\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"lock = asyncio.Lock()\n"
"coros = asyncio.gather(coro(1, lock), coro(2, lock))\n"
"try:\n"
"    loop.run_until_complete(coros)\n"
"finally:\n"
"    loop.close()"

msgid "will output::"
msgstr "kommer att mata ut::"

msgid ""
"coro 2: waiting for lock\n"
"coro 2: holding the lock\n"
"coro 1: waiting for lock\n"
"coro 2: releasing the lock\n"
"coro 1: holding the lock\n"
"coro 1: releasing the lock"
msgstr ""
"coro 2: väntar på lås\n"
"coro 2: håller i låset\n"
"coro 1: väntar på lås\n"
"coro 2: frigör låset\n"
"coro 1: håller i låset\n"
"coro 1: släpper låset"

msgid ""
"Note that both :keyword:`async for` and :keyword:`async with` can only be "
"used inside a coroutine function declared with :keyword:`async def`."
msgstr ""
"Observera att både :keyword:`async for` och :keyword:`async with` endast kan "
"användas inuti en coroutine-funktion som deklarerats med :keyword:`async "
"def`."

msgid ""
"Coroutine functions are intended to be run inside a compatible event loop, "
"such as the :ref:`asyncio loop <asyncio-event-loop>`."
msgstr ""
"Coroutine-funktioner är avsedda att köras i en kompatibel händelseslinga, t."
"ex. :ref:`asyncio loop <asyncio-event-loop>`."

msgid ""
"Starting with CPython 3.5.2, ``__aiter__`` can directly return :term:"
"`asynchronous iterators <asynchronous iterator>`.  Returning an :term:"
"`awaitable` object will result in a :exc:`PendingDeprecationWarning`."
msgstr ""
"Från och med CPython 3.5.2 kan ``__aiter__`` direkt returnera :term:"
"``asynkrona iteratorer <asynchronous iterator>``.  Att returnera ett :term:"
"`awaitable`-objekt kommer att resultera i en :exc:"
"`PendingDeprecationWarning`."

msgid "See more details in the :ref:`async-iterators` documentation section."
msgstr "Se mer information i dokumentationsavsnittet :ref:`async-iterators`."

msgid ":pep:`492` -- Coroutines with async and await syntax"
msgstr ":pep:`492` -- Coroutines med async- och await-syntax"

msgid "PEP written and implemented by Yury Selivanov."
msgstr "PEP skrivet och implementerat av Yury Selivanov."

msgid "PEP 465 - A dedicated infix operator for matrix multiplication"
msgstr "PEP 465 - En dedikerad infixoperator för matrismultiplikation"

msgid ""
":pep:`465` adds the ``@`` infix operator for matrix multiplication. "
"Currently, no builtin Python types implement the new operator, however, it "
"can be implemented by defining :meth:`__matmul__`, :meth:`__rmatmul__`, and :"
"meth:`__imatmul__` for regular, reflected, and in-place matrix "
"multiplication.  The semantics of these methods is similar to that of "
"methods defining other infix arithmetic operators."
msgstr ""
":pep:`465` lägger till infixoperatorn ``@`` för matrismultiplikation. För "
"närvarande finns det inga inbyggda Python-typer som implementerar den nya "
"operatorn, men den kan implementeras genom att definiera :meth:"
"`__matmul__`, :meth:`__rmatmul__` och :meth:`__imatmul__` för vanlig, "
"reflekterad och in-place matrismultiplikation.  Semantiken för dessa metoder "
"liknar den för metoder som definierar andra aritmetiska operatorer i infix."

msgid ""
"Matrix multiplication is a notably common operation in many fields of "
"mathematics, science, engineering, and the addition of ``@`` allows writing "
"cleaner code::"
msgstr ""
"Matrismultiplikation är en mycket vanlig operation inom många områden av "
"matematik, vetenskap, teknik och tillägget av ``@`` gör det möjligt att "
"skriva renare kod::"

msgid "S = (H @ beta - r).T @ inv(H @ V @ H.T) @ (H @ beta - r)"
msgstr "S = (H @ beta - r).T @ inv(H @ V @ H.T) @ (H @ beta - r)"

msgid "instead of::"
msgstr "istället för::"

msgid ""
"S = dot((dot(H, beta) - r).T,\n"
"        dot(inv(dot(dot(H, V), H.T)), dot(H, beta) - r))"
msgstr ""
"S = dot((dot(H, beta) - r).T,\n"
"        dot(inv(dot(dot(H, V), H.T)), dot(H, beta) - r))"

msgid "NumPy 1.10 has support for the new operator::"
msgstr "NumPy 1.10 har stöd för den nya operatorn::"

msgid ""
">>> import numpy\n"
"\n"
">>> x = numpy.ones(3)\n"
">>> x\n"
"array([ 1., 1., 1.])\n"
"\n"
">>> m = numpy.eye(3)\n"
">>> m\n"
"array([[ 1., 0., 0.],\n"
"       [ 0., 1., 0.],\n"
"       [ 0., 0., 1.]])\n"
"\n"
">>> x @ m\n"
"array([ 1., 1., 1.])"
msgstr ""
">>> import numpy\n"
"\n"
">>> x = numpy.ones(3)\n"
">>> x\n"
"array([ 1., 1., 1.])\n"
"\n"
">>> m = numpy.eye(3)\n"
">>> m\n"
"array([[ 1., 0., 0.],\n"
"       [ 0., 1., 0.],\n"
"       [ 0., 0., 1.]])\n"
"\n"
">>> x @ m\n"
"array([ 1., 1., 1.])"

msgid ":pep:`465` -- A dedicated infix operator for matrix multiplication"
msgstr ":pep:`465` -- En dedikerad infixoperator för matrismultiplikation"

msgid "PEP written by Nathaniel J. Smith; implemented by Benjamin Peterson."
msgstr "PEP skriven av Nathaniel J. Smith; implementerad av Benjamin Peterson."

msgid "PEP 448 - Additional Unpacking Generalizations"
msgstr "PEP 448 - Ytterligare generaliseringar för uppackning"

msgid ""
":pep:`448` extends the allowed uses of the ``*`` iterable unpacking operator "
"and ``**`` dictionary unpacking operator.  It is now possible to use an "
"arbitrary number of unpackings in :ref:`function calls <calls>`::"
msgstr ""
":pep:`448` utökar de tillåtna användningarna av ``*`` iterable unpacking "
"operator och ``**`` dictionary unpacking operator.  Det är nu möjligt att "
"använda ett godtyckligt antal uppackningar i :ref:`funktionsanrop <calls>`::"

msgid ""
">>> print(*[1], *[2], 3, *[4, 5])\n"
"1 2 3 4 5\n"
"\n"
">>> def fn(a, b, c, d):\n"
"...     print(a, b, c, d)\n"
"...\n"
"\n"
">>> fn(**{'a': 1, 'c': 3}, **{'b': 2, 'd': 4})\n"
"1 2 3 4"
msgstr ""
">>> print(*[1], *[2], 3, *[4, 5])\n"
"1 2 3 4 5\n"
"\n"
">>> def fn(a, b, c, d):\n"
"... print(a, b, c, d)\n"
"...\n"
"\n"
">>> fn(**{'a': 1, 'c': 3}, **{'b': 2, 'd': 4})\n"
"1 2 3 4"

msgid ""
"Similarly, tuple, list, set, and dictionary displays allow multiple "
"unpackings (see :ref:`exprlists` and :ref:`dict`)::"
msgstr ""
"På samma sätt tillåter tuple-, list-, set- och dictionary-displayer flera "
"uppackningar (se :ref:`exprlists` och :ref:`dict`)::"

msgid ""
">>> *range(4), 4\n"
"(0, 1, 2, 3, 4)\n"
"\n"
">>> [*range(4), 4]\n"
"[0, 1, 2, 3, 4]\n"
"\n"
">>> {*range(4), 4, *(5, 6, 7)}\n"
"{0, 1, 2, 3, 4, 5, 6, 7}\n"
"\n"
">>> {'x': 1, **{'y': 2}}\n"
"{'x': 1, 'y': 2}"
msgstr ""
">>> *intervall(4), 4\n"
"(0, 1, 2, 3, 4)\n"
"\n"
">>> [*intervall(4), 4]\n"
"[0, 1, 2, 3, 4]\n"
"\n"
">>> {*intervall(4), 4, *(5, 6, 7)}\n"
"{0, 1, 2, 3, 4, 5, 6, 7}\n"
"\n"
">>> {'x': 1, **{'y': 2}}\n"
"{'x': 1, 'y': 2}"

msgid ":pep:`448` -- Additional Unpacking Generalizations"
msgstr ":pep:`448` -- Ytterligare generaliseringar av uppackning"

msgid ""
"PEP written by Joshua Landau; implemented by Neil Girdhar, Thomas Wouters, "
"and Joshua Landau."
msgstr ""
"PEP skriven av Joshua Landau; implementerad av Neil Girdhar, Thomas Wouters "
"och Joshua Landau."

msgid "PEP 461 - percent formatting support for bytes and bytearray"
msgstr "PEP 461 - Stöd för procentformatering för bytes och bytearray"

msgid ""
":pep:`461` adds support for the ``%`` :ref:`interpolation operator <bytes-"
"formatting>` to :class:`bytes` and :class:`bytearray`."
msgstr ""
":pep:`461` lägger till stöd för ``%`` :ref:`interpolationsoperatorn <bytes-"
"formatting>` till :class:`bytes` och :class:`bytearray`."

msgid ""
"While interpolation is usually thought of as a string operation, there are "
"cases where interpolation on ``bytes`` or ``bytearrays`` makes sense, and "
"the work needed to make up for this missing functionality detracts from the "
"overall readability of the code.  This issue is particularly important when "
"dealing with wire format protocols, which are often a mixture of binary and "
"ASCII compatible text."
msgstr ""
"Även om interpolering vanligtvis betraktas som en strängoperation finns det "
"fall där interpolering på ``bytes`` eller ``bytearrays`` är meningsfullt, "
"och det arbete som krävs för att kompensera för denna saknade funktionalitet "
"försämrar den övergripande läsbarheten i koden.  Denna fråga är särskilt "
"viktig när man hanterar protokoll i trådformat, som ofta är en blandning av "
"binär och ASCII-kompatibel text."

msgid "Examples::"
msgstr "Exempel::"

msgid ""
">>> b'Hello %b!' % b'World'\n"
"b'Hello World!'\n"
"\n"
">>> b'x=%i y=%f' % (1, 2.5)\n"
"b'x=1 y=2.500000'"
msgstr ""
">>> b'Hello %b!' % b'World'\n"
"b'Hello World!'\n"
"\n"
">>> b'x=%i y=%f' % (1, 2,5)\n"
"b'x=1 y=2,500000'"

msgid ""
"Unicode is not allowed for ``%b``, but it is accepted by ``%a`` (equivalent "
"of ``repr(obj).encode('ascii', 'backslashreplace')``)::"
msgstr ""
"Unicode är inte tillåtet för ``%b``, men det accepteras av ``%a`` "
"(motsvarande ``repr(obj).encode('ascii', 'backslashreplace')``)::"

msgid ""
">>> b'Hello %b!' % 'World'\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: %b requires bytes, or an object that implements __bytes__, not "
"'str'\n"
"\n"
">>> b'price: %a' % '10€'\n"
"b\"price: '10\\\\u20ac'\""
msgstr ""
"&gt;&gt;&gt; b'Hej %b!' % 'Världen'\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i <module>\n"
"TypeError: %b kräver bytes, eller ett objekt som implementerar __bytes__, "
"inte 'str'\n"
"\n"
"&gt;&gt;&gt; b'pris: %a' % '10€'\n"
"b\"pris: '10\\\\u20ac'\""

msgid ""
"Note that ``%s`` and ``%r`` conversion types, although supported, should "
"only be used in codebases that need compatibility with Python 2."
msgstr ""
"Observera att konverteringstyperna ``%s`` och ``%r``, även om de stöds, "
"endast bör användas i kodbaser som behöver kompatibilitet med Python 2."

msgid ":pep:`461` -- Adding % formatting to bytes and bytearray"
msgstr ":pep:`461` -- Lägger till % formatting till bytes och bytearray"

msgid ""
"PEP written by Ethan Furman; implemented by Neil Schemenauer and Ethan "
"Furman."
msgstr ""
"PEP skriven av Ethan Furman; implementerad av Neil Schemenauer och Ethan "
"Furman."

msgid "PEP 484 - Type Hints"
msgstr "PEP 484 - Tips om typ"

msgid ""
"Function annotation syntax has been a Python feature since version 3.0 (:pep:"
"`3107`), however the semantics of annotations has been left undefined."
msgstr ""
"Syntaxen för funktionsannoteringar har varit en Python-funktion sedan "
"version 3.0 (:pep:`3107`), men semantiken för annoteringar har lämnats "
"odefinierad."

msgid ""
"Experience has shown that the majority of function annotation uses were to "
"provide type hints to function parameters and return values.  It became "
"evident that it would be beneficial for Python users, if the standard "
"library included the base definitions and tools for type annotations."
msgstr ""
"Erfarenheten har visat att de flesta funktionsannoteringar används för att "
"ge typtips till funktionsparametrar och returvärden.  Det blev uppenbart att "
"det skulle vara till nytta för Python-användare om standardbiblioteket "
"innehöll basdefinitioner och verktyg för typannoteringar."

msgid ""
":pep:`484` introduces a :term:`provisional module <provisional API>` to "
"provide these standard definitions and tools, along with some conventions "
"for situations where annotations are not available."
msgstr ""
":pep:`484` introducerar en :term:``provisorisk modul <provisional API>` för "
"att tillhandahålla dessa standarddefinitioner och verktyg, tillsammans med "
"vissa konventioner för situationer där anteckningar inte är tillgängliga."

msgid ""
"For example, here is a simple function whose argument and return type are "
"declared in the annotations::"
msgstr ""
"Här är till exempel en enkel funktion vars argument och returtyp deklareras "
"i annotationerna::"

msgid ""
"def greeting(name: str) -> str:\n"
"    return 'Hello ' + name"
msgstr ""
"def greeting(namn: str) -> str:\n"
"    return 'Hej ' + namn"

msgid ""
"While these annotations are available at runtime through the usual :attr:"
"`~object.__annotations__` attribute, *no automatic type checking happens at "
"runtime*.  Instead, it is assumed that a separate off-line type checker (e."
"g. `mypy <https://mypy-lang.org>`_) will be used for on-demand source code "
"analysis."
msgstr ""
"Även om dessa anteckningar är tillgängliga vid körning genom det vanliga "
"attributet :attr:`~object.__annotations__`, sker *ingen automatisk "
"typkontroll vid körning*.  Istället antas det att en separat off-line "
"typkontroll (t.ex. `mypy <https://mypy-lang.org>`_) kommer att användas för "
"on-demand källkodsanalys."

msgid ""
"The type system supports unions, generic types, and a special type named :"
"class:`~typing.Any` which is consistent with (i.e. assignable to and from) "
"all types."
msgstr ""
"Typsystemet stöder unioner, generiska typer och en speciell typ med namnet :"
"class:`~typing.Any` som är konsekvent med (dvs. kan tilldelas till och från) "
"alla typer."

msgid ":mod:`typing` module documentation"
msgstr ":mod:`typing` dokumentation för modul"

msgid ":pep:`484` -- Type Hints"
msgstr ":pep:`484` -- Tips om typ"

msgid ""
"PEP written by Guido van Rossum, Jukka Lehtosalo, and Łukasz Langa; "
"implemented by Guido van Rossum."
msgstr ""
"PEP skriven av Guido van Rossum, Jukka Lehtosalo och Łukasz Langa; "
"implementerad av Guido van Rossum."

msgid ":pep:`483` -- The Theory of Type Hints"
msgstr ":pep:`483` -- Teorin om typhintar"

msgid "PEP written by Guido van Rossum"
msgstr "PEP skriven av Guido van Rossum"

msgid ""
"PEP 471 - os.scandir() function -- a better and faster directory iterator"
msgstr ""
"PEP 471 - os.scandir()-funktionen - en bättre och snabbare katalogiterator"

msgid ""
":pep:`471` adds a new directory iteration function, :func:`os.scandir`, to "
"the standard library.  Additionally, :func:`os.walk` is now implemented "
"using ``scandir``, which makes it 3 to 5 times faster on POSIX systems and 7 "
"to 20 times faster on Windows systems.  This is largely achieved by greatly "
"reducing the number of calls to :func:`os.stat` required to walk a directory "
"tree."
msgstr ""
":pep:`471` lägger till en ny funktion för katalogiteration, :func:`os."
"scandir`, i standardbiblioteket.  Dessutom implementeras nu :func:`os.walk` "
"med ``scandir``, vilket gör den 3 till 5 gånger snabbare på POSIX-system och "
"7 till 20 gånger snabbare på Windows-system.  Detta uppnås till stor del "
"genom att kraftigt minska antalet anrop till :func:`os.stat` som krävs för "
"att gå igenom ett katalogträd."

msgid ""
"Additionally, ``scandir`` returns an iterator, as opposed to returning a "
"list of file names, which improves memory efficiency when iterating over "
"very large directories."
msgstr ""
"Dessutom returnerar ``scandir`` en iterator, i stället för en lista med "
"filnamn, vilket förbättrar minneseffektiviteten vid iteration över mycket "
"stora kataloger."

msgid ""
"The following example shows a simple use of :func:`os.scandir` to display "
"all the files (excluding directories) in the given *path* that don't start "
"with ``'.'``. The :meth:`entry.is_file() <os.DirEntry.is_file>` call will "
"generally not make an additional system call::"
msgstr ""
"Följande exempel visar en enkel användning av :func:`os.scandir` för att "
"visa alla filer (exklusive kataloger) i den angivna *path* som inte börjar "
"med ``'.'``. Anropet :meth:`entry.is_file() <os.DirEntry.is_file>` kommer i "
"allmänhet inte att göra ytterligare ett systemanrop::"

msgid ""
"for entry in os.scandir(path):\n"
"    if not entry.name.startswith('.') and entry.is_file():\n"
"        print(entry.name)"
msgstr ""
"för entry i os.scandir(path):\n"
"    if not entry.name.startswith('.') and entry.is_file():\n"
"        print(post.namn)"

msgid ""
":pep:`471` -- os.scandir() function -- a better and faster directory iterator"
msgstr ""
":pep:`471` -- os.scandir() function -- en bättre och snabbare katalogiterator"

msgid ""
"PEP written and implemented by Ben Hoyt with the help of Victor Stinner."
msgstr "PEP skrivet och implementerat av Ben Hoyt med hjälp av Victor Stinner."

msgid "PEP 475: Retry system calls failing with EINTR"
msgstr "PEP 475: Försök igen med systemanrop som misslyckas med EINTR"

msgid ""
"An :py:const:`errno.EINTR` error code is returned whenever a system call, "
"that is waiting for I/O, is interrupted by a signal.  Previously, Python "
"would raise :exc:`InterruptedError` in such cases.  This meant that, when "
"writing a Python application, the developer had two choices:"
msgstr ""
"En :py:const:`errno.EINTR`-felkod returneras när ett systemanrop, som väntar "
"på I/O, avbryts av en signal.  Tidigare skulle Python ge :exc:"
"`InterruptedError` i sådana fall.  Detta innebar att utvecklaren hade två "
"val när han skrev en Python-applikation:"

msgid "Ignore the ``InterruptedError``."
msgstr "Ignorera ``InterruptedError``."

msgid ""
"Handle the ``InterruptedError`` and attempt to restart the interrupted "
"system call at every call site."
msgstr ""
"Hantera ``InterruptedError`` och försök att starta om det avbrutna "
"systemanropet på varje anropsplats."

msgid ""
"The first option makes an application fail intermittently. The second option "
"adds a large amount of boilerplate that makes the code nearly unreadable.  "
"Compare::"
msgstr ""
"Det första alternativet gör att en applikation misslyckas intermittent. Det "
"andra alternativet lägger till en stor mängd boilerplate som gör koden "
"nästan oläslig.  Jämför::"

msgid "print(\"Hello World\")"
msgstr "skriv ut(\"Hello World\")"

msgid "and::"
msgstr "och::"

msgid ""
"while True:\n"
"    try:\n"
"        print(\"Hello World\")\n"
"        break\n"
"    except InterruptedError:\n"
"        continue"
msgstr ""
"medan True:\n"
"    try:\n"
"        print(\"Hello World\")\n"
"        bryt\n"
"    except InterruptedError:\n"
"        fortsätt"

msgid ""
":pep:`475` implements automatic retry of system calls on ``EINTR``.  This "
"removes the burden of dealing with ``EINTR`` or :exc:`InterruptedError` in "
"user code in most situations and makes Python programs, including the "
"standard library, more robust.  Note that the system call is only retried if "
"the signal handler does not raise an exception."
msgstr ""
":pep:`475` implementerar automatisk omprövning av systemanrop vid "
"``EINTR``.  Detta tar bort bördan av att hantera ``EINTR`` eller :exc:"
"`InterruptedError` i användarkoden i de flesta situationer och gör Python-"
"program, inklusive standardbiblioteket, mer robusta.  Observera att "
"systemanropet bara görs om om signalhanteraren inte ger upphov till ett "
"undantag."

msgid ""
"Below is a list of functions which are now retried when interrupted by a "
"signal:"
msgstr ""
"Nedan finns en lista över funktioner som nu prövas på nytt när de avbryts av "
"en signal:"

msgid ":func:`open` and :func:`io.open`;"
msgstr ":func:`open` och :func:`io.open`;"

msgid "functions of the :mod:`faulthandler` module;"
msgstr "funktioner i modulen :mod:`faulthandler`;"

msgid ""
":mod:`os` functions: :func:`~os.fchdir`, :func:`~os.fchmod`, :func:`~os."
"fchown`, :func:`~os.fdatasync`, :func:`~os.fstat`, :func:`~os.fstatvfs`, :"
"func:`~os.fsync`, :func:`~os.ftruncate`, :func:`~os.mkfifo`, :func:`~os."
"mknod`, :func:`~os.open`, :func:`~os.posix_fadvise`, :func:`~os."
"posix_fallocate`, :func:`~os.pread`, :func:`~os.pwrite`, :func:`~os.read`, :"
"func:`~os.readv`, :func:`~os.sendfile`, :func:`~os.wait3`, :func:`~os."
"wait4`, :func:`~os.wait`, :func:`~os.waitid`, :func:`~os.waitpid`, :func:"
"`~os.write`, :func:`~os.writev`;"
msgstr ""
":mod:`os` functions: :func:`~os.fchdir`, :func:`~os.fchmod`, :func:`~os."
"fchown`, :func:`~os.fdatasync`, :func:`~os.fstat`, :func:`~os.fstatvfs`, :"
"func:`~os.fsync`, :func:`~os.ftruncate`, :func:`~os.mkfifo`, :func:`~os."
"mknod`, :func:`~os.open`, :func:`~os.posix_fadvise`, :func:`~os."
"posix_fallocate`, :func:`~os.pread`, :func:`~os.pwrite`, :func:`~os.read`, :"
"func:`~os.readv`, :func:`~os.sendfile`, :func:`~os.wait3`, :func:`~os."
"wait4`, :func:`~os.wait`, :func:`~os.waitid`, :func:`~os.waitpid`, :func:"
"`~os.write`, :func:`~os.writev`;"

msgid ""
"special cases: :func:`os.close` and :func:`os.dup2` now ignore :py:const:"
"`~errno.EINTR` errors; the syscall is not retried (see the PEP for the "
"rationale);"
msgstr ""
"specialfall: :func:`os.close` och :func:`os.dup2` ignorerar nu :py:const:"
"`~errno.EINTR`-fel; syscall-anropet försöker inte igen (se PEP för "
"motivering);"

msgid ""
":mod:`select` functions: :func:`devpoll.poll() <select.devpoll.poll>`, :func:"
"`epoll.poll() <select.epoll.poll>`, :func:`kqueue.control() <select.kqueue."
"control>`, :func:`poll.poll() <select.poll.poll>`, :func:`~select.select`;"
msgstr ""
":mod:`select` functions: :func:`devpoll.poll() <select.devpoll.poll>`, :func:"
"`epoll.poll() <select.epoll.poll>`, :func:`kqueue.control() <select.kqueue."
"control>`, :func:`poll.poll() <select.poll.poll>`, :func:`~select.select`;"

msgid ""
"methods of the :class:`~socket.socket` class: :meth:`~socket.socket."
"accept`, :meth:`~socket.socket.connect` (except for non-blocking sockets), :"
"meth:`~socket.socket.recv`, :meth:`~socket.socket.recvfrom`, :meth:`~socket."
"socket.recvmsg`, :meth:`~socket.socket.send`, :meth:`~socket.socket."
"sendall`, :meth:`~socket.socket.sendmsg`, :meth:`~socket.socket.sendto`;"
msgstr ""
"metoder för klassen :class:`~socket.socket`: :meth:`~socket.socket.accept`, :"
"meth:`~socket.socket.connect` (utom för icke-blockerande uttag), :meth:"
"`~socket.socket.recv`, :meth:`~socket.socket.recvfrom`, :meth:`~socket."
"socket.recvmsg`, :meth:`~socket.socket.send`, :meth:`~socket.socket."
"sendall`, :meth:`~socket.socket.sendmsg`, :meth:`~socket.socket.sendto`;"

msgid ":func:`signal.sigtimedwait` and :func:`signal.sigwaitinfo`;"
msgstr ":func:`signal.sigtimedwait` och :func:`signal.sigwaitinfo`;"

msgid ":func:`time.sleep`."
msgstr ":func:`tid.sömn`."

msgid ":pep:`475` -- Retry system calls failing with EINTR"
msgstr ":pep:`475` -- Försök igen med systemanrop som misslyckas med EINTR"

msgid ""
"PEP and implementation written by Charles-François Natali and Victor "
"Stinner, with the help of Antoine Pitrou (the French connection)."
msgstr ""
"PEP och genomförandet skrevs av Charles-François Natali och Victor Stinner, "
"med hjälp av Antoine Pitrou (den franska kopplingen)."

msgid "PEP 479: Change StopIteration handling inside generators"
msgstr "PEP 479: Ändra StopIteration-hanteringen i generatorer"

msgid ""
"The interaction of generators and :exc:`StopIteration` in Python 3.4 and "
"earlier was sometimes surprising, and could conceal obscure bugs.  "
"Previously, ``StopIteration`` raised accidentally inside a generator "
"function was interpreted as the end of the iteration by the loop construct "
"driving the generator."
msgstr ""
"Samspelet mellan generatorer och :exc:`StopIteration` i Python 3.4 och "
"tidigare var ibland överraskande och kunde dölja obskyra buggar.  Tidigare "
"tolkades ``StopIteration`` som av misstag uppstod inuti en generatorfunktion "
"som slutet på iterationen av den loopkonstruktion som driver generatorn."

msgid ""
":pep:`479` changes the behavior of generators: when a ``StopIteration`` "
"exception is raised inside a generator, it is replaced with a :exc:"
"`RuntimeError` before it exits the generator frame.  The main goal of this "
"change is to ease debugging in the situation where an unguarded :func:`next` "
"call raises ``StopIteration`` and causes the iteration controlled by the "
"generator to terminate silently. This is particularly pernicious in "
"combination with the ``yield from`` construct."
msgstr ""
":pep:`479` ändrar beteendet för generatorer: när ett ``StopIteration``-"
"undantag uppstår inuti en generator, ersätts det med ett :exc:`RuntimeError` "
"innan det lämnar generatorramen.  Huvudsyftet med denna ändring är att "
"underlätta felsökning i situationer där ett obevakat :func:`next`-anrop ger "
"upphov till ``StopIteration`` och får den iteration som kontrolleras av "
"generatorn att avslutas i tysthet. Detta är särskilt skadligt i kombination "
"med ``yield from``-konstruktionen."

msgid ""
"This is a backwards incompatible change, so to enable the new behavior, a :"
"term:`__future__` import is necessary::"
msgstr ""
"Detta är en bakåtkompatibel ändring, så för att aktivera det nya beteendet "
"krävs en :term:`__future__`-import::"

msgid ""
">>> from __future__ import generator_stop\n"
"\n"
">>> def gen():\n"
"...     next(iter([]))\n"
"...     yield\n"
"...\n"
">>> next(gen())\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 2, in gen\n"
"StopIteration\n"
"\n"
"The above exception was the direct cause of the following exception:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"RuntimeError: generator raised StopIteration"
msgstr ""
">>> from __future__ import generator_stop\n"
"\n"
">>> def gen():\n"
"...     next(iter([]))\n"
"...     yield\n"
"...\n"
">>> next(gen())\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 2, in gen\n"
"StopIteration\n"
"\n"
"The above exception was the direct cause of the following exception:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"RuntimeError: generator raised StopIteration"

msgid ""
"Without a ``__future__`` import, a :exc:`PendingDeprecationWarning` will be "
"raised whenever a :exc:`StopIteration` exception is raised inside a "
"generator."
msgstr ""
"Utan import av ``__future__`` kommer en :exc:`PendingDeprecationWarning`` "
"att uppstå när ett :exc:`StopIteration``-undantag uppstår i en generator."

msgid ":pep:`479` -- Change StopIteration handling inside generators"
msgstr ":pep:`479` -- Ändra StopIteration-hanteringen i generatorer"

msgid ""
"PEP written by Chris Angelico and Guido van Rossum. Implemented by Chris "
"Angelico, Yury Selivanov and Nick Coghlan."
msgstr ""
"PEP skriven av Chris Angelico och Guido van Rossum. Implementerat av Chris "
"Angelico, Yury Selivanov och Nick Coghlan."

msgid "PEP 485: A function for testing approximate equality"
msgstr "PEP 485: En funktion för att testa approximativ likhet"

msgid ""
":pep:`485` adds the :func:`math.isclose` and :func:`cmath.isclose` functions "
"which tell whether two values are approximately equal or \"close\" to each "
"other.  Whether or not two values are considered close is determined "
"according to given absolute and relative tolerances. Relative tolerance is "
"the maximum allowed difference between ``isclose`` arguments, relative to "
"the larger absolute value::"
msgstr ""
":pep:`485` lägger till funktionerna :func:`math.isclose` och :func:`cmath."
"isclose` som anger om två värden är ungefär lika stora eller \"nära\" "
"varandra.  Huruvida två värden anses ligga nära varandra eller inte bestäms "
"utifrån givna absoluta och relativa toleranser. Relativ tolerans är den "
"maximalt tillåtna skillnaden mellan ``isclose``-argument, i förhållande till "
"det större absoluta värdet::"

msgid ""
">>> import math\n"
">>> a = 5.0\n"
">>> b = 4.99998\n"
">>> math.isclose(a, b, rel_tol=1e-5)\n"
"True\n"
">>> math.isclose(a, b, rel_tol=1e-6)\n"
"False"
msgstr ""
">>> import math\n"
">>> a = 5.0\n"
">>> b = 4.99998\n"
">>> math.isclose(a, b, rel_tol=1e-5)\n"
"True\n"
">>> math.isclose(a, b, rel_tol=1e-6)\n"
"False"

msgid ""
"It is also possible to compare two values using absolute tolerance, which "
"must be a non-negative value::"
msgstr ""
"Det är också möjligt att jämföra två värden med hjälp av absolut tolerans, "
"som måste vara ett icke-negativt värde::"

msgid ""
">>> import math\n"
">>> a = 5.0\n"
">>> b = 4.99998\n"
">>> math.isclose(a, b, abs_tol=0.00003)\n"
"True\n"
">>> math.isclose(a, b, abs_tol=0.00001)\n"
"False"
msgstr ""
">>> import math\n"
">>> a = 5.0\n"
">>> b = 4.99998\n"
">>> math.isclose(a, b, abs_tol=0.00003)\n"
"True\n"
">>> math.isclose(a, b, abs_tol=0.00001)\n"
"False"

msgid ":pep:`485` -- A function for testing approximate equality"
msgstr ":pep:`485` -- En funktion för att testa ungefärlig likhet"

msgid ""
"PEP written by Christopher Barker; implemented by Chris Barker and Tal Einat."
msgstr ""
"PEP skriven av Christopher Barker; implementerad av Chris Barker och Tal "
"Einat."

msgid "PEP 486: Make the Python Launcher aware of virtual environments"
msgstr "PEP 486: Gör Python Launcher medveten om virtuella miljöer"

msgid ""
":pep:`486` makes the Windows launcher (see :pep:`397`) aware of an active "
"virtual environment. When the default interpreter would be used and the "
"``VIRTUAL_ENV`` environment variable is set, the interpreter in the virtual "
"environment will be used."
msgstr ""
":pep:`486` gör Windows-startprogrammet (se :pep:`397`) medvetet om en aktiv "
"virtuell miljö. När standardtolken skulle användas och miljövariabeln "
"``VIRTUAL_ENV`` är satt, kommer tolken i den virtuella miljön att användas."

msgid ":pep:`486` -- Make the Python Launcher aware of virtual environments"
msgstr ":pep:`486` -- Gör Python Launcher uppmärksam på virtuella miljöer"

msgid "PEP written and implemented by Paul Moore."
msgstr "PEP skrivet och implementerat av Paul Moore."

msgid "PEP 488: Elimination of PYO files"
msgstr "PEP 488: Eliminering av PYO-filer"

msgid ""
":pep:`488` does away with the concept of ``.pyo`` files. This means that ``."
"pyc`` files represent both unoptimized and optimized bytecode. To prevent "
"the need to constantly regenerate bytecode files, ``.pyc`` files now have an "
"optional ``opt-`` tag in their name when the bytecode is optimized. This has "
"the side-effect of no more bytecode file name clashes when running under "
"either :option:`-O` or :option:`-OO`. Consequently, bytecode files generated "
"from :option:`-O`, and :option:`-OO` may now exist simultaneously. :func:"
"`importlib.util.cache_from_source` has an updated API to help with this "
"change."
msgstr ""
":pep:`488` avskaffar konceptet med ``.pyo``-filer. Detta innebär att ``."
"pyc``-filer representerar både ooptimerad och optimerad bytecode. För att "
"förhindra behovet av att ständigt regenerera bytecode-filer har ``.pyc``-"
"filer nu en valfri ``opt-``-tagg i sitt namn när bytecoden är optimerad. "
"Detta har som bieffekt att det inte längre finns några namnkrockar mellan "
"bytecode-filer när de körs under antingen :option:`-O` eller :option:`-OO`. "
"Följaktligen kan bytecode-filer som genereras från :option:`-O` och :option:"
"`-OO` nu existera samtidigt. :func:`importlib.util.cache_from_source` har "
"ett uppdaterat API för att hjälpa till med denna ändring."

msgid ":pep:`488` -- Elimination of PYO files"
msgstr ":pep:`488` -- Eliminering av PYO-filer"

msgid "PEP written and implemented by Brett Cannon."
msgstr "PEP skrivet och implementerat av Brett Cannon."

msgid "PEP 489: Multi-phase extension module initialization"
msgstr "PEP 489: Initialisering av flerfasig tilläggsmodul"

msgid ""
":pep:`489` updates extension module initialization to take advantage of the "
"two step module loading mechanism introduced by :pep:`451` in Python 3.4."
msgstr ""
":pep:`489` uppdaterar initialiseringen av tilläggsmoduler för att dra nytta "
"av den tvåstegs modulladdningsmekanism som introducerades av :pep:`451` i "
"Python 3.4."

msgid ""
"This change brings the import semantics of extension modules that opt-in to "
"using the new mechanism much closer to those of Python source and bytecode "
"modules, including the ability to use any valid identifier as a module name, "
"rather than being restricted to ASCII."
msgstr ""
"Denna ändring gör att importsemantiken för tilläggsmoduler som väljer att "
"använda den nya mekanismen kommer mycket närmare den för Pythons käll- och "
"bytekodsmoduler, inklusive möjligheten att använda valfri giltig "
"identifierare som modulnamn, i stället för att vara begränsad till ASCII."

msgid ":pep:`489` -- Multi-phase extension module initialization"
msgstr ":pep:`489` -- Initialisering av flerfasig tilläggsmodul"

msgid ""
"PEP written by Petr Viktorin, Stefan Behnel, and Nick Coghlan; implemented "
"by Petr Viktorin."
msgstr ""
"PEP skriven av Petr Viktorin, Stefan Behnel och Nick Coghlan; implementerad "
"av Petr Viktorin."

msgid "Other Language Changes"
msgstr "Andra språkliga förändringar"

msgid "Some smaller changes made to the core Python language are:"
msgstr "Några mindre ändringar som gjorts i Python-språkets kärna är:"

msgid ""
"Added the ``\"namereplace\"`` error handlers.  The ``\"backslashreplace\"`` "
"error handlers now work with decoding and translating. (Contributed by "
"Serhiy Storchaka in :issue:`19676` and :issue:`22286`.)"
msgstr ""
"Lagt till felhanterare för ``\"namereplace\"``.  Felhanterarna "
"``\"backslashreplace\"`` fungerar nu med avkodning och översättning. (Bidrag "
"från Serhiy Storchaka i :issue:`19676` och :issue:`22286`.)"

msgid ""
"The :option:`-b` option now affects comparisons of :class:`bytes` with :"
"class:`int`.  (Contributed by Serhiy Storchaka in :issue:`23681`.)"
msgstr ""
"Alternativet :option:`-b` påverkar nu jämförelser av :class:`bytes` med :"
"class:`int`.  (Bidrag från Serhiy Storchaka i :issue:`23681`.)"

msgid ""
"New Kazakh ``kz1048`` and Tajik ``koi8_t`` :ref:`codecs <standard-"
"encodings>`. (Contributed by Serhiy Storchaka in :issue:`22682` and :issue:"
"`22681`.)"
msgstr ""
"Nya kazakiska ``kz1048`` och tadzjikiska ``koi8_t`` :ref:`codecs <standard-"
"encodings>`. (Bidrag från Serhiy Storchaka i :issue:`22682` och :issue:"
"`22681`.)"

msgid ""
"Property docstrings are now writable. This is especially useful for :func:"
"`collections.namedtuple` docstrings. (Contributed by Berker Peksag in :issue:"
"`24064`.)"
msgstr ""
"Egenskapsdokumentationer är nu skrivbara. Detta är särskilt användbart för :"
"func:`collections.namedtuple`-dokumentsträngar. (Bidrag från Berker Peksag "
"i :issue:`24064`.)"

msgid ""
"Circular imports involving relative imports are now supported. (Contributed "
"by Brett Cannon and Antoine Pitrou in :issue:`17636`.)"
msgstr ""
"Cirkulär import som involverar relativ import stöds nu. (Bidrag från Brett "
"Cannon och Antoine Pitrou i :issue:`17636`.)"

msgid "New Modules"
msgstr "Nya moduler"

msgid "typing"
msgstr "maskinskrivning"

msgid ""
"The new :mod:`typing` :term:`provisional <provisional API>` module provides "
"standard definitions and tools for function type annotations. See :ref:`Type "
"Hints <whatsnew-pep-484>` for more information."
msgstr ""
"Den nya modulen :mod:`typing` :term:`provisional <provisional API>` "
"innehåller standarddefinitioner och verktyg för funktionstypskommentarer. "
"Se :ref:``Type Hints <whatsnew-pep-484>` för mer information."

msgid "zipapp"
msgstr "zipapp"

msgid ""
"The new :mod:`zipapp` module (specified in :pep:`441`) provides an API and "
"command line tool for creating executable Python Zip Applications, which "
"were introduced in Python 2.6 in :issue:`1739468`, but which were not well "
"publicized, either at the time or since."
msgstr ""
"Den nya modulen :mod:`zipapp` (specificerad i :pep:`441`) tillhandahåller "
"ett API och kommandoradsverktyg för att skapa körbara Python Zip "
"Applications, som introducerades i Python 2.6 i :issue:`1739468`, men som "
"inte var särskilt välkända, varken då eller senare."

msgid ""
"With the new module, bundling your application is as simple as putting all "
"the files, including a ``__main__.py`` file, into a directory ``myapp`` and "
"running:"
msgstr ""
"Med den nya modulen är det så enkelt som att lägga alla filer, inklusive "
"filen ``__main__.py``, i katalogen ``myapp`` och köra:"

msgid ""
"$ python -m zipapp myapp\n"
"$ python myapp.pyz"
msgstr ""
"$ python -m zipapp myapp\n"
"$ python myapp.pyz"

msgid ""
"The module implementation has been contributed by Paul Moore in :issue:"
"`23491`."
msgstr ""
"Implementeringen av modulen har bidragit av Paul Moore i :issue:`23491`."

msgid ":pep:`441` -- Improving Python ZIP Application Support"
msgstr ":pep:`441` -- Förbättrat stöd för Python ZIP-applikationer"

msgid "Improved Modules"
msgstr "Förbättrade moduler"

msgid "argparse"
msgstr "argparse"

msgid ""
"The :class:`~argparse.ArgumentParser` class now allows disabling :ref:"
"`abbreviated usage <prefix-matching>` of long options by setting :ref:"
"`allow_abbrev` to ``False``.  (Contributed by Jonathan Paugh, Steven "
"Bethard, paul j3 and Daniel Eriksson in :issue:`14910`.)"
msgstr ""
"Klassen :class:`~argparse.ArgumentParser` tillåter nu att man inaktiverar :"
"ref:``förkortad användning <prefix-matching>`` av långa alternativ genom att "
"ställa in :ref:`allow_abbrev` till ``False``.  (Bidrag från Jonathan Paugh, "
"Steven Bethard, paul j3 och Daniel Eriksson i :issue:`14910`.)"

msgid "asyncio"
msgstr "asyncio"

msgid ""
"Since the :mod:`asyncio` module is :term:`provisional <provisional API>`, "
"all changes introduced in Python 3.5 have also been backported to Python 3.4."
"x."
msgstr ""
"Eftersom modulen :mod:`asyncio` är :term:`provisional <provisional API>`, "
"har alla ändringar som introducerades i Python 3.5 också bakåtporterats till "
"Python 3.4.x."

msgid "Notable changes in the :mod:`asyncio` module since Python 3.4.0:"
msgstr ""
"Anmärkningsvärda ändringar i modulen :mod:`asyncio` sedan Python 3.4.0:"

msgid ""
"New debugging APIs: :meth:`loop.set_debug() <asyncio.loop.set_debug>` and :"
"meth:`loop.get_debug() <asyncio.loop.get_debug>` methods. (Contributed by "
"Victor Stinner.)"
msgstr ""
"Nya debugging API:er: :meth:`loop.set_debug() <asyncio.loop.set_debug>` och :"
"meth:`loop.get_debug() <asyncio.loop.get_debug>` metoder. (Bidrag från "
"Victor Stinner.)"

msgid ""
"The proactor event loop now supports SSL. (Contributed by Antoine Pitrou and "
"Victor Stinner in :issue:`22560`.)"
msgstr ""
"Proactors händelseslinga har nu stöd för SSL. (Bidrag från Antoine Pitrou "
"och Victor Stinner i :issue:`22560`.)"

msgid ""
"A new :meth:`loop.is_closed() <asyncio.loop.is_closed>` method to check if "
"the event loop is closed. (Contributed by Victor Stinner in :issue:`21326`.)"
msgstr ""
"En ny :meth:`loop.is_closed() <asyncio.loop.is_closed>`-metod för att "
"kontrollera om händelseslingan är stängd. (Bidrag från Victor Stinner i :"
"issue:`21326`.)"

msgid ""
"A new :meth:`loop.create_task() <asyncio.loop.create_task>` to conveniently "
"create and schedule a new :class:`~asyncio.Task` for a coroutine.  The "
"``create_task`` method is also used by all asyncio functions that wrap "
"coroutines into tasks, such as :func:`asyncio.wait`, :func:`asyncio.gather`, "
"etc. (Contributed by Victor Stinner.)"
msgstr ""
"En ny :meth:`loop.create_task() <asyncio.loop.create_task>` för att enkelt "
"skapa och schemalägga en ny :class:`~asyncio.Task` för en coroutine.  "
"Metoden ``create_task`` används också av alla asynciofunktioner som omsluter "
"coroutines till tasks, till exempel :func:`asyncio.wait`, :func:`asyncio."
"gather`, etc. (Bidrag från Victor Stinner.)"

msgid ""
"A new :meth:`transport.get_write_buffer_limits() <asyncio.WriteTransport."
"get_write_buffer_limits>` method to inquire for *high-* and *low-* water "
"limits of the flow control. (Contributed by Victor Stinner.)"
msgstr ""
"En ny :meth:`transport.get_write_buffer_limits() <asyncio.WriteTransport."
"get_write_buffer_limits>`-metod för att fråga efter *höga* och *låga* "
"vattengränser för flödeskontrollen. (Bidrag från Victor Stinner.)"

msgid ""
"The :func:`~asyncio.async` function is deprecated in favor of :func:"
"`~asyncio.ensure_future`. (Contributed by Yury Selivanov.)"
msgstr ""
"Funktionen :func:`~asyncio.async` är föråldrad till förmån för :func:"
"`~asyncio.ensure_future`. (Bidrag från Yury Selivanov.)"

msgid ""
"New :meth:`loop.set_task_factory() <asyncio.loop.set_task_factory>` and :"
"meth:`loop.get_task_factory() <asyncio.loop.get_task_factory>` methods to "
"customize the task factory that :meth:`loop.create_task() <asyncio.loop."
"create_task>` method uses.  (Contributed by Yury Selivanov.)"
msgstr ""
"Nya metoder :meth:`loop.set_task_factory() <asyncio.loop.set_task_factory>` "
"och :meth:`loop.get_task_factory() <asyncio.loop.get_task_factory>` för att "
"anpassa uppgiftsfabriken som metoden :meth:`loop.create_task() <asyncio.loop."
"create_task>` använder.  (Bidrag från Yury Selivanov.)"

msgid ""
"New :meth:`Queue.join() <asyncio.Queue.join>` and :meth:`Queue.task_done() "
"<asyncio.Queue.task_done>` queue methods. (Contributed by Victor Stinner.)"
msgstr ""
"Nya kömetoder :meth:`Queue.join() <asyncio.Queue.join>` och :meth:`Queue."
"task_done() <asyncio.Queue.task_done>`. (Bidrag från Victor Stinner.)"

msgid ""
"The ``JoinableQueue`` class was removed, in favor of the :class:`asyncio."
"Queue` class. (Contributed by Victor Stinner.)"
msgstr ""
"Klassen ``JoinableQueue`` togs bort till förmån för klassen :class:`asyncio."
"Queue`. (Bidrag från Victor Stinner.)"

msgid "Updates in 3.5.1:"
msgstr "Uppdateringar i 3.5.1:"

msgid ""
"The :func:`~asyncio.ensure_future` function and all functions that use it, "
"such as :meth:`loop.run_until_complete() <asyncio.loop.run_until_complete>`, "
"now accept all kinds of :term:`awaitable objects <awaitable>`. (Contributed "
"by Yury Selivanov.)"
msgstr ""
"Funktionen :func:`~asyncio.ensure_future` och alla funktioner som använder "
"den, till exempel :meth:`loop.run_until_complete() <asyncio.loop."
"run_until_complete>`, accepterar nu alla typer av :term:`awaitable objects "
"<awaitable>`. (Bidrag från Yury Selivanov.)"

msgid ""
"New :func:`~asyncio.run_coroutine_threadsafe` function to submit coroutines "
"to event loops from other threads. (Contributed by Vincent Michel.)"
msgstr ""
"Ny :func:`~asyncio.run_coroutine_threadsafe`-funktion för att skicka "
"coroutines till händelseslingor från andra trådar. (Bidrag från Vincent "
"Michel.)"

msgid ""
"New :meth:`Transport.is_closing() <asyncio.BaseTransport.is_closing>` method "
"to check if the transport is closing or closed. (Contributed by Yury "
"Selivanov.)"
msgstr ""
"Ny :meth:`Transport.is_closing() <asyncio.BaseTransport.is_closing>`-metod "
"för att kontrollera om transporten stängs eller stängs. (Bidrag från Yury "
"Selivanov.)"

msgid ""
"The :meth:`loop.create_server() <asyncio.loop.create_server>` method can now "
"accept a list of hosts. (Contributed by Yann Sionneau.)"
msgstr ""
"Metoden :meth:`loop.create_server() <asyncio.loop.create_server>` kan nu "
"acceptera en lista med värdar. (Bidrag från Yann Sionneau.)"

msgid "Updates in 3.5.2:"
msgstr "Uppdateringar i 3.5.2:"

msgid ""
"New :meth:`loop.create_future() <asyncio.loop.create_future>` method to "
"create Future objects.  This allows alternative event loop implementations, "
"such as `uvloop <https://github.com/MagicStack/uvloop>`_, to provide a "
"faster :class:`asyncio.Future` implementation. (Contributed by Yury "
"Selivanov.)"
msgstr ""
"Ny :meth:`loop.create_future() <asyncio.loop.create_future>`-metod för att "
"skapa Future-objekt.  Detta gör det möjligt för alternativa implementationer "
"av händelseslingor, som `uvloop <https://github.com/MagicStack/uvloop>`_, "
"att tillhandahålla en snabbare :class:`asyncio.Future`-implementation. "
"(Bidrag från Yury Selivanov.)"

msgid ""
"New :meth:`loop.get_exception_handler() <asyncio.loop."
"get_exception_handler>` method to get the current exception handler. "
"(Contributed by Yury Selivanov.)"
msgstr ""
"Ny :meth:`loop.get_exception_handler() <asyncio.loop.get_exception_handler>`-"
"metod för att hämta den aktuella undantagshanteraren. (Bidrag från Yury "
"Selivanov.)"

msgid ""
"New :meth:`StreamReader.readuntil() <asyncio.StreamReader.readuntil>` method "
"to read data from the stream until a separator bytes sequence appears. "
"(Contributed by Mark Korenberg.)"
msgstr ""
"Ny :meth:`StreamReader.readuntil() <asyncio.StreamReader.readuntil>`-metod "
"för att läsa data från strömmen tills en separatorbyte-sekvens visas. "
"(Bidrag från Mark Korenberg.)"

msgid ""
"The :meth:`loop.create_connection() <asyncio.loop.create_connection>` and :"
"meth:`loop.create_server() <asyncio.loop.create_server>` methods are "
"optimized to avoid calling the system ``getaddrinfo`` function if the "
"address is already resolved. (Contributed by A. Jesse Jiryu Davis.)"
msgstr ""
"Metoderna :meth:`loop.create_connection() <asyncio.loop.create_connection>` "
"och :meth:`loop.create_server() <asyncio.loop.create_server>` är optimerade "
"för att undvika att anropa systemets funktion ``getaddrinfo`` om adressen "
"redan är löst. (Bidrag från A. Jesse Jiryu Davis.)"

msgid ""
"The :meth:`loop.sock_connect(sock, address) <asyncio.loop.sock_connect>` no "
"longer requires the *address* to be resolved prior to the call. (Contributed "
"by A. Jesse Jiryu Davis.)"
msgstr ""
":meth:`loop.sock_connect(sock, address) <asyncio.loop.sock_connect>` kräver "
"inte längre att *adressen* löses före anropet. (Bidrag från A. Jesse Jiryu "
"Davis.)"

msgid "bz2"
msgstr "bz2"

msgid ""
"The :meth:`BZ2Decompressor.decompress <bz2.BZ2Decompressor.decompress>` "
"method now accepts an optional *max_length* argument to limit the maximum "
"size of decompressed data. (Contributed by Nikolaus Rath in :issue:`15955`.)"
msgstr ""
"Metoden :meth:`BZ2Decompressor.decompress <bz2.BZ2Decompressor.decompress>` "
"accepterar nu ett valfritt *max_length*-argument för att begränsa den "
"maximala storleken på dekomprimerade data. (Bidrag från Nikolaus Rath i :"
"issue:`15955`.)"

msgid "cgi"
msgstr "cgi"

msgid ""
"The :class:`!FieldStorage` class now supports the :term:`context manager` "
"protocol.  (Contributed by Berker Peksag in :issue:`20289`.)"
msgstr ""
"Klassen :class:`!FieldStorage` har nu stöd för protokollet :term:`context "
"manager`.  (Bidrag från Berker Peksag i :issue:`20289`.)"

msgid "cmath"
msgstr "cmath"

msgid ""
"A new function :func:`~cmath.isclose` provides a way to test for approximate "
"equality.  (Contributed by Chris Barker and Tal Einat in :issue:`24270`.)"
msgstr ""
"En ny funktion :func:`~cmath.isclose` ger ett sätt att testa för ungefärlig "
"likhet.  (Bidrag från Chris Barker och Tal Einat i :issue:`24270`.)"

msgid "code"
msgstr "kod"

msgid ""
"The :func:`InteractiveInterpreter.showtraceback() <code."
"InteractiveInterpreter.showtraceback>` method now prints the full chained "
"traceback, just like the interactive interpreter.  (Contributed by Claudiu "
"Popa in :issue:`17442`.)"
msgstr ""
"Metoden :func:`InteractiveInterpreter.showtraceback() <code."
"InteractiveInterpreter.showtraceback>` skriver nu ut hela den kedjade "
"tracebacken, precis som den interaktiva tolken.  (Bidrag från Claudiu Popa "
"i :issue:`17442`.)"

msgid "collections"
msgstr "samlingar"

msgid ""
"The :class:`~collections.OrderedDict` class is now implemented in C, which "
"makes it 4 to 100 times faster.  (Contributed by Eric Snow in :issue:"
"`16991`.)"
msgstr ""
"Klassen :class:`~collections.OrderedDict` är nu implementerad i C, vilket "
"gör den 4 till 100 gånger snabbare.  (Bidrag från Eric Snow i :issue:"
"`16991`.)"

msgid ""
":meth:`OrderedDict.items() <collections.OrderedDict.items>`, :meth:"
"`OrderedDict.keys() <collections.OrderedDict.keys>`, :meth:`OrderedDict."
"values() <collections.OrderedDict.values>` views now support :func:"
"`reversed` iteration. (Contributed by Serhiy Storchaka in :issue:`19505`.)"
msgstr ""
"vyerna :meth:`OrderedDict.items() <collections.OrderedDict.items>`, :meth:"
"`OrderedDict.keys() <collections.OrderedDict.keys>`, :meth:`OrderedDict."
"values() <collections.OrderedDict.values>` stöder nu :func:`reversed` "
"iteration. (Bidrag från Serhiy Storchaka i :issue:`19505`.)"

msgid ""
"The :class:`~collections.deque` class now defines :meth:`~collections.deque."
"index`, :meth:`~collections.deque.insert`, and :meth:`~collections.deque."
"copy`, and supports the ``+`` and ``*`` operators. This allows deques to be "
"recognized as a :class:`~collections.abc.MutableSequence` and improves their "
"substitutability for lists. (Contributed by Raymond Hettinger in :issue:"
"`23704`.)"
msgstr ""
"Klassen :class:`~collections.deque` definierar nu :meth:`~collections.deque."
"index`, :meth:`~collections.deque.insert`, och :meth:`~collections.deque."
"copy`, och stöder operatorerna ``+`` och ``*``. Detta gör att deques kan "
"identifieras som en :class:`~collections.abc.MutableSequence` och förbättrar "
"deras utbytbarhet mot listor. (Bidrag från Raymond Hettinger i :issue:"
"`23704`.)"

msgid ""
"Docstrings produced by :func:`~collections.namedtuple` can now be updated::"
msgstr ""
"Docstrings producerade av :func:`~collections.namedtuple` kan nu uppdateras::"

msgid ""
"Point = namedtuple('Point', ['x', 'y'])\n"
"Point.__doc__ += ': Cartesian coordinate'\n"
"Point.x.__doc__ = 'abscissa'\n"
"Point.y.__doc__ = 'ordinate'"
msgstr ""
"Point = namedtuple('Point', ['x', 'y'])\n"
"Point.__doc__ += ': Kartesisk koordinat'\n"
"Point.x.__doc__ = 'abscissa'\n"
"Point.y.__doc__ = 'ordinat'"

msgid "(Contributed by Berker Peksag in :issue:`24064`.)"
msgstr "(Bidrag från Berker Peksag i :issue:`24064`.)"

msgid ""
"The :class:`~collections.UserString` class now implements the :meth:"
"`__getnewargs__`, :meth:`__rmod__`, :meth:`~str.casefold`, :meth:`~str."
"format_map`, :meth:`~str.isprintable`, and :meth:`~str.maketrans` methods to "
"match the corresponding methods of :class:`str`. (Contributed by Joe Jevnik "
"in :issue:`22189`.)"
msgstr ""
"Klassen :class:`~collections.UserString` implementerar nu metoderna :meth:"
"`__getnewargs__`, :meth:`__rmod__`, :meth:`~str.casefold`, :meth:`~str."
"format_map`, :meth:`~str.isprintable` och :meth:`~str.maketrans` för att "
"matcha motsvarande metoder i :class:`str`. (Bidrag från Joe Jevnik i :issue:"
"`22189`.)"

msgid "collections.abc"
msgstr "samlingar.abc"

msgid ""
"The :meth:`Sequence.index() <collections.abc.Sequence.index>` method now "
"accepts *start* and *stop* arguments to match the corresponding methods of :"
"class:`tuple`, :class:`list`, etc. (Contributed by Devin Jeanpierre in :"
"issue:`23086`.)"
msgstr ""
"Metoden :meth:`Sequence.index() <collections.abc.Sequence.index>` accepterar "
"nu *start* och *stop* argument för att matcha motsvarande metoder i :class:"
"`tuple`, :class:`list`, etc. (Bidrag från Devin Jeanpierre i :issue:`23086`.)"

msgid ""
"A new :class:`~collections.abc.Generator` abstract base class. (Contributed "
"by Stefan Behnel in :issue:`24018`.)"
msgstr ""
"En ny :class:`~collections.abc.Generator` abstrakt basklass. (Bidrag från "
"Stefan Behnel i :issue:`24018`.)"

msgid ""
"New :class:`~collections.abc.Awaitable`, :class:`~collections.abc."
"Coroutine`, :class:`~collections.abc.AsyncIterator`, and :class:"
"`~collections.abc.AsyncIterable` abstract base classes. (Contributed by Yury "
"Selivanov in :issue:`24184`.)"
msgstr ""
"Nya :class:`~collections.abc.Awaitable`, :class:`~collections.abc."
"Coroutine`, :class:`~collections.abc.AsyncIterator`, och :class:"
"`~collections.abc.AsyncIterable` abstrakta basklasser. (Bidrag från Yury "
"Selivanov i :issue:`24184`.)"

msgid ""
"For earlier Python versions, a backport of the new ABCs is available in an "
"external :pypi:`PyPI package <backports_abc>`."
msgstr ""
"För tidigare Python-versioner finns en backport av de nya ABC:erna i ett "
"externt :pypi:`PyPI-paket <backports_abc>`."

msgid "compileall"
msgstr "kompilera alla"

msgid ""
"A new :mod:`compileall` option, :samp:`-j {N}`, allows running *N* workers "
"simultaneously to perform parallel bytecode compilation. The :func:"
"`~compileall.compile_dir` function has a corresponding ``workers`` "
"parameter.  (Contributed by Claudiu Popa in :issue:`16104`.)"
msgstr ""
"Ett nytt :mod:`compileall`-alternativ, :samp:`-j {N}`, gör det möjligt att "
"köra *N* arbetare samtidigt för att utföra parallell bytekodkompilering. "
"Funktionen :func:`~compileall.compile_dir` har en motsvarande parameter för "
"``workers``.  (Bidrag från Claudiu Popa i :issue:`16104`.)"

msgid ""
"Another new option, ``-r``, allows controlling the maximum recursion level "
"for subdirectories.  (Contributed by Claudiu Popa in :issue:`19628`.)"
msgstr ""
"Ett annat nytt alternativ, ``-r``, gör det möjligt att kontrollera den "
"maximala rekursionsnivån för underkataloger.  (Bidrag från Claudiu Popa i :"
"issue:`19628`.)"

msgid ""
"The ``-q`` command line option can now be specified more than once, in which "
"case all output, including errors, will be suppressed.  The corresponding "
"``quiet`` parameter in :func:`~compileall.compile_dir`, :func:`~compileall."
"compile_file`, and :func:`~compileall.compile_path` can now accept an "
"integer value indicating the level of output suppression. (Contributed by "
"Thomas Kluyver in :issue:`21338`.)"
msgstr ""
"Kommandoradsalternativet ``-q`` kan nu anges mer än en gång, i vilket fall "
"alla utdata, inklusive fel, kommer att undertryckas.  Motsvarande ``quiet``-"
"parameter i :func:`~compileall.compile_dir`, :func:`~compileall."
"compile_file` och :func:`~compileall.compile_path` kan nu acceptera ett "
"heltalsvärde som anger nivån på undertryckningen av utdata. (Bidrag från "
"Thomas Kluyver i :issue:`21338`.)"

msgid "concurrent.futures"
msgstr "concurrent.futures"

msgid ""
"The :meth:`Executor.map() <concurrent.futures.Executor.map>` method now "
"accepts a *chunksize* argument to allow batching of tasks to improve "
"performance when :meth:`~concurrent.futures.ProcessPoolExecutor` is used. "
"(Contributed by Dan O'Reilly in :issue:`11271`.)"
msgstr ""
"Metoden :meth:`Executor.map() <concurrent.futures.Executor.map>` accepterar "
"nu ett *chunksize*-argument för att tillåta batchning av uppgifter för att "
"förbättra prestanda när :meth:`~concurrent.futures.ProcessPoolExecutor` "
"används. (Bidrag från Dan O'Reilly i :issue:`11271`.)"

msgid ""
"The number of workers in the :class:`~concurrent.futures.ThreadPoolExecutor` "
"constructor is optional now.  The default value is 5 times the number of "
"CPUs. (Contributed by Claudiu Popa in :issue:`21527`.)"
msgstr ""
"Antalet arbetare i :class:`~concurrent.futures.ThreadPoolExecutor`-"
"konstruktören är nu valfritt.  Standardvärdet är 5 gånger antalet "
"processorer. (Bidrag från Claudiu Popa i :issue:`21527`.)"

msgid "configparser"
msgstr "konfigurationsanalysator"

msgid ""
":mod:`configparser` now provides a way to customize the conversion of values "
"by specifying a dictionary of converters in the :class:`~configparser."
"ConfigParser` constructor, or by defining them as methods in "
"``ConfigParser`` subclasses.  Converters defined in a parser instance are "
"inherited by its section proxies."
msgstr ""
":mod:`configparser` ger nu möjlighet att anpassa konverteringen av värden "
"genom att ange en ordlista med konverterare i konstruktören :class:"
"`~configparser.ConfigParser`, eller genom att definiera dem som metoder i "
"underklasser till ``ConfigParser``.  Omvandlare som definieras i en "
"parserinstans ärvs av dess sektionsproxies."

msgid "Example::"
msgstr "Exempel::"

msgid ""
">>> import configparser\n"
">>> conv = {}\n"
">>> conv['list'] = lambda v: [e.strip() for e in v.split() if e.strip()]\n"
">>> cfg = configparser.ConfigParser(converters=conv)\n"
">>> cfg.read_string(\"\"\"\n"
"... [s]\n"
"... list = a b c d e f g\n"
"... \"\"\")\n"
">>> cfg.get('s', 'list')\n"
"'a b c d e f g'\n"
">>> cfg.getlist('s', 'list')\n"
"['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
">>> section = cfg['s']\n"
">>> section.getlist('list')\n"
"['a', 'b', 'c', 'd', 'e', 'f', 'g']"
msgstr ""
">>> import configparser\n"
">>> conv = {}\n"
">>> conv['list'] = lambda v: [e.strip() for e in v.split() if e.strip()]\n"
">>> cfg = configparser.ConfigParser(omvandlare=conv)\n"
">>> cfg.read_string(\"\"\"\n"
"... [s]\n"
"... list = a b c d e f g\n"
"... \"\"\")\n"
">>> cfg.get('s', 'list')\n"
"'a b c d e f g'\n"
">>> cfg.getlist('s', 'list')\n"
"['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
">>> avsnitt = cfg['s']\n"
">>> sektion.getlist('list')\n"
"['a', 'b', 'c', 'd', 'e', 'f', 'g']"

msgid "(Contributed by Łukasz Langa in :issue:`18159`.)"
msgstr "(Bidrag från Łukasz Langa i :issue:`18159`.)"

msgid "contextlib"
msgstr "contextlib"

msgid ""
"The new :func:`~contextlib.redirect_stderr` :term:`context manager` (similar "
"to :func:`~contextlib.redirect_stdout`) makes it easier for utility scripts "
"to handle inflexible APIs that write their output to :data:`sys.stderr` and "
"don't provide any options to redirect it::"
msgstr ""
"Den nya :func:`~contextlib.redirect_stderr` :term:`context manager` "
"(liknande :func:`~contextlib.redirect_stdout`) gör det lättare för "
"verktygsskript att hantera oflexibla API:er som skriver utdata till :data:"
"`sys.stderr` och inte ger några alternativ för att omdirigera den:"

msgid ""
">>> import contextlib, io, logging\n"
">>> f = io.StringIO()\n"
">>> with contextlib.redirect_stderr(f):\n"
"...     logging.warning('warning')\n"
"...\n"
">>> f.getvalue()\n"
"'WARNING:root:warning\\n'"
msgstr ""
">>> import contextlib, io, loggning\n"
">>> f = io.StringIO()\n"
">>> med contextlib.redirect_stderr(f):\n"
"... loggning.varning('varning')\n"
"...\n"
">>> f.getvalue()\n"
"'VARNING:rot:varning\\n'"

msgid "(Contributed by Berker Peksag in :issue:`22389`.)"
msgstr "(Bidrag från Berker Peksag i :issue:`22389`.)"

msgid "csv"
msgstr "csv"

msgid ""
"The :meth:`~csv.csvwriter.writerow` method now supports arbitrary iterables, "
"not just sequences.  (Contributed by Serhiy Storchaka in :issue:`23171`.)"
msgstr ""
"Metoden :meth:`~csv.csvwriter.writerow` stöder nu godtyckliga iterabler, "
"inte bara sekvenser.  (Bidrag från Serhiy Storchaka i :issue:`23171`.)"

msgid "curses"
msgstr "förbannelser"

msgid ""
"The new :func:`~curses.update_lines_cols` function updates the :data:`LINES` "
"and :data:`COLS` module variables.  This is useful for detecting manual "
"screen resizing.  (Contributed by Arnon Yaari in :issue:`4254`.)"
msgstr ""
"Den nya funktionen :func:`~curses.update_lines_cols` uppdaterar "
"modulvariablerna :data:`LINES` och :data:`COLS`.  Detta är användbart för "
"att upptäcka manuella skärmstorleksändringar. (Bidrag från Arnon Yaari i :"
"issue:`4254`.)"

msgid "dbm"
msgstr "dbm"

msgid ""
":func:`dumb.open <dbm.dumb.open>` always creates a new database when the "
"flag has the value ``\"n\"``.  (Contributed by Claudiu Popa in :issue:"
"`18039`.)"
msgstr ""
":func:`dumb.open <dbm.dumb.open>` skapar alltid en ny databas när flaggan "
"har värdet ``\"n\"``.  (Bidrag från Claudiu Popa i :issue:`18039`.)"

msgid "difflib"
msgstr "difflib"

msgid ""
"The charset of HTML documents generated by :meth:`HtmlDiff.make_file() "
"<difflib.HtmlDiff.make_file>` can now be customized by using a new *charset* "
"keyword-only argument. The default charset of HTML document changed from "
"``\"ISO-8859-1\"`` to ``\"utf-8\"``. (Contributed by Berker Peksag in :issue:"
"`2052`.)"
msgstr ""
"Teckensnittet för HTML-dokument som genereras av :meth:`HtmlDiff.make_file() "
"<difflib.HtmlDiff.make_file>` kan nu anpassas med hjälp av ett nytt "
"*charset* argument som endast innehåller nyckelord. Standardteckensnittet "
"för HTML-dokument ändrades från ``\"ISO-8859-1\"`` till ``\"utf-8\"``. "
"(Bidrag från Berker Peksag i :issue:`2052`.)"

msgid ""
"The :func:`~difflib.diff_bytes` function can now compare lists of byte "
"strings.  This fixes a regression from Python 2. (Contributed by Terry J. "
"Reedy and Greg Ward in :issue:`17445`.)"
msgstr ""
"Funktionen :func:`~difflib.diff_bytes` kan nu jämföra listor med "
"bytesträngar.  Detta åtgärdar en regression från Python 2. (Bidrag från "
"Terry J. Reedy och Greg Ward i :issue:`17445`.)"

msgid "distutils"
msgstr "distutils"

msgid ""
"Both the ``build`` and ``build_ext`` commands now accept a ``-j`` option to "
"enable parallel building of extension modules. (Contributed by Antoine "
"Pitrou in :issue:`5309`.)"
msgstr ""
"Både kommandona ``build`` och ``build_ext`` accepterar nu alternativet ``-"
"j`` för att möjliggöra parallell byggnation av tilläggsmoduler. (Bidrag från "
"Antoine Pitrou i :issue:`5309`.)"

msgid ""
"The ``distutils`` module now supports ``xz`` compression, and can be enabled "
"by passing ``xztar`` as an argument to ``bdist --format``. (Contributed by "
"Serhiy Storchaka in :issue:`16314`.)"
msgstr ""
"Modulen ``distutils`` stöder nu ``xz``-komprimering och kan aktiveras genom "
"att skicka ``xztar`` som ett argument till ``bdist --format``. (Bidrag från "
"Serhiy Storchaka i :issue:`16314`.)"

msgid "doctest"
msgstr "doktest"

msgid ""
"The :func:`~doctest.DocTestSuite` function returns an empty :class:`unittest."
"TestSuite` if *module* contains no docstrings, instead of raising :exc:"
"`ValueError`.  (Contributed by Glenn Jones in :issue:`15916`.)"
msgstr ""
"Funktionen :func:`~doctest.DocTestSuite` returnerar en tom :class:`unittest."
"TestSuite` om *modul* inte innehåller några docstrings, istället för att ge "
"upphov till :exc:`ValueError`.  (Bidrag från Glenn Jones i :issue:`15916`.)"

msgid "email"
msgstr "e-post"

msgid ""
"A new policy option :attr:`Policy.mangle_from_ <email.policy.Policy."
"mangle_from_>` controls whether or not lines that start with ``\"From \"`` "
"in email bodies are prefixed with a ``\">\"`` character by generators.  The "
"default is ``True`` for :attr:`~email.policy.compat32` and ``False`` for all "
"other policies. (Contributed by Milan Oberkirch in :issue:`20098`.)"
msgstr ""
"Ett nytt policyalternativ :attr:`Policy.mangle_from_ <email.policy.Policy."
"mangle_from_>` styr om rader som börjar med ``\"From\"`` i e-posttexter ska "
"föregås av ett ``\">\"``-tecken av generatorer.  Standardvärdet är ``True`` "
"för :attr:`~email.policy.compat32` och ``False`` för alla andra policyer. "
"(Bidrag från Milan Oberkirch i :issue:`20098`.)"

msgid ""
"A new :meth:`Message.get_content_disposition() <email.message.Message."
"get_content_disposition>` method provides easy access to a canonical value "
"for the :mailheader:`Content-Disposition` header. (Contributed by Abhilash "
"Raj in :issue:`21083`.)"
msgstr ""
"En ny :meth:`Message.get_content_disposition() <email.message.Message."
"get_content_disposition>`-metod ger enkel åtkomst till ett kanoniskt värde "
"för :mailheader:`Content-Disposition`-huvudet. (Bidrag från Abhilash Raj i :"
"issue:`21083`.)"

msgid ""
"A new policy option :attr:`EmailPolicy.utf8 <email.policy.EmailPolicy.utf8>` "
"can be set to ``True`` to encode email headers using the UTF-8 charset "
"instead of using encoded words.  This allows ``Messages`` to be formatted "
"according to :rfc:`6532` and used with an SMTP server that supports the :rfc:"
"`6531` ``SMTPUTF8`` extension.  (Contributed by R. David Murray in :issue:"
"`24211`.)"
msgstr ""
"Ett nytt policyalternativ :attr:`EmailPolicy.utf8 <email.policy.EmailPolicy."
"utf8>` kan sättas till ``True`` för att koda e-postrubriker med UTF-8-"
"teckensnittet istället för att använda kodade ord.  Detta gör att "
"``Messages`` kan formateras enligt :rfc:`6532` och användas med en SMTP-"
"server som stöder tillägget :rfc:`6531` ``SMTPUTF8``.  (Bidrag från R. David "
"Murray i :issue:`24211`.)"

msgid ""
"The :class:`mime.text.MIMEText <email.mime.text.MIMEText>` constructor now "
"accepts a :class:`charset.Charset <email.charset.Charset>` instance. "
"(Contributed by Claude Paroz and Berker Peksag in :issue:`16324`.)"
msgstr ""
"Konstruktorn :class:`mime.text.MIMEText <email.mime.text.MIMEText>` "
"accepterar nu en instans av :class:`charset.Charset <email.charset."
"Charset>`. (Bidrag från Claude Paroz och Berker Peksag i :issue:`16324`.)"

msgid "enum"
msgstr "enum"

msgid ""
"The :class:`~enum.Enum` callable has a new parameter *start* to specify the "
"initial number of enum values if only *names* are provided::"
msgstr ""
"Den anropsbara :class:`~enum.Enum` har en ny parameter *start* för att ange "
"det initiala antalet enumvärden om endast *names* anges::"

msgid ""
">>> Animal = enum.Enum('Animal', 'cat dog', start=10)\n"
">>> Animal.cat\n"
"<Animal.cat: 10>\n"
">>> Animal.dog\n"
"<Animal.dog: 11>"
msgstr ""
">>> Animal = enum.Enum('Animal', 'katt hund', start=10)\n"
">>> Djur.katt\n"
"<Animal.katt: 10>\n"
">>> Djur.hund\n"
"<Animal.hund: 11>"

msgid "(Contributed by Ethan Furman in :issue:`21706`.)"
msgstr "(Bidrag från Ethan Furman i :issue:`21706`.)"

msgid "faulthandler"
msgstr "felhanterare"

msgid ""
"The :func:`~faulthandler.enable`, :func:`~faulthandler.register`, :func:"
"`~faulthandler.dump_traceback` and :func:`~faulthandler."
"dump_traceback_later` functions now accept file descriptors in addition to "
"file-like objects. (Contributed by Wei Wu in :issue:`23566`.)"
msgstr ""
"Funktionerna :func:`~faulthandler.enable`, :func:`~faulthandler.register`, :"
"func:`~faulthandler.dump_traceback` och :func:`~faulthandler."
"dump_traceback_later` accepterar nu filbeskrivare i tillägg till filliknande "
"objekt. (Bidrag från Wei Wu i :issue:`23566`.)"

msgid "functools"
msgstr "functools"

msgid ""
"Most of the :func:`~functools.lru_cache` machinery is now implemented in C, "
"making it significantly faster.  (Contributed by Matt Joiner, Alexey "
"Kachayev, and Serhiy Storchaka in :issue:`14373`.)"
msgstr ""
"Det mesta av :func:`~functools.lru_cache`-maskineriet är nu implementerat i "
"C, vilket gör det betydligt snabbare.  (Bidrag från Matt Joiner, Alexey "
"Kachayev och Serhiy Storchaka i :issue:`14373`.)"

msgid "glob"
msgstr "klot"

msgid ""
"The :func:`~glob.iglob` and :func:`~glob.glob` functions now support "
"recursive search in subdirectories, using the ``\"**\"`` pattern. "
"(Contributed by Serhiy Storchaka in :issue:`13968`.)"
msgstr ""
"Funktionerna :func:`~glob.iglob` och :func:`~glob.glob` stöder nu rekursiv "
"sökning i underkataloger med hjälp av mönstret ``\"**\"``. (Bidrag från "
"Serhiy Storchaka i :issue:`13968`.)"

msgid "gzip"
msgstr "gzip"

msgid ""
"The *mode* argument of the :class:`~gzip.GzipFile` constructor now accepts "
"``\"x\"`` to request exclusive creation. (Contributed by Tim Heaney in :"
"issue:`19222`.)"
msgstr ""
"Argumentet *mode* i :class:`~gzip.GzipFile`-konstruktören accepterar nu "
"``\"x\"`` för att begära exklusiv skapelse. (Bidrag från Tim Heaney i :issue:"
"`19222`.)"

msgid "heapq"
msgstr "heapq"

msgid ""
"Element comparison in :func:`~heapq.merge` can now be customized by passing "
"a :term:`key function` in a new optional *key* keyword argument, and a new "
"optional *reverse* keyword argument can be used to reverse element "
"comparison::"
msgstr ""
"Elementjämförelse i :func:`~heapq.merge` kan nu anpassas genom att skicka "
"en :term:`key function` i ett nytt valfritt *key* nyckelordsargument, och "
"ett nytt valfritt *reverse* nyckelordsargument kan användas för att vända "
"elementjämförelsen::"

msgid ""
">>> import heapq\n"
">>> a = ['9', '777', '55555']\n"
">>> b = ['88', '6666']\n"
">>> list(heapq.merge(a, b, key=len))\n"
"['9', '88', '777', '6666', '55555']\n"
">>> list(heapq.merge(reversed(a), reversed(b), key=len, reverse=True))\n"
"['55555', '6666', '777', '88', '9']"
msgstr ""
">>> import heapq\n"
">>> a = ['9', '777', '55555']\n"
">>> b = ['88', '6666']\n"
">>> list(heapq.merge(a, b, key=len))\n"
"['9', '88', '777', '6666', '55555']\n"
">>> list(heapq.merge(reversed(a), reversed(b), key=len, reverse=True))\n"
"['55555', '6666', '777', '88', '9']"

msgid "(Contributed by Raymond Hettinger in :issue:`13742`.)"
msgstr "(Bidrag från Raymond Hettinger i :issue:`13742`.)"

msgid "http"
msgstr "http"

msgid ""
"A new :class:`HTTPStatus <http.HTTPStatus>` enum that defines a set of HTTP "
"status codes, reason phrases and long descriptions written in English. "
"(Contributed by Demian Brecht in :issue:`21793`.)"
msgstr ""
"En ny :class:`HTTPStatus <http.HTTPStatus>` enum som definierar en "
"uppsättning HTTP-statuskoder, orsaksfraser och långa beskrivningar skrivna "
"på engelska. (Bidrag från Demian Brecht i :issue:`21793`.)"

msgid "http.client"
msgstr "http.klient"

msgid ""
":meth:`HTTPConnection.getresponse() <http.client.HTTPConnection."
"getresponse>` now raises a :exc:`~http.client.RemoteDisconnected` exception "
"when a remote server connection is closed unexpectedly.  Additionally, if a :"
"exc:`ConnectionError` (of which ``RemoteDisconnected`` is a subclass) is "
"raised, the client socket is now closed automatically, and will reconnect on "
"the next request::"
msgstr ""
":meth:`HTTPConnection.getresponse() <http.client.HTTPConnection."
"getresponse>` ger nu upphov till ett :exc:`~http.client.RemoteDisconnected` "
"undantag när en fjärrserveranslutning oväntat stängs.  Dessutom, om ett :exc:"
"`ConnectionError` (som ``RemoteDisconnected`` är en underklass till) "
"uppstår, stängs nu klientuttaget automatiskt och återansluts vid nästa "
"begäran:"

msgid ""
"import http.client\n"
"conn = http.client.HTTPConnection('www.python.org')\n"
"for retries in range(3):\n"
"    try:\n"
"        conn.request('GET', '/')\n"
"        resp = conn.getresponse()\n"
"    except http.client.RemoteDisconnected:\n"
"        pass"
msgstr ""
"import http.client\n"
"conn = http.client.HTTPConnection('www.python.org')\n"
"för retries i intervall(3):\n"
"    försök:\n"
"        conn.request('GET', '/')\n"
"        resp = conn.getresponse()\n"
"    except http.client.RemoteDisconnected:\n"
"        pass"

msgid "(Contributed by Martin Panter in :issue:`3566`.)"
msgstr "(Bidrag från Martin Panter i :issue:`3566`.)"

msgid "idlelib and IDLE"
msgstr "idlelib och IDLE"

msgid ""
"Since idlelib implements the IDLE shell and editor and is not intended for "
"import by other programs, it gets improvements with every release.  See :"
"file:`Lib/idlelib/NEWS.txt` for a cumulative list of changes since 3.4.0, as "
"well as changes made in future 3.5.x releases. This file is also available "
"from the IDLE :menuselection:`Help --> About IDLE` dialog."
msgstr ""
"Eftersom idlelib implementerar IDLE:s skal och redigerare och inte är avsett "
"att importeras av andra program, förbättras det för varje utgåva.  Se :file:"
"`Lib/idlelib/NEWS.txt` för en kumulativ lista över ändringar sedan 3.4.0, "
"samt ändringar som görs i framtida 3.5.x utgåvor. Den här filen är också "
"tillgänglig från IDLE:s :menuselection:`Hjälp --> Om IDLE`-dialogruta."

msgid "imaplib"
msgstr "imaplib"

msgid ""
"The :class:`~imaplib.IMAP4` class now supports the :term:`context manager` "
"protocol. When used in a :keyword:`with` statement, the IMAP4 ``LOGOUT`` "
"command will be called automatically at the end of the block. (Contributed "
"by Tarek Ziadé and Serhiy Storchaka in :issue:`4972`.)"
msgstr ""
"Klassen :class:`~imaplib.IMAP4` har nu stöd för protokollet :term:`context "
"manager`. När det används i en :keyword:`with`-sats kommer IMAP4-kommandot "
"``LOGOUT`` att anropas automatiskt i slutet av blocket. (Bidrag från Tarek "
"Ziadé och Serhiy Storchaka i :issue:`4972`.)"

msgid ""
"The :mod:`imaplib` module now supports :rfc:`5161` (ENABLE Extension) and :"
"rfc:`6855` (UTF-8 Support) via the :meth:`IMAP4.enable() <imaplib.IMAP4."
"enable>` method.  A new :attr:`IMAP4.utf8_enabled <imaplib.IMAP4."
"utf8_enabled>` attribute tracks whether or not :rfc:`6855` support is "
"enabled. (Contributed by Milan Oberkirch, R. David Murray, and Maciej Szulik "
"in :issue:`21800`.)"
msgstr ""
"Modulen :mod:`imaplib` stöder nu :rfc:`5161` (ENABLE Extension) och :rfc:"
"`6855` (UTF-8 Support) via metoden :meth:`IMAP4.enable() <imaplib.IMAP4."
"enable>`.  Ett nytt attribut :attr:`IMAP4.utf8_enabled <imaplib.IMAP4."
"utf8_enabled>` spårar om stöd för :rfc:`6855` är aktiverat eller inte. "
"(Bidrag från Milan Oberkirch, R. David Murray och Maciej Szulik i :issue:"
"`21800`.)"

msgid ""
"The :mod:`imaplib` module now automatically encodes non-ASCII string "
"usernames and passwords using UTF-8, as recommended by the RFCs.  "
"(Contributed by Milan Oberkirch in :issue:`21800`.)"
msgstr ""
"Modulen :mod:`imaplib` kodar nu automatiskt användarnamn och lösenord i icke-"
"ASCII-strängar med UTF-8, enligt RFC:s rekommendationer.  (Bidrag från Milan "
"Oberkirch i :issue:`21800`.)"

msgid "imghdr"
msgstr "imghdr"

msgid ""
"The :func:`!what` function now recognizes the `OpenEXR <https://www.openexr."
"com>`_ format (contributed by Martin Vignali and Claudiu Popa in :issue:"
"`20295`), and the `WebP <https://en.wikipedia.org/wiki/WebP>`_ format "
"(contributed by Fabrice Aneche and Claudiu Popa in :issue:`20197`.)"
msgstr ""
"Funktionen :func:`!what` känner nu igen formatet `OpenEXR <https://www."
"openexr.com>`_ (bidrag från Martin Vignali och Claudiu Popa i :issue:"
"`20295`) och formatet `WebP <https://en.wikipedia.org/wiki/WebP>`_ (bidrag "
"från Fabrice Aneche och Claudiu Popa i :issue:`20197`)"

msgid "importlib"
msgstr "importlib"

msgid ""
"The :class:`util.LazyLoader <importlib.util.LazyLoader>` class allows for "
"lazy loading of modules in applications where startup time is important. "
"(Contributed by Brett Cannon in :issue:`17621`.)"
msgstr ""
"Klassen :class:`util.LazyLoader <importlib.util.LazyLoader>` möjliggör "
"latladdning av moduler i applikationer där starttiden är viktig. (Bidrag "
"från Brett Cannon i :issue:`17621`.)"

msgid ""
"The :func:`abc.InspectLoader.source_to_code() <importlib.abc.InspectLoader."
"source_to_code>` method is now a static method.  This makes it easier to "
"initialize a module object with code compiled from a string by running "
"``exec(code, module.__dict__)``. (Contributed by Brett Cannon in :issue:"
"`21156`.)"
msgstr ""
"Metoden :func:`abc.InspectLoader.source_to_code() <importlib.abc."
"InspectLoader.source_to_code>` är nu en statisk metod.  Detta gör det "
"enklare att initiera ett modulobjekt med kod som kompilerats från en sträng "
"genom att köra ``exec(code, module.__dict__)``. (Bidrag från Brett Cannon i :"
"issue:`21156`.)"

msgid ""
"The new :func:`util.module_from_spec() <importlib.util.module_from_spec>` "
"function is now the preferred way to create a new module.  As opposed to "
"creating a :class:`types.ModuleType` instance directly, this new function "
"will set the various import-controlled attributes based on the passed-in "
"spec object.  (Contributed by Brett Cannon in :issue:`20383`.)"
msgstr ""
"Den nya funktionen :func:`util.module_from_spec() <importlib.util."
"module_from_spec>` är nu det föredragna sättet att skapa en ny modul.  I "
"motsats till att skapa en :class:`types.ModuleType`-instans direkt, kommer "
"den här nya funktionen att ställa in de olika importkontrollerade attributen "
"baserat på det inskickade spec-objektet.  (Bidrag från Brett Cannon i :issue:"
"`20383`.)"

msgid "inspect"
msgstr "inspektera"

msgid ""
"Both the :class:`~inspect.Signature` and :class:`~inspect.Parameter` classes "
"are now picklable and hashable.  (Contributed by Yury Selivanov in :issue:"
"`20726` and :issue:`20334`.)"
msgstr ""
"Både klasserna :class:`~inspect.Signature` och :class:`~inspect.Parameter` "
"är nu picklable och hashable.  (Bidrag från Yury Selivanov i :issue:`20726` "
"och :issue:`20334`.)"

msgid ""
"A new :meth:`BoundArguments.apply_defaults() <inspect.BoundArguments."
"apply_defaults>` method provides a way to set default values for missing "
"arguments::"
msgstr ""
"En ny metod :meth:`BoundArguments.apply_defaults() <inspect.BoundArguments."
"apply_defaults>` ger möjlighet att ange standardvärden för saknade argument::"

msgid ""
">>> def foo(a, b='ham', *args): pass\n"
">>> ba = inspect.signature(foo).bind('spam')\n"
">>> ba.apply_defaults()\n"
">>> ba.arguments\n"
"OrderedDict([('a', 'spam'), ('b', 'ham'), ('args', ())])"
msgstr ""
">>> def foo(a, b='ham', *args): pass\n"
">>> ba = inspektera.signatur(foo).bind('spam')\n"
">>> ba.apply_defaults()\n"
">>> ba.argument\n"
"OrderedDict([('a', 'spam'), ('b', 'ham'), ('args', ())])"

msgid "(Contributed by Yury Selivanov in :issue:`24190`.)"
msgstr "(Bidrag från Yury Selivanov i :issue:`24190`.)"

msgid ""
"A new class method :meth:`Signature.from_callable() <inspect.Signature."
"from_callable>` makes subclassing of :class:`~inspect.Signature` easier.  "
"(Contributed by Yury Selivanov and Eric Snow in :issue:`17373`.)"
msgstr ""
"En ny klassmetod :meth:`Signature.from_callable() <inspect.Signature."
"from_callable>` gör det enklare att underklassa :class:`~inspect."
"Signature`.  (Bidrag från Yury Selivanov och Eric Snow i :issue:`17373`.)"

msgid ""
"The :func:`~inspect.signature` function now accepts a *follow_wrapped* "
"optional keyword argument, which, when set to ``False``, disables automatic "
"following of ``__wrapped__`` links. (Contributed by Yury Selivanov in :issue:"
"`20691`.)"
msgstr ""
"Funktionen :func:`~inspect.signature` accepterar nu ett *follow_wrapped* "
"valfritt nyckelordsargument, som när det sätts till ``False`` inaktiverar "
"automatisk följning av ``__wrapped__`` länkar. (Bidrag från Yury Selivanov "
"i :issue:`20691`.)"

msgid ""
"A set of new functions to inspect :term:`coroutine functions <coroutine "
"function>` and :term:`coroutine objects <coroutine>` has been added: :func:"
"`~inspect.iscoroutine`, :func:`~inspect.iscoroutinefunction`, :func:"
"`~inspect.isawaitable`, :func:`~inspect.getcoroutinelocals`, and :func:"
"`~inspect.getcoroutinestate`. (Contributed by Yury Selivanov in :issue:"
"`24017` and :issue:`24400`.)"
msgstr ""
"En uppsättning nya funktioner för att inspektera :term:`coroutine functions "
"<coroutine function>` och :term:`coroutine objects <coroutine>` har lagts "
"till: :func:`~inspect.iscoroutine`, :func:`~inspect.iscoroutinefunction`, :"
"func:`~inspect.isawaitable`, :func:`~inspect.getcoroutinelocals`, och :func:"
"`~inspect.getcoroutinestate`. (Bidrag från Yury Selivanov i :issue:`24017` "
"och :issue:`24400`.)"

msgid ""
"The :func:`~inspect.stack`, :func:`~inspect.trace`, :func:`~inspect."
"getouterframes`, and :func:`~inspect.getinnerframes` functions now return a "
"list of named tuples. (Contributed by Daniel Shahaf in :issue:`16808`.)"
msgstr ""
"Funktionerna :func:`~inspect.stack`, :func:`~inspect.trace`, :func:`~inspect."
"getouterframes` och :func:`~inspect.getinnerframes` returnerar nu en lista "
"med namngivna tupler. (Bidrag från Daniel Shahaf i :issue:`16808`.)"

msgid "io"
msgstr "io"

msgid ""
"A new :meth:`BufferedIOBase.readinto1() <io.BufferedIOBase.readinto1>` "
"method, that uses at most one call to the underlying raw stream's :meth:"
"`RawIOBase.read() <io.RawIOBase.read>` or :meth:`RawIOBase.readinto() <io."
"RawIOBase.readinto>` methods. (Contributed by Nikolaus Rath in :issue:"
"`20578`.)"
msgstr ""
"En ny :meth:`BufferedIOBase.readinto1() <io.BufferedIOBase.readinto1>`-"
"metod, som använder högst ett anrop till den underliggande råströmmens :meth:"
"`RawIOBase.read() <io.RawIOBase.read>`- eller :meth:`RawIOBase.readinto() "
"<io.RawIOBase.readinto>`-metoder. (Bidrag från Nikolaus Rath i :issue:"
"`20578`.)"

msgid "ipaddress"
msgstr "ipadress"

msgid ""
"Both the :class:`~ipaddress.IPv4Network` and :class:`~ipaddress.IPv6Network` "
"classes now accept an ``(address, netmask)`` tuple argument, so as to easily "
"construct network objects from existing addresses::"
msgstr ""
"Både klasserna :class:`~ipaddress.IPv4Network` och :class:`~ipaddress."
"IPv6Network` accepterar nu ett tuple-argument ``(adress, nätmask)``, så att "
"man enkelt kan konstruera nätverksobjekt från befintliga adresser::"

msgid ""
">>> import ipaddress\n"
">>> ipaddress.IPv4Network(('127.0.0.0', 8))\n"
"IPv4Network('127.0.0.0/8')\n"
">>> ipaddress.IPv4Network(('127.0.0.0', '255.0.0.0'))\n"
"IPv4Network('127.0.0.0/8')"
msgstr ""
">>> import ipaddress\n"
">>> ipaddress.IPv4Nätverk(('127.0.0.0', 8))\n"
"IPv4Network('127.0.0.0/8')\n"
">>> ipaddress.IPv4Network(('127.0.0.0', '255.0.0.0'))\n"
"IPv4Network('127.0.0.0/8')"

msgid "(Contributed by Peter Moody and Antoine Pitrou in :issue:`16531`.)"
msgstr "(Bidrag från Peter Moody och Antoine Pitrou i :issue:`16531`.)"

msgid ""
"A new :attr:`~ipaddress.IPv4Network.reverse_pointer` attribute for the :"
"class:`~ipaddress.IPv4Network` and :class:`~ipaddress.IPv6Network` classes "
"returns the name of the reverse DNS PTR record::"
msgstr ""
"Ett nytt attribut :attr:`~ipaddress.IPv4Network.reverse_pointer` för "
"klasserna :class:`~ipaddress.IPv4Network` och :class:`~ipaddress."
"IPv6Network` returnerar namnet på den omvända DNS PTR-posten::"

msgid ""
">>> import ipaddress\n"
">>> addr = ipaddress.IPv4Address('127.0.0.1')\n"
">>> addr.reverse_pointer\n"
"'1.0.0.127.in-addr.arpa'\n"
">>> addr6 = ipaddress.IPv6Address('::1')\n"
">>> addr6.reverse_pointer\n"
"'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa'"
msgstr ""
">>> import ipaddress\n"
">>> addr = ipaddress.IPv4Address('127.0.0.1')\n"
">>> addr.omvänd_pekare\n"
"'1.0.0.127.in-addr.arpa'\n"
">>> addr6 = ipaddress.IPv6Address('::1')\n"
">>> addr6.omvänd_pekare\n"
"'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa'"

msgid "(Contributed by Leon Weber in :issue:`20480`.)"
msgstr "(Bidrag från Leon Weber i :issue:`20480`.)"

msgid "json"
msgstr "json"

msgid ""
"The :mod:`json.tool` command line interface now preserves the order of keys "
"in JSON objects passed in input.  The new ``--sort-keys`` option can be used "
"to sort the keys alphabetically. (Contributed by Berker Peksag in :issue:"
"`21650`.)"
msgstr ""
"Kommandoradsgränssnittet :mod:`json.tool` bevarar nu ordningen på nycklarna "
"i JSON-objekt som skickas som indata.  Det nya alternativet ``--sort-keys`` "
"kan användas för att sortera nycklarna i alfabetisk ordning. (Bidrag från "
"Berker Peksag i :issue:`21650`.)"

msgid ""
"JSON decoder now raises :exc:`~json.JSONDecodeError` instead of :exc:"
"`ValueError` to provide better context information about the error. "
"(Contributed by Serhiy Storchaka in :issue:`19361`.)"
msgstr ""
"JSON-avkodaren ger nu upphov till :exc:`~json.JSONDecodeError` istället för :"
"exc:`ValueError` för att ge bättre kontextinformation om felet. (Bidrag från "
"Serhiy Storchaka i :issue:`19361`.)"

msgid "linecache"
msgstr "linecache"

msgid ""
"A new :func:`~linecache.lazycache` function can be used to capture "
"information about a non-file-based module to permit getting its lines later "
"via :func:`~linecache.getline`. This avoids doing I/O until a line is "
"actually needed, without having to carry the module globals around "
"indefinitely. (Contributed by Robert Collins in :issue:`17911`.)"
msgstr ""
"En ny :func:`~linecache.lazycache`-funktion kan användas för att fånga "
"information om en icke-filbaserad modul för att göra det möjligt att hämta "
"dess rader senare via :func:`~linecache.getline`. Detta undviker att göra I/"
"O tills en rad faktiskt behövs, utan att behöva bära med sig modulens "
"globaler på obestämd tid. (Bidrag från Robert Collins i :issue:`17911`.)"

msgid "locale"
msgstr "lokal"

msgid ""
"A new :func:`~locale.delocalize` function can be used to convert a string "
"into a normalized number string, taking the ``LC_NUMERIC`` settings into "
"account::"
msgstr ""
"En ny :func:`~locale.delocalize`-funktion kan användas för att konvertera en "
"sträng till en normaliserad talsträng, med hänsyn till inställningarna för "
"``LC_NUMERIC``::"

msgid ""
">>> import locale\n"
">>> locale.setlocale(locale.LC_NUMERIC, 'de_DE.UTF-8')\n"
"'de_DE.UTF-8'\n"
">>> locale.delocalize('1.234,56')\n"
"'1234.56'\n"
">>> locale.setlocale(locale.LC_NUMERIC, 'en_US.UTF-8')\n"
"'en_US.UTF-8'\n"
">>> locale.delocalize('1,234.56')\n"
"'1234.56'"
msgstr ""
">>> import locale\n"
">>> locale.setlocale(locale.LC_NUMERIC, 'de_DE.UTF-8')\n"
"'de_DE.UTF-8'\n"
">>> locale.delocalize('1.234,56')\n"
"'1234.56'\n"
">>> locale.setlocale(locale.LC_NUMERIC, 'en_US.UTF-8')\n"
"'en_US.UTF-8'\n"
">>> locale.delocalize('1,234.56')\n"
"'1234.56'"

msgid "(Contributed by Cédric Krier in :issue:`13918`.)"
msgstr "(Bidrag från Cédric Krier i :issue:`13918`.)"

msgid "logging"
msgstr "loggning"

msgid ""
"All logging methods (:class:`~logging.Logger` :meth:`~logging.Logger.log`, :"
"meth:`~logging.Logger.exception`, :meth:`~logging.Logger.critical`, :meth:"
"`~logging.Logger.debug`, etc.), now accept exception instances as an "
"*exc_info* argument, in addition to boolean values and exception tuples::"
msgstr ""
"Alla logningsmetoder (:class:`~logging.Logger` :meth:`~logging.Logger.log`, :"
"meth:`~logging.Logger.exception`, :meth:`~logging.Logger.critical`, :meth:"
"`~logging.Logger.debug`, etc.) accepterar nu undantagsinstanser som ett "
"*exc_info*-argument, förutom booleska värden och undantagstupler::"

msgid ""
">>> import logging\n"
">>> try:\n"
"...     1/0\n"
"... except ZeroDivisionError as ex:\n"
"...     logging.error('exception', exc_info=ex)\n"
"ERROR:root:exception"
msgstr ""
">>> import loggning\n"
">>> försök:\n"
"...     1/0\n"
"... except ZeroDivisionError as ex:\n"
"... logging.error('undantag', exc_info=ex)\n"
"ERROR:rot:undantag"

msgid "(Contributed by Yury Selivanov in :issue:`20537`.)"
msgstr "(Bidrag från Yury Selivanov i :issue:`20537`.)"

msgid ""
"The :class:`handlers.HTTPHandler <logging.handlers.HTTPHandler>` class now "
"accepts an optional :class:`ssl.SSLContext` instance to configure SSL "
"settings used in an HTTP connection. (Contributed by Alex Gaynor in :issue:"
"`22788`.)"
msgstr ""
"Klassen :class:`handlers.HTTPHandler <logging.handlers.HTTPHandler>` "
"accepterar nu en valfri :class:`ssl.SSLContext`-instans för att konfigurera "
"SSL-inställningar som används i en HTTP-anslutning. (Bidrag från Alex Gaynor "
"i :issue:`22788`.)"

msgid ""
"The :class:`handlers.QueueListener <logging.handlers.QueueListener>` class "
"now takes a *respect_handler_level* keyword argument which, if set to "
"``True``, will pass messages to handlers taking handler levels into account. "
"(Contributed by Vinay Sajip.)"
msgstr ""
"Klassen :class:`handlers.QueueListener <logging.handlers.QueueListener>` tar "
"nu ett *respect_handler_level* nyckelordsargument som, om det sätts till "
"``True``, kommer att skicka meddelanden till hanterare som tar hänsyn till "
"hanterarnivåer. (Bidrag från Vinay Sajip.)"

msgid "lzma"
msgstr "lzma"

msgid ""
"The :meth:`LZMADecompressor.decompress() <lzma.LZMADecompressor.decompress>` "
"method now accepts an optional *max_length* argument to limit the maximum "
"size of decompressed data. (Contributed by Martin Panter in :issue:`15955`.)"
msgstr ""
"Metoden :meth:`LZMADecompressor.decompress() <lzma.LZMADecompressor."
"decompress>` accepterar nu ett valfritt *max_length*-argument för att "
"begränsa den maximala storleken på dekomprimerade data. (Bidrag från Martin "
"Panter i :issue:`15955`.)"

msgid "math"
msgstr "matematik"

msgid ""
"Two new constants have been added to the :mod:`math` module: :data:`~math."
"inf` and :data:`~math.nan`.  (Contributed by Mark Dickinson in :issue:"
"`23185`.)"
msgstr ""
"Två nya konstanter har lagts till i modulen :mod:`math`: :data:`~math.inf` "
"och :data:`~math.nan`.  (Bidrag från Mark Dickinson i :issue:`23185`.)"

msgid ""
"A new function :func:`~math.isclose` provides a way to test for approximate "
"equality. (Contributed by Chris Barker and Tal Einat in :issue:`24270`.)"
msgstr ""
"En ny funktion :func:`~math.isclose` ger ett sätt att testa för ungefärlig "
"likhet. (Bidrag från Chris Barker och Tal Einat i :issue:`24270`.)"

msgid ""
"A new :func:`~math.gcd` function has been added.  The :func:`fractions.gcd` "
"function is now deprecated. (Contributed by Mark Dickinson and Serhiy "
"Storchaka in :issue:`22486`.)"
msgstr ""
"En ny :func:`~math.gcd`-funktion har lagts till.  Funktionen :func:"
"`fractions.gcd` är nu föråldrad. (Bidrag från Mark Dickinson och Serhiy "
"Storchaka i :issue:`22486`.)"

msgid "multiprocessing"
msgstr "multiprocessing"

msgid ""
":func:`sharedctypes.synchronized() <multiprocessing.sharedctypes."
"synchronized>` objects now support the :term:`context manager` protocol. "
"(Contributed by Charles-François Natali in :issue:`21565`.)"
msgstr ""
":func:`sharedctypes.synchronized() <multiprocessing.sharedctypes."
"synchronized>`-objekt stöder nu protokollet :term:`context manager`. (Bidrag "
"från Charles-François Natali i :issue:`21565`.)"

msgid "operator"
msgstr "operator"

msgid ""
":func:`~operator.attrgetter`, :func:`~operator.itemgetter`, and :func:"
"`~operator.methodcaller` objects now support pickling. (Contributed by Josh "
"Rosenberg and Serhiy Storchaka in :issue:`22955`.)"
msgstr ""
"objekten :func:`~operator.attrgetter`, :func:`~operator.itemgetter` och :"
"func:`~operator.methodcaller` har nu stöd för pickling. (Bidrag från Josh "
"Rosenberg och Serhiy Storchaka i :issue:`22955`.)"

msgid ""
"New :func:`~operator.matmul` and :func:`~operator.imatmul` functions to "
"perform matrix multiplication. (Contributed by Benjamin Peterson in :issue:"
"`21176`.)"
msgstr ""
"Nya :func:`~operator.matmul` och :func:`~operator.imatmul` funktioner för "
"att utföra matrismultiplikation. (Bidrag från Benjamin Peterson i :issue:"
"`21176`.)"

msgid "os"
msgstr "os"

msgid ""
"The new :func:`~os.scandir` function returning an iterator of :class:`~os."
"DirEntry` objects has been added.  If possible, :func:`~os.scandir` extracts "
"file attributes while scanning a directory, removing the need to perform "
"subsequent system calls to determine file type or attributes, which may "
"significantly improve performance.  (Contributed by Ben Hoyt with the help "
"of Victor Stinner in :issue:`22524`.)"
msgstr ""
"Den nya funktionen :func:`~os.scandir` som returnerar en iterator av :class:"
"`~os.DirEntry`-objekt har lagts till.  Om möjligt extraherar :func:`~os."
"scandir` filattribut medan en katalog skannas, vilket gör att efterföljande "
"systemanrop inte behöver utföras för att bestämma filtyp eller attribut, "
"vilket kan förbättra prestandan avsevärt.  (Bidrag från Ben Hoyt med hjälp "
"av Victor Stinner i :issue:`22524`.)"

msgid ""
"On Windows, a new :attr:`stat_result.st_file_attributes <os.stat_result."
"st_file_attributes>` attribute is now available.  It corresponds to the "
"``dwFileAttributes`` member of the ``BY_HANDLE_FILE_INFORMATION`` structure "
"returned by ``GetFileInformationByHandle()``.  (Contributed by Ben Hoyt in :"
"issue:`21719`.)"
msgstr ""
"I Windows finns nu ett nytt attribut :attr:`stat_result.st_file_attributes "
"<os.stat_result.st_file_attributes>`.  Det motsvarar medlemmen "
"``dwFileAttributes`` i strukturen ``BY_HANDLE_FILE_INFORMATION`` som "
"returneras av ``GetFileInformationByHandle()``.  (Bidrag från Ben Hoyt i :"
"issue:`21719`.)"

msgid ""
"The :func:`~os.urandom` function now uses the ``getrandom()`` syscall on "
"Linux 3.17 or newer, and ``getentropy()`` on OpenBSD 5.6 and newer, removing "
"the need to use ``/dev/urandom`` and avoiding failures due to potential file "
"descriptor exhaustion.  (Contributed by Victor Stinner in :issue:`22181`.)"
msgstr ""
"Funktionen :func:`~os.urandom` använder nu syscallen ``getrandom()`` på "
"Linux 3.17 eller nyare och ``getentropy()`` på OpenBSD 5.6 eller nyare, "
"vilket tar bort behovet av att använda ``/dev/urandom`` och undviker fel på "
"grund av potentiell uttömning av filbeskrivare.  (Bidrag från Victor Stinner "
"i :issue:`22181`.)"

msgid ""
"New :func:`~os.get_blocking` and :func:`~os.set_blocking` functions allow "
"getting and setting a file descriptor's blocking mode (:const:`~os."
"O_NONBLOCK`.) (Contributed by Victor Stinner in :issue:`22054`.)"
msgstr ""
"Nya funktionerna :func:`~os.get_blocking` och :func:`~os.set_blocking` gör "
"det möjligt att hämta och ställa in en filbeskrivares blockeringsläge (:"
"const:`~os.O_NONBLOCK`.) (Bidrag från Victor Stinner i :issue:`22054`.)"

msgid ""
"The :func:`~os.truncate` and :func:`~os.ftruncate` functions are now "
"supported on Windows.  (Contributed by Steve Dower in :issue:`23668`.)"
msgstr ""
"Funktionerna :func:`~os.truncate` och :func:`~os.ftruncate` stöds nu i "
"Windows.  (Bidrag från Steve Dower i :issue:`23668`.)"

msgid ""
"There is a new :func:`os.path.commonpath` function returning the longest "
"common sub-path of each passed pathname.  Unlike the :func:`os.path."
"commonprefix` function, it always returns a valid path::"
msgstr ""
"Det finns en ny funktion :func:`os.path.commonpath` som returnerar den "
"längsta gemensamma sub-sökvägen för varje passerat sökvägsnamn.  Till "
"skillnad från funktionen :func:`os.path.commonprefix` returnerar den alltid "
"en giltig sökväg::"

msgid ""
">>> os.path.commonprefix(['/usr/lib', '/usr/local/lib'])\n"
"'/usr/l'\n"
"\n"
">>> os.path.commonpath(['/usr/lib', '/usr/local/lib'])\n"
"'/usr'"
msgstr ""
">>> os.path.commonprefix(['/usr/lib', '/usr/local/lib'])\n"
"'/usr/l'\n"
"\n"
">>> os.path.commonpath(['/usr/lib', '/usr/local/lib'])\n"
"'/usr'"

msgid "(Contributed by Rafik Draoui and Serhiy Storchaka in :issue:`10395`.)"
msgstr "(Bidrag från Rafik Draoui och Serhiy Storchaka i :issue:`10395`.)"

msgid "pathlib"
msgstr "sökväg"

msgid ""
"The new :meth:`Path.samefile() <pathlib.Path.samefile>` method can be used "
"to check whether the path points to the same file as another path, which can "
"be either another :class:`~pathlib.Path` object, or a string::"
msgstr ""
"Den nya metoden :meth:`Path.samefile() <pathlib.Path.samefile>` kan användas "
"för att kontrollera om sökvägen pekar på samma fil som en annan sökväg, som "
"kan vara antingen ett annat :class:`~pathlib.Path`-objekt eller en sträng::"

msgid ""
">>> import pathlib\n"
">>> p1 = pathlib.Path('/etc/hosts')\n"
">>> p2 = pathlib.Path('/etc/../etc/hosts')\n"
">>> p1.samefile(p2)\n"
"True"
msgstr ""
">>> import pathlib\n"
">>> p1 = pathlib.Path('/etc/hosts')\n"
">>> p2 = pathlib.path('/etc/../etc/hosts')\n"
">>> p1.samefile(p2)\n"
"Sant"

msgid "(Contributed by Vajrasky Kok and Antoine Pitrou in :issue:`19775`.)"
msgstr "(Bidrag från Vajrasky Kok och Antoine Pitrou i :issue:`19775`.)"

msgid ""
"The :meth:`Path.mkdir() <pathlib.Path.mkdir>` method now accepts a new "
"optional *exist_ok* argument to match ``mkdir -p`` and :func:`os.makedirs` "
"functionality.  (Contributed by Berker Peksag in :issue:`21539`.)"
msgstr ""
"Metoden :meth:`Path.mkdir() <pathlib.Path.mkdir>` accepterar nu ett nytt "
"valfritt *exist_ok* argument för att matcha ``mkdir -p`` och :func:`os."
"makedirs` funktionalitet.  (Bidrag från Berker Peksag i :issue:`21539`.)"

msgid ""
"There is a new :meth:`Path.expanduser() <pathlib.Path.expanduser>` method to "
"expand ``~`` and ``~user`` prefixes.  (Contributed by Serhiy Storchaka and "
"Claudiu Popa in :issue:`19776`.)"
msgstr ""
"Det finns en ny :meth:`Path.expanduser() <pathlib.Path.expanduser>`-metod "
"för att expandera prefixen ``~`` och ``~user``.  (Bidrag från Serhiy "
"Storchaka och Claudiu Popa i :issue:`19776`.)"

msgid ""
"A new :meth:`Path.home() <pathlib.Path.home>` class method can be used to "
"get a :class:`~pathlib.Path` instance representing the user’s home "
"directory. (Contributed by Victor Salgado and Mayank Tripathi in :issue:"
"`19777`.)"
msgstr ""
"En ny :meth:`Path.home() <pathlib.Path.home>`-klassmetod kan användas för "
"att hämta en :class:`~pathlib.Path`-instans som representerar användarens "
"hemkatalog. (Bidrag från Victor Salgado och Mayank Tripathi i :issue:"
"`19777`.)"

msgid ""
"New :meth:`Path.write_text() <pathlib.Path.write_text>`, :meth:`Path."
"read_text() <pathlib.Path.read_text>`, :meth:`Path.write_bytes() <pathlib."
"Path.write_bytes>`, :meth:`Path.read_bytes() <pathlib.Path.read_bytes>` "
"methods to simplify read/write operations on files."
msgstr ""
"Nya metoder :meth:`Path.write_text() <pathlib.Path.write_text>`, :meth:`Path."
"read_text() <pathlib.Path.read_text>`, :meth:`Path.write_bytes() <pathlib."
"Path.write_bytes>`, :meth:`Path.read_bytes() <pathlib.Path.read_bytes>` för "
"att förenkla läs- och skrivoperationer på filer."

msgid ""
"The following code snippet will create or rewrite existing file ``~/"
"spam42``::"
msgstr ""
"Följande kodavsnitt kommer att skapa eller skriva om den befintliga filen "
"``~/spam42``::"

msgid ""
">>> import pathlib\n"
">>> p = pathlib.Path('~/spam42')\n"
">>> p.expanduser().write_text('ham')\n"
"3"
msgstr ""
">>> import pathlib\n"
">>> p = pathlib.path('~/spam42')\n"
">>> p.expanduser().write_text('ham')\n"
"3"

msgid "(Contributed by Christopher Welborn in :issue:`20218`.)"
msgstr "(Bidrag från Christopher Welborn i :issue:`20218`.)"

msgid "pickle"
msgstr "gurka"

msgid ""
"Nested objects, such as unbound methods or nested classes, can now be "
"pickled using :ref:`pickle protocols <pickle-protocols>` older than protocol "
"version 4. Protocol version 4 already supports these cases.  (Contributed by "
"Serhiy Storchaka in :issue:`23611`.)"
msgstr ""
"Nästlade objekt, t.ex. obundna metoder eller nästlade klasser, kan nu betas "
"med :ref:`pickle protocols <pickle-protocols>` som är äldre än "
"protokollversion 4. Protokollversion 4 stöder redan dessa fall.  (Bidrag "
"från Serhiy Storchaka i :issue:`23611`.)"

msgid "poplib"
msgstr "poplib"

msgid ""
"A new :meth:`POP3.utf8() <poplib.POP3.utf8>` command enables :rfc:`6856` "
"(Internationalized Email) support, if a POP server supports it. (Contributed "
"by Milan OberKirch in :issue:`21804`.)"
msgstr ""
"Ett nytt :meth:`POP3.utf8() <poplib.POP3.utf8>`-kommando aktiverar :rfc:"
"`6856`-stöd (Internationaliserad e-post), om en POP-server stöder det. "
"(Bidrag från Milan OberKirch i :issue:`21804`.)"

msgid "re"
msgstr "re"

msgid ""
"References and conditional references to groups with fixed length are now "
"allowed in lookbehind assertions::"
msgstr ""
"Referenser och villkorliga referenser till grupper med fast längd är nu "
"tillåtna i lookbehind-assertions::"

msgid ""
">>> import re\n"
">>> pat = re.compile(r'(a|b).(?<=\\1)c')\n"
">>> pat.match('aac')\n"
"<_sre.SRE_Match object; span=(0, 3), match='aac'>\n"
">>> pat.match('bbc')\n"
"<_sre.SRE_Match object; span=(0, 3), match='bbc'>"
msgstr ""
">>> import re\n"
">>> pat = re.compile(r'(a|b).(?<=\\1)c')\n"
">>> pat.match('aac')\n"
"<_sre.SRE_Match-objekt; span=(0, 3), match='aac'>\n"
">>> pat.match('bbc')\n"
"<_sre.SRE_Match-objekt; span=(0, 3), match='bbc'>"

msgid "(Contributed by Serhiy Storchaka in :issue:`9179`.)"
msgstr "(Bidrag från Serhiy Storchaka i :issue:`9179`.)"

msgid ""
"The number of capturing groups in regular expressions is no longer limited "
"to 100.  (Contributed by Serhiy Storchaka in :issue:`22437`.)"
msgstr ""
"Antalet fångande grupper i reguljära uttryck är inte längre begränsat till "
"100.  (Bidrag från Serhiy Storchaka i :issue:`22437`.)"

msgid ""
"The :func:`~re.sub` and :func:`~re.subn` functions now replace unmatched "
"groups with empty strings instead of raising an exception. (Contributed by "
"Serhiy Storchaka in :issue:`1519638`.)"
msgstr ""
"Funktionerna :func:`~re.sub` och :func:`~re.subn` ersätter nu omatchade "
"grupper med tomma strängar istället för att skapa ett undantag. (Bidrag från "
"Serhiy Storchaka i :issue:`1519638`.)"

msgid ""
"The :class:`re.error` exceptions have new attributes, :attr:`~re.error."
"msg`, :attr:`~re.error.pattern`, :attr:`~re.error.pos`, :attr:`~re.error."
"lineno`, and :attr:`~re.error.colno`, that provide better context "
"information about the error::"
msgstr ""
"Undantagen i :class:`re.error` har nya attribut, :attr:`~re.error.msg`, :"
"attr:`~re.error.pattern`, :attr:`~re.error.pos`, :attr:`~re.error.lineno` "
"och :attr:`~re.error.colno`, som ger bättre kontextinformation om felet::"

msgid ""
">>> re.compile(\"\"\"\n"
"...     (?x)\n"
"...     .++\n"
"... \"\"\")\n"
"Traceback (most recent call last):\n"
"   ...\n"
"sre_constants.error: multiple repeat at position 16 (line 3, column 7)"
msgstr ""
">>> re.compile(\"\"\"\n"
"... (?x)\n"
"... .++\n"
"... \"\"\")\n"
"Traceback (senaste anropet senast):\n"
"   ...\n"
"sre_constants.error: flera upprepningar vid position 16 (rad 3, kolumn 7)"

msgid "(Contributed by Serhiy Storchaka in :issue:`22578`.)"
msgstr "(Bidrag från Serhiy Storchaka i :issue:`22578`.)"

msgid "readline"
msgstr "läslinje"

msgid ""
"A new :func:`~readline.append_history_file` function can be used to append "
"the specified number of trailing elements in history to the given file. "
"(Contributed by Bruno Cauet in :issue:`22940`.)"
msgstr ""
"En ny :func:`~readline.append_history_file`-funktion kan användas för att "
"lägga till det angivna antalet efterföljande element i historiken till den "
"angivna filen. (Bidrag från Bruno Cauet i :issue:`22940`.)"

msgid "selectors"
msgstr "väljare"

msgid ""
"The new :class:`~selectors.DevpollSelector` supports efficient ``/dev/poll`` "
"polling on Solaris. (Contributed by Giampaolo Rodola' in :issue:`18931`.)"
msgstr ""
"Den nya :class:`~selectors.DevpollSelector` stöder effektiv ``/dev/poll`` "
"polling på Solaris. (Bidrag från Giampaolo Rodola' i :issue:`18931`.)"

msgid "shutil"
msgstr "shutil"

msgid ""
"The :func:`~shutil.move` function now accepts a *copy_function* argument, "
"allowing, for example, the :func:`~shutil.copy` function to be used instead "
"of the default :func:`~shutil.copy2` if there is a need to ignore file "
"metadata when moving. (Contributed by Claudiu Popa in :issue:`19840`.)"
msgstr ""
"Funktionen :func:`~shutil.move` accepterar nu ett *copy_function*-argument, "
"vilket gör att t.ex. funktionen :func:`~shutil.copy` kan användas istället "
"för standardfunktionen :func:`~shutil.copy2` om det finns ett behov av att "
"ignorera filmetadata vid flyttning. (Bidrag från Claudiu Popa i :issue:"
"`19840`.)"

msgid ""
"The :func:`~shutil.make_archive` function now supports the *xztar* format. "
"(Contributed by Serhiy Storchaka in :issue:`5411`.)"
msgstr ""
"Funktionen :func:`~shutil.make_archive` har nu stöd för formatet *xztar*. "
"(Bidrag från Serhiy Storchaka i :issue:`5411`.)"

msgid "signal"
msgstr "signal"

msgid ""
"On Windows, the :func:`~signal.set_wakeup_fd` function now also supports "
"socket handles.  (Contributed by Victor Stinner in :issue:`22018`.)"
msgstr ""
"I Windows har funktionen :func:`~signal.set_wakeup_fd` nu även stöd för "
"socket-handtag.  (Bidrag från Victor Stinner i :issue:`22018`.)"

msgid ""
"Various ``SIG*`` constants in the :mod:`signal` module have been converted "
"into :mod:`Enums <enum>`.  This allows meaningful names to be printed during "
"debugging, instead of integer \"magic numbers\". (Contributed by Giampaolo "
"Rodola' in :issue:`21076`.)"
msgstr ""
"Olika ``SIG*``-konstanter i modulen :mod:`signal`` har konverterats till :"
"mod:`Enums <enum>``.  Detta gör att meningsfulla namn kan skrivas ut under "
"felsökning, istället för heltal \"magiska siffror\". (Bidrag från Giampaolo "
"Rodola' i :issue:`21076`.)"

msgid "smtpd"
msgstr "smtpd"

msgid ""
"Both the :class:`!SMTPServer` and :class:`!SMTPChannel` classes now accept a "
"*decode_data* keyword argument to determine if the ``DATA`` portion of the "
"SMTP transaction is decoded using the ``\"utf-8\"`` codec or is instead "
"provided to the :meth:`!SMTPServer.process_message` method as a byte "
"string.  The default is ``True`` for backward compatibility reasons, but "
"will change to ``False`` in Python 3.6.  If *decode_data* is set to "
"``False``, the ``process_message`` method must be prepared to accept keyword "
"arguments. (Contributed by Maciej Szulik in :issue:`19662`.)"
msgstr ""
"Både klasserna :class:`!SMTPServer` och :class:`!SMTPChannel` accepterar nu "
"ett *decode_data* nyckelordsargument för att avgöra om ``DATA``-delen av "
"SMTP-transaktionen avkodas med hjälp av ``\"utf-8\"``-codec eller istället "
"tillhandahålls till metoden :meth:`!SMTPServer.process_message` som en byte-"
"sträng.  Standardvärdet är ``True`` av bakåtkompatibilitetsskäl, men kommer "
"att ändras till ``False`` i Python 3.6.  Om *decode_data* är satt till "
"``False``, måste metoden ``process_message`` vara förberedd för att "
"acceptera nyckelordsargument. (Bidrag från Maciej Szulik i :issue:`19662`.)"

msgid ""
"The :class:`!SMTPServer` class now advertises the ``8BITMIME`` extension (:"
"rfc:`6152`) if *decode_data* has been set ``True``.  If the client specifies "
"``BODY=8BITMIME`` on the ``MAIL`` command, it is passed to :meth:`!"
"SMTPServer.process_message` via the *mail_options* keyword. (Contributed by "
"Milan Oberkirch and R.  David Murray in :issue:`21795`.)"
msgstr ""
"Klassen :class:`!SMTPServer` annonserar nu tillägget ``8BITMIME`` (:rfc:"
"`6152``) om *decode_data* har satts till ``True``.  Om klienten anger "
"``BODY=8BITMIME`` på kommandot ``MAIL``, skickas det till :meth:`!SMTPServer."
"process_message` via nyckelordet *mail_options*. (Bidrag från Milan "
"Oberkirch och R. David Murray i :issue:`21795`.)"

msgid ""
"The :class:`!SMTPServer` class now also supports the ``SMTPUTF8`` extension "
"(:rfc:`6531`: Internationalized Email).  If the client specified ``SMTPUTF8 "
"BODY=8BITMIME`` on the ``MAIL`` command, they are passed to :meth:`!"
"SMTPServer.process_message` via the *mail_options* keyword.  It is the "
"responsibility of the ``process_message`` method to correctly handle the "
"``SMTPUTF8`` data. (Contributed by Milan Oberkirch in :issue:`21725`.)"
msgstr ""
"Klassen :class:`!SMTPServer` stöder nu även tillägget ``SMTPUTF8`` (:rfc:"
"`6531`: Internationalized Email).  Om klienten specificerade ``SMTPUTF8 "
"BODY=8BITMIME`` på kommandot ``MAIL``, skickas de till :meth:`!SMTPServer."
"process_message` via nyckelordet *mail_options*.  Det är metoden "
"``process_message`` ansvar att korrekt hantera ``SMTPUTF8`` data. (Bidrag "
"från Milan Oberkirch i :issue:`21725`.)"

msgid ""
"It is now possible to provide, directly or via name resolution, IPv6 "
"addresses in the :class:`!SMTPServer` constructor, and have it successfully "
"connect.  (Contributed by Milan Oberkirch in :issue:`14758`.)"
msgstr ""
"Det är nu möjligt att, direkt eller via namnupplösning, ange IPv6-adresser "
"i :class:`!SMTPServer`-konstruktören och få den att ansluta framgångsrikt.  "
"(Bidrag från Milan Oberkirch i :issue:`14758`.)"

msgid "smtplib"
msgstr "smtplib"

msgid ""
"A new :meth:`SMTP.auth() <smtplib.SMTP.auth>` method provides a convenient "
"way to implement custom authentication mechanisms. (Contributed by Milan "
"Oberkirch in :issue:`15014`.)"
msgstr ""
"En ny :meth:`SMTP.auth() <smtplib.SMTP.auth>`-metod ger ett bekvämt sätt att "
"implementera anpassade autentiseringsmekanismer. (Bidrag från Milan "
"Oberkirch i :issue:`15014`.)"

msgid ""
"The :meth:`SMTP.set_debuglevel() <smtplib.SMTP.set_debuglevel>` method now "
"accepts an additional debuglevel (2), which enables timestamps in debug "
"messages. (Contributed by Gavin Chappell and Maciej Szulik in :issue:"
"`16914`.)"
msgstr ""
"Metoden :meth:`SMTP.set_debuglevel() <smtplib.SMTP.set_debuglevel>` "
"accepterar nu ytterligare en debug-nivå (2), vilket möjliggör tidsstämplar i "
"debug-meddelanden. (Bidrag från Gavin Chappell och Maciej Szulik i :issue:"
"`16914`.)"

msgid ""
"Both the :meth:`SMTP.sendmail() <smtplib.SMTP.sendmail>` and :meth:`SMTP."
"send_message() <smtplib.SMTP.send_message>` methods now support :rfc:`6531` "
"(SMTPUTF8). (Contributed by Milan Oberkirch and R. David Murray in :issue:"
"`22027`.)"
msgstr ""
"Både metoderna :meth:`SMTP.sendmail() <smtplib.SMTP.sendmail>` och :meth:"
"`SMTP.send_message() <smtplib.SMTP.send_message>` stöder nu :rfc:`6531` "
"(SMTPUTF8). (Bidrag från Milan Oberkirch och R. David Murray i :issue:"
"`22027`.)"

msgid "sndhdr"
msgstr "sndhdr"

msgid ""
"The :func:`!what` and :func:`!whathdr` functions  now return a :func:"
"`~collections.namedtuple`.  (Contributed by Claudiu Popa in :issue:`18615`.)"
msgstr ""
"Funktionerna :func:`!what` och :func:`!whathdr` returnerar nu en :func:"
"`~collections.namedtuple`.  (Bidrag från Claudiu Popa i :issue:`18615`.)"

msgid "socket"
msgstr "kortplats"

msgid ""
"Functions with timeouts now use a monotonic clock, instead of a system "
"clock. (Contributed by Victor Stinner in :issue:`22043`.)"
msgstr ""
"Funktioner med timeouts använder nu en monoton klocka istället för en "
"systemklocka. (Bidrag från Victor Stinner i :issue:`22043`.)"

msgid ""
"A new :meth:`socket.sendfile() <socket.socket.sendfile>` method allows "
"sending a file over a socket by using the high-performance :func:`os."
"sendfile` function on UNIX, resulting in uploads being from 2 to 3 times "
"faster than when using plain :meth:`socket.send() <socket.socket.send>`. "
"(Contributed by Giampaolo Rodola' in :issue:`17552`.)"
msgstr ""
"En ny :meth:`socket.sendfile() <socket.socket.sendfile>`-metod gör det "
"möjligt att skicka en fil över en socket med hjälp av den högpresterande :"
"func:`os.sendfile`-funktionen på UNIX, vilket resulterar i att uppladdningar "
"blir 2 till 3 gånger snabbare än när man använder vanlig :meth:`socket."
"send() <socket.socket.send>`. (Bidrag från Giampaolo Rodola' i :issue:"
"`17552`.)"

msgid ""
"The :meth:`socket.sendall() <socket.socket.sendall>` method no longer resets "
"the socket timeout every time bytes are received or sent.  The socket "
"timeout is now the maximum total duration to send all data. (Contributed by "
"Victor Stinner in :issue:`23853`.)"
msgstr ""
"Metoden :meth:`socket.sendall() <socket.socket.sendall>` återställer inte "
"längre timeouten för uttaget varje gång byte tas emot eller skickas.  Socket "
"timeout är nu den maximala totala tiden det tar att skicka all data. (Bidrag "
"från Victor Stinner i :issue:`23853`.)"

msgid ""
"The *backlog* argument of the :meth:`socket.listen() <socket.socket.listen>` "
"method is now optional.  By default it is set to :data:`SOMAXCONN <socket."
"SOMAXCONN>` or to ``128``, whichever is less. (Contributed by Charles-"
"François Natali in :issue:`21455`.)"
msgstr ""
"Argumentet *backlog* i metoden :meth:`socket.listen() <socket.socket."
"listen>` är nu valfritt.  Som standard är det satt till :data:`SOMAXCONN "
"<socket.SOMAXCONN>` eller till ``128``, beroende på vilket som är minst. "
"(Bidrag från Charles-François Natali i :issue:`21455`.)"

msgid "ssl"
msgstr "ssl"

msgid "Memory BIO Support"
msgstr "Stöd för BIO-minne"

msgid "(Contributed by Geert Jansen in :issue:`21965`.)"
msgstr "(Bidrag från Geert Jansen i :issue:`21965`.)"

msgid ""
"The new :class:`~ssl.SSLObject` class has been added to provide SSL protocol "
"support for cases when the network I/O capabilities of :class:`~ssl."
"SSLSocket` are not necessary or are suboptimal.  ``SSLObject`` represents an "
"SSL protocol instance, but does not implement any network I/O methods, and "
"instead provides a memory buffer interface.  The new :class:`~ssl.MemoryBIO` "
"class can be used to pass data between Python and an SSL protocol instance."
msgstr ""
"Den nya klassen :class:`~ssl.SSLObject` har lagts till för att ge stöd för "
"SSL-protokoll i de fall då nätverks-I/O-funktionerna i :class:`~ssl."
"SSLSocket` inte är nödvändiga eller inte är optimala.  ``SSLObject`` "
"representerar en SSL-protokollinstans, men implementerar inte några nätverks-"
"I/O-metoder utan tillhandahåller istället ett minnesbuffertgränssnitt.  Den "
"nya :class:`~ssl.MemoryBIO`-klassen kan användas för att skicka data mellan "
"Python och en SSL-protokollinstans."

msgid ""
"The memory BIO SSL support is primarily intended to be used in frameworks "
"implementing asynchronous I/O for which :class:`~ssl.SSLSocket`'s readiness "
"model (\"select/poll\") is inefficient."
msgstr ""
"BIO SSL-stödet för minne är främst avsett att användas i ramverk som "
"implementerar asynkron I/O för vilka :class:`~ssl.SSLSocket` "
"beredskapsmodell (\"select/poll\") är ineffektiv."

msgid ""
"A new :meth:`SSLContext.wrap_bio() <ssl.SSLContext.wrap_bio>` method can be "
"used to create a new ``SSLObject`` instance."
msgstr ""
"En ny :meth:`SSLContext.wrap_bio() <ssl.SSLContext.wrap_bio>`-metod kan "
"användas för att skapa en ny ``SSLObject``-instans."

msgid "Application-Layer Protocol Negotiation Support"
msgstr "Stöd för förhandling av protokoll i applikationslager"

msgid "(Contributed by Benjamin Peterson in :issue:`20188`.)"
msgstr "(Bidrag från Benjamin Peterson i :issue:`20188`.)"

msgid ""
"Where OpenSSL support is present, the :mod:`ssl` module now implements the "
"*Application-Layer Protocol Negotiation* TLS extension as described in :rfc:"
"`7301`."
msgstr ""
"Där OpenSSL-stöd finns, implementerar modulen :mod:`ssl` nu TLS-tillägget "
"*Application-Layer Protocol Negotiation* enligt beskrivningen i :rfc:`7301`."

msgid ""
"The new :meth:`SSLContext.set_alpn_protocols() <ssl.SSLContext."
"set_alpn_protocols>` can be used to specify which protocols a socket should "
"advertise during the TLS handshake."
msgstr ""
"Den nya :meth:`SSLContext.set_alpn_protocols() <ssl.SSLContext."
"set_alpn_protocols>` kan användas för att ange vilka protokoll ett uttag ska "
"annonsera under TLS-handskakningen."

msgid ""
"The new :meth:`SSLSocket.selected_alpn_protocol() <ssl.SSLSocket."
"selected_alpn_protocol>` returns the protocol that was selected during the "
"TLS handshake. The :const:`~ssl.HAS_ALPN` flag indicates whether ALPN "
"support is present."
msgstr ""
"Den nya :meth:`SSLSocket.selected_alpn_protocol() <ssl.SSLSocket."
"selected_alpn_protocol>` returnerar det protokoll som valdes under TLS-"
"handskakningen. Flaggan :const:`~ssl.HAS_ALPN` anger om ALPN-stöd finns."

msgid "Other Changes"
msgstr "Övriga förändringar"

msgid ""
"There is a new :meth:`SSLSocket.version() <ssl.SSLSocket.version>` method to "
"query the actual protocol version in use. (Contributed by Antoine Pitrou in :"
"issue:`20421`.)"
msgstr ""
"Det finns en ny :meth:`SSLSocket.version() <ssl.SSLSocket.version>`-metod "
"för att fråga den faktiska protokollversionen som används. (Bidrag från "
"Antoine Pitrou i :issue:`20421`.)"

msgid ""
"The :class:`~ssl.SSLSocket` class now implements a :meth:`SSLSocket."
"sendfile() <ssl.SSLSocket.sendfile>` method. (Contributed by Giampaolo "
"Rodola' in :issue:`17552`.)"
msgstr ""
"Klassen :class:`~ssl.SSLSocket` implementerar nu en :meth:`SSLSocket."
"sendfile() <ssl.SSLSocket.sendfile>` metod. (Bidrag från Giampaolo Rodola' "
"i :issue:`17552`.)"

msgid ""
"The :meth:`SSLSocket.send() <ssl.SSLSocket.send>` method now raises either "
"the :exc:`ssl.SSLWantReadError` or :exc:`ssl.SSLWantWriteError` exception on "
"a non-blocking socket if the operation would block. Previously, it would "
"return ``0``.  (Contributed by Nikolaus Rath in :issue:`20951`.)"
msgstr ""
"Metoden :meth:`SSLSocket.send() <ssl.SSLSocket.send>` ger nu upphov till "
"antingen undantaget :exc:`ssl.SSLWantReadError` eller :exc:`ssl."
"SSLWantWriteError` på ett icke-blockerande uttag om åtgärden skulle "
"blockera. Tidigare skulle den returnera ``0``.  (Bidrag från Nikolaus Rath "
"i :issue:`20951`.)"

msgid ""
"The :func:`~ssl.cert_time_to_seconds` function now interprets the input time "
"as UTC and not as local time, per :rfc:`5280`.  Additionally, the return "
"value is always an :class:`int`. (Contributed by Akira Li in :issue:`19940`.)"
msgstr ""
"Funktionen :func:`~ssl.cert_time_to_seconds` tolkar nu inmatad tid som UTC "
"och inte som lokal tid, enligt :rfc:`5280`.  Dessutom är returvärdet alltid "
"en :class:`int`. (Bidrag från Akira Li i :issue:`19940`.)"

msgid ""
"New :meth:`SSLObject.shared_ciphers() <ssl.SSLObject.shared_ciphers>` and :"
"meth:`SSLSocket.shared_ciphers() <ssl.SSLSocket.shared_ciphers>` methods "
"return the list of ciphers sent by the client during the handshake. "
"(Contributed by Benjamin Peterson in :issue:`23186`.)"
msgstr ""
"Nya metoderna :meth:`SSLObject.shared_ciphers() <ssl.SSLObject."
"shared_ciphers>` och :meth:`SSLSocket.shared_ciphers() <ssl.SSLSocket."
"shared_ciphers>` returnerar listan över chiffer som skickas av klienten "
"under handskakningen. (Bidrag från Benjamin Peterson i :issue:`23186`.)"

msgid ""
"The :meth:`SSLSocket.do_handshake() <ssl.SSLSocket.do_handshake>`, :meth:"
"`SSLSocket.read() <ssl.SSLSocket.read>`, :meth:`SSLSocket.shutdown() <ssl."
"SSLSocket.shutdown>`, and :meth:`SSLSocket.write() <ssl.SSLSocket.write>` "
"methods of the :class:`~ssl.SSLSocket` class no longer reset the socket "
"timeout every time bytes are received or sent. The socket timeout is now the "
"maximum total duration of the method. (Contributed by Victor Stinner in :"
"issue:`23853`.)"
msgstr ""
"Metoderna :meth:`SSLSocket.do_handshake() <ssl.SSLSocket.do_handshake>`, :"
"meth:`SSLSocket.read() <ssl.SSLSocket.read>`, :meth:`SSLSocket.shutdown() "
"<ssl.SSLSocket.shutdown>`, och :meth:`SSLSocket.write() <ssl.SSLSocket."
"write>` metoderna i :class:`~ssl.SSLSocket` klassen återställer inte längre "
"socket timeout varje gång byte tas emot eller skickas. Socket timeout är nu "
"den maximala totala varaktigheten för metoden. (Bidrag från Victor Stinner "
"i :issue:`23853`.)"

msgid ""
"The :func:`~ssl.match_hostname` function now supports matching of IP "
"addresses. (Contributed by Antoine Pitrou in :issue:`23239`.)"
msgstr ""
"Funktionen :func:`~ssl.match_hostname` stöder nu matchning av IP-adresser. "
"(Bidrag från Antoine Pitrou i :issue:`23239`.)"

msgid "sqlite3"
msgstr "sqlite3"

msgid ""
"The :class:`~sqlite3.Row` class now fully supports the sequence protocol, in "
"particular :func:`reversed` iteration and slice indexing. (Contributed by "
"Claudiu Popa in :issue:`10203`; by Lucas Sinclair, Jessica McKellar, and  "
"Serhiy Storchaka in :issue:`13583`.)"
msgstr ""
"Klassen :class:`~sqlite3.Row` har nu fullt stöd för sekvensprotokollet, i "
"synnerhet :func:`reversed` iteration och slice-indexering. (Bidrag från "
"Claudiu Popa i :issue:`10203`; av Lucas Sinclair, Jessica McKellar och "
"Serhiy Storchaka i :issue:`13583`.)"

msgid "subprocess"
msgstr "delprocess"

msgid ""
"The new :func:`~subprocess.run` function has been added. It runs the "
"specified command and returns a :class:`~subprocess.CompletedProcess` "
"object, which describes a finished process.  The new API is more consistent "
"and is the recommended approach to invoking subprocesses in Python code that "
"does not need to maintain compatibility with earlier Python versions. "
"(Contributed by Thomas Kluyver in :issue:`23342`.)"
msgstr ""
"Den nya funktionen :func:`~subprocess.run` har lagts till. Den kör det "
"angivna kommandot och returnerar ett :class:`~subprocess.CompletedProcess`-"
"objekt, som beskriver en avslutad process.  Det nya API:et är mer konsekvent "
"och är det rekommenderade tillvägagångssättet för att anropa subprocesser i "
"Python-kod som inte behöver upprätthålla kompatibilitet med tidigare Python-"
"versioner. (Bidrag från Thomas Kluyver i :issue:`23342`.)"

msgid ""
">>> subprocess.run([\"ls\", \"-l\"])  # doesn't capture output\n"
"CompletedProcess(args=['ls', '-l'], returncode=0)\n"
"\n"
">>> subprocess.run(\"exit 1\", shell=True, check=True)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit "
"status 1\n"
"\n"
">>> subprocess.run([\"ls\", \"-l\", \"/dev/null\"], stdout=subprocess.PIPE)\n"
"CompletedProcess(args=['ls', '-l', '/dev/null'], returncode=0,\n"
"stdout=b'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\\n')"
msgstr ""
">>> subprocess.run([\"ls\", \"-l\"]) # fångar inte upp utdata\n"
"CompletedProcess(args=['ls', '-l'], returncode=0)\n"
"\n"
">>> subprocess.run(\"exit 1\", shell=True, check=True)\n"
"Traceback (senaste anropet senast):\n"
"  ...\n"
"subprocess.CalledProcessError: Kommandot 'exit 1' returnerade utgångsstatus "
"1 som inte var noll\n"
"\n"
">>> subprocess.run([\"ls\", \"-l\", \"/dev/null\"], stdout=subprocess.PIPE)\n"
"CompletedProcess(args=['ls', '-l', '/dev/null'], returncode=0,\n"
"stdout=b'crw-rw-rw- 1 root root 1, 3 jan 23 16:23 /dev/null\\n')"

msgid "sys"
msgstr "system"

msgid ""
"A new :func:`~sys.set_coroutine_wrapper` function allows setting a global "
"hook that will be called whenever a :term:`coroutine object <coroutine>` is "
"created by an :keyword:`async def` function.  A corresponding :func:`~sys."
"get_coroutine_wrapper` can be used to obtain a currently set wrapper.  Both "
"functions are :term:`provisional <provisional API>`, and are intended for "
"debugging purposes only.  (Contributed by Yury Selivanov in :issue:`24017`.)"
msgstr ""
"En ny :func:`~sys.set_coroutine_wrapper`-funktion gör det möjligt att ställa "
"in en global krok som kommer att anropas när en :term:`coroutine object "
"<coroutine>` skapas av en :keyword:`async def`-funktion.  En motsvarande :"
"func:`~sys.get_coroutine_wrapper` kan användas för att erhålla en för "
"närvarande inställd wrapper.  Båda funktionerna är :term:``provisional "
"<provisional API>`` och är endast avsedda för felsökningsändamål.  (Bidrag "
"från Yury Selivanov i :issue:`24017`.)"

msgid ""
"A new :func:`~sys.is_finalizing` function can be used to check if the Python "
"interpreter is :term:`shutting down <interpreter shutdown>`. (Contributed by "
"Antoine Pitrou in :issue:`22696`.)"
msgstr ""
"En ny :func:`~sys.is_finalizing`-funktion kan användas för att kontrollera "
"om Python-tolken :term:`stänger ner <interpreter shutdown>`. (Bidrag från "
"Antoine Pitrou i :issue:`22696`.)"

msgid "sysconfig"
msgstr "sysconfig"

msgid ""
"The name of the user scripts directory on Windows now includes the first two "
"components of the Python version. (Contributed by Paul Moore in :issue:"
"`23437`.)"
msgstr ""
"Namnet på katalogen för användarskript i Windows innehåller nu de två första "
"komponenterna i Python-versionen. (Bidrag från Paul Moore i :issue:`23437`.)"

msgid "tarfile"
msgstr "tarfil"

msgid ""
"The *mode* argument of the :func:`~tarfile.open` function now accepts "
"``\"x\"`` to request exclusive creation.  (Contributed by Berker Peksag in :"
"issue:`21717`.)"
msgstr ""
"Argumentet *mode* i funktionen :func:`~tarfile.open` accepterar nu ``\"x\"`` "
"för att begära exklusiv skapelse.  (Bidrag från Berker Peksag i :issue:"
"`21717`.)"

msgid ""
"The :meth:`TarFile.extractall() <tarfile.TarFile.extractall>` and :meth:"
"`TarFile.extract() <tarfile.TarFile.extract>` methods now take a keyword "
"argument *numeric_owner*.  If set to ``True``, the extracted files and "
"directories will be owned by the numeric ``uid`` and ``gid`` from the "
"tarfile. If set to ``False`` (the default, and the behavior in versions "
"prior to 3.5), they will be owned by the named user and group in the "
"tarfile. (Contributed by Michael Vogt and Eric Smith in :issue:`23193`.)"
msgstr ""
"Metoderna :meth:`TarFile.extractall() <tarfile.TarFile.extractall>` och :"
"meth:`TarFile.extract() <tarfile.TarFile.extract>` tar nu ett "
"nyckelordsargument *numeric_owner*.  Om det sätts till ``True`` kommer de "
"extraherade filerna och katalogerna att ägas av de numeriska ``uid`` och "
"``gid`` från tarfilen. Om inställningen är ``False`` (standard och beteendet "
"i versioner före 3.5) kommer de att ägas av den namngivna användaren och "
"gruppen i tarfilen. (Bidrag från Michael Vogt och Eric Smith i :issue:"
"`23193`.)"

msgid ""
"The :meth:`TarFile.list() <tarfile.TarFile.list>` now accepts an optional "
"*members* keyword argument that can be set to a subset of the list returned "
"by :meth:`TarFile.getmembers() <tarfile.TarFile.getmembers>`. (Contributed "
"by Serhiy Storchaka in :issue:`21549`.)"
msgstr ""
":meth:`TarFile.list() <tarfile.TarFile.list>` accepterar nu ett valfritt "
"*members* nyckelordsargument som kan ställas in till en delmängd av listan "
"som returneras av :meth:`TarFile.getmembers() <tarfile.TarFile.getmembers>`. "
"(Bidrag från Serhiy Storchaka i :issue:`21549`.)"

msgid "threading"
msgstr "gängning"

msgid ""
"Both the :meth:`Lock.acquire() <threading.Lock.acquire>` and :meth:`RLock."
"acquire() <threading.RLock.acquire>` methods now use a monotonic clock for "
"timeout management. (Contributed by Victor Stinner in :issue:`22043`.)"
msgstr ""
"Både metoderna :meth:`Lock.acquire() <threading.Lock.acquire>` och :meth:"
"`RLock.acquire() <threading.RLock.acquire>` använder nu en monoton klocka "
"för timeout-hantering. (Bidrag från Victor Stinner i :issue:`22043`.)"

msgid "time"
msgstr "tid"

msgid ""
"The :func:`~time.monotonic` function is now always available. (Contributed "
"by Victor Stinner in :issue:`22043`.)"
msgstr ""
"Funktionen :func:`~time.monotonic` är nu alltid tillgänglig. (Bidrag från "
"Victor Stinner i :issue:`22043`.)"

msgid "timeit"
msgstr "tidsinställning"

msgid ""
"A new command line option ``-u`` or :samp:`--unit={U}` can be used to "
"specify the time unit for the timer output.  Supported options are ``usec``, "
"``msec``, or ``sec``.  (Contributed by Julian Gindi in :issue:`18983`.)"
msgstr ""
"Ett nytt kommandoradsalternativ ``-u`` eller :samp:`--unit={U}` kan användas "
"för att ange tidsenheten för timerutmatningen.  Alternativ som stöds är "
"``usec``, ``msec`` eller ``sec``.  (Bidrag från Julian Gindi i :issue:"
"`18983`.)"

msgid ""
"The :func:`~timeit.timeit` function has a new *globals* parameter for "
"specifying the namespace in which the code will be running. (Contributed by "
"Ben Roberts in :issue:`2527`.)"
msgstr ""
"Funktionen :func:`~timeit.timeit` har en ny *globals*-parameter för att ange "
"namnrymden där koden kommer att köras. (Bidrag från Ben Roberts i :issue:"
"`2527`.)"

msgid "tkinter"
msgstr "tkinter"

msgid ""
"The :mod:`!tkinter._fix` module used for setting up the Tcl/Tk environment "
"on Windows has been replaced by a private function in the :mod:`!_tkinter` "
"module which makes no permanent changes to environment variables. "
"(Contributed by Zachary Ware in :issue:`20035`.)"
msgstr ""
"Modulen :mod:`!tkinter._fix` som används för att ställa in Tcl/Tk-miljön i "
"Windows har ersatts av en privat funktion i modulen :mod:`!_tkinter` som "
"inte gör några permanenta ändringar i miljövariabler. (Bidrag från Zachary "
"Ware i :issue:`20035`.)"

msgid "traceback"
msgstr "spårning"

msgid ""
"New :func:`~traceback.walk_stack` and :func:`~traceback.walk_tb` functions "
"to conveniently traverse frame and :ref:`traceback objects <traceback-"
"objects>`. (Contributed by Robert Collins in :issue:`17911`.)"
msgstr ""
"Nya :func:`~traceback.walk_stack` och :func:`~traceback.walk_tb` funktioner "
"för att enkelt korsa frame och :ref:`traceback objects <traceback-objects>`. "
"(Bidrag från Robert Collins i :issue:`17911`.)"

msgid ""
"New lightweight classes: :class:`~traceback.TracebackException`, :class:"
"`~traceback.StackSummary`, and :class:`~traceback.FrameSummary`. "
"(Contributed by Robert Collins in :issue:`17911`.)"
msgstr ""
"Nya lättviktsklasser: :class:`~traceback.TracebackException`, :class:"
"`~traceback.StackSummary`, och :class:`~traceback.FrameSummary`. (Bidrag "
"från Robert Collins i :issue:`17911`.)"

msgid ""
"Both the :func:`~traceback.print_tb` and :func:`~traceback.print_stack` "
"functions now support negative values for the *limit* argument. (Contributed "
"by Dmitry Kazakov in :issue:`22619`.)"
msgstr ""
"Både funktionerna :func:`~traceback.print_tb` och :func:`~traceback."
"print_stack` stöder nu negativa värden för argumentet *limit*. (Bidrag från "
"Dmitry Kazakov i :issue:`22619`.)"

msgid "types"
msgstr "typer"

msgid ""
"A new :func:`~types.coroutine` function to transform :term:`generator "
"<generator iterator>` and :class:`generator-like <collections.abc."
"Generator>` objects into :term:`awaitables <awaitable>`. (Contributed by "
"Yury Selivanov in :issue:`24017`.)"
msgstr ""
"En ny :func:`~types.coroutine`-funktion för att omvandla :term:`generator "
"<generator iterator>` och :class:`generatorliknande <collections.abc."
"Generator>`-objekt till :term:`awaitables <awaitable>`. (Bidrag från Yury "
"Selivanov i :issue:`24017`.)"

msgid ""
"A new type called :class:`~types.CoroutineType`, which is used for :term:"
"`coroutine` objects created by :keyword:`async def` functions. (Contributed "
"by Yury Selivanov in :issue:`24400`.)"
msgstr ""
"En ny typ kallad :class:`~types.CoroutineType`, som används för :term:"
"`coroutine`-objekt som skapas av :keyword:`async def`-funktioner. (Bidrag "
"från Yury Selivanov i :issue:`24400`.)"

msgid "unicodedata"
msgstr "unicodedata"

msgid ""
"The :mod:`unicodedata` module now uses data from `Unicode 8.0.0 <https://"
"unicode.org/versions/Unicode8.0.0/>`_."
msgstr ""
"Modulen :mod:`unicodedata` använder nu data från `Unicode 8.0.0 <https://"
"unicode.org/versions/Unicode8.0.0/>`_."

msgid "unittest"
msgstr "unittest"

msgid ""
"The :meth:`TestLoader.loadTestsFromModule() <unittest.TestLoader."
"loadTestsFromModule>` method now accepts a keyword-only argument *pattern* "
"which is passed to ``load_tests`` as the third argument.  Found packages are "
"now checked for ``load_tests`` regardless of whether their path matches "
"*pattern*, because it is impossible for a package name to match the default "
"pattern. (Contributed by Robert Collins and Barry A. Warsaw in :issue:"
"`16662`.)"
msgstr ""
"Metoden :meth:`TestLoader.loadTestsFromModule() <unittest.TestLoader."
"loadTestsFromModule>` accepterar nu ett nyckelordsspecifikt argument "
"*pattern* som skickas till ``load_tests`` som det tredje argumentet.  "
"Hittade paket kontrolleras nu för ``load_tests`` oavsett om deras sökväg "
"matchar *pattern*, eftersom det är omöjligt för ett paketnamn att matcha "
"standardmönstret. (Bidrag från Robert Collins och Barry A. Warsaw i :issue:"
"`16662`.)"

msgid ""
"Unittest discovery errors now are exposed in the :data:`TestLoader.errors "
"<unittest.TestLoader.errors>` attribute of the :class:`~unittest.TestLoader` "
"instance. (Contributed by Robert Collins in :issue:`19746`.)"
msgstr ""
"Unittest discovery errors visas nu i attributet :data:`TestLoader.errors "
"<unittest.TestLoader.errors>` i instansen :class:`~unittest.TestLoader`. "
"(Bidrag från Robert Collins i :issue:`19746`.)"

msgid ""
"A new command line option ``--locals`` to show local variables in "
"tracebacks.  (Contributed by Robert Collins in :issue:`22936`.)"
msgstr ""
"Ett nytt kommandoradsalternativ ``--locals`` för att visa lokala variabler i "
"spårningar.  (Bidrag från Robert Collins i :issue:`22936`.)"

msgid "unittest.mock"
msgstr "unittest.mock"

msgid "The :class:`~unittest.mock.Mock` class has the following improvements:"
msgstr "Klassen :class:`~unittest.mock.Mock` har följande förbättringar:"

msgid ""
"The class constructor has a new *unsafe* parameter, which causes mock "
"objects to raise :exc:`AttributeError` on attribute names starting with "
"``\"assert\"``. (Contributed by Kushal Das in :issue:`21238`.)"
msgstr ""
"Klassens konstruktor har en ny *unsafe* parameter, som gör att mock-objekt "
"ger upphov till :exc:`AttributeError` på attributnamn som börjar med "
"``\"assert\"``. (Bidrag från Kushal Das i :issue:`21238`.)"

msgid ""
"A new :meth:`Mock.assert_not_called() <unittest.mock.Mock."
"assert_not_called>` method to check if the mock object was called. "
"(Contributed by Kushal Das in :issue:`21262`.)"
msgstr ""
"En ny :meth:`Mock.assert_not_called() <unittest.mock.Mock."
"assert_not_called>` metod för att kontrollera om mock-objektet anropades. "
"(Bidrag från Kushal Das i :issue:`21262`.)"

msgid ""
"The :class:`~unittest.mock.MagicMock` class now supports :meth:"
"`__truediv__`, :meth:`__divmod__` and :meth:`__matmul__` operators. "
"(Contributed by Johannes Baiter in :issue:`20968`, and Håkan Lövdahl in :"
"issue:`23581` and :issue:`23568`.)"
msgstr ""
"Klassen :class:`~unittest.mock.MagicMock` stöder nu operatorerna :meth:"
"`__truediv__`, :meth:`__divmod__` och :meth:`__matmul__`. (Bidrag från "
"Johannes Baiter i :issue:`20968`, och Håkan Lövdahl i :issue:`23581` och :"
"issue:`23568`.)"

msgid ""
"It is no longer necessary to explicitly pass ``create=True`` to the :func:"
"`~unittest.mock.patch` function when patching builtin names. (Contributed by "
"Kushal Das in :issue:`17660`.)"
msgstr ""
"Det är inte längre nödvändigt att uttryckligen skicka ``create=True`` till :"
"func:`~unittest.mock.patch`-funktionen när man patchar inbyggda namn. "
"(Bidrag från Kushal Das i :issue:`17660`.)"

msgid "urllib"
msgstr "urllib"

msgid ""
"A new :class:`request.HTTPPasswordMgrWithPriorAuth <urllib.request."
"HTTPPasswordMgrWithPriorAuth>` class allows HTTP Basic Authentication "
"credentials to be managed so as to eliminate unnecessary ``401`` response "
"handling, or to unconditionally send credentials on the first request in "
"order to communicate with servers that return a ``404`` response instead of "
"a ``401`` if the ``Authorization`` header is not sent. (Contributed by Matej "
"Cepl in :issue:`19494` and Akshit Khurana in :issue:`7159`.)"
msgstr ""
"En ny :class:`request.HTTPPasswordMgrWithPriorAuth <urllib.request."
"HTTPPasswordMgrWithPriorAuth>`-klass gör det möjligt att hantera HTTP Basic "
"Authentication-referenser så att onödig ``401``-svarshantering elimineras, "
"eller att ovillkorligen skicka referenser vid den första förfrågan för att "
"kommunicera med servrar som returnerar ett ``404``-svar istället för ett "
"``401`` om ``Authorization``-headern inte skickas. (Bidrag från Matej Cepl "
"i :issue:`19494` och Akshit Khurana i :issue:`7159`.)"

msgid ""
"A new *quote_via* argument for the :func:`parse.urlencode() <urllib.parse."
"urlencode>` function provides a way to control the encoding of query parts "
"if needed. (Contributed by Samwyse and Arnon Yaari in :issue:`13866`.)"
msgstr ""
"Ett nytt *quote_via*-argument för funktionen :func:`parse.urlencode() "
"<urllib.parse.urlencode>` ger ett sätt att kontrollera kodningen av frågans "
"delar om det behövs. (Bidrag från Samwyse och Arnon Yaari i :issue:`13866`.)"

msgid ""
"The :func:`request.urlopen() <urllib.request.urlopen>` function accepts an :"
"class:`ssl.SSLContext` object as a *context* argument, which will be used "
"for the HTTPS connection.  (Contributed by Alex Gaynor in :issue:`22366`.)"
msgstr ""
"Funktionen :func:`request.urlopen() <urllib.request.urlopen>` accepterar "
"ett :class:`ssl.SSLContext`-objekt som ett *context*-argument, vilket kommer "
"att användas för HTTPS-anslutningen.  (Bidrag från Alex Gaynor i :issue:"
"`22366`.)"

msgid ""
"The :func:`parse.urljoin() <urllib.parse.urljoin>` was updated to use the :"
"rfc:`3986` semantics for the resolution of relative URLs, rather than :rfc:"
"`1808` and :rfc:`2396`. (Contributed by Demian Brecht and Senthil Kumaran "
"in :issue:`22118`.)"
msgstr ""
":func:`parse.urljoin() <urllib.parse.urljoin>` uppdaterades för att använda :"
"rfc:`3986` semantiken för upplösning av relativa URL:er, snarare än :rfc:"
"`1808` och :rfc:`2396`. (Bidrag från Demian Brecht och Senthil Kumaran i :"
"issue:`22118`.)"

msgid "wsgiref"
msgstr "wsgiref"

msgid ""
"The *headers* argument of the :class:`headers.Headers <wsgiref.headers."
"Headers>` class constructor is now optional. (Contributed by Pablo Torres "
"Navarrete and SilentGhost in :issue:`5800`.)"
msgstr ""
"Argumentet *headers* i klasskonstruktören :class:`headers.Headers <wsgiref."
"headers.Headers>` är nu valfritt. (Bidrag från Pablo Torres Navarrete och "
"SilentGhost i :issue:`5800`.)"

msgid "xmlrpc"
msgstr "xmlrpc"

msgid ""
"The :class:`client.ServerProxy <xmlrpc.client.ServerProxy>` class now "
"supports the :term:`context manager` protocol. (Contributed by Claudiu Popa "
"in :issue:`20627`.)"
msgstr ""
"Klassen :class:`client.ServerProxy <xmlrpc.client.ServerProxy>` stöder nu "
"protokollet :term:`context manager`. (Bidrag från Claudiu Popa i :issue:"
"`20627`.)"

msgid ""
"The :class:`client.ServerProxy <xmlrpc.client.ServerProxy>` constructor now "
"accepts an optional :class:`ssl.SSLContext` instance. (Contributed by Alex "
"Gaynor in :issue:`22960`.)"
msgstr ""
"Konstruktorn :class:`client.ServerProxy <xmlrpc.client.ServerProxy>` "
"accepterar nu en valfri instans av :class:`ssl.SSLContext`. (Bidrag från "
"Alex Gaynor i :issue:`22960`.)"

msgid "xml.sax"
msgstr "xml.sax"

msgid ""
"SAX parsers now support a character stream of the :class:`xmlreader."
"InputSource <xml.sax.xmlreader.InputSource>` object. (Contributed by Serhiy "
"Storchaka in :issue:`2175`.)"
msgstr ""
"SAX-parsers stöder nu en teckenström av :class:`xmlreader.InputSource <xml."
"sax.xmlreader.InputSource>`-objektet. (Bidrag från Serhiy Storchaka i :issue:"
"`2175`.)"

msgid ""
":func:`~xml.sax.parseString` now accepts a :class:`str` instance. "
"(Contributed by Serhiy Storchaka in :issue:`10590`.)"
msgstr ""
":func:`~xml.sax.parseString` accepterar nu en :class:`str`-instans. (Bidrag "
"från Serhiy Storchaka i :issue:`10590`.)"

msgid "zipfile"
msgstr "zip-fil"

msgid ""
"ZIP output can now be written to unseekable streams. (Contributed by Serhiy "
"Storchaka in :issue:`23252`.)"
msgstr ""
"ZIP-utdata kan nu skrivas till oseekbara strömmar. (Bidrag från Serhiy "
"Storchaka i :issue:`23252`.)"

msgid ""
"The *mode* argument of :meth:`ZipFile.open() <zipfile.ZipFile.open>` method "
"now accepts ``\"x\"`` to request exclusive creation. (Contributed by Serhiy "
"Storchaka in :issue:`21717`.)"
msgstr ""
"Argumentet *mode* i metoden :meth:`ZipFile.open() <zipfile.ZipFile.open>` "
"accepterar nu ``\"x\"`` för att begära exklusiv skapelse. (Bidrag från "
"Serhiy Storchaka i :issue:`21717`.)"

msgid "Other module-level changes"
msgstr "Andra ändringar på modulnivå"

msgid ""
"Many functions in the :mod:`mmap`, :mod:`!ossaudiodev`, :mod:`socket`, :mod:"
"`ssl`, and :mod:`codecs` modules now accept writable :term:`bytes-like "
"objects <bytes-like object>`. (Contributed by Serhiy Storchaka in :issue:"
"`23001`.)"
msgstr ""
"Många funktioner i modulerna :mod:`mmap`, :mod:`!ossaudiodev`, :mod:"
"`socket`, :mod:`ssl` och :mod:`codecs` accepterar nu skrivbara :term:"
"`bytesliknande objekt <bytes-like object>`. (Bidrag från Serhiy Storchaka i :"
"issue:`23001`.)"

msgid "Optimizations"
msgstr "Optimeringar"

msgid ""
"The :func:`os.walk` function has been sped up by 3 to 5 times on POSIX "
"systems, and by 7 to 20 times on Windows.  This was done using the new :func:"
"`os.scandir` function, which exposes file information from the underlying "
"``readdir`` or ``FindFirstFile``/``FindNextFile`` system calls.  "
"(Contributed by Ben Hoyt with help from Victor Stinner in :issue:`23605`.)"
msgstr ""
"Funktionen :func:`os.walk` har snabbats upp med 3-5 gånger på POSIX-system "
"och med 7-20 gånger på Windows.  Detta gjordes med hjälp av den nya "
"funktionen :func:`os.scandir`, som exponerar filinformation från de "
"underliggande systemanropen ``readdir`` eller ``FindFirstFile``/"
"``FindNextFile``.  (Bidrag från Ben Hoyt med hjälp av Victor Stinner i :"
"issue:`23605`.)"

msgid ""
"Construction of ``bytes(int)`` (filled by zero bytes) is faster and uses "
"less memory for large objects. ``calloc()`` is used instead of ``malloc()`` "
"to allocate memory for these objects. (Contributed by Victor Stinner in :"
"issue:`21233`.)"
msgstr ""
"Konstruktionen av ``bytes(int)`` (fylld med nollbytes) är snabbare och "
"använder mindre minne för stora objekt. ``calloc()`` används istället för "
"``malloc()`` för att allokera minne för dessa objekt. (Bidrag från Victor "
"Stinner i :issue:`21233`.)"

msgid ""
"Some operations on :mod:`ipaddress` :class:`~ipaddress.IPv4Network` and :"
"class:`~ipaddress.IPv6Network` have been massively sped up, such as :meth:"
"`~ipaddress.IPv4Network.subnets`, :meth:`~ipaddress.IPv4Network.supernet`, :"
"func:`~ipaddress.summarize_address_range`, :func:`~ipaddress."
"collapse_addresses`. The speed up can range from 3 to 15 times. (Contributed "
"by Antoine Pitrou, Michel Albert, and Markus in :issue:`21486`, :issue:"
"`21487`, :issue:`20826`, :issue:`23266`.)"
msgstr ""
"Vissa operationer på :mod:`ipaddress` :class:`~ipaddress.IPv4Network` och :"
"class:`~ipaddress.IPv6Network` har blivit kraftigt påskyndade, såsom :meth:"
"`~ipaddress.IPv4Network.subnets`, :meth:`~ipaddress.IPv4Network.supernet`, :"
"func:`~ipaddress.summarize_address_range`, :func:`~ipaddress."
"collapse_addresses`. Hastigheten kan variera från 3 till 15 gånger. (Bidrag "
"från Antoine Pitrou, Michel Albert och Markus i :issue:`21486`, :issue:"
"`21487`, :issue:`20826`, :issue:`23266`.)"

msgid ""
"Pickling of :mod:`ipaddress` objects was optimized to produce significantly "
"smaller output.  (Contributed by Serhiy Storchaka in :issue:`23133`.)"
msgstr ""
"Pickling av :mod:`ipaddress`-objekt har optimerats för att ge betydligt "
"mindre utdata.  (Bidrag från Serhiy Storchaka i :issue:`23133`.)"

msgid ""
"Many operations on :class:`io.BytesIO` are now 50% to 100% faster. "
"(Contributed by Serhiy Storchaka in :issue:`15381` and David Wilson in :"
"issue:`22003`.)"
msgstr ""
"Många operationer på :class:`io.BytesIO` är nu 50% to 100% faster. (Bidrag "
"från Serhiy Storchaka i :issue:`15381` och David Wilson i :issue:`22003`.)"

msgid ""
"The :func:`marshal.dumps` function is now faster: 65--85% with versions 3 "
"and 4, 20--25% with versions 0 to 2 on typical data, and up to 5 times in "
"best cases. (Contributed by Serhiy Storchaka in :issue:`20416` and :issue:"
"`23344`.)"
msgstr ""
"Funktionen :func:`marshal.dumps` är nu snabbare: 65--85% med version 3 och "
"4, 20--25% med version 0 till 2 på typiska data, och upp till 5 gånger i "
"bästa fall. (Bidrag från Serhiy Storchaka i :issue:`20416` och :issue:"
"`23344`.)"

msgid ""
"The UTF-32 encoder is now 3 to 7 times faster. (Contributed by Serhiy "
"Storchaka in :issue:`15027`.)"
msgstr ""
"UTF-32-kodaren är nu 3 till 7 gånger snabbare. (Bidrag från Serhiy Storchaka "
"i :issue:`15027`.)"

msgid ""
"Regular expressions are now parsed up to 10% faster. (Contributed by Serhiy "
"Storchaka in :issue:`19380`.)"
msgstr ""
"Reguljära uttryck analyseras nu upp till 10% faster. (Bidrag från Serhiy "
"Storchaka i :issue:`19380`.)"

msgid ""
"The :func:`json.dumps` function was optimized to run with "
"``ensure_ascii=False`` as fast as with ``ensure_ascii=True``. (Contributed "
"by Naoki Inada in :issue:`23206`.)"
msgstr ""
"Funktionen :func:`json.dumps` optimerades för att köras med "
"``ensure_ascii=False`` lika snabbt som med ``ensure_ascii=True``. (Bidrag "
"från Naoki Inada i :issue:`23206`.)"

msgid ""
"The :c:func:`PyObject_IsInstance` and :c:func:`PyObject_IsSubclass` "
"functions have been sped up in the common case that the second argument has :"
"class:`type` as its metaclass. (Contributed Georg Brandl by in :issue:"
"`22540`.)"
msgstr ""
"Funktionerna :c:func:`PyObject_IsInstance` och :c:func:`PyObject_IsSubclass` "
"har snabbas upp i det vanliga fallet att det andra argumentet har :class:"
"`type` som sin metaklass. (Bidrag från Georg Brandl i :issue:`22540`.)"

msgid ""
"Method caching was slightly improved, yielding up to 5% performance "
"improvement in some benchmarks. (Contributed by Antoine Pitrou in :issue:"
"`22847`.)"
msgstr ""
"Cachelagringen av metoder förbättrades något, vilket gav upp till 5% p% "
"bättre prestanda i vissa benchmarks. (Bidrag från Antoine Pitrou i :issue:"
"`22847`.)"

msgid ""
"Objects from the :mod:`random` module now use 50% less memory on 64-bit "
"builds.  (Contributed by Serhiy Storchaka in :issue:`23488`.)"
msgstr ""
"Objekt från modulen :mod:`random` använder nu 50% less minne i 64-"
"bitarsversioner.  (Bidrag från Serhiy Storchaka i :issue:`23488`.)"

msgid ""
"The :func:`property` getter calls are up to 25% faster. (Contributed by Joe "
"Jevnik in :issue:`23910`.)"
msgstr ""
"Anropen till :func:`property` getter är upp till 25% faster. (Bidrag från "
"Joe Jevnik i :issue:`23910`.)"

msgid ""
"Instantiation of :class:`fractions.Fraction` is now up to 30% faster. "
"(Contributed by Stefan Behnel in :issue:`22464`.)"
msgstr ""
"Instantiering av :class:`fractions.Fraction` är nu upp till 30% faster. "
"(Bidrag från Stefan Behnel i :issue:`22464`.)"

msgid ""
"String methods :meth:`~str.find`, :meth:`~str.rfind`, :meth:`~str.split`, :"
"meth:`~str.partition` and the :keyword:`in` string operator are now "
"significantly faster for searching 1-character substrings. (Contributed by "
"Serhiy Storchaka in :issue:`23573`.)"
msgstr ""
"Strängmetoderna :meth:`~str.find`, :meth:`~str.rfind`, :meth:`~str.split`, :"
"meth:`~str.partition` och strängoperatorn :keyword:`in` är nu betydligt "
"snabbare för sökning av substrängar med 1 tecken. (Bidrag från Serhiy "
"Storchaka i :issue:`23573`.)"

msgid "Build and C API Changes"
msgstr "Ändringar i Build och C API"

msgid "New ``calloc`` functions were added:"
msgstr "Nya ``calloc``-funktioner har lagts till:"

msgid ":c:func:`PyMem_RawCalloc`,"
msgstr ":c:func:`PyMem_RawCalloc`,"

msgid ":c:func:`PyMem_Calloc`,"
msgstr ":c:func:`PyMem_Calloc`,"

msgid ":c:func:`PyObject_Calloc`."
msgstr ":c:func:`PyObject_Calloc`."

msgid "(Contributed by Victor Stinner in :issue:`21233`.)"
msgstr "(Bidrag från Victor Stinner i :issue:`21233`.)"

msgid "New encoding/decoding helper functions:"
msgstr "Nya hjälpfunktioner för kodning/avkodning:"

msgid ":c:func:`Py_DecodeLocale` (replaced ``_Py_char2wchar()``),"
msgstr ":c:func:`Py_DecodeLocale` (ersatte ``_Py_char2wchar()``)),"

msgid ":c:func:`Py_EncodeLocale` (replaced ``_Py_wchar2char()``)."
msgstr ":c:func:`Py_EncodeLocale` (ersatte ``_Py_wchar2char()``))."

msgid "(Contributed by Victor Stinner in :issue:`18395`.)"
msgstr "(Bidrag från Victor Stinner i :issue:`18395`.)"

msgid ""
"A new :c:func:`PyCodec_NameReplaceErrors` function to replace the unicode "
"encode error with ``\\N{...}`` escapes. (Contributed by Serhiy Storchaka in :"
"issue:`19676`.)"
msgstr ""
"En ny :c:func:`PyCodec_NameReplaceErrors`-funktion för att ersätta unicode-"
"kodningsfelet med ``\\N{...}`` escapes. (Bidrag från Serhiy Storchaka i :"
"issue:`19676`.)"

msgid ""
"A new :c:func:`PyErr_FormatV` function similar to :c:func:`PyErr_Format`, "
"but accepts a :c:type:`va_list` argument. (Contributed by Antoine Pitrou in :"
"issue:`18711`.)"
msgstr ""
"En ny :c:func:`PyErr_FormatV` funktion som liknar :c:func:`PyErr_Format`, "
"men accepterar ett :c:type:`va_list` argument. (Bidrag från Antoine Pitrou "
"i :issue:`18711`.)"

msgid ""
"A new :c:data:`PyExc_RecursionError` exception. (Contributed by Georg Brandl "
"in :issue:`19235`.)"
msgstr ""
"Ett nytt :c:data:`PyExc_RecursionError` undantag. (Bidrag från Georg Brandl "
"i :issue:`19235`.)"

msgid ""
"New :c:func:`PyModule_FromDefAndSpec`, :c:func:`PyModule_FromDefAndSpec2`, "
"and :c:func:`PyModule_ExecDef` functions introduced by :pep:`489` -- multi-"
"phase extension module initialization. (Contributed by Petr Viktorin in :"
"issue:`24268`.)"
msgstr ""
"Nya :c:func:`PyModule_FromDefAndSpec`, :c:func:`PyModule_FromDefAndSpec2`, "
"och :c:func:`PyModule_ExecDef` funktioner införda av :pep:`489` -- "
"initialisering av tilläggsmoduler i flera faser. (Bidrag från Petr Viktorin "
"i :issue:`24268`.)"

msgid ""
"New :c:func:`PyNumber_MatrixMultiply` and :c:func:"
"`PyNumber_InPlaceMatrixMultiply` functions to perform matrix multiplication. "
"(Contributed by Benjamin Peterson in :issue:`21176`.  See also :pep:`465` "
"for details.)"
msgstr ""
"Nya :c:func:`PyNumber_MatrixMultiply` och :c:func:"
"`PyNumber_InPlaceMatrixMultiply` funktioner för att utföra "
"matrismultiplikation. (Bidrag från Benjamin Peterson i :issue:`21176`.  Se "
"även :pep:`465` för detaljer)"

msgid ""
"The :c:member:`PyTypeObject.tp_finalize` slot is now part of the stable ABI."
msgstr ""
"Platsen :c:member:`PyTypeObject.tp_finalize` är nu en del av det stabila ABI:"
"et."

msgid ""
"Windows builds now require Microsoft Visual C++ 14.0, which is available as "
"part of `Visual Studio 2015 <https://visualstudio.microsoft.com/en/vs/older-"
"downloads/#visual-studio-2015-and-other-products>`_."
msgstr ""
"Windows-versioner kräver nu Microsoft Visual C++ 14.0, som finns "
"tillgängligt som en del av Visual Studio 2015 <https://visualstudio."
"microsoft.com/en/vs/older-downloads/#visual-studio-2015-and-other-"
"products>`_."

msgid ""
"Extension modules now include a platform information tag in their filename "
"on some platforms (the tag is optional, and CPython will import extensions "
"without it, although if the tag is present and mismatched, the extension "
"won't be loaded):"
msgstr ""
"Tilläggsmoduler innehåller nu en plattformsinformationstagg i sitt filnamn "
"på vissa plattformar (taggen är valfri och CPython importerar tillägg utan "
"den, men om taggen finns och inte stämmer överens kommer tillägget inte att "
"laddas):"

msgid ""
"On Linux, extension module filenames end with ``.cpython-<major><minor>m-"
"<architecture>-<os>.pyd``:"
msgstr ""
"På Linux slutar filnamn för tilläggsmoduler med ``.cpython-<major><minor>m-"
"<architecture>-<os>.pyd``:"

msgid ""
"``<major>`` is the major number of the Python version; for Python 3.5 this "
"is ``3``."
msgstr ""
"``<major>`` är huvudnumret för Python-versionen; för Python 3.5 är detta "
"``3``."

msgid ""
"``<minor>`` is the minor number of the Python version; for Python 3.5 this "
"is ``5``."
msgstr ""
"``<minor>`` är det mindre numret på Python-versionen; för Python 3.5 är "
"detta ``5``."

msgid ""
"``<architecture>`` is the hardware architecture the extension module was "
"built to run on. It's most commonly either ``i386`` for 32-bit Intel "
"platforms or ``x86_64`` for 64-bit Intel (and AMD) platforms."
msgstr ""
"``<architecture>`` är den hårdvaruarkitektur som tilläggsmodulen byggdes för "
"att köras på. Det vanligaste är antingen ``i386`` för 32-bitars Intel-"
"plattformar eller ``x86_64`` för 64-bitars Intel (och AMD)-plattformar."

msgid ""
"``<os>`` is always ``linux-gnu``, except for extensions built to talk to the "
"32-bit ABI on 64-bit platforms, in which case it is ``linux-gnu32`` (and "
"``<architecture>`` will be ``x86_64``)."
msgstr ""
"``<os>`` är alltid ``linux-gnu``, förutom för tillägg som är byggda för att "
"prata med 32-bitars ABI på 64-bitars plattformar, i vilket fall det är "
"``linux-gnu32`` (och ``<architecture>`` kommer att vara ``x86_64``)."

msgid ""
"On Windows, extension module filenames end with ``<debug>.cp<major><minor>-"
"<platform>.pyd``:"
msgstr ""
"I Windows slutar filnamnen för tilläggsmoduler med ``<debug>."
"cp<major><minor>-<platform>.pyd```:"

msgid ""
"``<platform>`` is the platform the extension module was built for, either "
"``win32`` for Win32, ``win_amd64`` for Win64, ``win_ia64`` for Windows "
"Itanium 64, and ``win_arm`` for Windows on ARM."
msgstr ""
"``<platform>`` är den plattform som tilläggsmodulen byggdes för, antingen "
"``win32`` för Win32, ``win_amd64`` för Win64, ``win_ia64`` för Windows "
"Itanium 64 och ``win_arm`` för Windows on ARM."

msgid ""
"If built in debug mode, ``<debug>`` will be ``_d``, otherwise it will be "
"blank."
msgstr ""
"Om den är byggd i debugläge kommer ``<debug>`` att vara ``_d``, annars "
"kommer den att vara tom."

msgid ""
"On OS X platforms, extension module filenames now end with ``-darwin.so``."
msgstr ""
"På OS X-plattformar slutar filnamnen för tilläggsmoduler nu med ``-darwin."
"so``."

msgid ""
"On all other platforms, extension module filenames are the same as they were "
"with Python 3.4."
msgstr ""
"På alla andra plattformar är filnamnen för tilläggsmoduler desamma som de "
"var med Python 3.4."

msgid "Deprecated"
msgstr "Föråldrat"

msgid "New Keywords"
msgstr "Nya nyckelord"

msgid ""
"``async`` and ``await`` are not recommended to be used as variable, class, "
"function or module names.  Introduced by :pep:`492` in Python 3.5, they will "
"become proper keywords in Python 3.7."
msgstr ""
"``async`` och ``await`` rekommenderas inte att användas som variabel-, "
"klass-, funktions- eller modulnamn.  De introducerades av :pep:`492` i "
"Python 3.5 och kommer att bli riktiga nyckelord i Python 3.7."

msgid "Deprecated Python Behavior"
msgstr "Föråldrat Python-beteende"

msgid ""
"Raising the :exc:`StopIteration` exception inside a generator will now "
"generate a silent :exc:`PendingDeprecationWarning`, which will become a non-"
"silent deprecation warning in Python 3.6 and will trigger a :exc:"
"`RuntimeError` in Python 3.7. See :ref:`PEP 479: Change StopIteration "
"handling inside generators <whatsnew-pep-479>` for details."
msgstr ""
"Om man väcker :exc:`StopIteration`-undantaget inuti en generator kommer det "
"nu att generera en tyst :exc:`PendingDeprecationWarning`, som kommer att bli "
"en icke-tyst deprecation-varning i Python 3.6 och kommer att utlösa ett :exc:"
"`RuntimeError` i Python 3.7. Se :ref:`PEP 479: Ändra StopIteration-"
"hanteringen i generatorer <whatsnew-pep-479>` för detaljer."

msgid "Unsupported Operating Systems"
msgstr "Operativsystem som inte stöds"

msgid ""
"Windows XP is no longer supported by Microsoft, thus, per :PEP:`11`, CPython "
"3.5 is no longer officially supported on this OS."
msgstr ""
"Windows XP stöds inte längre av Microsoft, vilket innebär att CPython 3.5 "
"enligt :PEP:`11` inte längre stöds officiellt på detta operativsystem."

msgid "Deprecated Python modules, functions and methods"
msgstr "Föråldrade Python-moduler, -funktioner och -metoder"

msgid ""
"The :mod:`formatter` module has now graduated to full deprecation and is "
"still slated for removal in Python 3.6."
msgstr ""
"Modulen :mod:`formatter` har nu blivit helt föråldrad och är fortfarande "
"planerad att tas bort i Python 3.6."

msgid ""
"The :func:`asyncio.async` function is deprecated in favor of :func:`~asyncio."
"ensure_future`."
msgstr ""
"Funktionen :func:`asyncio.async` är utfasad till förmån för :func:`~asyncio."
"ensure_future`."

msgid ""
"The :mod:`!smtpd` module has in the past always decoded the DATA portion of "
"email messages using the ``utf-8`` codec.  This can now be controlled by the "
"new *decode_data* keyword to :class:`!SMTPServer`.  The default value is "
"``True``, but this default is deprecated.  Specify the *decode_data* keyword "
"with an appropriate value to avoid the deprecation warning."
msgstr ""
"Modulen :mod:`!smtpd` har tidigare alltid avkodat DATA-delen av e-"
"postmeddelanden med hjälp av codec ``utf-8``.  Detta kan nu kontrolleras med "
"det nya nyckelordet *decode_data* i :class:`!SMTPServer`.  Standardvärdet är "
"``True``, men detta standardvärde är föråldrat.  Ange nyckelordet "
"*decode_data* med ett lämpligt värde för att undvika deprecation-varningen."

msgid ""
"Directly assigning values to the :attr:`~http.cookies.Morsel.key`, :attr:"
"`~http.cookies.Morsel.value` and :attr:`~http.cookies.Morsel.coded_value` "
"of :class:`http.cookies.Morsel` objects is deprecated.  Use the :meth:`~http."
"cookies.Morsel.set` method instead.  In addition, the undocumented "
"*LegalChars* parameter of :meth:`~http.cookies.Morsel.set` is deprecated, "
"and is now ignored."
msgstr ""
"Att direkt tilldela värden till :attr:`~http.cookies.Morsel.key`, :attr:"
"`~http.cookies.Morsel.value` och :attr:`~http.cookies.Morsel.coded_value` "
"av :class:`http.cookies.Morsel`-objekt är föråldrat.  Använd istället "
"metoden :meth:`~http.cookies.Morsel.set`.  Dessutom är den odokumenterade "
"parametern *LegalChars* i :meth:`~http.cookies.Morsel.set` föråldrad och "
"ignoreras nu."

msgid ""
"Passing a format string as keyword argument *format_string* to the :meth:"
"`~string.Formatter.format` method of the :class:`string.Formatter` class has "
"been deprecated. (Contributed by Serhiy Storchaka in :issue:`23671`.)"
msgstr ""
"Att skicka en formatsträng som nyckelordsargument *format_string* till :meth:"
"`~string.Formatter.format`-metoden i :class:`string.Formatter`-klassen har "
"utgått. (Bidrag från Serhiy Storchaka i :issue:`23671`.)"

msgid ""
"The :func:`platform.dist` and :func:`platform.linux_distribution` functions "
"are now deprecated.  Linux distributions use too many different ways of "
"describing themselves, so the functionality is left to a package. "
"(Contributed by Vajrasky Kok and Berker Peksag in :issue:`1322`.)"
msgstr ""
"Funktionerna :func:`platform.dist` och :func:`platform.linux_distribution` "
"är nu föråldrade.  Linuxdistributioner använder för många olika sätt att "
"beskriva sig själva, så funktionaliteten lämnas till ett paket. (Bidrag från "
"Vajrasky Kok och Berker Peksag i :issue:`1322`.)"

msgid ""
"The previously undocumented ``from_function`` and ``from_builtin`` methods "
"of :class:`inspect.Signature` are deprecated.  Use the new :meth:`Signature."
"from_callable() <inspect.Signature.from_callable>` method instead. "
"(Contributed by Yury Selivanov in :issue:`24248`.)"
msgstr ""
"De tidigare odokumenterade metoderna ``from_function`` och ``from_builtin`` "
"i :class:`inspect.Signature` är avförda.  Använd den nya :meth:`Signature."
"from_callable() <inspect.Signature.from_callable>`-metoden istället. (Bidrag "
"från Yury Selivanov i :issue:`24248`.)"

msgid ""
"The :func:`inspect.getargspec` function is deprecated and scheduled to be "
"removed in Python 3.6.  (See :issue:`20438` for details.)"
msgstr ""
"Funktionen :func:`inspect.getargspec` är föråldrad och planeras att tas bort "
"i Python 3.6. (Se :issue:`20438` för detaljer.)"

msgid ""
"The :mod:`inspect` :func:`~inspect.getfullargspec`, :func:`~inspect."
"getcallargs`, and :func:`~inspect.formatargspec` functions are deprecated in "
"favor of the :func:`inspect.signature` API. (Contributed by Yury Selivanov "
"in :issue:`20438`.)"
msgstr ""
"Funktionerna :mod:`inspect` :func:`~inspect.getfullargspec`, :func:`~inspect."
"getcallargs` och :func:`~inspect.formatargspec` har utgått till förmån för "
"API:t :func:`inspect.signature`. (Bidrag från Yury Selivanov i :issue:"
"`20438`.)"

msgid ""
":func:`~inspect.getargvalues` and :func:`~inspect.formatargvalues` functions "
"were inadvertently marked as deprecated with the release of Python 3.5.0."
msgstr ""
"funktionerna :func:`~inspect.getargvalues` och :func:`~inspect."
"formatargvalues` markerades oavsiktligt som föråldrade i och med lanseringen "
"av Python 3.5.0."

msgid ""
"Use of :const:`re.LOCALE` flag with str patterns or :const:`re.ASCII` is now "
"deprecated.  (Contributed by Serhiy Storchaka in :issue:`22407`.)"
msgstr ""
"Användning av flaggan :const:`re.LOCALE` med str-mönster eller :const:`re."
"ASCII` är nu föråldrad.  (Bidrag från Serhiy Storchaka i :issue:`22407`.)"

msgid ""
"Use of unrecognized special sequences consisting of ``'\\'`` and an ASCII "
"letter in regular expression patterns and replacement patterns now raises a "
"deprecation warning and will be forbidden in Python 3.6. (Contributed by "
"Serhiy Storchaka in :issue:`23622`.)"
msgstr ""
"Användning av oigenkända specialsekvenser bestående av ``'\\'`` och en ASCII-"
"bokstav i mönster för reguljära uttryck och ersättningsmönster ger nu upphov "
"till en varning för föråldring och kommer att förbjudas i Python 3.6. "
"(Bidrag från Serhiy Storchaka i :issue:`23622`.)"

msgid ""
"The undocumented and unofficial *use_load_tests* default argument of the :"
"meth:`unittest.TestLoader.loadTestsFromModule` method now is deprecated and "
"ignored. (Contributed by Robert Collins and Barry A. Warsaw in :issue:"
"`16662`.)"
msgstr ""
"Det odokumenterade och inofficiella *use_load_tests* standardargumentet i "
"metoden :meth:`unittest.TestLoader.loadTestsFromModule` är nu föråldrat och "
"ignoreras. (Bidrag från Robert Collins och Barry A. Warsaw i :issue:`16662`.)"

msgid "Removed"
msgstr "Borttagen"

msgid "API and Feature Removals"
msgstr "Borttagning av API och funktioner"

msgid ""
"The following obsolete and previously deprecated APIs and features have been "
"removed:"
msgstr ""
"Följande föråldrade och tidigare utfasade API:er och funktioner har tagits "
"bort:"

msgid ""
"The ``__version__`` attribute has been dropped from the email package.  The "
"email code hasn't been shipped separately from the stdlib for a long time, "
"and the ``__version__`` string was not updated in the last few releases."
msgstr ""
"Attributet ``__version__`` har tagits bort från e-postpaketet.  E-postkoden "
"har inte levererats separat från stdlib på länge och strängen "
"``__version__`` har inte uppdaterats under de senaste utgåvorna."

msgid ""
"The internal ``Netrc`` class in the :mod:`ftplib` module was deprecated in "
"3.4, and has now been removed. (Contributed by Matt Chaput in :issue:`6623`.)"
msgstr ""
"Den interna klassen ``Netrc`` i modulen :mod:`ftplib` var föråldrad i 3.4 "
"och har nu tagits bort. (Bidrag från Matt Chaput i :issue:`6623`.)"

msgid "The concept of ``.pyo`` files has been removed."
msgstr "Konceptet med ``.pyo``-filer har tagits bort."

msgid ""
"The JoinableQueue class in the provisional :mod:`asyncio` module was "
"deprecated in 3.4.4 and is now removed. (Contributed by A. Jesse Jiryu Davis "
"in :issue:`23464`.)"
msgstr ""
"Klassen JoinableQueue i den provisoriska modulen :mod:`asyncio` var "
"föråldrad i 3.4.4 och är nu borttagen. (Bidrag från A. Jesse Jiryu Davis i :"
"issue:`23464`.)"

msgid "Porting to Python 3.5"
msgstr "Portning till Python 3.5"

msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"I det här avsnittet listas tidigare beskrivna ändringar och andra buggfixar "
"som kan kräva ändringar i din kod."

msgid "Changes in Python behavior"
msgstr "Förändringar i Pythons beteende"

msgid ""
"Due to an oversight, earlier Python versions erroneously accepted the "
"following syntax::"
msgstr ""
"På grund av ett förbiseende accepterade tidigare Python-versioner felaktigt "
"följande syntax::"

msgid ""
"f(1 for x in [1], *args)\n"
"f(1 for x in [1], **kwargs)"
msgstr ""
"f(1 för x i [1], *args)\n"
"f(1 för x i [1], **kwargs)"

msgid ""
"Python 3.5 now correctly raises a :exc:`SyntaxError`, as generator "
"expressions must be put in parentheses if not a sole argument to a function."
msgstr ""
"Python 3.5 utlöser nu korrekt ett :exc:`SyntaxError`, eftersom "
"generatoruttryck måste sättas inom parentes om de inte är det enda "
"argumentet till en funktion."

msgid "Changes in the Python API"
msgstr "Ändringar i Python API"

msgid ""
":pep:`475`: System calls are now retried when interrupted by a signal "
"instead of raising :exc:`InterruptedError` if the Python signal handler does "
"not raise an exception."
msgstr ""
":pep:`475`: Systemanrop återupptas nu när de avbryts av en signal istället "
"för att ge upphov till :exc:`InterruptedError` om Pythons signalhanterare "
"inte ger upphov till ett undantag."

msgid ""
"Before Python 3.5, a :class:`datetime.time` object was considered to be "
"false if it represented midnight in UTC.  This behavior was considered "
"obscure and error-prone and has been removed in Python 3.5.  See :issue:"
"`13936` for full details."
msgstr ""
"Före Python 3.5 ansågs ett :class:`datetime.time`-objekt vara falskt om det "
"representerade midnatt i UTC.  Detta beteende ansågs obskyrt och felbenäget "
"och har tagits bort i Python 3.5.  Se :issue:`13936` för fullständiga "
"detaljer."

msgid ""
"The :meth:`ssl.SSLSocket.send` method now raises either :exc:`ssl."
"SSLWantReadError` or :exc:`ssl.SSLWantWriteError` on a non-blocking socket "
"if the operation would block.  Previously, it would return ``0``.  "
"(Contributed by Nikolaus Rath in :issue:`20951`.)"
msgstr ""
"Metoden :meth:`ssl.SSLSocket.send` ger nu antingen :exc:`ssl."
"SSLWantReadError` eller :exc:`ssl.SSLWantWriteError` på en icke-blockerande "
"socket om operationen skulle blockera.  Tidigare skulle den returnera "
"``0``.  (Bidrag från Nikolaus Rath i :issue:`20951`.)"

msgid ""
"The ``__name__`` attribute of generators is now set from the function name, "
"instead of being set from the code name. Use ``gen.gi_code.co_name`` to "
"retrieve the code name. Generators also have a new ``__qualname__`` "
"attribute, the qualified name, which is now used for the representation of a "
"generator (``repr(gen)``). (Contributed by Victor Stinner in :issue:`21205`.)"
msgstr ""
"Attributet ``__name__`` för generatorer anges nu från funktionsnamnet, "
"istället för att anges från kodnamnet. Använd ``gen.gi_code.co_name`` för "
"att hämta kodnamnet. Generatorer har också ett nytt ``__qualname__``-"
"attribut, det kvalificerade namnet, som nu används för att representera en "
"generator (``repr(gen)``). (Bidrag från Victor Stinner i :issue:`21205`.)"

msgid ""
"The deprecated \"strict\" mode and argument of :class:`~html.parser."
"HTMLParser`, :meth:`!HTMLParser.error`, and the :exc:`!HTMLParserError` "
"exception have been removed.  (Contributed by Ezio Melotti in :issue:"
"`15114`.) The *convert_charrefs* argument of :class:`~html.parser."
"HTMLParser` is now ``True`` by default.  (Contributed by Berker Peksag in :"
"issue:`21047`.)"
msgstr ""
"Det föråldrade läget och argumentet \"strict\" i :class:`~html.parser."
"HTMLParser`, :meth:`!HTMLParser.error` och undantaget :exc:`!"
"HTMLParserError` har tagits bort.  (Bidrag från Ezio Melotti i :issue:"
"`15114`.) Argumentet *convert_charrefs* i :class:`~html.parser.HTMLParser` "
"är nu ``True`` som standard.  (Bidrag från Berker Peksag i :issue:`21047`.)"

msgid ""
"Although it is not formally part of the API, it is worth noting for porting "
"purposes (ie: fixing tests) that error messages that were previously of the "
"form \"'sometype' does not support the buffer protocol\" are now of the form "
"\"a :term:`bytes-like object` is required, not 'sometype'\". (Contributed by "
"Ezio Melotti in :issue:`16518`.)"
msgstr ""
"Även om det inte formellt är en del av API:et, är det värt att notera för "
"portningsändamål (dvs: fixa tester) att felmeddelanden som tidigare var av "
"formen \"'sometype' stöder inte buffertprotokollet\" nu är av formen \"en :"
"term:`bytesliknande objekt` krävs, inte 'sometype'\". (Bidrag från Ezio "
"Melotti i :issue:`16518`.)"

msgid ""
"If the current directory is set to a directory that no longer exists then :"
"exc:`FileNotFoundError` will no longer be raised and instead :meth:"
"`~importlib.machinery.FileFinder.find_spec` will return ``None`` **without** "
"caching ``None`` in :data:`sys.path_importer_cache`, which is different than "
"the typical case (:issue:`22834`)."
msgstr ""
"Om den aktuella katalogen är inställd på en katalog som inte längre finns "
"kommer :exc:`FileNotFoundError` inte längre att uppstå och istället kommer :"
"meth:`~importlib.machinery.FileFinder.find_spec` att returnera ``None`` "
"**utan** att cachelagra ``None`` i :data:`sys.path_importer_cache`, vilket "
"skiljer sig från det typiska fallet (:issue:`22834`)."

msgid ""
"HTTP status code and messages from :mod:`http.client` and :mod:`http.server` "
"were refactored into a common :class:`~http.HTTPStatus` enum.  The values "
"in :mod:`http.client` and :mod:`http.server` remain available for backwards "
"compatibility.  (Contributed by Demian Brecht in :issue:`21793`.)"
msgstr ""
"HTTP-statuskod och meddelanden från :mod:`http.client` och :mod:`http."
"server` omarbetades till ett gemensamt :class:`~http.HTTPStatus` enum.  "
"Värdena i :mod:`http.client` och :mod:`http.server` förblir tillgängliga för "
"bakåtkompatibilitet.  (Bidrag från Demian Brecht i :issue:`21793`.)"

msgid ""
"When an import loader defines :meth:`importlib.machinery.Loader.exec_module` "
"it is now expected to also define :meth:`~importlib.machinery.Loader."
"create_module` (raises a :exc:`DeprecationWarning` now, will be an error in "
"Python 3.6). If the loader inherits from :class:`importlib.abc.Loader` then "
"there is nothing to do, else simply define :meth:`~importlib.machinery."
"Loader.create_module` to return ``None``.  (Contributed by Brett Cannon in :"
"issue:`23014`.)"
msgstr ""
"När en importladdare definierar :meth:`importlib.machinery.Loader."
"exec_module` förväntas den nu också definiera :meth:`~importlib.machinery."
"Loader.create_module` (ger upphov till en :exc:`DeprecationWarning` nu, "
"kommer att vara ett fel i Python 3.6). Om laddaren ärver från :class:"
"`importlib.abc.Loader` så finns det inget att göra, annars är det bara att "
"definiera :meth:`~importlib.machinery.Loader.create_module` så att den "
"returnerar ``None``.  (Bidrag från Brett Cannon i :issue:`23014`.)"

msgid ""
"The :func:`re.split` function always ignored empty pattern matches, so the "
"``\"x*\"`` pattern worked the same as ``\"x+\"``, and the ``\"\\b\"`` "
"pattern never worked.  Now :func:`re.split` raises a warning if the pattern "
"could match an empty string.  For compatibility, use patterns that never "
"match an empty string (e.g. ``\"x+\"`` instead of ``\"x*\"``).  Patterns "
"that could only match an empty string (such as ``\"\\b\"``) now raise an "
"error. (Contributed by Serhiy Storchaka in :issue:`22818`.)"
msgstr ""
"Funktionen :func:`re.split` ignorerade alltid tomma mönstermatchningar, så "
"mönstret ``\"x*\"`` fungerade på samma sätt som ``\"x+\"``, och mönstret "
"``\"\\b\"`` fungerade aldrig.  Nu ger :func:`re.split` upphov till en "
"varning om mönstret kan matcha en tom sträng.  För kompatibilitet, använd "
"mönster som aldrig matchar en tom sträng (t.ex. ``\"x+\"`` istället för "
"``\"x*\"``).  Mönster som bara kunde matcha en tom sträng (t.ex. "
"``\"\\b\"``) ger nu upphov till ett fel. (Bidrag från Serhiy Storchaka i :"
"issue:`22818`.)"

msgid ""
"The :class:`http.cookies.Morsel` dict-like interface has been made self "
"consistent:  morsel comparison now takes the :attr:`~http.cookies.Morsel."
"key` and :attr:`~http.cookies.Morsel.value` into account, :meth:`~http."
"cookies.Morsel.copy` now results in a :class:`~http.cookies.Morsel` instance "
"rather than a :class:`dict`, and :meth:`~http.cookies.Morsel.update` will "
"now raise an exception if any of the keys in the update dictionary are "
"invalid.  In addition, the undocumented *LegalChars* parameter of :func:"
"`~http.cookies.Morsel.set` is deprecated and is now ignored.  (Contributed "
"by Demian Brecht in :issue:`2211`.)"
msgstr ""
"Det diktliknande gränssnittet :class:`http.cookies.Morsel` har gjorts "
"självkonsistent: Morsel-jämförelse tar nu hänsyn till :attr:`~http.cookies."
"Morsel.key` och :attr:`~http.cookies.Morsel.value`, :meth:`~http.cookies."
"Morsel.copy` resulterar nu i en :class:`~http.cookies.Morsel`-instans "
"snarare än en :class:`dict`, och :meth:`~http.cookies.Morsel.update` kommer "
"nu att ge upphov till ett undantag om någon av nycklarna i "
"uppdateringsordlistan är ogiltig.  Dessutom är den odokumenterade parametern "
"*LegalChars* i :func:`~http.cookies.Morsel.set` föråldrad och ignoreras nu.  "
"(Bidrag från Demian Brecht i :issue:`2211`.)"

msgid ""
":pep:`488` has removed ``.pyo`` files from Python and introduced the "
"optional ``opt-`` tag in ``.pyc`` file names. The :func:`importlib.util."
"cache_from_source` has gained an *optimization* parameter to help control "
"the ``opt-`` tag. Because of this, the *debug_override* parameter of the "
"function is now deprecated. ``.pyo`` files are also no longer supported as a "
"file argument to the Python interpreter and thus serve no purpose when "
"distributed on their own (i.e. sourceless code distribution). Due to the "
"fact that the magic number for bytecode has changed in Python 3.5, all old "
"``.pyo`` files from previous versions of Python are invalid regardless of "
"this PEP."
msgstr ""
":pep:`488` har tagit bort ``.pyo``-filer från Python och infört den valfria "
"``opt-``-taggen i ``.pyc``-filnamn. :func:`importlib.util.cache_from_source` "
"har fått en *optimering*-parameter för att hjälpa till att kontrollera "
"taggen ``opt-``. På grund av detta är parametern *debug_override* i "
"funktionen nu föråldrad. ``.pyo``-filer stöds inte heller längre som "
"filargument till Python-tolken och tjänar därmed inget syfte när de "
"distribueras på egen hand (dvs. källfri koddistribution). På grund av att "
"det magiska numret för bytekod har ändrats i Python 3.5 är alla gamla ``."
"pyo``-filer från tidigare versioner av Python ogiltiga oavsett denna PEP."

msgid ""
"The :mod:`socket` module now exports the :const:`~socket.CAN_RAW_FD_FRAMES` "
"constant on linux 3.6 and greater."
msgstr ""
"Modulen :mod:`socket` exporterar nu konstanten :const:`~socket."
"CAN_RAW_FD_FRAMES` på linux 3.6 och senare."

msgid ""
"The :func:`ssl.cert_time_to_seconds` function now interprets the input time "
"as UTC and not as local time, per :rfc:`5280`.  Additionally, the return "
"value is always an :class:`int`. (Contributed by Akira Li in :issue:`19940`.)"
msgstr ""
"Funktionen :func:`ssl.cert_time_to_seconds` tolkar nu inmatad tid som UTC "
"och inte som lokal tid, enligt :rfc:`5280`.  Dessutom är returvärdet alltid "
"en :class:`int`. (Bidrag från Akira Li i :issue:`19940`.)"

msgid ""
"The ``pygettext.py`` Tool now uses the standard +NNNN format for timezones "
"in the POT-Creation-Date header."
msgstr ""
"Verktyget ``pygettext.py`` använder nu standardformatet +NNNN för tidszoner "
"i rubriken POT-Creation-Date."

msgid ""
"The :mod:`smtplib` module now uses :data:`sys.stderr` instead of the "
"previous module-level :data:`stderr` variable for debug output.  If your "
"(test) program depends on patching the module-level variable to capture the "
"debug output, you will need to update it to capture sys.stderr instead."
msgstr ""
"Modulen :mod:`smtplib` använder nu :data:`sys.stderr` i stället för den "
"tidigare variabeln :data:`stderr` på modulnivå för felsökningsutdata.  Om "
"ditt (test)program är beroende av att du patchar variabeln på modulnivå för "
"att fånga upp felsökningsutdata, måste du uppdatera det så att det fångar "
"upp sys.stderr istället."

msgid ""
"The :meth:`str.startswith` and :meth:`str.endswith` methods no longer return "
"``True`` when finding the empty string and the indexes are completely out of "
"range.  (Contributed by Serhiy Storchaka in :issue:`24284`.)"
msgstr ""
"Metoderna :meth:`str.startswith` och :meth:`str.endswith` returnerar inte "
"längre ``True`` när de hittar den tomma strängen och indexen är helt utanför "
"intervallet.  (Bidrag från Serhiy Storchaka i :issue:`24284`.)"

msgid ""
"The :func:`inspect.getdoc` function now returns documentation strings "
"inherited from base classes.  Documentation strings no longer need to be "
"duplicated if the inherited documentation is appropriate.  To suppress an "
"inherited string, an empty string must be specified (or the documentation "
"may be filled in).  This change affects the output of the :mod:`pydoc` "
"module and the :func:`help` function. (Contributed by Serhiy Storchaka in :"
"issue:`15582`.)"
msgstr ""
"Funktionen :func:`inspect.getdoc` returnerar nu dokumentationssträngar som "
"ärvts från basklasser.  Dokumentationssträngar behöver inte längre "
"dupliceras om den ärvda dokumentationen är lämplig.  För att undertrycka en "
"ärvd sträng måste en tom sträng anges (eller så kan dokumentationen fyllas "
"i).  Denna ändring påverkar utdata från modulen :mod:`pydoc` och funktionen :"
"func:`help`. (Bidrag från Serhiy Storchaka i :issue:`15582`.)"

msgid ""
"Nested :func:`functools.partial` calls are now flattened.  If you were "
"relying on the previous behavior, you can now either add an attribute to a :"
"func:`functools.partial` object or you can create a subclass of :func:"
"`functools.partial`. (Contributed by Alexander Belopolsky in :issue:`7830`.)"
msgstr ""
"Nästade :func:`functools.partial`-anrop är nu utplattade.  Om du förlitade "
"dig på det tidigare beteendet kan du nu antingen lägga till ett attribut "
"till ett :func:`functools.partial`-objekt eller så kan du skapa en "
"underklass av :func:`functools.partial`. (Bidrag från Alexander Belopolsky "
"i :issue:`7830`.)"

msgid "Changes in the C API"
msgstr "Förändringar i C API"

msgid ""
"The undocumented :c:member:`!format` member of the (non-public) :c:type:"
"`PyMemoryViewObject` structure has been removed. All extensions relying on "
"the relevant parts in ``memoryobject.h`` must be rebuilt."
msgstr ""
"Den odokumenterade :c:member:`!format`-medlemmen i den (icke-publika) :c:"
"type:`PyMemoryViewObject`-strukturen har tagits bort. Alla tillägg som "
"förlitar sig på de relevanta delarna i ``memoryobject.h`` måste byggas om."

msgid ""
"The :c:type:`PyMemAllocator` structure was renamed to :c:type:"
"`PyMemAllocatorEx` and a new ``calloc`` field was added."
msgstr ""
"Strukturen :c:type:`PyMemAllocator` döptes om till :c:type:"
"`PyMemAllocatorEx` och ett nytt fält ``calloc`` lades till."

msgid ""
"Removed non-documented macro :c:macro:`!PyObject_REPR()` which leaked "
"references. Use format character ``%R`` in :c:func:`PyUnicode_FromFormat`-"
"like functions to format the :func:`repr` of the object. (Contributed by "
"Serhiy Storchaka in :issue:`22453`.)"
msgstr ""
"Borttaget icke-dokumenterat makro :c:macro:`!PyObject_REPR()` som läckte "
"referenser. Använd formattecknet ``%R`` i :c:func:`PyUnicode_FromFormat`-"
"liknande funktioner för att formatera objektets :func:`repr`. (Bidrag från "
"Serhiy Storchaka i :issue:`22453`.)"

msgid ""
"Because the lack of the :attr:`~type.__module__` attribute breaks pickling "
"and introspection, a deprecation warning is now raised for builtin types "
"without the :attr:`~type.__module__` attribute.  This will be an :exc:"
"`AttributeError` in the future. (Contributed by Serhiy Storchaka in :issue:"
"`20204`.)"
msgstr ""
"Eftersom avsaknaden av attributet :attr:`~type.__module__` bryter mot "
"pickling och introspektion, utfärdas nu en varning om föråldring för "
"inbyggda typer utan attributet :attr:`~type.__module__`.  Detta kommer att "
"vara ett :exc:`AttributeError` i framtiden. (Bidrag från Serhiy Storchaka i :"
"issue:`20204`.)"

msgid ""
"As part of the :pep:`492` implementation, the ``tp_reserved`` slot of :c:"
"type:`PyTypeObject` was replaced with a :c:member:`~PyTypeObject."
"tp_as_async` slot.  Refer to :ref:`coro-objects` for new types, structures "
"and functions."
msgstr ""
"Som en del av implementeringen av :pep:`492`, ersattes ``tp_reserved`` slot "
"i :c:type:`PyTypeObject` med en :c:member:`~PyTypeObject.tp_as_async` slot.  "
"Se :ref:`coro-objects` för nya typer, strukturer och funktioner."

msgid "Notable changes in Python 3.5.4"
msgstr "Viktiga ändringar i Python 3.5.4"

msgid "New ``make regen-all`` build target"
msgstr "Nytt byggmål för ``make regen-all``"

msgid ""
"To simplify cross-compilation, and to ensure that CPython can reliably be "
"compiled without requiring an existing version of Python to already be "
"available, the autotools-based build system no longer attempts to implicitly "
"recompile generated files based on file modification times."
msgstr ""
"För att förenkla korskompilering och säkerställa att CPython kan kompileras "
"på ett tillförlitligt sätt utan att det krävs att en befintlig version av "
"Python redan finns tillgänglig, försöker det autotools-baserade byggsystemet "
"inte längre att implicit kompilera om genererade filer baserat på "
"filändringstider."

msgid ""
"Instead, a new ``make regen-all`` command has been added to force "
"regeneration of these files when desired (e.g. after an initial version of "
"Python has already been built based on the pregenerated versions)."
msgstr ""
"Istället har ett nytt ``make regen-all``-kommando lagts till för att tvinga "
"fram regenerering av dessa filer när så önskas (t.ex. efter att en första "
"version av Python redan har byggts baserat på de förgenererade versionerna)."

msgid ""
"More selective regeneration targets are also defined - see :source:`Makefile."
"pre.in` for details."
msgstr ""
"Mer selektiva regenereringsmål definieras också - se :source:`Makefile.pre."
"in` för detaljer."

msgid "(Contributed by Victor Stinner in :issue:`23404`.)"
msgstr "(Bidrag från Victor Stinner i :issue:`23404`.)"

msgid "Removal of ``make touch`` build target"
msgstr "Borttagning av byggmålet ``make touch``"

msgid ""
"The ``make touch`` build target previously used to request implicit "
"regeneration of generated files by updating their modification times has "
"been removed."
msgstr ""
"Byggmålet ``make touch`` som tidigare användes för att begära implicit "
"regenerering av genererade filer genom att uppdatera deras modifieringstider "
"har tagits bort."

msgid "It has been replaced by the new ``make regen-all`` target."
msgstr "Det har ersatts av det nya målet ``make regen-all``."
