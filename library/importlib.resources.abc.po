# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-23 14:15+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!importlib.resources.abc` -- Abstract base classes for resources"
msgstr ""

msgid "**Source code:** :source:`Lib/importlib/resources/abc.py`"
msgstr ""

msgid "*Superseded by TraversableResources*"
msgstr ""

msgid ""
"An :term:`abstract base class` to provide the ability to read *resources*."
msgstr ""

msgid ""
"From the perspective of this ABC, a *resource* is a binary artifact that is "
"shipped within a package. Typically this is something like a data file that "
"lives next to the ``__init__.py`` file of the package. The purpose of this "
"class is to help abstract out the accessing of such data files so that it "
"does not matter if the package and its data file(s) are stored e.g. in a zip "
"file versus on the file system."
msgstr ""

msgid ""
"For any of methods of this class, a *resource* argument is expected to be a :"
"term:`path-like object` which represents conceptually just a file name. This "
"means that no subdirectory paths should be included in the *resource* "
"argument. This is because the location of the package the reader is for, "
"acts as the \"directory\". Hence the metaphor for directories and file names "
"is packages and resources, respectively. This is also why instances of this "
"class are expected to directly correlate to a specific package (instead of "
"potentially representing multiple packages or a module)."
msgstr ""

msgid ""
"Loaders that wish to support resource reading are expected to provide a "
"method called ``get_resource_reader(fullname)`` which returns an object "
"implementing this ABC's interface. If the module specified by fullname is "
"not a package, this method should return :const:`None`. An object compatible "
"with this ABC should only be returned when the specified module is a package."
msgstr ""

msgid "Use :class:`importlib.resources.abc.TraversableResources` instead."
msgstr ""

msgid ""
"Returns an opened, :term:`file-like object` for binary reading of the "
"*resource*."
msgstr ""

msgid "If the resource cannot be found, :exc:`FileNotFoundError` is raised."
msgstr ""

msgid "Returns the file system path to the *resource*."
msgstr ""

msgid ""
"If the resource does not concretely exist on the file system, raise :exc:"
"`FileNotFoundError`."
msgstr ""

msgid ""
"Returns ``True`` if the named *name* is considered a resource. :exc:"
"`FileNotFoundError` is raised if *name* does not exist."
msgstr ""

msgid ""
"Returns an :term:`iterable` of strings over the contents of the package. Do "
"note that it is not required that all names returned by the iterator be "
"actual resources, e.g. it is acceptable to return names for which :meth:"
"`is_resource` would be false."
msgstr ""

msgid ""
"Allowing non-resource names to be returned is to allow for situations where "
"how a package and its resources are stored are known a priori and the non-"
"resource names would be useful. For instance, returning subdirectory names "
"is allowed so that when it is known that the package and resources are "
"stored on the file system then those subdirectory names can be used directly."
msgstr ""

msgid "The abstract method returns an iterable of no items."
msgstr ""

msgid ""
"An object with a subset of :class:`pathlib.Path` methods suitable for "
"traversing directories and opening files."
msgstr ""

msgid ""
"For a representation of the object on the file-system, use :meth:`importlib."
"resources.as_file`."
msgstr ""

msgid "Abstract. The base name of this object without any parent references."
msgstr ""

msgid "Yield Traversable objects in self."
msgstr ""

msgid "Return ``True`` if self is a directory."
msgstr ""

msgid "Return ``True`` if self is a file."
msgstr ""

msgid ""
"Traverse directories according to *pathsegments* and return the result as :"
"class:`!Traversable`."
msgstr ""

msgid ""
"Each *pathsegments* argument may contain multiple names separated by forward "
"slashes (``/``, ``posixpath.sep`` ). For example, the following are "
"equivalent::"
msgstr ""

msgid ""
"files.joinpath('subdir', 'subsuddir', 'file.txt')\n"
"files.joinpath('subdir/subsuddir/file.txt')"
msgstr ""

msgid ""
"Note that some :class:`!Traversable` implementations might not be updated to "
"the latest version of the protocol. For compatibility with such "
"implementations, provide a single argument without path separators to each "
"call to ``joinpath``. For example::"
msgstr ""

msgid "files.joinpath('subdir').joinpath('subsubdir').joinpath('file.txt')"
msgstr ""

msgid ""
"``joinpath`` accepts multiple *pathsegments*, and these segments may contain "
"forward slashes as path separators. Previously, only a single *child* "
"argument was accepted."
msgstr ""

msgid "Return Traversable child in self. Equivalent to ``joinpath(child)``."
msgstr ""

msgid ""
"*mode* may be 'r' or 'rb' to open as text or binary. Return a handle "
"suitable for reading (same as :attr:`pathlib.Path.open`)."
msgstr ""

msgid ""
"When opening as text, accepts encoding parameters such as those accepted by :"
"class:`io.TextIOWrapper`."
msgstr ""

msgid "Read contents of self as bytes."
msgstr ""

msgid "Read contents of self as text."
msgstr ""

msgid ""
"An abstract base class for resource readers capable of serving the :meth:"
"`importlib.resources.files` interface. Subclasses :class:`ResourceReader` "
"and provides concrete implementations of the :class:`!ResourceReader`'s "
"abstract methods. Therefore, any loader supplying :class:`!"
"TraversableResources` also supplies :class:`!ResourceReader`."
msgstr ""

msgid ""
"Loaders that wish to support resource reading are expected to implement this "
"interface."
msgstr ""

msgid ""
"Returns a :class:`importlib.resources.abc.Traversable` object for the loaded "
"package."
msgstr ""
