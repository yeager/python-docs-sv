# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!gzip` --- Support for :program:`gzip` files"
msgstr ""

msgid "**Source code:** :source:`Lib/gzip.py`"
msgstr ""

msgid ""
"This module provides a simple interface to compress and decompress files "
"just like the GNU programs :program:`gzip` and :program:`gunzip` would."
msgstr ""

msgid "The data compression is provided by the :mod:`zlib` module."
msgstr ""

msgid ""
"The :mod:`gzip` module provides the :class:`GzipFile` class, as well as the :"
"func:`.open`, :func:`compress` and :func:`decompress` convenience functions. "
"The :class:`GzipFile` class reads and writes :program:`gzip`\\ -format "
"files, automatically compressing or decompressing the data so that it looks "
"like an ordinary :term:`file object`."
msgstr ""

msgid ""
"Note that additional file formats which can be decompressed by the :program:"
"`gzip` and :program:`gunzip` programs, such  as those produced by :program:"
"`compress` and :program:`pack`, are not supported by this module."
msgstr ""

msgid "The module defines the following items:"
msgstr ""

msgid ""
"Open a gzip-compressed file in binary or text mode, returning a :term:`file "
"object`."
msgstr ""

msgid ""
"The *filename* argument can be an actual filename (a :class:`str` or :class:"
"`bytes` object), or an existing file object to read from or write to."
msgstr ""

msgid ""
"The *mode* argument can be any of ``'r'``, ``'rb'``, ``'a'``, ``'ab'``, "
"``'w'``, ``'wb'``, ``'x'`` or ``'xb'`` for binary mode, or ``'rt'``, "
"``'at'``, ``'wt'``, or ``'xt'`` for text mode. The default is ``'rb'``."
msgstr ""

msgid ""
"The *compresslevel* argument is an integer from 0 to 9, as for the :class:"
"`GzipFile` constructor."
msgstr ""

msgid ""
"For binary mode, this function is equivalent to the :class:`GzipFile` "
"constructor: ``GzipFile(filename, mode, compresslevel)``. In this case, the "
"*encoding*, *errors* and *newline* arguments must not be provided."
msgstr ""

msgid ""
"For text mode, a :class:`GzipFile` object is created, and wrapped in an :"
"class:`io.TextIOWrapper` instance with the specified encoding, error "
"handling behavior, and line ending(s)."
msgstr ""

msgid ""
"Added support for *filename* being a file object, support for text mode, and "
"the *encoding*, *errors* and *newline* arguments."
msgstr ""

msgid "Added support for the ``'x'``, ``'xb'`` and ``'xt'`` modes."
msgstr ""

msgid "Accepts a :term:`path-like object`."
msgstr ""

msgid ""
"An exception raised for invalid gzip files.  It inherits from :exc:"
"`OSError`. :exc:`EOFError` and :exc:`zlib.error` can also be raised for "
"invalid gzip files."
msgstr ""

msgid ""
"Constructor for the :class:`GzipFile` class, which simulates most of the "
"methods of a :term:`file object`, with the exception of the :meth:`~io."
"IOBase.truncate` method.  At least one of *fileobj* and *filename* must be "
"given a non-trivial value."
msgstr ""

msgid ""
"The new class instance is based on *fileobj*, which can be a regular file, "
"an :class:`io.BytesIO` object, or any other object which simulates a file.  "
"It defaults to ``None``, in which case *filename* is opened to provide a "
"file object."
msgstr ""

msgid ""
"When *fileobj* is not ``None``, the *filename* argument is only used to be "
"included in the :program:`gzip` file header, which may include the original "
"filename of the uncompressed file.  It defaults to the filename of "
"*fileobj*, if discernible; otherwise, it defaults to the empty string, and "
"in this case the original filename is not included in the header."
msgstr ""

msgid ""
"The *mode* argument can be any of ``'r'``, ``'rb'``, ``'a'``, ``'ab'``, "
"``'w'``, ``'wb'``, ``'x'``, or ``'xb'``, depending on whether the file will "
"be read or written.  The default is the mode of *fileobj* if discernible; "
"otherwise, the default is ``'rb'``.  In future Python releases the mode of "
"*fileobj* will not be used.  It is better to always specify *mode* for "
"writing."
msgstr ""

msgid ""
"Note that the file is always opened in binary mode. To open a compressed "
"file in text mode, use :func:`.open` (or wrap your :class:`GzipFile` with "
"an :class:`io.TextIOWrapper`)."
msgstr ""

msgid ""
"The *compresslevel* argument is an integer from ``0`` to ``9`` controlling "
"the level of compression; ``1`` is fastest and produces the least "
"compression, and ``9`` is slowest and produces the most compression. ``0`` "
"is no compression. The default is ``9``."
msgstr ""

msgid ""
"The optional *mtime* argument is the timestamp requested by gzip. The time "
"is in Unix format, i.e., seconds since 00:00:00 UTC, January 1, 1970. If "
"*mtime* is omitted or ``None``, the current time is used. Use *mtime* = 0 to "
"generate a compressed stream that does not depend on creation time."
msgstr ""

msgid ""
"See below for the :attr:`mtime` attribute that is set when decompressing."
msgstr ""

msgid ""
"Calling a :class:`GzipFile` object's :meth:`!close` method does not close "
"*fileobj*, since you might wish to append more material after the compressed "
"data.  This also allows you to pass an :class:`io.BytesIO` object opened for "
"writing as *fileobj*, and retrieve the resulting memory buffer using the :"
"class:`io.BytesIO` object's :meth:`~io.BytesIO.getvalue` method."
msgstr ""

msgid ""
":class:`GzipFile` supports the :class:`io.BufferedIOBase` interface, "
"including iteration and the :keyword:`with` statement.  Only the :meth:`~io."
"IOBase.truncate` method isn't implemented."
msgstr ""

msgid ":class:`GzipFile` also provides the following method and attribute:"
msgstr ""

msgid ""
"Read *n* uncompressed bytes without advancing the file position. The number "
"of bytes returned may be more or less than requested."
msgstr ""

msgid ""
"While calling :meth:`peek` does not change the file position of the :class:"
"`GzipFile`, it may change the position of the underlying file object (e.g. "
"if the :class:`GzipFile` was constructed with the *fileobj* parameter)."
msgstr ""

msgid "``'rb'`` for reading and ``'wb'`` for writing."
msgstr ""

msgid "In previous versions it was an integer ``1`` or ``2``."
msgstr ""

msgid ""
"When decompressing, this attribute is set to the last timestamp in the most "
"recently read header.  It is an integer, holding the number of seconds since "
"the Unix epoch (00:00:00 UTC, January 1, 1970). The initial value before "
"reading any headers is ``None``."
msgstr ""

msgid ""
"The path to the gzip file on disk, as a :class:`str` or :class:`bytes`. "
"Equivalent to the output of :func:`os.fspath` on the original input path, "
"with no other normalization, resolution or expansion."
msgstr ""

msgid ""
"Support for the :keyword:`with` statement was added, along with the *mtime* "
"constructor argument and :attr:`mtime` attribute."
msgstr ""

msgid "Support for zero-padded and unseekable files was added."
msgstr ""

msgid "The :meth:`io.BufferedIOBase.read1` method is now implemented."
msgstr ""

msgid "Added support for the ``'x'`` and ``'xb'`` modes."
msgstr ""

msgid ""
"Added support for writing arbitrary :term:`bytes-like objects <bytes-like "
"object>`. The :meth:`~io.BufferedIOBase.read` method now accepts an argument "
"of ``None``."
msgstr ""

msgid ""
"Opening :class:`GzipFile` for writing without specifying the *mode* argument "
"is deprecated."
msgstr ""

msgid ""
"Remove the ``filename`` attribute, use the :attr:`~GzipFile.name` attribute "
"instead."
msgstr ""

msgid ""
"Compress the *data*, returning a :class:`bytes` object containing the "
"compressed data.  *compresslevel* and *mtime* have the same meaning as in "
"the :class:`GzipFile` constructor above, but *mtime* defaults to 0 for "
"reproducible output."
msgstr ""

msgid "Added the *mtime* parameter for reproducible output."
msgstr ""

msgid ""
"Speed is improved by compressing all data at once instead of in a streamed "
"fashion. Calls with *mtime* set to ``0`` are delegated to :func:`zlib."
"compress` for better speed. In this situation the output may contain a gzip "
"header \"OS\" byte value other than 255 \"unknown\" as supplied by the "
"underlying zlib implementation."
msgstr ""

msgid ""
"The gzip header OS byte is guaranteed to be set to 255 when this function is "
"used as was the case in 3.10 and earlier."
msgstr ""

msgid ""
"The *mtime* parameter now defaults to 0 for reproducible output. For the "
"previous behaviour of using the current time, pass ``None`` to *mtime*."
msgstr ""

msgid ""
"Decompress the *data*, returning a :class:`bytes` object containing the "
"uncompressed data. This function is capable of decompressing multi-member "
"gzip data (multiple gzip blocks concatenated together). When the data is "
"certain to contain only one member the :func:`zlib.decompress` function with "
"*wbits* set to 31 is faster."
msgstr ""

msgid ""
"Speed is improved by decompressing members at once in memory instead of in a "
"streamed fashion."
msgstr ""

msgid "Examples of usage"
msgstr ""

msgid "Example of how to read a compressed file::"
msgstr ""

msgid ""
"import gzip\n"
"with gzip.open('/home/joe/file.txt.gz', 'rb') as f:\n"
"    file_content = f.read()"
msgstr ""

msgid "Example of how to create a compressed GZIP file::"
msgstr ""

msgid ""
"import gzip\n"
"content = b\"Lots of content here\"\n"
"with gzip.open('/home/joe/file.txt.gz', 'wb') as f:\n"
"    f.write(content)"
msgstr ""

msgid "Example of how to GZIP compress an existing file::"
msgstr ""

msgid ""
"import gzip\n"
"import shutil\n"
"with open('/home/joe/file.txt', 'rb') as f_in:\n"
"    with gzip.open('/home/joe/file.txt.gz', 'wb') as f_out:\n"
"        shutil.copyfileobj(f_in, f_out)"
msgstr ""

msgid "Example of how to GZIP compress a binary string::"
msgstr ""

msgid ""
"import gzip\n"
"s_in = b\"Lots of content here\"\n"
"s_out = gzip.compress(s_in)"
msgstr ""

msgid "Module :mod:`zlib`"
msgstr ""

msgid ""
"The basic data compression module needed to support the :program:`gzip` file "
"format."
msgstr ""

msgid ""
"In case gzip (de)compression is a bottleneck, the `python-isal`_ package "
"speeds up (de)compression with a mostly compatible API."
msgstr ""

msgid "Command Line Interface"
msgstr ""

msgid ""
"The :mod:`gzip` module provides a simple command line interface to compress "
"or decompress files."
msgstr ""

msgid "Once executed the :mod:`gzip` module keeps the input file(s)."
msgstr ""

msgid ""
"Add a new command line interface with a usage. By default, when you will "
"execute the CLI, the default compression level is 6."
msgstr ""

msgid "Command line options"
msgstr ""

msgid "If *file* is not specified, read from :data:`sys.stdin`."
msgstr ""

msgid "Indicates the fastest compression method (less compression)."
msgstr ""

msgid "Indicates the slowest compression method (best compression)."
msgstr ""

msgid "Decompress the given file."
msgstr ""

msgid "Show the help message."
msgstr ""
