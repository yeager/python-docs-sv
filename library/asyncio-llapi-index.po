# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-09 14:17+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Low-level API Index"
msgstr "API-index på låg nivå"

msgid "This page lists all low-level asyncio APIs."
msgstr "På den här sidan listas alla asyncios API:er på låg nivå."

msgid "Obtaining the Event Loop"
msgstr "Få fram händelseslingan"

msgid ":func:`asyncio.get_running_loop`"
msgstr ":func:`asyncio.get_running_loop`"

msgid "The **preferred** function to get the running event loop."
msgstr "Den **företrädes** funktionen för att få den löpande händelseslingan."

msgid ":func:`asyncio.get_event_loop`"
msgstr ":func:`asyncio.get_event_loop`"

msgid "Get an event loop instance (running or current via the current policy)."
msgstr ""
"Hämta en instans för händelseslinga (pågående eller aktuell via aktuell "
"policy)."

msgid ":func:`asyncio.set_event_loop`"
msgstr ":func:`asyncio.set_event_loop`"

msgid "Set the event loop as current via the current policy."
msgstr "Ställ in händelseslingan som aktuell via den aktuella policyn."

msgid ":func:`asyncio.new_event_loop`"
msgstr ":func:`asyncio.new_event_loop`"

msgid "Create a new event loop."
msgstr "Skapa en ny händelseslinga."

msgid "Examples"
msgstr "Exempel"

msgid ":ref:`Using asyncio.get_running_loop() <asyncio_example_future>`."
msgstr ":ref:`Using asyncio.get_running_loop() <asyncio_example_future>`."

msgid "Event Loop Methods"
msgstr "Metoder för händelseslingor"

msgid ""
"See also the main documentation section about the :ref:`asyncio-event-loop-"
"methods`."
msgstr ""
"Se även huvuddokumentationsavsnittet om :ref:`asyncio-event-loop-methods`."

msgid "Lifecycle"
msgstr "Livscykel"

msgid ":meth:`loop.run_until_complete`"
msgstr ":meth:`loop.run_until_complete`"

msgid "Run a Future/Task/awaitable until complete."
msgstr "Kör en Future/Task/awaitable tills den är klar."

msgid ":meth:`loop.run_forever`"
msgstr ":meth:`loop.run_forever`"

msgid "Run the event loop forever."
msgstr "Kör händelseslingan för evigt."

msgid ":meth:`loop.stop`"
msgstr ":meth:`loop.stop`"

msgid "Stop the event loop."
msgstr "Stoppa händelseslingan."

msgid ":meth:`loop.close`"
msgstr ":meth:`loop.close`"

msgid "Close the event loop."
msgstr "Stäng händelseslingan."

msgid ":meth:`loop.is_running`"
msgstr ":meth:`loop.is_running`"

msgid "Return ``True`` if the event loop is running."
msgstr "Returnerar ``True`` om händelseslingan är igång."

msgid ":meth:`loop.is_closed`"
msgstr ":meth:`loop.is_closed`"

msgid "Return ``True`` if the event loop is closed."
msgstr "Returnerar ``True`` om händelseslingan är stängd."

msgid "``await`` :meth:`loop.shutdown_asyncgens`"
msgstr "``await`` :meth:`loop.shutdown_asyncgens`"

msgid "Close asynchronous generators."
msgstr "Stäng av asynkrona generatorer."

msgid "Debugging"
msgstr "Felsökning"

msgid ":meth:`loop.set_debug`"
msgstr ":meth:`loop.set_debug`"

msgid "Enable or disable the debug mode."
msgstr "Aktivera eller inaktivera felsökningsläget."

msgid ":meth:`loop.get_debug`"
msgstr ":meth:`loop.get_debug`"

msgid "Get the current debug mode."
msgstr "Hämta aktuellt felsökningsläge."

msgid "Scheduling Callbacks"
msgstr "Schemaläggning av återuppringningar"

msgid ":meth:`loop.call_soon`"
msgstr ":meth:`loop.call_soon`"

msgid "Invoke a callback soon."
msgstr "Anropa en återuppringning snart."

msgid ":meth:`loop.call_soon_threadsafe`"
msgstr ":meth:`loop.call_soon_threadsafe`"

msgid "A thread-safe variant of :meth:`loop.call_soon`."
msgstr "En trådsäker variant av :meth:`loop.call_soon`."

msgid ":meth:`loop.call_later`"
msgstr ":meth:`loop.call_later`"

msgid "Invoke a callback *after* the given time."
msgstr "Anropar en callback *efter* den angivna tiden."

msgid ":meth:`loop.call_at`"
msgstr ":meth:`loop.call_at`"

msgid "Invoke a callback *at* the given time."
msgstr "Anropar ett återuppringningsprogram *vid* den angivna tidpunkten."

msgid "Thread/Interpreter/Process Pool"
msgstr "Tråd/Interpreterare/Processpool"

msgid "``await`` :meth:`loop.run_in_executor`"
msgstr "``await`` :meth:`loop.run_in_executor`"

msgid ""
"Run a CPU-bound or other blocking function in a :mod:`concurrent.futures` "
"executor."
msgstr ""
"Kör en CPU-bunden eller annan blockerande funktion i en :mod:`concurrent."
"futures` exekverare."

msgid ":meth:`loop.set_default_executor`"
msgstr ":meth:`loop.set_default_executor`"

msgid "Set the default executor for :meth:`loop.run_in_executor`."
msgstr "Ange standardutförare för :meth:`loop.run_in_executor`."

msgid "Tasks and Futures"
msgstr "Uppgifter och framtid"

msgid ":meth:`loop.create_future`"
msgstr ":meth:`loop.skapa_future`"

msgid "Create a :class:`Future` object."
msgstr "Skapa ett :class:`Future`-objekt."

msgid ":meth:`loop.create_task`"
msgstr ":meth:`loop.create_task`"

msgid "Schedule coroutine as a :class:`Task`."
msgstr "Schemalägg coroutine som en :class:`Task`."

msgid ":meth:`loop.set_task_factory`"
msgstr ":meth:`loop.set_task_factory`"

msgid ""
"Set a factory used by :meth:`loop.create_task` to create :class:`Tasks "
"<Task>`."
msgstr ""
"Ange en fabrik som används av :meth:`loop.create_task` för att skapa :class:"
"`Tasks <Task>`."

msgid ":meth:`loop.get_task_factory`"
msgstr ":meth:`loop.get_task_factory`"

msgid ""
"Get the factory :meth:`loop.create_task` uses to create :class:`Tasks "
"<Task>`."
msgstr ""
"Hämta fabriken som :meth:`loop.create_task` använder för att skapa :class:"
"`Tasks <Task>`."

msgid "DNS"
msgstr "DNS"

msgid "``await`` :meth:`loop.getaddrinfo`"
msgstr "``await`` :meth:`loop.getaddrinfo`"

msgid "Asynchronous version of :meth:`socket.getaddrinfo`."
msgstr "Asynkron version av :meth:`socket.getaddrinfo`."

msgid "``await`` :meth:`loop.getnameinfo`"
msgstr "``await`` :meth:`loop.getnameinfo`"

msgid "Asynchronous version of :meth:`socket.getnameinfo`."
msgstr "Asynkron version av :meth:`socket.getnameinfo`."

msgid "Networking and IPC"
msgstr "Nätverk och IPC"

msgid "``await`` :meth:`loop.create_connection`"
msgstr "``await`` :meth:`loop.skapa_anslutning`"

msgid "Open a TCP connection."
msgstr "Öppna en TCP-anslutning."

msgid "``await`` :meth:`loop.create_server`"
msgstr "``await`` :meth:`loop.skapa_server`"

msgid "Create a TCP server."
msgstr "Skapa en TCP-server."

msgid "``await`` :meth:`loop.create_unix_connection`"
msgstr "``await`` :meth:`loop.skapa_unix_connection`"

msgid "Open a Unix socket connection."
msgstr "Öppna en Unix-socketanslutning."

msgid "``await`` :meth:`loop.create_unix_server`"
msgstr "``await`` :meth:`loop.skapa_unix_server`"

msgid "Create a Unix socket server."
msgstr "Skapa en Unix-socket-server."

msgid "``await`` :meth:`loop.connect_accepted_socket`"
msgstr "``await`` :meth:`loop.connect_accepted_socket`"

msgid "Wrap a :class:`~socket.socket` into a ``(transport, protocol)`` pair."
msgstr ""
"Packa in en :class:`~socket.socket` till ett ``(transport, protokoll)``-par."

msgid "``await`` :meth:`loop.create_datagram_endpoint`"
msgstr "``await`` :meth:`loop.skapa_datagram_ändpunkt`"

msgid "Open a datagram (UDP) connection."
msgstr "Öppna en UDP-anslutning (datagram)."

msgid "``await`` :meth:`loop.sendfile`"
msgstr "``await`` :meth:`loop.sendfile`"

msgid "Send a file over a transport."
msgstr "Skicka en fil över en transport."

msgid "``await`` :meth:`loop.start_tls`"
msgstr "``await`` :meth:`loop.start_tls`"

msgid "Upgrade an existing connection to TLS."
msgstr "Uppgradera en befintlig anslutning till TLS."

msgid "``await`` :meth:`loop.connect_read_pipe`"
msgstr "``await`` :meth:`loop.connect_read_pipe`"

msgid "Wrap a read end of a pipe into a ``(transport, protocol)`` pair."
msgstr ""
"Packa in en läsande ände av en pipe i ett ``(transport, protokoll)``-par."

msgid "``await`` :meth:`loop.connect_write_pipe`"
msgstr "``await`` :meth:`loop.connect_write_pipe`"

msgid "Wrap a write end of a pipe into a ``(transport, protocol)`` pair."
msgstr ""
"Packa in en skrivande ände av en pipe i ett ``(transport, protokoll)``-par."

msgid "Sockets"
msgstr "Uttag"

msgid "``await`` :meth:`loop.sock_recv`"
msgstr "``await`` :meth:`loop.sock_recv`` :meth:`loop.sock_recv`"

msgid "Receive data from the :class:`~socket.socket`."
msgstr "Ta emot data från :class:`~socket.socket`."

msgid "``await`` :meth:`loop.sock_recv_into`"
msgstr "``await`` :meth:`loop.sock_recv_into`"

msgid "Receive data from the :class:`~socket.socket` into a buffer."
msgstr "Ta emot data från :class:`~socket.socket` till en buffert."

msgid "``await`` :meth:`loop.sock_recvfrom`"
msgstr "``await`` :meth:`loop.sock_recvfrom`` :meth:`loop.sock_recvfrom`"

msgid "Receive a datagram from the :class:`~socket.socket`."
msgstr "Ta emot ett datagram från :class:`~socket.socket`."

msgid "``await`` :meth:`loop.sock_recvfrom_into`"
msgstr "``await`` :meth:`loop.sock_recvvfrom_into`"

msgid "Receive a datagram from the :class:`~socket.socket` into a buffer."
msgstr "Ta emot ett datagram från :class:`~socket.socket` till en buffert."

msgid "``await`` :meth:`loop.sock_sendall`"
msgstr "``await`` :meth:`loop.sock_sendall`` :meth:`loop.sock_sendall`"

msgid "Send data to the :class:`~socket.socket`."
msgstr "Skicka data till :class:`~socket.socket`."

msgid "``await`` :meth:`loop.sock_sendto`"
msgstr "``await`` :meth:`loop.sock_sendto`` :meth:`loop.sock_sendto`"

msgid "Send a datagram via the :class:`~socket.socket` to the given address."
msgstr ""
"Skicka ett datagram via :class:`~socket.socket` till den angivna adressen."

msgid "``await`` :meth:`loop.sock_connect`"
msgstr "``await`` :meth:`loop.sock_connect`"

msgid "Connect the :class:`~socket.socket`."
msgstr "Anslut :class:`~socket.socket`."

msgid "``await`` :meth:`loop.sock_accept`"
msgstr "``await`` :meth:`loop.sock_accept`"

msgid "Accept a :class:`~socket.socket` connection."
msgstr "Acceptera en :class:`~socket.socket`-anslutning."

msgid "``await`` :meth:`loop.sock_sendfile`"
msgstr "``await`` :meth:`loop.sock_sendfile`"

msgid "Send a file over the :class:`~socket.socket`."
msgstr "Skicka en fil över :class:`~socket.socket`."

msgid ":meth:`loop.add_reader`"
msgstr ":meth:`loop.add_reader`"

msgid "Start watching a file descriptor for read availability."
msgstr "Börja bevaka en filbeskrivare för lästillgänglighet."

msgid ":meth:`loop.remove_reader`"
msgstr ":meth:`loop.remove_reader`"

msgid "Stop watching a file descriptor for read availability."
msgstr "Sluta bevaka en filbeskrivare för lästillgänglighet."

msgid ":meth:`loop.add_writer`"
msgstr ":meth:`loop.add_writer`"

msgid "Start watching a file descriptor for write availability."
msgstr "Börja bevaka en filbeskrivare för skrivtillgänglighet."

msgid ":meth:`loop.remove_writer`"
msgstr ":meth:`loop.remove_writer`"

msgid "Stop watching a file descriptor for write availability."
msgstr "Sluta bevaka en filbeskrivare för skrivtillgänglighet."

msgid "Unix Signals"
msgstr "Unix-signaler"

msgid ":meth:`loop.add_signal_handler`"
msgstr ":meth:`loop.add_signal_handler`"

msgid "Add a handler for a :mod:`signal`."
msgstr "Lägg till en hanterare för en :mod:`signal`."

msgid ":meth:`loop.remove_signal_handler`"
msgstr ":meth:`loop.remove_signal_handler`"

msgid "Remove a handler for a :mod:`signal`."
msgstr "Ta bort en hanterare för en :mod:`signal`."

msgid "Subprocesses"
msgstr "Delprocesser"

msgid ":meth:`loop.subprocess_exec`"
msgstr ":meth:`loop.subprocess_exec`"

msgid "Spawn a subprocess."
msgstr "Starta en underprocess."

msgid ":meth:`loop.subprocess_shell`"
msgstr ":meth:`loop.subprocess_shell`"

msgid "Spawn a subprocess from a shell command."
msgstr "Starta en subprocess från ett shell-kommando."

msgid "Error Handling"
msgstr "Felhantering"

msgid ":meth:`loop.call_exception_handler`"
msgstr ":meth:`loop.call_exception_handler`"

msgid "Call the exception handler."
msgstr "Anropa undantagshanteraren."

msgid ":meth:`loop.set_exception_handler`"
msgstr ":meth:`loop.set_exception_handler`"

msgid "Set a new exception handler."
msgstr "Ställ in en ny undantagshanterare."

msgid ":meth:`loop.get_exception_handler`"
msgstr ":meth:`loop.get_exception_handler`"

msgid "Get the current exception handler."
msgstr "Hämta den aktuella undantagshanteraren."

msgid ":meth:`loop.default_exception_handler`"
msgstr ":meth:`loop.default_exception_handler`"

msgid "The default exception handler implementation."
msgstr "Standardimplementeringen av undantagshanteraren."

msgid ""
":ref:`Using asyncio.new_event_loop() and loop.run_forever() "
"<asyncio_example_lowlevel_helloworld>`."
msgstr ""
":ref:`Använder asyncio.new_event_loop() och loop.run_forever() "
"<asyncio_example_lowlevel_helloworld>`."

msgid ":ref:`Using loop.call_later() <asyncio_example_call_later>`."
msgstr ":ref:`Använder loop.call_later() <asyncio_example_call_later>`."

msgid ""
"Using ``loop.create_connection()`` to implement :ref:`an echo-client "
"<asyncio_example_tcp_echo_client_protocol>`."
msgstr ""
"Använda ``loop.create_connection()`` för att implementera :ref:`en echo-"
"client <asyncio_example_tcp_echo_client_protocol>`."

msgid ""
"Using ``loop.create_connection()`` to :ref:`connect a socket "
"<asyncio_example_create_connection>`."
msgstr ""
"Använda ``loop.create_connection()`` för att :ref:`ansluta ett uttag "
"<asyncio_example_create_connection>`."

msgid ""
":ref:`Using add_reader() to watch an FD for read events "
"<asyncio_example_watch_fd>`."
msgstr ""
":ref:`Använder add_reader() för att bevaka en FD för läshändelser "
"<asyncio_example_watch_fd>`."

msgid ":ref:`Using loop.add_signal_handler() <asyncio_example_unix_signals>`."
msgstr ":ref:`Using loop.add_signal_handler() <asyncio_example_unix_signals>`."

msgid ":ref:`Using loop.subprocess_exec() <asyncio_example_subprocess_proto>`."
msgstr ""
":ref:`Using loop.subprocess_exec() <asyncio_example_subprocess_proto>`."

msgid "Transports"
msgstr "Transportkvitton"

msgid "All transports implement the following methods:"
msgstr "Alla transporter implementerar följande metoder:"

msgid ":meth:`transport.close() <BaseTransport.close>`"
msgstr ":meth:`transport.close() <BaseTransport.close>`"

msgid "Close the transport."
msgstr "Stäng transporten."

msgid ":meth:`transport.is_closing() <BaseTransport.is_closing>`"
msgstr ":meth:`transport.is_closing() <BaseTransport.is_closing>`"

msgid "Return ``True`` if the transport is closing or is closed."
msgstr ""
"Returnerar ``True`` om transporten håller på att stängas eller är stängd."

msgid ":meth:`transport.get_extra_info() <BaseTransport.get_extra_info>`"
msgstr ":meth:`transport.get_extra_info() <BaseTransport.get_extra_info>`"

msgid "Request for information about the transport."
msgstr "Begäran om information om transporten."

msgid ":meth:`transport.set_protocol() <BaseTransport.set_protocol>`"
msgstr ":meth:`transport.set_protocol() <BaseTransport.set_protocol>`"

msgid "Set a new protocol."
msgstr "Ställ in ett nytt protokoll."

msgid ":meth:`transport.get_protocol() <BaseTransport.get_protocol>`"
msgstr ":meth:`transport.get_protocol() <BaseTransport.get_protocol>`"

msgid "Return the current protocol."
msgstr "Returnerar det aktuella protokollet."

msgid ""
"Transports that can receive data (TCP and Unix connections, pipes, etc).  "
"Returned from methods like :meth:`loop.create_connection`, :meth:`loop."
"create_unix_connection`, :meth:`loop.connect_read_pipe`, etc:"
msgstr ""
"Transporter som kan ta emot data (TCP- och Unix-anslutningar, pipes etc.).  "
"Returneras från metoder som :meth:`loop.create_connection`, :meth:`loop."
"create_unix_connection`, :meth:`loop.connect_read_pipe`, etc:"

msgid "Read Transports"
msgstr "Läs transporter"

msgid ":meth:`transport.is_reading() <ReadTransport.is_reading>`"
msgstr ":meth:`transport.is_reading() <LäsTransport.is_reading>`"

msgid "Return ``True`` if the transport is receiving."
msgstr "Returnerar ``True`` om transporten är mottagande."

msgid ":meth:`transport.pause_reading() <ReadTransport.pause_reading>`"
msgstr ":meth:`transport.pause_reading() <Lästransport.pause_reading>`"

msgid "Pause receiving."
msgstr "Pausa mottagning."

msgid ":meth:`transport.resume_reading() <ReadTransport.resume_reading>`"
msgstr ":meth:`transport.resume_reading() <Lästransport.resume_reading>`"

msgid "Resume receiving."
msgstr "Resumé mottagande."

msgid ""
"Transports that can Send data (TCP and Unix connections, pipes, etc).  "
"Returned from methods like :meth:`loop.create_connection`, :meth:`loop."
"create_unix_connection`, :meth:`loop.connect_write_pipe`, etc:"
msgstr ""
"Transporter som kan skicka data (TCP- och Unix-anslutningar, pipes etc.).  "
"Returneras från metoder som :meth:`loop.create_connection`, :meth:`loop."
"create_unix_connection`, :meth:`loop.connect_write_pipe`, etc:"

msgid "Write Transports"
msgstr "Skriva transporter"

msgid ":meth:`transport.write() <WriteTransport.write>`"
msgstr ":meth:`transport.write() <WriteTransport.write>`"

msgid "Write data to the transport."
msgstr "Skriv data till transportmedlet."

msgid ":meth:`transport.writelines() <WriteTransport.writelines>`"
msgstr ":meth:`transport.writelines() <WriteTransport.writelines>`"

msgid "Write buffers to the transport."
msgstr "Skriv buffertar till transportmedlet."

msgid ":meth:`transport.can_write_eof() <WriteTransport.can_write_eof>`"
msgstr ":meth:`transport.can_write_eof() <WriteTransport.can_write_eof>`"

msgid "Return :const:`True` if the transport supports sending EOF."
msgstr "Returnerar :const:`True` om transporten har stöd för att skicka EOF."

msgid ":meth:`transport.write_eof() <WriteTransport.write_eof>`"
msgstr ":meth:`transport.write_eof() <WriteTransport.write_eof>`"

msgid "Close and send EOF after flushing buffered data."
msgstr "Stäng och skicka EOF efter rensning av buffrad data."

msgid ":meth:`transport.abort() <WriteTransport.abort>`"
msgstr ":meth:`transport.abort() <WriteTransport.abort>`"

msgid "Close the transport immediately."
msgstr "Stäng transporten omedelbart."

msgid ""
":meth:`transport.get_write_buffer_size() <WriteTransport."
"get_write_buffer_size>`"
msgstr ""
":meth:`transport.get_write_buffer_size() <WriteTransport."
"get_write_buffer_size>`"

msgid "Return the current size of the output buffer."
msgstr "Returnerar den aktuella storleken på utmatningsbufferten."

msgid ""
":meth:`transport.get_write_buffer_limits() <WriteTransport."
"get_write_buffer_limits>`"
msgstr ""
":meth:`transport.get_write_buffer_limits() <WriteTransport."
"get_write_buffer_limits>`"

msgid "Return high and low water marks for write flow control."
msgstr "Returnera hög- och lågvattenmärken för kontroll av skrivflöde."

msgid ""
":meth:`transport.set_write_buffer_limits() <WriteTransport."
"set_write_buffer_limits>`"
msgstr ""
":meth:`transport.set_write_buffer_limits() <WriteTransport."
"set_write_buffer_limits>`"

msgid "Set new high and low water marks for write flow control."
msgstr "Sätt nya hög- och lågvattenmärken för kontroll av skrivflödet."

msgid "Transports returned by :meth:`loop.create_datagram_endpoint`:"
msgstr "Transporter returnerade av :meth:`loop.create_datagram_endpoint`:"

msgid "Datagram Transports"
msgstr "Datagramtransporter"

msgid ":meth:`transport.sendto() <DatagramTransport.sendto>`"
msgstr ":meth:`transport.sendto() <DatagramTransport.sendto>`"

msgid "Send data to the remote peer."
msgstr "Skicka data till den fjärranslutna motparten."

msgid ":meth:`transport.abort() <DatagramTransport.abort>`"
msgstr ":meth:`transport.abort() <DatagramTransport.abort>`"

msgid ""
"Low-level transport abstraction over subprocesses. Returned by :meth:`loop."
"subprocess_exec` and :meth:`loop.subprocess_shell`:"
msgstr ""
"Transportabstraktion på låg nivå över subprocesser. Returneras av :meth:"
"`loop.subprocess_exec` och :meth:`loop.subprocess_shell`:"

msgid "Subprocess Transports"
msgstr "Underprocess transporter"

msgid ":meth:`transport.get_pid() <SubprocessTransport.get_pid>`"
msgstr ":meth:`transport.get_pid() <SubprocessTransport.get_pid>`"

msgid "Return the subprocess process id."
msgstr "Returnerar underprocessens process-ID."

msgid ""
":meth:`transport.get_pipe_transport() <SubprocessTransport."
"get_pipe_transport>`"
msgstr ""
":meth:`transport.get_pipe_transport() <SubprocessTransport."
"get_pipe_transport>`"

msgid ""
"Return the transport for the requested communication pipe (*stdin*, "
"*stdout*, or *stderr*)."
msgstr ""
"Returnerar transporten för den begärda kommunikationsröret (*stdin*, "
"*stdout* eller *stderr*)."

msgid ":meth:`transport.get_returncode() <SubprocessTransport.get_returncode>`"
msgstr ""
":meth:`transport.get_returncode() <SubprocessTransport.get_returncode>`"

msgid "Return the subprocess return code."
msgstr "Returnerar subprocessens returkod."

msgid ":meth:`transport.kill() <SubprocessTransport.kill>`"
msgstr ":meth:`transport.kill() <SubprocessTransport.kill>`"

msgid "Kill the subprocess."
msgstr "Stäng av underprocessen."

msgid ":meth:`transport.send_signal() <SubprocessTransport.send_signal>`"
msgstr ":meth:`transport.send_signal() <SubprocessTransport.send_signal>`"

msgid "Send a signal to the subprocess."
msgstr "Skicka en signal till underprocessen."

msgid ":meth:`transport.terminate() <SubprocessTransport.terminate>`"
msgstr ":meth:`transport.terminate() <SubprocessTransport.terminate>`"

msgid "Stop the subprocess."
msgstr "Stoppa underprocessen."

msgid ":meth:`transport.close() <SubprocessTransport.close>`"
msgstr ":meth:`transport.close() <SubprocessTransport.close>`"

msgid "Kill the subprocess and close all pipes."
msgstr "Avsluta subprocessen och stäng alla rör."

msgid "Protocols"
msgstr "Protokoll"

msgid "Protocol classes can implement the following **callback methods**:"
msgstr "Protokollklasser kan implementera följande **callback-metoder**:"

msgid "``callback`` :meth:`connection_made() <BaseProtocol.connection_made>`"
msgstr "``callback`` :meth:`connection_made() <BaseProtocol.connection_made>`"

msgid "Called when a connection is made."
msgstr "Anropas när en anslutning har gjorts."

msgid "``callback`` :meth:`connection_lost() <BaseProtocol.connection_lost>`"
msgstr "``callback`` :meth:`connection_lost() <BaseProtocol.connection_lost>`"

msgid "Called when the connection is lost or closed."
msgstr "Anropas när anslutningen bryts eller stängs."

msgid "``callback`` :meth:`pause_writing() <BaseProtocol.pause_writing>`"
msgstr "``callback`` :meth:`pause_writing() <BaseProtocol.pause_writing>`"

msgid "Called when the transport's buffer goes over the high water mark."
msgstr "Anropas när transportens buffert går över högvattengränsen."

msgid "``callback`` :meth:`resume_writing() <BaseProtocol.resume_writing>`"
msgstr "``callback`` :meth:`resume_writing() <BaseProtocol.resume_writing>`"

msgid "Called when the transport's buffer drains below the low water mark."
msgstr "Anropas när transportens buffert dräneras under lågvattenlinjen."

msgid "Streaming Protocols (TCP, Unix Sockets, Pipes)"
msgstr "Streamingprotokoll (TCP, Unix Sockets, Pipes)"

msgid "``callback`` :meth:`data_received() <Protocol.data_received>`"
msgstr "``callback`` :meth:`data_received() <Protocol.data_received>`"

msgid "Called when some data is received."
msgstr "Anropas när data har tagits emot."

msgid "``callback`` :meth:`eof_received() <Protocol.eof_received>`"
msgstr "``callback`` :meth:`eof_received() <Protocol.eof_received>`"

msgid "Called when an EOF is received."
msgstr "Anropas när en EOF tas emot."

msgid "Buffered Streaming Protocols"
msgstr "Protokoll för buffrad strömning"

msgid "``callback`` :meth:`get_buffer() <BufferedProtocol.get_buffer>`"
msgstr "``callback`` :meth:`get_buffer() <BufferedProtocol.get_buffer>`"

msgid "Called to allocate a new receive buffer."
msgstr "Anropas för att allokera en ny mottagningsbuffert."

msgid "``callback`` :meth:`buffer_updated() <BufferedProtocol.buffer_updated>`"
msgstr ""
"``callback`` :meth:`buffer_updated() <BufferedProtocol.buffer_updated>``"

msgid "Called when the buffer was updated with the received data."
msgstr "Anropas när bufferten har uppdaterats med de mottagna uppgifterna."

msgid "``callback`` :meth:`eof_received() <BufferedProtocol.eof_received>`"
msgstr "``callback`` :meth:`eof_received() <BufferedProtocol.eof_received>``"

msgid "Datagram Protocols"
msgstr "Datagram-protokoll"

msgid ""
"``callback`` :meth:`datagram_received() <DatagramProtocol.datagram_received>`"
msgstr ""
"``callback`` :meth:`datagram_received() <DatagramProtocol.datagram_received>`"

msgid "Called when a datagram is received."
msgstr "Anropas när ett datagram tas emot."

msgid "``callback`` :meth:`error_received() <DatagramProtocol.error_received>`"
msgstr ""
"``callback`` :meth:`error_received() <DatagramProtocol.error_received>`"

msgid ""
"Called when a previous send or receive operation raises an :class:`OSError`."
msgstr ""
"Anropas när en tidigare sändnings- eller mottagningsoperation ger upphov "
"till ett :class:`OSError`."

msgid "Subprocess Protocols"
msgstr "Protokoll för delprocesser"

msgid "``callback`` :meth:`~SubprocessProtocol.pipe_data_received`"
msgstr "``callback`` :meth:`~SubprocessProtocol.pipe_data_received`"

msgid ""
"Called when the child process writes data into its *stdout* or *stderr* pipe."
msgstr ""
"Anropas när barnprocessen skriver data till sin *stdout*- eller *stderr*-"
"pipe."

msgid "``callback`` :meth:`~SubprocessProtocol.pipe_connection_lost`"
msgstr "``callback`` :meth:`~SubprocessProtocol.pipe_connection_lost`"

msgid ""
"Called when one of the pipes communicating with the child process is closed."
msgstr "Anropas när ett av de rör som kommunicerar med barnprocessen stängs."

msgid ""
"``callback`` :meth:`process_exited() <SubprocessProtocol.process_exited>`"
msgstr ""
"``callback`` :meth:`process_exited() <SubprocessProtocol.process_exited>`"

msgid ""
"Called when the child process has exited. It can be called before :meth:"
"`~SubprocessProtocol.pipe_data_received` and :meth:`~SubprocessProtocol."
"pipe_connection_lost` methods."
msgstr ""
"Anropas när underordnad process har avslutats. Den kan anropas före "
"metoderna :meth:`~SubprocessProtocol.pipe_data_received` och :meth:"
"`~SubprocessProtocol.pipe_connection_lost`."

msgid "Event Loop Policies"
msgstr "Policyer för händelseslingor"

msgid ""
"Policies is a low-level mechanism to alter the behavior of functions like :"
"func:`asyncio.get_event_loop`.  See also the main :ref:`policies section "
"<asyncio-policies>` for more details."
msgstr ""
"Policies är en mekanism på låg nivå för att ändra beteendet hos funktioner "
"som :func:`asyncio.get_event_loop`.  Se även huvudavsnittet :ref:`policies "
"<asyncio-policies>` för mer information."

msgid "Accessing Policies"
msgstr "Tillgång till policyer"

msgid ":meth:`asyncio.get_event_loop_policy`"
msgstr ":meth:`asyncio.get_event_loop_policy`"

msgid "Return the current process-wide policy."
msgstr "Returnera den aktuella processomfattande policyn."

msgid ":meth:`asyncio.set_event_loop_policy`"
msgstr ":meth:`asyncio.set_event_loop_policy`"

msgid "Set a new process-wide policy."
msgstr "Ange en ny policy för hela processen."

msgid ":class:`AbstractEventLoopPolicy`"
msgstr ":class:`AbstractEventLoopPolicy`"

msgid "Base class for policy objects."
msgstr "Basklass för policyobjekt."
