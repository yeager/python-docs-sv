# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!dbm` --- Interfaces to Unix \"databases\""
msgstr ":mod:`!dbm` --- Gränssnitt till Unix \"databaser\""

msgid "**Source code:** :source:`Lib/dbm/__init__.py`"
msgstr "**Källkod:** :source:`Lib/dbm/__init__.py`"

msgid ":mod:`dbm` is a generic interface to variants of the DBM database:"
msgstr ""
":mod:`dbm` är ett generiskt gränssnitt till varianter av DBM-databasen:"

msgid ":mod:`dbm.sqlite3`"
msgstr ":mod:`dbm.sqlite3`"

msgid ":mod:`dbm.gnu`"
msgstr ":mod:`dbm.gnu`"

msgid ":mod:`dbm.ndbm`"
msgstr ":mod:`dbm.ndbm`"

msgid ""
"If none of these modules are installed, the slow-but-simple implementation "
"in module :mod:`dbm.dumb` will be used.  There is a `third party interface "
"<https://www.jcea.es/programacion/pybsddb.htm>`_ to the Oracle Berkeley DB."
msgstr ""
"Om ingen av dessa moduler är installerade kommer den långsamma men enkla "
"implementationen i modulen :mod:`dbm.dumb` att användas.  Det finns ett "
"`tredjepartsgränssnitt <https://www.jcea.es/programacion/pybsddb.htm>`_ till "
"Oracle Berkeley DB."

msgid ""
"A tuple containing the exceptions that can be raised by each of the "
"supported modules, with a unique exception also named :exc:`dbm.error` as "
"the first item --- the latter is used when :exc:`dbm.error` is raised."
msgstr ""
"En tupel som innehåller de undantag som kan utlösas av var och en av de "
"moduler som stöds, med ett unikt undantag som också heter :exc:`dbm.error` "
"som första objekt --- det senare används när :exc:`dbm.error` utlöses."

msgid ""
"This function attempts to guess which of the several simple database modules "
"available --- :mod:`dbm.sqlite3`, :mod:`dbm.gnu`, :mod:`dbm.ndbm`, or :mod:"
"`dbm.dumb` --- should be used to open a given file."
msgstr ""
"Denna funktion försöker gissa vilken av de många enkla databasmoduler som "
"finns tillgängliga --- :mod:`dbm.sqlite3`, :mod:`dbm.gnu`, :mod:`dbm.ndbm` "
"eller :mod:`dbm.dumb` --- som skall användas för att öppna en given fil."

msgid "Return one of the following values:"
msgstr "Returnerar ett av följande värden:"

msgid ""
"``None`` if the file can't be opened because it's unreadable or doesn't exist"
msgstr ""
"``None`` om filen inte kan öppnas eftersom den är oläslig eller inte finns"

msgid "the empty string (``''``) if the file's format can't be guessed"
msgstr "den tomma strängen (``''``) om filens format inte kan gissas"

msgid ""
"a string containing the required module name, such as ``'dbm.ndbm'`` or "
"``'dbm.gnu'``"
msgstr ""
"en sträng som innehåller namnet på den modul som krävs, t.ex. ``'dbm.ndbm'`` "
"eller ``'dbm.gnu'``"

msgid "*filename* accepts a :term:`path-like object`."
msgstr "*filename* accepterar en :term:`path-liknande objekt`."

msgid "Open a database and return the corresponding database object."
msgstr "Öppna en databas och returnera motsvarande databasobjekt."

msgid "Parameters"
msgstr "Parametrar"

msgid ""
"The database file to open.  If the database file already exists, the :func:"
"`whichdb` function is used to determine its type and the appropriate module "
"is used; if it does not exist, the first submodule listed above that can be "
"imported is used."
msgstr ""
"Databasfilen som skall öppnas.  Om databasfilen redan finns, används "
"funktionen :func:`whichdb` för att bestämma dess typ och lämplig modul "
"används; om den inte finns, används den första undermodulen som listas ovan "
"och som kan importeras."

msgid "The database file to open."
msgstr "Den databasfil som ska öppnas."

msgid ""
"If the database file already exists, the :func:`whichdb` function is used to "
"determine its type and the appropriate module is used; if it does not exist, "
"the first submodule listed above that can be imported is used."
msgstr ""
"Om databasfilen redan finns används funktionen :func:`whichdb` för att "
"bestämma dess typ och lämplig modul används; om den inte finns används den "
"första undermodulen som listas ovan och som kan importeras."

msgid ""
"* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n|"
msgstr ""
"* ``'r'`` (standard): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n|"

msgid "``'r'`` (default): |flag_r|"
msgstr "``'r'`` (standard): |flag_r|"

msgid "``'w'``: |flag_w|"
msgstr "``'w'``: |flag_w|"

msgid "``'c'``: |flag_c|"
msgstr "``'c'``: |flag_c|"

msgid "``'n'``: |flag_n|"
msgstr "``'n'``: |flag_n|"

msgid "|mode_param_doc|"
msgstr "|mode_param_doc|"

msgid "*file* accepts a :term:`path-like object`."
msgstr "*file* accepterar en :term:`path-liknande objekt`."

msgid ""
"The object returned by :func:`~dbm.open` supports the same basic "
"functionality as a :class:`dict`; keys and their corresponding values can be "
"stored, retrieved, and deleted, and the :keyword:`in` operator and the :meth:"
"`!keys` method are available, as well as :meth:`!get` and :meth:`!"
"setdefault` methods."
msgstr ""
"Objektet som returneras av :func:`~dbm.open` har samma grundläggande "
"funktionalitet som en :class:`dict`; nycklar och deras motsvarande värden "
"kan lagras, hämtas och raderas, och operatorn :keyword:`in` och metoden :"
"meth:`!keys` finns tillgängliga, liksom metoderna :meth:`!get` och :meth:`!"
"setdefault`."

msgid ""
"Key and values are always stored as :class:`bytes`. This means that when "
"strings are used they are implicitly converted to the default encoding "
"before being stored."
msgstr ""
"Nycklar och värden lagras alltid som :class:`bytes`. Detta innebär att när "
"strängar används konverteras de implicit till standardkodningen innan de "
"lagras."

msgid ""
"These objects also support being used in a :keyword:`with` statement, which "
"will automatically close them when done."
msgstr ""
"Dessa objekt kan också användas i en :keyword:`with`-sats, som automatiskt "
"stänger dem när de är klara."

msgid ""
":meth:`!get` and :meth:`!setdefault` methods are now available for all :mod:"
"`dbm` backends."
msgstr ""
"metoderna :meth:`!get` och :meth:`!setdefault` är nu tillgängliga för alla :"
"mod:`dbm`-backends."

msgid ""
"Added native support for the context management protocol to the objects "
"returned by :func:`~dbm.open`."
msgstr ""
"Lagt till inbyggt stöd för kontexthanteringsprotokollet till de objekt som "
"returneras av :func:`~dbm.open`."

msgid ""
"Deleting a key from a read-only database raises a database module specific "
"exception instead of :exc:`KeyError`."
msgstr ""
"Om du tar bort en nyckel från en skrivskyddad databas uppstår ett undantag "
"som är specifikt för databasmodulen i stället för :exc:`KeyError`."

msgid ""
"The following example records some hostnames and a corresponding title,  and "
"then prints out the contents of the database::"
msgstr ""
"I följande exempel registreras några värdnamn och en motsvarande titel, och "
"sedan skrivs innehållet i databasen ut::"

msgid ""
"import dbm\n"
"\n"
"# Open database, creating it if necessary.\n"
"with dbm.open('cache', 'c') as db:\n"
"\n"
"    # Record some values\n"
"    db[b'hello'] = b'there'\n"
"    db['www.python.org'] = 'Python Website'\n"
"    db['www.cnn.com'] = 'Cable News Network'\n"
"\n"
"    # Note that the keys are considered bytes now.\n"
"    assert db[b'www.python.org'] == b'Python Website'\n"
"    # Notice how the value is now in bytes.\n"
"    assert db['www.cnn.com'] == b'Cable News Network'\n"
"\n"
"    # Often-used methods of the dict interface work too.\n"
"    print(db.get('python.org', b'not present'))\n"
"\n"
"    # Storing a non-string key or value will raise an exception (most\n"
"    # likely a TypeError).\n"
"    db['www.yahoo.com'] = 4\n"
"\n"
"# db is automatically closed when leaving the with statement."
msgstr ""
"import dbm\n"
"\n"
"# Open database, creating it if necessary.\n"
"with dbm.open('cache', 'c') as db:\n"
"\n"
"    # Record some values\n"
"    db[b'hello'] = b'there'\n"
"    db['www.python.org'] = 'Python Website'\n"
"    db['www.cnn.com'] = 'Cable News Network'\n"
"\n"
"    # Note that the keys are considered bytes now.\n"
"    assert db[b'www.python.org'] == b'Python Website'\n"
"    # Notice how the value is now in bytes.\n"
"    assert db['www.cnn.com'] == b'Cable News Network'\n"
"\n"
"    # Often-used methods of the dict interface work too.\n"
"    print(db.get('python.org', b'not present'))\n"
"\n"
"    # Storing a non-string key or value will raise an exception (most\n"
"    # likely a TypeError).\n"
"    db['www.yahoo.com'] = 4\n"
"\n"
"# db is automatically closed when leaving the with statement."

msgid "Module :mod:`shelve`"
msgstr "Modul :mod:`shelve`"

msgid "Persistence module which stores non-string data."
msgstr "Persistensmodul som lagrar data som inte är strängdata."

msgid "The individual submodules are described in the following sections."
msgstr "De enskilda undermodulerna beskrivs i följande avsnitt."

msgid ":mod:`dbm.sqlite3` --- SQLite backend for dbm"
msgstr ":mod:`dbm.sqlite3` --- SQLite-backend för dbm"

msgid "**Source code:** :source:`Lib/dbm/sqlite3.py`"
msgstr "**Källkod:** :source:`Lib/dbm/sqlite3.py`"

msgid ""
"This module uses the standard library :mod:`sqlite3` module to provide an "
"SQLite backend for the :mod:`dbm` module. The files created by :mod:`dbm."
"sqlite3` can thus be opened by :mod:`sqlite3`, or any other SQLite browser, "
"including the SQLite CLI."
msgstr ""
"Den här modulen använder standardbiblioteket :mod:`sqlite3` för att "
"tillhandahålla en SQLite-backend för modulen :mod:`dbm`. Filerna som skapas "
"av :mod:`dbm.sqlite3` kan därmed öppnas av :mod:`sqlite3` eller någon annan "
"SQLite-webbläsare, inklusive SQLite CLI."

msgid "Availability"
msgstr "Tillgänglighet"

msgid ""
"This module does not work or is not available on WebAssembly. See :ref:`wasm-"
"availability` for more information."
msgstr ""
"Den här modulen fungerar inte eller är inte tillgänglig på WebAssembly. Se :"
"ref:`wasm-availability` för mer information."

msgid ""
"Open an SQLite database. The returned object behaves like a :term:`mapping`, "
"implements a :meth:`!close` method, and supports a \"closing\" context "
"manager via the :keyword:`with` keyword."
msgstr ""
"Öppnar en SQLite-databas. Det returnerade objektet beter sig som en :term:"
"`mapping`, implementerar en :meth:`!close`-metod och stöder en \"stängande\" "
"kontexthanterare via nyckelordet :keyword:`with`."

msgid "The path to the database to be opened."
msgstr "Sökvägen till den databas som ska öppnas."

msgid ""
"The Unix file access mode of the file (default: octal ``0o666``), used only "
"when the database has to be created."
msgstr ""
"Filens Unix-filåtkomstläge (standard: oktal ``0o666``), används endast när "
"databasen måste skapas."

msgid ":mod:`dbm.gnu` --- GNU database manager"
msgstr ":mod:`dbm.gnu` --- GNU databashanterare"

msgid "**Source code:** :source:`Lib/dbm/gnu.py`"
msgstr "**Källkod:** :source:`Lib/dbm/gnu.py`"

msgid ""
"The :mod:`dbm.gnu` module provides an interface to the :abbr:`GDBM (GNU "
"dbm)` library, similar to the :mod:`dbm.ndbm` module, but with additional "
"functionality like crash tolerance."
msgstr ""
"Modulen :mod:`dbm.gnu` tillhandahåller ett gränssnitt till biblioteket :abbr:"
"`GDBM (GNU dbm)`, liknande modulen :mod:`dbm.ndbm`, men med ytterligare "
"funktionalitet som kraschtolerans."

msgid ""
"The file formats created by :mod:`dbm.gnu` and :mod:`dbm.ndbm` are "
"incompatible and can not be used interchangeably."
msgstr ""
"De filformat som skapas av :mod:`dbm.gnu` och :mod:`dbm.ndbm` är "
"inkompatibla och kan inte användas omväxlande."

msgid ""
"This module is not supported on :ref:`mobile platforms <mobile-"
"availability>` or :ref:`WebAssembly platforms <wasm-availability>`."
msgstr ""
"Denna modul stöds inte på :ref:`mobile platforms <mobile-availability>` "
"eller :ref:`WebAssembly platforms <wasm-availability>`."

msgid ""
"Raised on :mod:`dbm.gnu`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"Uppstår vid :mod:`dbm.gnu`-specifika fel, t.ex. I/O-fel. :exc:`KeyError` "
"uppstår vid allmänna mappningsfel, t.ex. om en felaktig nyckel anges."

msgid "Open a GDBM database and return a :class:`!gdbm` object."
msgstr "Öppna en GDBM-databas och returnera ett :class:`!gdbm`-objekt."

msgid ""
"* ``'r'`` (default): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n|  The following additional characters may be appended to "
"control how the database is opened:  * ``'f'``: Open the database in fast "
"mode.   Writes to the database will not be synchronized. * ``'s'``: "
"Synchronized mode.   Changes to the database will be written immediately to "
"the file. * ``'u'``: Do not lock database.  Not all flags are valid for all "
"versions of GDBM. See the :data:`open_flags` member for a list of supported "
"flag characters."
msgstr ""
"* ``'r'`` (standard): |flag_r| * ``'w'``: |flag_w| * ``'c'``: |flag_c| * "
"``'n'``: |flag_n| Följande ytterligare tecken kan läggas till för att styra "
"hur databasen öppnas:  * ``'f'``: Öppna databasen i snabbläge.   Skrivningar "
"till databasen kommer inte att synkroniseras. * ``'s'``: Synkroniserat "
"läge.   Ändringar i databasen kommer omedelbart att skrivas till filen. * "
"``'u'``: Lås inte databasen.  Alla flaggor är inte giltiga för alla "
"versioner av GDBM. Se medlemmen :data:`open_flags` för en lista över "
"flaggtecken som stöds."

msgid ""
"The following additional characters may be appended to control how the "
"database is opened:"
msgstr ""
"Följande tilläggstecken kan läggas till för att styra hur databasen öppnas:"

msgid ""
"``'f'``: Open the database in fast mode. Writes to the database will not be "
"synchronized."
msgstr ""
"``'f'``: Öppna databasen i snabbläge. Skrivningar till databasen kommer inte "
"att synkroniseras."

msgid ""
"``'s'``: Synchronized mode. Changes to the database will be written "
"immediately to the file."
msgstr ""
"``'s'``: Synkroniserat läge. Ändringar i databasen kommer omedelbart att "
"skrivas till filen."

msgid "``'u'``: Do not lock database."
msgstr "``'u'``: Lås inte databasen."

msgid ""
"Not all flags are valid for all versions of GDBM. See the :data:`open_flags` "
"member for a list of supported flag characters."
msgstr ""
"Alla flaggor är inte giltiga för alla versioner av GDBM. Se medlemmen :data:"
"`open_flags` för en lista över flaggtecken som stöds."

msgid "Raises"
msgstr "Höjer"

msgid "If an invalid *flag* argument is passed."
msgstr "Om ett ogiltigt *flag*-argument skickas."

msgid ""
"A string of characters the *flag* parameter of :meth:`~dbm.gnu.open` "
"supports."
msgstr ""
"En sträng med tecken som parametern *flag* i :meth:`~dbm.gnu.open` stöder."

msgid ""
":class:`!gdbm` objects behave similar to :term:`mappings <mapping>`, but :"
"meth:`!items` and :meth:`!values` methods are not supported. The following "
"methods are also provided:"
msgstr ""
":class:`!gdbm`-objekt beter sig på liknande sätt som :term:`mappings "
"<mapping>`, men metoderna :meth:`!items` och :meth:`!values` stöds inte. "
"Följande metoder tillhandahålls också:"

msgid ""
"It's possible to loop over every key in the database using this method  and "
"the :meth:`nextkey` method.  The traversal is ordered by GDBM's internal "
"hash values, and won't be sorted by the key values.  This method returns the "
"starting key."
msgstr ""
"Det är möjligt att loopa över varje nyckel i databasen med hjälp av denna "
"metod och metoden :meth:`nextkey`.  Traversieringen ordnas efter GDBM:s "
"interna hashvärden och sorteras inte efter nyckelvärdena.  Den här metoden "
"returnerar startnyckeln."

msgid ""
"Returns the key that follows *key* in the traversal.  The following code "
"prints every key in the database ``db``, without having to create a list in "
"memory that contains them all::"
msgstr ""
"Returnerar den nyckel som följer efter *nyckel* i traverseringen.  Följande "
"kod skriver ut alla nycklar i databasen ``db``, utan att behöva skapa en "
"lista i minnet som innehåller dem alla::"

msgid ""
"k = db.firstkey()\n"
"while k is not None:\n"
"    print(k)\n"
"    k = db.nextkey(k)"
msgstr ""
"k = db.första nyckel()\n"
"medan k inte är None:\n"
"    print(k)\n"
"    k = db.nästa tangent(k)"

msgid ""
"If you have carried out a lot of deletions and would like to shrink the "
"space used by the GDBM file, this routine will reorganize the database.  :"
"class:`!gdbm` objects will not shorten the length of a database file except "
"by using this reorganization; otherwise, deleted file space will be kept and "
"reused as new (key, value) pairs are added."
msgstr ""
"Om du har gjort många raderingar och vill krympa det utrymme som GDBM-filen "
"använder, omorganiserar den här rutinen databasen. :class:`!gdbm`-objekt "
"förkortar inte längden på en databasfil utom genom att använda den här "
"omorganisationen; annars behålls det raderade filutrymmet och återanvänds "
"när nya (nyckel, värde)-par läggs till."

msgid ""
"When the database has been opened in fast mode, this method forces any "
"unwritten data to be written to the disk."
msgstr ""
"När databasen har öppnats i snabbläge tvingar den här metoden alla oskrivna "
"data att skrivas till disken."

msgid "Close the GDBM database."
msgstr "Stäng GDBM-databasen."

msgid "Remove all items from the GDBM database."
msgstr "Ta bort alla objekt från GDBM-databasen."

msgid ":mod:`dbm.ndbm` --- New Database Manager"
msgstr ":mod:`dbm.ndbm` --- Ny databashanterare"

msgid "**Source code:** :source:`Lib/dbm/ndbm.py`"
msgstr "**Källkod:** :source:`Lib/dbm/ndbm.py`"

msgid ""
"The :mod:`dbm.ndbm` module provides an interface to the :abbr:`NDBM (New "
"Database Manager)` library. This module can be used with the \"classic\" "
"NDBM interface or the :abbr:`GDBM (GNU dbm)` compatibility interface."
msgstr ""
"Modulen :mod:`dbm.ndbm` tillhandahåller ett gränssnitt till biblioteket :"
"abbr:`NDBM (New Database Manager)`. Denna modul kan användas med det "
"\"klassiska\" NDBM-gränssnittet eller :abbr:`GDBM (GNU dbm)` "
"kompatibilitetsgränssnitt."

msgid ""
"The NDBM library shipped as part of macOS has an undocumented limitation on "
"the size of values, which can result in corrupted database files when "
"storing values larger than this limit. Reading such corrupted files can "
"result in a hard crash (segmentation fault)."
msgstr ""
"NDBM-biblioteket som levereras som en del av macOS har en odokumenterad "
"begränsning av storleken på värden, vilket kan resultera i skadade "
"databasfiler när värden som är större än denna gräns lagras. Läsning av "
"sådana skadade filer kan resultera i en hårdkrasch (segmenteringsfel)."

msgid ""
"Raised on :mod:`dbm.ndbm`-specific errors, such as I/O errors. :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"Uppstår vid :mod:`dbm.ndbm`-specifika fel, t.ex. I/O-fel. :exc:`KeyError` "
"uppstår vid allmänna mappningsfel, t.ex. om en felaktig nyckel anges."

msgid "Name of the NDBM implementation library used."
msgstr "Namn på det implementeringsbibliotek för NDBM som används."

msgid "Open an NDBM database and return an :class:`!ndbm` object."
msgstr "Öppna en NDBM-databas och returnera ett :class:`!ndbm`-objekt."

msgid ""
"The basename of the database file (without the :file:`.dir` or :file:`.pag` "
"extensions)."
msgstr ""
"Grundnamnet på databasfilen (utan tilläggen :file:`.dir` eller :file:`.pag`)."

msgid ""
":class:`!ndbm` objects behave similar to :term:`mappings <mapping>`, but :"
"meth:`!items` and :meth:`!values` methods are not supported. The following "
"methods are also provided:"
msgstr ""
":class:`!ndbm`-objekt beter sig på liknande sätt som :term:`mappings "
"<mapping>`, men metoderna :meth:`!items` och :meth:`!values` stöds inte. "
"Följande metoder tillhandahålls också:"

msgid "Accepts :term:`path-like object` for filename."
msgstr "Accepterar :term:`path-like object` för filnamn."

msgid "Close the NDBM database."
msgstr "Stäng NDBM-databasen."

msgid "Remove all items from the NDBM database."
msgstr "Ta bort alla objekt från NDBM-databasen."

msgid ":mod:`dbm.dumb` --- Portable DBM implementation"
msgstr ":mod:`dbm.dumb` --- Portabel DBM-implementering"

msgid "**Source code:** :source:`Lib/dbm/dumb.py`"
msgstr "**Källkod:** :source:`Lib/dbm/dumb.py`"

msgid ""
"The :mod:`dbm.dumb` module is intended as a last resort fallback for the :"
"mod:`dbm` module when a more robust module is not available. The :mod:`dbm."
"dumb` module is not written for speed and is not nearly as heavily used as "
"the other database modules."
msgstr ""
"Modulen :mod:`dbm.dumb` är avsedd som en sista utväg för modulen :mod:`dbm` "
"när en mer robust modul inte är tillgänglig. Modulen :mod:`dbm.dumb` är inte "
"skriven för snabbhet och används inte alls lika flitigt som de andra "
"databasmodulerna."

msgid ""
"The :mod:`dbm.dumb` module provides a persistent :class:`dict`-like "
"interface which is written entirely in Python. Unlike other :mod:`dbm` "
"backends, such as :mod:`dbm.gnu`, no external library is required."
msgstr ""
"Modulen :mod:`dbm.dumb` tillhandahåller ett beständigt :class:`dict`-"
"liknande gränssnitt som är helt skrivet i Python. Till skillnad från andra :"
"mod:`dbm`-backends, såsom :mod:`dbm.gnu`, krävs inget externt bibliotek."

msgid "The :mod:`!dbm.dumb` module defines the following:"
msgstr "Modulen :mod:`!dbm.dumb` definierar följande:"

msgid ""
"Raised on :mod:`dbm.dumb`-specific errors, such as I/O errors.  :exc:"
"`KeyError` is raised for general mapping errors like specifying an incorrect "
"key."
msgstr ""
"Uppstår vid :mod:`dbm.dumb`-specifika fel, t.ex. I/O-fel. :exc:`KeyError` "
"uppstår vid allmänna mappningsfel som t.ex. att ange en felaktig nyckel."

msgid ""
"Open a :mod:`!dbm.dumb` database. The returned database object behaves "
"similar to a :term:`mapping`, in addition to providing :meth:`~dumbdbm.sync` "
"and :meth:`~dumbdbm.close` methods."
msgstr ""
"Öppnar en :mod:`!dbm.dumb`-databas. Det returnerade databasobjektet beter "
"sig på liknande sätt som en :term:`mapping`, förutom att det tillhandahåller "
"metoderna :meth:`~dumbdbm.sync` och :meth:`~dumbdbm.close`."

msgid ""
"The basename of the database file (without extensions). A new database "
"creates the following files:  - :file:`{filename}.dat` - :file:`{filename}."
"dir`"
msgstr ""
"Grundnamnet på databasfilen (utan tillägg). En ny databas skapar följande "
"filer:  - :file:`{filename}.dat` - :file:`{filename}.dir` - :file:"
"`{filename}.dir`"

msgid ""
"The basename of the database file (without extensions). A new database "
"creates the following files:"
msgstr ""
"Grundnamnet på databasfilen (utan tillägg). En ny databas skapar följande "
"filer:"

msgid ":file:`{filename}.dat`"
msgstr ":file:`{filename}.dat`"

msgid ":file:`{filename}.dir`"
msgstr ":file:`{filename}.dir`"

msgid ""
"* ``'r'``: |flag_r| * ``'w'``: |flag_w| * ``'c'`` (default): |flag_c| * "
"``'n'``: |flag_n|"
msgstr ""
"* ``'r'``: |flag_r| * ``'w'``: |flag_w| * ``'c'`` (standard): |flag_c| * "
"``'n'``: |flag_n|"

msgid "``'r'``: |flag_r|"
msgstr "``'r'``: |flag_r|"

msgid "``'c'`` (default): |flag_c|"
msgstr "``'c'`` (standard): |flag_c|"

msgid ""
"It is possible to crash the Python interpreter when loading a database with "
"a sufficiently large/complex entry due to stack depth limitations in "
"Python's AST compiler."
msgstr ""
"Det är möjligt att krascha Python-tolken när man laddar en databas med en "
"tillräckligt stor/komplex post på grund av begränsningar i stackdjupet i "
"Pythons AST-kompilator."

msgid ""
":func:`~dbm.dumb.open` always creates a new database when *flag* is ``'n'``."
msgstr ""
":func:`~dbm.dumb.open` skapar alltid en ny databas när *flag* är ``'n'``."

msgid ""
"A database opened read-only if *flag* is ``'r'``. A database is not created "
"if it does not exist if *flag* is ``'r'`` or ``'w'``."
msgstr ""
"En databas öppnas skrivskyddad om *flag* är ``'r'``. En databas skapas inte "
"om den inte redan finns om *flag* är ``'r'`` eller ``'w'``."

msgid ""
"In addition to the methods provided by the :class:`collections.abc."
"MutableMapping` class, the following methods are provided:"
msgstr ""
"Förutom de metoder som tillhandahålls av :class:`collections.abc."
"MutableMapping`-klassen, tillhandahålls följande metoder:"

msgid ""
"Synchronize the on-disk directory and data files.  This method is called by "
"the :meth:`shelve.Shelf.sync` method."
msgstr ""
"Synkroniserar katalogen och datafilerna på disken.  Denna metod anropas av "
"metoden :meth:`shelve.Shelf.sync`."

msgid "Close the database."
msgstr "Stäng databasen."

msgid "databases"
msgstr "databaser"
