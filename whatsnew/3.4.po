# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's New In Python 3.4"
msgstr "Vad är nytt i Python 3.4"

msgid "Author"
msgstr "Författare"

msgid "R. David Murray <rdmurray@bitdance.com> (Editor)"
msgstr "R. David Murray <rdmurray@bitdance.com> (redaktör)"

msgid ""
"This article explains the new features in Python 3.4, compared to 3.3. "
"Python 3.4 was released on March 16, 2014.  For full details, see the "
"`changelog <https://docs.python.org/3.4/whatsnew/changelog.html>`_."
msgstr ""
"I den här artikeln förklaras de nya funktionerna i Python 3.4 jämfört med "
"3.3. Python 3.4 släpptes den 16 mars 2014.  För fullständig information, se "
"`changelog <https://docs.python.org/3.4/whatsnew/changelog.html>`_."

msgid ":pep:`429` -- Python 3.4 Release Schedule"
msgstr ":pep:`429` -- Python 3.4 Utgivningsschema"

msgid "Summary -- Release Highlights"
msgstr "Sammanfattning -- Release Highlights"

msgid "New syntax features:"
msgstr "Nya syntaxfunktioner:"

msgid "No new syntax features were added in Python 3.4."
msgstr "Inga nya syntaxfunktioner har lagts till i Python 3.4."

msgid "Other new features:"
msgstr "Andra nya funktioner:"

msgid ":ref:`pip should always be available <whatsnew-pep-453>` (:pep:`453`)."
msgstr ""
":ref:`pip ska alltid vara tillgängligt <whatsnew-pep-453>` (:pep:`453`)."

msgid ""
":ref:`Newly created file descriptors are non-inheritable <whatsnew-pep-446>` "
"(:pep:`446`)."
msgstr ""
":ref:`Nyskapade filbeskrivare är inte ärftliga <whatsnew-pep-446>` (:pep:"
"`446`)."

msgid ""
"command line option for :ref:`isolated mode <whatsnew-isolated-mode>` (:"
"issue:`16499`)."
msgstr ""
"kommandoradsalternativ för :ref:`isolerat läge <whatsnew-isolated-mode>` (:"
"utgåva:`16499`)."

msgid ""
":ref:`improvements in the handling of codecs <codec-handling-improvements>` "
"that are not text encodings (multiple issues)."
msgstr ""
":ref:`förbättringar i hanteringen av codecs <codec-handling-improvements>` "
"som inte är textkodningar (flera frågor)."

msgid ""
":ref:`A ModuleSpec Type <whatsnew-pep-451>` for the Import System (:pep:"
"`451`).  (Affects importer authors.)"
msgstr ""
":ref:``En ModuleSpec-typ <whatsnew-pep-451>`` för importsystemet (:pep:"
"`451`).  (Påverkar importörsförfattare.)"

msgid ""
"The :mod:`marshal` format has been made :ref:`more compact and efficient "
"<whatsnew-marshal-3>` (:issue:`16475`)."
msgstr ""
"Formatet :mod:`marshal` har gjorts :ref:`mer kompakt och effektivt <whatsnew-"
"marshal-3>` (:issue:`16475`)."

msgid "New library modules:"
msgstr "Nya biblioteksmoduler:"

msgid ""
":mod:`asyncio`: :ref:`New provisional API for asynchronous IO <whatsnew-"
"asyncio>` (:pep:`3156`)."
msgstr ""
":mod:`asyncio`: :ref:`Nytt provisoriskt API för asynkron IO <whatsnew-"
"asyncio>` (:pep:`3156`)."

msgid ""
":mod:`ensurepip`: :ref:`Bootstrapping the pip installer <whatsnew-"
"ensurepip>` (:pep:`453`)."
msgstr ""
":mod:`ensurepip`: :ref:`Bootstrapping the pip installer <whatsnew-"
"ensurepip>` (:pep:`453`)."

msgid ""
":mod:`enum`: :ref:`Support for enumeration types <whatsnew-enum>` (:pep:"
"`435`)."
msgstr ""
":mod:`enum`: :ref:`Stöd för uppräkningstyper <whatsnew-enum>` (:pep:`435`)."

msgid ""
":mod:`pathlib`: :ref:`Object-oriented filesystem paths <whatsnew-pathlib>` (:"
"pep:`428`)."
msgstr ""
":mod:`pathlib`: :ref:`Objektorienterade filsystemssökvägar <whatsnew-"
"pathlib>` (:pep:`428`)."

msgid ""
":mod:`selectors`: :ref:`High-level and efficient I/O multiplexing <whatsnew-"
"selectors>`, built upon the :mod:`select` module primitives (part of :pep:"
"`3156`)."
msgstr ""
":mod:`selectors`: :ref:`Hög nivå och effektiv I/O-multiplexering <whatsnew-"
"selectors>`, byggd på :mod:`select`-modulens primitiver (del av :pep:`3156`)."

msgid ""
":mod:`statistics`: A basic :ref:`numerically stable statistics library "
"<whatsnew-statistics>` (:pep:`450`)."
msgstr ""
":mod:`statistics`: Ett grundläggande :ref:``numeriskt stabilt "
"statistikbibliotek <whatsnew-statistics>` (:pep:`450`)."

msgid ""
":mod:`tracemalloc`: :ref:`Trace Python memory allocations <whatsnew-"
"tracemalloc>` (:pep:`454`)."
msgstr ""
":mod:`tracemalloc`: :ref:`Trace Python memory allocations <whatsnew-"
"tracemalloc>` (:pep:`454`)."

msgid "Significantly improved library modules:"
msgstr "Betydligt förbättrade biblioteksmoduler:"

msgid ""
":ref:`Single-dispatch generic functions <whatsnew-singledispatch>` in :mod:"
"`functools` (:pep:`443`)."
msgstr ""
":ref:`Single-dispatch generiska funktioner <whatsnew-singledispatch>` i :mod:"
"`functools` (:pep:`443`)."

msgid ""
"New :mod:`pickle` :ref:`protocol 4 <whatsnew-protocol-4>` (:pep:`3154`)."
msgstr ""
"Ny :mod:`pickle` :ref:`protocol 4 <whatsnew-protocol-4>` (:pep:`3154`)."

msgid ""
":mod:`multiprocessing` now has :ref:`an option to avoid using os.fork on "
"Unix <whatsnew-multiprocessing-no-fork>` (:issue:`8713`)."
msgstr ""
":mod:`multiprocessing` har nu :ref:`ett alternativ för att undvika att "
"använda os.fork på Unix <whatsnew-multiprocessing-no-fork>` (:issue:`8713`)."

msgid ""
":mod:`email` has a new submodule, :mod:`~email.contentmanager`, and a new :"
"mod:`~email.message.Message` subclass (:class:`~email.contentmanager."
"EmailMessage`) that :ref:`simplify MIME handling "
"<whatsnew_email_contentmanager>` (:issue:`18891`)."
msgstr ""
":mod:`email` har en ny undermodul, :mod:`~email.contentmanager`, och en ny :"
"mod:`~email.message.Message`-underklass (:class:`~email.contentmanager."
"EmailMessage`) som :ref:`förenklar MIME-hanteringen "
"<whatsnew_email_contentmanager>` (:issue:`18891`)."

msgid ""
"The :mod:`inspect` and :mod:`pydoc` modules are now capable of correct "
"introspection of a much wider variety of callable objects, which improves "
"the output of the Python :func:`help` system."
msgstr ""
"Modulerna :mod:`inspect` och :mod:`pydoc` kan nu göra korrekt introspektion "
"av en mycket större mängd anropsbara objekt, vilket förbättrar utdata från "
"Pythons :func:`help`-system."

msgid "The :mod:`ipaddress` module API has been declared stable"
msgstr "API:et för modulen :mod:`ipaddress` har förklarats stabilt"

msgid "Security improvements:"
msgstr "Förbättringar av säkerheten:"

msgid ""
":ref:`Secure and interchangeable hash algorithm <whatsnew-pep-456>` (:pep:"
"`456`)."
msgstr ""
":ref:`Säker och utbytbar hashalgoritm <whatsnew-pep-456>` (:pep:`456`)."

msgid ""
":ref:`Make newly created file descriptors non-inheritable <whatsnew-"
"pep-446>` (:pep:`446`) to avoid leaking file descriptors to child processes."
msgstr ""
":ref:`Gör nyskapade filbeskrivare icke-ärftliga <whatsnew-pep-446>` (:pep:"
"`446`) för att undvika läckage av filbeskrivare till underordnade processer."

msgid ""
"New command line option for :ref:`isolated mode <whatsnew-isolated-mode>`, (:"
"issue:`16499`)."
msgstr ""
"Nytt kommandoradsalternativ för :ref:`isolated mode <whatsnew-isolated-"
"mode>`, (:issue:`16499`)."

msgid ""
":mod:`multiprocessing` now has :ref:`an option to avoid using os.fork on "
"Unix <whatsnew-multiprocessing-no-fork>`.  *spawn* and *forkserver* are more "
"secure because they avoid sharing data with child processes."
msgstr ""
":mod:`multiprocessing` har nu :ref:`ett alternativ för att undvika att "
"använda os.fork på Unix <whatsnew-multiprocessing-no-fork>`.  *spawn* och "
"*forkserver* är säkrare eftersom de undviker att dela data med underordnade "
"processer."

msgid ""
":mod:`multiprocessing` child processes on Windows no longer inherit all of "
"the parent's inheritable handles, only the necessary ones."
msgstr ""
":mod:`multiprocessing`-barnprocesser i Windows ärver inte längre alla "
"förälderns ärvbara handtag, bara de nödvändiga."

msgid ""
"A new :func:`hashlib.pbkdf2_hmac` function provides the `PKCS#5 password-"
"based key derivation function 2 <https://en.wikipedia.org/wiki/PBKDF2>`_."
msgstr ""
"En ny :func:`hashlib.pbkdf2_hmac`-funktion tillhandahåller `PKCS#5 password-"
"based key derivation function 2 <https://en.wikipedia.org/wiki/PBKDF2>`_."

msgid ":ref:`TLSv1.1 and TLSv1.2 support <whatsnew-tls-11-12>` for :mod:`ssl`."
msgstr ":ref:`TLSv1.1 och TLSv1.2 stöd <whatsnew-tls-11-12>` för :mod:`ssl`."

msgid ""
":ref:`Retrieving certificates from the Windows system cert store support "
"<whatsnew34-win-cert-store>` for :mod:`ssl`."
msgstr ""
":ref:`Hämtning av certifikat från Windows systemets cert-arkiv stöd "
"<whatsnew34-win-cert-store>` för :mod:`ssl`."

msgid ""
":ref:`Server-side SNI (Server Name Indication) support <whatsnew34-sni>` "
"for :mod:`ssl`."
msgstr ""
":ref:`Server-side SNI (Server Name Indication) support <whatsnew34-sni>` "
"för :mod:`ssl`."

msgid ""
"The :class:`ssl.SSLContext` class has a :ref:`lot of improvements "
"<whatsnew34-sslcontext>`."
msgstr ""
"Klassen :class:`ssl.SSLContext` har en :ref:`många förbättringar <whatsnew34-"
"sslcontext>`."

msgid ""
"All modules in the standard library that support SSL now support server "
"certificate verification, including hostname matching (:func:`ssl."
"match_hostname`) and CRLs (Certificate Revocation lists, see :func:`ssl."
"SSLContext.load_verify_locations`)."
msgstr ""
"Alla moduler i standardbiblioteket som stöder SSL stöder nu verifiering av "
"servercertifikat, inklusive matchning av värdnamn (:func:`ssl."
"match_hostname`) och CRL:er (listor över återkallade certifikat, se :func:"
"`ssl.SSLContext.load_verify_locations`)."

msgid "CPython implementation improvements:"
msgstr "Förbättringar av CPython-implementeringen:"

msgid ":ref:`Safe object finalization <whatsnew-pep-442>` (:pep:`442`)."
msgstr ":ref:`Safe object finalization <whatsnew-pep-442>` (:pep:`442`)."

msgid ""
"Leveraging :pep:`442`, in most cases :ref:`module globals are no longer set "
"to None during finalization <whatsnew-pep-442>` (:issue:`18214`)."
msgstr ""
"Med hjälp av :pep:`442`, i de flesta fall :ref:``modulglobaler sätts inte "
"längre till None under slutförande <whatsnew-pep-442>` (:issue:`18214`)."

msgid ":ref:`Configurable memory allocators <whatsnew-pep-445>` (:pep:`445`)."
msgstr ""
":ref:`Konfigurerbara minnesallokatorer <whatsnew-pep-445>` (:pep:`445`)."

msgid ":ref:`Argument Clinic <whatsnew-pep-436>` (:pep:`436`)."
msgstr ":ref:`Argumentklinik <whatsnew-pep-436>` (:pep:`436`)."

msgid ""
"Please read on for a comprehensive list of user-facing changes, including "
"many other smaller improvements, CPython optimizations, deprecations, and "
"potential porting issues."
msgstr ""
"Läs vidare för en omfattande lista över användarorienterade ändringar, "
"inklusive många andra mindre förbättringar, CPython-optimeringar, "
"avskrivningar och potentiella portningsproblem."

msgid "New Features"
msgstr "Nya funktioner"

msgid "PEP 453: Explicit Bootstrapping of PIP in Python Installations"
msgstr "PEP 453: Explicit bootstrapping av PIP i Python-installationer"

msgid "Bootstrapping pip By Default"
msgstr "Bootstrapping pip som standard"

msgid ""
"The new :mod:`ensurepip` module (defined in :pep:`453`) provides a standard "
"cross-platform mechanism to bootstrap the pip installer into Python "
"installations and virtual environments. The version of ``pip`` included with "
"Python 3.4.0 is ``pip`` 1.5.4, and future 3.4.x maintenance releases will "
"update the bundled version to the latest version of ``pip`` that is "
"available at the time of creating the release candidate."
msgstr ""
"Den nya modulen :mod:`ensurepip` (definierad i :pep:`453`) tillhandahåller "
"en plattformsoberoende standardmekanism för att starta upp pip-"
"installationsprogrammet i Python-installationer och virtuella miljöer. Den "
"version av ``pip`` som ingår i Python 3.4.0 är ``pip`` 1.5.4, och framtida "
"underhållsutgåvor av 3.4.x kommer att uppdatera den medföljande versionen "
"till den senaste versionen av ``pip`` som är tillgänglig vid tidpunkten för "
"skapandet av release candidate."

msgid ""
"By default, the commands ``pipX`` and ``pipX.Y`` will be installed on all "
"platforms (where X.Y stands for the version of the Python installation), "
"along with the ``pip`` Python package and its dependencies. On Windows and "
"in virtual environments on all platforms, the unversioned ``pip`` command "
"will also be installed. On other platforms, the system wide unversioned "
"``pip`` command typically refers to the separately installed Python 2 "
"version."
msgstr ""
"Som standard installeras kommandona ``pipX`` och ``pipX.Y`` på alla "
"plattformar (där X.Y står för versionen av Python-installationen), "
"tillsammans med Python-paketet ``pip`` och dess beroenden. I Windows och i "
"virtuella miljöer på alla plattformar installeras även det oversionerade "
"kommandot ``pip``. På andra plattformar hänvisar det systemomfattande "
"kommandot ``pip`` unversioned vanligtvis till den separat installerade "
"Python 2-versionen."

msgid ""
"The ``pyvenv`` command line utility and the :mod:`venv` module make use of "
"the :mod:`ensurepip` module to make ``pip`` readily available in virtual "
"environments. When using the command line utility, ``pip`` is installed by "
"default, while when using the :mod:`venv` module :ref:`venv-api` "
"installation of ``pip`` must be requested explicitly."
msgstr ""
"Kommandoradsverktyget ``pyvenv`` och modulen :mod:`venv`` använder modulen :"
"mod:`ensurepip`` för att göra ``pip`` lättillgängligt i virtuella miljöer. "
"När kommandoradsverktyget används installeras ``pip`` som standard, medan "
"installation av ``pip`` måste begäras uttryckligen när modulen :mod:`venv` :"
"ref:`venv-api` används."

msgid ""
"For CPython :ref:`source builds on POSIX systems <building-python-on-unix>`, "
"the ``make install`` and ``make altinstall`` commands bootstrap ``pip`` by "
"default.  This behaviour can be controlled through configure options, and "
"overridden through Makefile options."
msgstr ""
"För CPython :ref:`source builds på POSIX-system <building-python-on-unix>`, "
"bootstrappar kommandona ``make install`` och ``make altinstall`` ``pip`` som "
"standard.  Detta beteende kan kontrolleras genom configure-alternativ och "
"åsidosättas genom Makefile-alternativ."

msgid ""
"On Windows and Mac OS X, the CPython installers now default to installing "
"``pip`` along with CPython itself (users may opt out of installing it during "
"the installation process). Window users will need to opt in to the automatic "
"``PATH`` modifications to have ``pip`` available from the command line by "
"default, otherwise it can still be accessed through the Python launcher for "
"Windows as ``py -m pip``."
msgstr ""
"På Windows och Mac OS X installerar CPython-installatörerna nu som standard "
"``pip`` tillsammans med CPython själv (användare kan välja bort att "
"installera det under installationsprocessen). Windows-användare måste välja "
"de automatiska ``PATH``-ändringarna för att ``pip`` ska vara tillgängligt "
"från kommandoraden som standard, annars kan det fortfarande nås via Python-"
"startprogrammet för Windows som ``py -m pip``."

msgid ""
"As :pep:`discussed in the PEP <0453#recommendations-for-downstream-"
"distributors>` platform packagers may choose not to install these commands "
"by default, as long as, when invoked, they provide clear and simple "
"directions on how to install them on that platform (usually using the system "
"package manager)."
msgstr ""
"Som :pep:`diskuteras i PEP <0453#recommendations-for-downstream-"
"distributors>` kan plattformspaketörer välja att inte installera dessa "
"kommandon som standard, så länge som de, när de anropas, ger tydliga och "
"enkla anvisningar om hur de installeras på den plattformen (vanligtvis med "
"hjälp av systempakethanteraren)."

msgid ""
"To avoid conflicts between parallel Python 2 and Python 3 installations, "
"only the versioned ``pip3`` and ``pip3.4`` commands are bootstrapped by "
"default when ``ensurepip`` is invoked directly - the ``--default-pip`` "
"option is needed to also request the unversioned ``pip`` command. ``pyvenv`` "
"and the Windows installer ensure that the unqualified ``pip`` command is "
"made available in those environments, and ``pip`` can always be invoked via "
"the ``-m`` switch rather than directly to avoid ambiguity on systems with "
"multiple Python installations."
msgstr ""
"För att undvika konflikter mellan parallella Python 2- och Python 3-"
"installationer startas endast de versionerade kommandona ``pip3`` och "
"``pip3.4`` som standard när ``ensurepip`` anropas direkt - alternativet ``--"
"default-pip`` behövs för att även begära det oversionerade kommandot "
"``pip``. ``pyvenv`` och Windows-installationsprogrammet säkerställer att det "
"okvalificerade kommandot ``pip`` görs tillgängligt i dessa miljöer, och "
"``pip`` kan alltid anropas via ``-m``-omkopplaren istället för direkt för "
"att undvika tvetydighet på system med flera Python-installationer."

msgid "Documentation Changes"
msgstr "Förändringar i dokumentation"

msgid ""
"As part of this change, the :ref:`installing-index` and :ref:`distributing-"
"index` sections of the documentation have been completely redesigned as "
"short getting started and FAQ documents. Most packaging documentation has "
"now been moved out to the Python Packaging Authority maintained `Python "
"Packaging User Guide <https://packaging.python.org>`__ and the documentation "
"of the individual projects."
msgstr ""
"Som en del av denna förändring har avsnitten :ref:`installing-index` och :"
"ref:`distributing-index` i dokumentationen helt omarbetats till korta "
"dokument om att komma igång och vanliga frågor. Den mesta "
"förpackningsdokumentationen har nu flyttats ut till Python Packaging "
"Authoritys underhållna `Python Packaging User Guide <https://packaging."
"python.org>`__ och dokumentationen för de enskilda projekten."

msgid ""
"However, as this migration is currently still incomplete, the legacy "
"versions of those guides remaining available as :ref:`install-index` and :"
"ref:`setuptools-index`."
msgstr ""
"Men eftersom den här migreringen för närvarande fortfarande är ofullständig, "
"finns de äldre versionerna av dessa guider fortfarande tillgängliga som :ref:"
"`install-index` och :ref:`setuptools-index`."

msgid ":pep:`453` -- Explicit bootstrapping of pip in Python installations"
msgstr ":pep:`453` -- Explicit bootstrapping av pip i Python-installationer"

msgid ""
"PEP written by Donald Stufft and Nick Coghlan, implemented by Donald Stufft, "
"Nick Coghlan, Martin von Löwis and Ned Deily."
msgstr ""
"PEP skriven av Donald Stufft och Nick Coghlan, implementerad av Donald "
"Stufft, Nick Coghlan, Martin von Löwis och Ned Deily."

msgid "PEP 446: Newly Created File Descriptors Are Non-Inheritable"
msgstr "PEP 446: Nyskapade filbeskrivare är inte ärftliga"

msgid ""
":pep:`446` makes newly created file descriptors :ref:`non-inheritable "
"<fd_inheritance>`.  In general, this is the behavior an application will "
"want: when launching a new process, having currently open files also open in "
"the new process can lead to all sorts of hard to find bugs, and potentially "
"to security issues."
msgstr ""
":pep:`446` gör nyskapade filbeskrivare :ref:`icke-ärftliga "
"<fd_inheritance>`.  I allmänhet är detta det beteende som ett program vill "
"ha: när en ny process startas kan det leda till alla möjliga svårfunna "
"buggar och potentiellt till säkerhetsproblem om filer som för närvarande är "
"öppna också är öppna i den nya processen."

msgid ""
"However, there are occasions when inheritance is desired.  To support these "
"cases, the following new functions and methods are available:"
msgstr ""
"Det finns dock tillfällen då arv är önskvärt.  För att stödja dessa fall "
"finns följande nya funktioner och metoder tillgängliga:"

msgid ":func:`os.get_inheritable`, :func:`os.set_inheritable`"
msgstr ":func:`os.get_inheritable`, :func:`os.set_inheritable`"

msgid ":func:`os.get_handle_inheritable`, :func:`os.set_handle_inheritable`"
msgstr ":func:`os.get_handle_inheritable`, :func:`os.set_handle_inheritable`"

msgid ""
":meth:`socket.socket.get_inheritable`, :meth:`socket.socket.set_inheritable`"
msgstr ""
":meth:`socket.socket.get_inheritable`, :meth:`socket.socket.set_inheritable`"

msgid ":pep:`446` -- Make newly created file descriptors non-inheritable"
msgstr ":pep:`446` -- Gör nyskapade filbeskrivare icke-ärftliga"

msgid "PEP written and implemented by Victor Stinner."
msgstr "PEP skrivet och implementerat av Victor Stinner."

msgid "Improvements to Codec Handling"
msgstr "Förbättringar av Codec-hantering"

msgid ""
"Since it was first introduced, the :mod:`codecs` module has always been "
"intended to operate as a type-neutral dynamic encoding and decoding system. "
"However, its close coupling with the Python text model, especially the type "
"restricted convenience methods on the builtin :class:`str`, :class:`bytes` "
"and :class:`bytearray` types, has historically obscured that fact."
msgstr ""
"Sedan den först introducerades har modulen :mod:`codecs` alltid varit avsedd "
"att fungera som ett typneutralt dynamiskt kodnings- och avkodningssystem. "
"Men dess nära koppling till Pythons textmodell, särskilt de typbegränsade "
"bekvämlighetsmetoderna för de inbyggda typerna :class:`str`, :class:`bytes` "
"och :class:`bytearray`, har historiskt sett dolt detta faktum."

msgid ""
"As a key step in clarifying the situation, the :meth:`codecs.encode` and :"
"meth:`codecs.decode` convenience functions are now properly documented in "
"Python 2.7, 3.3 and 3.4. These functions have existed in the :mod:`codecs` "
"module (and have been covered by the regression test suite) since Python "
"2.4, but were previously only discoverable through runtime introspection."
msgstr ""
"Som ett viktigt steg i att klargöra situationen är "
"bekvämlighetsfunktionerna :meth:`codecs.encode` och :meth:`codecs.decode` nu "
"korrekt dokumenterade i Python 2.7, 3.3 och 3.4. Dessa funktioner har "
"funnits i modulen :mod:`codecs` (och har täckts av regressionstestsviten) "
"sedan Python 2.4, men var tidigare endast upptäckbara genom introspektion "
"under körning."

msgid ""
"Unlike the convenience methods on :class:`str`, :class:`bytes` and :class:"
"`bytearray`, the :mod:`codecs` convenience functions support arbitrary "
"codecs in both Python 2 and Python 3, rather than being limited to Unicode "
"text encodings (in Python 3) or ``basestring`` <-> ``basestring`` "
"conversions (in Python 2)."
msgstr ""
"Till skillnad från bekvämlighetsmetoderna för :class:`str`, :class:`bytes` "
"och :class:`bytearray` stöder :mod:`codecs` bekvämlighetsfunktioner "
"godtyckliga codecs i både Python 2 och Python 3, snarare än att vara "
"begränsade till Unicode-textkodningar (i Python 3) eller ``basstrings`` <-> "
"``basstrings``-konverteringar (i Python 2)."

msgid ""
"In Python 3.4, the interpreter is able to identify the known non-text "
"encodings provided in the standard library and direct users towards these "
"general purpose convenience functions when appropriate::"
msgstr ""
"I Python 3.4 kan tolken identifiera de kända icke-textkodningar som finns i "
"standardbiblioteket och hänvisa användare till dessa allmänna "
"bekvämlighetsfunktioner när det är lämpligt::"

msgid ""
">>> b\"abcdef\".decode(\"hex\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"LookupError: 'hex' is not a text encoding; use codecs.decode() to handle "
"arbitrary codecs\n"
"\n"
">>> \"hello\".encode(\"rot13\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"LookupError: 'rot13' is not a text encoding; use codecs.encode() to handle "
"arbitrary codecs\n"
"\n"
">>> open(\"foo.txt\", encoding=\"hex\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"LookupError: 'hex' is not a text encoding; use codecs.open() to handle "
"arbitrary codecs"
msgstr ""
"&gt;&gt;&gt; b\"abcdef\".avkoda(\"hex\")\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i <module>\n"
"LookupError: 'hex' är inte en textkodning; använd codecs.decode() för att "
"hantera godtyckliga codecs\n"
"\n"
"&gt;&gt;&gt; \"hello\".encode(\"rot13\")\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i <module>\n"
"LookupError: 'rot13' är inte en textkodning; använd codecs.encode() för att "
"hantera godtyckliga kodningar\n"
"\n"
"&gt;&gt;&gt; open(\"foo.txt\", kodning=\"hex\")\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i <module>\n"
"LookupError: 'hex' är inte en textkodning; använd codecs.open() för att "
"hantera godtyckliga kodningar"

msgid ""
"In a related change, whenever it is feasible without breaking backwards "
"compatibility, exceptions raised during encoding and decoding operations are "
"wrapped in a chained exception of the same type that mentions the name of "
"the codec responsible for producing the error::"
msgstr ""
"I en relaterad ändring, när det är möjligt utan att bryta "
"bakåtkompatibiliteten, är undantag som uppstår under kodnings- och "
"avkodningsoperationer inslagna i ett kedjat undantag av samma typ som nämner "
"namnet på den codec som är ansvarig för att producera felet::"

msgid ""
">>> import codecs\n"
"\n"
">>> codecs.decode(b\"abcdefgh\", \"hex\")\n"
"Traceback (most recent call last):\n"
"  File \"/usr/lib/python3.4/encodings/hex_codec.py\", line 20, in "
"hex_decode\n"
"    return (binascii.a2b_hex(input), len(input))\n"
"binascii.Error: Non-hexadecimal digit found\n"
"\n"
"The above exception was the direct cause of the following exception:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"binascii.Error: decoding with 'hex' codec failed (Error: Non-hexadecimal "
"digit found)\n"
"\n"
">>> codecs.encode(\"hello\", \"bz2\")\n"
"Traceback (most recent call last):\n"
"  File \"/usr/lib/python3.4/encodings/bz2_codec.py\", line 17, in "
"bz2_encode\n"
"    return (bz2.compress(input), len(input))\n"
"  File \"/usr/lib/python3.4/bz2.py\", line 498, in compress\n"
"    return comp.compress(data) + comp.flush()\n"
"TypeError: 'str' does not support the buffer interface\n"
"\n"
"The above exception was the direct cause of the following exception:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: encoding with 'bz2' codec failed (TypeError: 'str' does not "
"support the buffer interface)"
msgstr ""
">>> import codecs\n"
"\n"
">>> codecs.decode(b\"abcdefgh\", \"hex\")\n"
"Traceback (most recent call last):\n"
"  File \"/usr/lib/python3.4/encodings/hex_codec.py\", line 20, in "
"hex_decode\n"
"    return (binascii.a2b_hex(input), len(input))\n"
"binascii.Error: Non-hexadecimal digit found\n"
"\n"
"The above exception was the direct cause of the following exception:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"binascii.Error: decoding with 'hex' codec failed (Error: Non-hexadecimal "
"digit found)\n"
"\n"
">>> codecs.encode(\"hello\", \"bz2\")\n"
"Traceback (most recent call last):\n"
"  File \"/usr/lib/python3.4/encodings/bz2_codec.py\", line 17, in "
"bz2_encode\n"
"    return (bz2.compress(input), len(input))\n"
"  File \"/usr/lib/python3.4/bz2.py\", line 498, in compress\n"
"    return comp.compress(data) + comp.flush()\n"
"TypeError: 'str' does not support the buffer interface\n"
"\n"
"The above exception was the direct cause of the following exception:\n"
"\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: encoding with 'bz2' codec failed (TypeError: 'str' does not "
"support the buffer interface)"

msgid ""
"Finally, as the examples above show, these improvements have permitted the "
"restoration of the convenience aliases for the non-Unicode codecs that were "
"themselves restored in Python 3.2. This means that encoding binary data to "
"and from its hexadecimal representation (for example) can now be written as::"
msgstr ""
"Slutligen, som exemplen ovan visar, har dessa förbättringar gjort det "
"möjligt att återställa de praktiska alias för icke-Unicode-codecs som själva "
"återställdes i Python 3.2. Detta innebär att kodning av binära data till och "
"från dess hexadecimala representation (till exempel) nu kan skrivas som::"

msgid ""
">>> from codecs import encode, decode\n"
">>> encode(b\"hello\", \"hex\")\n"
"b'68656c6c6f'\n"
">>> decode(b\"68656c6c6f\", \"hex\")\n"
"b'hello'"
msgstr ""
">>> from codecs import encode, decode\n"
">>> encode(b\"hello\", \"hex\")\n"
"b'68656c6c6f'\n"
">>> decode(b\"68656c6c6f\", \"hex\")\n"
"b'hello'"

msgid ""
"The binary and text transforms provided in the standard library are detailed "
"in :ref:`binary-transforms` and :ref:`text-transforms`."
msgstr ""
"De binär- och texttransformationer som finns i standardbiblioteket beskrivs "
"närmare i :ref:`binary-transforms` och :ref:`text-transforms`."

msgid ""
"(Contributed by Nick Coghlan in :issue:`7475`, :issue:`17827`, :issue:"
"`17828` and :issue:`19619`.)"
msgstr ""
"(Bidrag från Nick Coghlan i :issue:`7475`, :issue:`17827`, :issue:`17828` "
"och :issue:`19619`.)"

msgid "PEP 451: A ModuleSpec Type for the Import System"
msgstr "PEP 451: En ModuleSpec-typ för importsystemet"

msgid ""
":pep:`451` provides an encapsulation of the information about a module that "
"the import machinery will use to load it (that is, a module specification).  "
"This helps simplify both the import implementation and several import-"
"related APIs. The change is also a stepping stone for `several future import-"
"related improvements`__."
msgstr ""
":pep:`451` tillhandahåller en inkapsling av informationen om en modul som "
"importmaskineriet kommer att använda för att ladda den (det vill säga en "
"modulspecifikation).  Detta hjälper till att förenkla både "
"importimplementationen och flera importrelaterade API:er. Ändringen är också "
"en språngbräda för `flera framtida importrelaterade förbättringar`__."

msgid ""
"The public-facing changes from the PEP are entirely backward-compatible. "
"Furthermore, they should be transparent to everyone but importer authors.  "
"Key finder and loader methods have been deprecated, but they will continue "
"working. New importers should use the new methods described in the PEP.  "
"Existing importers should be updated to implement the new methods.  See the :"
"ref:`deprecated-3.4` section for a list of methods that should be replaced "
"and their replacements."
msgstr ""
"De ändringar från PEP som vänder sig till allmänheten är helt "
"bakåtkompatibla. Dessutom bör de vara transparenta för alla utom "
"importörsförfattare.  Metoderna för nyckelsökare och laddare har utgått, men "
"de kommer att fortsätta att fungera. Nya importörer bör använda de nya "
"metoder som beskrivs i PEP.  Befintliga importörer bör uppdateras för att "
"implementera de nya metoderna.  Se avsnittet :ref:`deprecated-3.4` för en "
"lista över metoder som bör ersättas och deras ersättare."

msgid "Other Language Changes"
msgstr "Andra språkliga förändringar"

msgid "Some smaller changes made to the core Python language are:"
msgstr "Några mindre ändringar som gjorts i Python-språkets kärna är:"

msgid "Unicode database updated to UCD version 6.3."
msgstr "Unicode-databasen uppdaterad till UCD version 6.3."

msgid ""
":func:`min` and :func:`max` now accept a *default* keyword-only argument "
"that can be used to specify the value they return if the iterable they are "
"evaluating has no elements.  (Contributed by Julian Berman in :issue:"
"`18111`.)"
msgstr ""
":func:`min` och :func:`max` accepterar nu ett *default* nyckelordsargument "
"som kan användas för att ange det värde de returnerar om den iterabel de "
"utvärderar inte har några element.  (Bidrag från Julian Berman i :issue:"
"`18111`.)"

msgid "Module objects are now :ref:`weakly referenceable <mod-weakref>`."
msgstr "Modulobjekt är nu :ref:`svagt refererbara <mod-weakref>`."

msgid ""
"Module ``__file__`` attributes (and related values) should now always "
"contain absolute paths by default, with the sole exception of ``__main__."
"__file__`` when a script has been executed directly using a relative path.  "
"(Contributed by Brett Cannon in :issue:`18416`.)"
msgstr ""
"Modulens ``__file__``-attribut (och relaterade värden) ska nu alltid "
"innehålla absoluta sökvägar som standard, med undantag för ``__main__."
"__file__`` när ett skript har exekverats direkt med en relativ sökväg.  "
"(Bidrag från Brett Cannon i :issue:`18416`.)"

msgid ""
"All the UTF-\\* codecs (except UTF-7) now reject surrogates during both "
"encoding and decoding unless the ``surrogatepass`` error handler is used, "
"with the exception of the UTF-16 decoder (which accepts valid surrogate "
"pairs) and the UTF-16 encoder (which produces them while encoding non-BMP "
"characters). (Contributed by Victor Stinner, Kang-Hao (Kenny) Lu and Serhiy "
"Storchaka in :issue:`12892`.)"
msgstr ""
"Alla UTF-\\*-codecs (utom UTF-7) avvisar nu surrogat under både kodning och "
"avkodning om inte felhanteraren ``surrogatepass`` används, med undantag för "
"UTF-16-avkodaren (som accepterar giltiga surrogatpar) och UTF-16-kodaren "
"(som producerar dem vid kodning av icke-BMP-tecken). (Bidrag från Victor "
"Stinner, Kang-Hao (Kenny) Lu och Serhiy Storchaka i :issue:`12892`.)"

msgid ""
"New German EBCDIC :ref:`codec <standard-encodings>` ``cp273``.  (Contributed "
"by Michael Bierenfeld and Andrew Kuchling in :issue:`1097797`.)"
msgstr ""
"Ny tysk EBCDIC :ref:`codec <standard-encodings>` ``cp273``.  (Bidrag från "
"Michael Bierenfeld och Andrew Kuchling i :issue:`1097797`.)"

msgid ""
"New Ukrainian :ref:`codec <standard-encodings>` ``cp1125``.  (Contributed by "
"Serhiy Storchaka in :issue:`19668`.)"
msgstr ""
"Ny ukrainsk :ref:`codec <standard-encodings>` ``cp1125``.  (Bidrag från "
"Serhiy Storchaka i :issue:`19668`.)"

msgid ""
":class:`bytes`.join() and :class:`bytearray`.join() now accept arbitrary "
"buffer objects as arguments.  (Contributed by Antoine Pitrou in :issue:"
"`15958`.)"
msgstr ""
":class:`bytes`.join() och :class:`bytearray`.join() accepterar nu "
"godtyckliga buffertobjekt som argument.  (Bidrag från Antoine Pitrou i :"
"issue:`15958`.)"

msgid ""
"The :class:`int` constructor now accepts any object that has an "
"``__index__`` method for its *base* argument.  (Contributed by Mark "
"Dickinson in :issue:`16772`.)"
msgstr ""
"Konstruktorn :class:`int` accepterar nu alla objekt som har en ``__index__``-"
"metod för sitt *base*-argument.  (Bidrag från Mark Dickinson i :issue:"
"`16772`.)"

msgid ""
"Frame objects now have a :func:`~frame.clear` method that clears all "
"references to local variables from the frame.  (Contributed by Antoine "
"Pitrou in :issue:`17934`.)"
msgstr ""
"Frame-objekt har nu en :func:`~frame.clear`-metod som rensar alla referenser "
"till lokala variabler från ramen.  (Bidrag från Antoine Pitrou i :issue:"
"`17934`.)"

msgid ""
":class:`memoryview` is now registered as a :class:`Sequence <collections."
"abc>`, and supports the :func:`reversed` builtin.  (Contributed by Nick "
"Coghlan and Claudiu Popa in :issue:`18690` and :issue:`19078`.)"
msgstr ""
":class:`memoryview` är nu registrerad som en :class:`Sequence <collections."
"abc>`, och stödjer :func:`reversed` builtin.  (Bidrag från Nick Coghlan och "
"Claudiu Popa i :issue:`18690` och :issue:`19078`.)"

msgid ""
"Signatures reported by :func:`help` have been modified and improved in "
"several cases as a result of the introduction of Argument Clinic and other "
"changes to the :mod:`inspect` and :mod:`pydoc` modules."
msgstr ""
"Signaturer som rapporteras av :func:`help` har modifierats och förbättrats i "
"flera fall som ett resultat av införandet av Argument Clinic och andra "
"ändringar i modulerna :mod:`inspect` och :mod:`pydoc`."

msgid ""
":meth:`~object.__length_hint__` is now part of the formal language "
"specification (see :pep:`424`).  (Contributed by Armin Ronacher in :issue:"
"`16148`.)"
msgstr ""
":meth:`~object.__length_hint__` är nu en del av den formella "
"språkspecifikationen (se :pep:`424`).  (Bidrag från Armin Ronacher i :issue:"
"`16148`.)"

msgid "New Modules"
msgstr "Nya moduler"

msgid "asyncio"
msgstr "asyncio"

msgid ""
"The new :mod:`asyncio` module (defined in :pep:`3156`) provides a standard "
"pluggable event loop model for Python, providing solid asynchronous IO "
"support in the standard library, and making it easier for other event loop "
"implementations to interoperate with the standard library and each other."
msgstr ""
"Den nya modulen :mod:`asyncio` (definierad i :pep:`3156`) tillhandahåller en "
"standardiserad pluggbar modell för händelseslingor i Python, vilket ger ett "
"gediget stöd för asynkron IO i standardbiblioteket och gör det enklare för "
"andra implementeringar av händelseslingor att samverka med "
"standardbiblioteket och varandra."

msgid "For Python 3.4, this module is considered a :term:`provisional API`."
msgstr "För Python 3.4 anses denna modul vara ett :term:`provisoriskt API`."

msgid ":pep:`3156` -- Asynchronous IO Support Rebooted: the \"asyncio\" Module"
msgstr ":pep:`3156` -- Asynkront IO-stöd återstartat: modulen \"asyncio\""

msgid "PEP written and implementation led by Guido van Rossum."
msgstr "PEP skrivs och genomförandet leds av Guido van Rossum."

msgid "ensurepip"
msgstr "säkerställa pip"

msgid ""
"The new :mod:`ensurepip` module is the primary infrastructure for the :pep:"
"`453` implementation.  In the normal course of events end users will not "
"need to interact with this module, but it can be used to manually bootstrap "
"``pip`` if the automated bootstrapping into an installation or virtual "
"environment was declined."
msgstr ""
"Den nya modulen :mod:`ensurepip` är den primära infrastrukturen för "
"implementeringen av :pep:`453`.  I normala fall behöver slutanvändarna inte "
"interagera med den här modulen, men den kan användas för att manuellt starta "
"upp ``pip`` om den automatiska uppstarten till en installation eller "
"virtuell miljö inte fungerar."

msgid ""
":mod:`ensurepip` includes a bundled copy of ``pip``, up-to-date as of the "
"first release candidate of the release of CPython with which it ships (this "
"applies to both maintenance releases and feature releases).  ``ensurepip`` "
"does not access the internet.  If the installation has internet access, "
"after ``ensurepip`` is run the bundled ``pip`` can be used to upgrade "
"``pip`` to a more recent release than the bundled one.  (Note that such an "
"upgraded version of ``pip`` is considered to be a separately installed "
"package and will not be removed if Python is uninstalled.)"
msgstr ""
":mod:`ensurepip` innehåller en buntad kopia av ``pip``, uppdaterad från och "
"med den första releasekandidaten för den version av CPython som den "
"levereras med (detta gäller både underhållsreleaser och funktionsreleaser).  "
"``ensurepip`` har inte tillgång till internet.  Om installationen har "
"tillgång till Internet, efter att ``ensurepip`` har körts, kan den "
"medföljande ``pip`` användas för att uppgradera ``pip`` till en nyare "
"version än den medföljande.  (Observera att en sådan uppgraderad version av "
"``pip`` anses vara ett separat installerat paket och kommer inte att tas "
"bort om Python avinstalleras)"

msgid ""
"The module is named *ensure*\\ pip because if called when ``pip`` is already "
"installed, it does nothing.  It also has an ``--upgrade`` option that will "
"cause it to install the bundled copy of ``pip`` if the existing installed "
"version of ``pip`` is older than the bundled copy."
msgstr ""
"Modulen heter *ensure* pip eftersom den inte gör någonting om den anropas "
"när ``pip`` redan är installerat.  Den har också ett alternativ ``--"
"upgrade`` som gör att den installerar den medföljande kopian av ``pip`` om "
"den befintliga installerade versionen av ``pip`` är äldre än den medföljande "
"kopian."

msgid "enum"
msgstr "enum"

msgid ""
"The new :mod:`enum` module (defined in :pep:`435`) provides a standard "
"implementation of enumeration types, allowing other modules (such as :mod:"
"`socket`) to provide more informative error messages and better debugging "
"support by replacing opaque integer constants with backwards compatible "
"enumeration values."
msgstr ""
"Den nya modulen :mod:`enum` (definierad i :pep:`435`) ger en "
"standardimplementering av uppräkningstyper, vilket gör att andra moduler (t."
"ex. :mod:`socket`) kan ge mer informativa felmeddelanden och bättre "
"felsökningsstöd genom att ersätta opaka heltalskonstanter med "
"bakåtkompatibla uppräkningsvärden."

msgid ":pep:`435` -- Adding an Enum type to the Python standard library"
msgstr ":pep:`435` -- Lägga till en Enum-typ i Pythons standardbibliotek"

msgid ""
"PEP written by Barry Warsaw, Eli Bendersky and Ethan Furman, implemented by "
"Ethan Furman."
msgstr ""
"PEP skriven av Barry Warsaw, Eli Bendersky och Ethan Furman, implementerad "
"av Ethan Furman."

msgid "pathlib"
msgstr "sökväg"

msgid ""
"The new :mod:`pathlib` module offers classes representing filesystem paths "
"with semantics appropriate for different operating systems.  Path classes "
"are divided between *pure paths*, which provide purely computational "
"operations without I/O, and *concrete paths*, which inherit from pure paths "
"but also provide I/O operations."
msgstr ""
"Den nya modulen :mod:`pathlib` erbjuder klasser som representerar sökvägar i "
"filsystemet med semantik som är lämplig för olika operativsystem.  "
"Sökvägsklasserna är uppdelade i *rena sökvägar*, som tillhandahåller rena "
"beräkningsoperationer utan I/O, och *konkreta sökvägar*, som ärver från rena "
"sökvägar men också tillhandahåller I/O-operationer."

msgid ":pep:`428` -- The pathlib module -- object-oriented filesystem paths"
msgstr ""
":pep:`428` -- Pathlib-modulen -- objektorienterade sökvägar i filsystemet"

msgid "PEP written and implemented by Antoine Pitrou."
msgstr "PEP skrivet och genomfört av Antoine Pitrou."

msgid "selectors"
msgstr "väljare"

msgid ""
"The new :mod:`selectors` module (created as part of implementing :pep:"
"`3156`) allows high-level and efficient I/O multiplexing, built upon the :"
"mod:`select` module primitives."
msgstr ""
"Den nya modulen :mod:`selectors` (skapad som en del av implementeringen av :"
"pep:`3156`) möjliggör högnivå och effektiv I/O-multiplexering, byggd på :mod:"
"`select`-modulens primitiver."

msgid "statistics"
msgstr "statistik"

msgid ""
"The new :mod:`statistics` module (defined in :pep:`450`) offers some core "
"statistics functionality directly in the standard library. This module "
"supports calculation of the mean, median, mode, variance and standard "
"deviation of a data series."
msgstr ""
"Den nya modulen :mod:`statistics` (definierad i :pep:`450`) erbjuder en del "
"grundläggande statistikfunktioner direkt i standardbiblioteket. Denna modul "
"stöder beräkning av medelvärde, median, läge, varians och standardavvikelse "
"för en dataserie."

msgid ":pep:`450` -- Adding A Statistics Module To The Standard Library"
msgstr ":pep:`450` -- Lägga till en statistikmodul i standardbiblioteket"

msgid "PEP written and implemented by Steven D'Aprano"
msgstr "PEP skrivet och implementerat av Steven D'Aprano"

msgid "tracemalloc"
msgstr "tracemalloc"

msgid ""
"The new :mod:`tracemalloc` module (defined in :pep:`454`) is a debug tool to "
"trace memory blocks allocated by Python. It provides the following "
"information:"
msgstr ""
"Den nya modulen :mod:`tracemalloc` (definierad i :pep:`454`) är ett "
"felsökningsverktyg för att spåra minnesblock som allokerats av Python. Den "
"ger följande information:"

msgid "Trace where an object was allocated"
msgstr "Spåra var ett objekt allokerades"

msgid ""
"Statistics on allocated memory blocks per filename and per line number: "
"total size, number and average size of allocated memory blocks"
msgstr ""
"Statistik över allokerade minnesblock per filnamn och radnummer: total "
"storlek, antal och genomsnittlig storlek på allokerade minnesblock"

msgid "Compute the differences between two snapshots to detect memory leaks"
msgstr ""
"Beräkna skillnaderna mellan två ögonblicksbilder för att upptäcka "
"minnesläckor"

msgid ""
":pep:`454` -- Add a new tracemalloc module to trace Python memory allocations"
msgstr ""
":pep:`454` -- Lägg till en ny tracemalloc-modul för att spåra Python-"
"minnesallokeringar"

msgid "PEP written and implemented by Victor Stinner"
msgstr "PEP skrivet och implementerat av Victor Stinner"

msgid "Improved Modules"
msgstr "Förbättrade moduler"

msgid "abc"
msgstr "abc"

msgid ""
"New function :func:`abc.get_cache_token` can be used to know when to "
"invalidate caches that are affected by changes in the object graph.  "
"(Contributed by Łukasz Langa in :issue:`16832`.)"
msgstr ""
"Ny funktion :func:`abc.get_cache_token` kan användas för att veta när cacher "
"som påverkas av ändringar i objektgrafen ska ogiltigförklaras.  (Bidrag från "
"Łukasz Langa i :issue:`16832`.)"

msgid ""
"New class :class:`~abc.ABC` has :class:`~abc.ABCMeta` as its meta class. "
"Using ``ABC`` as a base class has essentially the same effect as specifying "
"``metaclass=abc.ABCMeta``, but is simpler to type and easier to read. "
"(Contributed by Bruno Dupuis in :issue:`16049`.)"
msgstr ""
"Den nya klassen :class:`~abc.ABC` har :class:`~abc.ABCMeta` som metaklass. "
"Att använda ``ABC`` som basklass har i stort sett samma effekt som att ange "
"``metaclass=abc.ABCMeta``, men är enklare att skriva och lättare att läsa. "
"(Bidrag från Bruno Dupuis i :issue:`16049`.)"

msgid "aifc"
msgstr "aifc"

msgid ""
"The :meth:`!getparams` method now returns a namedtuple rather than a plain "
"tuple.  (Contributed by Claudiu Popa in :issue:`17818`.)"
msgstr ""
"Metoden :meth:`!getparams` returnerar nu en namngiven tupel istället för en "
"vanlig tupel.  (Bidrag från Claudiu Popa i :issue:`17818`.)"

msgid ""
":func:`!aifc.open` now supports the context management protocol: when used "
"in a :keyword:`with` block, the :meth:`!close` method of the returned object "
"will be called automatically at the end of the block.  (Contributed by "
"Serhiy Storchacha in :issue:`16486`.)"
msgstr ""
":func:`!aifc.open` har nu stöd för kontexthanteringsprotokollet: när det "
"används i ett :keyword:`with`-block kommer :meth:`!close`-metoden för det "
"returnerade objektet att anropas automatiskt i slutet av blocket.  (Bidrag "
"från Serhiy Storchacha i :issue:`16486`.)"

msgid ""
"The :meth:`!writeframesraw` and :meth:`!writeframes` methods now accept any :"
"term:`bytes-like object`.  (Contributed by Serhiy Storchaka in :issue:"
"`8311`.)"
msgstr ""
"Metoderna :meth:`!writeframesraw` och :meth:`!writeframes` accepterar nu "
"alla :term:`bytes-liknande objekt`.  (Bidrag från Serhiy Storchaka i :issue:"
"`8311`.)"

msgid "argparse"
msgstr "argparse"

msgid ""
"The :class:`~argparse.FileType` class now accepts *encoding* and *errors* "
"arguments, which are passed through to :func:`open`.  (Contributed by Lucas "
"Maystre in :issue:`11175`.)"
msgstr ""
"Klassen :class:`~argparse.FileType` accepterar nu *encoding* och *errors* "
"argument, som skickas vidare till :func:`open`.  (Bidrag från Lucas Maystre "
"i :issue:`11175`.)"

msgid "audioop"
msgstr "audioop"

msgid ""
":mod:`!audioop` now supports 24-bit samples.  (Contributed by Serhiy "
"Storchaka in :issue:`12866`.)"
msgstr ""
":mod:`!audioop` stöder nu 24-bitars samplingar.  (Bidrag från Serhiy "
"Storchaka i :issue:`12866`.)"

msgid ""
"New :func:`!byteswap` function converts big-endian samples to little-endian "
"and vice versa.  (Contributed by Serhiy Storchaka in :issue:`19641`.)"
msgstr ""
"Ny :func:`!byteswap`-funktion konverterar big-endian-samplingar till little-"
"endian och vice versa.  (Bidrag från Serhiy Storchaka i :issue:`19641`.)"

msgid ""
"All :mod:`!audioop` functions now accept any :term:`bytes-like object`.  "
"Strings are not accepted: they didn't work before, now they raise an error "
"right away. (Contributed by Serhiy Storchaka in :issue:`16685`.)"
msgstr ""
"Alla :mod:`!audioop`-funktioner accepterar nu alla :term:`bytesliknande "
"objekt`.  Strängar accepteras inte: de fungerade inte tidigare, nu ger de "
"upphov till ett fel direkt. (Bidrag från Serhiy Storchaka i :issue:`16685`.)"

msgid "base64"
msgstr "bas64"

msgid ""
"The encoding and decoding functions in :mod:`base64` now accept any :term:"
"`bytes-like object` in cases where it previously required a :class:`bytes` "
"or :class:`bytearray` instance.  (Contributed by Nick Coghlan in :issue:"
"`17839`.)"
msgstr ""
"Kodnings- och avkodningsfunktionerna i :mod:`base64` accepterar nu alla :"
"term:`bytesliknande objekt` i fall där det tidigare krävdes en instans av :"
"class:`bytes` eller :class:`bytearray`.  (Bidrag från Nick Coghlan i :issue:"
"`17839`.)"

msgid ""
"New functions :func:`~base64.a85encode`, :func:`~base64.a85decode`, :func:"
"`~base64.b85encode`, and :func:`~base64.b85decode` provide the ability to "
"encode and decode binary data from and to ``Ascii85`` and the git/mercurial "
"``Base85`` formats, respectively.  The ``a85`` functions have options that "
"can be used to make them compatible with the variants of the ``Ascii85`` "
"encoding, including the Adobe variant.  (Contributed by Martin Morrison, the "
"Mercurial project, Serhiy Storchaka, and Antoine Pitrou in :issue:`17618`.)"
msgstr ""
"Nya funktioner :func:`~base64.a85encode`, :func:`~base64.a85decode`, :func:"
"`~base64.b85encode`, och :func:`~base64.b85decode` ger möjlighet att koda "
"och avkoda binärdata från och till ``Ascii85`` respektive git/mercurial "
"``Base85``-formaten.  Funktionerna i ``a85`` har alternativ som kan användas "
"för att göra dem kompatibla med olika varianter av kodningen ``Ascii85``, "
"inklusive Adobe-varianten.  (Bidrag från Martin Morrison, Mercurial-"
"projektet, Serhiy Storchaka och Antoine Pitrou i :issue:`17618`.)"

msgid "collections"
msgstr "samlingar"

msgid ""
"The :meth:`.ChainMap.new_child` method now accepts an *m* argument "
"specifying the child map to add to the chain.  This allows an existing "
"mapping and/or a custom mapping type to be used for the child.  (Contributed "
"by Vinay Sajip in :issue:`16613`.)"
msgstr ""
"Metoden :meth:`.ChainMap.new_child` accepterar nu ett *m*-argument som anger "
"den underordnade mappningen som ska läggas till i kedjan.  Detta gör att en "
"befintlig mappning och/eller en anpassad mappningstyp kan användas för "
"barnet.  (Bidrag från Vinay Sajip i :issue:`16613`.)"

msgid "colorsys"
msgstr "färgämnen"

msgid ""
"The number of digits in the coefficients for the RGB --- YIQ conversions "
"have been expanded so that they match the FCC NTSC versions.  The change in "
"results should be less than 1% and may better match results found elsewhere. "
"(Contributed by Brian Landers and Serhiy Storchaka in :issue:`14323`.)"
msgstr ""
"Antalet siffror i koefficienterna för RGB --- YIQ-konverteringarna har "
"utökats så att de stämmer överens med FCC NTSC-versionerna.  Förändringen i "
"resultat bör vara mindre än 1% a och kan bättre matcha resultat som finns på "
"andra ställen. (Bidrag från Brian Landers och Serhiy Storchaka i :issue:"
"`14323`.)"

msgid "contextlib"
msgstr "contextlib"

msgid ""
"The new :class:`contextlib.suppress` context manager helps to clarify the "
"intent of code that deliberately suppresses exceptions from a single "
"statement.  (Contributed by Raymond Hettinger in :issue:`15806` and Zero "
"Piraeus in :issue:`19266`.)"
msgstr ""
"Den nya :class:`contextlib.suppress` kontexthanteraren hjälper till att "
"klargöra avsikten med kod som avsiktligt undertrycker undantag från ett enda "
"uttalande.  (Bidrag från Raymond Hettinger i :issue:`15806` och Zero Piraeus "
"i :issue:`19266`.)"

msgid ""
"The new :func:`contextlib.redirect_stdout` context manager makes it easier "
"for utility scripts to handle inflexible APIs that write their output to :"
"data:`sys.stdout` and don't provide any options to redirect it.  Using the "
"context manager, the :data:`sys.stdout` output can be redirected to any "
"other stream or, in conjunction with :class:`io.StringIO`, to a string. The "
"latter can be especially useful, for example, to capture output from a "
"function that was written to implement a command line interface. It is "
"recommended only for utility scripts because it affects the global state of :"
"data:`sys.stdout`.  (Contributed by Raymond Hettinger in :issue:`15805`.)"
msgstr ""
"Den nya kontexthanteraren :func:`contextlib.redirect_stdout` gör det enklare "
"för verktygsskript att hantera oflexibla API:er som skriver utdata till :"
"data:`sys.stdout` och inte ger några alternativ för att omdirigera den.  Med "
"hjälp av kontexthanteraren kan utdata från :data:`sys.stdout` omdirigeras "
"till valfri annan ström eller, i kombination med :class:`io.StringIO`, till "
"en sträng. Det senare kan vara särskilt användbart, till exempel för att "
"fånga utdata från en funktion som skrevs för att implementera ett "
"kommandoradsgränssnitt. Det rekommenderas endast för verktygsskript eftersom "
"det påverkar det globala tillståndet för :data:`sys.stdout`.  (Bidrag från "
"Raymond Hettinger i :issue:`15805`.)"

msgid ""
"The :mod:`contextlib` documentation has also been updated to include a :ref:"
"`discussion <single-use-reusable-and-reentrant-cms>` of the differences "
"between single use, reusable and reentrant context managers."
msgstr ""
"Dokumentationen :mod:`contextlib` har också uppdaterats med en :ref:"
"`discussion <single-use-reusable-and-reentrant-cms>` om skillnaderna mellan "
"single use, reusable och reentrant context managers."

msgid "dbm"
msgstr "dbm"

msgid ""
":func:`dbm.open` objects now support the context management protocol.  When "
"used in a :keyword:`with` statement, the ``close`` method of the database "
"object will be called automatically at the end of the block.  (Contributed "
"by Claudiu Popa and Nick Coghlan in :issue:`19282`.)"
msgstr ""
":func:`dbm.open`-objekt har nu stöd för kontexthanteringsprotokollet.  När "
"det används i en :keyword:`with`-sats kommer databasobjektets ``close``-"
"metod att anropas automatiskt i slutet av blocket.  (Bidrag från Claudiu "
"Popa och Nick Coghlan i :issue:`19282`.)"

msgid "dis"
msgstr "dis"

msgid ""
"Functions :func:`~dis.show_code`, :func:`~dis.dis`, :func:`~dis.distb`, and :"
"func:`~dis.disassemble` now accept a keyword-only *file* argument that "
"controls where they write their output."
msgstr ""
"Funktionerna :func:`~dis.show_code`, :func:`~dis.dis`, :func:`~dis.distb` "
"och :func:`~dis.disassemble` accepterar nu ett *file*-argument som endast "
"innehåller nyckelord och som styr var de skriver sina utdata."

msgid ""
"The :mod:`dis` module is now built around an :class:`~dis.Instruction` class "
"that provides object oriented access to the details of each individual "
"bytecode operation."
msgstr ""
"Modulen :mod:`dis` är nu uppbyggd kring en klass :class:`~dis.Instruction` "
"som ger objektorienterad tillgång till detaljerna i varje enskild bytecode-"
"operation."

msgid ""
"A new method, :func:`~dis.get_instructions`, provides an iterator that emits "
"the Instruction stream for a given piece of Python code.  Thus it is now "
"possible to write a program that inspects and manipulates a bytecode object "
"in ways different from those provided by the :mod:`~dis` module itself.  For "
"example::"
msgstr ""
"En ny metod, :func:`~dis.get_instructions`, tillhandahåller en iterator som "
"emitterar instruktionsflödet för en viss del av Python-koden.  Det är alltså "
"nu möjligt att skriva ett program som inspekterar och manipulerar ett "
"bytecode-objekt på andra sätt än de som tillhandahålls av :mod:`~dis`-"
"modulen själv.  Till exempel::"

msgid ""
">>> import dis\n"
">>> for instr in dis.get_instructions(lambda x: x + 1):\n"
"...     print(instr.opname)\n"
"LOAD_FAST\n"
"LOAD_CONST\n"
"BINARY_ADD\n"
"RETURN_VALUE"
msgstr ""
">>> import dis\n"
">>> for instr in dis.get_instructions(lambda x: x + 1):\n"
"...     print(instr.opname)\n"
"LOAD_FAST\n"
"LOAD_CONST\n"
"BINARY_ADD\n"
"RETURN_VALUE"

msgid ""
"The various display tools in the :mod:`dis` module have been rewritten to "
"use these new components."
msgstr ""
"De olika visningsverktygen i modulen :mod:`dis` har skrivits om för att "
"använda dessa nya komponenter."

msgid ""
"In addition, a new application-friendly class :class:`~dis.Bytecode` "
"provides an object-oriented API for inspecting bytecode in both in human-"
"readable form and for iterating over instructions.  The :class:`~dis."
"Bytecode` constructor takes the same arguments that :func:`~dis."
"get_instruction` does (plus an optional *current_offset*), and the resulting "
"object can be iterated to produce :class:`~dis.Instruction` objects.  But it "
"also has a :mod:`~dis.Bytecode.dis` method, equivalent to calling :mod:`~dis."
"dis` on the constructor argument, but returned as a multi-line string::"
msgstr ""
"Dessutom finns en ny applikationsvänlig klass :class:`~dis.Bytecode` som ger "
"ett objektorienterat API för att inspektera bytecode i både läsbar form och "
"för att iterera över instruktioner.  Konstruktorn :class:`~dis.Bytecode` tar "
"samma argument som :func:`~dis.get_instruction` gör (plus en valfri "
"*current_offset*), och det resulterande objektet kan itereras för att "
"producera :class:`~dis.Instruction`-objekt.  Men den har också en :mod:`~dis."
"Bytecode.dis`-metod, som motsvarar anropet :mod:`~dis.dis` på "
"konstruktörsargumentet, men returneras som en sträng med flera rader::"

msgid ""
">>> bytecode = dis.Bytecode(lambda x: x + 1, current_offset=3)\n"
">>> for instr in bytecode:\n"
"...     print('{} ({})'.format(instr.opname, instr.opcode))\n"
"LOAD_FAST (124)\n"
"LOAD_CONST (100)\n"
"BINARY_ADD (23)\n"
"RETURN_VALUE (83)\n"
">>> bytecode.dis().splitlines()\n"
"['  1           0 LOAD_FAST                0 (x)',\n"
" '      -->     3 LOAD_CONST               1 (1)',\n"
" '              6 BINARY_ADD',\n"
" '              7 RETURN_VALUE']"
msgstr ""
">>> bytecode = dis.Bytecode(lambda x: x + 1, current_offset=3)\n"
">>> för instr i bytecode:\n"
"... print('{} ({})'.format(instr.opname, instr.opcode))\n"
"LOAD_FAST (124)\n"
"LOAD_CONST (100)\n"
"BINÄR_ADD (23)\n"
"RETURN_VALUE (83)\n"
">>> bytecode.dis().splitlines()\n"
"[' 1 0 LOAD_FAST 0 (x)',\n"
" ' --> 3 LOAD_CONST 1 (1)',\n"
" ' 6 BINÄR_ADD',\n"
" ' 7 RETURN_VALUE']"

msgid ""
":class:`~dis.Bytecode` also has a class method, :meth:`~dis.Bytecode."
"from_traceback`, that provides the ability to manipulate a traceback (that "
"is, ``print(Bytecode.from_traceback(tb).dis())`` is equivalent to "
"``distb(tb)``)."
msgstr ""
":class:`~dis.Bytecode` har också en klassmetod, :meth:`~dis.Bytecode."
"from_traceback`, som ger möjlighet att manipulera en traceback (det vill "
"säga, ``print(Bytecode.from_traceback(tb).dis())`` är likvärdigt med "
"``distb(tb)``)."

msgid ""
"(Contributed by Nick Coghlan, Ryan Kelly and Thomas Kluyver in :issue:"
"`11816` and Claudiu Popa in :issue:`17916`.)"
msgstr ""
"(Bidrag från Nick Coghlan, Ryan Kelly och Thomas Kluyver i :issue:`11816` "
"och Claudiu Popa i :issue:`17916`.)"

msgid ""
"New function :func:`~dis.stack_effect` computes the effect on the Python "
"stack of a given opcode and argument, information that is not otherwise "
"available. (Contributed by Larry Hastings in :issue:`19722`.)"
msgstr ""
"Ny funktion :func:`~dis.stack_effect` beräknar effekten på Python-stacken av "
"en given opcode och argument, information som inte är tillgänglig på annat "
"sätt. (Bidrag från Larry Hastings i :issue:`19722`.)"

msgid "doctest"
msgstr "doktest"

msgid ""
"A new :ref:`option flag <doctest-options>`, :const:`~doctest.FAIL_FAST`, "
"halts test running as soon as the first failure is detected.  (Contributed "
"by R. David Murray and Daniel Urban in :issue:`16522`.)"
msgstr ""
"En ny :ref:`alternativflagga <doctest-options>`, :const:`~doctest."
"FAIL_FAST`, stoppar testkörningen så snart det första felet upptäcks.  "
"(Bidrag från R. David Murray och Daniel Urban i :issue:`16522`.)"

msgid ""
"The :mod:`doctest` command line interface now uses :mod:`argparse`, and has "
"two new options, ``-o`` and ``-f``.  ``-o`` allows :ref:`doctest options "
"<doctest-options>` to be specified on the command line, and ``-f`` is a "
"shorthand for ``-o FAIL_FAST`` (to parallel the similar option supported by "
"the :mod:`unittest` CLI).  (Contributed by R. David Murray in :issue:"
"`11390`.)"
msgstr ""
"Kommandoradsgränssnittet :mod:`doctest` använder nu :mod:`argparse` och har "
"två nya alternativ, ``-o`` och ``-f``.  med ``-o`` kan :ref:`doctest options "
"<doctest-options>` anges på kommandoraden, och ``-f`` är en förkortning för "
"``-o FAIL_FAST`` (för att motsvara det liknande alternativ som stöds av :mod:"
"`unittest` CLI).  (Bidrag från R. David Murray i :issue:`11390`.)"

msgid ""
":mod:`doctest` will now find doctests in extension module ``__doc__`` "
"strings. (Contributed by Zachary Ware in :issue:`3158`.)"
msgstr ""
":mod:`doctest` kommer nu att hitta doctests i tilläggsmodulen ``__doc__`` "
"strängar. (Bidrag från Zachary Ware i :issue:`3158`.)"

msgid "email"
msgstr "e-post"

msgid ""
":meth:`~email.message.Message.as_string` now accepts a *policy* argument to "
"override the default policy of the message when generating a string "
"representation of it.  This means that ``as_string`` can now be used in more "
"circumstances, instead of having to create and use a :mod:`~email.generator` "
"in order to pass formatting parameters to its ``flatten`` method.  "
"(Contributed by R. David Murray in :issue:`18600`.)"
msgstr ""
":meth:`~email.message.Message.as_string` accepterar nu ett *policy*-argument "
"för att åsidosätta standardpolicyn för meddelandet när en "
"strängrepresentation av det genereras.  Detta innebär att ``as_string`` nu "
"kan användas under fler omständigheter, istället för att behöva skapa och "
"använda en :mod:`~email.generator` för att skicka formateringsparametrar "
"till dess ``flatten``-metod.  (Bidrag från R. David Murray i :issue:`18600`.)"

msgid ""
"New method :meth:`~email.message.Message.as_bytes` added to produce a bytes "
"representation of the message in a fashion similar to how ``as_string`` "
"produces a string representation.  It does not accept the *maxheaderlen* "
"argument, but does accept the *unixfrom* and *policy* arguments. The :class:"
"`~email.message.Message` :meth:`~email.message.Message.__bytes__` method "
"calls it, meaning that ``bytes(mymsg)`` will now produce the intuitive "
"result:  a bytes object containing the fully formatted message.  "
"(Contributed by R. David Murray in :issue:`18600`.)"
msgstr ""
"Ny metod :meth:`~email.message.Message.as_bytes` tillagd för att producera "
"en bytesrepresentation av meddelandet på ett sätt som liknar hur "
"``as_string`` producerar en strängrepresentation.  Den accepterar inte "
"*maxheaderlen*-argumentet, men däremot *unixfrom*- och *policy*-argumenten. "
"Metoden :class:`~email.message.Message` :meth:`~email.message.Message."
"__bytes__` anropar den, vilket innebär att ``bytes(mymsg)`` nu kommer att ge "
"det intuitiva resultatet: ett bytesobjekt som innehåller det fullständigt "
"formaterade meddelandet.  (Bidrag från R. David Murray i :issue:`18600`.)"

msgid ""
"The :meth:`.Message.set_param` message now accepts a *replace* keyword "
"argument. When specified, the associated header will be updated without "
"changing its location in the list of headers.  For backward compatibility, "
"the default is ``False``.  (Contributed by R. David Murray in :issue:"
"`18891`.)"
msgstr ""
"Meddelandet :meth:`.Message.set_param` accepterar nu ett *replace* "
"nyckelordsargument. När det anges kommer den associerade rubriken att "
"uppdateras utan att ändra dess plats i listan över rubriker.  För "
"bakåtkompatibilitet är standardinställningen ``False``.  (Bidrag från R. "
"David Murray i :issue:`18891`.)"

msgid ""
"A pair of new subclasses of :class:`~email.message.Message` have been added "
"(:class:`.EmailMessage` and :class:`.MIMEPart`), along with a new sub-"
"module, :mod:`~email.contentmanager` and a new :mod:`~email.policy` "
"attribute :attr:`~email.policy.EmailPolicy.content_manager`.  All "
"documentation is currently in the new module, which is being added as part "
"of email's new :term:`provisional API`.  These classes provide a number of "
"new methods that make extracting content from and inserting content into "
"email messages much easier.  For details, see the :mod:`~email."
"contentmanager` documentation and the :ref:`email-examples`.  These API "
"additions complete the bulk of the work that was planned as part of the "
"email6 project.  The currently provisional API is scheduled to become final "
"in Python 3.5 (possibly with a few minor additions in the area of error "
"handling).  (Contributed by R. David Murray in :issue:`18891`.)"
msgstr ""
"Ett par nya underklasser till :class:`~email.message.Message` har lagts till "
"(:class:`.EmailMessage` och :class:`.MIMEPart`), tillsammans med en ny "
"undermodul, :mod:`~email.contentmanager` och ett nytt :mod:`~email.policy`-"
"attribut :attr:`~email.policy.EmailPolicy.content_manager`.  All "
"dokumentation finns för närvarande i den nya modulen, som läggs till som en "
"del av email:s nya :term:`provisional API`.  Dessa klasser tillhandahåller "
"ett antal nya metoder som gör det mycket enklare att extrahera innehåll från "
"och infoga innehåll i e-postmeddelanden.  För detaljer, se :mod:`~email."
"contentmanager` dokumentation och :ref:`email-examples`.  Dessa API-tillägg "
"fullbordar huvuddelen av det arbete som planerades som en del av email6-"
"projektet.  Det nuvarande provisoriska API:et är planerat att bli "
"slutgiltigt i Python 3.5 (eventuellt med några mindre tillägg inom området "
"felhantering).  (Bidrag från R. David Murray i :issue:`18891`.)"

msgid "filecmp"
msgstr "filecmp"

msgid ""
"A new :func:`~filecmp.clear_cache` function provides the ability to clear "
"the :mod:`filecmp` comparison cache, which uses :func:`os.stat` information "
"to determine if the file has changed since the last compare.  This can be "
"used, for example, if the file might have been changed and re-checked in "
"less time than the resolution of a particular filesystem's file modification "
"time field. (Contributed by Mark Levitt in :issue:`18149`.)"
msgstr ""
"En ny :func:`~filecmp.clear_cache`-funktion gör det möjligt att rensa :mod:"
"`filecmp`-jämförelsecachen, som använder :func:`os.stat`-information för att "
"avgöra om filen har ändrats sedan den senaste jämförelsen.  Detta kan till "
"exempel användas om filen kan ha ändrats och kontrollerats igen på kortare "
"tid än upplösningen av ett visst filsystems fält för filändringstid. (Bidrag "
"från Mark Levitt i :issue:`18149`.)"

msgid ""
"New module attribute :const:`~filecmp.DEFAULT_IGNORES` provides the list of "
"directories that are used as the default value for the *ignore* parameter of "
"the :func:`~filecmp.dircmp` function.  (Contributed by Eli Bendersky in :"
"issue:`15442`.)"
msgstr ""
"Det nya modulattributet :const:`~filecmp.DEFAULT_IGNORES` innehåller en "
"lista över kataloger som används som standardvärde för parametern *ignore* i "
"funktionen :func:`~filecmp.dircmp`.  (Bidrag från Eli Bendersky i :issue:"
"`15442`.)"

msgid "functools"
msgstr "functools"

msgid ""
"The new :func:`~functools.partialmethod` descriptor brings partial argument "
"application to descriptors, just as :func:`~functools.partial` provides for "
"normal callables. The new descriptor also makes it easier to get arbitrary "
"callables (including :func:`~functools.partial` instances) to behave like "
"normal instance methods when included in a class definition. (Contributed by "
"Alon Horev and Nick Coghlan in :issue:`4331`.)"
msgstr ""
"Den nya deskriptorn :func:`~functools.partialmethod` gör det möjligt att "
"använda partiella argument i deskriptorer, precis som :func:`~functools."
"partial` gör för vanliga anropsbara metoder. Den nya deskriptorn gör det "
"också lättare att få godtyckliga anropbara metoder (inklusive :func:"
"`~functools.partial`-instanser) att bete sig som normala instansmetoder när "
"de ingår i en klassdefinition. (Bidrag från Alon Horev och Nick Coghlan i :"
"issue:`4331`.)"

msgid ""
"The new :func:`~functools.singledispatch` decorator brings support for "
"single-dispatch generic functions to the Python standard library. Where "
"object oriented programming focuses on grouping multiple operations on a "
"common set of data into a class, a generic function focuses on grouping "
"multiple implementations of an operation that allows it to work with "
"*different* kinds of data."
msgstr ""
"Den nya :func:`~functools.singledispatch`-dekoratorn ger stöd för generiska "
"funktioner med enkel distribution till Pythons standardbibliotek. Där "
"objektorienterad programmering fokuserar på att gruppera flera operationer "
"på en gemensam uppsättning data i en klass, fokuserar en generisk funktion "
"på att gruppera flera implementeringar av en operation som gör att den kan "
"arbeta med *olika* typer av data."

msgid ":pep:`443` -- Single-dispatch generic functions"
msgstr ":pep:`443` -- Generiska funktioner för enstaka leverans"

msgid "PEP written and implemented by Łukasz Langa."
msgstr "PEP skrivet och genomfört av Łukasz Langa."

msgid ""
":func:`~functools.total_ordering` now supports a return value of :data:"
"`NotImplemented` from the underlying comparison function.  (Contributed by "
"Katie Miller in :issue:`10042`.)"
msgstr ""
":func:`~functools.total_ordering` stöder nu ett returvärde av :data:"
"`NotImplemented` från den underliggande jämförelsefunktionen.  (Bidrag från "
"Katie Miller i :issue:`10042`.)"

msgid ""
"A pure-python version of the :func:`~functools.partial` function is now in "
"the stdlib; in CPython it is overridden by the C accelerated version, but it "
"is available for other implementations to use.  (Contributed by Brian Thorne "
"in :issue:`12428`.)"
msgstr ""
"En ren Python-version av :func:`~functools.partial`-funktionen finns nu i "
"stdlib; i CPython åsidosätts den av den C-accelererade versionen, men den är "
"tillgänglig för andra implementationer att använda.  (Bidrag från Brian "
"Thorne i :issue:`12428`.)"

msgid "gc"
msgstr "gc"

msgid ""
"New function :func:`~gc.get_stats` returns a list of three per-generation "
"dictionaries containing the collections statistics since interpreter "
"startup. (Contributed by Antoine Pitrou in :issue:`16351`.)"
msgstr ""
"Den nya funktionen :func:`~gc.get_stats` returnerar en lista med tre lexikon "
"per generation som innehåller statistik över samlingar sedan tolken "
"startades. (Bidrag från Antoine Pitrou i :issue:`16351`.)"

msgid "glob"
msgstr "klot"

msgid ""
"A new function :func:`~glob.escape` provides a way to escape special "
"characters in a filename so that they do not become part of the globbing "
"expansion but are instead matched literally.  (Contributed by Serhiy "
"Storchaka in :issue:`8402`.)"
msgstr ""
"En ny funktion :func:`~glob.escape` ger ett sätt att undkomma specialtecken "
"i ett filnamn så att de inte blir en del av globbing-expansionen utan "
"istället matchas bokstavligen.  (Bidrag från Serhiy Storchaka i :issue:"
"`8402`.)"

msgid "hashlib"
msgstr "hashlib"

msgid ""
"A new :func:`hashlib.pbkdf2_hmac` function provides the `PKCS#5 password-"
"based key derivation function 2 <https://en.wikipedia.org/wiki/PBKDF2>`_.  "
"(Contributed by Christian Heimes in :issue:`18582`.)"
msgstr ""
"En ny :func:`hashlib.pbkdf2_hmac`-funktion tillhandahåller `PKCS#5 "
"lösenordsbaserad nyckeldrivningsfunktion 2 <https://en.wikipedia.org/wiki/"
"PBKDF2>`_.  (Bidrag från Christian Heimes i :issue:`18582`.)"

msgid ""
"The :attr:`~hashlib.hash.name` attribute of :mod:`hashlib` hash objects is "
"now a formally supported interface.  It has always existed in CPython's :mod:"
"`hashlib` (although it did not return lower case names for all supported "
"hashes), but it was not a public interface and so some other Python "
"implementations have not previously supported it.  (Contributed by Jason R. "
"Coombs in :issue:`18532`.)"
msgstr ""
"Attributet :attr:`~hashlib.hash.name` för :mod:`hashlib`-hashobjekt är nu "
"ett gränssnitt som stöds formellt.  Det har alltid funnits i CPythons :mod:"
"`hashlib` (även om det inte returnerade gemena namn för alla hashar som "
"stöds), men det var inte ett offentligt gränssnitt och därför har vissa "
"andra Python-implementationer inte tidigare stött det.  (Bidrag från Jason "
"R. Coombs i :issue:`18532`.)"

msgid "hmac"
msgstr "hmac"

msgid ""
":mod:`hmac` now accepts ``bytearray`` as well as ``bytes`` for the *key* "
"argument to the :func:`~hmac.new` function, and the *msg* parameter to both "
"the :func:`~hmac.new` function and the :meth:`~hmac.HMAC.update` method now "
"accepts any type supported by the :mod:`hashlib` module.  (Contributed by "
"Jonas Borgström in :issue:`18240`.)"
msgstr ""
":mod:`hmac` accepterar nu ``bytearray`` såväl som ``bytes`` för argumentet "
"*key* till funktionen :func:`~hmac.new`, och parametern *msg* till både "
"funktionen :func:`~hmac.new` och metoden :meth:`~hmac.HMAC.update` "
"accepterar nu alla typer som stöds av modulen :mod:`hashlib`.  (Bidrag från "
"Jonas Borgström i :issue:`18240`.)"

msgid ""
"The *digestmod* argument to the :func:`hmac.new` function may now be any "
"hash digest name recognized by :mod:`hashlib`.  In addition, the current "
"behavior in which the value of *digestmod* defaults to ``MD5`` is "
"deprecated: in a future version of Python there will be no default value.  "
"(Contributed by Christian Heimes in :issue:`17276`.)"
msgstr ""
"Argumentet *digestmod* till funktionen :func:`hmac.new` kan nu vara vilket "
"hash digest-namn som helst som känns igen av :mod:`hashlib`.  Dessutom är "
"det nuvarande beteendet där värdet på *digestmod* är standardvärdet ``MD5`` "
"föråldrat: i en framtida version av Python kommer det inte att finnas något "
"standardvärde.  (Bidrag från Christian Heimes i :issue:`17276`.)"

msgid ""
"With the addition of :attr:`~hmac.HMAC.block_size` and :attr:`~hmac.HMAC."
"name` attributes (and the formal documentation of the :attr:`~hmac.HMAC."
"digest_size` attribute), the :mod:`hmac` module now conforms fully to the :"
"pep:`247` API. (Contributed by Christian Heimes in :issue:`18775`.)"
msgstr ""
"Med tillägget av attributen :attr:`~hmac.HMAC.block_size` och :attr:`~hmac."
"HMAC.name` (och den formella dokumentationen av attributet :attr:`~hmac.HMAC."
"digest_size`), överensstämmer nu modulen :mod:`hmac` helt med API:t :pep:"
"`247`. (Bidrag från Christian Heimes i :issue:`18775`.)"

msgid "html"
msgstr "html"

msgid ""
"New function :func:`~html.unescape` function converts HTML5 character "
"references to the corresponding Unicode characters.  (Contributed by Ezio "
"Melotti in :issue:`2927`.)"
msgstr ""
"Ny funktion :func:`~html.unescape` konverterar HTML5-teckenreferenser till "
"motsvarande Unicode-tecken.  (Bidrag från Ezio Melotti i :issue:`2927`.)"

msgid ""
":class:`~html.parser.HTMLParser` accepts a new keyword argument "
"*convert_charrefs* that, when ``True``, automatically converts all character "
"references.  For backward-compatibility, its value defaults to ``False``, "
"but it will change to ``True`` in a future version of Python, so you are "
"invited to set it explicitly and update your code to use this new feature.  "
"(Contributed by Ezio Melotti in :issue:`13633`.)"
msgstr ""
":class:`~html.parser.HTMLParser` accepterar ett nytt nyckelordsargument "
"*convert_charrefs* som, när det är ``True``, automatiskt konverterar alla "
"teckenreferenser.  För bakåtkompatibilitet är dess värde som standard "
"``False``, men det kommer att ändras till ``True`` i en framtida version av "
"Python, så du uppmanas att ställa in det uttryckligen och uppdatera din kod "
"för att använda den här nya funktionen.  (Bidrag från Ezio Melotti i :issue:"
"`13633`.)"

msgid ""
"The *strict* argument of :class:`~html.parser.HTMLParser` is now deprecated. "
"(Contributed by Ezio Melotti in :issue:`15114`.)"
msgstr ""
"Argumentet *strict* i :class:`~html.parser.HTMLParser` är nu föråldrat. "
"(Bidrag från Ezio Melotti i :issue:`15114`.)"

msgid "http"
msgstr "http"

msgid ""
":meth:`~http.server.BaseHTTPRequestHandler.send_error` now accepts an "
"optional additional *explain* parameter which can be used to provide an "
"extended error description, overriding the hardcoded default if there is "
"one. This extended error description will be formatted using the :attr:"
"`~http.server.HTTP.error_message_format` attribute and sent as the body of "
"the error response.  (Contributed by Karl Cow in :issue:`12921`.)"
msgstr ""
":meth:`~http.server.BaseHTTPRequestHandler.send_error` accepterar nu en "
"valfri ytterligare *explain* parameter som kan användas för att ge en utökad "
"felbeskrivning, som åsidosätter den hårdkodade standardbeskrivningen om det "
"finns en sådan. Denna utökade felbeskrivning formateras med hjälp av "
"attributet :attr:`~http.server.HTTP.error_message_format` och skickas som "
"brödtext i felsvaret.  (Bidrag från Karl Cow i :issue:`12921`.)"

msgid ""
"The :mod:`http.server` :ref:`command line interface <http-server-cli>` now "
"has a ``-b/--bind`` option that causes the server to listen on a specific "
"address. (Contributed by Malte Swart in :issue:`17764`.)"
msgstr ""
":mod:`http.server` :ref:``kommandoradsgränssnitt <http-server-cli>`` har nu "
"ett ``-b/--bind``-alternativ som gör att servern lyssnar på en specifik "
"adress. (Bidrag från Malte Swart i :issue:`17764`.)"

msgid "idlelib and IDLE"
msgstr "idlelib och IDLE"

msgid ""
"Since idlelib implements the IDLE shell and editor and is not intended for "
"import by other programs, it gets improvements with every release. See :file:"
"`Lib/idlelib/NEWS.txt` for a cumulative list of changes since 3.3.0, as well "
"as changes made in future 3.4.x releases. This file is also available from "
"the IDLE :menuselection:`Help --> About IDLE` dialog."
msgstr ""
"Eftersom idlelib implementerar IDLE:s skal och redigerare och inte är avsett "
"att importeras av andra program, förbättras det för varje utgåva. Se :file:"
"`Lib/idlelib/NEWS.txt` för en kumulativ lista över ändringar sedan 3.3.0, "
"samt ändringar som görs i framtida 3.4.x utgåvor. Denna fil är också "
"tillgänglig från IDLE:s :menuselection:`Hjälp --> Om IDLE` dialogruta."

msgid "importlib"
msgstr "importlib"

msgid ""
"The :class:`~importlib.abc.InspectLoader` ABC defines a new method, :meth:"
"`~importlib.abc.InspectLoader.source_to_code` that accepts source data and a "
"path and returns a code object.  The default implementation is equivalent to "
"``compile(data, path, 'exec', dont_inherit=True)``. (Contributed by Eric "
"Snow and Brett Cannon in :issue:`15627`.)"
msgstr ""
"ABC:s :class:`~importlib.abc.InspectLoader` definierar en ny metod, :meth:"
"`~importlib.abc.InspectLoader.source_to_code` som accepterar källdata och en "
"sökväg och returnerar ett kodobjekt.  Standardimplementeringen är likvärdig "
"med ``compile(data, path, 'exec', dont_inherit=True)``. (Bidrag från Eric "
"Snow och Brett Cannon i :issue:`15627`.)"

msgid ""
":class:`~importlib.abc.InspectLoader` also now has a default implementation "
"for the :meth:`~importlib.abc.InspectLoader.get_code` method.  However, it "
"will normally be desirable to override the default implementation for "
"performance reasons.  (Contributed by Brett Cannon in :issue:`18072`.)"
msgstr ""
":class:`~importlib.abc.InspectLoader` har nu också en standardimplementation "
"för metoden :meth:`~importlib.abc.InspectLoader.get_code`.  Det kommer dock "
"normalt att vara önskvärt att åsidosätta standardimplementationen av "
"prestandaskäl.  (Bidrag från Brett Cannon i :issue:`18072`.)"

msgid ""
"The :func:`~importlib.reload` function has been moved from :mod:`!imp` to :"
"mod:`importlib` as part of the :mod:`!imp` module deprecation.  (Contributed "
"by Berker Peksag in :issue:`18193`.)"
msgstr ""
"Funktionen :func:`~importlib.reload` har flyttats från :mod:`!imp` till :mod:"
"`importlib` som en del av :mod:`!imp` modulen deprecation.  (Bidrag från "
"Berker Peksag i :issue:`18193`.)"

msgid ""
":mod:`importlib.util` now has a :const:`~importlib.util.MAGIC_NUMBER` "
"attribute providing access to the bytecode version number.  This replaces "
"the :func:`!get_magic` function in the deprecated :mod:`!imp` module. "
"(Contributed by Brett Cannon in :issue:`18192`.)"
msgstr ""
":mod:`importlib.util` har nu ett :const:`~importlib.util.MAGIC_NUMBER`-"
"attribut som ger tillgång till bytekodsversionsnumret.  Detta ersätter "
"funktionen :func:`!get_magic` i den utfasade modulen :mod:`!imp`. (Bidrag "
"från Brett Cannon i :issue:`18192`.)"

msgid ""
"New :mod:`importlib.util` functions :func:`~importlib.util."
"cache_from_source` and :func:`~importlib.util.source_from_cache` replace the "
"same-named functions in the deprecated :mod:`!imp` module.  (Contributed by "
"Brett Cannon in :issue:`18194`.)"
msgstr ""
"De nya funktionerna :mod:`importlib.util` :func:`~importlib.util."
"cache_from_source` och :func:`~importlib.util.source_from_cache` ersätter "
"funktionerna med samma namn i den föråldrade modulen :mod:`!imp`.  (Bidrag "
"från Brett Cannon i :issue:`18194`.)"

msgid ""
"The :mod:`importlib` bootstrap :class:`.NamespaceLoader` now conforms to "
"the :class:`.InspectLoader` ABC, which means that ``runpy`` and ``python -"
"m`` can now be used with namespace packages.  (Contributed by Brett Cannon "
"in :issue:`18058`.)"
msgstr ""
":mod:`importlib` bootstrap :class:`.NamespaceLoader` överensstämmer nu med :"
"class:`.InspectLoader` ABC, vilket innebär att ``runpy`` och ``python -m`` "
"nu kan användas med namespace-paket.  (Bidrag från Brett Cannon i :issue:"
"`18058`.)"

msgid ""
":mod:`importlib.util` has a new function :func:`~importlib.util."
"decode_source` that decodes source from bytes using universal newline "
"processing.  This is useful for implementing :meth:`.InspectLoader."
"get_source` methods."
msgstr ""
":mod:`importlib.util` har en ny funktion :func:`~importlib.util."
"decode_source` som avkodar källkod från bytes med hjälp av universal newline "
"processing.  Detta är användbart för att implementera :meth:`.InspectLoader."
"get_source`-metoder."

msgid ""
":class:`importlib.machinery.ExtensionFileLoader` now has a :meth:`~importlib."
"machinery.ExtensionFileLoader.get_filename` method.  This was inadvertently "
"omitted in the original implementation.  (Contributed by Eric Snow in :issue:"
"`19152`.)"
msgstr ""
":class:`importlib.machinery.ExtensionFileLoader` har nu en :meth:`~importlib."
"machinery.ExtensionFileLoader.get_filename`-metod.  Detta utelämnades "
"oavsiktligt i den ursprungliga implementationen.  (Bidrag från Eric Snow i :"
"issue:`19152`.)"

msgid "inspect"
msgstr "inspektera"

msgid ""
"The :mod:`inspect` module now offers a basic :ref:`command line interface "
"<inspect-module-cli>` to quickly display source code and other information "
"for modules, classes and functions.  (Contributed by Claudiu Popa and Nick "
"Coghlan in :issue:`18626`.)"
msgstr ""
"Modulen :mod:`inspect` erbjuder nu ett grundläggande :ref:"
"`kommandoradsgränssnitt <inspect-module-cli>` för att snabbt visa källkod "
"och annan information för moduler, klasser och funktioner.  (Bidrag från "
"Claudiu Popa och Nick Coghlan i :issue:`18626`.)"

msgid ""
":func:`~inspect.unwrap` makes it easy to unravel wrapper function chains "
"created by :func:`functools.wraps` (and any other API that sets the "
"``__wrapped__`` attribute on a wrapper function).  (Contributed by Daniel "
"Urban, Aaron Iles and Nick Coghlan in :issue:`13266`.)"
msgstr ""
":func:`~inspect.unwrap` gör det enkelt att lösa upp kedjor av "
"omslagsfunktioner som skapats av :func:`functools.wraps` (och alla andra API:"
"er som sätter attributet ``__wrapped__`` på en omslagsfunktion).  (Bidrag "
"från Daniel Urban, Aaron Iles och Nick Coghlan i :issue:`13266`.)"

msgid ""
"As part of the implementation of the new :mod:`enum` module, the :mod:"
"`inspect` module now has substantially better support for custom ``__dir__`` "
"methods and dynamic class attributes provided through metaclasses.  "
"(Contributed by Ethan Furman in :issue:`18929` and :issue:`19030`.)"
msgstr ""
"Som en del av implementeringen av den nya modulen :mod:`enum` har modulen :"
"mod:`inspect` nu betydligt bättre stöd för anpassade ``__dir__``-metoder och "
"dynamiska klassattribut som tillhandahålls genom metaklasser.  (Bidrag från "
"Ethan Furman i :issue:`18929` och :issue:`19030`.)"

msgid ""
":func:`~inspect.getfullargspec` and :func:`~inspect.getargspec` now use the :"
"func:`~inspect.signature` API. This allows them to support a much broader "
"range of callables, including those with ``__signature__`` attributes, those "
"with metadata provided by argument clinic, :func:`functools.partial` objects "
"and more. Note that, unlike :func:`~inspect.signature`, these functions "
"still ignore ``__wrapped__`` attributes, and report the already bound first "
"argument for bound methods, so it is still necessary to update your code to "
"use :func:`~inspect.signature` directly if those features are desired. "
"(Contributed by Yury Selivanov in :issue:`17481`.)"
msgstr ""
":func:`~inspect.getfullargspec` och :func:`~inspect.getargspec` använder nu "
"API:t :func:`~inspect.signature`. Detta gör att de kan stödja ett mycket "
"bredare utbud av anropbara objekt, inklusive de med ``__signature__``-"
"attribut, de med metadata som tillhandahålls av argumentklinik, :func:"
"`functools.partial`-objekt med mera. Observera att till skillnad från :func:"
"`~inspect.signature` ignorerar dessa funktioner fortfarande ``__wrapped__``-"
"attribut och rapporterar det redan bundna första argumentet för bundna "
"metoder, så det är fortfarande nödvändigt att uppdatera din kod för att "
"använda :func:`~inspect.signature` direkt om dessa funktioner önskas. "
"(Bidrag från Yury Selivanov i :issue:`17481`.)"

msgid ""
":func:`~inspect.signature` now supports duck types of CPython functions, "
"which adds support for functions compiled with Cython.  (Contributed by "
"Stefan Behnel and Yury Selivanov in :issue:`17159`.)"
msgstr ""
":func:`~inspect.signature` har nu stöd för CPython-funktioner av typen duck, "
"vilket ger stöd för funktioner kompilerade med Cython.  (Bidrag från Stefan "
"Behnel och Yury Selivanov i :issue:`17159`.)"

msgid "ipaddress"
msgstr "ipadress"

msgid ""
":mod:`ipaddress` was added to the standard library in Python 3.3 as a :term:"
"`provisional API`. With the release of Python 3.4, this qualification has "
"been removed: :mod:`ipaddress` is now considered a stable API, covered by "
"the normal standard library requirements to maintain backwards compatibility."
msgstr ""
":mod:`ipaddress` lades till i standardbiblioteket i Python 3.3 som ett :term:"
"`provisoriskt API`. Med lanseringen av Python 3.4 har denna kvalifikation "
"tagits bort: :mod:`ipaddress` betraktas nu som ett stabilt API, som omfattas "
"av de normala kraven för standardbiblioteket för att upprätthålla "
"bakåtkompatibilitet."

msgid ""
"A new :attr:`~ipaddress.IPv4Address.is_global` property is ``True`` if an "
"address is globally routeable.  (Contributed by Peter Moody in :issue:"
"`17400`.)"
msgstr ""
"En ny :attr:`~ipaddress.IPv4Address.is_global` egenskap är ``True`` om en "
"adress är globalt dirigerbar.  (Bidrag från Peter Moody i :issue:`17400`.)"

msgid "logging"
msgstr "loggning"

msgid ""
"The :class:`~logging.handlers.TimedRotatingFileHandler` has a new *atTime* "
"parameter that can be used to specify the time of day when rollover should "
"happen.  (Contributed by Ronald Oussoren in :issue:`9556`.)"
msgstr ""
":class:`~logging.handlers.TimedRotatingFileHandler` har en ny *atTime* "
"parameter som kan användas för att ange när på dygnet rollover ska ske.  "
"(Bidrag från Ronald Oussoren i :issue:`9556`.)"

msgid ""
":class:`~logging.handlers.SocketHandler` and :class:`~logging.handlers."
"DatagramHandler` now support Unix domain sockets (by setting *port* to "
"``None``).  (Contributed by Vinay Sajip in commit ce46195b56a9.)"
msgstr ""
":class:`~logging.handlers.SocketHandler` och :class:`~logging.handlers."
"DatagramHandler` har nu stöd för Unix domänuttag (genom att sätta *port* "
"till ``None``).  (Bidrag från Vinay Sajip i commit ce46195b56a9.)"

msgid ""
":func:`~logging.config.fileConfig` now accepts a :class:`configparser."
"RawConfigParser` subclass instance for the *fname* parameter.  This "
"facilitates using a configuration file when logging configuration is just a "
"part of the overall application configuration, or where the application "
"modifies the configuration before passing it to :func:`~logging.config."
"fileConfig`.  (Contributed by Vinay Sajip in :issue:`16110`.)"
msgstr ""
":func:`~logging.config.fileConfig` accepterar nu en underklassinstans av :"
"class:`configparser.RawConfigParser` för parametern *fname*.  Detta gör det "
"lättare att använda en konfigurationsfil när loggningskonfigurationen bara "
"är en del av den övergripande programkonfigurationen, eller när programmet "
"ändrar konfigurationen innan den skickas till :func:`~logging.config."
"fileConfig`.  (Bidrag från Vinay Sajip i :issue:`16110`.)"

msgid ""
"Logging configuration data received from a socket via the :func:`logging."
"config.listen` function can now be validated before being processed by "
"supplying a verification function as the argument to the new *verify* "
"keyword argument.  (Contributed by Vinay Sajip in :issue:`15452`.)"
msgstr ""
"Loggningskonfigurationsdata som tas emot från en socket via funktionen :func:"
"`logging.config.listen` kan nu valideras innan de bearbetas genom att ange "
"en verifieringsfunktion som argument till det nya nyckelordsargumentet "
"*verify*.  (Bidrag från Vinay Sajip i :issue:`15452`.)"

msgid "marshal"
msgstr "sheriff"

msgid ""
"The default :mod:`marshal` version has been bumped to 3.  The code "
"implementing the new version restores the Python2 behavior of recording only "
"one copy of interned strings and preserving the interning on "
"deserialization, and extends this \"one copy\" ability to any object type "
"(including handling recursive references).  This reduces both the size of ``."
"pyc`` files and the amount of memory a module occupies in memory when it is "
"loaded from a ``.pyc`` (or ``.pyo``) file.  (Contributed by Kristján Valur "
"Jónsson in :issue:`16475`, with additional speedups by Antoine Pitrou in :"
"issue:`19219`.)"
msgstr ""
"Standardversionen av :mod:`marshal` har ökats till 3. Koden som "
"implementerar den nya versionen återställer Python2-beteendet att endast "
"registrera en kopia av internerade strängar och bevara interneringen vid "
"deserialisering, och utökar denna \"en kopia\"-förmåga till alla objekttyper "
"(inklusive hantering av rekursiva referenser).  Detta minskar både storleken "
"på ``.pyc``-filer och mängden minne som en modul upptar i minnet när den "
"laddas från en ``.pyc`` (eller ``.pyo``) fil.  (Bidrag från Kristján Valur "
"Jónsson i :issue:`16475`, med ytterligare hastighetsökningar av Antoine "
"Pitrou i :issue:`19219`.)"

msgid "mmap"
msgstr "mmap"

msgid ""
"mmap objects are now :ref:`weakly referenceable <mod-weakref>`. (Contributed "
"by Valerie Lambert in :issue:`4885`.)"
msgstr ""
"mmap-objekt är nu :ref:`svagt refererbara <mod-weakref>`. (Bidrag från "
"Valerie Lambert i :issue:`4885`.)"

msgid "multiprocessing"
msgstr "multiprocessing"

msgid ""
"On Unix two new :ref:`start methods <multiprocessing-start-methods>`, "
"``spawn`` and ``forkserver``, have been added for starting processes using :"
"mod:`multiprocessing`.  These make the mixing of processes with threads more "
"robust, and the ``spawn`` method matches the semantics that multiprocessing "
"has always used on Windows.  New function :func:`~multiprocessing."
"get_all_start_methods` reports all start methods available on the platform, :"
"func:`~multiprocessing.get_start_method` reports the current start method, "
"and :func:`~multiprocessing.set_start_method` sets the start method.  "
"(Contributed by Richard Oudkerk in :issue:`8713`.)"
msgstr ""
"På Unix har två nya :ref:`startmetoder <multiprocessing-start-methods>`, "
"``spawn`` och ``forkserver``, lagts till för att starta processer som "
"använder :mod:`multiprocessing`.  Dessa gör blandningen av processer med "
"trådar mer robust, och metoden ``spawn`` matchar den semantik som "
"multiprocessing alltid har använt i Windows.  Ny funktion :func:"
"`~multiprocessing.get_all_start_methods` rapporterar alla startmetoder som "
"finns tillgängliga på plattformen, :func:`~multiprocessing.get_start_method` "
"rapporterar den aktuella startmetoden och :func:`~multiprocessing."
"set_start_method` ställer in startmetoden.  (Bidrag från Richard Oudkerk i :"
"issue:`8713`.)"

msgid ""
":mod:`multiprocessing` also now has the concept of a ``context``, which "
"determines how child processes are created.  New function :func:"
"`~multiprocessing.get_context` returns a context that uses a specified start "
"method.  It has the same API as the :mod:`multiprocessing` module itself, so "
"you can use it to create :class:`~multiprocessing.pool.Pool`\\ s and other "
"objects that will operate within that context.  This allows a framework and "
"an application or different parts of the same application to use "
"multiprocessing without interfering with each other.  (Contributed by "
"Richard Oudkerk in :issue:`18999`.)"
msgstr ""
":mod:`multiprocessing` har nu också konceptet ``context``, som avgör hur "
"barnprocesser skapas.  Ny funktion :func:`~multiprocessing.get_context` "
"returnerar ett sammanhang som använder en angiven startmetod.  Den har samma "
"API som själva modulen :mod:`multiprocessing`, så du kan använda den för att "
"skapa :class:`~multiprocessing.pool.Pool` och andra objekt som kommer att "
"fungera i det sammanhanget.  Detta gör att ett ramverk och en applikation "
"eller olika delar av samma applikation kan använda multiprocessing utan att "
"störa varandra.  (Bidrag från Richard Oudkerk i :issue:`18999`.)"

msgid ""
"Except when using the old *fork* start method, child processes no longer "
"inherit unneeded handles/file descriptors from their parents (part of :issue:"
"`8713`)."
msgstr ""
"Förutom när den gamla startmetoden *fork* används, ärver inte längre "
"barnprocesser onödiga handtag/filbeskrivare från sina föräldrar (del av :"
"issue:`8713`)."

msgid ""
":mod:`multiprocessing` now relies on :mod:`runpy` (which implements the ``-"
"m`` switch) to initialise ``__main__`` appropriately in child processes when "
"using the ``spawn`` or ``forkserver`` start methods. This resolves some edge "
"cases where combining multiprocessing, the ``-m`` command line switch, and "
"explicit relative imports could cause obscure failures in child processes.  "
"(Contributed by Nick Coghlan in :issue:`19946`.)"
msgstr ""
":mod:`multiprocessing` förlitar sig nu på :mod:`runpy` (som implementerar ``-"
"m``-omkopplaren) för att initiera ``__main__`` på rätt sätt i underordnade "
"processer när startmetoderna ``spawn`` eller ``forkserver`` används. Detta "
"löser några kantfall där kombinationen av multiprocessing, kommandoradsbytet "
"``-m`` och explicit relativ import kunde orsaka obskyra fel i underordnade "
"processer.  (Bidrag från Nick Coghlan i :issue:`19946`.)"

msgid "operator"
msgstr "operator"

msgid ""
"New function :func:`~operator.length_hint` provides an implementation of the "
"specification for how the :meth:`~object.__length_hint__` special method "
"should be used, as part of the :pep:`424` formal specification of this "
"language feature.  (Contributed by Armin Ronacher in :issue:`16148`.)"
msgstr ""
"Den nya funktionen :func:`~operator.length_hint` ger en implementation av "
"specifikationen för hur specialmetoden :meth:`~object.__length_hint__` skall "
"användas, som en del av den formella specifikationen :pep:`424` för denna "
"språkfunktion.  (Bidrag från Armin Ronacher i :issue:`16148`.)"

msgid ""
"There is now a pure-python version of the :mod:`operator` module available "
"for reference and for use by alternate implementations of Python.  "
"(Contributed by Zachary Ware in :issue:`16694`.)"
msgstr ""
"Det finns nu en ren Python-version av modulen :mod:`operator` tillgänglig "
"för referens och för användning av alternativa implementationer av Python.  "
"(Bidrag från Zachary Ware i :issue:`16694`.)"

msgid "os"
msgstr "os"

msgid ""
"There are new functions to get and set the :ref:`inheritable flag "
"<fd_inheritance>` of a file descriptor (:func:`os.get_inheritable`, :func:"
"`os.set_inheritable`) or a Windows handle (:func:`os."
"get_handle_inheritable`, :func:`os.set_handle_inheritable`)."
msgstr ""
"Det finns nya funktioner för att hämta och ställa in :ref:`inheritable flag "
"<fd_inheritance>` för en filbeskrivning (:func:`os.get_inheritable`, :func:"
"`os.set_inheritable`) eller ett Windows-handtag (:func:`os."
"get_handle_inheritable`, :func:`os.set_handle_inheritable`)."

msgid ""
"New function :func:`~os.cpu_count` reports the number of CPUs available on "
"the platform on which Python is running (or ``None`` if the count can't be "
"determined).  The :func:`multiprocessing.cpu_count` function is now "
"implemented in terms of this function).  (Contributed by Trent Nelson, "
"Yogesh Chaudhari, Victor Stinner, and Charles-François Natali in :issue:"
"`17914`.)"
msgstr ""
"Den nya funktionen :func:`~os.cpu_count` rapporterar antalet tillgängliga "
"processorer på plattformen som Python körs på (eller ``None`` om antalet "
"inte kan bestämmas).  Funktionen :func:`multiprocessing.cpu_count` är nu "
"implementerad i termer av denna funktion).  (Bidrag från Trent Nelson, "
"Yogesh Chaudhari, Victor Stinner och Charles-François Natali i :issue:"
"`17914`.)"

msgid ""
":func:`os.path.samestat` is now available on the Windows platform (and the :"
"func:`os.path.samefile` implementation is now shared between Unix and "
"Windows).  (Contributed by Brian Curtin in :issue:`11939`.)"
msgstr ""
":func:`os.path.samestat` är nu tillgänglig på Windows-plattformen (och :func:"
"`os.path.samefile`-implementationen delas nu mellan Unix och Windows).  "
"(Bidrag från Brian Curtin i :issue:`11939`.)"

msgid ""
":func:`os.path.ismount` now recognizes volumes mounted below a drive root on "
"Windows.  (Contributed by Tim Golden in :issue:`9035`.)"
msgstr ""
":func:`os.path.ismount` känner nu igen volymer som är monterade under en "
"enhetsrot i Windows.  (Bidrag från Tim Golden i :issue:`9035`.)"

msgid ""
":func:`os.open` supports two new flags on platforms that provide them, :"
"const:`~os.O_PATH` (un-opened file descriptor), and :const:`~os.O_TMPFILE` "
"(unnamed temporary file; as of 3.4.0 release available only on Linux systems "
"with a kernel version of 3.11 or newer that have uapi headers).  "
"(Contributed by Christian Heimes in :issue:`18673` and Benjamin Peterson, "
"respectively.)"
msgstr ""
":func:`os.open` stöder två nya flaggor på plattformar som tillhandahåller "
"dem, :const:`~os.O_PATH` (oöppnad filbeskrivare) och :const:`~os.O_TMPFILE` "
"(namnlös temporär fil; från och med version 3.4.0 endast tillgänglig på "
"Linux-system med en kärnversion av 3.11 eller nyare som har uapi-headers).  "
"(Bidrag från Christian Heimes i :issue:`18673` respektive Benjamin Peterson.)"

msgid "pdb"
msgstr "pdb"

msgid ""
":mod:`pdb` has been enhanced to handle generators, :keyword:`yield`, and "
"``yield from`` in a more useful fashion.  This is especially helpful when "
"debugging :mod:`asyncio` based programs.  (Contributed by Andrew Svetlov and "
"Xavier de Gaye in :issue:`16596`.)"
msgstr ""
":mod:`pdb` har förbättrats för att hantera generatorer, :keyword:`yield` och "
"``yield from`` på ett mer användbart sätt.  Detta är särskilt användbart vid "
"felsökning av :mod:`asyncio`-baserade program.  (Bidrag från Andrew Svetlov "
"och Xavier de Gaye i :issue:`16596`.)"

msgid ""
"The ``print`` command has been removed from :mod:`pdb`, restoring access to "
"the Python :func:`print` function from the pdb command line.  Python2's "
"``pdb`` did not have a ``print`` command; instead, entering ``print`` "
"executed the ``print`` statement.  In Python3 ``print`` was mistakenly made "
"an alias for the pdb :pdbcmd:`p` command.  ``p``, however, prints the "
"``repr`` of its argument, not the ``str`` like the Python2 ``print`` command "
"did.  Worse, the Python3 ``pdb print`` command shadowed the Python3 "
"``print`` function, making it inaccessible at the ``pdb`` prompt.  "
"(Contributed by Connor Osborn in :issue:`18764`.)"
msgstr ""
"Kommandot ``print`` har tagits bort från :mod:`pdb`, vilket återställer "
"åtkomsten till Python :func:`print`-funktionen från pdb-kommandoraden.  "
"Python2:s ``pdb`` hade inget ``print``-kommando, utan när man skrev "
"``print`` utfördes ``print``-satsen.  I Python3 gjordes ``print`` av misstag "
"till ett alias för kommandot pdb :pdbcmd:`p`.  ``p`` skriver dock ut "
"``repr`` av sitt argument, inte ``str`` som kommandot ``print`` i Python2 "
"gjorde.  Än värre var att Python3-kommandot ``pdb print`` skuggade Python3-"
"funktionen ``print``, vilket gjorde den otillgänglig vid ``pdb``-prompten. "
"(Bidrag från Connor Osborn i :issue:`18764`.)"

msgid "pickle"
msgstr "gurka"

msgid ""
":mod:`pickle` now supports (but does not use by default) a new pickle "
"protocol, protocol 4.  This new protocol addresses a number of issues that "
"were present in previous protocols, such as the serialization of nested "
"classes, very large strings and containers, and classes whose :meth:"
"`__new__` method takes keyword-only arguments.  It also provides some "
"efficiency improvements."
msgstr ""
":mod:`pickle` har nu stöd för (men använder inte som standard) ett nytt "
"pickle-protokoll, protokoll 4.  Detta nya protokoll tar upp ett antal "
"problem som fanns i tidigare protokoll, t.ex. serialisering av nästlade "
"klasser, mycket stora strängar och behållare samt klasser vars :meth:"
"`__new__`-metod endast tar nyckelordsargument.  Det ger också vissa "
"effektivitetsförbättringar."

msgid ":pep:`3154` -- Pickle protocol 4"
msgstr ":pep:`3154` -- Pickle protokoll 4"

msgid "PEP written by Antoine Pitrou and implemented by Alexandre Vassalotti."
msgstr ""
"PEP skriven av Antoine Pitrou och implementerad av Alexandre Vassalotti."

msgid "plistlib"
msgstr "plistlib"

msgid ""
":mod:`plistlib` now has an API that is similar to the standard pattern for "
"stdlib serialization protocols, with new :func:`~plistlib.load`, :func:"
"`~plistlib.dump`, :func:`~plistlib.loads`, and :func:`~plistlib.dumps` "
"functions.  (The older API is now deprecated.)  In addition to the already "
"supported XML plist format (:const:`~plistlib.FMT_XML`), it also now "
"supports the binary plist format (:const:`~plistlib.FMT_BINARY`).  "
"(Contributed by Ronald Oussoren and others in :issue:`14455`.)"
msgstr ""
":mod:`plistlib` har nu ett API som liknar standardmönstret för stdlib-"
"serialiseringsprotokoll, med nya funktioner :func:`~plistlib.load`, :func:"
"`~plistlib.dump`, :func:`~plistlib.loads` och :func:`~plistlib.dumps`.  (Det "
"äldre API:et är nu föråldrat.) Förutom det redan stödda XML-plistformatet (:"
"const:`~plistlib.FMT_XML`), stöds nu även det binära plistformatet (:const:"
"`~plistlib.FMT_BINARY`).  (Bidrag från Ronald Oussoren och andra i :issue:"
"`14455`.)"

msgid "poplib"
msgstr "poplib"

msgid ""
"Two new methods have been added to :mod:`poplib`: :meth:`~poplib.POP3.capa`, "
"which returns the list of capabilities advertised by the POP server, and :"
"meth:`~poplib.POP3.stls`, which switches a clear-text POP3 session into an "
"encrypted POP3 session if the POP server supports it.  (Contributed by "
"Lorenzo Catucci in :issue:`4473`.)"
msgstr ""
"Två nya metoder har lagts till i :mod:`poplib`: :meth:`~poplib.POP3.capa`, "
"som returnerar listan över funktioner som annonseras av POP-servern, och :"
"meth:`~poplib.POP3.stls`, som växlar en POP3-session i klartext till en "
"krypterad POP3-session om POP-servern stöder det.  (Bidrag från Lorenzo "
"Catucci i :issue:`4473`.)"

msgid "pprint"
msgstr "tryck"

msgid ""
"The :mod:`pprint` module's :class:`~pprint.PrettyPrinter` class and its :"
"func:`~pprint.pformat`, and :func:`~pprint.pprint` functions have a new "
"option, *compact*, that controls how the output is formatted.  Currently "
"setting *compact* to ``True`` means that sequences will be printed with as "
"many sequence elements as will fit within *width* on each (indented) line. "
"(Contributed by Serhiy Storchaka in :issue:`19132`.)"
msgstr ""
"Modulen :mod:`pprint`:s klass :class:`~pprint.PrettyPrinter` och dess "
"funktioner :func:`~pprint.pformat` och :func:`~pprint.pprint` har ett nytt "
"alternativ, *compact*, som styr hur utdata formateras.  Om *compact* för "
"närvarande sätts till ``True`` innebär det att sekvenser skrivs ut med så "
"många sekvenselement som ryms inom *bredd* på varje (indragen) rad. (Bidrag "
"från Serhiy Storchaka i :issue:`19132`.)"

msgid ""
"Long strings are now wrapped using Python's normal line continuation "
"syntax.  (Contributed by Antoine Pitrou in :issue:`17150`.)"
msgstr ""
"Långa strängar omsluts nu med Pythons normala syntax för radfortsättning.  "
"(Bidrag från Antoine Pitrou i :issue:`17150`.)"

msgid "pty"
msgstr "pty"

msgid ""
":func:`pty.spawn` now returns the status value from :func:`os.waitpid` on "
"the child process, instead of ``None``.  (Contributed by Gregory P. Smith.)"
msgstr ""
":func:`pty.spawn` returnerar nu statusvärdet från :func:`os.waitpid` på "
"barnprocessen, istället för ``None``.  (Bidrag från Gregory P. Smith.)"

msgid "pydoc"
msgstr "pydoc"

msgid ""
"The :mod:`pydoc` module is now based directly on the :func:`inspect."
"signature` introspection API, allowing it to provide signature information "
"for a wider variety of callable objects. This change also means that "
"``__wrapped__`` attributes are now taken into account when displaying help "
"information. (Contributed by Larry Hastings in :issue:`19674`.)"
msgstr ""
"Modulen :mod:`pydoc` är nu baserad direkt på introspektions-API:t :func:"
"`inspect.signature`, vilket gör att den kan tillhandahålla "
"signaturinformation för ett större antal anropsbara objekt. Den här "
"ändringen innebär också att ``__wrapped__``-attribut nu tas med i "
"beräkningen när hjälpinformation visas. (Bidrag från Larry Hastings i :issue:"
"`19674`.)"

msgid ""
"The :mod:`pydoc` module no longer displays the ``self`` parameter for "
"already bound methods. Instead, it aims to always display the exact current "
"signature of the supplied callable.  (Contributed by Larry Hastings in :"
"issue:`20710`.)"
msgstr ""
"Modulen :mod:`pydoc` visar inte längre parametern ``self`` för redan bundna "
"metoder. Istället strävar den efter att alltid visa den exakta aktuella "
"signaturen för den medföljande anropbara koden.  (Bidrag från Larry Hastings "
"i :issue:`20710`.)"

msgid ""
"In addition to the changes that have been made to :mod:`pydoc` directly, its "
"handling of custom ``__dir__`` methods and various descriptor behaviours has "
"also been improved substantially by the underlying changes in the :mod:"
"`inspect` module."
msgstr ""
"Förutom de ändringar som har gjorts i :mod:`pydoc` direkt, har dess "
"hantering av anpassade ``__dir__``-metoder och olika beskrivningsbeteenden "
"också förbättrats avsevärt genom de underliggande ändringarna i modulen :mod:"
"`inspect`."

msgid ""
"As the :func:`help` builtin is based on :mod:`pydoc`, the above changes also "
"affect the behaviour of :func:`help`."
msgstr ""
"Eftersom inbyggda :func:`help` baseras på :mod:`pydoc`, påverkar ovanstående "
"ändringar även beteendet hos :func:`help`."

msgid "re"
msgstr "re"

msgid ""
"New :func:`~re.fullmatch` function and :meth:`.regex.fullmatch` method "
"anchor the pattern at both ends of the string to match.  This provides a way "
"to be explicit about the goal of the match, which avoids a class of subtle "
"bugs where ``$`` characters get lost during code changes or the addition of "
"alternatives to an existing regular expression.  (Contributed by Matthew "
"Barnett in :issue:`16203`.)"
msgstr ""
"Nya :func:`~re.fullmatch`-funktionen och :meth:`.regex.fullmatch`-metoden "
"förankrar mönstret i båda ändarna av den sträng som ska matchas.  Detta ger "
"ett sätt att vara explicit om målet med matchningen, vilket undviker en "
"klass av subtila buggar där ``$``-tecken går förlorade under kodändringar "
"eller tillägg av alternativ till ett befintligt reguljärt uttryck.  (Bidrag "
"från Matthew Barnett i :issue:`16203`.)"

msgid ""
"The repr of :ref:`regex objects <re-objects>` now includes the pattern and "
"the flags; the repr of :ref:`match objects <match-objects>` now includes the "
"start, end, and the part of the string that matched.  (Contributed by Hugo "
"Lopes Tavares and Serhiy Storchaka in :issue:`13592` and :issue:`17087`.)"
msgstr ""
"Återgivningen av :ref:`regex objects <re-objects>` innehåller nu mönstret "
"och flaggorna; återgivningen av :ref:`match objects <match-objects>` "
"innehåller nu början, slutet och den del av strängen som matchade.  (Bidrag "
"från Hugo Lopes Tavares och Serhiy Storchaka i :issue:`13592` och :issue:"
"`17087`.)"

msgid "resource"
msgstr "resurs"

msgid ""
"New :func:`~resource.prlimit` function, available on Linux platforms with a "
"kernel version of 2.6.36 or later and glibc of 2.13 or later, provides the "
"ability to query or set the resource limits for processes other than the one "
"making the call.  (Contributed by Christian Heimes in :issue:`16595`.)"
msgstr ""
"Den nya funktionen :func:`~resource.prlimit`, tillgänglig på Linux-"
"plattformar med en kärnversion av 2.6.36 eller senare och glibc av 2.13 "
"eller senare, ger möjlighet att fråga efter eller ställa in resursgränser "
"för andra processer än den som gör anropet.  (Bidrag från Christian Heimes "
"i :issue:`16595`.)"

msgid ""
"On Linux kernel version 2.6.36 or later, there are also some new Linux "
"specific constants: :const:`~resource.RLIMIT_MSGQUEUE`, :const:`~resource."
"RLIMIT_NICE`, :const:`~resource.RLIMIT_RTPRIO`, :const:`~resource."
"RLIMIT_RTTIME`, and :const:`~resource.RLIMIT_SIGPENDING`. (Contributed by "
"Christian Heimes in :issue:`19324`.)"
msgstr ""
"I Linux-kärnan version 2.6.36 eller senare finns det också några nya Linux-"
"specifika konstanter: :const:`~resource.RLIMIT_MSGQUEUE`, :const:`~resource."
"RLIMIT_NICE`, :const:`~resource.RLIMIT_RTPRIO`, :const:`~resource."
"RLIMIT_RTTIME` och :const:`~resource.RLIMIT_SIGPENDING`. (Bidrag från "
"Christian Heimes i :issue:`19324`.)"

msgid ""
"On FreeBSD version 9 and later, there some new FreeBSD specific constants: :"
"const:`~resource.RLIMIT_SBSIZE`, :const:`~resource.RLIMIT_SWAP`, and :const:"
"`~resource.RLIMIT_NPTS`.  (Contributed by Claudiu Popa in :issue:`19343`.)"
msgstr ""
"På FreeBSD version 9 och senare finns det några nya FreeBSD-specifika "
"konstanter: :const:`~resource.RLIMIT_SBSIZE`, :const:`~resource."
"RLIMIT_SWAP`, och :const:`~resource.RLIMIT_NPTS`.  (Bidrag från Claudiu Popa "
"i :issue:`19343`.)"

msgid "select"
msgstr "välj"

msgid ""
":class:`~select.epoll` objects now support the context management protocol. "
"When used in a :keyword:`with` statement, the :meth:`~select.epoll.close` "
"method will be called automatically at the end of the block.  (Contributed "
"by Serhiy Storchaka in :issue:`16488`.)"
msgstr ""
":class:`~select.epoll`-objekt har nu stöd för kontexthanteringsprotokollet. "
"När det används i en :keyword:`with`-sats kommer :meth:`~select.epoll.close`-"
"metoden att anropas automatiskt i slutet av blocket.  (Bidrag från Serhiy "
"Storchaka i :issue:`16488`.)"

msgid ""
":class:`~select.devpoll` objects now have :meth:`~select.devpoll.fileno` "
"and :meth:`~select.devpoll.close` methods, as well as a new attribute :attr:"
"`~select.devpoll.closed`.  (Contributed by Victor Stinner in :issue:`18794`.)"
msgstr ""
":class:`~select.devpoll`-objekt har nu metoderna :meth:`~select.devpoll."
"fileno` och :meth:`~select.devpoll.close`, samt ett nytt attribut :attr:"
"`~select.devpoll.closed`.  (Bidrag från Victor Stinner i :issue:`18794`.)"

msgid "shelve"
msgstr "hylla"

msgid ""
":class:`~shelve.Shelf` instances may now be used in :keyword:`with` "
"statements, and will be automatically closed at the end of the :keyword:`!"
"with` block. (Contributed by Filip Gruszczyński in :issue:`13896`.)"
msgstr ""
":class:`~shelve.Shelf`-instanser kan nu användas i :keyword:`with`-satser, "
"och kommer automatiskt att stängas i slutet av :keyword:`!with`-blocket. "
"(Bidrag från Filip Gruszczyński i :issue:`13896`.)"

msgid "shutil"
msgstr "shutil"

msgid ""
":func:`~shutil.copyfile` now raises a specific :exc:`~shutil.Error` "
"subclass, :exc:`~shutil.SameFileError`, when the source and destination are "
"the same file, which allows an application to take appropriate action on "
"this specific error.  (Contributed by Atsuo Ishimoto and Hynek Schlawack in :"
"issue:`1492704`.)"
msgstr ""
":func:`~shutil.copyfile` ger nu upphov till en specifik :exc:`~shutil.Error`-"
"underklass, :exc:`~shutil.SameFileError`, när källan och destinationen är "
"samma fil, vilket gör det möjligt för ett program att vidta lämpliga "
"åtgärder vid detta specifika fel.  (Bidrag från Atsuo Ishimoto och Hynek "
"Schlawack i :issue:`1492704`.)"

msgid "smtpd"
msgstr "smtpd"

msgid ""
"The :class:`!SMTPServer` and :class:`!SMTPChannel` classes now accept a "
"*map* keyword argument which, if specified, is passed in to :class:`!"
"asynchat.async_chat` as its *map* argument.  This allows an application to "
"avoid affecting the global socket map.  (Contributed by Vinay Sajip in :"
"issue:`11959`.)"
msgstr ""
"Klasserna :class:`!SMTPServer` och :class:`!SMTPChannel` accepterar nu ett "
"*map* nyckelordsargument som, om det anges, skickas in till :class:`!"
"asynchat.async_chat` som dess *map* argument.  Detta gör att ett program kan "
"undvika att påverka den globala socketkartan.  (Bidrag från Vinay Sajip i :"
"issue:`11959`.)"

msgid "smtplib"
msgstr "smtplib"

msgid ""
":exc:`~smtplib.SMTPException` is now a subclass of :exc:`OSError`, which "
"allows both socket level errors and SMTP protocol level errors to be caught "
"in one try/except statement by code that only cares whether or not an error "
"occurred. (Contributed by Ned Jackson Lovely in :issue:`2118`.)"
msgstr ""
":exc:`~smtplib.SMTPException` är nu en underklass till :exc:`OSError`, "
"vilket gör att både fel på socketnivå och fel på SMTP-protokollnivå kan "
"fångas upp i en try/except-sats av kod som bara bryr sig om huruvida ett fel "
"inträffade eller inte. (Bidrag från Ned Jackson Lovely i :issue:`2118`.)"

msgid "socket"
msgstr "kortplats"

msgid ""
"The socket module now supports the :const:`~socket.CAN_BCM` protocol on "
"platforms that support it.  (Contributed by Brian Thorne in :issue:`15359`.)"
msgstr ""
"Socket-modulen stöder nu :const:`~socket.CAN_BCM`-protokollet på plattformar "
"som stöder det.  (Bidrag från Brian Thorne i :issue:`15359`.)"

msgid ""
"Socket objects have new methods to get or set their :ref:`inheritable flag "
"<fd_inheritance>`, :meth:`~socket.socket.get_inheritable` and :meth:`~socket."
"socket.set_inheritable`."
msgstr ""
"Socket-objekt har nya metoder för att hämta eller ställa in sin :ref:"
"`inheritable flag <fd_inheritance>`, :meth:`~socket.socket.get_inheritable` "
"och :meth:`~socket.socket.set_inheritable`."

msgid ""
"The ``socket.AF_*`` and ``socket.SOCK_*`` constants are now enumeration "
"values using the new :mod:`enum` module.  This allows meaningful names to be "
"printed during debugging, instead of integer \"magic numbers\"."
msgstr ""
"Konstanterna ``socket.AF_*`` och ``socket.SOCK_*`` är nu uppräkningsvärden "
"med hjälp av den nya modulen :mod:`enum`.  Detta gör att meningsfulla namn "
"kan skrivas ut under felsökning, istället för \"magiska siffror\" i heltal."

msgid "The :const:`~socket.AF_LINK` constant is now available on BSD and OSX."
msgstr "Konstanten :const:`~socket.AF_LINK` är nu tillgänglig på BSD och OSX."

msgid ""
":func:`~socket.inet_pton` and :func:`~socket.inet_ntop` are now supported on "
"Windows.  (Contributed by Atsuo Ishimoto in :issue:`7171`.)"
msgstr ""
":func:`~socket.inet_pton` och :func:`~socket.inet_ntop` stöds nu i Windows.  "
"(Bidrag från Atsuo Ishimoto i :issue:`7171`.)"

msgid "sqlite3"
msgstr "sqlite3"

msgid ""
"A new boolean parameter to the :func:`~sqlite3.connect` function, *uri*, can "
"be used to indicate that the *database* parameter is a ``uri`` (see the "
"`SQLite URI documentation <https://www.sqlite.org/uri.html>`_).  "
"(Contributed by poq in :issue:`13773`.)"
msgstr ""
"En ny boolesk parameter till funktionen :func:`~sqlite3.connect`, *uri*, kan "
"användas för att indikera att parametern *database* är en ``uri`` (se "
"`SQLite URI documentation <https://www.sqlite.org/uri.html>`_).  (Bidrag "
"från poq i :issue:`13773`.)"

msgid "ssl"
msgstr "ssl"

msgid ""
":data:`~ssl.PROTOCOL_TLSv1_1` and :data:`~ssl.PROTOCOL_TLSv1_2` (TLSv1.1 and "
"TLSv1.2 support) have been added; support for these protocols is only "
"available if Python is linked with OpenSSL 1.0.1 or later.  (Contributed by "
"Michele Orrù and Antoine Pitrou in :issue:`16692`.)"
msgstr ""
":data:`~ssl.PROTOCOL_TLSv1_1` och :data:`~ssl.PROTOCOL_TLSv1_2` (stöd för "
"TLSv1.1 och TLSv1.2) har lagts till; stöd för dessa protokoll är endast "
"tillgängligt om Python är länkat med OpenSSL 1.0.1 eller senare.  (Bidrag "
"från Michele Orrù och Antoine Pitrou i :issue:`16692`.)"

msgid ""
"New function :func:`~ssl.create_default_context` provides a standard way to "
"obtain an :class:`~ssl.SSLContext` whose settings are intended to be a "
"reasonable balance between compatibility and security.  These settings are "
"more stringent than the defaults provided by the :class:`~ssl.SSLContext` "
"constructor, and may be adjusted in the future, without prior deprecation, "
"if best-practice security requirements change.  The new recommended best "
"practice for using stdlib libraries that support SSL is to use :func:`~ssl."
"create_default_context` to obtain an :class:`~ssl.SSLContext` object, modify "
"it if needed, and then pass it as the *context* argument of the appropriate "
"stdlib API.  (Contributed by Christian Heimes in :issue:`19689`.)"
msgstr ""
"Den nya funktionen :func:`~ssl.create_default_context` tillhandahåller ett "
"standardiserat sätt att erhålla en :class:`~ssl.SSLContext` vars "
"inställningar är avsedda att vara en rimlig balans mellan kompatibilitet och "
"säkerhet.  Dessa inställningar är strängare än de standardinställningar som "
"tillhandahålls av :class:`~ssl.SSLContext`-konstruktören och kan justeras i "
"framtiden, utan föregående avskrivning, om säkerhetskraven för bästa praxis "
"ändras.  Den nya rekommenderade bästa praxis för att använda stdlib-"
"bibliotek som stöder SSL är att använda :func:`~ssl.create_default_context` "
"för att erhålla ett :class:`~ssl.SSLContext`-objekt, modifiera det vid behov "
"och sedan skicka det som *context*-argumentet för lämpligt stdlib-API.  "
"(Bidrag från Christian Heimes i :issue:`19689`.)"

msgid ""
":class:`~ssl.SSLContext` method :meth:`~ssl.SSLContext."
"load_verify_locations` accepts a new optional argument *cadata*, which can "
"be used to provide PEM or DER encoded certificates directly via strings or "
"bytes, respectively. (Contributed by Christian Heimes in :issue:`18138`.)"
msgstr ""
":class:`~ssl.SSLContext` method :meth:`~ssl.SSLContext."
"load_verify_locations` accepterar ett nytt valfritt argument *cadata*, som "
"kan användas för att tillhandahålla PEM- eller DER-kodade certifikat direkt "
"via strängar respektive bytes. (Bidrag från Christian Heimes i :issue:"
"`18138`.)"

msgid ""
"New function :func:`~ssl.get_default_verify_paths` returns a named tuple of "
"the paths and environment variables that the :meth:`~ssl.SSLContext."
"set_default_verify_paths` method uses to set OpenSSL's default ``cafile`` "
"and ``capath``.  This can be an aid in debugging default verification "
"issues.  (Contributed by Christian Heimes in :issue:`18143`.)"
msgstr ""
"Den nya funktionen :func:`~ssl.get_default_verify_paths` returnerar en "
"namngiven tupel av de sökvägar och miljövariabler som metoden :meth:`~ssl."
"SSLContext.set_default_verify_paths` använder för att ställa in OpenSSL:s "
"standard ``cafile`` och ``capath``.  Detta kan vara till hjälp vid "
"felsökning av problem med standardverifiering.  (Bidrag från Christian "
"Heimes i :issue:`18143`.)"

msgid ""
":class:`~ssl.SSLContext` has a new method, :meth:`~ssl.SSLContext."
"cert_store_stats`, that reports the number of loaded ``X.509`` certs, "
"``X.509 CA`` certs, and certificate revocation lists (``crl``\\ s), as well "
"as a :meth:`~ssl.SSLContext.get_ca_certs` method that returns a list of the "
"loaded ``CA`` certificates.  (Contributed by Christian Heimes in :issue:"
"`18147`.)"
msgstr ""
":class:`~ssl.SSLContext` har en ny metod, :meth:`~ssl.SSLContext."
"cert_store_stats`, som rapporterar antalet laddade ``X.509``-certifikat, "
"``X.509 CA``-certifikat och listor över återkallade certifikat (``crl``), "
"samt en metod :meth:`~ssl.SSLContext.get_ca_certs` som returnerar en lista "
"över laddade ``CA``-certifikat.  (Bidrag från Christian Heimes i :issue:"
"`18147`.)"

msgid ""
"If OpenSSL 0.9.8 or later is available, :class:`~ssl.SSLContext` has a new "
"attribute :attr:`~ssl.SSLContext.verify_flags` that can be used to control "
"the certificate verification process by setting it to some combination of "
"the new constants :const:`~ssl.VERIFY_DEFAULT`, :const:`~ssl."
"VERIFY_CRL_CHECK_LEAF`, :const:`~ssl.VERIFY_CRL_CHECK_CHAIN`, or :const:"
"`~ssl.VERIFY_X509_STRICT`. OpenSSL does not do any CRL verification by "
"default.  (Contributed by Christien Heimes in :issue:`8813`.)"
msgstr ""
"Om OpenSSL 0.9.8 eller senare är tillgängligt har :class:`~ssl.SSLContext` "
"ett nytt attribut :attr:`~ssl.SSLContext.verify_flags` som kan användas för "
"att styra certifikatverifieringsprocessen genom att ställa in det på en "
"kombination av de nya konstanterna :const:`~ssl.VERIFY_DEFAULT`, :const:"
"`~ssl.VERIFY_CRL_CHECK_LEAF`, :const:`~ssl.VERIFY_CRL_CHECK_CHAIN`, eller :"
"const:`~ssl.VERIFY_X509_STRICT`. OpenSSL gör inte någon CRL-verifiering som "
"standard.  (Bidrag från Christien Heimes i :issue:`8813`.)"

msgid ""
"New :class:`~ssl.SSLContext` method :meth:`~ssl.SSLContext."
"load_default_certs` loads a set of default \"certificate authority\" (CA) "
"certificates from default locations, which vary according to the platform.  "
"It can be used to load both TLS web server authentication certificates "
"(``purpose=``:data:`~ssl.Purpose.SERVER_AUTH`) for a client to use to verify "
"a server, and certificates for a server to use in verifying client "
"certificates (``purpose=``:data:`~ssl.Purpose.CLIENT_AUTH`).  (Contributed "
"by Christian Heimes in :issue:`19292`.)"
msgstr ""
"Ny :class:`~ssl.SSLContext`-metod :meth:`~ssl.SSLContext.load_default_certs` "
"laddar en uppsättning standardcertifikat för \"certifikatutfärdare\" (CA) "
"från standardplatser, som varierar beroende på plattform.  Det kan användas "
"för att ladda både TLS-certifikat för webbserverautentisering (``purpose=``:"
"data:`~ssl.Purpose.SERVER_AUTH`) som en klient kan använda för att verifiera "
"en server och certifikat som en server kan använda för att verifiera "
"klientcertifikat (``purpose=``:data:`~ssl.Purpose.CLIENT_AUTH`).  (Bidrag "
"från Christian Heimes i :issue:`19292`.)"

msgid ""
"Two new windows-only functions, :func:`~ssl.enum_certificates` and :func:"
"`~ssl.enum_crls` provide the ability to retrieve certificates, certificate "
"information, and CRLs from the Windows cert store.  (Contributed by "
"Christian Heimes in :issue:`17134`.)"
msgstr ""
"Två nya funktioner som endast finns i Windows, :func:`~ssl."
"enum_certificates` och :func:`~ssl.enum_crls`, gör det möjligt att hämta "
"certifikat, certifikatinformation och CRL:er från Windows certifikatarkiv.  "
"(Bidrag från Christian Heimes i :issue:`17134`.)"

msgid ""
"Support for server-side SNI (Server Name Indication) using the new :meth:"
"`ssl.SSLContext.set_servername_callback` method. (Contributed by Daniel "
"Black in :issue:`8109`.)"
msgstr ""
"Stöd för SNI (Server Name Indication) på serversidan med hjälp av den nya "
"metoden :meth:`ssl.SSLContext.set_servername_callback`. (Bidrag från Daniel "
"Black i :issue:`8109`.)"

msgid ""
"The dictionary returned by :meth:`.SSLSocket.getpeercert` contains "
"additional ``X509v3`` extension items: ``crlDistributionPoints``, "
"``calIssuers``, and ``OCSP`` URIs.  (Contributed by Christian Heimes in :"
"issue:`18379`.)"
msgstr ""
"Den ordbok som returneras av :meth:`.SSLSocket.getpeercert` innehåller "
"ytterligare ``X509v3`` tilläggsobjekt: ``crlDistributionPoints``, "
"``calIssuers`` och ``OCSP`` URI:er.  (Bidrag från Christian Heimes i :issue:"
"`18379`.)"

msgid "stat"
msgstr "stat"

msgid ""
"The :mod:`stat` module is now backed by a C implementation in :mod:`!_stat`. "
"A C implementation is required as most of the values aren't standardized and "
"are platform-dependent.  (Contributed by Christian Heimes in :issue:`11016`.)"
msgstr ""
"Modulen :mod:`stat` backas nu upp av en C-implementation i :mod:`!_stat`. En "
"C-implementering krävs eftersom de flesta värden inte är standardiserade och "
"är plattformsberoende.  (Bidrag från Christian Heimes i :issue:`11016`.)"

msgid ""
"The module supports new :mod:`~stat.ST_MODE` flags, :mod:`~stat.S_IFDOOR`, :"
"const:`~stat.S_IFPORT`, and :const:`~stat.S_IFWHT`.  (Contributed by "
"Christian Hiemes in :issue:`11016`.)"
msgstr ""
"Modulen stöder de nya flaggorna :mod:`~stat.ST_MODE`, :mod:`~stat."
"S_IFDOOR`, :const:`~stat.S_IFPORT` och :const:`~stat.S_IFWHT`.  (Bidrag från "
"Christian Hiemes i :issue:`11016`.)"

msgid "struct"
msgstr "struktur"

msgid ""
"New function :mod:`~struct.iter_unpack` and a new :meth:`struct.Struct."
"iter_unpack` method on compiled formats provide streamed unpacking of a "
"buffer containing repeated instances of a given format of data. (Contributed "
"by Antoine Pitrou in :issue:`17804`.)"
msgstr ""
"Ny funktion :mod:`~struct.iter_unpack` och en ny :meth:`struct.Struct."
"iter_unpack`-metod för kompilerade format ger strömmad uppackning av en "
"buffert som innehåller upprepade instanser av ett visst dataformat. (Bidrag "
"från Antoine Pitrou i :issue:`17804`.)"

msgid "subprocess"
msgstr "delprocess"

msgid ""
":func:`~subprocess.check_output` now accepts an *input* argument that can be "
"used to provide the contents of ``stdin`` for the command that is run. "
"(Contributed by Zack Weinberg in :issue:`16624`.)"
msgstr ""
":func:`~subprocess.check_output` accepterar nu ett *input*-argument som kan "
"användas för att ange innehållet i ``stdin`` för det kommando som körs. "
"(Bidrag från Zack Weinberg i :issue:`16624`.)"

msgid ""
":func:`~subprocess.getstatus` and :func:`~subprocess.getstatusoutput` now "
"work on Windows.  This change was actually inadvertently made in 3.3.4. "
"(Contributed by Tim Golden in :issue:`10197`.)"
msgstr ""
":func:`~subprocess.getstatus` och :func:`~subprocess.getstatusoutput` "
"fungerar nu på Windows.  Denna ändring gjordes faktiskt oavsiktligt i 3.3.4. "
"(Bidrag från Tim Golden i :issue:`10197`.)"

msgid "sunau"
msgstr "sunau"

msgid ""
"The :meth:`!getparams` method now returns a namedtuple rather than a plain "
"tuple.  (Contributed by Claudiu Popa in :issue:`18901`.)"
msgstr ""
"Metoden :meth:`!getparams` returnerar nu en namngiven tupel istället för en "
"vanlig tupel.  (Bidrag från Claudiu Popa i :issue:`18901`.)"

msgid ""
":meth:`!sunau.open` now supports the context management protocol: when used "
"in a :keyword:`with` block, the ``close`` method of the returned object will "
"be called automatically at the end of the block.  (Contributed by Serhiy "
"Storchaka in :issue:`18878`.)"
msgstr ""
":meth:`!sunau.open` stöder nu kontexthanteringsprotokollet: när det används "
"i ett :keyword:`with` block, kommer ``close`` metoden för det returnerade "
"objektet att anropas automatiskt i slutet av blocket.  (Bidrag från Serhiy "
"Storchaka i :issue:`18878`.)"

msgid ""
":meth:`.AU_write.setsampwidth` now supports 24 bit samples, thus adding "
"support for writing 24 sample using the module.  (Contributed by Serhiy "
"Storchaka in :issue:`19261`.)"
msgstr ""
":meth:`.AU_write.setsampwidth` stöder nu 24 bitars samplingar, vilket ger "
"stöd för att skriva 24 samplingar med modulen.  (Bidrag från Serhiy "
"Storchaka i :issue:`19261`.)"

msgid "sys"
msgstr "system"

msgid ""
"New function :func:`sys.getallocatedblocks` returns the current number of "
"blocks allocated by the interpreter.  (In CPython with the default ``--with-"
"pymalloc`` setting, this is allocations made through the :c:func:"
"`PyObject_Malloc` API.)  This can be useful for tracking memory leaks, "
"especially if automated via a test suite.  (Contributed by Antoine Pitrou "
"in :issue:`13390`.)"
msgstr ""
"Den nya funktionen :func:`sys.getallocatedblocks` returnerar det aktuella "
"antalet block som tolken har allokerat.  (I CPython med "
"standardinställningen ``--with-pymalloc`` är detta allokeringar som görs via "
"API:et :c:func:`PyObject_Malloc`)  Detta kan vara användbart för att spåra "
"minnesläckor, speciellt om det är automatiserat via en testsvit. (Bidrag "
"från Antoine Pitrou i :issue:`13390`.)"

msgid ""
"When the Python interpreter starts in :ref:`interactive mode <tut-"
"interactive>`, it checks for an :data:`~sys.__interactivehook__` attribute "
"on the :mod:`sys` module.  If the attribute exists, its value is called with "
"no arguments just before interactive mode is started.  The check is made "
"after the :envvar:`PYTHONSTARTUP` file is read, so it can be set there.  "
"The :mod:`site` module :ref:`sets it <rlcompleter-config>` to a function "
"that enables tab completion and history saving (in :file:`~/.python-"
"history`) if the platform supports :mod:`readline`.  If you do not want this "
"(new) behavior, you can override it in :envvar:`PYTHONSTARTUP`, :mod:"
"`sitecustomize`, or :mod:`usercustomize` by deleting this attribute from :"
"mod:`sys` (or setting it to some other callable).  (Contributed by Éric "
"Araujo and Antoine Pitrou in :issue:`5845`.)"
msgstr ""
"När Python-tolken startar i :ref:`interaktivt läge <tut-interactive>`, "
"kontrollerar den om det finns ett :data:`~sys.__interactivehook__`-attribut "
"i :mod:`sys`-modulen.  Om attributet finns anropas dess värde utan argument "
"precis innan det interaktiva läget startas.  Kontrollen görs efter att "
"filen :envvar:`PYTHONSTARTUP` har lästs, så det kan ställas in där.  "
"Modulen :mod:`site` :ref:`sets it <rlcompleter-config>` till en funktion som "
"möjliggör tabbkomplettering och historiksparande (i :file:`~/.python-"
"history`) om plattformen stöder :mod:`readline`.  Om du inte vill ha det här "
"(nya) beteendet kan du åsidosätta det i :envvar:`PYTHONSTARTUP`, :mod:"
"`sitecustomize` eller :mod:`usercustomize` genom att ta bort det här "
"attributet från :mod:`sys` (eller ställa in det på någon annan callable).  "
"(Bidrag från Éric Araujo och Antoine Pitrou i :issue:`5845`.)"

msgid "tarfile"
msgstr "tarfil"

msgid ""
"The :mod:`tarfile` module now supports a simple :ref:`tarfile-commandline` "
"when called as a script directly or via ``-m``.  This can be used to create "
"and extract tarfile archives.  (Contributed by Berker Peksag in :issue:"
"`13477`.)"
msgstr ""
"Modulen :mod:`tarfile` har nu stöd för en enkel :ref:`tarfile-commandline` "
"när den anropas som ett skript direkt eller via ``-m``.  Detta kan användas "
"för att skapa och extrahera tarfile-arkiv.  (Bidrag från Berker Peksag i :"
"issue:`13477`.)"

msgid "textwrap"
msgstr "textbrytning"

msgid ""
"The :class:`~textwrap.TextWrapper` class has two new attributes/constructor "
"arguments: :attr:`~textwrap.TextWrapper.max_lines`, which limits the number "
"of lines in the output, and :attr:`~textwrap.TextWrapper.placeholder`, which "
"is a string that will appear at the end of the output if it has been "
"truncated because of *max_lines*.  Building on these capabilities, a new "
"convenience function :func:`~textwrap.shorten` collapses all of the "
"whitespace in the input to single spaces and produces a single line of a "
"given *width* that ends with the *placeholder* (by default, ``[...]``).  "
"(Contributed by Antoine Pitrou and Serhiy Storchaka in :issue:`18585` and :"
"issue:`18725`.)"
msgstr ""
"Klassen :class:`~textwrap.TextWrapper` har två nya attribut/"
"konstruktörsargument: :attr:`~textwrap.TextWrapper.max_lines`, som begränsar "
"antalet rader i utdata, och :attr:`~textwrap.TextWrapper.placeholder`, som "
"är en sträng som kommer att visas i slutet av utdata om den har avkortats på "
"grund av *max_lines*.  En ny bekvämlighetsfunktion :func:`~textwrap.shorten` "
"bygger vidare på dessa möjligheter och komprimerar alla blanksteg i indata "
"till enstaka blanksteg och producerar en enda rad med en given *bredd* som "
"slutar med *platshållaren* (som standard ``[...]``).  (Bidrag från Antoine "
"Pitrou och Serhiy Storchaka i :issue:`18585` och :issue:`18725`.)"

msgid "threading"
msgstr "gängning"

msgid ""
"The :class:`~threading.Thread` object representing the main thread can be "
"obtained from the new :func:`~threading.main_thread` function.  In normal "
"conditions this will be the thread from which the Python interpreter was "
"started.  (Contributed by Andrew Svetlov in :issue:`18882`.)"
msgstr ""
"Objektet :class:`~threading.Thread` som representerar huvudtråden kan "
"erhållas från den nya funktionen :func:`~threading.main_thread`.  Under "
"normala förhållanden kommer detta att vara den tråd från vilken Python-"
"tolken startades.  (Bidrag från Andrew Svetlov i :issue:`18882`.)"

msgid "traceback"
msgstr "spårning"

msgid ""
"A new :func:`traceback.clear_frames` function takes a traceback object and "
"clears the local variables in all of the frames it references, reducing the "
"amount of memory consumed.  (Contributed by Andrew Kuchling in :issue:"
"`1565525`.)"
msgstr ""
"En ny :func:`traceback.clear_frames`-funktion tar ett traceback-objekt och "
"rensar de lokala variablerna i alla de frames som den refererar till, vilket "
"minskar mängden minne som förbrukas.  (Bidrag från Andrew Kuchling i :issue:"
"`1565525`.)"

msgid "types"
msgstr "typer"

msgid ""
"A new :func:`~types.DynamicClassAttribute` descriptor provides a way to "
"define an attribute that acts normally when looked up through an instance "
"object, but which is routed to the *class* ``__getattr__`` when looked up "
"through the class.  This allows one to have properties active on a class, "
"and have virtual attributes on the class with the same name (see :mod:`Enum` "
"for an example). (Contributed by Ethan Furman in :issue:`19030`.)"
msgstr ""
"En ny :func:`~types.DynamicClassAttribute`-deskriptor ger möjlighet att "
"definiera ett attribut som fungerar normalt när det söks upp via ett "
"instansobjekt, men som dirigeras till *klassen* ``__getattr__`` när det söks "
"upp via klassen.  Detta gör att man kan ha egenskaper som är aktiva på en "
"klass och ha virtuella attribut på klassen med samma namn (se :mod:`Enum` "
"för ett exempel). (Bidrag från Ethan Furman i :issue:`19030`.)"

msgid "urllib"
msgstr "urllib"

msgid ""
":mod:`urllib.request` now supports ``data:`` URLs via the :class:`~urllib."
"request.DataHandler` class.  (Contributed by Mathias Panzenböck in :issue:"
"`16423`.)"
msgstr ""
":mod:`urllib.request` stöder nu ``data:`` URL:er via :class:`~urllib.request."
"DataHandler`-klassen.  (Bidrag från Mathias Panzenböck i :issue:`16423`.)"

msgid ""
"The http method that will be used by a :class:`~urllib.request.Request` "
"class can now be specified by setting a :class:`~urllib.request.Request."
"method` class attribute on the subclass.  (Contributed by Jason R Coombs in :"
"issue:`18978`.)"
msgstr ""
"Den http-metod som kommer att användas av en :class:`~urllib.request."
"Request`-klass kan nu specificeras genom att ange ett :class:`~urllib."
"request.Request.method`-klassattribut på underklassen.  (Bidrag från Jason R "
"Coombs i :issue:`18978`.)"

msgid ""
":class:`~urllib.request.Request` objects are now reusable: if the :attr:"
"`~urllib.request.Request.full_url` or :attr:`~urllib.request.Request.data` "
"attributes are modified, all relevant internal properties are updated.  This "
"means, for example, that it is now possible to use the same :class:`~urllib."
"request.Request` object in more than one :meth:`.OpenerDirector.open` call "
"with different *data* arguments, or to modify a :class:`~urllib.request."
"Request`\\ 's ``url`` rather than recomputing it from scratch.  There is "
"also a new :meth:`~urllib.request.Request.remove_header` method that can be "
"used to remove headers from a :class:`~urllib.request.Request`.  "
"(Contributed by Alexey Kachayev in :issue:`16464`, Daniel Wozniak in :issue:"
"`17485`, and Damien Brecht and Senthil Kumaran in :issue:`17272`.)"
msgstr ""
":class:`~urllib.request.Request`-objekt är nu återanvändbara: om attributen :"
"attr:`~urllib.request.Request.full_url` eller :attr:`~urllib.request.Request."
"data` ändras, uppdateras alla relevanta interna egenskaper.  Detta innebär t."
"ex. att det nu är möjligt att använda samma :class:`~urllib.request.request`-"
"objekt i mer än ett :meth:`.OpenerDirector.open`-anrop med olika *data*-"
"argument, eller att modifiera en :class:`~urllib.request.request`'s ``url`` "
"i stället för att beräkna den från början.  Det finns också en ny :meth:"
"`~urllib.request.Request.remove_header`-metod som kan användas för att ta "
"bort headers från en :class:`~urllib.request.Request`.  (Bidrag från Alexey "
"Kachayev i :issue:`16464`, Daniel Wozniak i :issue:`17485`, och Damien "
"Brecht och Senthil Kumaran i :issue:`17272`.)"

msgid ""
":class:`~urllib.error.HTTPError` objects now have a :attr:`~urllib.error."
"HTTPError.headers` attribute that provides access to the HTTP response "
"headers associated with the error.  (Contributed by Berker Peksag in :issue:"
"`15701`.)"
msgstr ""
":class:`~urllib.error.HTTPError`-objekt har nu ett :attr:`~urllib.error."
"HTTPError.headers`-attribut som ger tillgång till de HTTP-svarshuvuden som "
"är associerade med felet.  (Bidrag från Berker Peksag i :issue:`15701`.)"

msgid "unittest"
msgstr "unittest"

msgid ""
"The :class:`~unittest.TestCase` class has a new method, :meth:`~unittest."
"TestCase.subTest`, that produces a context manager whose :keyword:`with` "
"block becomes a \"sub-test\".  This context manager allows a test method to "
"dynamically generate subtests  by, say, calling the ``subTest`` context "
"manager inside a loop.  A single test method can thereby produce an "
"indefinite number of separately identified and separately counted tests, all "
"of which will run even if one or more of them fail.  For example::"
msgstr ""
"Klassen :class:`~unittest.TestCase` har en ny metod, :meth:`~unittest."
"TestCase.subTest`, som producerar en kontexthanterare vars :keyword:`with`-"
"block blir ett \"sub-test\".  Denna kontexthanterare gör det möjligt för en "
"testmetod att dynamiskt generera undertest genom att t.ex. anropa "
"kontexthanteraren ``subTest`` i en loop.  En enda testmetod kan därmed "
"producera ett obegränsat antal separat identifierade och separat räknade "
"tester, som alla kommer att köras även om ett eller flera av dem "
"misslyckas.  Till exempel::"

msgid ""
"class NumbersTest(unittest.TestCase):\n"
"    def test_even(self):\n"
"        for i in range(6):\n"
"            with self.subTest(i=i):\n"
"                self.assertEqual(i % 2, 0)"
msgstr ""
"klass NumbersTest(unittest.TestCase):\n"
"    def test_even(self):\n"
"        för i i intervall(6):\n"
"            med self.subTest(i=i):\n"
"                self.assertEqual(i % 2, 0)"

msgid ""
"will result in six subtests, each identified in the unittest verbose output "
"with a label consisting of the variable name ``i`` and a particular value "
"for that variable (``i=0``, ``i=1``, etc).  See :ref:`subtests` for the full "
"version of this example.  (Contributed by Antoine Pitrou in :issue:`16997`.)"
msgstr ""
"kommer att resultera i sex deltester, var och en identifierad i unittest "
"verbose-utdata med en etikett som består av variabelnamnet ``i`` och ett "
"visst värde för den variabeln (``i=0``, ``i=1``, etc).  Se :ref:`subtests` "
"för den fullständiga versionen av detta exempel.  (Bidrag från Antoine "
"Pitrou i :issue:`16997`.)"

msgid ""
":func:`unittest.main` now accepts an iterable of test names for "
"*defaultTest*, where previously it only accepted a single test name as a "
"string.  (Contributed by Jyrki Pulliainen in :issue:`15132`.)"
msgstr ""
":func:`unittest.main` accepterar nu en iterabel av testnamn för "
"*defaultTest*, där den tidigare endast accepterade ett enda testnamn som en "
"sträng.  (Bidrag från Jyrki Pulliainen i :issue:`15132`.)"

msgid ""
"If :class:`~unittest.SkipTest` is raised during test discovery (that is, at "
"the module level in the test file), it is now reported as a skip instead of "
"an error.  (Contributed by Zach Ware in :issue:`16935`.)"
msgstr ""
"Om :class:`~unittest.SkipTest` aktiveras under testupptäckt (dvs. på "
"modulnivå i testfilen), rapporteras det nu som en skip istället för ett "
"fel.  (Bidrag från Zach Ware i :issue:`16935`.)"

msgid ""
":meth:`~unittest.TestLoader.discover` now sorts the discovered files to "
"provide consistent test ordering.  (Contributed by Martin Melin and Jeff "
"Ramnani in :issue:`16709`.)"
msgstr ""
":meth:`~unittest.TestLoader.discover` sorterar nu de upptäckta filerna för "
"att ge konsekvent testordning.  (Bidrag från Martin Melin och Jeff Ramnani "
"i :issue:`16709`.)"

msgid ""
":class:`~unittest.TestSuite` now drops references to tests as soon as the "
"test has been run, if the test is successful.  On Python interpreters that "
"do garbage collection, this allows the tests to be garbage collected if "
"nothing else is holding a reference to the test.  It is possible to override "
"this behavior by creating a :class:`~unittest.TestSuite` subclass that "
"defines a custom ``_removeTestAtIndex`` method.  (Contributed by Tom "
"Wardill, Matt McClure, and Andrew Svetlov in :issue:`11798`.)"
msgstr ""
":class:`~unittest.TestSuite` släpper nu referenser till tester så snart "
"testet har körts, om testet är framgångsrikt.  På Python-tolkar som gör "
"garbage collection, gör detta att testerna kan garbage collectas om inget "
"annat har en referens till testet.  Det är möjligt att åsidosätta detta "
"beteende genom att skapa en :class:`~unittest.TestSuite`-underklass som "
"definierar en anpassad ``_removeTestAtIndex``-metod.  (Bidrag från Tom "
"Wardill, Matt McClure och Andrew Svetlov i :issue:`11798`.)"

msgid ""
"A new test assertion context-manager, :meth:`~unittest.TestCase.assertLogs`, "
"will ensure that a given block of code emits a log message using the :mod:"
"`logging` module.  By default the message can come from any logger and have "
"a priority of ``INFO`` or higher, but both the logger name and an "
"alternative minimum logging level may be specified.  The object returned by "
"the context manager can be queried for the :class:`~logging.LogRecord`\\ s "
"and/or formatted messages that were logged.  (Contributed by Antoine Pitrou "
"in :issue:`18937`.)"
msgstr ""
"En ny kontexthanterare för testpåståenden, :meth:`~unittest.TestCase."
"assertLogs`, säkerställer att ett visst kodblock skickar ett loggmeddelande "
"med modulen :mod:`logging`.  Som standard kan meddelandet komma från vilken "
"logger som helst och ha en prioritet på ``INFO`` eller högre, men både "
"loggarens namn och en alternativ lägsta loggningsnivå kan anges.  Objektet "
"som returneras av kontexthanteraren kan efterfrågas för :class:`~logging."
"LogRecord` s och/eller formaterade meddelanden som loggades. (Bidrag från "
"Antoine Pitrou i :issue:`18937`.)"

msgid ""
"Test discovery now works with namespace packages (Contributed by Claudiu "
"Popa in :issue:`17457`.)"
msgstr ""
"Test discovery fungerar nu med namespace-paket (Bidrag från Claudiu Popa i :"
"issue:`17457`.)"

msgid ""
":mod:`unittest.mock` objects now inspect their specification signatures when "
"matching calls, which means an argument can now be matched by either "
"position or name, instead of only by position.  (Contributed by Antoine "
"Pitrou in :issue:`17015`.)"
msgstr ""
":mod:`unittest.mock`-objekt inspekterar nu sina specifikationssignaturer när "
"de matchar anrop, vilket innebär att ett argument nu kan matchas med "
"antingen position eller namn, istället för bara med position.  (Bidrag från "
"Antoine Pitrou i :issue:`17015`.)"

msgid ""
":func:`~mock.mock_open` objects now have ``readline`` and ``readlines`` "
"methods.  (Contributed by Toshio Kuratomi in :issue:`17467`.)"
msgstr ""
":func:`~mock.mock_open`-objekt har nu metoderna ``readline`` och "
"``readlines``.  (Bidrag från Toshio Kuratomi i :issue:`17467`.)"

msgid "venv"
msgstr "ven"

msgid ""
":mod:`venv` now includes activation scripts for the ``csh`` and ``fish`` "
"shells.  (Contributed by Andrew Svetlov in :issue:`15417`.)"
msgstr ""
":mod:`venv` innehåller nu aktiveringsskript för skalen ``csh`` och "
"``fish``.  (Bidrag från Andrew Svetlov i :issue:`15417`.)"

msgid ""
":class:`~venv.EnvBuilder` and the :func:`~venv.create` convenience function "
"take a new keyword argument *with_pip*, which defaults to ``False``, that "
"controls whether or not :class:`~venv.EnvBuilder` ensures that ``pip`` is "
"installed in the virtual environment.  (Contributed by Nick Coghlan in :"
"issue:`19552` as part of the :pep:`453` implementation.)"
msgstr ""
":class:`~venv.EnvBuilder` och bekvämlighetsfunktionen :func:`~venv.create` "
"tar ett nytt nyckelordsargument *with_pip*, som standard är ``False``, som "
"kontrollerar om :class:`~venv.EnvBuilder` säkerställer att ``pip`` är "
"installerat i den virtuella miljön eller inte.  (Bidrag från Nick Coghlan i :"
"issue:`19552` som en del av :pep:`453`-implementationen)"

msgid "wave"
msgstr "våg"

msgid ""
"The :meth:`~wave.getparams` method now returns a namedtuple rather than a "
"plain tuple.  (Contributed by Claudiu Popa in :issue:`17487`.)"
msgstr ""
"Metoden :meth:`~wave.getparams` returnerar nu en namedtuple istället för en "
"vanlig tuple.  (Bidrag från Claudiu Popa i :issue:`17487`.)"

msgid ""
":meth:`wave.open` now supports the context management protocol.  "
"(Contributed by Claudiu Popa in :issue:`17616`.)"
msgstr ""
":meth:`wave.open` stöder nu protokollet för kontexthantering.  (Bidrag från "
"Claudiu Popa i :issue:`17616`.)"

msgid ""
":mod:`wave` can now :ref:`write output to unseekable files <wave-write-"
"objects>`.  (Contributed by David Jones, Guilherme Polo, and Serhiy "
"Storchaka in :issue:`5202`.)"
msgstr ""
":mod:`wave` kan nu :ref:`skriva utdata till filer som inte kan sökas <wave-"
"write-objects>`.  (Bidrag från David Jones, Guilherme Polo och Serhiy "
"Storchaka i :issue:`5202`.)"

msgid ""
"The :meth:`~wave.Wave_write.writeframesraw` and :meth:`~wave.Wave_write."
"writeframes` methods now accept any :term:`bytes-like object`.  (Contributed "
"by Serhiy Storchaka in :issue:`8311`.)"
msgstr ""
"Metoderna :meth:`~wave.Wave_write.writeframesraw` och :meth:`~wave."
"Wave_write.writeframes` accepterar nu alla :term:`bytes-liknande objekt`.  "
"(Bidrag från Serhiy Storchaka i :issue:`8311`.)"

msgid "weakref"
msgstr "svagref"

msgid ""
"New :class:`~weakref.WeakMethod` class simulates weak references to bound "
"methods.  (Contributed by Antoine Pitrou in :issue:`14631`.)"
msgstr ""
"Ny :class:`~weakref.WeakMethod`-klass simulerar svaga referenser till bundna "
"metoder.  (Bidrag från Antoine Pitrou i :issue:`14631`.)"

msgid ""
"New :class:`~weakref.finalize` class makes it possible to register a "
"callback to be invoked when an object is garbage collected, without needing "
"to carefully manage the lifecycle of the weak reference itself.  "
"(Contributed by Richard Oudkerk in :issue:`15528`.)"
msgstr ""
"Ny :class:`~weakref.finalize`-klass gör det möjligt att registrera en "
"återuppringning som ska anropas när ett objekt samlas in, utan att behöva "
"hantera livscykeln för själva den svaga referensen.  (Bidrag från Richard "
"Oudkerk i :issue:`15528`.)"

msgid ""
"The callback, if any, associated with a :class:`~weakref.ref` is now exposed "
"via the :attr:`~weakref.ref.__callback__` attribute.  (Contributed by Mark "
"Dickinson in :issue:`17643`.)"
msgstr ""
"Den eventuella återuppringning som är associerad med en :class:`~weakref."
"ref` visas nu via attributet :attr:`~weakref.ref.__callback__`.  (Bidrag "
"från Mark Dickinson i :issue:`17643`.)"

msgid "xml.etree"
msgstr "xml.etree"

msgid ""
"A new parser, :class:`~xml.etree.ElementTree.XMLPullParser`, allows a non-"
"blocking applications to parse XML documents.  An example can be seen at :"
"ref:`elementtree-pull-parsing`.  (Contributed by Antoine Pitrou in :issue:"
"`17741`.)"
msgstr ""
"En ny parser, :class:`~xml.etree.ElementTree.XMLPullParser`, gör det möjligt "
"för en icke-blockerande applikation att parsa XML-dokument.  Ett exempel kan "
"ses på :ref:`elementtree-pull-parsing`.  (Bidrag från Antoine Pitrou i :"
"issue:`17741`.)"

msgid ""
"The :mod:`xml.etree.ElementTree` :func:`~xml.etree.ElementTree.tostring` "
"and :func:`~xml.etree.ElementTree.tostringlist` functions, and the :class:"
"`~xml.etree.ElementTree.ElementTree` :meth:`~xml.etree.ElementTree."
"ElementTree.write` method, now have a *short_empty_elements* :ref:`keyword-"
"only parameter <keyword-only_parameter>` providing control over whether "
"elements with no content are written in abbreviated (``<tag />``) or "
"expanded (``<tag></tag>``) form.  (Contributed by Ariel Poliak and Serhiy "
"Storchaka in :issue:`14377`.)"
msgstr ""
"Funktionerna :mod:`xml.etree.ElementTree` :func:`~xml.etree.ElementTree."
"tostring` och :func:`~xml.etree.ElementTree.tostringlist`, samt :class:`~xml."
"etree.ElementTree.ElementTree` :meth:`~xml.etree.ElementTree.ElementTree."
"write` method, har nu en *short_empty_elements* :ref:``keyword-only "
"parameter <keyword-only_parameter>` som ger kontroll över om element utan "
"innehåll skrivs i förkortad (``<tag />``) eller utökad (``<tag></tag>``) "
"form.  (Bidrag från Ariel Poliak och Serhiy Storchaka i :issue:`14377`.)"

msgid "zipfile"
msgstr "zip-fil"

msgid ""
"The :meth:`~zipfile.PyZipFile.writepy` method of the :class:`~zipfile."
"PyZipFile` class has a new *filterfunc* option that can be used to control "
"which directories and files are added to the archive.  For example, this "
"could be used to exclude test files from the archive. (Contributed by "
"Christian Tismer in :issue:`19274`.)"
msgstr ""
"Metoden :meth:`~zipfile.PyZipFile.writepy` i klassen :class:`~zipfile."
"PyZipFile` har ett nytt alternativ *filterfunc* som kan användas för att "
"styra vilka kataloger och filer som läggs till i arkivet.  Detta kan t.ex. "
"användas för att utesluta testfiler från arkivet. (Bidrag från Christian "
"Tismer i :issue:`19274`.)"

msgid ""
"The *allowZip64* parameter to :class:`~zipfile.ZipFile` and :class:`~zipfile."
"PyZipfile` is now ``True`` by default.  (Contributed by William Mallard in :"
"issue:`17201`.)"
msgstr ""
"Parametern *allowZip64* till :class:`~zipfile.ZipFile` och :class:`~zipfile."
"PyZipfile` är nu ``True`` som standard.  (Bidrag från William Mallard i :"
"issue:`17201`.)"

msgid "CPython Implementation Changes"
msgstr "Ändringar i CPython-implementeringen"

msgid "PEP 445: Customization of CPython Memory Allocators"
msgstr "PEP 445: Anpassning av CPythons minnesallokatorer"

msgid ""
":pep:`445` adds new C level interfaces to customize memory allocation in the "
"CPython interpreter."
msgstr ""
":pep:`445` lägger till nya gränssnitt på C-nivå för att anpassa "
"minnesallokeringen i CPython-tolken."

msgid ":pep:`445` -- Add new APIs to customize Python memory allocators"
msgstr ""
":pep:`445` -- Lägg till nya API:er för att anpassa Pythons minnesallokatorer"

msgid "PEP 442: Safe Object Finalization"
msgstr "PEP 442: Slutförande av säkert objekt"

msgid ""
":pep:`442` removes the current limitations and quirks of object finalization "
"in CPython. With it, objects with :meth:`__del__` methods, as well as "
"generators with :keyword:`finally` clauses, can be finalized when they are "
"part of a reference cycle."
msgstr ""
":pep:`442` tar bort de nuvarande begränsningarna och konstigheterna med "
"objektavslut i CPython. Med den kan objekt med :meth:`__del__`-metoder, "
"liksom generatorer med :keyword:`finally`-klausuler, slutföras när de är en "
"del av en referenscykel."

msgid ""
"As part of this change, module globals are no longer forcibly set to :const:"
"`None` during interpreter shutdown in most cases, instead relying on the "
"normal operation of the cyclic garbage collector.  This avoids a whole class "
"of interpreter-shutdown-time errors, usually involving ``__del__`` methods, "
"that have plagued Python since the cyclic GC was first introduced."
msgstr ""
"Som en del av denna förändring sätts modulglobaler inte längre med våld "
"till :const:`None` under tolkens avstängning i de flesta fall, utan förlitar "
"sig istället på den normala driften av den cykliska skräpsamlaren.  Detta "
"undviker en hel klass av tolkningsavstängningsfel, vanligtvis involverande "
"``__del__``-metoder, som har plågat Python sedan den cykliska GC först "
"introducerades."

msgid ":pep:`442` -- Safe object finalization"
msgstr ":pep:`442` -- Slutförande av säkert objekt"

msgid "PEP 456: Secure and Interchangeable Hash Algorithm"
msgstr "PEP 456: Säker och utbytbar hashalgoritm"

msgid ""
":pep:`456` follows up on earlier security fix work done on Python's hash "
"algorithm to address certain DOS attacks to which public facing APIs backed "
"by dictionary lookups may be subject.  (See :issue:`14621` for the start of "
"the current round of improvements.)  The PEP unifies CPython's hash code to "
"make it easier for a packager to substitute a different hash algorithm, and "
"switches Python's default implementation to a SipHash implementation on "
"platforms that have a 64 bit data type.  Any performance differences in "
"comparison with the older FNV algorithm are trivial."
msgstr ""
":pep:`456` följer upp tidigare säkerhetsfixar som gjorts på Pythons hash-"
"algoritm för att hantera vissa DOS-attacker som API:er som vänder sig till "
"allmänheten och som stöds av ordboksuppslagningar kan utsättas för.  (Se :"
"issue:`14621` för starten av den aktuella förbättringsrundan.) PEP:n förenar "
"CPythons hashkod för att göra det lättare för en pakettillverkare att "
"ersätta en annan hashalgoritm, och byter Pythons standardimplementation till "
"en SipHash-implementation på plattformar som har en 64-bitars datatyp.  "
"Eventuella prestandaskillnader i jämförelse med den äldre FNV-algoritmen är "
"triviala."

msgid ""
"The PEP adds additional fields to the :data:`sys.hash_info` named tuple to "
"describe the hash algorithm in use by the currently executing binary.  "
"Otherwise, the PEP does not alter any existing CPython APIs."
msgstr ""
"PEP:n lägger till ytterligare fält i :data:`sys.hash_info` named tuple för "
"att beskriva den hashalgoritm som används av den binärfil som körs för "
"tillfället.  I övrigt ändrar PEP:n inte några befintliga CPython API:er."

msgid "PEP 436: Argument Clinic"
msgstr "PEP 436: Argumentklinik"

msgid ""
"\"Argument Clinic\" (:pep:`436`) is now part of the CPython build process "
"and can be used to simplify the process of defining and maintaining accurate "
"signatures for builtins and standard library extension modules implemented "
"in C."
msgstr ""
"\"Argument Clinic\" (:pep:`436`) är nu en del av CPythons byggprocess och "
"kan användas för att förenkla processen med att definiera och underhålla "
"korrekta signaturer för builtins och standardbibliotekets tilläggsmoduler "
"som implementeras i C."

msgid ""
"Some standard library extension modules have been converted to use Argument "
"Clinic in Python 3.4, and :mod:`pydoc` and :mod:`inspect` have been updated "
"accordingly."
msgstr ""
"Vissa tilläggsmoduler i standardbiblioteket har konverterats för att använda "
"Argument Clinic i Python 3.4, och :mod:`pydoc` och :mod:`inspect` har "
"uppdaterats i enlighet med detta."

msgid ""
"It is expected that signature metadata for programmatic introspection will "
"be added to additional callables implemented in C as part of Python 3.4 "
"maintenance releases."
msgstr ""
"Det förväntas att signaturmetadata för programmatisk introspektion kommer "
"att läggas till ytterligare anropbara filer som implementeras i C som en del "
"av Python 3.4 underhållsversioner."

msgid ""
"The Argument Clinic PEP is not fully up to date with the state of the "
"implementation. This has been deemed acceptable by the release manager and "
"core development team in this case, as Argument Clinic will not be made "
"available as a public API for third party use in Python 3.4."
msgstr ""
"Argument Clinic PEP är inte helt uppdaterad med läget för implementationen. "
"Detta har ansetts acceptabelt av release manager och core development team i "
"det här fallet, eftersom Argument Clinic inte kommer att göras tillgängligt "
"som ett offentligt API för tredjepartsbruk i Python 3.4."

msgid ":pep:`436` -- The Argument Clinic DSL"
msgstr ":pep:`436` -- Argumentkliniken DSL"

msgid "PEP written and implemented by Larry Hastings."
msgstr "PEP skrivet och implementerat av Larry Hastings."

msgid "Other Build and C API Changes"
msgstr "Andra ändringar i Build och C API"

msgid ""
"The new :c:func:`PyType_GetSlot` function has been added to the stable ABI, "
"allowing retrieval of function pointers from named type slots when using the "
"limited API.  (Contributed by Martin von Löwis in :issue:`17162`.)"
msgstr ""
"Den nya :c:func:`PyType_GetSlot`-funktionen har lagts till i det stabila ABI:"
"t, vilket gör det möjligt att hämta funktionspekare från namngivna typslots "
"när man använder det begränsade API:t.  (Bidrag från Martin von Löwis i :"
"issue:`17162`.)"

msgid ""
"The new :c:func:`!Py_SetStandardStreamEncoding` pre-initialization API "
"allows applications embedding the CPython interpreter to reliably force a "
"particular encoding and error handler for the standard streams. (Contributed "
"by Bastien Montagne and Nick Coghlan in :issue:`16129`.)"
msgstr ""
"Det nya :c:func:`!Py_SetStandardStreamEncoding` förinitialiserings-API:et "
"gör det möjligt för applikationer som bäddar in CPython-tolken att på ett "
"tillförlitligt sätt tvinga fram en viss kodning och felhantering för "
"standardströmmarna. (Bidrag från Bastien Montagne och Nick Coghlan i :issue:"
"`16129`.)"

msgid ""
"Most Python C APIs that don't mutate string arguments are now correctly "
"marked as accepting ``const char *`` rather than ``char *``.  (Contributed "
"by Serhiy Storchaka in :issue:`1772673`.)"
msgstr ""
"De flesta Python C API:er som inte muterar strängargument är nu korrekt "
"markerade som att de accepterar ``const char *`` istället för ``char *``.  "
"(Bidrag från Serhiy Storchaka i :issue:`1772673`.)"

msgid ""
"A new shell version of ``python-config`` can be used even when a python "
"interpreter is not available (for example, in cross compilation scenarios)."
msgstr ""
"En ny shell-version av ``python-config`` kan användas även när en python-"
"tolk inte är tillgänglig (t.ex. i cross compilation-scenarier)."

msgid ""
":c:func:`PyUnicode_FromFormat` now supports width and precision "
"specifications for ``%s``, ``%A``, ``%U``, ``%V``, ``%S``, and ``%R``. "
"(Contributed by Ysj Ray and Victor Stinner in :issue:`7330`.)"
msgstr ""
":c:func:`PyUnicode_FromFormat` stöder nu bredd- och "
"precisionsspecifikationer för ``%s``, ``%A``, ``%U``, ``%V``, ``%S`` och "
"``%R``. (Bidrag från Ysj Ray och Victor Stinner i :issue:`7330`.)"

msgid ""
"New function :c:func:`PyStructSequence_InitType2` supplements the existing :"
"c:func:`PyStructSequence_InitType` function.  The difference is that it "
"returns ``0`` on success and ``-1`` on failure."
msgstr ""
"Den nya funktionen :c:func:`PyStructSequence_InitType2` kompletterar den "
"befintliga funktionen :c:func:`PyStructSequence_InitType`.  Skillnaden är "
"att den returnerar ``0`` vid framgång och ``-1`` vid misslyckande."

msgid ""
"The CPython source can now be compiled using the address sanity checking "
"features of recent versions of GCC and clang:  the false alarms in the small "
"object allocator have been silenced.  (Contributed by Dhiru Kholia in :issue:"
"`18596`.)"
msgstr ""
"CPython-källan kan nu kompileras med hjälp av funktionerna för kontroll av "
"adresssäkerheten i de senaste versionerna av GCC och clang: de falska larmen "
"i allokatorn för små objekt har tystnat.  (Bidrag från Dhiru Kholia i :issue:"
"`18596`.)"

msgid ""
"The Windows build now uses `Address Space Layout Randomization <https://en."
"wikipedia.org/wiki/Address_space_layout_randomization>`_ and `Data Execution "
"Prevention <https://en.wikipedia.org/wiki/Data_Execution_Prevention>`_.  "
"(Contributed by Christian Heimes in :issue:`16632`.)"
msgstr ""
"Windows-versionen använder nu `Address Space Layout Randomization <https://"
"en.wikipedia.org/wiki/Address_space_layout_randomization>`_ och `Data "
"Execution Prevention <https://en.wikipedia.org/wiki/"
"Data_Execution_Prevention>`_.  (Bidrag från Christian Heimes i :issue:"
"`16632`.)"

msgid ""
"New function :c:func:`PyObject_LengthHint` is the C API equivalent of :func:"
"`operator.length_hint`.  (Contributed by Armin Ronacher in :issue:`16148`.)"
msgstr ""
"Den nya funktionen :c:func:`PyObject_LengthHint` är C API-motsvarigheten "
"till :func:`operator.length_hint`.  (Bidrag från Armin Ronacher i :issue:"
"`16148`.)"

msgid "Other Improvements"
msgstr "Övriga förbättringar"

msgid ""
"The :ref:`python <using-on-cmdline>` command has a new :ref:`option <using-"
"on-misc-options>`, ``-I``, which causes it to run in \"isolated mode\", "
"which means that :data:`sys.path` contains neither the script's directory "
"nor the user's ``site-packages`` directory, and all :envvar:`!PYTHON*` "
"environment variables are ignored (it implies both ``-s`` and ``-E``).  "
"Other restrictions may also be applied in the future, with the goal being to "
"isolate the execution of a script from the user's environment.  This is "
"appropriate, for example, when Python is used to run a system script.  On "
"most POSIX systems it can and should be used in the ``#!`` line of system "
"scripts.  (Contributed by Christian Heimes in :issue:`16499`.)"
msgstr ""
"Kommandot :ref:`python <using-on-cmdline>` har ett nytt :ref:`option <using-"
"on-misc-options>`, ``-I``, som gör att det körs i \"isolerat läge\", vilket "
"innebär att :data:`sys.path` varken innehåller skriptets katalog eller "
"användarens katalog ``site-packages``, och alla :envvar:`!PYTHON*` "
"miljövariabler ignoreras (det innebär både ``-s`` och ``-E``).  Andra "
"begränsningar kan också komma att tillämpas i framtiden, med målet att "
"isolera exekveringen av ett skript från användarens miljö.  Detta är till "
"exempel lämpligt när Python används för att köra ett systemskript.  På de "
"flesta POSIX-system kan och bör det användas i ``#!``-raden i systemskript.  "
"(Bidrag från Christian Heimes i :issue:`16499`.)"

msgid ""
"Tab-completion is now enabled by default in the interactive interpreter on "
"systems that support :mod:`readline`.  History is also enabled by default, "
"and is written to (and read from) the file :file:`~/.python-history`. "
"(Contributed by Antoine Pitrou and Éric Araujo in :issue:`5845`.)"
msgstr ""
"Tabbkomplettering är nu aktiverad som standard i den interaktiva tolken på "
"system som stöder :mod:`readline`.  Historik är också aktiverat som "
"standard, och skrivs till (och läses från) filen :file:`~/.python-history`. "
"(Bidrag från Antoine Pitrou och Éric Araujo i :issue:`5845`.)"

msgid ""
"Invoking the Python interpreter with ``--version`` now outputs the version "
"to standard output instead of standard error (:issue:`18338`). Similar "
"changes were made to :mod:`argparse` (:issue:`18920`) and other modules that "
"have script-like invocation capabilities (:issue:`18922`)."
msgstr ""
"När Python-tolken anropas med ``--version`` skrivs nu versionen ut till "
"standardutmatningen istället för standardfelet (:issue:`18338`). Liknande "
"ändringar gjordes i :mod:`argparse` (:issue:`18920`) och andra moduler som "
"har skriptliknande anropsfunktioner (:issue:`18922`)."

msgid ""
"The CPython Windows installer now adds ``.py`` to the :envvar:`PATHEXT` "
"variable when extensions are registered, allowing users to run a python "
"script at the windows command prompt by just typing its name without the ``."
"py`` extension.  (Contributed by Paul Moore in :issue:`18569`.)"
msgstr ""
"Installationsprogrammet för CPython i Windows lägger nu till ``.py`` i "
"variabeln :envvar:`PATHEXT`` när tillägg registreras, vilket gör att "
"användare kan köra ett pythonskript i Windows kommandotolk genom att bara "
"skriva dess namn utan tillägget ``.py``.  (Bidrag från Paul Moore i :issue:"
"`18569`.)"

msgid ""
"A new ``make`` target `coverage-report <https://devguide.python.org/coverage/"
"#measuring-coverage-of-c-code-with-gcov-and-lcov>`_ will build python, run "
"the test suite, and generate an HTML coverage report for the C codebase "
"using ``gcov`` and `lcov <https://github.com/linux-test-project/lcov>`_."
msgstr ""
"Ett nytt ``make``-mål `coverage-report <https://devguide.python.org/coverage/"
"#measuring-coverage-of-c-code-with-gcov-and-lcov>`_ kommer att bygga python, "
"köra testsviten och generera en HTML-täckningsrapport för C-kodbasen med "
"hjälp av ``gcov`` och `lcov <https://github.com/linux-test-project/lcov>`_."

msgid ""
"The ``-R`` option to the :ref:`python regression test suite <regrtest>` now "
"also checks for memory allocation leaks, using :func:`sys."
"getallocatedblocks`.  (Contributed by Antoine Pitrou in :issue:`13390`.)"
msgstr ""
"Alternativet ``-R`` till :ref:`python regression test suite <regrtest>`` "
"kontrollerar nu även för minnesallokeringsläckor, med :func:`sys."
"getallocatedblocks`.  (Bidrag från Antoine Pitrou i :issue:`13390`.)"

msgid "``python -m`` now works with namespace packages."
msgstr "``python -m`` fungerar nu med namespace-paket."

msgid ""
"The :mod:`stat` module is now implemented in C, which means it gets the "
"values for its constants from the C header files, instead of having the "
"values hard-coded in the python module as was previously the case."
msgstr ""
"Modulen :mod:`stat` är nu implementerad i C, vilket innebär att den hämtar "
"värdena för sina konstanter från C-headerfilerna, istället för att ha "
"värdena hårdkodade i pythonmodulen som tidigare var fallet."

msgid ""
"Loading multiple python modules from a single OS module (``.so``, ``.dll``) "
"now works correctly (previously it silently returned the first python module "
"in the file).  (Contributed by Václav Šmilauer in :issue:`16421`.)"
msgstr ""
"Att ladda flera python-moduler från en enda OS-modul (``.so``, ``.dll``) "
"fungerar nu korrekt (tidigare returnerades den första python-modulen i "
"filen).  (Bidrag från Václav Šmilauer i :issue:`16421`.)"

msgid ""
"A new opcode, :opcode:`!LOAD_CLASSDEREF`, has been added to fix a bug in the "
"loading of free variables in class bodies that could be triggered by certain "
"uses of :ref:`__prepare__ <prepare>`.  (Contributed by Benjamin Peterson in :"
"issue:`17853`.)"
msgstr ""
"En ny opcode, :opcode:`!LOAD_CLASSDEREF`, har lagts till för att åtgärda en "
"bugg i laddningen av fria variabler i klasskroppar som kunde utlösas av "
"vissa användningar av :ref:`__prepare__ <prepare>`.  (Bidrag från Benjamin "
"Peterson i :issue:`17853`.)"

msgid ""
"A number of MemoryError-related crashes were identified and fixed by Victor "
"Stinner using his :pep:`445`-based ``pyfailmalloc`` tool (:issue:`18408`, :"
"issue:`18520`)."
msgstr ""
"Ett antal MemoryError-relaterade krascher identifierades och åtgärdades av "
"Victor Stinner med hjälp av hans :pep:`445`-baserade verktyg "
"``pyfailmalloc`` (:issue:`18408`, :issue:`18520`)."

msgid ""
"The ``pyvenv`` command now accepts a ``--copies`` option to use copies "
"rather than symlinks even on systems where symlinks are the default.  "
"(Contributed by Vinay Sajip in :issue:`18807`.)"
msgstr ""
"Kommandot ``pyvenv`` accepterar nu alternativet ``--copies`` för att använda "
"kopior i stället för symlänkar även på system där symlänkar är standard.  "
"(Bidrag från Vinay Sajip i :issue:`18807`.)"

msgid ""
"The ``pyvenv`` command also accepts a ``--without-pip`` option to suppress "
"the otherwise-automatic bootstrapping of pip into the virtual environment.  "
"(Contributed by Nick Coghlan in :issue:`19552` as part of the :pep:`453` "
"implementation.)"
msgstr ""
"Kommandot ``pyvenv`` accepterar också alternativet ``--without-pip`` för att "
"undertrycka den annars automatiska uppstarten av pip i den virtuella "
"miljön.  (Bidrag från Nick Coghlan i :issue:`19552` som en del av "
"implementeringen av :pep:`453`)"

msgid ""
"The encoding name is now optional in the value set for the :envvar:"
"`PYTHONIOENCODING` environment variable.  This makes it possible to set just "
"the error handler, without changing the default encoding. (Contributed by "
"Serhiy Storchaka in :issue:`18818`.)"
msgstr ""
"Kodningsnamnet är nu valfritt i värdeuppsättningen för miljövariabeln :"
"envvar:`PYTHONIOENCODING`.  Detta gör det möjligt att bara ställa in "
"felhanteraren utan att ändra standardkodningen. (Bidrag från Serhiy "
"Storchaka i :issue:`18818`.)"

msgid ""
"The :mod:`bz2`, :mod:`lzma`, and :mod:`gzip` module ``open`` functions now "
"support ``x`` (exclusive creation) mode.  (Contributed by Tim Heaney and "
"Vajrasky Kok in :issue:`19201`, :issue:`19222`, and :issue:`19223`.)"
msgstr ""
"Modulfunktionerna :mod:`bz2`, :mod:`lzma` och :mod:`gzip` ``open`` stöder nu "
"läget ``x`` (exklusivt skapande).  (Bidrag från Tim Heaney och Vajrasky Kok "
"i :issue:`19201`, :issue:`19222` och :issue:`19223`.)"

msgid "Significant Optimizations"
msgstr "Betydande optimeringar"

msgid ""
"The UTF-32 decoder is now 3x to 4x faster.  (Contributed by Serhiy Storchaka "
"in :issue:`14625`.)"
msgstr ""
"UTF-32-avkodaren är nu 3x till 4x snabbare.  (Bidrag från Serhiy Storchaka "
"i :issue:`14625`.)"

msgid ""
"The cost of hash collisions for sets is now reduced.  Each hash table probe "
"now checks a series of consecutive, adjacent key/hash pairs before "
"continuing to make random probes through the hash table.  This exploits "
"cache locality to make collision resolution less expensive. The collision "
"resolution scheme can be described as a hybrid of linear probing and open "
"addressing.  The number of additional linear probes defaults to nine.  This "
"can be changed at compile-time by defining LINEAR_PROBES to be any value.  "
"Set LINEAR_PROBES=0 to turn-off linear probing entirely.  (Contributed by "
"Raymond Hettinger in :issue:`18771`.)"
msgstr ""
"Kostnaden för hashkollisioner för set är nu reducerad.  Varje "
"hashtabellsprobe kontrollerar nu en serie på varandra följande, "
"intilliggande nyckel/hash-par innan den fortsätter att göra slumpmässiga "
"prober genom hashtabellen.  Detta utnyttjar cache-lokalitet för att göra "
"kollisionsupplösning billigare. Kollisionslösningsschemat kan beskrivas som "
"en hybrid av linjär sondering och öppen adressering.  Antalet ytterligare "
"linjära sonderingar är som standard nio.  Detta kan ändras vid kompilering "
"genom att definiera LINEAR_PROBES till valfritt värde.  Ställ in "
"LINEAR_PROBES=0 för att stänga av linjär probning helt och hållet.  (Bidrag "
"från Raymond Hettinger i :issue:`18771`.)"

msgid ""
"The interpreter starts about 30% faster. A couple of measures lead to the "
"speedup. The interpreter loads fewer modules on startup, e.g. the :mod:"
"`re`, :mod:`collections` and :mod:`locale` modules and their dependencies "
"are no longer imported by default. The marshal module has been improved to "
"load compiled Python code faster.  (Contributed by Antoine Pitrou, Christian "
"Heimes and Victor Stinner in :issue:`19219`, :issue:`19218`, :issue:"
"`19209`, :issue:`19205` and :issue:`9548`.)"
msgstr ""
"Tolken startar ungefär 30% faster. Ett par åtgärder leder till den ökade "
"hastigheten. Tolken laddar färre moduler vid uppstart, t.ex. importeras inte "
"längre modulerna :mod:`re`, :mod:`collections` och :mod:`locale` och deras "
"beroenden som standard. Modulen marshal har förbättrats för att ladda "
"kompilerad Python-kod snabbare.  (Bidrag från Antoine Pitrou, Christian "
"Heimes och Victor Stinner i :issue:`19219`, :issue:`19218`, :issue:`19209`, :"
"issue:`19205` och :issue:`9548`.)"

msgid ""
":class:`bz2.BZ2File` is now as fast or faster than the Python2 version for "
"most cases.  :class:`lzma.LZMAFile` has also been optimized.  (Contributed "
"by Serhiy Storchaka and Nadeem Vawda in :issue:`16034`.)"
msgstr ""
":class:`bz2.BZ2File` är nu lika snabb eller snabbare än Python2-versionen i "
"de flesta fall. :class:`lzma.LZMAFile` har också optimerats.  (Bidrag från "
"Serhiy Storchaka och Nadeem Vawda i :issue:`16034`.)"

msgid ""
":func:`random.getrandbits` is 20%-40% faster for small integers (the most "
"common use case).  (Contributed by Serhiy Storchaka in :issue:`16674`.)"
msgstr ""
":func:`random.getrandbits` är 20%-40% snabbare för små heltal (det "
"vanligaste användningsfallet).  (Bidrag från Serhiy Storchaka i :issue:"
"`16674`.)"

msgid ""
"By taking advantage of the new storage format for strings, pickling of "
"strings is now significantly faster.  (Contributed by Victor Stinner and "
"Antoine Pitrou in :issue:`15596`.)"
msgstr ""
"Genom att dra nytta av det nya lagringsformatet för strängar är betning av "
"strängar nu betydligt snabbare.  (Bidrag från Victor Stinner och Antoine "
"Pitrou i :issue:`15596`.)"

msgid ""
"A performance issue in :meth:`io.FileIO.readall` has been solved.  This "
"particularly affects Windows, and significantly speeds up the case of piping "
"significant amounts of data through :mod:`subprocess`.  (Contributed by "
"Richard Oudkerk in :issue:`15758`.)"
msgstr ""
"Ett prestandaproblem i :meth:`io.FileIO.readall` har lösts.  Detta påverkar "
"särskilt Windows, och snabbar upp fallet med piping av betydande mängder "
"data genom :mod:`subprocess`.  (Bidrag från Richard Oudkerk i :issue:"
"`15758`.)"

msgid ""
":func:`html.escape` is now 10x faster.  (Contributed by Matt Bryant in :"
"issue:`18020`.)"
msgstr ""
":func:`html.escape` är nu 10x snabbare.  (Bidrag från Matt Bryant i :issue:"
"`18020`.)"

msgid ""
"On Windows, the native ``VirtualAlloc`` is now used instead of the CRT "
"``malloc`` in ``obmalloc``.  Artificial benchmarks show about a 3% memory "
"savings."
msgstr ""
"I Windows används nu den inbyggda ``VirtualAlloc`` istället för CRT "
"``malloc`` i ``obmalloc``.  Artificiella benchmarks visar på en "
"minnesbesparing på ca 3%."

msgid ""
":func:`os.urandom` now uses a lazily opened persistent file descriptor so as "
"to avoid using many file descriptors when run in parallel from multiple "
"threads.  (Contributed by Antoine Pitrou in :issue:`18756`.)"
msgstr ""
":func:`os.urandom` använder nu en latent öppnad persistent filbeskrivare för "
"att undvika att använda många filbeskrivare när den körs parallellt från "
"flera trådar.  (Bidrag från Antoine Pitrou i :issue:`18756`.)"

msgid "Deprecated"
msgstr "Föråldrat"

msgid ""
"This section covers various APIs and other features that have been "
"deprecated in Python 3.4, and will be removed in Python 3.5 or later.  In "
"most (but not all) cases, using the deprecated APIs will produce a :exc:"
"`DeprecationWarning` when the interpreter is run with deprecation warnings "
"enabled (for example, by using ``-Wd``)."
msgstr ""
"Detta avsnitt täcker olika API:er och andra funktioner som har utgått i "
"Python 3.4 och som kommer att tas bort i Python 3.5 eller senare.  I de "
"flesta (men inte alla) fall kommer användningen av de föråldrade API:erna "
"att producera en :exc:`DeprecationWarning` när tolken körs med deprecation-"
"varningar aktiverade (till exempel genom att använda ``-Wd``)."

msgid "Deprecations in the Python API"
msgstr "Avvecklingar i Python API"

msgid ""
"As mentioned in :ref:`whatsnew-pep-451`, a number of :mod:`importlib` "
"methods and functions are deprecated: :meth:`!importlib.find_loader` is "
"replaced by :func:`importlib.util.find_spec`; :meth:`!importlib.machinery."
"PathFinder.find_module` is replaced by :meth:`importlib.machinery.PathFinder."
"find_spec`; :meth:`!importlib.abc.MetaPathFinder.find_module` is replaced "
"by :meth:`importlib.abc.MetaPathFinder.find_spec`; :meth:`!importlib.abc."
"PathEntryFinder.find_loader` and :meth:`!find_module` are replaced by :meth:"
"`importlib.abc.PathEntryFinder.find_spec`; all of the :samp:`{xxx}Loader` "
"ABC ``load_module`` methods (:meth:`!importlib.abc.Loader.load_module`, :"
"meth:`!importlib.abc.InspectLoader.load_module`, :meth:`!importlib.abc."
"FileLoader.load_module`, :meth:`!importlib.abc.SourceLoader.load_module`) "
"should no longer be implemented, instead loaders should implement an "
"``exec_module`` method (:meth:`importlib.abc.Loader.exec_module`, :meth:"
"`importlib.abc.InspectLoader.exec_module` :meth:`importlib.abc.SourceLoader."
"exec_module`) and let the import system take care of the rest; and :meth:`!"
"importlib.abc.Loader.module_repr`, :meth:`!importlib.util."
"module_for_loader`, :meth:`!importlib.util.set_loader`, and :meth:`!"
"importlib.util.set_package` are no longer needed because their functions are "
"now handled automatically by the import system."
msgstr ""
"Som nämnts i :ref:`whatsnew-pep-451`, är ett antal :mod:`importlib`-metoder "
"och funktioner föråldrade: :meth:`!importlib.find_loader` ersätts av :func:"
"`importlib.util.find_spec`; :meth:`!importlib.machinery.PathFinder."
"find_module` ersätts av :meth:`importlib.machinery.PathFinder.find_spec`; :"
"meth:`!importlib.abc.MetaPathFinder.find_module` ersätts av :meth:`importlib."
"abc.MetaPathFinder.find_spec`; :meth:`!importlib.abc.PathEntryFinder."
"find_loader` och :meth:`!find_module` ersätts av :meth:`importlib.abc."
"PathEntryFinder.find_spec`; alla :samp:`{xxx}Loader` ABC ``load_module`` "
"metoder (:meth:`!importlib.abc.Loader.load_module`, :meth:`!importlib.abc."
"InspectLoader.load_module`, :meth:`!importlib.abc.FileLoader.load_module`, :"
"meth:`!importlib.abc.SourceLoader.load_module`) bör inte längre "
"implementeras, istället bör laddare implementera en ``exec_module`` metod (:"
"meth:`importlib.abc.Loader.exec_module`, :meth:`importlib.abc.InspectLoader."
"exec_module` :meth:`importlib.abc.SourceLoader.exec_module`) och låta "
"importsystemet ta hand om resten; och :meth:`!importlib.abc.Loader."
"module_repr`, :meth:`!importlib.util.module_for_loader`, :meth:`!importlib."
"util.set_loader`, och :meth:`!importlib.util.set_package` behövs inte längre "
"eftersom deras funktioner nu hanteras automatiskt av importsystemet."

msgid ""
"The :mod:`!imp` module is pending deprecation. To keep compatibility with "
"Python 2/3 code bases, the module's removal is currently not scheduled."
msgstr ""
"Modulen :mod:`!imp` väntar på att tas bort. För att behålla kompatibiliteten "
"med Python 2/3 kodbaser, är modulens borttagning för närvarande inte "
"planerad."

msgid ""
"The :mod:`formatter` module is pending deprecation and is slated for removal "
"in Python 3.6."
msgstr ""
"Modulen :mod:`formatter` är under avveckling och kommer att tas bort i "
"Python 3.6."

msgid ""
"``MD5`` as the default *digestmod* for the :func:`hmac.new` function is "
"deprecated.  Python 3.6 will require an explicit digest name or constructor "
"as *digestmod* argument."
msgstr ""
"``MD5`` som standard *digestmod* för funktionen :func:`hmac.new` är "
"föråldrad.  Python 3.6 kommer att kräva ett explicit digestnamn eller "
"konstruktör som *digestmod*-argument."

msgid ""
"The internal ``Netrc`` class in the :mod:`ftplib` module has been documented "
"as deprecated in its docstring for quite some time.  It now emits a :exc:"
"`DeprecationWarning` and will be removed completely in Python 3.5."
msgstr ""
"Den interna ``Netrc``-klassen i :mod:`ftplib`-modulen har dokumenterats som "
"föråldrad i sin dokumentsträng under en längre tid.  Den avger nu en :exc:"
"`DeprecationWarning` och kommer att tas bort helt i Python 3.5."

msgid ""
"The undocumented *endtime* argument to :meth:`subprocess.Popen.wait` should "
"not have been exposed and is hopefully not in use; it is deprecated and will "
"mostly likely be removed in Python 3.5."
msgstr ""
"Det odokumenterade *endtime*-argumentet till :meth:`subprocess.Popen.wait` "
"borde inte ha exponerats och används förhoppningsvis inte; det är föråldrat "
"och kommer med största sannolikhet att tas bort i Python 3.5."

msgid ""
"The *strict* argument of :class:`~html.parser.HTMLParser` is deprecated."
msgstr "Argumentet *strict* i :class:`~html.parser.HTMLParser` är föråldrat."

msgid ""
"The :mod:`plistlib` :func:`~plistlib.readPlist`, :func:`~plistlib."
"writePlist`, :func:`~plistlib.readPlistFromBytes`, and :func:`~plistlib."
"writePlistToBytes` functions are deprecated in favor of the corresponding "
"new functions :func:`~plistlib.load`, :func:`~plistlib.dump`, :func:"
"`~plistlib.loads`, and :func:`~plistlib.dumps`.  :func:`~plistlib.Data` is "
"deprecated in favor of just using the :class:`bytes` constructor."
msgstr ""
"Funktionerna :mod:`plistlib` :func:`~plistlib.readPlist`, :func:`~plistlib."
"writePlist`, :func:`~plistlib.readPlistFromBytes`, och :func:`~plistlib."
"writePlistToBytes` är utdaterade till förmån för motsvarande nya funktioner :"
"func:`~plistlib.load`, :func:`~plistlib.dump`, :func:`~plistlib.loads`, och :"
"func:`~plistlib.dumps`. :func:`~plistlib.Data` är föråldrad till förmån för "
"att bara använda :class:`bytes` konstruktören."

msgid ""
"The :mod:`sysconfig` key ``SO`` is deprecated, it has been replaced by "
"``EXT_SUFFIX``."
msgstr ""
"Nyckel :mod:`sysconfig` ``SO`` är föråldrad och har ersatts av "
"``EXT_SUFFIX``."

msgid ""
"The ``U`` mode accepted by various ``open`` functions is deprecated. In "
"Python3 it does not do anything useful, and should be replaced by "
"appropriate uses of :class:`io.TextIOWrapper` (if needed) and its *newline* "
"argument."
msgstr ""
"Läget ``U`` som accepteras av olika ``open``-funktioner är föråldrat. I "
"Python3 gör det inget användbart och bör ersättas av lämpliga användningar "
"av :class:`io.TextIOWrapper` (om det behövs) och dess *newline*-argument."

msgid ""
"The *parser* argument of :func:`xml.etree.ElementTree.iterparse` has been "
"deprecated, as has the *html* argument of :func:`~xml.etree.ElementTree."
"XMLParser`.  To prepare for the removal of the latter, all arguments to "
"``XMLParser`` should be passed by keyword."
msgstr ""
"Argumentet *parser* i :func:`xml.etree.ElementTree.iterparse` har utgått, "
"liksom argumentet *html* i :func:`~xml.etree.ElementTree.XMLParser`.  För "
"att förbereda borttagandet av det senare bör alla argument till "
"``XMLParser`` skickas med nyckelord."

msgid "Deprecated Features"
msgstr "Föråldrade funktioner"

msgid ""
"Running :ref:`idle` with the ``-n`` flag (no subprocess) is deprecated. "
"However, the feature will not be removed until :issue:`18823` is resolved."
msgstr ""
"Att köra :ref:`idle` med flaggan ``-n`` (ingen underprocess) är föråldrat. "
"Funktionen kommer dock inte att tas bort förrän :issue:`18823` är löst."

msgid ""
"The site module adding a \"site-python\" directory to sys.path, if it "
"exists, is deprecated (:issue:`19375`)."
msgstr ""
"Site-modulen som lägger till en \"site-python\"-katalog i sys.path, om den "
"finns, är föråldrad (:issue:`19375`)."

msgid "Removed"
msgstr "Borttagen"

msgid "Operating Systems No Longer Supported"
msgstr "Operativsystem som inte längre stöds"

msgid ""
"Support for the following operating systems has been removed from the source "
"and build tools:"
msgstr ""
"Stöd för följande operativsystem har tagits bort från käll- och "
"byggverktygen:"

msgid "OS/2 (:issue:`16135`)."
msgstr "OS/2 (:issue:`16135`)."

msgid "Windows 2000 (changeset e52df05b496a)."
msgstr "Windows 2000 (ändring e52df05b496a)."

msgid ""
"Windows systems where ``COMSPEC`` points to ``command.com`` (:issue:`14470`)."
msgstr ""
"Windows-system där ``COMSPEC`` pekar på ``command.com`` (:issue:`14470`)."

msgid "VMS (:issue:`16136`)."
msgstr "VMS (:issue:`16136`)."

msgid "API and Feature Removals"
msgstr "Borttagning av API och funktioner"

msgid ""
"The following obsolete and previously deprecated APIs and features have been "
"removed:"
msgstr ""
"Följande föråldrade och tidigare utfasade API:er och funktioner har tagits "
"bort:"

msgid ""
"The unmaintained ``Misc/TextMate`` and ``Misc/vim`` directories have been "
"removed (see the `devguide <https://devguide.python.org>`_ for suggestions "
"on what to use instead)."
msgstr ""
"De ounderhållna katalogerna ``Misc/TextMate`` och ``Misc/vim`` har tagits "
"bort (se `devguide <https://devguide.python.org>`_ för förslag på vad som "
"kan användas istället)."

msgid ""
"The ``SO`` makefile macro is removed (it was replaced by the "
"``SHLIB_SUFFIX`` and ``EXT_SUFFIX`` macros) (:issue:`16754`)."
msgstr ""
"Makrot ``SO`` i makefilen har tagits bort (det ersattes av makrot "
"``SHLIB_SUFFIX`` och ``EXT_SUFFIX``) (:issue:`16754`)."

msgid ""
"The ``PyThreadState.tick_counter`` field has been removed; its value has "
"been meaningless since Python 3.2, when the \"new GIL\" was introduced (:"
"issue:`19199`)."
msgstr ""
"Fältet ``PyThreadState.tick_counter`` har tagits bort; dess värde har varit "
"meningslöst sedan Python 3.2, när den \"nya GIL\" introducerades (:issue:"
"`19199``)."

msgid ""
"``PyLoader`` and ``PyPycLoader`` have been removed from :mod:`importlib`. "
"(Contributed by Taras Lyapun in :issue:`15641`.)"
msgstr ""
"``PyLoader`` och ``PyPycLoader`` har tagits bort från :mod:`importlib`. "
"(Bidrag från Taras Lyapun i :issue:`15641`.)"

msgid ""
"The *strict* argument to :class:`~http.client.HTTPConnection` and :class:"
"`~http.client.HTTPSConnection` has been removed.  HTTP 0.9-style \"Simple "
"Responses\" are no longer supported."
msgstr ""
"Argumentet *strict* till :class:`~http.client.HTTPConnection` och :class:"
"`~http.client.HTTPSConnection` har tagits bort.  HTTP 0.9-stil \"Simple "
"Responses\" stöds inte längre."

msgid ""
"The deprecated :mod:`urllib.request.Request` getter and setter methods "
"``add_data``, ``has_data``, ``get_data``, ``get_type``, ``get_host``, "
"``get_selector``, ``set_proxy``, ``get_origin_req_host``, and "
"``is_unverifiable`` have been removed (use direct attribute access instead)."
msgstr ""
"De föråldrade :mod:`urllib.request.Request` getter- och setter-metoderna "
"``add_data``, ``has_data``, ``get_data``, ``get_type``, ``get_host``, "
"``get_selector``, ``set_proxy``, ``get_origin_req_host`` och "
"``is_unverifiable`` har tagits bort (använd direkt attributåtkomst istället)."

msgid ""
"Support for loading the deprecated ``TYPE_INT64`` has been removed from :mod:"
"`marshal`.  (Contributed by Dan Riti in :issue:`15480`.)"
msgstr ""
"Stöd för laddning av den föråldrade ``TYPE_INT64`` har tagits bort från :mod:"
"`marshal`.  (Bidrag från Dan Riti i :issue:`15480`.)"

msgid ""
":class:`inspect.Signature`: positional-only parameters are now required to "
"have a valid name."
msgstr ""
":class:`inspect.Signature`: parametrar som endast är positionella måste nu "
"ha ett giltigt namn."

msgid ""
":meth:`object.__format__` no longer accepts non-empty format strings, it now "
"raises a :exc:`TypeError` instead.  Using a non-empty string has been "
"deprecated since Python 3.2.  This change has been made to prevent a "
"situation where previously working (but incorrect) code would start failing "
"if an object gained a __format__ method, which means that your code may now "
"raise a :exc:`TypeError` if you are using an ``'s'`` format code with "
"objects that do not have a __format__ method that handles it.  See :issue:"
"`7994` for background."
msgstr ""
":meth:`object.__format__` accepterar inte längre icke-tomma formatsträngar, "
"den ger nu upphov till ett :exc:`TypeError` istället.  Att använda en icke-"
"tom sträng har varit föråldrat sedan Python 3.2.  Denna ändring har gjorts "
"för att förhindra en situation där tidigare fungerande (men felaktig) kod "
"skulle börja misslyckas om ett objekt fick en __format__-metod, vilket "
"innebär att din kod nu kan ge upphov till ett :exc:`TypeError` om du "
"använder en ``'s'``-formatkod med objekt som inte har en __format__-metod "
"som hanterar den.  Se :issue:`7994` för bakgrund."

msgid ""
":meth:`difflib.SequenceMatcher.isbjunk` and :meth:`difflib.SequenceMatcher."
"isbpopular` were deprecated in 3.2, and have now been removed: use ``x in sm."
"bjunk`` and ``x in sm.bpopular``, where *sm* is a :class:`~difflib."
"SequenceMatcher` object (:issue:`13248`)."
msgstr ""
":meth:`difflib.SequenceMatcher.isbjunk` och :meth:`difflib.SequenceMatcher."
"isbpopular` var föråldrade i 3.2 och har nu tagits bort: använd ``x in sm."
"bjunk`` och ``x in sm.bpopular``, där *sm* är ett :class:`~difflib."
"SequenceMatcher`-objekt (:issue:`13248`)."

msgid "Code Cleanups"
msgstr "Uppstädning av kod"

msgid ""
"The unused and undocumented internal ``Scanner`` class has been removed from "
"the :mod:`pydoc` module."
msgstr ""
"Den oanvända och odokumenterade interna klassen ``Scanner`` har tagits bort "
"från modulen :mod:`pydoc`."

msgid ""
"The private and effectively unused ``_gestalt`` module has been removed, "
"along with the private :mod:`platform` functions ``_mac_ver_lookup``, "
"``_mac_ver_gstalt``, and ``_bcd2str``, which would only have ever been "
"called on badly broken OSX systems (see :issue:`18393`)."
msgstr ""
"Den privata och i praktiken oanvända modulen ``_gestalt`` har tagits bort, "
"tillsammans med de privata :mod:`platform`-funktionerna ``_mac_ver_lookup``, "
"``_mac_ver_gstalt`` och ``_bcd2str``, som bara skulle ha anropats på dåligt "
"fungerande OSX-system (se :issue:`18393`)."

msgid ""
"The hardcoded copies of certain :mod:`stat` constants that were included in "
"the :mod:`tarfile` module namespace have been removed."
msgstr ""
"De hårdkodade kopiorna av vissa :mod:`stat`-konstanter som ingick i :mod:"
"`tarfile`-modulens namnrymd har tagits bort."

msgid "Porting to Python 3.4"
msgstr "Portning till Python 3.4"

msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"I det här avsnittet listas tidigare beskrivna ändringar och andra buggfixar "
"som kan kräva ändringar i din kod."

msgid "Changes in 'python' Command Behavior"
msgstr "Ändringar i beteendet för kommandot \"python"

msgid ""
"In a posix shell, setting the :envvar:`PATH` environment variable to an "
"empty value is equivalent to not setting it at all.  However, setting :"
"envvar:`PYTHONPATH` to an empty value was *not* equivalent to not setting it "
"at all: setting :envvar:`PYTHONPATH` to an empty value was equivalent to "
"setting it to ``.``, which leads to confusion when reasoning by analogy to "
"how :envvar:`PATH` works.  The behavior now conforms to the posix convention "
"for :envvar:`PATH`."
msgstr ""
"I ett posix-skal är det likvärdigt med att inte ange miljövariabeln :envvar:"
"`PATH` alls om den anges till ett tomt värde.  Men att sätta :envvar:"
"`PYTHONPATH` till ett tomt värde var *inte* likvärdigt med att inte sätta "
"den alls: att sätta :envvar:`PYTHONPATH` till ett tomt värde var likvärdigt "
"med att sätta den till ``.``, vilket leder till förvirring när man resonerar "
"analogt med hur :envvar:`PATH` fungerar.  Beteendet överensstämmer nu med "
"posix-konventionen för :envvar:`PATH`."

msgid ""
"The [X refs, Y blocks] output of a debug (``--with-pydebug``) build of the "
"CPython interpreter is now off by default.  It can be re-enabled using the "
"``-X showrefcount`` option.  (Contributed by Ezio Melotti in :issue:`17323`.)"
msgstr ""
"Utdata [X refs, Y blocks] från en debug (``--med-pydebug``) -byggnad av "
"CPython-tolken är nu avstängd som standard.  Den kan återaktiveras med hjälp "
"av alternativet ``-X showrefcount``.  (Bidrag från Ezio Melotti i :issue:"
"`17323`.)"

msgid ""
"The python command and most stdlib scripts (as well as :mod:`argparse`) now "
"output ``--version`` information to ``stdout`` instead of ``stderr`` (for "
"issue list see :ref:`other-improvements-3.4` above)."
msgstr ""
"Python-kommandot och de flesta stdlib-skript (samt :mod:`argparse`) skickar "
"nu ut ``--version``-information till ``stdout`` istället för ``stderr`` (för "
"problemlista se :ref:`other-improvement-3.4` ovan)."

msgid "Changes in the Python API"
msgstr "Ändringar i Python API"

msgid ""
"The ABCs defined in :mod:`importlib.abc` now either raise the appropriate "
"exception or return a default value instead of raising :exc:"
"`NotImplementedError` blindly. This will only affect code calling :func:"
"`super` and falling through all the way to the ABCs. For compatibility, "
"catch both :exc:`NotImplementedError` or the appropriate exception as needed."
msgstr ""
"De ABC:er som definieras i :mod:`importlib.abc` ger nu antingen upphov till "
"lämpligt undantag eller returnerar ett standardvärde istället för att ge "
"upphov till :exc:`NotImplementedError` i blindo. Detta kommer endast att "
"påverka kod som anropar :func:`super` och som faller igenom hela vägen till "
"ABC. För kompatibilitet, fånga både :exc:`NotImplementedError` eller det "
"lämpliga undantaget efter behov."

msgid ""
"The module type now initializes the :attr:`~module.__package__` and :attr:"
"`~module.__loader__` attributes to ``None`` by default. To determine if "
"these attributes were set in a backwards-compatible fashion, use e.g. "
"``getattr(module, '__loader__', None) is not None``.  (:issue:`17115`.)"
msgstr ""
"Modultypen initierar nu attributen :attr:`~module.__package__` och :attr:"
"`~module.__loader__` till ``None`` som standard. För att avgöra om dessa "
"attribut har ställts in på ett bakåtkompatibelt sätt, använd t.ex. "
"``getattr(module, '__loader__', None) is not None``.  (:issue:`17115`.)"

msgid ""
":meth:`!importlib.util.module_for_loader` now sets ``__loader__`` and "
"``__package__`` unconditionally to properly support reloading. If this is "
"not desired then you will need to set these attributes manually. You can "
"use :func:`importlib.util.module_to_load` for module management."
msgstr ""
":meth:`!importlib.util.module_for_loader` ställer nu in ``__loader__`` och "
"``__package__`` villkorslöst för att korrekt stödja omlastning. Om detta "
"inte är önskvärt måste du ställa in dessa attribut manuellt. Du kan använda :"
"func:`importlib.util.module_to_load` för modulhantering."

msgid ""
"Import now resets relevant attributes (e.g. ``__name__``, ``__loader__``, "
"``__package__``, ``__file__``, ``__cached__``) unconditionally when "
"reloading. Note that this restores a pre-3.3 behavior in that it means a "
"module is re-found when re-loaded (:issue:`19413`)."
msgstr ""
"Import återställer nu relevanta attribut (t.ex. ``__name__``, "
"``__loader__``, ``__package__``, ``__file__``, ``__cached__``) villkorslöst "
"när den laddas om. Observera att detta återställer ett pre-3.3-beteende i "
"och med att det innebär att en modul hittas på nytt när den laddas om (:"
"issue:`19413`)."

msgid ""
"Frozen packages no longer set ``__path__`` to a list containing the package "
"name, they now set it to an empty list.  The previous behavior could cause "
"the import system to do the wrong thing on submodule imports if there was "
"also a directory with the same name as the frozen package.  The correct way "
"to determine if a module is a package or not is to use ``hasattr(module, "
"'__path__')`` (:issue:`18065`)."
msgstr ""
"Frusna paket sätter inte längre ``__path__`` till en lista som innehåller "
"paketnamnet, utan nu till en tom lista.  Det tidigare beteendet kunde leda "
"till att importsystemet gjorde fel sak vid import av undermoduler om det "
"också fanns en katalog med samma namn som det frysta paketet.  Det korrekta "
"sättet att avgöra om en modul är ett paket eller inte är att använda "
"``hasattr(module, '__path__')`` (:issue:`18065`)."

msgid ""
"Frozen modules no longer define a ``__file__`` attribute. It's semantically "
"incorrect for frozen modules to set the attribute as they are not loaded "
"from any explicit location. If you must know that a module comes from frozen "
"code then you can see if the module's ``__spec__.location`` is set to "
"``'frozen'``, check if the loader is a subclass of :class:`importlib."
"machinery.FrozenImporter`, or if Python 2 compatibility is necessary you can "
"use :func:`!imp.is_frozen`."
msgstr ""
"Frysta moduler definierar inte längre attributet ``__file__``. Det är "
"semantiskt inkorrekt för frysta moduler att ange attributet eftersom de inte "
"laddas från någon explicit plats. Om du måste veta att en modul kommer från "
"frusen kod kan du se om modulens ``__spec__.location`` är inställd på "
"``'frozen'``, kontrollera om laddaren är en underklass till :class:"
"`importlib.machinery.FrozenImporter`, eller om Python 2-kompatibilitet är "
"nödvändig kan du använda :func:`!imp.is_frozen`."

msgid ""
":func:`py_compile.compile` now raises :exc:`FileExistsError` if the file "
"path it would write to is a symlink or a non-regular file. This is to act as "
"a warning that import will overwrite those files with a regular file "
"regardless of what type of file path they were originally."
msgstr ""
":func:`py_compile.compile` ger nu upphov till :exc:`FileExistsError` om "
"filsökvägen som den skulle skriva till är en symlänk eller en icke-vanlig "
"fil. Detta är för att varna för att importen kommer att skriva över dessa "
"filer med en vanlig fil oavsett vilken typ av filsökväg de ursprungligen "
"hade."

msgid ""
":meth:`importlib.abc.SourceLoader.get_source` no longer raises :exc:"
"`ImportError` when the source code being loaded triggers a :exc:"
"`SyntaxError` or :exc:`UnicodeDecodeError`. As :exc:`ImportError` is meant "
"to be raised only when source code cannot be found but it should, it was "
"felt to be over-reaching/overloading of that meaning when the source code is "
"found but improperly structured. If you were catching ImportError before and "
"wish to continue to ignore syntax or decoding issues, catch all three "
"exceptions now."
msgstr ""
":meth:`importlib.abc.SourceLoader.get_source` ger inte längre upphov till :"
"exc:`ImportError` när källkoden som laddas utlöser ett :exc:`SyntaxError` "
"eller :exc:`UnicodeDecodeError`. Eftersom :exc:`ImportError` endast är "
"avsett att utlösas när källkoden inte kan hittas men borde kunna det, ansågs "
"det vara att gå för långt/överbelasta den betydelsen när källkoden hittas "
"men är felaktigt strukturerad. Om du fångade ImportError tidigare och vill "
"fortsätta att ignorera syntax- eller avkodningsproblem, fånga alla tre "
"undantagen nu."

msgid ""
":func:`functools.update_wrapper` and :func:`functools.wraps` now correctly "
"set the ``__wrapped__`` attribute to the function being wrapped, even if "
"that function also had its ``__wrapped__`` attribute set. This means "
"``__wrapped__`` attributes now correctly link a stack of decorated functions "
"rather than every ``__wrapped__`` attribute in the chain referring to the "
"innermost function. Introspection libraries that assumed the previous "
"behaviour was intentional can use :func:`inspect.unwrap` to access the first "
"function in the chain that has no ``__wrapped__`` attribute."
msgstr ""
":func:`functools.update_wrapper` och :func:`functools.wraps` sätter nu "
"attributet ``__wrapped__`` korrekt till den funktion som omsluts, även om "
"den funktionen också hade attributet ``__wrapped__`` satt. Detta innebär att "
"``__wrapped__``-attribut nu korrekt länkar en stack av dekorerade funktioner "
"snarare än att varje ``__wrapped__``-attribut i kedjan refererar till den "
"innersta funktionen. Introspektionsbibliotek som antog att det tidigare "
"beteendet var avsiktligt kan använda :func:`inspect.unwrap` för att komma åt "
"den första funktionen i kedjan som inte har något ``__wrapped__``-attribut."

msgid ""
":func:`inspect.getfullargspec` has been reimplemented on top of :func:"
"`inspect.signature` and hence handles a much wider variety of callable "
"objects than it did in the past. It is expected that additional builtin and "
"extension module callables will gain signature metadata over the course of "
"the Python 3.4 series. Code that assumes that :func:`inspect.getfullargspec` "
"will fail on non-Python callables may need to be adjusted accordingly."
msgstr ""
":func:`inspect.getfullargspec` har omimplementerats ovanpå :func:`inspect."
"signature` och hanterar därför en mycket större variation av anropsbara "
"objekt än tidigare. Det förväntas att ytterligare inbyggda och "
"tilläggsmodulers anropbara objekt kommer att få signaturmetadata under "
"Python 3.4-seriens gång. Kod som antar att :func:`inspect.getfullargspec` "
"kommer att misslyckas på icke-Python-kallobjekt kan behöva justeras i "
"enlighet med detta."

msgid ""
":class:`importlib.machinery.PathFinder` now passes on the current working "
"directory to objects in :data:`sys.path_hooks` for the empty string. This "
"results in :data:`sys.path_importer_cache` never containing ``''``, thus "
"iterating through :data:`sys.path_importer_cache` based on :data:`sys.path` "
"will not find all keys. A module's ``__file__`` when imported in the current "
"working directory will also now have an absolute path, including when using "
"``-m`` with the interpreter (except for ``__main__.__file__`` when a script "
"has been executed directly using a relative path) (Contributed by Brett "
"Cannon in :issue:`18416`).  is specified on the command-line) (:issue:"
"`18416`)."
msgstr ""
":class:`importlib.machinery.PathFinder` skickar nu vidare den aktuella "
"arbetskatalogen till objekt i :data:`sys.path_hooks` för den tomma strängen. "
"Detta resulterar i att :data:`sys.path_importer_cache` aldrig innehåller "
"``''``, vilket innebär att iterering genom :data:`sys.path_importer_cache` "
"baserat på :data:`sys.path` inte kommer att hitta alla nycklar. En moduls "
"``__file__`` när den importeras i den aktuella arbetskatalogen kommer nu "
"också att ha en absolut sökväg, inklusive när ``-m`` används med tolken "
"(utom för ``__main__.__file__`` när ett skript har exekverats direkt med en "
"relativ sökväg) (Bidrag från Brett Cannon i :issue:`18416`). anges på "
"kommandoraden) (:issue:`18416`)."

msgid ""
"The removal of the *strict* argument to :class:`~http.client.HTTPConnection` "
"and :class:`~http.client.HTTPSConnection` changes the meaning of the "
"remaining arguments if you are specifying them positionally rather than by "
"keyword.  If you've been paying attention to deprecation warnings your code "
"should already be specifying any additional arguments via keywords."
msgstr ""
"Borttagandet av *strict*-argumentet till :class:`~http.client."
"HTTPConnection` och :class:`~http.client.HTTPSConnection` ändrar betydelsen "
"av de återstående argumenten om du anger dem positionellt i stället för med "
"nyckelord.  Om du har varit uppmärksam på deprecation-varningar bör din kod "
"redan ange eventuella ytterligare argument via nyckelord."

msgid ""
"Strings between ``from __future__ import ...`` statements now *always* raise "
"a :exc:`SyntaxError`.  Previously if there was no leading docstring, an "
"interstitial string would sometimes be ignored.  This brings CPython into "
"compliance with the language spec; Jython and PyPy already were. (:issue:"
"`17434`)."
msgstr ""
"Strängar mellan ``from __future__ import ...``-satser ger nu *alltid* upphov "
"till ett :exc:`SyntaxError`.  Tidigare, om det inte fanns någon ledande "
"docstring, kunde en mellanliggande sträng ibland ignoreras.  Detta gör att "
"CPython överensstämmer med språkspecifikationen; Jython och PyPy gjorde det "
"redan. (:issue:`17434`)."

msgid ""
":meth:`ssl.SSLSocket.getpeercert` and :meth:`ssl.SSLSocket.do_handshake` now "
"raise an :exc:`OSError` with ``ENOTCONN`` when the ``SSLSocket`` is not "
"connected, instead of the previous behavior of raising an :exc:"
"`AttributeError`.  In addition, :meth:`~ssl.SSLSocket.getpeercert` will "
"raise a :exc:`ValueError` if the handshake has not yet been done."
msgstr ""
":meth:`ssl.SSLSocket.getpeercert` och :meth:`ssl.SSLSocket.do_handshake` ger "
"nu upphov till ett :exc:`OSError` med ``ENOTCONN`` när ``SSLSocket`` inte är "
"ansluten, istället för det tidigare beteendet att ge upphov till ett :exc:"
"`AttributeError`.  Dessutom kommer :meth:`~ssl.SSLSocket.getpeercert` att ge "
"upphov till ett :exc:`ValueError` om handskakningen ännu inte har genomförts."

msgid ""
":func:`base64.b32decode` now raises a :exc:`binascii.Error` when the input "
"string contains non-b32-alphabet characters, instead of a :exc:`TypeError`.  "
"This particular :exc:`TypeError` was missed when the other :exc:"
"`TypeError`\\ s were converted.  (Contributed by Serhiy Storchaka in :issue:"
"`18011`.)  Note: this change was also inadvertently applied in Python 3.3.3."
msgstr ""
":func:`base64.b32decode` ger nu upphov till ett :exc:`binascii.Error` när "
"indatasträngen innehåller icke-b32-alphabet tecken, istället för ett :exc:"
"`TypeError`.  Detta speciella :exc:`TypeError` missades när de andra :exc:"
"`TypeError` konverterades.  (Bidrag från Serhiy Storchaka i :issue:`18011`.) "
"Observera: denna ändring tillämpades också oavsiktligt i Python 3.3.3."

msgid ""
"The :attr:`!file` attribute is now automatically closed when the creating :"
"class:`!cgi.FieldStorage` instance is garbage collected. If you were pulling "
"the file object out separately from the :class:`!cgi.FieldStorage` instance "
"and not keeping the instance alive, then you should either store the entire :"
"class:`!cgi.FieldStorage` instance or read the contents of the file before "
"the :class:`!cgi.FieldStorage` instance is garbage collected."
msgstr ""
"Attributet :attr:`!file` stängs nu automatiskt när den skapande :class:`!cgi."
"FieldStorage`-instansen garbage collected. Om du drog ut filobjektet separat "
"från :class:`!cgi.FieldStorage`-instansen och inte höll instansen vid liv, "
"bör du antingen lagra hela :class:`!cgi.FieldStorage`-instansen eller läsa "
"innehållet i filen innan :class:`!cgi.FieldStorage`-instansen garbage "
"collected."

msgid ""
"Calling ``read`` or ``write`` on a closed SSL socket now raises an "
"informative :exc:`ValueError` rather than the previous more mysterious :exc:"
"`AttributeError` (:issue:`9177`)."
msgstr ""
"Anrop av ``read`` eller ``write`` på ett stängt SSL-uttag ger nu upphov till "
"ett informativt :exc:`ValueError` istället för det tidigare mer mystiska :"
"exc:`AttributeError` (:issue:`9177`)."

msgid ""
":meth:`slice.indices` no longer produces an :exc:`OverflowError` for huge "
"values.  As a consequence of this fix, :meth:`slice.indices` now raises a :"
"exc:`ValueError` if given a negative length; previously it returned nonsense "
"values (:issue:`14794`)."
msgstr ""
":meth:`slice.indices` producerar inte längre ett :exc:`OverflowError` för "
"stora värden.  Som en konsekvens av denna korrigering ger :meth:`slice."
"indices` nu upphov till ett :exc:`ValueError` om det ges en negativ längd; "
"tidigare returnerade det nonsensvärden (:issue:`14794`)."

msgid ""
"The :class:`complex` constructor, unlike the :mod:`cmath` functions, was "
"incorrectly accepting :class:`float` values if an object's ``__complex__`` "
"special method returned one.  This now raises a :exc:`TypeError`. (:issue:"
"`16290`.)"
msgstr ""
"Konstruktorn :class:`complex`, till skillnad från funktionerna :mod:`cmath`, "
"accepterade felaktigt värdena :class:`float` om objektets specialmetod "
"``__complex__`` returnerade ett värde.  Detta ger nu upphov till ett :exc:"
"`TypeError`. (:issue:`16290`.)"

msgid ""
"The :class:`int` constructor in 3.2 and 3.3 erroneously accepts :class:"
"`float` values for the *base* parameter.  It is unlikely anyone was doing "
"this, but if so, it will now raise a :exc:`TypeError` (:issue:`16772`)."
msgstr ""
"Konstruktorn :class:`int` i 3.2 och 3.3 accepterar felaktigt :class:`float`-"
"värden för parametern *base*.  Det är osannolikt att någon gjorde detta, men "
"om så är fallet kommer det nu att ge upphov till ett :exc:`TypeError` (:"
"issue:`16772`)."

msgid ""
"Defaults for keyword-only arguments are now evaluated *after* defaults for "
"regular keyword arguments, instead of before.  Hopefully no one wrote any "
"code that depends on the previous buggy behavior (:issue:`16967`)."
msgstr ""
"Standardvärden för argument som endast innehåller nyckelord utvärderas nu "
"*efter* standardvärden för vanliga nyckelordsargument, istället för före.  "
"Förhoppningsvis har ingen skrivit någon kod som är beroende av det tidigare "
"buggiga beteendet (:issue:`16967`)."

msgid ""
"Stale thread states are now cleared after :func:`~os.fork`.  This may cause "
"some system resources to be released that previously were incorrectly kept "
"perpetually alive (for example, database connections kept in thread-local "
"storage).  (:issue:`17094`.)"
msgstr ""
"Föråldrade trådtillstånd rensas nu efter :func:`~os.fork`.  Detta kan leda "
"till att vissa systemresurser frigörs som tidigare felaktigt hölls vid liv "
"för evigt (t.ex. databasanslutningar i trådlokal lagring).  (:issue:`17094`.)"

msgid ""
"Parameter names in ``__annotations__`` dicts are now mangled properly, "
"similarly to :attr:`~function.__kwdefaults__`. (Contributed by Yury "
"Selivanov in :issue:`20625`.)"
msgstr ""
"Parameternamn i ``__annotations__``-dikter manglas nu korrekt, på samma sätt "
"som :attr:`~function.__kwdefaults__`. (Bidrag från Yury Selivanov i :issue:"
"`20625`.)"

msgid ""
":attr:`hashlib.hash.name` now always returns the identifier in lower case. "
"Previously some builtin hashes had uppercase names, but now that it is a "
"formal public interface the naming has been made consistent (:issue:`18532`)."
msgstr ""
":attr:`hashlib.hash.name` returnerar nu alltid identifieraren med små "
"bokstäver. Tidigare hade vissa inbyggda hashar namn med versaler, men nu när "
"det är ett formellt offentligt gränssnitt har namngivningen gjorts "
"konsekvent (:issue:`18532`)."

msgid ""
"Because :mod:`unittest.TestSuite` now drops references to tests after they "
"are run, test harnesses that reuse a :class:`~unittest.TestSuite` to re-run "
"a set of tests may fail.   Test suites should not be re-used in this fashion "
"since it means state is retained between test runs, breaking the test "
"isolation that :mod:`unittest` is designed to provide.  However, if the lack "
"of isolation is considered acceptable, the old behavior can be restored by "
"creating a :mod:`~unittest.TestSuite` subclass that defines a "
"``_removeTestAtIndex`` method that does nothing (see :meth:`.TestSuite."
"__iter__`) (:issue:`11798`)."
msgstr ""
"Eftersom :mod:`unittest.TestSuite` nu tappar referenser till tester efter "
"att de har körts, kan testprogram som återanvänder en :class:`~unittest."
"TestSuite` för att köra om en uppsättning tester misslyckas.   Testsviter "
"bör inte återanvändas på det här sättet eftersom det innebär att tillstånd "
"behålls mellan testkörningar, vilket bryter testisoleringen som :mod:"
"`unittest` är utformad för att tillhandahålla.  Men om bristen på isolering "
"anses acceptabel kan det gamla beteendet återställas genom att skapa en :mod:"
"`~unittest.TestSuite`-underklass som definierar en ``_removeTestAtIndex``-"
"metod som inte gör någonting (se :meth:`.TestSuite.__iter__`) (:issue:"
"`11798`)."

msgid ""
":mod:`unittest` now uses :mod:`argparse` for command line parsing.  There "
"are certain invalid command forms that used to work that are no longer "
"allowed; in theory this should not cause backward compatibility issues since "
"the disallowed command forms didn't make any sense and are unlikely to be in "
"use."
msgstr ""
":mod:`unittest` använder nu :mod:`argparse` för kommandoradsanalys.  Det "
"finns vissa ogiltiga kommandoformer som tidigare fungerade och som inte "
"längre tillåts; i teorin bör detta inte orsaka problem med "
"bakåtkompatibilitet eftersom de otillåtna kommandoformerna inte var "
"meningsfulla och troligen inte används."

msgid ""
"The :func:`re.split`, :func:`re.findall`, and :func:`re.sub` functions, and "
"the :meth:`~re.match.group` and :meth:`~re.match.groups` methods of "
"``match`` objects now always return a *bytes* object when the string to be "
"matched is a :term:`bytes-like object`.  Previously the return type matched "
"the input type, so if your code was depending on the return value being, "
"say, a ``bytearray``, you will need to change your code."
msgstr ""
"Funktionerna :func:`re.split`, :func:`re.findall`, och :func:`re.sub`, samt "
"metoderna :meth:`~re.match.group` och :meth:`~re.match.groups` för ``match``-"
"objekt returnerar nu alltid ett *bytes*-objekt när strängen som ska matchas "
"är ett :term:`bytes-liknande objekt`.  Tidigare matchade returtypen "
"indatatypen, så om din kod var beroende av att returvärdet var, säg, en "
"``bytearray``, måste du ändra din kod."

msgid ""
":mod:`!audioop` functions now raise an error immediately if passed string "
"input, instead of failing randomly later on (:issue:`16685`)."
msgstr ""
":mod:`!audioop`-funktioner ger nu upphov till ett fel omedelbart om de får "
"stränginmatning, istället för att misslyckas slumpmässigt senare (:issue:"
"`16685`)."

msgid ""
"The new *convert_charrefs* argument to :class:`~html.parser.HTMLParser` "
"currently defaults to ``False`` for backward compatibility, but will "
"eventually be changed to default to ``True``.  It is recommended that you "
"add this keyword, with the appropriate value, to any :class:`~html.parser."
"HTMLParser` calls in your code (:issue:`13633`)."
msgstr ""
"Det nya argumentet *convert_charrefs* till :class:`~html.parser.HTMLParser` "
"har för närvarande ``False`` som standard för bakåtkompatibilitet, men "
"kommer så småningom att ändras till ``True`` som standard.  Det "
"rekommenderas att du lägger till detta nyckelord, med lämpligt värde, till "
"alla :class:`~html.parser.HTMLParser`-anrop i din kod (:issue:`13633`)."

msgid ""
"Since the *digestmod* argument to the :func:`hmac.new` function will in the "
"future have no default, all calls to :func:`hmac.new` should be changed to "
"explicitly specify a *digestmod* (:issue:`17276`)."
msgstr ""
"Eftersom argumentet *digestmod* till funktionen :func:`hmac.new` i framtiden "
"inte kommer att ha någon standard, bör alla anrop till :func:`hmac.new` "
"ändras så att de uttryckligen anger en *digestmod* (:issue:`17276`)."

msgid ""
"Calling :func:`sysconfig.get_config_var` with the ``SO`` key, or looking "
"``SO`` up in the results of a call to :func:`sysconfig.get_config_vars` is "
"deprecated.  This key should be replaced by ``EXT_SUFFIX`` or "
"``SHLIB_SUFFIX``, depending on the context (:issue:`19555`)."
msgstr ""
"Att anropa :func:`sysconfig.get_config_var` med nyckeln ``SO``, eller att "
"leta upp ``SO`` i resultatet av ett anrop till :func:`sysconfig."
"get_config_vars` är föråldrat.  Denna nyckel bör ersättas av ``EXT_SUFFIX`` "
"eller ``SHLIB_SUFFIX``, beroende på sammanhanget (:issue:`19555`)."

msgid ""
"Any calls to ``open`` functions that specify ``U`` should be modified. ``U`` "
"is ineffective in Python3 and will eventually raise an error if used. "
"Depending on the function, the equivalent of its old Python2 behavior can be "
"achieved using either a *newline* argument, or if necessary by wrapping the "
"stream in :mod:`~io.TextIOWrapper` to use its *newline* argument (:issue:"
"`15204`)."
msgstr ""
"Alla anrop till ``open`` funktioner som specificerar ``U`` bör modifieras. "
"``U`` är ineffektivt i Python3 och kommer så småningom att ge upphov till "
"ett fel om det används. Beroende på funktionen kan motsvarigheten till dess "
"gamla Python2-beteende uppnås genom att använda antingen ett *newline*-"
"argument, eller om nödvändigt genom att paketera strömmen i :mod:`~io."
"TextIOWrapper` för att använda dess *newline*-argument (:issue:`15204`)."

msgid ""
"If you use ``pyvenv`` in a script and desire that pip *not* be installed, "
"you must add ``--without-pip`` to your command invocation."
msgstr ""
"Om du använder ``pyvenv`` i ett skript och vill att pip *inte* ska "
"installeras måste du lägga till ``--without-pip`` i din kommandoupprop."

msgid ""
"The default behavior of :func:`json.dump` and :func:`json.dumps` when an "
"indent is specified has changed: it no longer produces trailing spaces after "
"the item separating commas at the ends of lines.  This will matter only if "
"you have tests that are doing white-space-sensitive comparisons of such "
"output (:issue:`16333`)."
msgstr ""
"Standardbeteendet för :func:`json.dump` och :func:`json.dumps` när ett "
"indrag anges har ändrats: det producerar inte längre efterföljande "
"mellanslag efter kommatecken i slutet av rader.  Detta kommer endast att ha "
"betydelse om du har tester som gör jämförelser av sådana utdata med känsligt "
"blanksteg (:issue:`16333`)."

msgid ""
":mod:`doctest` now looks for doctests in extension module ``__doc__`` "
"strings, so if your doctest test discovery includes extension modules that "
"have things that look like doctests in them you may see test failures you've "
"never seen before when running your tests (:issue:`3158`)."
msgstr ""
":mod:`doctest` letar nu efter doctests i tilläggsmodulens ``__doc__`` "
"strängar, så om din doctest-testupptäckt inkluderar tilläggsmoduler som har "
"saker som ser ut som doctests i dem kan du se testfel som du aldrig sett "
"tidigare när du kör dina tester (:issue:`3158`)."

msgid ""
"The :mod:`collections.abc` module has been slightly refactored as part of "
"the Python startup improvements.  As a consequence of this, it is no longer "
"the case that importing :mod:`collections` automatically imports :mod:"
"`collections.abc`.  If your program depended on the (undocumented) implicit "
"import, you will need to add an explicit ``import collections.abc`` (:issue:"
"`20784`)."
msgstr ""
"Modulen :mod:`collections.abc` har omarbetats något som en del av Pythons "
"uppstartsförbättringar.  Som en konsekvens av detta är det inte längre så "
"att import av :mod:`collections` automatiskt importerar :mod:`collections."
"abc`.  Om ditt program var beroende av den (odokumenterade) implicita "
"importen, måste du lägga till en explicit ``import collections.abc`` (:issue:"
"`20784`)."

msgid "Changes in the C API"
msgstr "Förändringar i C API"

msgid ""
":c:func:`PyEval_EvalFrameEx`, :c:func:`PyObject_Repr`, and :c:func:"
"`PyObject_Str`, along with some other internal C APIs, now include a "
"debugging assertion that ensures they are not used in situations where they "
"may silently discard a currently active exception. In cases where discarding "
"the active exception is expected and desired (for example, because it has "
"already been saved locally with :c:func:`PyErr_Fetch` or is being "
"deliberately replaced with a different exception), an explicit :c:func:"
"`PyErr_Clear` call will be needed to avoid triggering the assertion when "
"invoking these operations (directly or indirectly) and running against a "
"version of Python that is compiled with assertions enabled."
msgstr ""
":c:func:`PyEval_EvalFrameEx`, :c:func:`PyObject_Repr` och :c:func:"
"`PyObject_Str`, tillsammans med några andra interna C API:er, innehåller nu "
"ett felsökningsuttalande som säkerställer att de inte används i situationer "
"där de tyst kan kasta bort ett för närvarande aktivt undantag. I fall där "
"det aktiva undantaget förväntas och önskas kasseras (till exempel för att "
"det redan har sparats lokalt med :c:func:`PyErr_Fetch` eller avsiktligt "
"ersätts med ett annat undantag), kommer ett uttryckligt :c:func:"
"`PyErr_Clear`-anrop att behövas för att undvika att påståendet utlöses när "
"dessa operationer anropas (direkt eller indirekt) och körs mot en version av "
"Python som är kompilerad med påståenden aktiverade."

msgid ""
":c:func:`PyErr_SetImportError` now sets :exc:`TypeError` when its **msg** "
"argument is not set. Previously only ``NULL`` was returned with no exception "
"set."
msgstr ""
":c:func:`PyErr_SetImportError` sätter nu :exc:`TypeError` när dess **msg** "
"argument inte är satt. Tidigare returnerades endast ``NULL`` utan att något "
"undantag angavs."

msgid ""
"The result of the :c:data:`PyOS_ReadlineFunctionPointer` callback must now "
"be a string allocated by :c:func:`PyMem_RawMalloc` or :c:func:"
"`PyMem_RawRealloc`, or ``NULL`` if an error occurred, instead of a string "
"allocated by :c:func:`PyMem_Malloc` or :c:func:`PyMem_Realloc` (:issue:"
"`16742`)"
msgstr ""
"Resultatet av anropet :c:data:`PyOS_ReadlineFunctionPointer` måste nu vara "
"en sträng som allokerats av :c:func:`PyMem_RawMalloc` eller :c:func:"
"`PyMem_RawRealloc`, eller ``NULL`` om ett fel inträffade, istället för en "
"sträng som allokerats av :c:func:`PyMem_Malloc` eller :c:func:"
"`PyMem_Realloc` (:issue:`16742``)"

msgid ""
":c:func:`PyThread_set_key_value` now always set the value. In Python 3.3, "
"the function did nothing if the key already exists (if the current value is "
"a non-``NULL`` pointer)."
msgstr ""
":c:func:`PyThread_set_key_value` sätter nu alltid värdet. I Python 3.3 "
"gjorde funktionen ingenting om nyckeln redan fanns (om det aktuella värdet "
"är en pekare som inte är ``NULL``)."

msgid ""
"The ``f_tstate`` (thread state) field of the :c:type:`PyFrameObject` "
"structure has been removed to fix a bug: see :issue:`14432` for the "
"rationale."
msgstr ""
"Fältet ``f_tstate`` (thread state) i :c:type:`PyFrameObject`-strukturen har "
"tagits bort för att åtgärda ett fel: se :issue:`14432` för motiveringen."

msgid "Changed in 3.4.3"
msgstr "Ändrat i 3.4.3"

msgid ""
"PEP 476: Enabling certificate verification by default for stdlib http clients"
msgstr ""
"PEP 476: Aktivera certifikatverifiering som standard för stdlib http-klienter"

msgid ""
":mod:`http.client` and modules which use it, such as :mod:`urllib.request` "
"and :mod:`xmlrpc.client`, will now verify that the server presents a "
"certificate which is signed by a CA in the platform trust store and whose "
"hostname matches the hostname being requested by default, significantly "
"improving security for many applications."
msgstr ""
":mod:`http.client` och moduler som använder den, t.ex. :mod:`urllib.request` "
"och :mod:`xmlrpc.client`, kommer nu att verifiera att servern presenterar "
"ett certifikat som är signerat av en CA i plattformens trust store och vars "
"värdnamn matchar det värdnamn som begärs som standard, vilket avsevärt "
"förbättrar säkerheten för många applikationer."

msgid ""
"For applications which require the old previous behavior, they can pass an "
"alternate context::"
msgstr ""
"För applikationer som kräver det gamla tidigare beteendet kan de skicka en "
"alternativ context::"

msgid ""
"import urllib.request\n"
"import ssl\n"
"\n"
"# This disables all verification\n"
"context = ssl._create_unverified_context()\n"
"\n"
"# This allows using a specific certificate for the host, which doesn't need\n"
"# to be in the trust store\n"
"context = ssl.create_default_context(cafile=\"/path/to/file.crt\")\n"
"\n"
"urllib.request.urlopen(\"https://invalid-cert\", context=context)"
msgstr ""
"import urllib.request\n"
"import ssl\n"
"\n"
"# This disables all verification\n"
"context = ssl._create_unverified_context()\n"
"\n"
"# This allows using a specific certificate for the host, which doesn't need\n"
"# to be in the trust store\n"
"context = ssl.create_default_context(cafile=\"/path/to/file.crt\")\n"
"\n"
"urllib.request.urlopen(\"https://invalid-cert\", context=context)"
