# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 20:38+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Initialization, Finalization, and Threads"
msgstr "Initialisering, slutförande och trådar"

msgid ""
"See :ref:`Python Initialization Configuration <init-config>` for details on "
"how to configure the interpreter prior to initialization."
msgstr ""
"Se :ref:`Python Initialization Configuration <init-config>` för detaljer om "
"hur man konfigurerar tolken före initialiseringen."

msgid "Before Python Initialization"
msgstr "Före initialisering av Python"

msgid ""
"In an application embedding  Python, the :c:func:`Py_Initialize` function "
"must be called before using any other Python/C API functions; with the "
"exception of a few functions and the :ref:`global configuration variables "
"<global-conf-vars>`."
msgstr ""
"I ett program som innehåller Python måste funktionen :c:func:`Py_Initialize` "
"anropas innan några andra Python/C API-funktioner används, med undantag för "
"några få funktioner och :ref:`globala konfigurationsvariabler <global-conf-"
"vars>`."

msgid ""
"The following functions can be safely called before Python is initialized:"
msgstr "Följande funktioner kan anropas innan Python har initialiserats:"

msgid "Functions that initialize the interpreter:"
msgstr "Funktioner som initierar tolken:"

msgid ":c:func:`Py_Initialize`"
msgstr ":c:func:`Py_Initialize`"

msgid ":c:func:`Py_InitializeEx`"
msgstr ":c:func:`Py_InitializeEx`"

msgid ":c:func:`Py_InitializeFromConfig`"
msgstr ":c:func:`Py_InitializeFromConfig`"

msgid ":c:func:`Py_BytesMain`"
msgstr ":c:func:`Py_BytesMain`"

msgid ":c:func:`Py_Main`"
msgstr ":c:func:`Py_Main`"

msgid "the runtime pre-initialization functions covered in :ref:`init-config`"
msgstr ""
"de förinitialiseringsfunktioner för körtid som omfattas av :ref:`init-config`"

msgid "Configuration functions:"
msgstr "Konfigurationsfunktioner:"

msgid ":c:func:`PyImport_AppendInittab`"
msgstr ":c:func:`PyImport_AppendInittab`"

msgid ":c:func:`PyImport_ExtendInittab`"
msgstr ":c:func:`PyImport_ExtendInittab`"

msgid ":c:func:`!PyInitFrozenExtensions`"
msgstr ":c:func:`!PyInitFrozenExtensions`"

msgid ":c:func:`PyMem_SetAllocator`"
msgstr ":c:func:`PyMem_SetAllocator`"

msgid ":c:func:`PyMem_SetupDebugHooks`"
msgstr ":c:func:`PyMem_SetupDebugHooks`"

msgid ":c:func:`PyObject_SetArenaAllocator`"
msgstr ":c:func:`PyObject_SetArenaAllocator`"

msgid ":c:func:`Py_SetProgramName`"
msgstr ":c:func:`Py_SetProgramName`"

msgid ":c:func:`Py_SetPythonHome`"
msgstr ":c:func:`Py_SetPythonHome`"

msgid ":c:func:`PySys_ResetWarnOptions`"
msgstr ":c:func:`PySys_ResetWarnOptions`"

msgid "the configuration functions covered in :ref:`init-config`"
msgstr "konfigurationsfunktionerna som beskrivs i :ref:`init-config`"

msgid "Informative functions:"
msgstr "Informativa funktioner:"

msgid ":c:func:`Py_IsInitialized`"
msgstr ":c:func:`Py_IsInitialized`"

msgid ":c:func:`PyMem_GetAllocator`"
msgstr ":c:func:`PyMem_GetAllocator`"

msgid ":c:func:`PyObject_GetArenaAllocator`"
msgstr ":c:func:`PyObject_GetArenaAllocator`"

msgid ":c:func:`Py_GetBuildInfo`"
msgstr ":c:func:`Py_GetBuildInfo`"

msgid ":c:func:`Py_GetCompiler`"
msgstr ":c:func:`Py_GetCompiler`"

msgid ":c:func:`Py_GetCopyright`"
msgstr ":c:func:`Py_GetCopyright`"

msgid ":c:func:`Py_GetPlatform`"
msgstr ":c:func:`Py_GetPlatform`"

msgid ":c:func:`Py_GetVersion`"
msgstr ":c:func:`Py_GetVersion`"

msgid "Utilities:"
msgstr "Verktyg:"

msgid ":c:func:`Py_DecodeLocale`"
msgstr ":c:func:`Py_DecodeLocale`"

msgid ""
"the status reporting and utility functions covered in :ref:`init-config`"
msgstr ""
"de statusrapporterings- och verktygsfunktioner som beskrivs i :ref:`init-"
"config`"

msgid "Memory allocators:"
msgstr "Minnesallokatorer:"

msgid ":c:func:`PyMem_RawMalloc`"
msgstr ":c:func:`PyMem_RawMalloc`"

msgid ":c:func:`PyMem_RawRealloc`"
msgstr ":c:func:`PyMem_RawRealloc`"

msgid ":c:func:`PyMem_RawCalloc`"
msgstr ":c:func:`PyMem_RawCalloc`"

msgid ":c:func:`PyMem_RawFree`"
msgstr ":c:func:`PyMem_RawFree`"

msgid "Synchronization:"
msgstr "Synkronisering:"

msgid ":c:func:`PyMutex_Lock`"
msgstr ":c:func:`PyMutex_Lock`"

msgid ":c:func:`PyMutex_Unlock`"
msgstr ":c:func:`PyMutex_Unlock`"

msgid ""
"Despite their apparent similarity to some of the functions listed above, the "
"following functions **should not be called** before the interpreter has been "
"initialized: :c:func:`Py_EncodeLocale`, :c:func:`Py_GetPath`, :c:func:"
"`Py_GetPrefix`, :c:func:`Py_GetExecPrefix`, :c:func:"
"`Py_GetProgramFullPath`, :c:func:`Py_GetPythonHome`, :c:func:"
"`Py_GetProgramName`, :c:func:`PyEval_InitThreads`, and :c:func:`Py_RunMain`."
msgstr ""
"Trots deras uppenbara likhet med några av de funktioner som listas ovan, bör "
"följande funktioner **inte anropas** innan tolken har initialiserats: :c:"
"func:`Py_EncodeLocale`, :c:func:`Py_GetPath`, :c:func:`Py_GetPrefix`, :c:"
"func:`Py_GetExecPrefix`, :c:func:`Py_GetProgramFullPath`, :c:func:"
"`Py_GetPythonHome`, :c:func:`Py_GetProgramName`, :c:func:"
"`PyEval_InitThreads`, och :c:func:`Py_RunMain`."

msgid "Global configuration variables"
msgstr "Variabler för global konfiguration"

msgid ""
"Python has variables for the global configuration to control different "
"features and options. By default, these flags are controlled by :ref:"
"`command line options <using-on-interface-options>`."
msgstr ""
"Python har variabler för den globala konfigurationen för att styra olika "
"funktioner och alternativ. Som standard styrs dessa flaggor av :ref:"
"``kommandoradsalternativ <using-on-interface-options>`."

msgid ""
"When a flag is set by an option, the value of the flag is the number of "
"times that the option was set. For example, ``-b`` sets :c:data:"
"`Py_BytesWarningFlag` to 1 and ``-bb`` sets :c:data:`Py_BytesWarningFlag` to "
"2."
msgstr ""
"När en flagga anges av ett alternativ är flaggans värde det antal gånger som "
"alternativet har angetts. Till exempel sätter ``-b`` :c:data:"
"`Py_BytesWarningFlag` till 1 och ``-bb`` sätter :c:data:"
"`Py_BytesWarningFlag` till 2."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"bytes_warning` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningen :c:member:`PyConfig."
"bytes_warning` bör användas istället, se :ref:`Python Initialization "
"Configuration <init-config>`."

msgid ""
"Issue a warning when comparing :class:`bytes` or :class:`bytearray` with :"
"class:`str` or :class:`bytes` with :class:`int`.  Issue an error if greater "
"or equal to ``2``."
msgstr ""
"Utfärda en varning när du jämför :class:`bytes` eller :class:`bytearray` "
"med :class:`str` eller :class:`bytes` med :class:`int`.  Utfärda ett fel om "
"det är större än eller lika med ``2``."

msgid "Set by the :option:`-b` option."
msgstr "Ställs in av alternativet :option:`-b`."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"parser_debug` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningen :c:member:`PyConfig."
"parser_debug` bör användas istället, se :ref:`Python Initialization "
"Configuration <init-config>`."

msgid ""
"Turn on parser debugging output (for expert only, depending on compilation "
"options)."
msgstr ""
"Aktivera felsökningsutmatning för parser (endast för experter, beroende på "
"kompileringsalternativ)."

msgid ""
"Set by the :option:`-d` option and the :envvar:`PYTHONDEBUG` environment "
"variable."
msgstr ""
"Ställs in av alternativet :option:`-d` och miljövariabeln :envvar:"
"`PYTHONDEBUG`."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"write_bytecode` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställning :c:member:`PyConfig."
"write_bytecode` bör användas istället, se :ref:`Python Initialization "
"Configuration <init-config>`."

msgid ""
"If set to non-zero, Python won't try to write ``.pyc`` files on the import "
"of source modules."
msgstr ""
"Om den är satt till icke-noll kommer Python inte att försöka skriva ``.pyc``-"
"filer vid import av källmoduler."

msgid ""
"Set by the :option:`-B` option and the :envvar:`PYTHONDONTWRITEBYTECODE` "
"environment variable."
msgstr ""
"Ställs in av alternativet :option:`-B` och miljövariabeln :envvar:"
"`PYTHONDONTWRITEBYTECODE`."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"pathconfig_warnings` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningen :c:member:`PyConfig."
"pathconfig_warnings` bör användas istället, se :ref:`Python Initialization "
"Configuration <init-config>`."

msgid ""
"Suppress error messages when calculating the module search path in :c:func:"
"`Py_GetPath`."
msgstr ""
"Undertrycker felmeddelanden vid beräkning av modulens sökväg i :c:func:"
"`Py_GetPath`."

msgid "Private flag used by ``_freeze_module`` and ``frozenmain`` programs."
msgstr ""
"Privat flagga som används av programmen ``_freeze_module`` och "
"``frozenmain``."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"hash_seed` and :c:member:`PyConfig.use_hash_seed` should be used instead, "
"see :ref:`Python Initialization Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningarna :c:member:"
"`PyConfig.hash_seed` och :c:member:`PyConfig.use_hash_seed` bör användas "
"istället, se :ref:`Python Initialization Configuration <init-config>`."

msgid ""
"Set to ``1`` if the :envvar:`PYTHONHASHSEED` environment variable is set to "
"a non-empty string."
msgstr ""
"Sätts till ``1`` om miljövariabeln :envvar:`PYTHONHASHSEED` är satt till en "
"icke-tom sträng."

msgid ""
"If the flag is non-zero, read the :envvar:`PYTHONHASHSEED` environment "
"variable to initialize the secret hash seed."
msgstr ""
"Om flaggan inte är noll, läs miljövariabeln :envvar:`PYTHONHASHSEED` för att "
"initiera det hemliga hashfröet."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"use_environment` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningen :c:member:`PyConfig."
"use_environment` bör användas istället, se :ref:`Python Initialization "
"Configuration <init-config>`."

msgid ""
"Ignore all :envvar:`!PYTHON*` environment variables, e.g. :envvar:"
"`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr ""
"Ignorera alla :envvar:`!PYTHON*` miljövariabler, t.ex. :envvar:`PYTHONPATH` "
"och :envvar:`PYTHONHOME`, som kan vara inställda."

msgid "Set by the :option:`-E` and :option:`-I` options."
msgstr "Ställs in av alternativen :option:`-E` och :option:`-I`."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"inspect` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningen :c:member:`PyConfig."
"inspect` bör användas istället, se :ref:`Python Initialization Configuration "
"<init-config>`."

msgid ""
"When a script is passed as first argument or the :option:`-c` option is "
"used, enter interactive mode after executing the script or the command, even "
"when :data:`sys.stdin` does not appear to be a terminal."
msgstr ""
"När ett skript anges som första argument eller alternativet :option:`-c` "
"används, gå till interaktivt läge efter att skriptet eller kommandot har "
"exekverats, även om :data:`sys.stdin` inte verkar vara en terminal."

msgid ""
"Set by the :option:`-i` option and the :envvar:`PYTHONINSPECT` environment "
"variable."
msgstr ""
"Ställs in av alternativet :option:`-i` och miljövariabeln :envvar:"
"`PYTHONINSPECT`."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"interactive` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställning :c:member:`PyConfig."
"interactive` bör användas istället, se :ref:`Python Initialization "
"Configuration <init-config>`."

msgid "Set by the :option:`-i` option."
msgstr "Ställs in av alternativet :option:`-i`."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"isolated` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningen :c:member:`PyConfig."
"isolated` bör användas istället, se :ref:`Python Initialization "
"Configuration <init-config>`."

msgid ""
"Run Python in isolated mode. In isolated mode :data:`sys.path` contains "
"neither the script's directory nor the user's site-packages directory."
msgstr ""
"Kör Python i isolerat läge. I isolerat läge innehåller :data:`sys.path` "
"varken skriptets katalog eller användarens site-packages-katalog."

msgid "Set by the :option:`-I` option."
msgstr "Ställs in av alternativet :option:`-I`."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` should be used instead, see :ref:`Python "
"Initialization Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningen :c:member:"
"`PyPreConfig.legacy_windows_fs_encoding` bör användas istället, se :ref:"
"`Python Initialization Configuration <init-config>`."

msgid ""
"If the flag is non-zero, use the ``mbcs`` encoding with ``replace`` error "
"handler, instead of the UTF-8 encoding with ``surrogatepass`` error handler, "
"for the :term:`filesystem encoding and error handler`."
msgstr ""
"Om flaggan är icke-noll, använd ``mbcs``-kodning med ``replace``-"
"felhantering, istället för UTF-8-kodning med ``surrogatepass``-felhantering, "
"för :term:`filsystemkodning och felhantering`."

msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` environment "
"variable is set to a non-empty string."
msgstr ""
"Sätts till ``1`` om miljövariabeln :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"är satt till en icke-tom sträng."

msgid "See :pep:`529` for more details."
msgstr "Se :pep:`529` för mer information."

msgid "Availability"
msgstr "Tillgänglighet"

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"legacy_windows_stdio` should be used instead, see :ref:`Python "
"Initialization Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställning :c:member:`PyConfig."
"legacy_windows_stdio` bör användas istället, se :ref:`Python Initialization "
"Configuration <init-config>`."

msgid ""
"If the flag is non-zero, use :class:`io.FileIO` instead of :class:`!io."
"_WindowsConsoleIO` for :mod:`sys` standard streams."
msgstr ""
"Om flaggan inte är noll, använd :class:`io.FileIO` istället för :class:`!io."
"_WindowsConsoleIO` för :mod:`sys` standardströmmar."

msgid ""
"Set to ``1`` if the :envvar:`PYTHONLEGACYWINDOWSSTDIO` environment variable "
"is set to a non-empty string."
msgstr ""
"Sätts till ``1`` om miljövariabeln :envvar:`PYTHONLEGACYWINDOWSSTDIO` är "
"satt till en icke-tom sträng."

msgid "See :pep:`528` for more details."
msgstr "Se :pep:`528` för mer information."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"site_import` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningen :c:member:`PyConfig."
"site_import` bör användas istället, se :ref:`Python Initialization "
"Configuration <init-config>`."

msgid ""
"Disable the import of the module :mod:`site` and the site-dependent "
"manipulations of :data:`sys.path` that it entails.  Also disable these "
"manipulations if :mod:`site` is explicitly imported later (call :func:`site."
"main` if you want them to be triggered)."
msgstr ""
"Inaktivera importen av modulen :mod:`site` och de platsberoende "
"manipuleringarna av :data:`sys.path` som den medför.  Inaktivera även dessa "
"manipuleringar om :mod:`site` uttryckligen importeras senare (anropa :func:"
"`site.main` om du vill att de ska utlösas)."

msgid "Set by the :option:`-S` option."
msgstr "Ställs in av alternativet :option:`-S`."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"user_site_directory` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningen :c:member:`PyConfig."
"user_site_directory` bör användas istället, se :ref:`Python Initialization "
"Configuration <init-config>`."

msgid ""
"Don't add the :data:`user site-packages directory <site.USER_SITE>` to :data:"
"`sys.path`."
msgstr ""
"Lägg inte till katalogen :data:`user site-packages <site.USER_SITE>` i :data:"
"`sys.path`."

msgid ""
"Set by the :option:`-s` and :option:`-I` options, and the :envvar:"
"`PYTHONNOUSERSITE` environment variable."
msgstr ""
"Ställs in av alternativen :option:`-s` och :option:`-I` samt miljövariabeln :"
"envvar:`PYTHONNOUSERSITE`."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"optimization_level` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningen :c:member:`PyConfig."
"optimization_level` bör användas istället, se :ref:`Python Initialization "
"Configuration <init-config>`."

msgid ""
"Set by the :option:`-O` option and the :envvar:`PYTHONOPTIMIZE` environment "
"variable."
msgstr ""
"Ställs in av alternativet :option:`-O` och miljövariabeln :envvar:"
"`PYTHONOPTIMIZE`."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"quiet` should be used instead, see :ref:`Python Initialization Configuration "
"<init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningen :c:member:`PyConfig."
"quiet` bör användas istället, se :ref:`Python Initialization Configuration "
"<init-config>`."

msgid ""
"Don't display the copyright and version messages even in interactive mode."
msgstr "Visa inte copyright- och versionsmeddelanden ens i interaktivt läge."

msgid "Set by the :option:`-q` option."
msgstr "Ställs in av alternativet :option:`-q`."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"buffered_stdio` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställning :c:member:`PyConfig."
"buffered_stdio` bör användas istället, se :ref:`Python Initialization "
"Configuration <init-config>`."

msgid "Force the stdout and stderr streams to be unbuffered."
msgstr "Tvinga stdout- och stderr-strömmarna att vara obuffrade."

msgid ""
"Set by the :option:`-u` option and the :envvar:`PYTHONUNBUFFERED` "
"environment variable."
msgstr ""
"Ställs in av alternativet :option:`-u` och miljövariabeln :envvar:"
"`PYTHONUNBUFFERED`."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"verbose` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningen :c:member:`PyConfig."
"verbose` bör användas istället, se :ref:`Python Initialization Configuration "
"<init-config>`."

msgid ""
"Print a message each time a module is initialized, showing the place "
"(filename or built-in module) from which it is loaded.  If greater or equal "
"to ``2``, print a message for each file that is checked for when searching "
"for a module. Also provides information on module cleanup at exit."
msgstr ""
"Varje gång en modul initieras skrivs ett meddelande ut som visar varifrån "
"den laddats (filnamn eller inbyggd modul).  Om värdet är större än eller "
"lika med ``2``, skrivs ett meddelande ut för varje fil som kontrolleras vid "
"sökning efter en modul. Ger också information om modulrensning vid "
"avslutning."

msgid ""
"Set by the :option:`-v` option and the :envvar:`PYTHONVERBOSE` environment "
"variable."
msgstr ""
"Ställs in av alternativet :option:`-v` och miljövariabeln :envvar:"
"`PYTHONVERBOSE`."

msgid "Initializing and finalizing the interpreter"
msgstr "Initialisering och slutbehandling av tolken"

msgid ""
"Initialize the Python interpreter.  In an application embedding  Python, "
"this should be called before using any other Python/C API functions; see :"
"ref:`Before Python Initialization <pre-init-safe>` for the few exceptions."
msgstr ""
"Initialiserar Python-tolken.  I ett program som bäddar in Python bör detta "
"anropas innan du använder några andra Python/C API-funktioner; se :ref:``För "
"Python-initialisering <pre-init-safe>` för de få undantagen."

msgid ""
"This initializes the table of loaded modules (``sys.modules``), and creates "
"the fundamental modules :mod:`builtins`, :mod:`__main__` and :mod:`sys`. It "
"also initializes the module search path (``sys.path``). It does not set "
"``sys.argv``; use the :ref:`Python Initialization Configuration <init-"
"config>` API for that. This is a no-op when called for a second time "
"(without calling :c:func:`Py_FinalizeEx` first).  There is no return value; "
"it is a fatal error if the initialization fails."
msgstr ""
"Detta initierar tabellen över inlästa moduler (``sys.modules``) och skapar "
"de grundläggande modulerna :mod:`builtins`, :mod:`__main__` och :mod:`sys`. "
"Den initialiserar också sökvägen för modulerna (``sys.path``). Den ställer "
"inte in ``sys.argv``; använd :ref:`Python Initialization Configuration <init-"
"config>` API för det. Detta är en no-op när den anropas en andra gång (utan "
"att anropa :c:func:`Py_FinalizeEx` först).  Det finns inget returvärde; det "
"är ett fatalt fel om initialiseringen misslyckas."

msgid ""
"Use :c:func:`Py_InitializeFromConfig` to customize the :ref:`Python "
"Initialization Configuration <init-config>`."
msgstr ""
"Använd :c:func:`Py_InitializeFromConfig` för att anpassa :ref:`Python "
"Initialization Configuration <init-config>`."

msgid ""
"On Windows, changes the console mode from ``O_TEXT`` to ``O_BINARY``, which "
"will also affect non-Python uses of the console using the C Runtime."
msgstr ""
"I Windows ändras konsolläget från ``O_TEXT`` till ``O_BINARY``, vilket också "
"påverkar konsolanvändning som inte är Python och som använder C Runtime."

msgid ""
"This function works like :c:func:`Py_Initialize` if *initsigs* is ``1``. If "
"*initsigs* is ``0``, it skips initialization registration of signal "
"handlers, which may be useful when CPython is embedded as part of a larger "
"application."
msgstr ""
"Denna funktion fungerar som :c:func:`Py_Initialize` om *initsigs* är ``1``. "
"Om *initsigs* är ``0`` hoppar den över initialiseringsregistreringen av "
"signalhanterare, vilket kan vara användbart när CPython är inbäddat som en "
"del av ett större program."

msgid ""
"Initialize Python from *config* configuration, as described in :ref:`init-"
"from-config`."
msgstr ""
"Initiera Python från *config*-konfigurationen, enligt beskrivningen i :ref:"
"`init-from-config`."

msgid ""
"See the :ref:`init-config` section for details on pre-initializing the "
"interpreter, populating the runtime configuration structure, and querying "
"the returned status structure."
msgstr ""
"Se avsnittet :ref:`init-config` för mer information om hur du förinitierar "
"tolken, fyller i konfigurationsstrukturen för körtid och frågar efter den "
"returnerade statusstrukturen."

msgid ""
"Return true (nonzero) when the Python interpreter has been initialized, "
"false (zero) if not.  After :c:func:`Py_FinalizeEx` is called, this returns "
"false until :c:func:`Py_Initialize` is called again."
msgstr ""
"Returnerar true (icke-noll) när Python-tolken har initialiserats, false "
"(noll) om så inte är fallet.  Efter anrop av :c:func:`Py_FinalizeEx` "
"returneras false tills :c:func:`Py_Initialize` anropas igen."

msgid ""
"Return true (non-zero) if the main Python interpreter is :term:`shutting "
"down <interpreter shutdown>`. Return false (zero) otherwise."
msgstr ""
"Returnerar true (icke-noll) om Pythons huvudtolk :term:`stänger ner "
"<interpreter shutdown>`. Returnerar false (noll) annars."

msgid ""
"Undo all initializations made by :c:func:`Py_Initialize` and subsequent use "
"of Python/C API functions, and destroy all sub-interpreters (see :c:func:"
"`Py_NewInterpreter` below) that were created and not yet destroyed since the "
"last call to :c:func:`Py_Initialize`.  This is a no-op when called for a "
"second time (without calling :c:func:`Py_Initialize` again first)."
msgstr ""
"Ångra alla initialiseringar som gjorts av :c:func:`Py_Initialize` och "
"efterföljande användning av Python/C API-funktioner, och förstör alla "
"undertolkare (se :c:func:`Py_NewInterpreter` nedan) som skapats och ännu "
"inte förstörts sedan det senaste anropet till :c:func:`Py_Initialize`.  "
"Detta är ett no-op när det anropas en andra gång (utan att först anropa :c:"
"func:`Py_Initialize` igen)."

msgid ""
"Since this is the reverse of :c:func:`Py_Initialize`, it should be called in "
"the same thread with the same interpreter active.  That means the main "
"thread and the main interpreter. This should never be called while :c:func:"
"`Py_RunMain` is running."
msgstr ""
"Eftersom detta är det omvända av :c:func:`Py_Initialize`, bör det anropas i "
"samma tråd med samma tolk aktiv.  Det betyder huvudtråden och huvudtolken. "
"Detta bör aldrig anropas medan :c:func:`Py_RunMain` körs."

msgid ""
"Normally the return value is ``0``. If there were errors during finalization "
"(flushing buffered data), ``-1`` is returned."
msgstr ""
"Normalt är returvärdet ``0``. Om det uppstod fel under slutförandet "
"(rensning av buffrade data) returneras ``-1``."

msgid ""
"Note that Python will do a best effort at freeing all memory allocated by "
"the Python interpreter.  Therefore, any C-Extension should make sure to "
"correctly clean up all of the preveiously allocated PyObjects before using "
"them in subsequent calls to :c:func:`Py_Initialize`.  Otherwise it could "
"introduce vulnerabilities and incorrect behavior."
msgstr ""
"Observera att Python kommer att göra sitt bästa för att frigöra allt minne "
"som allokerats av Python-tolken.  Därför bör alla C-tillägg se till att "
"korrekt städa upp alla tidigare allokerade PyObjects innan de används i "
"efterföljande anrop till :c:func:`Py_Initialize`.  Annars kan det "
"introducera sårbarheter och felaktigt beteende."

msgid ""
"This function is provided for a number of reasons.  An embedding application "
"might want to restart Python without having to restart the application "
"itself. An application that has loaded the Python interpreter from a "
"dynamically loadable library (or DLL) might want to free all memory "
"allocated by Python before unloading the DLL. During a hunt for memory leaks "
"in an application a developer might want to free all memory allocated by "
"Python before exiting from the application."
msgstr ""
"Denna funktion tillhandahålls av ett antal skäl.  Ett inbäddningsprogram "
"kanske vill starta om Python utan att behöva starta om programmet självt. En "
"applikation som har laddat Python-tolken från ett dynamiskt laddningsbart "
"bibliotek (eller DLL) kanske vill frigöra allt minne som allokerats av "
"Python innan DLL:en avlastas. Under en jakt på minnesläckor i en applikation "
"kan en utvecklare vilja frigöra allt minne som allokerats av Python innan "
"applikationen avslutas."

msgid ""
"**Bugs and caveats:** The destruction of modules and objects in modules is "
"done in random order; this may cause destructors (:meth:`~object.__del__` "
"methods) to fail when they depend on other objects (even functions) or "
"modules.  Dynamically loaded extension modules loaded by Python are not "
"unloaded.  Small amounts of memory allocated by the Python interpreter may "
"not be freed (if you find a leak, please report it).  Memory tied up in "
"circular references between objects is not freed.  Interned strings will all "
"be deallocated regardless of their reference count. Some memory allocated by "
"extension modules may not be freed.  Some extensions may not work properly "
"if their initialization routine is called more than once; this can happen if "
"an application calls :c:func:`Py_Initialize` and :c:func:`Py_FinalizeEx` "
"more than once.  :c:func:`Py_FinalizeEx` must not be called recursively from "
"within itself.  Therefore, it must not be called by any code that may be run "
"as part of the interpreter shutdown process, such as :py:mod:`atexit` "
"handlers, object finalizers, or any code that may be run while flushing the "
"stdout and stderr files."
msgstr ""
"**Bugs och varningar:** Destruktionen av moduler och objekt i moduler sker i "
"slumpmässig ordning; detta kan leda till att destruktorer (:meth:`~object."
"__del__` metoder) misslyckas när de är beroende av andra objekt (även "
"funktioner) eller moduler.  Dynamiskt laddade tilläggsmoduler som laddats av "
"Python avlastas inte.  Små mängder minne som allokerats av Python-tolken "
"kanske inte frigörs (om du hittar en läcka, vänligen rapportera den).  Minne "
"som är bundet i cirkulära referenser mellan objekt frigörs inte.  "
"Internerade strängar kommer alla att avallokeras oavsett deras "
"referensantal. En del minne som allokeras av tilläggsmoduler kanske inte "
"frigörs.  Vissa tillägg kanske inte fungerar korrekt om deras "
"initialiseringsrutin anropas mer än en gång; detta kan hända om ett program "
"anropar :c:func:`Py_Initialize` och :c:func:`Py_FinalizeEx` mer än en gång. :"
"c:func:`Py_FinalizeEx` får inte anropas rekursivt inifrån sig själv.  Därför "
"får den inte anropas av någon kod som kan köras som en del av tolkens "
"avstängningsprocess, t.ex. :py:mod:`atexit`-hanterare, objektavslutare eller "
"någon kod som kan köras medan filerna stdout och stderr rensas."

msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython."
"_PySys_ClearAuditHooks`` with no arguments."
msgstr ""
"Utlöser en :ref:`auditing event <auditing>` ``cpython."
"_PySys_ClearAuditHooks`` utan argument."

msgid ""
"This is a backwards-compatible version of :c:func:`Py_FinalizeEx` that "
"disregards the return value."
msgstr ""
"Detta är en bakåtkompatibel version av :c:func:`Py_FinalizeEx` som bortser "
"från returvärdet."

msgid ""
"Similar to :c:func:`Py_Main` but *argv* is an array of bytes strings, "
"allowing the calling application to delegate the text decoding step to the "
"CPython runtime."
msgstr ""
"Liknar :c:func:`Py_Main` men *argv* är en array av bytessträngar, vilket gör "
"att den anropande applikationen kan delegera textavkodningssteget till "
"CPython-körtiden."

msgid ""
"The main program for the standard interpreter, encapsulating a full "
"initialization/finalization cycle, as well as additional behaviour to "
"implement reading configurations settings from the environment and command "
"line, and then executing ``__main__`` in accordance with :ref:`using-on-"
"cmdline`."
msgstr ""
"Huvudprogrammet för standardtolken, som innehåller en fullständig "
"initialiserings-/avslutningscykel samt ytterligare beteende för att läsa "
"konfigurationsinställningar från miljön och kommandoraden och sedan köra "
"``__main__`` i enlighet med :ref:`using-on-cmdline``."

msgid ""
"This is made available for programs which wish to support the full CPython "
"command line interface, rather than just embedding a Python runtime in a "
"larger application."
msgstr ""
"Detta görs tillgängligt för program som vill stödja hela CPythons "
"kommandoradsgränssnitt, snarare än att bara bädda in en Python-körtid i en "
"större applikation."

msgid ""
"The *argc* and *argv* parameters are similar to those which are passed to a "
"C program's :c:func:`main` function, except that the *argv* entries are "
"first converted to ``wchar_t`` using :c:func:`Py_DecodeLocale`. It is also "
"important to note that the argument list entries may be modified to point to "
"strings other than those passed in (however, the contents of the strings "
"pointed to by the argument list are not modified)."
msgstr ""
"Parametrarna *argc* och *argv* liknar dem som skickas till ett C-programs "
"funktion :c:func:`main`, förutom att *argv*-posterna först konverteras till "
"``wchar_t`` med hjälp av :c:func:`Py_DecodeLocale`. Det är också viktigt att "
"notera att posterna i argumentlistan kan ändras så att de pekar på andra "
"strängar än de som skickas in (innehållet i de strängar som argumentlistan "
"pekar på ändras dock inte)."

msgid ""
"The return value is ``2`` if the argument list does not represent a valid "
"Python command line, and otherwise the same as :c:func:`Py_RunMain`."
msgstr ""
"Returvärdet är ``2`` om argumentlistan inte representerar en giltig Python-"
"kommandorad, och i övrigt samma som :c:func:`Py_RunMain`."

msgid ""
"In terms of the CPython runtime configuration APIs documented in the :ref:"
"`runtime configuration <init-config>` section (and without accounting for "
"error handling), ``Py_Main`` is approximately equivalent to::"
msgstr ""
"När det gäller CPythons API:er för körtidskonfiguration som dokumenteras i "
"avsnittet :ref:``runtime configuration <init-config>`` (och utan att ta "
"hänsyn till felhantering), är ``Py_Main`` ungefär likvärdigt med::"

msgid ""
"PyConfig config;\n"
"PyConfig_InitPythonConfig(&config);\n"
"PyConfig_SetArgv(&config, argc, argv);\n"
"Py_InitializeFromConfig(&config);\n"
"PyConfig_Clear(&config);\n"
"\n"
"Py_RunMain();"
msgstr ""
"PyConfig config;\n"
"PyConfig_InitPythonConfig(&config);\n"
"PyConfig_SetArgv(&config, argc, argv);\n"
"Py_InitializeFromConfig(&config);\n"
"PyConfig_Clear(&config);\n"
"\n"
"Py_RunMain();"

msgid ""
"In normal usage, an embedding application will call this function *instead* "
"of calling :c:func:`Py_Initialize`, :c:func:`Py_InitializeEx` or :c:func:"
"`Py_InitializeFromConfig` directly, and all settings will be applied as "
"described elsewhere in this documentation. If this function is instead "
"called *after* a preceding runtime initialization API call, then exactly "
"which environmental and command line configuration settings will be updated "
"is version dependent (as it depends on which settings correctly support "
"being modified after they have already been set once when the runtime was "
"first initialized)."
msgstr ""
"Vid normal användning kommer ett inbäddningsprogram att anropa den här "
"funktionen *i stället* för att anropa :c:func:`Py_Initialize`, :c:func:"
"`Py_InitializeEx` eller :c:func:`Py_InitializeFromConfig` direkt, och alla "
"inställningar kommer att tillämpas enligt beskrivningen på andra ställen i "
"den här dokumentationen. Om denna funktion istället anropas *efter* ett "
"föregående API-anrop för initiering av körtiden, är exakt vilka miljö- och "
"kommandoradsinställningar som uppdateras versionsberoende (eftersom det "
"beror på vilka inställningar som korrekt stöder att de ändras efter att de "
"redan har ställts in en gång när körtiden initierades första gången)."

msgid "Executes the main module in a fully configured CPython runtime."
msgstr "Exekverar huvudmodulen i en fullt konfigurerad CPython-körtid."

msgid ""
"Executes the command (:c:member:`PyConfig.run_command`), the script (:c:"
"member:`PyConfig.run_filename`) or the module (:c:member:`PyConfig."
"run_module`) specified on the command line or in the configuration. If none "
"of these values are set, runs the interactive Python prompt (REPL) using the "
"``__main__`` module's global namespace."
msgstr ""
"Utför kommandot (:c:member:`PyConfig.run_command`), skriptet (:c:member:"
"`PyConfig.run_filename`) eller modulen (:c:member:`PyConfig.run_module`) som "
"anges på kommandoraden eller i konfigurationen. Om inget av dessa värden har "
"angetts körs den interaktiva Python-prompten (REPL) med hjälp av modulen "
"``__main__`` globala namnrymd."

msgid ""
"If :c:member:`PyConfig.inspect` is not set (the default), the return value "
"will be ``0`` if the interpreter exits normally (that is, without raising an "
"exception), the exit status of an unhandled :exc:`SystemExit`, or ``1`` for "
"any other unhandled exception."
msgstr ""
"Om :c:member:`PyConfig.inspect` inte är inställd (standard), kommer "
"returvärdet att vara ``0`` om tolken avslutas normalt (dvs. utan att ett "
"undantag uppstår), utgångsstatus för ett ohanterat :exc:`SystemExit`, eller "
"``1`` för något annat ohanterat undantag."

msgid ""
"If :c:member:`PyConfig.inspect` is set (such as when the :option:`-i` option "
"is used), rather than returning when the interpreter exits, execution will "
"instead resume in an interactive Python prompt (REPL) using the ``__main__`` "
"module's global namespace. If the interpreter exited with an exception, it "
"is immediately raised in the REPL session. The function return value is then "
"determined by the way the *REPL session* terminates: ``0``, ``1``, or the "
"status of a :exc:`SystemExit`, as specified above."
msgstr ""
"Om :c:member:`PyConfig.inspect` är inställt (t.ex. när alternativet :option:"
"`-i` används), i stället för att återvända när tolken avslutas, kommer "
"exekveringen i stället att återupptas i en interaktiv Python-prompt (REPL) "
"som använder modulen ``__main__``'s globala namnrymd. Om tolken avslutades "
"med ett undantag, tas det omedelbart upp i REPL-sessionen. Funktionens "
"returvärde bestäms sedan av hur *REPL-sessionen* avslutas: ``0``, ``1``, "
"eller statusen för en :exc:`SystemExit`, enligt specifikationen ovan."

msgid ""
"This function always finalizes the Python interpreter before it returns."
msgstr "Denna funktion slutför alltid Python-tolken innan den returneras."

msgid ""
"See :ref:`Python Configuration <init-python-config>` for an example of a "
"customized Python that always runs in isolated mode using :c:func:"
"`Py_RunMain`."
msgstr ""
"Se :ref:`Python Configuration <init-python-config>` för ett exempel på en "
"anpassad Python som alltid körs i isolerat läge med :c:func:`Py_RunMain`."

msgid ""
"Register an :mod:`atexit` callback for the target interpreter *interp*. This "
"is similar to :c:func:`Py_AtExit`, but takes an explicit interpreter and "
"data pointer for the callback."
msgstr ""
"Registrera en :mod:`atexit` callback för måltolken *interp*. Detta liknar :c:"
"func:`Py_AtExit`, men tar en explicit tolk och datapekare för "
"återuppringningen."

msgid "There must be an :term:`attached thread state` for *interp*."
msgstr "Det måste finnas en :term:`attached thread state` för *interp*."

msgid "Process-wide parameters"
msgstr "Processövergripande parametrar"

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"program_name` should be used instead, see :ref:`Python Initialization "
"Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningen :c:member:`PyConfig."
"program_name` bör användas istället, se :ref:`Python Initialization "
"Configuration <init-config>`."

msgid ""
"This function should be called before :c:func:`Py_Initialize` is called for "
"the first time, if it is called at all.  It tells the interpreter the value "
"of the ``argv[0]`` argument to the :c:func:`main` function of the program "
"(converted to wide characters). This is used by :c:func:`Py_GetPath` and "
"some other functions below to find the Python run-time libraries relative to "
"the interpreter executable.  The default value is ``'python'``.  The "
"argument should point to a zero-terminated wide character string in static "
"storage whose contents will not change for the duration of the program's "
"execution.  No code in the Python interpreter will change the contents of "
"this storage."
msgstr ""
"Denna funktion bör anropas innan :c:func:`Py_Initialize` anropas för första "
"gången, om den anropas överhuvudtaget.  Den talar om för tolken värdet på "
"argumentet ``argv[0]`` till funktionen :c:func:`main` i programmet "
"(konverterat till breda tecken). Detta används av :c:func:`Py_GetPath` och "
"några andra funktioner nedan för att hitta Pythons körtidsbibliotek i "
"förhållande till tolkens körbara fil.  Standardvärdet är ``'python'``.  "
"Argumentet ska peka på en nollavslutad bred teckensträng i statisk lagring "
"vars innehåll inte kommer att ändras under programmets exekvering.  Ingen "
"kod i Python-tolken kommer att ändra innehållet i denna lagring."

msgid ""
"Use :c:func:`Py_DecodeLocale` to decode a bytes string to get a :c:expr:"
"`wchar_t*` string."
msgstr ""
"Använd :c:func:`Py_DecodeLocale` för att avkoda en bytes-sträng för att få "
"en :c:expr:`wchar_t*`-sträng."

msgid ""
"Return the program name set with :c:member:`PyConfig.program_name`, or the "
"default. The returned string points into static storage; the caller should "
"not modify its value."
msgstr ""
"Returnerar det programnamn som ställts in med :c:member:`PyConfig."
"program_name`, eller standardvärdet. Den returnerade strängen pekar in i "
"statisk lagring; anroparen bör inte ändra dess värde."

msgid ""
"This function should not be called before :c:func:`Py_Initialize`, otherwise "
"it returns ``NULL``."
msgstr ""
"Denna funktion bör inte anropas före :c:func:`Py_Initialize`, annars "
"returnerar den ``NULL``."

msgid "It now returns ``NULL`` if called before :c:func:`Py_Initialize`."
msgstr ""
"Den returnerar nu ``NULL`` om den anropas före :c:func:`Py_Initialize`."

msgid ""
"Use :c:func:`PyConfig_Get(\"executable\") <PyConfig_Get>` (:data:`sys."
"executable`) instead."
msgstr ""
"Använd :c:func:`PyConfig_Get(\"executable\") <PyConfig_Get>` (:data:`sys."
"executable`) istället."

msgid ""
"Return the *prefix* for installed platform-independent files. This is "
"derived through a number of complicated rules from the program name set "
"with :c:member:`PyConfig.program_name` and some environment variables; for "
"example, if the program name is ``'/usr/local/bin/python'``, the prefix is "
"``'/usr/local'``. The returned string points into static storage; the caller "
"should not modify its value.  This corresponds to the :makevar:`prefix` "
"variable in the top-level :file:`Makefile` and the :option:`--prefix` "
"argument to the :program:`configure` script at build time.  The value is "
"available to Python code as ``sys.base_prefix``. It is only useful on Unix.  "
"See also the next function."
msgstr ""
"Returnerar *prefixet* för installerade plattformsoberoende filer. Detta "
"härleds genom ett antal komplicerade regler från det programnamn som anges "
"med :c:member:`PyConfig.program_name` och vissa miljövariabler; till "
"exempel, om programnamnet är ``'/usr/local/bin/python'``, är prefixet ``'/"
"usr/local'``. Den returnerade strängen pekar in i statisk lagring; anroparen "
"ska inte ändra dess värde.  Detta motsvarar variabeln :makevar:`prefix` i "
"toppnivån :file:`Makefile` och argumentet :option:`--prefix` till skriptet :"
"program:`configure` vid byggtiden.  Värdet är tillgängligt för Python-kod "
"som ``sys.base_prefix``. Det är endast användbart på Unix.  Se även nästa "
"funktion."

msgid ""
"Use :c:func:`PyConfig_Get(\"base_prefix\") <PyConfig_Get>` (:data:`sys."
"base_prefix`) instead. Use :c:func:`PyConfig_Get(\"prefix\") <PyConfig_Get>` "
"(:data:`sys.prefix`) if :ref:`virtual environments <venv-def>` need to be "
"handled."
msgstr ""
"Använd :c:func:`PyConfig_Get(\"base_prefix\") <PyConfig_Get>` (:data:`sys."
"base_prefix`) istället. Använd :c:func:`PyConfig_Get(\"prefix\") "
"<PyConfig_Get>` (:data:`sys.prefix`) om :ref:`virtuella miljöer <venv-def>` "
"behöver hanteras."

msgid ""
"Return the *exec-prefix* for installed platform-*dependent* files.  This is "
"derived through a number of complicated rules from the program name set "
"with :c:member:`PyConfig.program_name` and some environment variables; for "
"example, if the program name is ``'/usr/local/bin/python'``, the exec-prefix "
"is ``'/usr/local'``.  The returned string points into static storage; the "
"caller should not modify its value.  This corresponds to the :makevar:"
"`exec_prefix` variable in the top-level :file:`Makefile` and the ``--exec-"
"prefix`` argument to the :program:`configure` script at build  time.  The "
"value is available to Python code as ``sys.base_exec_prefix``.  It is only "
"useful on Unix."
msgstr ""
"Returnerar *exec-prefixet* för installerade plattformsberoende* filer.  "
"Detta härleds genom ett antal komplicerade regler från det programnamn som "
"anges med :c:member:`PyConfig.program_name` och vissa miljövariabler; till "
"exempel, om programnamnet är ``'/usr/local/bin/python'``, är exec-prefixet "
"``'/usr/local'``.  Den returnerade strängen pekar in i statisk lagring; "
"anroparen ska inte ändra dess värde.  Detta motsvarar variabeln :makevar:"
"`exec_prefix` i toppnivån :file:`Makefile` och argumentet ``--exec-prefix`` "
"till skriptet :program:`configure` vid byggtiden.  Värdet är tillgängligt "
"för Python-kod som ``sys.base_exec_prefix``.  Det är endast användbart på "
"Unix."

msgid ""
"Background: The exec-prefix differs from the prefix when platform dependent "
"files (such as executables and shared libraries) are installed in a "
"different directory tree.  In a typical installation, platform dependent "
"files may be installed in the :file:`/usr/local/plat` subtree while platform "
"independent may be installed in :file:`/usr/local`."
msgstr ""
"Bakgrund: Exec-prefixet skiljer sig från prefixet när plattformsberoende "
"filer (t.ex. körbara filer och delade bibliotek) installeras i ett annat "
"katalogträd.  I en typisk installation kan plattformsberoende filer "
"installeras i underträdet :file:`/usr/local/plat` medan plattformsoberoende "
"kan installeras i :file:`/usr/local`."

msgid ""
"Generally speaking, a platform is a combination of hardware and software "
"families, e.g.  Sparc machines running the Solaris 2.x operating system are "
"considered the same platform, but Intel machines running Solaris 2.x are "
"another platform, and Intel machines running Linux are yet another "
"platform.  Different major revisions of the same operating system generally "
"also form different platforms.  Non-Unix operating systems are a different "
"story; the installation strategies on those systems are so different that "
"the prefix and exec-prefix are meaningless, and set to the empty string. "
"Note that compiled Python bytecode files are platform independent (but not "
"independent from the Python version by which they were compiled!)."
msgstr ""
"Generellt sett är en plattform en kombination av maskinvaru- och "
"programvarufamiljer, t.ex. Sparc-maskiner som kör operativsystemet Solaris 2."
"x betraktas som samma plattform, men Intel-maskiner som kör Solaris 2.x är "
"en annan plattform och Intel-maskiner som kör Linux är ytterligare en annan "
"plattform.  Olika större revisioner av samma operativsystem utgör i "
"allmänhet också olika plattformar.  Icke-Unix-operativsystem är en annan "
"historia; installationsstrategierna på dessa system är så olika att prefixet "
"och exec-prefixet är meningslösa och sätts till den tomma strängen. "
"Observera att kompilerade Python-bytekodfiler är plattformsoberoende (men "
"inte oberoende av den Python-version som de kompilerades med!)"

msgid ""
"System administrators will know how to configure the :program:`mount` or :"
"program:`automount` programs to share :file:`/usr/local` between platforms "
"while having :file:`/usr/local/plat` be a different filesystem for each "
"platform."
msgstr ""
"Systemadministratörer kommer att veta hur man konfigurerar programmen :"
"program:`mount` eller :program:`automount` för att dela :file:`/usr/local` "
"mellan plattformar samtidigt som :file:`/usr/local/plat` är ett annat "
"filsystem för varje plattform."

msgid ""
"Use :c:func:`PyConfig_Get(\"base_exec_prefix\") <PyConfig_Get>` (:data:`sys."
"base_exec_prefix`) instead. Use :c:func:`PyConfig_Get(\"exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.exec_prefix`) if :ref:`virtual environments "
"<venv-def>` need to be handled."
msgstr ""
"Använd :c:func:`PyConfig_Get(\"base_exec_prefix\") <PyConfig_Get>` (:data:"
"`sys.base_exec_prefix`) istället. Använd :c:func:"
"`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` (:data:`sys.exec_prefix`) om :"
"ref:`virtuella miljöer <venv-def>` behöver hanteras."

msgid ""
"Return the full program name of the Python executable; this is  computed as "
"a side-effect of deriving the default module search path  from the program "
"name (set by :c:member:`PyConfig.program_name`). The returned string points "
"into static storage; the caller should not modify its value.  The value is "
"available to Python code as ``sys.executable``."
msgstr ""
"Returnerar det fullständiga programnamnet för den körbara Python-filen; "
"detta beräknas som en bieffekt av att standardmodulsökvägen härleds från "
"programnamnet (anges av :c:member:`PyConfig.program_name`). Den returnerade "
"strängen pekar in i statisk lagring; anroparen bör inte ändra dess värde.  "
"Värdet är tillgängligt för Python-kod som ``sys.executable``."

msgid ""
"Return the default module search path; this is computed from the program "
"name (set by :c:member:`PyConfig.program_name`) and some environment "
"variables. The returned string consists of a series of directory names "
"separated by a platform dependent delimiter character.  The delimiter "
"character is ``':'`` on Unix and macOS, ``';'`` on Windows.  The returned "
"string points into static storage; the caller should not modify its value.  "
"The list :data:`sys.path` is initialized with this value on interpreter "
"startup; it can be (and usually is) modified later to change the search path "
"for loading modules."
msgstr ""
"Returnerar standardmodulsökvägen; denna beräknas från programnamnet (anges "
"av :c:member:`PyConfig.program_name`) och vissa miljövariabler. Den "
"returnerade strängen består av en serie katalognamn åtskilda av ett "
"plattformsberoende avgränsningstecken.  Avgränsningstecknet är ``':'`` på "
"Unix och macOS, ``';'`` på Windows.  Den returnerade strängen pekar in i "
"statisk lagring; anroparen bör inte ändra dess värde.  Listan :data:`sys."
"path` initialiseras med detta värde när tolken startas; den kan (och brukar) "
"modifieras senare för att ändra sökvägen för laddning av moduler."

msgid ""
"Use :c:func:`PyConfig_Get(\"module_search_paths\") <PyConfig_Get>` (:data:"
"`sys.path`) instead."
msgstr ""
"Använd :c:func:`PyConfig_Get(\"module_search_paths\") <PyConfig_Get>` (:data:"
"`sys.path`) istället."

msgid ""
"Return the version of this Python interpreter.  This is a string that looks "
"something like ::"
msgstr ""
"Returnerar versionen av denna Python-tolk.  Detta är en sträng som ser ut "
"ungefär som ::"

msgid "\"3.0a5+ (py3k:63103M, May 12 2008, 00:53:55) \\n[GCC 4.2.3]\""
msgstr "\"3.0a5+ (py3k:63103M, 12 maj 2008, 00:53:55) \\n[GCC 4.2.3]\""

msgid ""
"The first word (up to the first space character) is the current Python "
"version; the first characters are the major and minor version separated by a "
"period.  The returned string points into static storage; the caller should "
"not modify its value.  The value is available to Python code as :data:`sys."
"version`."
msgstr ""
"Det första ordet (upp till det första mellanslagstecknet) är den aktuella "
"Python-versionen; de första tecknen är major- och minor-versionen åtskilda "
"av en punkt.  Den returnerade strängen pekar in i statisk lagring; anroparen "
"bör inte ändra dess värde.  Värdet är tillgängligt för Python-kod som :data:"
"`sys.version`."

msgid "See also the :c:var:`Py_Version` constant."
msgstr "Se även konstanten :c:var:`Py_Version`."

msgid ""
"Return the platform identifier for the current platform.  On Unix, this is "
"formed from the \"official\" name of the operating system, converted to "
"lower case, followed by the major revision number; e.g., for Solaris 2.x, "
"which is also known as SunOS 5.x, the value is ``'sunos5'``.  On macOS, it "
"is ``'darwin'``.  On Windows, it is ``'win'``.  The returned string points "
"into static storage; the caller should not modify its value.  The value is "
"available to Python code as ``sys.platform``."
msgstr ""
"Returnerar plattformsidentifieraren för den aktuella plattformen.  På Unix "
"bildas detta av operativsystemets \"officiella\" namn, konverterat till "
"gemener, följt av det större revisionsnumret; t.ex. för Solaris 2.x, som "
"också är känt som SunOS 5.x, är värdet ``'sunos5'``.  På macOS är det "
"``'darwin'``.  På Windows är det ``'win'``.  Den returnerade strängen pekar "
"in i statisk lagring; anroparen ska inte ändra dess värde.  Värdet är "
"tillgängligt för Python-kod som ``sys.platform``."

msgid ""
"Return the official copyright string for the current Python version, for "
"example"
msgstr ""
"Returnera den officiella copyright-strängen för den aktuella Python-"
"versionen, till exempel"

msgid "``'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'``"
msgstr "``'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'```"

msgid ""
"The returned string points into static storage; the caller should not modify "
"its value.  The value is available to Python code as ``sys.copyright``."
msgstr ""
"Den returnerade strängen pekar in i statisk lagring; anroparen ska inte "
"ändra dess värde.  Värdet är tillgängligt för Python-kod som ``sys."
"copyright``."

msgid ""
"Return an indication of the compiler used to build the current Python "
"version, in square brackets, for example::"
msgstr ""
"Returnera en indikation på kompilatorn som användes för att bygga den "
"aktuella Python-versionen, inom hakparenteser, till exempel::"

msgid "\"[GCC 2.7.2.2]\""
msgstr "\"[GCC 2.7.2.2]\""

msgid ""
"The returned string points into static storage; the caller should not modify "
"its value.  The value is available to Python code as part of the variable "
"``sys.version``."
msgstr ""
"Den returnerade strängen pekar in i statisk lagring; anroparen ska inte "
"ändra dess värde.  Värdet är tillgängligt för Python-kod som en del av "
"variabeln ``sys.version``."

msgid ""
"Return information about the sequence number and build date and time  of the "
"current Python interpreter instance, for example ::"
msgstr ""
"Returnera information om sekvensnummer och byggdatum och -tid för den "
"aktuella Python-tolkinstansen, till exempel ::"

msgid "\"#67, Aug  1 1997, 22:34:28\""
msgstr "\"#67, 1 Aug 1997, 22:34:28\""

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"argv`, :c:member:`PyConfig.parse_argv` and :c:member:`PyConfig.safe_path` "
"should be used instead, see :ref:`Python Initialization Configuration <init-"
"config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningarna :c:member:"
"`PyConfig.argv`, :c:member:`PyConfig.parse_argv` och :c:member:`PyConfig."
"safe_path` bör användas istället, se :ref:`Python Initialization "
"Configuration <init-config>`."

msgid ""
"Set :data:`sys.argv` based on *argc* and *argv*.  These parameters are "
"similar to those passed to the program's :c:func:`main` function with the "
"difference that the first entry should refer to the script file to be "
"executed rather than the executable hosting the Python interpreter.  If "
"there isn't a script that will be run, the first entry in *argv* can be an "
"empty string.  If this function fails to initialize :data:`sys.argv`, a "
"fatal condition is signalled using :c:func:`Py_FatalError`."
msgstr ""
"Ställ in :data:`sys.argv` baserat på *argc* och *argv*.  Dessa parametrar "
"liknar de som skickas till programmets funktion :c:func:`main` med "
"skillnaden att den första posten ska referera till skriptfilen som ska köras "
"istället för den körbara filen som är värd för Python-tolken.  Om det inte "
"finns något skript som ska köras kan den första posten i *argv* vara en tom "
"sträng.  Om denna funktion misslyckas med att initiera :data:`sys.argv`, "
"signaleras ett fatalt tillstånd med :c:func:`Py_FatalError`."

msgid ""
"If *updatepath* is zero, this is all the function does.  If *updatepath* is "
"non-zero, the function also modifies :data:`sys.path` according to the "
"following algorithm:"
msgstr ""
"Om *updatepath* är noll är detta allt som funktionen gör.  Om *updatepath* "
"inte är noll, ändrar funktionen även :data:`sys.path` enligt följande "
"algoritm:"

msgid ""
"If the name of an existing script is passed in ``argv[0]``, the absolute "
"path of the directory where the script is located is prepended to :data:`sys."
"path`."
msgstr ""
"Om namnet på ett befintligt skript anges i ``argv[0]``, läggs den absoluta "
"sökvägen till den katalog där skriptet finns till :data:`sys.path`."

msgid ""
"Otherwise (that is, if *argc* is ``0`` or ``argv[0]`` doesn't point to an "
"existing file name), an empty string is prepended to :data:`sys.path`, which "
"is the same as prepending the current working directory (``\".\"``)."
msgstr ""
"I annat fall (dvs. om *argc* är ``0`` eller ``argv[0]`` inte pekar på ett "
"befintligt filnamn) läggs en tom sträng till i :data:`sys.path`, vilket är "
"samma sak som att lägga till den aktuella arbetskatalogen (``\".\"``)."

msgid ""
"See also :c:member:`PyConfig.orig_argv` and :c:member:`PyConfig.argv` "
"members of the :ref:`Python Initialization Configuration <init-config>`."
msgstr ""
"Se även :c:member:`PyConfig.orig_argv` och :c:member:`PyConfig.argv` i :ref:"
"`Python Initialization Configuration <init-config>`."

msgid ""
"It is recommended that applications embedding the Python interpreter for "
"purposes other than executing a single script pass ``0`` as *updatepath*, "
"and update :data:`sys.path` themselves if desired. See :cve:`2008-5983`."
msgstr ""
"Det rekommenderas att program som bäddar in Python-tolken för andra ändamål "
"än att exekvera ett enda skript skickar ``0`` som *updatepath*, och "
"uppdaterar :data:`sys.path` själva om så önskas. Se :cve:`2008-5983`."

msgid ""
"On versions before 3.1.3, you can achieve the same effect by manually "
"popping the first :data:`sys.path` element after having called :c:func:"
"`PySys_SetArgv`, for example using::"
msgstr ""
"På versioner före 3.1.3 kan du uppnå samma effekt genom att manuellt poppa "
"det första :data:`sys.path`-elementet efter att ha anropat :c:func:"
"`PySys_SetArgv`, till exempel med::"

msgid "PyRun_SimpleString(\"import sys; sys.path.pop(0)\\n\");"
msgstr "PyRun_SimpleString(\"import sys; sys.path.pop(0)\\n\");"

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"argv` and :c:member:`PyConfig.parse_argv` should be used instead, see :ref:"
"`Python Initialization Configuration <init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningarna :c:member:"
"`PyConfig.argv` och :c:member:`PyConfig.parse_argv` bör användas istället, "
"se :ref:`Python Initialization Configuration <init-config>`."

msgid ""
"This function works like :c:func:`PySys_SetArgvEx` with *updatepath* set to "
"``1`` unless the :program:`python` interpreter was started with the :option:"
"`-I`."
msgstr ""
"Den här funktionen fungerar som :c:func:`PySys_SetArgvEx` med *updatepath* "
"satt till ``1`` om inte tolken :program:`python` startades med :option:`-I`."

msgid "The *updatepath* value depends on :option:`-I`."
msgstr "Värdet *updatepath* beror på :option:`-I`."

msgid ""
"This API is kept for backward compatibility: setting :c:member:`PyConfig."
"home` should be used instead, see :ref:`Python Initialization Configuration "
"<init-config>`."
msgstr ""
"Detta API behålls för bakåtkompatibilitet: inställningen :c:member:`PyConfig."
"home` bör användas istället, se :ref:`Python Initialization Configuration "
"<init-config>`."

msgid ""
"Set the default \"home\" directory, that is, the location of the standard "
"Python libraries.  See :envvar:`PYTHONHOME` for the meaning of the argument "
"string."
msgstr ""
"Ställ in standardkatalogen \"home\", det vill säga platsen för Pythons "
"standardbibliotek.  Se :envvar:`PYTHONHOME` för innebörden av "
"argumentsträngen."

msgid ""
"The argument should point to a zero-terminated character string in static "
"storage whose contents will not change for the duration of the program's "
"execution.  No code in the Python interpreter will change the contents of "
"this storage."
msgstr ""
"Argumentet ska peka på en nollavslutad teckensträng i statisk lagring vars "
"innehåll inte kommer att ändras under programmets exekvering.  Ingen kod i "
"Python-tolken kommer att ändra innehållet i detta lager."

msgid ""
"Return the default \"home\", that is, the value set by :c:member:`PyConfig."
"home`, or the value of the :envvar:`PYTHONHOME` environment variable if it "
"is set."
msgstr ""
"Returnerar standard \"home\", det vill säga det värde som anges av :c:member:"
"`PyConfig.home`, eller värdet på miljövariabeln :envvar:`PYTHONHOME` om den "
"är angiven."

msgid ""
"Use :c:func:`PyConfig_Get(\"home\") <PyConfig_Get>` or the :envvar:"
"`PYTHONHOME` environment variable instead."
msgstr ""
"Använd :c:func:`PyConfig_Get(\"home\") <PyConfig_Get>` eller miljövariabeln :"
"envvar:`PYTHONHOME` istället."

msgid "Thread State and the Global Interpreter Lock"
msgstr "Thread State och det globala tolkningslåset"

msgid ""
"Unless on a :term:`free-threaded <free threading>` build of :term:`CPython`, "
"the Python interpreter is not fully thread-safe.  In order to support multi-"
"threaded Python programs, there's a global lock, called the :term:`global "
"interpreter lock` or :term:`GIL`, that must be held by the current thread "
"before it can safely access Python objects. Without the lock, even the "
"simplest operations could cause problems in a multi-threaded program: for "
"example, when two threads simultaneously increment the reference count of "
"the same object, the reference count could end up being incremented only "
"once instead of twice."
msgstr ""
"Om inte på en :term:``free-threaded <free threading>`-byggnad av :term:"
"`CPython`, är Python-tolken inte helt trådsäker.  För att stödja flertrådade "
"Python-program finns det ett globalt lås, kallat :term:`global interpreter "
"lock` eller :term:`GIL`, som måste hållas av den aktuella tråden innan den "
"kan komma åt Python-objekt på ett säkert sätt. Utan låset kan även de "
"enklaste operationer orsaka problem i ett flertrådigt program: till exempel, "
"när två trådar samtidigt ökar referensantalet för samma objekt, kan det "
"sluta med att referensantalet bara ökas en gång istället för två gånger."

msgid ""
"Therefore, the rule exists that only the thread that has acquired the :term:"
"`GIL` may operate on Python objects or call Python/C API functions. In order "
"to emulate concurrency of execution, the interpreter regularly tries to "
"switch threads (see :func:`sys.setswitchinterval`).  The lock is also "
"released around potentially blocking I/O operations like reading or writing "
"a file, so that other Python threads can run in the meantime."
msgstr ""
"Därför finns regeln att endast den tråd som har förvärvat :term:`GIL` kan "
"operera på Python-objekt eller anropa Python/C API-funktioner. För att "
"emulera samtidig exekvering försöker tolken regelbundet att byta tråd (se :"
"func:`sys.setswitchinterval`).  Låset släpps också runt potentiellt "
"blockerande I/O-operationer som att läsa eller skriva en fil, så att andra "
"Python-trådar kan köras under tiden."

msgid ""
"The Python interpreter keeps some thread-specific bookkeeping information "
"inside a data structure called :c:type:`PyThreadState`, known as a :term:"
"`thread state`. Each OS thread has a thread-local pointer to a :c:type:"
"`PyThreadState`; a thread state referenced by this pointer is considered to "
"be :term:`attached <attached thread state>`."
msgstr ""
"Python-tolken håller viss trådspecifik bokföringsinformation i en "
"datastruktur som heter :c:type:`PyThreadState`, känd som en :term:`thread "
"state`. Varje OS-tråd har en trådlokal pekare till en :c:type:"
"`PyThreadState`; ett trådtillstånd som refereras av denna pekare anses vara :"
"term:`attached <attached thread state>`."

msgid ""
"A thread can only have one :term:`attached thread state` at a time. An "
"attached thread state is typically analogous with holding the :term:`GIL`, "
"except on :term:`free-threaded <free threading>` builds.  On builds with "
"the :term:`GIL` enabled, :term:`attaching <attached thread state>` a thread "
"state will block until the :term:`GIL` can be acquired. However,  even on "
"builds with the :term:`GIL` disabled, it is still required to have an "
"attached thread state to call most of the C API."
msgstr ""
"En tråd kan bara ha en :term:`attached thread state` åt gången. Ett bifogat "
"trådtillstånd är typiskt analogt med att hålla :term:`GIL`, förutom på :term:"
"``free-threaded <free threading>` builds.  På byggen med :term:`GIL` "
"aktiverat, kommer :term:`attaching <attached thread state>` ett "
"trådtillstånd att blockera tills :term:`GIL` kan förvärvas. Men även på "
"byggen med :term:`GIL` inaktiverat krävs det fortfarande att man har ett "
"anslutet trådtillstånd för att anropa det mesta av C API."

msgid ""
"In general, there will always be an :term:`attached thread state` when using "
"Python's C API. Only in some specific cases (such as in a :c:macro:"
"`Py_BEGIN_ALLOW_THREADS` block) will the thread not have an attached thread "
"state. If uncertain, check if :c:func:`PyThreadState_GetUnchecked` returns "
"``NULL``."
msgstr ""
"I allmänhet kommer det alltid att finnas en :term:`attached thread state` "
"när man använder Pythons C API. Endast i vissa specifika fall (t.ex. i ett :"
"c:macro:`Py_BEGIN_ALLOW_THREADS`-block) kommer tråden inte att ha ett "
"attached thread state. Om du är osäker, kontrollera om :c:func:"
"`PyThreadState_GetUnchecked` returnerar ``NULL``."

msgid "Detaching the thread state from extension code"
msgstr "Avlägsna trådtillståndet från tilläggskoden"

msgid ""
"Most extension code manipulating the :term:`thread state` has the following "
"simple structure::"
msgstr ""
"Den mesta tilläggskoden som manipulerar :term:`thread state` har följande "
"enkla struktur::"

msgid ""
"Save the thread state in a local variable.\n"
"... Do some blocking I/O operation ...\n"
"Restore the thread state from the local variable."
msgstr ""
"Spara trådtillståndet i en lokal variabel.\n"
"... Utför någon blockerande I/O-operation ...\n"
"Återställ trådtillståndet från den lokala variabeln."

msgid "This is so common that a pair of macros exists to simplify it::"
msgstr ""
"Detta är så vanligt att det finns ett par makron för att förenkla det::"

msgid ""
"Py_BEGIN_ALLOW_THREADS\n"
"... Do some blocking I/O operation ...\n"
"Py_END_ALLOW_THREADS"
msgstr ""
"Py_BEGIN_ALLOW_THREADS\n"
"... Gör någon blockerande I/O-operation ...\n"
"Py_END_ALLOW_THREADS"

msgid ""
"The :c:macro:`Py_BEGIN_ALLOW_THREADS` macro opens a new block and declares a "
"hidden local variable; the :c:macro:`Py_END_ALLOW_THREADS` macro closes the "
"block."
msgstr ""
"Makrot :c:macro:`Py_BEGIN_ALLOW_THREADS` öppnar ett nytt block och "
"deklarerar en dold lokal variabel; makrot :c:macro:`Py_END_ALLOW_THREADS` "
"stänger blocket."

msgid "The block above expands to the following code::"
msgstr "Blocket ovan expanderar till följande kod::"

msgid ""
"PyThreadState *_save;\n"
"\n"
"_save = PyEval_SaveThread();\n"
"... Do some blocking I/O operation ...\n"
"PyEval_RestoreThread(_save);"
msgstr ""
"PyThreadState *_save;\n"
"\n"
"_save = PyEval_SaveThread();\n"
"... Gör någon blockerande I/O-operation ...\n"
"PyEval_RestoreThread(_save);"

msgid "Here is how these functions work:"
msgstr "Så här fungerar dessa funktioner:"

msgid ""
"The :term:`attached thread state` holds the :term:`GIL` for the entire "
"interpreter. When detaching the :term:`attached thread state`, the :term:"
"`GIL` is released, allowing other threads to attach a thread state to their "
"own thread, thus getting the :term:`GIL` and can start executing. The "
"pointer to the prior :term:`attached thread state` is stored as a local "
"variable. Upon reaching :c:macro:`Py_END_ALLOW_THREADS`, the thread state "
"that was previously :term:`attached <attached thread state>` is passed to :c:"
"func:`PyEval_RestoreThread`. This function will block until another releases "
"its :term:`thread state <attached thread state>`, thus allowing the old :"
"term:`thread state <attached thread state>` to get re-attached and the C API "
"can be called again."
msgstr ""
"Den :term:`attached thread state` håller :term:`GIL` för hela tolken. När "
"man tar bort :term:`attached thread state` släpps :term:`GIL`, vilket gör "
"det möjligt för andra trådar att koppla ett thread state till sin egen tråd, "
"som därmed får :term:`GIL` och kan börja exekvera. Pekaren till den "
"tidigare :term:`attached thread state` lagras som en lokal variabel. När man "
"når :c:macro:`Py_END_ALLOW_THREADS`, skickas trådtillståndet som tidigare "
"var :term:`attached <attached thread state>` till :c:func:"
"`PyEval_RestoreThread`. Denna funktion kommer att blockera tills en annan "
"släpper sin :term:`thread state <attached thread state>`, vilket gör att den "
"gamla :term:`thread state <attached thread state>` kan återanslutas och C "
"API kan anropas igen."

msgid ""
"For :term:`free-threaded <free threading>` builds, the :term:`GIL` is "
"normally out of the question, but detaching the :term:`thread state "
"<attached thread state>` is still required for blocking I/O and long "
"operations. The difference is that threads don't have to wait for the :term:"
"`GIL` to be released to attach their thread state, allowing true multi-core "
"parallelism."
msgstr ""
"För :term:``free-threaded <free threading>`-byggen är :term:`GIL` normalt "
"inte aktuellt, men att koppla bort :term:``thread state <attached thread "
"state>` krävs fortfarande för blockerande I/O och långa operationer. "
"Skillnaden är att trådar inte behöver vänta på att :term:`GIL` ska släppas "
"för att koppla till sitt trådtillstånd, vilket möjliggör äkta parallellism "
"med flera kärnor."

msgid ""
"Calling system I/O functions is the most common use case for detaching the :"
"term:`thread state <attached thread state>`, but it can also be useful "
"before calling long-running computations which don't need access to Python "
"objects, such as compression or cryptographic functions operating over "
"memory buffers. For example, the standard :mod:`zlib` and :mod:`hashlib` "
"modules detach the :term:`thread state <attached thread state>` when "
"compressing or hashing data."
msgstr ""
"Anrop av systemets I/O-funktioner är det vanligaste användningsområdet för "
"att koppla bort :term:`thread state <attached thread state>`, men det kan "
"också vara användbart innan man anropar långvariga beräkningar som inte "
"behöver tillgång till Python-objekt, till exempel komprimerings- eller "
"kryptografiska funktioner som arbetar över minnesbuffertar. "
"Standardmodulerna :mod:`zlib` och :mod:`hashlib` avaktiverar till exempel :"
"term:`thread state <attached thread state>` när de komprimerar eller hashar "
"data."

msgid "Non-Python created threads"
msgstr "Icke-Python skapade trådar"

msgid ""
"When threads are created using the dedicated Python APIs (such as the :mod:"
"`threading` module), a thread state is automatically associated to them and "
"the code showed above is therefore correct.  However, when threads are "
"created from C (for example by a third-party library with its own thread "
"management), they don't hold the :term:`GIL`, because they don't have an :"
"term:`attached thread state`."
msgstr ""
"När trådar skapas med hjälp av Pythons särskilda API:er (t.ex. modulen :mod:"
"`threading`) associeras de automatiskt med ett trådtillstånd och koden ovan "
"är därför korrekt.  Men när trådar skapas från C (t.ex. av ett "
"tredjepartsbibliotek med egen trådhantering) har de inte :term:`GIL`, "
"eftersom de inte har någon :term:`attached thread state`."

msgid ""
"If you need to call Python code from these threads (often this will be part "
"of a callback API provided by the aforementioned third-party library), you "
"must first register these threads with the interpreter by creating an :term:"
"`attached thread state` before you can start using the Python/C API.  When "
"you are done, you should detach the :term:`thread state <attached thread "
"state>`, and finally free it."
msgstr ""
"Om du behöver anropa Python-kod från dessa trådar (ofta kommer detta att "
"vara en del av ett callback-API som tillhandahålls av det tidigare nämnda "
"tredjepartsbiblioteket), måste du först registrera dessa trådar med tolken "
"genom att skapa en :term:`attached thread state` innan du kan börja använda "
"Python/C API.  När du är klar bör du ta bort :term:`thread state <attached "
"thread state>` och slutligen frigöra det."

msgid ""
"The :c:func:`PyGILState_Ensure` and :c:func:`PyGILState_Release` functions "
"do all of the above automatically.  The typical idiom for calling into "
"Python from a C thread is::"
msgstr ""
"Funktionerna :c:func:`PyGILState_Ensure` och :c:func:`PyGILState_Release` "
"gör allt detta automatiskt.  Det typiska idiomet för att anropa till Python "
"från en C-tråd är::"

msgid ""
"PyGILState_STATE gstate;\n"
"gstate = PyGILState_Ensure();\n"
"\n"
"/* Perform Python actions here. */\n"
"result = CallSomeFunction();\n"
"/* evaluate result or handle exception */\n"
"\n"
"/* Release the thread. No Python API allowed beyond this point. */\n"
"PyGILState_Release(gstate);"
msgstr ""
"PyGILState_STATE gstate;\n"
"gstate = PyGILState_Ensure();\n"
"\n"
"/* Utför Python-åtgärder här. */\n"
"resultat = CallSomeFunction();\n"
"/* utvärdera resultat eller hantera undantag */\n"
"\n"
"/* Släpp tråden. Inget Python API tillåts bortom denna punkt. */\n"
"PyGILState_Release(gstate);"

msgid ""
"Note that the ``PyGILState_*`` functions assume there is only one global "
"interpreter (created automatically by :c:func:`Py_Initialize`).  Python "
"supports the creation of additional interpreters (using :c:func:"
"`Py_NewInterpreter`), but mixing multiple interpreters and the "
"``PyGILState_*`` API is unsupported. This is because :c:func:"
"`PyGILState_Ensure` and similar functions default to :term:`attaching "
"<attached thread state>` a :term:`thread state` for the main interpreter, "
"meaning that the thread can't safely interact with the calling "
"subinterpreter."
msgstr ""
"Observera att funktionerna ``PyGILState_*`` förutsätter att det bara finns "
"en global tolk (som skapas automatiskt av :c:func:`Py_Initialize`).  Python "
"stöder skapandet av ytterligare tolkar (med :c:func:`Py_NewInterpreter`), "
"men att blanda flera tolkar och API:et ``PyGILState_*`` stöds inte. Detta "
"beror på att :c:func:`PyGILState_Ensure` och liknande funktioner som "
"standard :term:`attaching <attached thread state>` ett :term:`thread state` "
"för huvudtolken, vilket innebär att tråden inte säkert kan interagera med "
"den anropande undertolken."

msgid "Supporting subinterpreters in non-Python threads"
msgstr "Stöd för undertolkar i icke-Python-trådar"

msgid ""
"If you would like to support subinterpreters with non-Python created "
"threads, you must use the ``PyThreadState_*`` API instead of the traditional "
"``PyGILState_*`` API."
msgstr ""
"Om du vill stödja undertolkar med trådar som inte skapats av Python måste du "
"använda API:et ``PyThreadState_*`` istället för det traditionella API:et "
"``PyGILState_*``."

msgid ""
"In particular, you must store the interpreter state from the calling "
"function and pass it to :c:func:`PyThreadState_New`, which will ensure that "
"the :term:`thread state` is targeting the correct interpreter::"
msgstr ""
"I synnerhet måste du lagra tolktillståndet från den anropande funktionen och "
"skicka det till :c:func:`PyThreadState_New`, som kommer att säkerställa att :"
"term:`thread state` riktar sig till rätt tolk::"

msgid ""
"/* The return value of PyInterpreterState_Get() from the\n"
"   function that created this thread. */\n"
"PyInterpreterState *interp = ThreadData->interp;\n"
"PyThreadState *tstate = PyThreadState_New(interp);\n"
"PyThreadState_Swap(tstate);\n"
"\n"
"/* GIL of the subinterpreter is now held.\n"
"   Perform Python actions here. */\n"
"result = CallSomeFunction();\n"
"/* evaluate result or handle exception */\n"
"\n"
"/* Destroy the thread state. No Python API allowed beyond this point. */\n"
"PyThreadState_Clear(tstate);\n"
"PyThreadState_DeleteCurrent();"
msgstr ""
"/* Returvärdet av PyInterpreterState_Get() från funktionen som\n"
"   funktion som skapade den här tråden. */\n"
"PyInterpreterState *interp = ThreadData->interp;\n"
"PyThreadState *tstate = PyThreadState_New(interp);\n"
"PyThreadState_Swap(tstate);\n"
"\n"
"/* Undertolkarens GIL hålls nu.\n"
"   Utför Python-åtgärder här. */\n"
"resultat = CallSomeFunction();\n"
"/* utvärdera resultat eller hantera undantag */\n"
"\n"
"/* Förstör trådtillståndet. Inget Python API tillåts bortom denna punkt. */\n"
"PyThreadState_Clear(tstate);\n"
"PyThreadState_DeleteCurrent();"

msgid "Cautions about fork()"
msgstr "Försiktighetsåtgärder för fork()"

msgid ""
"Another important thing to note about threads is their behaviour in the face "
"of the C :c:func:`fork` call. On most systems with :c:func:`fork`, after a "
"process forks only the thread that issued the fork will exist.  This has a "
"concrete impact both on how locks must be handled and on all stored state in "
"CPython's runtime."
msgstr ""
"En annan viktig sak att notera om trådar är deras beteende inför C :c:func:"
"`fork`-anropet. På de flesta system med :c:func:`fork` kommer det efter att "
"en process har gafflats bara att finnas den tråd som utfärdade gafflingen.  "
"Detta har en konkret inverkan både på hur lås måste hanteras och på allt "
"lagrat tillstånd i CPythons körtid."

msgid ""
"The fact that only the \"current\" thread remains means any locks held by "
"other threads will never be released. Python solves this for :func:`os.fork` "
"by acquiring the locks it uses internally before the fork, and releasing "
"them afterwards. In addition, it resets any :ref:`lock-objects` in the "
"child. When extending or embedding Python, there is no way to inform Python "
"of additional (non-Python) locks that need to be acquired before or reset "
"after a fork. OS facilities such as :c:func:`!pthread_atfork` would need to "
"be used to accomplish the same thing. Additionally, when extending or "
"embedding Python, calling :c:func:`fork` directly rather than through :func:"
"`os.fork` (and returning to or calling into Python) may result in a deadlock "
"by one of Python's internal locks being held by a thread that is defunct "
"after the fork. :c:func:`PyOS_AfterFork_Child` tries to reset the necessary "
"locks, but is not always able to."
msgstr ""
"Det faktum att endast den \"aktuella\" tråden finns kvar innebär att "
"eventuella lås som innehas av andra trådar aldrig kommer att släppas. Python "
"löser detta för :func:`os.fork` genom att förvärva de lås som den använder "
"internt före förgreningen och släppa dem efteråt. Dessutom återställs alla :"
"ref:`lock-objects` i barnet. När Python utökas eller bäddas in finns det "
"inget sätt att informera Python om ytterligare (icke-Python) lås som behöver "
"förvärvas före eller återställas efter en fork. OS-faciliteter som :c:func:`!"
"pthread_atfork` skulle behöva användas för att åstadkomma samma sak. "
"Dessutom, när Python utökas eller bäddas in, kan anrop av :c:func:`fork` "
"direkt istället för genom :func:`os.fork` (och återgå till eller anropa "
"Python) resultera i ett dödläge genom att ett av Pythons interna lås hålls "
"av en tråd som inte längre finns efter förgreningen. :c:func:"
"`PyOS_AfterFork_Child` försöker återställa de nödvändiga låsen, men kan inte "
"alltid göra det."

msgid ""
"The fact that all other threads go away also means that CPython's runtime "
"state there must be cleaned up properly, which :func:`os.fork` does.  This "
"means finalizing all other :c:type:`PyThreadState` objects belonging to the "
"current interpreter and all other :c:type:`PyInterpreterState` objects.  Due "
"to this and the special nature of the :ref:`\"main\" interpreter <sub-"
"interpreter-support>`, :c:func:`fork` should only be called in that "
"interpreter's \"main\" thread, where the CPython global runtime was "
"originally initialized. The only exception is if :c:func:`exec` will be "
"called immediately after."
msgstr ""
"Det faktum att alla andra trådar försvinner innebär också att CPythons "
"runtime state där måste rensas upp ordentligt, vilket :func:`os.fork` gör.  "
"Detta innebär att alla andra :c:type:`PyThreadState`-objekt som tillhör den "
"aktuella tolken och alla andra :c:type:`PyInterpreterState`-objekt måste "
"slutföras.  På grund av detta och den speciella karaktären hos :ref:"
"`\"huvud\"-tolken <sub-interpreter-support>`, bör :c:func:`fork` endast "
"anropas i den tolkens \"huvud\"-tråd, där CPythons globala runtime "
"ursprungligen initialiserades. Det enda undantaget är om :c:func:`exec` "
"kommer att anropas omedelbart efter."

msgid "Cautions regarding runtime finalization"
msgstr "Försiktighetsåtgärder avseende runtime-finalisering"

msgid ""
"In the late stage of :term:`interpreter shutdown`, after attempting to wait "
"for non-daemon threads to exit (though this can be interrupted by :class:"
"`KeyboardInterrupt`) and running the :mod:`atexit` functions, the runtime is "
"marked as *finalizing*: :c:func:`Py_IsFinalizing` and :func:`sys."
"is_finalizing` return true.  At this point, only the *finalization thread* "
"that initiated finalization (typically the main thread) is allowed to "
"acquire the :term:`GIL`."
msgstr ""
"I det sena skedet av :term:`interpreter shutdown`, efter att ha försökt "
"vänta på att icke-daemon-trådar ska avslutas (även om detta kan avbrytas av :"
"class:`KeyboardInterrupt`) och efter att ha kört :mod:`atexit`-funktionerna, "
"markeras körtiden som *finalizing*: :c:func:`Py_IsFinalizing` och :func:`sys."
"is_finalizing` returnerar true.  Vid denna tidpunkt är det bara den "
"*finaliseringstråd* som initierade finaliseringen (vanligtvis huvudtråden) "
"som får förvärva :term:`GIL`."

msgid ""
"If any thread, other than the finalization thread, attempts to attach a :"
"term:`thread state` during finalization, either explicitly or implicitly, "
"the thread enters **a permanently blocked state** where it remains until the "
"program exits.  In most cases this is harmless, but this can result in "
"deadlock if a later stage of finalization attempts to acquire a lock owned "
"by the blocked thread, or otherwise waits on the blocked thread."
msgstr ""
"Om någon tråd, annan än den avslutande tråden, försöker lägga till en :term:"
"`thread state` under avslutningen, antingen explicit eller implicit, går "
"tråden in i **ett permanent blockerat tillstånd** där den förblir tills "
"programmet avslutas.  I de flesta fall är detta ofarligt, men det kan leda "
"till dödläge om ett senare steg i slutförandet försöker förvärva ett lås som "
"ägs av den blockerade tråden, eller på annat sätt väntar på den blockerade "
"tråden."

msgid ""
"Gross? Yes. This prevents random crashes and/or unexpectedly skipped C++ "
"finalizations further up the call stack when such threads were forcibly "
"exited here in CPython 3.13 and earlier. The CPython runtime :term:`thread "
"state` C APIs have never had any error reporting or handling expectations "
"at :term:`thread state` attachment time that would've allowed for graceful "
"exit from this situation. Changing that would require new stable C APIs and "
"rewriting the majority of C code in the CPython ecosystem to use those with "
"error handling."
msgstr ""
"Brutto? Ja, det är det. Detta förhindrar slumpmässiga krascher och / eller "
"oväntat hoppade över C ++ -avslutningar längre upp i samtalsstacken när "
"sådana trådar tvångsavslutades här i CPython 3.13 och tidigare. CPythons "
"körtid :term:`thread state` C API:er har aldrig haft några förväntningar på "
"felrapportering eller hantering vid :term:`thread state` attachment-tid som "
"skulle ha möjliggjort en graciös utgång från denna situation. Att ändra det "
"skulle kräva nya stabila C API: er och skriva om majoriteten av C-koden i "
"CPython-ekosystemet för att använda dem med felhantering."

msgid "High-level API"
msgstr "API på hög nivå"

msgid ""
"These are the most commonly used types and functions when writing C "
"extension code, or when embedding the Python interpreter:"
msgstr ""
"Dessa är de vanligaste typerna och funktionerna när du skriver C-tilläggskod "
"eller när du bäddar in Python-tolken:"

msgid ""
"This data structure represents the state shared by a number of cooperating "
"threads.  Threads belonging to the same interpreter share their module "
"administration and a few other internal items. There are no public members "
"in this structure."
msgstr ""
"Denna datastruktur representerar det tillstånd som delas av ett antal "
"samarbetande trådar.  Trådar som tillhör samma tolk delar sin "
"moduladministration och några andra interna objekt. Det finns inga "
"offentliga medlemmar i denna struktur."

msgid ""
"Threads belonging to different interpreters initially share nothing, except "
"process state like available memory, open file descriptors and such.  The "
"global interpreter lock is also shared by all threads, regardless of to "
"which interpreter they belong."
msgstr ""
"Trådar som tillhör olika tolkar delar till en början ingenting, förutom "
"processstatus som tillgängligt minne, öppna filbeskrivare och liknande.  Det "
"globala tolklåset delas också av alla trådar, oavsett vilken tolk de tillhör."

msgid ""
"This data structure represents the state of a single thread.  The only "
"public data member is:"
msgstr ""
"Denna datastruktur representerar tillståndet för en enskild tråd.  Den enda "
"offentliga datamedlemmen är:"

msgid "This thread's interpreter state."
msgstr "Den här trådens tolkstatus."

msgid "Deprecated function which does nothing."
msgstr "Föråldrad funktion som inte gör någonting."

msgid ""
"In Python 3.6 and older, this function created the GIL if it didn't exist."
msgstr ""
"I Python 3.6 och äldre skapade den här funktionen GIL om den inte fanns."

msgid "The function now does nothing."
msgstr "Funktionen gör nu ingenting."

msgid ""
"This function is now called by :c:func:`Py_Initialize()`, so you don't have "
"to call it yourself anymore."
msgstr ""
"Den här funktionen anropas nu av :c:func:`Py_Initialize()`, så du behöver "
"inte anropa den själv längre."

msgid ""
"This function cannot be called before :c:func:`Py_Initialize()` anymore."
msgstr ""
"Den här funktionen kan inte längre anropas före :c:func:`Py_Initialize()`."

msgid ""
"Detach the :term:`attached thread state` and return it. The thread will have "
"no :term:`thread state` upon returning."
msgstr ""
"Avlägsna :term:`attached thread state` och returnera det. Tråden kommer inte "
"att ha någon :term:`thread state` när den återlämnas."

msgid ""
"Set the :term:`attached thread state` to *tstate*. The passed :term:`thread "
"state` **should not** be :term:`attached <attached thread state>`, otherwise "
"deadlock ensues. *tstate* will be attached upon returning."
msgstr ""
"Sätt :term:`attached thread state` till *tstate*. Det passerade :term:"
"`thread state` **bör** inte** vara :term:`attached <attached thread state>`, "
"annars uppstår deadlock. *tstate* kommer att vara attached vid returnering."

msgid ""
"Calling this function from a thread when the runtime is finalizing will hang "
"the thread until the program exits, even if the thread was not created by "
"Python.  Refer to :ref:`cautions-regarding-runtime-finalization` for more "
"details."
msgstr ""
"Om du anropar den här funktionen från en tråd när körtiden håller på att "
"slutföras kommer tråden att hänga kvar tills programmet avslutas, även om "
"tråden inte skapades av Python.  Se :ref:`cautions-regarding-runtime-"
"finalization` för mer information."

msgid ""
"Hangs the current thread, rather than terminating it, if called while the "
"interpreter is finalizing."
msgstr ""
"Hänger den aktuella tråden i stället för att avsluta den, om den anropas "
"medan tolken håller på att slutföras."

msgid ""
"Return the :term:`attached thread state`. If the thread has no attached "
"thread state, (such as when inside of :c:macro:`Py_BEGIN_ALLOW_THREADS` "
"block), then this issues a fatal error (so that the caller needn't check for "
"``NULL``)."
msgstr ""
"Returnerar :term:`attached thread state`. Om tråden inte har något anslutet "
"trådtillstånd (t.ex. inuti ett :c:macro:`Py_BEGIN_ALLOW_THREADS` block), så "
"ger detta ett fatalt fel (så att anroparen inte behöver kontrollera för "
"``NULL``)."

msgid "See also :c:func:`PyThreadState_GetUnchecked`."
msgstr "Se även :c:func:`PyThreadState_GetUnchecked`."

msgid ""
"Similar to :c:func:`PyThreadState_Get`, but don't kill the process with a "
"fatal error if it is NULL. The caller is responsible to check if the result "
"is NULL."
msgstr ""
"Liknar :c:func:`PyThreadState_Get`, men dödar inte processen med ett fatalt "
"fel om det är NULL. Den som anropar är ansvarig för att kontrollera om "
"resultatet är NULL."

msgid ""
"In Python 3.5 to 3.12, the function was private and known as "
"``_PyThreadState_UncheckedGet()``."
msgstr ""
"I Python 3.5 till 3.12 var funktionen privat och känd som "
"``_PyThreadState_UncheckedGet()``."

msgid ""
"Set the :term:`attached thread state` to *tstate*, and return the :term:"
"`thread state` that was attached prior to calling."
msgstr ""
"Sätter :term:`attached thread state` till *tstate*, och returnerar :term:"
"`thread state` som var attached innan anropet."

msgid ""
"This function is safe to call without an :term:`attached thread state`; it "
"will simply return ``NULL`` indicating that there was no prior thread state."
msgstr ""
"Denna funktion är säker att anropa utan en :term:`attached thread state`; "
"den kommer helt enkelt att returnera ``NULL`` vilket indikerar att det inte "
"fanns någon tidigare thread state."

msgid ""
"Similar to :c:func:`PyGILState_Ensure`, this function will hang the thread "
"if the runtime is finalizing."
msgstr ""
"I likhet med :c:func:`PyGILState_Ensure`, kommer denna funktion att hänga "
"upp tråden om runtime håller på att slutföras."

msgid ""
"The following functions use thread-local storage, and are not compatible "
"with sub-interpreters:"
msgstr ""
"Följande funktioner använder trådlokal lagring och är inte kompatibla med "
"undertolkare:"

msgid ""
"Ensure that the current thread is ready to call the Python C API regardless "
"of the current state of Python, or of the :term:`attached thread state`. "
"This may be called as many times as desired by a thread as long as each call "
"is matched with a call to :c:func:`PyGILState_Release`. In general, other "
"thread-related APIs may be used between :c:func:`PyGILState_Ensure` and :c:"
"func:`PyGILState_Release` calls as long as the thread state is restored to "
"its previous state before the Release().  For example, normal usage of the :"
"c:macro:`Py_BEGIN_ALLOW_THREADS` and :c:macro:`Py_END_ALLOW_THREADS` macros "
"is acceptable."
msgstr ""
"Säkerställer att den aktuella tråden är redo att anropa Python C API oavsett "
"Pythons aktuella status eller :term:`attached thread state`. Detta kan "
"anropas hur många gånger som helst av en tråd så länge som varje anrop "
"matchas med ett anrop till :c:func:`PyGILState_Release`. I allmänhet kan "
"andra trådrelaterade API:er användas mellan anropen av :c:func:"
"`PyGILState_Ensure` och :c:func:`PyGILState_Release` så länge som trådens "
"tillstånd återställs till dess tidigare tillstånd före Release().  Till "
"exempel är normal användning av makrona :c:macro:`Py_BEGIN_ALLOW_THREADS` "
"och :c:macro:`Py_END_ALLOW_THREADS` acceptabel."

msgid ""
"The return value is an opaque \"handle\" to the :term:`attached thread "
"state` when :c:func:`PyGILState_Ensure` was called, and must be passed to :c:"
"func:`PyGILState_Release` to ensure Python is left in the same state. Even "
"though recursive calls are allowed, these handles *cannot* be shared - each "
"unique call to :c:func:`PyGILState_Ensure` must save the handle for its call "
"to :c:func:`PyGILState_Release`."
msgstr ""
"Returvärdet är ett opakt \"handtag\" till :term:`attached thread state` när :"
"c:func:`PyGILState_Ensure` anropades, och måste skickas till :c:func:"
"`PyGILState_Release` för att säkerställa att Python lämnas i samma "
"tillstånd. Även om rekursiva anrop är tillåtna, kan dessa handtag *inte* "
"delas - varje unikt anrop till :c:func:`PyGILState_Ensure` måste spara "
"handtaget för sitt anrop till :c:func:`PyGILState_Release`."

msgid ""
"When the function returns, there will be an :term:`attached thread state` "
"and the thread will be able to call arbitrary Python code.  Failure is a "
"fatal error."
msgstr ""
"När funktionen returneras kommer det att finnas en :term:`attached thread "
"state` och tråden kommer att kunna anropa godtycklig Python-kod.  "
"Misslyckande är ett fatalt fel."

msgid ""
"Calling this function when the runtime is finalizing is unsafe. Doing so "
"will either hang the thread until the program ends, or fully crash the "
"interpreter in rare cases. Refer to :ref:`cautions-regarding-runtime-"
"finalization` for more details."
msgstr ""
"Det är osäkert att anropa denna funktion när runtime håller på att avslutas. "
"Om du gör det kommer du antingen att hänga upp tråden tills programmet "
"avslutas, eller i sällsynta fall krascha tolken helt och hållet. Se :ref:"
"`cautions-regarding-runtime-finalization` för mer information."

msgid ""
"Release any resources previously acquired.  After this call, Python's state "
"will be the same as it was prior to the corresponding :c:func:"
"`PyGILState_Ensure` call (but generally this state will be unknown to the "
"caller, hence the use of the GILState API)."
msgstr ""
"Frigör alla resurser som tidigare förvärvats.  Efter detta anrop kommer "
"Pythons tillstånd att vara detsamma som det var före motsvarande :c:func:"
"`PyGILState_Ensure`-anrop (men i allmänhet kommer detta tillstånd att vara "
"okänt för anroparen, därav användningen av GILState API)."

msgid ""
"Every call to :c:func:`PyGILState_Ensure` must be matched by a call to :c:"
"func:`PyGILState_Release` on the same thread."
msgstr ""
"Varje anrop till :c:func:`PyGILState_Ensure` måste motsvaras av ett anrop "
"till :c:func:`PyGILState_Release` på samma tråd."

msgid ""
"Get the :term:`attached thread state` for this thread.  May return ``NULL`` "
"if no GILState API has been used on the current thread.  Note that the main "
"thread always has such a thread-state, even if no auto-thread-state call has "
"been made on the main thread.  This is mainly a helper/diagnostic function."
msgstr ""
"Hämta :term:`attached thread state` för den här tråden.  Kan returnera "
"``NULL`` om inget GILState API har använts på den aktuella tråden.  "
"Observera att huvudtråden alltid har ett sådant trådtillstånd, även om inget "
"anrop om automatiskt trådtillstånd har gjorts på huvudtråden.  Detta är "
"huvudsakligen en hjälp/diagnostisk funktion."

msgid ""
"This function does not account for :term:`thread states <thread state>` "
"created by something other than :c:func:`PyGILState_Ensure` (such as :c:func:"
"`PyThreadState_New`). Prefer :c:func:`PyThreadState_Get` or :c:func:"
"`PyThreadState_GetUnchecked` for most cases."
msgstr ""
"Den här funktionen tar inte hänsyn till :term:`thread states <thread state>` "
"som skapats av något annat än :c:func:`PyGILState_Ensure` (t.ex. :c:func:"
"`PyThreadState_New`). Föredrar :c:func:`PyThreadState_Get` eller :c:func:"
"`PyThreadState_GetUnchecked` för de flesta fall."

msgid ""
"Return ``1`` if the current thread is holding the :term:`GIL` and ``0`` "
"otherwise. This function can be called from any thread at any time. Only if "
"it has had its :term:`thread state <attached thread state>` initialized via :"
"c:func:`PyGILState_Ensure` will it return ``1``. This is mainly a helper/"
"diagnostic function.  It can be useful for example in callback contexts or "
"memory allocation functions when knowing that the :term:`GIL` is locked can "
"allow the caller to perform sensitive actions or otherwise behave "
"differently."
msgstr ""
"Returnerar ``1`` om den aktuella tråden håller i :term:`GIL` och ``0`` "
"annars. Denna funktion kan anropas från vilken tråd som helst när som helst. "
"Endast om den har fått sin :term:`thread state <attached thread state>` "
"initialiserad via :c:func:`PyGILState_Ensure` kommer den att returnera "
"``1``. Detta är huvudsakligen en hjälp/diagnostisk funktion.  Den kan vara "
"användbar till exempel i återuppringningssammanhang eller "
"minnesallokeringsfunktioner när vetskapen om att :term:`GIL` är låst kan "
"göra det möjligt för anroparen att utföra känsliga åtgärder eller på annat "
"sätt bete sig annorlunda."

msgid ""
"If the current Python process has ever created a subinterpreter, this "
"function will *always* return ``1``. Prefer :c:func:"
"`PyThreadState_GetUnchecked` for most cases."
msgstr ""
"Om den aktuella Python-processen någonsin har skapat en undertolk, kommer "
"denna funktion *alltid* att returnera ``1``. Föredrar :c:func:"
"`PyThreadState_GetUnchecked` för de flesta fall."

msgid ""
"The following macros are normally used without a trailing semicolon; look "
"for example usage in the Python source distribution."
msgstr ""
"Följande makron används normalt utan efterföljande semikolon; se exempel på "
"hur de används i Pythons källdistribution."

msgid ""
"This macro expands to ``{ PyThreadState *_save; _save = PyEval_SaveThread();"
"``. Note that it contains an opening brace; it must be matched with a "
"following :c:macro:`Py_END_ALLOW_THREADS` macro.  See above for further "
"discussion of this macro."
msgstr ""
"Detta makro expanderar till ``{ PyThreadState *_save; _save = "
"PyEval_SaveThread();``. Observera att det innehåller en inledande parentes; "
"det måste matchas med ett följande :c:macro:`Py_END_ALLOW_THREADS`-makro.  "
"Se ovan för vidare diskussion om detta makro."

msgid ""
"This macro expands to ``PyEval_RestoreThread(_save); }``. Note that it "
"contains a closing brace; it must be matched with an earlier :c:macro:"
"`Py_BEGIN_ALLOW_THREADS` macro.  See above for further discussion of this "
"macro."
msgstr ""
"Detta makro expanderar till ``PyEval_RestoreThread(_save); }``. Observera "
"att det innehåller en avslutande parentes; det måste matchas med ett "
"tidigare :c:macro:`Py_BEGIN_ALLOW_THREADS`-makro.  Se ovan för ytterligare "
"diskussion om detta makro."

msgid ""
"This macro expands to ``PyEval_RestoreThread(_save);``: it is equivalent to :"
"c:macro:`Py_END_ALLOW_THREADS` without the closing brace."
msgstr ""
"Detta makro expanderar till ``PyEval_RestoreThread(_save);``: det är "
"likvärdigt med :c:macro:`Py_END_ALLOW_THREADS` utan den avslutande "
"parentesen."

msgid ""
"This macro expands to ``_save = PyEval_SaveThread();``: it is equivalent to :"
"c:macro:`Py_BEGIN_ALLOW_THREADS` without the opening brace and variable "
"declaration."
msgstr ""
"Detta makro expanderar till ``_save = PyEval_SaveThread();``: det motsvarar :"
"c:macro:`Py_BEGIN_ALLOW_THREADS` utan inledande hängslen och "
"variabeldeklaration."

msgid "Low-level API"
msgstr "API på låg nivå"

msgid ""
"All of the following functions must be called after :c:func:`Py_Initialize`."
msgstr "Alla följande funktioner måste anropas efter :c:func:`Py_Initialize`."

msgid ""
":c:func:`Py_Initialize()` now initializes the :term:`GIL` and sets an :term:"
"`attached thread state`."
msgstr ""
":c:func:`Py_Initialize()` initierar nu :term:`GIL` och sätter en :term:"
"`attached thread state`."

msgid ""
"Create a new interpreter state object.  An :term:`attached thread state` is "
"not needed, but may optionally exist if it is necessary to serialize calls "
"to this function."
msgstr ""
"Skapar ett nytt tolktillståndsobjekt.  En :term:`attached thread state` "
"behövs inte, men kan eventuellt existera om det är nödvändigt att "
"serialisera anrop till denna funktion."

msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython."
"PyInterpreterState_New`` with no arguments."
msgstr ""
"Utlöser en :ref:`auditing event <auditing>` ``cpython."
"PyInterpreterState_New`` utan argument."

msgid ""
"Reset all information in an interpreter state object.  There must be an :"
"term:`attached thread state` for the interpreter."
msgstr ""
"Återställer all information i ett tolkstatusobjekt.  Det måste finnas en :"
"term:`attached thread state` för tolken."

msgid ""
"Raises an :ref:`auditing event <auditing>` ``cpython."
"PyInterpreterState_Clear`` with no arguments."
msgstr ""
"Utlöser en :ref:`auditing event <auditing>` ``cpython."
"PyInterpreterState_Clear`` utan argument."

msgid ""
"Destroy an interpreter state object.  There **should not** be an :term:"
"`attached thread state` for the target interpreter. The interpreter state "
"must have been reset with a previous call to :c:func:"
"`PyInterpreterState_Clear`."
msgstr ""
"Förstör ett tolktillståndsobjekt.  Det **bör** inte finnas något :term:"
"`attached thread state` för måltolken. Tolkens tillstånd måste ha "
"återställts med ett tidigare anrop till :c:func:`PyInterpreterState_Clear`."

msgid ""
"Create a new thread state object belonging to the given interpreter object. "
"An :term:`attached thread state` is not needed."
msgstr ""
"Skapar ett nytt trådtillståndsobjekt som hör till det givna tolkobjektet. "
"En :term:`attached thread state` behövs inte."

msgid ""
"Reset all information in a :term:`thread state` object.  *tstate* must be :"
"term:`attached <attached thread state>`"
msgstr ""
"Återställer all information i ett :term:`thread state`-objekt.  *tstate* "
"måste vara :term:`attached <attached thread state>`"

msgid ""
"This function now calls the :c:member:`PyThreadState.on_delete` callback. "
"Previously, that happened in :c:func:`PyThreadState_Delete`."
msgstr ""
"Denna funktion anropar nu :c:member:`PyThreadState.on_delete` callback. "
"Tidigare skedde det i :c:func:`PyThreadState_Delete`."

msgid "The :c:member:`PyThreadState.on_delete` callback was removed."
msgstr "Återkallelsen :c:member:`PyThreadState.on_delete` togs bort."

msgid ""
"Destroy a :term:`thread state` object.  *tstate* should not be :term:"
"`attached <attached thread state>` to any thread. *tstate* must have been "
"reset with a previous call to :c:func:`PyThreadState_Clear`."
msgstr ""
"Förstör ett :term:`thread state`-objekt.  *tstate* bör inte vara :term:"
"`attached <attached thread state>` till någon tråd. *tstate* måste ha "
"återställts med ett tidigare anrop till :c:func:`PyThreadState_Clear`."

msgid ""
"Detach the :term:`attached thread state` (which must have been reset with a "
"previous call to :c:func:`PyThreadState_Clear`) and then destroy it."
msgstr ""
"Avlägsna :term:`attached thread state` (som måste ha återställts med ett "
"tidigare anrop till :c:func:`PyThreadState_Clear`) och förstör det sedan."

msgid ""
"No :term:`thread state` will be :term:`attached <attached thread state>` "
"upon returning."
msgstr ""
"Ingen :term:`thread state` kommer att vara :term:`attached <attached thread "
"state>` vid returnering."

msgid "Get the current frame of the Python thread state *tstate*."
msgstr "Hämta den aktuella bilden av Python-trådtillståndet *tstate*."

msgid ""
"Return a :term:`strong reference`. Return ``NULL`` if no frame is currently "
"executing."
msgstr ""
"Returnerar en :term:`stark referens`. Returnerar ``NULL`` om ingen ram körs "
"för närvarande."

msgid "See also :c:func:`PyEval_GetFrame`."
msgstr "Se även :c:func:`PyEval_GetFrame`."

msgid ""
"*tstate* must not be ``NULL``, and must be :term:`attached <attached thread "
"state>`."
msgstr ""
"*tstate* får inte vara ``NULL``, och måste vara :term:`attached <attached "
"thread state>`."

msgid ""
"Get the unique :term:`thread state` identifier of the Python thread state "
"*tstate*."
msgstr ""
"Hämta den unika :term:`thread state`-identifieraren för Python-"
"trådtillståndet *tstate*."

msgid "Get the interpreter of the Python thread state *tstate*."
msgstr "Hämta tolken för Python-trådtillståndet *tstate*."

msgid "Suspend tracing and profiling in the Python thread state *tstate*."
msgstr "Avbryt spårning och profilering i Python-trådtillståndet *tstate*."

msgid "Resume them using the :c:func:`PyThreadState_LeaveTracing` function."
msgstr ""
"Återuppta dem med hjälp av funktionen :c:func:`PyThreadState_LeaveTracing`."

msgid ""
"Resume tracing and profiling in the Python thread state *tstate* suspended "
"by the :c:func:`PyThreadState_EnterTracing` function."
msgstr ""
"Återuppta spårning och profilering i Python-trådtillståndet *tstate* som "
"avbröts av funktionen :c:func:`PyThreadState_EnterTracing`."

msgid ""
"See also :c:func:`PyEval_SetTrace` and :c:func:`PyEval_SetProfile` functions."
msgstr ""
"Se även funktionerna :c:func:`PyEval_SetTrace` och :c:func:"
"`PyEval_SetProfile`."

msgid "Get the current interpreter."
msgstr "Hämta den aktuella tolken."

msgid ""
"Issue a fatal error if there no :term:`attached thread state`. It cannot "
"return NULL."
msgstr ""
"Utfärdar ett allvarligt fel om det inte finns någon :term:`attached thread "
"state`. Den kan inte returnera NULL."

msgid ""
"Return the interpreter's unique ID.  If there was any error in doing so then "
"``-1`` is returned and an error is set."
msgstr ""
"Returnerar tolkens unika ID.  Om något fel inträffade returneras ``-1`` och "
"ett fel anges."

msgid "The caller must have an :term:`attached thread state`."
msgstr "Den som anropar måste ha en :term:`attached thread state`."

msgid ""
"Return a dictionary in which interpreter-specific data may be stored. If "
"this function returns ``NULL`` then no exception has been raised and the "
"caller should assume no interpreter-specific dict is available."
msgstr ""
"Returnerar en ordbok i vilken tolkspecifika data kan lagras. Om denna "
"funktion returnerar ``NULL`` har inget undantag uppstått och den som anropar "
"bör anta att ingen tolkspecifik dict finns tillgänglig."

msgid ""
"This is not a replacement for :c:func:`PyModule_GetState()`, which "
"extensions should use to store interpreter-specific state information."
msgstr ""
"Detta är inte en ersättning för :c:func:`PyModule_GetState()`, som tillägg "
"bör använda för att lagra tolkspecifik tillståndsinformation."

msgid "Type of a frame evaluation function."
msgstr "Typ av utvärderingsfunktion för en ram."

msgid ""
"The *throwflag* parameter is used by the ``throw()`` method of generators: "
"if non-zero, handle the current exception."
msgstr ""
"Parametern *throwflag* används av generatorns metod ``throw()``: om den är "
"icke-noll, hanteras det aktuella undantaget."

msgid "The function now takes a *tstate* parameter."
msgstr "Funktionen tar nu en *tstate* parameter."

msgid ""
"The *frame* parameter changed from ``PyFrameObject*`` to "
"``_PyInterpreterFrame*``."
msgstr ""
"Parametern *frame* ändrades från ``PyFrameObject*`` till "
"``_PyInterpreterFrame*``."

msgid "Get the frame evaluation function."
msgstr "Hämta funktionen för utvärdering av ramen."

msgid "See the :pep:`523` \"Adding a frame evaluation API to CPython\"."
msgstr "Se :pep:`523` \"Lägga till ett API för ramutvärdering till CPython\"."

msgid "Set the frame evaluation function."
msgstr "Ställ in funktionen för utvärdering av ramen."

msgid ""
"Return a dictionary in which extensions can store thread-specific state "
"information.  Each extension should use a unique key to use to store state "
"in the dictionary.  It is okay to call this function when no :term:`thread "
"state` is :term:`attached <attached thread state>`. If this function returns "
"``NULL``, no exception has been raised and the caller should assume no "
"thread state is attached."
msgstr ""
"Returnerar en ordbok där tillägg kan lagra trådspecifik "
"tillståndsinformation.  Varje tillägg bör använda en unik nyckel som används "
"för att lagra tillstånd i ordlistan.  Det är okej att anropa denna funktion "
"när ingen :term:`thread state` är :term:`attached <attached thread state>`. "
"Om denna funktion returnerar ``NULL`` har inget undantag uppstått och den "
"som anropar bör anta att inget trådtillstånd är kopplat."

msgid ""
"Asynchronously raise an exception in a thread. The *id* argument is the "
"thread id of the target thread; *exc* is the exception object to be raised. "
"This function does not steal any references to *exc*. To prevent naive "
"misuse, you must write your own C extension to call this.  Must be called "
"with an :term:`attached thread state`. Returns the number of thread states "
"modified; this is normally one, but will be zero if the thread id isn't "
"found.  If *exc* is ``NULL``, the pending exception (if any) for the thread "
"is cleared. This raises no exceptions."
msgstr ""
"Asynkronisera ett undantag i en tråd. Argumentet *id* är tråd-id för "
"måltråden; *exc* är undantagsobjektet som ska utlösas. Denna funktion stjäl "
"inte några referenser till *exc*. För att förhindra naivt missbruk måste du "
"skriva ditt eget C-tillägg för att anropa detta.  Måste anropas med en :term:"
"`attached thread state`. Returnerar antalet modifierade trådtillstånd; detta "
"är normalt ett, men kommer att vara noll om tråd-id inte hittas.  Om *exc* "
"är ``NULL``, rensas det väntande undantaget (om det finns något) för tråden. "
"Detta ger inte upphov till några undantag."

msgid ""
"The type of the *id* parameter changed from :c:expr:`long` to :c:expr:"
"`unsigned long`."
msgstr ""
"Typen av parametern *id* ändrades från :c:expr:`long` till :c:expr:`unsigned "
"long`."

msgid ""
":term:`Attach <attached thread state>` *tstate* to the current thread, which "
"must not be ``NULL`` or already :term:`attached <attached thread state>`."
msgstr ""
":term:`Attach <attached thread state>` *tstate* till den aktuella tråden, "
"som inte får vara ``NULL`` eller redan :term:`attached <attached thread "
"state>`."

msgid ""
"The calling thread must not already have an :term:`attached thread state`."
msgstr ""
"Den anropande tråden får inte redan ha ett :term:`attached thread state`."

msgid ""
"Updated to be consistent with :c:func:`PyEval_RestoreThread`, :c:func:"
"`Py_END_ALLOW_THREADS`, and :c:func:`PyGILState_Ensure`, and terminate the "
"current thread if called while the interpreter is finalizing."
msgstr ""
"Uppdaterad för att överensstämma med :c:func:`PyEval_RestoreThread`, :c:func:"
"`Py_END_ALLOW_THREADS`, och :c:func:`PyGILState_Ensure`, och avsluta den "
"aktuella tråden om den anropas medan tolken håller på att slutföras."

msgid ""
":c:func:`PyEval_RestoreThread` is a higher-level function which is always "
"available (even when threads have not been initialized)."
msgstr ""
":c:func:`PyEval_RestoreThread` är en funktion på högre nivå som alltid är "
"tillgänglig (även när trådar inte har initialiserats)."

msgid ""
"Detach the :term:`attached thread state`. The *tstate* argument, which must "
"not be ``NULL``, is only used to check that it represents the :term:"
"`attached thread state` --- if it isn't, a fatal error is reported."
msgstr ""
"Avlägsna :term:`attached thread state`. Argumentet *tstate*, som inte får "
"vara ``NULL``, används bara för att kontrollera att det representerar :term:"
"`attached thread state` --- om det inte gör det, rapporteras ett allvarligt "
"fel."

msgid ""
":c:func:`PyEval_SaveThread` is a higher-level function which is always "
"available (even when threads have not been initialized)."
msgstr ""
":c:func:`PyEval_SaveThread` är en funktion på högre nivå som alltid är "
"tillgänglig (även när trådar inte har initialiserats)."

msgid "Sub-interpreter support"
msgstr "Stöd för undertolkning"

msgid ""
"While in most uses, you will only embed a single Python interpreter, there "
"are cases where you need to create several independent interpreters in the "
"same process and perhaps even in the same thread. Sub-interpreters allow you "
"to do that."
msgstr ""
"Även om du i de flesta fall bara kommer att bädda in en enda Python-tolk, "
"finns det fall där du behöver skapa flera oberoende tolkar i samma process "
"och kanske till och med i samma tråd. Undertolkare gör det möjligt för dig "
"att göra det."

msgid ""
"The \"main\" interpreter is the first one created when the runtime "
"initializes. It is usually the only Python interpreter in a process.  Unlike "
"sub-interpreters, the main interpreter has unique process-global "
"responsibilities like signal handling.  It is also responsible for execution "
"during runtime initialization and is usually the active interpreter during "
"runtime finalization.  The :c:func:`PyInterpreterState_Main` function "
"returns a pointer to its state."
msgstr ""
"Tolken \"main\" är den första som skapas när runtime initialiseras. Det är "
"vanligtvis den enda Python-tolken i en process.  Till skillnad från "
"undertolkare har huvudtolkaren unika processglobala ansvarsområden som "
"signalhantering.  Den är också ansvarig för exekvering under initiering av "
"körtiden och är vanligtvis den aktiva tolken under slutförande av körtiden.  "
"Funktionen :c:func:`PyInterpreterState_Main` returnerar en pekare till dess "
"tillstånd."

msgid ""
"You can switch between sub-interpreters using the :c:func:"
"`PyThreadState_Swap` function. You can create and destroy them using the "
"following functions:"
msgstr ""
"Du kan växla mellan undertolkare med hjälp av funktionen :c:func:"
"`PyThreadState_Swap`. Du kan skapa och förstöra dem med hjälp av följande "
"funktioner:"

msgid ""
"Structure containing most parameters to configure a sub-interpreter. Its "
"values are used only in :c:func:`Py_NewInterpreterFromConfig` and never "
"modified by the runtime."
msgstr ""
"Struktur som innehåller de flesta parametrar för att konfigurera en sub-"
"tolk. Dess värden används endast i :c:func:`Py_NewInterpreterFromConfig` och "
"ändras aldrig av körtiden."

msgid "Structure fields:"
msgstr "Strukturfält:"

msgid ""
"If this is ``0`` then the sub-interpreter will use its own \"object\" "
"allocator state. Otherwise it will use (share) the main interpreter's."
msgstr ""
"Om detta är ``0`` kommer undertolken att använda sitt eget \"objekt\"-"
"allokeringstillstånd. Annars kommer den att använda (dela) huvudtolkens."

msgid ""
"If this is ``0`` then :c:member:`~PyInterpreterConfig."
"check_multi_interp_extensions` must be ``1`` (non-zero). If this is ``1`` "
"then :c:member:`~PyInterpreterConfig.gil` must not be :c:macro:"
"`PyInterpreterConfig_OWN_GIL`."
msgstr ""
"Om detta är ``0`` så måste :c:member:`~PyInterpreterConfig."
"check_multi_interp_extensions` vara ``1`` (icke-noll). Om detta är ``1`` så "
"får inte :c:member:`~PyInterpreterConfig.gil` vara :c:macro:"
"`PyInterpreterConfig_OWN_GIL`."

msgid ""
"If this is ``0`` then the runtime will not support forking the process in "
"any thread where the sub-interpreter is currently active. Otherwise fork is "
"unrestricted."
msgstr ""
"Om detta är ``0`` kommer körtiden inte att stödja forking av processen i "
"någon tråd där undertolken för närvarande är aktiv. Annars är fork "
"obegränsad."

msgid ""
"Note that the :mod:`subprocess` module still works when fork is disallowed."
msgstr ""
"Observera att modulen :mod:`subprocess` fortfarande fungerar när fork inte "
"är tillåtet."

msgid ""
"If this is ``0`` then the runtime will not support replacing the current "
"process via exec (e.g. :func:`os.execv`) in any thread where the sub-"
"interpreter is currently active. Otherwise exec is unrestricted."
msgstr ""
"Om detta är ``0`` kommer körtiden inte att stödja ersättning av den aktuella "
"processen via exec (t.ex. :func:`os.execv`) i någon tråd där undertolken för "
"närvarande är aktiv. Annars är exec obegränsat."

msgid ""
"Note that the :mod:`subprocess` module still works when exec is disallowed."
msgstr ""
"Observera att modulen :mod:`subprocess` fortfarande fungerar när exec inte "
"är tillåtet."

msgid ""
"If this is ``0`` then the sub-interpreter's :mod:`threading` module won't "
"create threads. Otherwise threads are allowed."
msgstr ""
"Om detta är ``0`` så kommer undertolkarens modul :mod:`threading` inte att "
"skapa trådar. Annars är trådar tillåtna."

msgid ""
"If this is ``0`` then the sub-interpreter's :mod:`threading` module won't "
"create daemon threads. Otherwise daemon threads are allowed (as long as :c:"
"member:`~PyInterpreterConfig.allow_threads` is non-zero)."
msgstr ""
"Om detta är ``0`` så kommer inte undertolkarens modul :mod:`threading` att "
"skapa daemon-trådar. Annars är daemon-trådar tillåtna (så länge som :c:"
"member:`~PyInterpreterConfig.allow_threads` är icke-noll)."

msgid ""
"If this is ``0`` then all extension modules may be imported, including "
"legacy (single-phase init) modules, in any thread where the sub-interpreter "
"is currently active. Otherwise only multi-phase init extension modules (see :"
"pep:`489`) may be imported. (Also see :c:macro:"
"`Py_mod_multiple_interpreters`.)"
msgstr ""
"Om detta är ``0`` så kan alla tilläggsmoduler importeras, inklusive äldre "
"moduler (enfasig init), i alla trådar där undertolkaren för närvarande är "
"aktiv. Annars får endast tilläggsmoduler för flerfasig init (se :pep:`489`) "
"importeras. (Se även :c:macro:`Py_mod_multiple_interpreters`.)"

msgid ""
"This must be ``1`` (non-zero) if :c:member:`~PyInterpreterConfig."
"use_main_obmalloc` is ``0``."
msgstr ""
"Detta måste vara ``1`` (icke-noll) om :c:member:`~PyInterpreterConfig."
"use_main_obmalloc` är ``0``."

msgid ""
"This determines the operation of the GIL for the sub-interpreter. It may be "
"one of the following:"
msgstr ""
"Detta bestämmer hur GIL ska fungera för undertolken. Det kan vara något av "
"följande:"

msgid "Use the default selection (:c:macro:`PyInterpreterConfig_SHARED_GIL`)."
msgstr "Använd standardvalet (:c:macro:`PyInterpreterConfig_SHARED_GIL`)."

msgid "Use (share) the main interpreter's GIL."
msgstr "Använd (dela) huvudtolkens GIL."

msgid "Use the sub-interpreter's own GIL."
msgstr "Använd undertolkarens egen GIL."

msgid ""
"If this is :c:macro:`PyInterpreterConfig_OWN_GIL` then :c:member:"
"`PyInterpreterConfig.use_main_obmalloc` must be ``0``."
msgstr ""
"Om detta är :c:macro:`PyInterpreterConfig_OWN_GIL` så måste :c:member:"
"`PyInterpreterConfig.use_main_obmalloc` vara ``0``."

msgid ""
"Create a new sub-interpreter.  This is an (almost) totally separate "
"environment for the execution of Python code.  In particular, the new "
"interpreter has separate, independent versions of all imported modules, "
"including the fundamental modules :mod:`builtins`, :mod:`__main__` and :mod:"
"`sys`.  The table of loaded modules (``sys.modules``) and the module search "
"path (``sys.path``) are also separate.  The new environment has no ``sys."
"argv`` variable.  It has new standard I/O stream file objects ``sys.stdin``, "
"``sys.stdout`` and ``sys.stderr`` (however these refer to the same "
"underlying file descriptors)."
msgstr ""
"Skapa en ny subinterpreter.  Detta är en (nästan) helt separat miljö för "
"exekvering av Python-kod.  I synnerhet har den nya tolken separata, "
"oberoende versioner av alla importerade moduler, inklusive de grundläggande "
"modulerna :mod:`builtins`, :mod:`__main__` och :mod:`sys`.  Tabellen över "
"inlästa moduler (``sys.modules``) och sökvägen för moduler (``sys.path``) är "
"också separata.  Den nya miljön har ingen variabel ``sys.argv``.  Den har "
"nya standard I/O-strömfilobjekt ``sys.stdin``, ``sys.stdout`` och ``sys."
"stderr`` (dessa hänvisar dock till samma underliggande filbeskrivare)."

msgid ""
"The given *config* controls the options with which the interpreter is "
"initialized."
msgstr "Den angivna *config* styr de alternativ som tolken initieras med."

msgid ""
"Upon success, *tstate_p* will be set to the first :term:`thread state` "
"created in the new sub-interpreter.  This thread state is :term:`attached "
"<attached thread state>`. Note that no actual thread is created; see the "
"discussion of thread states below.  If creation of the new interpreter is "
"unsuccessful, *tstate_p* is set to ``NULL``; no exception is set since the "
"exception state is stored in the :term:`attached thread state`, which might "
"not exist."
msgstr ""
"Vid framgång kommer *tstate_p* att sättas till det första :term:`thread "
"state` som skapats i den nya sub-interpretern.  Detta trådtillstånd är :term:"
"`attached <attached thread state>`. Observera att ingen egentlig tråd "
"skapas; se diskussionen om trådtillstånd nedan.  Om skapandet av den nya "
"tolken misslyckas, sätts *tstate_p* till ``NULL``; inget undantag sätts "
"eftersom undantagstillståndet lagras i :term:`attached thread state`, som "
"kanske inte existerar."

msgid ""
"Like all other Python/C API functions, an :term:`attached thread state` must "
"be present before calling this function, but it might be detached upon "
"returning. On success, the returned thread state will be :term:`attached "
"<attached thread state>`. If the sub-interpreter is created with its own :"
"term:`GIL` then the :term:`attached thread state` of the calling interpreter "
"will be detached. When the function returns, the new interpreter's :term:"
"`thread state` will be :term:`attached <attached thread state>` to the "
"current thread and the previous interpreter's :term:`attached thread state` "
"will remain detached."
msgstr ""
"Liksom alla andra Python/C API-funktioner måste ett :term:`attached thread "
"state` finnas innan denna funktion anropas, men det kan vara fristående när "
"funktionen returneras. Vid framgång kommer det returnerade trådtillståndet "
"att vara :term:`attached <attached thread state>`. Om subtolken skapas med "
"sin egen :term:`GIL` kommer :term:`attached thread state` för den anropande "
"tolken att lösgöras. När funktionen returneras kommer den nya tolkens :term:"
"`thread state` att vara :term:`attached <attached thread state>` till den "
"aktuella tråden och den föregående tolkens :term:`attached thread state` "
"kommer att förbli detached."

msgid ""
"Sub-interpreters are most effective when isolated from each other, with "
"certain functionality restricted::"
msgstr ""
"Undertolkar är mest effektiva när de är isolerade från varandra, med vissa "
"funktioner begränsade::"

msgid ""
"PyInterpreterConfig config = {\n"
"    .use_main_obmalloc = 0,\n"
"    .allow_fork = 0,\n"
"    .allow_exec = 0,\n"
"    .allow_threads = 1,\n"
"    .allow_daemon_threads = 0,\n"
"    .check_multi_interp_extensions = 1,\n"
"    .gil = PyInterpreterConfig_OWN_GIL,\n"
"};\n"
"PyThreadState *tstate = NULL;\n"
"PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);\n"
"if (PyStatus_Exception(status)) {\n"
"    Py_ExitStatusException(status);\n"
"}"
msgstr ""
"PyInterpreterConfig config = {\n"
"    .use_main_obmalloc = 0,\n"
"    .allow_fork = 0,\n"
"    .allow_exec = 0,\n"
"    .allow_threads = 1,\n"
"    .allow_daemon_threads = 0,\n"
"    .check_multi_interp_extensions = 1,\n"
"    .gil = PyInterpreterConfig_OWN_GIL,\n"
"};\n"
"PyThreadState *tstate = NULL;\n"
"PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);\n"
"if (PyStatus_Exception(status)) {\n"
"    Py_ExitStatusException(status);\n"
"}"

msgid ""
"Note that the config is used only briefly and does not get modified. During "
"initialization the config's values are converted into various :c:type:"
"`PyInterpreterState` values.  A read-only copy of the config may be stored "
"internally on the :c:type:`PyInterpreterState`."
msgstr ""
"Observera att config endast används kortvarigt och inte ändras. Under "
"initialiseringen konverteras configs värden till olika :c:type:"
"`PyInterpreterState`-värden.  En skrivskyddad kopia av config kan lagras "
"internt på :c:type:`PyInterpreterState`."

msgid "Extension modules are shared between (sub-)interpreters as follows:"
msgstr "Tilläggsmoduler delas mellan (under)tolkarna enligt följande:"

msgid ""
"For modules using multi-phase initialization, e.g. :c:func:"
"`PyModule_FromDefAndSpec`, a separate module object is created and "
"initialized for each interpreter. Only C-level static and global variables "
"are shared between these module objects."
msgstr ""
"För moduler som använder initialisering i flera faser, t.ex. :c:func:"
"`PyModule_FromDefAndSpec`, skapas och initieras ett separat modulobjekt för "
"varje tolk. Endast statiska och globala variabler på C-nivå delas mellan "
"dessa modulobjekt."

msgid ""
"For modules using single-phase initialization, e.g. :c:func:"
"`PyModule_Create`, the first time a particular extension is imported, it is "
"initialized normally, and a (shallow) copy of its module's dictionary is "
"squirreled away. When the same extension is imported by another "
"(sub-)interpreter, a new module is initialized and filled with the contents "
"of this copy; the extension's ``init`` function is not called. Objects in "
"the module's dictionary thus end up shared across (sub-)interpreters, which "
"might cause unwanted behavior (see `Bugs and caveats`_ below)."
msgstr ""
"För moduler som använder enfasinitialisering, t.ex. :c:func:"
"`PyModule_Create`, initieras ett visst tillägg normalt första gången det "
"importeras, och en (ytlig) kopia av modulens ordbok sparas. När samma "
"tillägg importeras av en annan (under)tolkare initieras en ny modul och "
"fylls med innehållet i denna kopia; tilläggets ``init``-funktion anropas "
"inte. Objekten i modulens ordbok delas därmed mellan (under)tolkarna, vilket "
"kan orsaka oönskat beteende (se `Buggar och varningar` nedan)."

msgid ""
"Note that this is different from what happens when an extension is imported "
"after the interpreter has been completely re-initialized by calling :c:func:"
"`Py_FinalizeEx` and :c:func:`Py_Initialize`; in that case, the extension's "
"``initmodule`` function *is* called again. As with multi-phase "
"initialization, this means that only C-level static and global variables are "
"shared between these modules."
msgstr ""
"Observera att detta skiljer sig från vad som händer när ett tillägg "
"importeras efter att tolken har initialiserats helt på nytt genom anrop av :"
"c:func:`Py_FinalizeEx` och :c:func:`Py_Initialize`; i så fall anropas "
"tilläggets funktion ``initmodule`` igen. Precis som med initialisering i "
"flera faser innebär detta att endast statiska och globala variabler på C-"
"nivå delas mellan dessa moduler."

msgid ""
"Create a new sub-interpreter.  This is essentially just a wrapper around :c:"
"func:`Py_NewInterpreterFromConfig` with a config that preserves the existing "
"behavior.  The result is an unisolated sub-interpreter that shares the main "
"interpreter's GIL, allows fork/exec, allows daemon threads, and allows "
"single-phase init modules."
msgstr ""
"Skapa en ny under-tolk.  Detta är i huvudsak bara ett omslag runt :c:func:"
"`Py_NewInterpreterFromConfig` med en konfiguration som bevarar det "
"befintliga beteendet.  Resultatet är en oisolerad undertolk som delar "
"huvudtolkens GIL, tillåter fork/exec, tillåter daemon-trådar och tillåter "
"enfasiga init-moduler."

msgid ""
"Destroy the (sub-)interpreter represented by the given :term:`thread state`. "
"The given thread state must be :term:`attached <attached thread state>`. "
"When the call returns, there will be no :term:`attached thread state`. All "
"thread states associated with this interpreter are destroyed."
msgstr ""
"Förstör den (under)tolk som representeras av den angivna :term:`thread "
"state`. Det givna trådtillståndet måste vara :term:`attached <attached "
"thread state>`. När anropet returneras kommer det inte att finnas något :"
"term:`attached thread state`. Alla trådtillstånd som är associerade med "
"denna tolk förstörs."

msgid ""
":c:func:`Py_FinalizeEx` will destroy all sub-interpreters that haven't been "
"explicitly destroyed at that point."
msgstr ""
":c:func:`Py_FinalizeEx` kommer att förstöra alla undertolkare som inte "
"uttryckligen har förstörts vid den tidpunkten."

msgid "A Per-Interpreter GIL"
msgstr "A Per tolk GIL"

msgid ""
"Using :c:func:`Py_NewInterpreterFromConfig` you can create a sub-interpreter "
"that is completely isolated from other interpreters, including having its "
"own GIL.  The most important benefit of this isolation is that such an "
"interpreter can execute Python code without being blocked by other "
"interpreters or blocking any others.  Thus a single Python process can truly "
"take advantage of multiple CPU cores when running Python code.  The "
"isolation also encourages a different approach to concurrency than that of "
"just using threads. (See :pep:`554`.)"
msgstr ""
"Med :c:func:`Py_NewInterpreterFromConfig` kan du skapa en subtolk som är "
"helt isolerad från andra tolkar, inklusive att ha sin egen GIL.  Den "
"viktigaste fördelen med denna isolering är att en sådan tolk kan exekvera "
"Python-kod utan att blockeras av andra tolkar eller blockera några andra.  "
"På så sätt kan en enda Python-process verkligen dra nytta av flera "
"processorkärnor när den kör Python-kod.  Isoleringen uppmuntrar också till "
"ett annat sätt att hantera samtidighet än att bara använda trådar. (Se :pep:"
"`554`.)"

msgid ""
"Using an isolated interpreter requires vigilance in preserving that "
"isolation.  That especially means not sharing any objects or mutable state "
"without guarantees about thread-safety.  Even objects that are otherwise "
"immutable (e.g. ``None``, ``(1, 5)``) can't normally be shared because of "
"the refcount.  One simple but less-efficient approach around this is to use "
"a global lock around all use of some state (or object). Alternately, "
"effectively immutable objects (like integers or strings) can be made safe in "
"spite of their refcounts by making them :term:`immortal`. In fact, this has "
"been done for the builtin singletons, small integers, and a number of other "
"builtin objects."
msgstr ""
"Att använda en isolerad tolk kräver vaksamhet när det gäller att bevara "
"isoleringen.  Det innebär särskilt att inte dela några objekt eller "
"föränderligt tillstånd utan garantier om trådsäkerhet.  Även objekt som "
"annars är oföränderliga (t.ex. ``None``, ``(1, 5)``) kan normalt inte delas "
"på grund av refcount.  En enkel men mindre effektiv metod för att komma runt "
"detta är att använda ett globalt lås för all användning av ett tillstånd "
"(eller objekt). Alternativt kan effektivt oföränderliga objekt (som heltal "
"eller strängar) göras säkra trots deras refcount genom att göra dem till :"
"term:`immortal`. Faktum är att detta har gjorts för de inbyggda "
"singletonerna, små heltal och ett antal andra inbyggda objekt."

msgid ""
"If you preserve isolation then you will have access to proper multi-core "
"computing without the complications that come with free-threading. Failure "
"to preserve isolation will expose you to the full consequences of free-"
"threading, including races and hard-to-debug crashes."
msgstr ""
"Om du bevarar isoleringen kommer du att få tillgång till riktiga flerkärniga "
"datorer utan de komplikationer som följer med free-threading. Om du inte "
"bevarar isoleringen kommer du att utsättas för alla konsekvenser av free-"
"threading, inklusive tävlingar och krascher som är svåra att felsöka."

msgid ""
"Aside from that, one of the main challenges of using multiple isolated "
"interpreters is how to communicate between them safely (not break isolation) "
"and efficiently.  The runtime and stdlib do not provide any standard "
"approach to this yet.  A future stdlib module would help mitigate the effort "
"of preserving isolation and expose effective tools for communicating (and "
"sharing) data between interpreters."
msgstr ""
"Bortsett från det är en av de största utmaningarna med att använda flera "
"isolerade tolkar hur man kommunicerar mellan dem på ett säkert (inte bryta "
"isoleringen) och effektivt sätt.  Runtime och stdlib tillhandahåller ännu "
"inte någon standardmetod för detta.  En framtida stdlib-modul skulle hjälpa "
"till att minska ansträngningen att bevara isoleringen och exponera effektiva "
"verktyg för att kommunicera (och dela) data mellan tolkar."

msgid "Bugs and caveats"
msgstr "Buggar och förbehåll"

msgid ""
"Because sub-interpreters (and the main interpreter) are part of the same "
"process, the insulation between them isn't perfect --- for example, using "
"low-level file operations like  :func:`os.close` they can (accidentally or "
"maliciously) affect each other's open files.  Because of the way extensions "
"are shared between (sub-)interpreters, some extensions may not work "
"properly; this is especially likely when using single-phase initialization "
"or (static) global variables. It is possible to insert objects created in "
"one sub-interpreter into a namespace of another (sub-)interpreter; this "
"should be avoided if possible."
msgstr ""
"Eftersom undertolkar (och huvudtolken) är en del av samma process är "
"isoleringen mellan dem inte perfekt --- till exempel kan de (av misstag "
"eller illvilligt) påverka varandras öppna filer genom att använda "
"filoperationer på låg nivå som :func:`os.close`.  På grund av det sätt som "
"tillägg delas mellan (under)tolkar kan det hända att vissa tillägg inte "
"fungerar korrekt; detta är särskilt troligt när man använder "
"enfasinitialisering eller (statiska) globala variabler. Det är möjligt att "
"infoga objekt som skapats i en subtolk i ett namnområde i en annan "
"(sub-)tolk; detta bör undvikas om möjligt."

msgid ""
"Special care should be taken to avoid sharing user-defined functions, "
"methods, instances or classes between sub-interpreters, since import "
"operations executed by such objects may affect the wrong (sub-)interpreter's "
"dictionary of loaded modules. It is equally important to avoid sharing "
"objects from which the above are reachable."
msgstr ""
"Särskild försiktighet bör iakttas för att undvika att dela "
"användardefinierade funktioner, metoder, instanser eller klasser mellan "
"undertolkare, eftersom importoperationer som utförs av sådana objekt kan "
"påverka fel (under)tolkares ordlista över inlästa moduler. Det är lika "
"viktigt att undvika att dela objekt från vilka ovanstående kan nås."

msgid ""
"Also note that combining this functionality with ``PyGILState_*`` APIs is "
"delicate, because these APIs assume a bijection between Python thread states "
"and OS-level threads, an assumption broken by the presence of sub-"
"interpreters. It is highly recommended that you don't switch sub-"
"interpreters between a pair of matching :c:func:`PyGILState_Ensure` and :c:"
"func:`PyGILState_Release` calls. Furthermore, extensions (such as :mod:"
"`ctypes`) using these APIs to allow calling of Python code from non-Python "
"created threads will probably be broken when using sub-interpreters."
msgstr ""
"Notera också att det är känsligt att kombinera denna funktionalitet med "
"``PyGILState_*`` API:er, eftersom dessa API:er antar en bijektion mellan "
"Python-trådtillstånd och trådar på OS-nivå, ett antagande som bryts av "
"närvaron av undertolkare. Det rekommenderas starkt att du inte byter "
"undertolkare mellan ett par matchande :c:func:`PyGILState_Ensure`- och :c:"
"func:`PyGILState_Release`-anrop. Dessutom kommer tillägg (som :mod:`ctypes`) "
"som använder dessa API:er för att tillåta anrop av Python-kod från trådar "
"som inte skapats av Python förmodligen att brytas när man använder "
"undertolkare."

msgid "Asynchronous Notifications"
msgstr "Asynkrona notifieringar"

msgid ""
"A mechanism is provided to make asynchronous notifications to the main "
"interpreter thread.  These notifications take the form of a function pointer "
"and a void pointer argument."
msgstr ""
"Det finns en mekanism för att göra asynkrona meddelanden till tolkens "
"huvudtråd.  Dessa meddelanden har formen av en funktionspekare och ett void-"
"pekarargument."

msgid ""
"Schedule a function to be called from the main interpreter thread.  On "
"success, ``0`` is returned and *func* is queued for being called in the main "
"thread.  On failure, ``-1`` is returned without setting any exception."
msgstr ""
"Schemalägg en funktion som ska anropas från tolkens huvudtråd.  Vid framgång "
"returneras ``0`` och *func* köas för att anropas i huvudtråden.  Vid "
"misslyckande returneras ``-1`` utan att något undantag anges."

msgid ""
"When successfully queued, *func* will be *eventually* called from the main "
"interpreter thread with the argument *arg*.  It will be called "
"asynchronously with respect to normally running Python code, but with both "
"these conditions met:"
msgstr ""
"När *func* har köats framgångsrikt kommer den *evventuellt* att anropas från "
"tolkens huvudtråd med argumentet *arg*.  Den kommer att anropas asynkront i "
"förhållande till normalt körande Python-kod, men med båda dessa villkor "
"uppfyllda:"

msgid "on a :term:`bytecode` boundary;"
msgstr "på en :term:`bytecode`-gräns;"

msgid ""
"with the main thread holding an :term:`attached thread state` (*func* can "
"therefore use the full C API)."
msgstr ""
"med huvudtråden som håller en :term:`attached thread state` (*func* kan "
"därför använda hela C API)."

msgid ""
"*func* must return ``0`` on success, or ``-1`` on failure with an exception "
"set.  *func* won't be interrupted to perform another asynchronous "
"notification recursively, but it can still be interrupted to switch threads "
"if the :term:`thread state <attached thread state>` is detached."
msgstr ""
"*func* måste returnera ``0`` vid framgång, eller ``-1`` vid misslyckande med "
"en undantagsuppsättning.  *func* kommer inte att avbrytas för att utföra ett "
"annat asynkront meddelande rekursivt, men det kan fortfarande avbrytas för "
"att byta tråd om :term:`thread state <attached thread state>`` är fristående."

msgid ""
"This function doesn't need an :term:`attached thread state`. However, to "
"call this function in a subinterpreter, the caller must have an :term:"
"`attached thread state`. Otherwise, the function *func* can be scheduled to "
"be called from the wrong interpreter."
msgstr ""
"Denna funktion behöver inte en :term:`attached thread state`. Men för att "
"anropa denna funktion i en subinterpreter måste anroparen ha en :term:"
"`attached thread state`. Annars kan funktionen *func* schemaläggas så att "
"den anropas från fel tolk."

msgid ""
"This is a low-level function, only useful for very special cases. There is "
"no guarantee that *func* will be called as quick as possible.  If the main "
"thread is busy executing a system call, *func* won't be called before the "
"system call returns.  This function is generally **not** suitable for "
"calling Python code from arbitrary C threads.  Instead, use the :ref:"
"`PyGILState API<gilstate>`."
msgstr ""
"Detta är en lågnivåfunktion som endast är användbar i mycket speciella fall. "
"Det finns ingen garanti för att *func* kommer att anropas så snabbt som "
"möjligt.  Om huvudtråden är upptagen med att utföra ett systemanrop kommer "
"*func* inte att anropas innan systemanropet returneras.  Den här funktionen "
"är i allmänhet **inte** lämplig för anrop av Python-kod från godtyckliga C-"
"trådar.  Använd istället :ref:`PyGILState API<gilstate>`."

msgid ""
"If this function is called in a subinterpreter, the function *func* is now "
"scheduled to be called from the subinterpreter, rather than being called "
"from the main interpreter. Each subinterpreter now has its own list of "
"scheduled calls."
msgstr ""
"Om denna funktion anropas i en subinterpreter är funktionen *func* nu "
"schemalagd att anropas från subinterpretern, istället för att anropas från "
"huvudinterpretern. Varje undertolk har nu sin egen lista över schemalagda "
"anrop."

msgid "Profiling and Tracing"
msgstr "Profilering och spårning"

msgid ""
"The Python interpreter provides some low-level support for attaching "
"profiling and execution tracing facilities.  These are used for profiling, "
"debugging, and coverage analysis tools."
msgstr ""
"Python-tolken ger stöd på låg nivå för att koppla till profilerings- och "
"exekveringsspårningsfunktioner.  Dessa används för verktyg för profilering, "
"felsökning och täckningsanalys."

msgid ""
"This C interface allows the profiling or tracing code to avoid the overhead "
"of calling through Python-level callable objects, making a direct C function "
"call instead.  The essential attributes of the facility have not changed; "
"the interface allows trace functions to be installed per-thread, and the "
"basic events reported to the trace function are the same as had been "
"reported to the Python-level trace functions in previous versions."
msgstr ""
"Detta C-gränssnitt gör det möjligt för profilerings- eller spårningskoden "
"att undvika omkostnaderna för anrop via anropsbara objekt på Python-nivå och "
"istället göra ett direkt anrop av C-funktioner.  De viktigaste egenskaperna "
"hos funktionen har inte ändrats; gränssnittet gör att spårningsfunktioner "
"kan installeras per tråd och de grundläggande händelser som rapporteras till "
"spårningsfunktionen är desamma som rapporterades till spårningsfunktionerna "
"på Python-nivå i tidigare versioner."

msgid ""
"The type of the trace function registered using :c:func:`PyEval_SetProfile` "
"and :c:func:`PyEval_SetTrace`. The first parameter is the object passed to "
"the registration function as *obj*, *frame* is the frame object to which the "
"event pertains, *what* is one of the constants :c:data:`PyTrace_CALL`, :c:"
"data:`PyTrace_EXCEPTION`, :c:data:`PyTrace_LINE`, :c:data:`PyTrace_RETURN`, :"
"c:data:`PyTrace_C_CALL`, :c:data:`PyTrace_C_EXCEPTION`, :c:data:"
"`PyTrace_C_RETURN`, or :c:data:`PyTrace_OPCODE`, and *arg* depends on the "
"value of *what*:"
msgstr ""
"Typ av spårningsfunktion som registrerats med :c:func:`PyEval_SetProfile` "
"och :c:func:`PyEval_SetTrace`. Den första parametern är det objekt som "
"skickas till registreringsfunktionen som *obj*, *frame* är det frame-objekt "
"som händelsen gäller, *what* är en av konstanterna :c:data:`PyTrace_CALL`, :"
"c:data:`PyTrace_EXCEPTION`, :c:data:`PyTrace_LINE`, :c:data:"
"`PyTrace_RETURN`, :c:data:`PyTrace_C_CALL`, :c:data:`PyTrace_C_EXCEPTION`, :"
"c:data:`PyTrace_C_RETURN`, eller :c:data:`PyTrace_OPCODE`, och *arg* beror "
"på värdet av *what*:"

msgid "Value of *what*"
msgstr "Värde av *vad*"

msgid "Meaning of *arg*"
msgstr "Betydelse av *arg*"

msgid ":c:data:`PyTrace_CALL`"
msgstr ":c:data:`PyTrace_CALL`"

msgid "Always :c:data:`Py_None`."
msgstr "Alltid :c:data:`Py_None`."

msgid ":c:data:`PyTrace_EXCEPTION`"
msgstr ":c:data:`PyTrace_EXCEPTION`"

msgid "Exception information as returned by :func:`sys.exc_info`."
msgstr "Information om undantag som returneras av :func:`sys.exc_info`."

msgid ":c:data:`PyTrace_LINE`"
msgstr ":c:data:`PyTrace_LINE`"

msgid ":c:data:`PyTrace_RETURN`"
msgstr ":c:data:`PyTrace_RETURN`"

msgid ""
"Value being returned to the caller, or ``NULL`` if caused by an exception."
msgstr ""
"Värde som returneras till den som anropar, eller ``NULL`` om det orsakas av "
"ett undantag."

msgid ":c:data:`PyTrace_C_CALL`"
msgstr ":c:data:`PyTrace_C_CALL`"

msgid "Function object being called."
msgstr "Funktionsobjekt som anropas."

msgid ":c:data:`PyTrace_C_EXCEPTION`"
msgstr ":c:data:`PyTrace_C_EXCEPTION`"

msgid ":c:data:`PyTrace_C_RETURN`"
msgstr ":c:data:`PyTrace_C_RETURN`"

msgid ":c:data:`PyTrace_OPCODE`"
msgstr ":c:data:`PyTrace_OPCODE`"

msgid ""
"The value of the *what* parameter to a :c:type:`Py_tracefunc` function when "
"a new call to a function or method is being reported, or a new entry into a "
"generator. Note that the creation of the iterator for a generator function "
"is not reported as there is no control transfer to the Python bytecode in "
"the corresponding frame."
msgstr ""
"Värdet på *what*-parametern till en :c:type:`Py_tracefunc`-funktion när ett "
"nytt anrop till en funktion eller metod rapporteras, eller en ny inmatning i "
"en generator. Observera att skapandet av iteratorn för en generatorfunktion "
"inte rapporteras eftersom det inte sker någon kontrollöverföring till Python-"
"bytekoden i motsvarande ram."

msgid ""
"The value of the *what* parameter to a :c:type:`Py_tracefunc` function when "
"an exception has been raised.  The callback function is called with this "
"value for *what* when after any bytecode is processed after which the "
"exception becomes set within the frame being executed.  The effect of this "
"is that as exception propagation causes the Python stack to unwind, the "
"callback is called upon return to each frame as the exception propagates.  "
"Only trace functions receives these events; they are not needed by the "
"profiler."
msgstr ""
"Värdet på *what* parametern till en :c:type:`Py_tracefunc` funktion när ett "
"undantag har uppstått.  Återkallningsfunktionen anropas med detta värde för "
"*what* när efter att någon bytecode har bearbetats varefter undantaget blir "
"inställt inom den ram som exekveras.  Effekten av detta är att eftersom "
"undantagsutbredningen gör att Python-stacken rullas upp, anropas callbacken "
"vid återkomst till varje ram när undantaget sprids.  Endast "
"spårningsfunktioner tar emot dessa händelser; de behövs inte av profileraren."

msgid ""
"The value passed as the *what* parameter to a :c:type:`Py_tracefunc` "
"function (but not a profiling function) when a line-number event is being "
"reported. It may be disabled for a frame by setting :attr:`~frame."
"f_trace_lines` to *0* on that frame."
msgstr ""
"Det värde som skickas som *what*-parameter till en :c:type:`Py_tracefunc`-"
"funktion (men inte en profileringsfunktion) när en radnummerhändelse "
"rapporteras. Den kan inaktiveras för en bildruta genom att sätta :attr:"
"`~frame.f_trace_lines` till *0* för den bildrutan."

msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a call is about to return."
msgstr ""
"Värdet för *what*-parametern till :c:type:`Py_tracefunc`-funktioner när ett "
"anrop är på väg att returneras."

msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function is about to be called."
msgstr ""
"Värdet för *what*-parametern till :c:type:`Py_tracefunc`-funktioner när en C-"
"funktion ska anropas."

msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function has raised an exception."
msgstr ""
"Värdet för *what*-parametern till :c:type:`Py_tracefunc`-funktioner när en C-"
"funktion har orsakat ett undantag."

msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions when "
"a C function has returned."
msgstr ""
"Värdet för *what*-parametern till :c:type:`Py_tracefunc`-funktioner när en C-"
"funktion har returnerats."

msgid ""
"The value for the *what* parameter to :c:type:`Py_tracefunc` functions (but "
"not profiling functions) when a new opcode is about to be executed.  This "
"event is not emitted by default: it must be explicitly requested by setting :"
"attr:`~frame.f_trace_opcodes` to *1* on the frame."
msgstr ""
"Värdet för *what*-parametern till :c:type:`Py_tracefunc`-funktioner (men "
"inte profileringsfunktioner) när en ny opcode ska exekveras.  Denna händelse "
"sänds inte ut som standard: den måste uttryckligen begäras genom att ställa "
"in :attr:`~frame.f_trace_opcodes` till *1* på ramen."

msgid ""
"Set the profiler function to *func*.  The *obj* parameter is passed to the "
"function as its first parameter, and may be any Python object, or ``NULL``.  "
"If the profile function needs to maintain state, using a different value for "
"*obj* for each thread provides a convenient and thread-safe place to store "
"it.  The profile function is called for all monitored events except :c:data:"
"`PyTrace_LINE` :c:data:`PyTrace_OPCODE` and :c:data:`PyTrace_EXCEPTION`."
msgstr ""
"Ställ in profileringsfunktionen till *func*.  Parametern *obj* skickas till "
"funktionen som dess första parameter och kan vara vilket Python-objekt som "
"helst eller ``NULL``.  Om profilfunktionen behöver upprätthålla tillstånd är "
"det praktiskt och trådsäkert att använda ett annat värde för *obj* för varje "
"tråd för att lagra det.  Profilfunktionen anropas för alla övervakade "
"händelser utom :c:data:`PyTrace_LINE` :c:data:`PyTrace_OPCODE` och :c:data:"
"`PyTrace_EXCEPTION`."

msgid "See also the :func:`sys.setprofile` function."
msgstr "Se även funktionen :func:`sys.setprofile`."

msgid ""
"Like :c:func:`PyEval_SetProfile` but sets the profile function in all "
"running threads belonging to the current interpreter instead of the setting "
"it only on the current thread."
msgstr ""
"Som :c:func:`PyEval_SetProfile` men ställer in profilfunktionen i alla "
"pågående trådar som tillhör den aktuella tolken istället för att bara ställa "
"in den i den aktuella tråden."

msgid ""
"As :c:func:`PyEval_SetProfile`, this function ignores any exceptions raised "
"while setting the profile functions in all threads."
msgstr ""
"Precis som :c:func:`PyEval_SetProfile` ignorerar denna funktion alla "
"undantag som uppstår när profilfunktionerna ställs in i alla trådar."

msgid ""
"Set the tracing function to *func*.  This is similar to :c:func:"
"`PyEval_SetProfile`, except the tracing function does receive line-number "
"events and per-opcode events, but does not receive any event related to C "
"function objects being called.  Any trace function registered using :c:func:"
"`PyEval_SetTrace` will not receive :c:data:`PyTrace_C_CALL`, :c:data:"
"`PyTrace_C_EXCEPTION` or :c:data:`PyTrace_C_RETURN` as a value for the "
"*what* parameter."
msgstr ""
"Ställ in spårningsfunktionen till *func*.  Detta liknar :c:func:"
"`PyEval_SetProfile`, förutom att spårningsfunktionen tar emot händelser som "
"rör radnummer och per-opcode, men inte händelser som rör anrop av C-"
"funktionsobjekt.  En spårningsfunktion som registreras med :c:func:"
"`PyEval_SetTrace` kommer inte att ta emot :c:data:`PyTrace_C_CALL`, :c:data:"
"`PyTrace_C_EXCEPTION` eller :c:data:`PyTrace_C_RETURN` som värde för "
"parametern *what*."

msgid "See also the :func:`sys.settrace` function."
msgstr "Se även funktionen :func:`sys.settrace`."

msgid ""
"Like :c:func:`PyEval_SetTrace` but sets the tracing function in all running "
"threads belonging to the current interpreter instead of the setting it only "
"on the current thread."
msgstr ""
"Som :c:func:`PyEval_SetTrace` men ställer in spårningsfunktionen i alla "
"pågående trådar som tillhör den aktuella tolken istället för att bara ställa "
"in den i den aktuella tråden."

msgid ""
"As :c:func:`PyEval_SetTrace`, this function ignores any exceptions raised "
"while setting the trace functions in all threads."
msgstr ""
"Precis som :c:func:`PyEval_SetTrace` ignorerar denna funktion alla undantag "
"som uppstår när spårningsfunktionerna ställs in i alla trådar."

msgid "Reference tracing"
msgstr "Referensspårning"

msgid ""
"The type of the trace function registered using :c:func:"
"`PyRefTracer_SetTracer`. The first parameter is a Python object that has "
"been just created (when **event** is set to :c:data:`PyRefTracer_CREATE`) or "
"about to be destroyed (when **event** is set to :c:data:"
"`PyRefTracer_DESTROY`). The **data** argument is the opaque pointer that was "
"provided when :c:func:`PyRefTracer_SetTracer` was called."
msgstr ""
"Typen av spårningsfunktion som registrerats med :c:func:"
"`PyRefTracer_SetTracer`. Den första parametern är ett Python-objekt som just "
"har skapats (när **event** är satt till :c:data:`PyRefTracer_CREATE`) eller "
"håller på att förstöras (när **event** är satt till :c:data:"
"`PyRefTracer_DESTROY`). Argumentet **data** är den opaka pekare som "
"tillhandahölls när :c:func:`PyRefTracer_SetTracer` anropades."

msgid ""
"The value for the *event* parameter to :c:type:`PyRefTracer` functions when "
"a Python object has been created."
msgstr ""
"Värdet för parametern *event* till :c:type:`PyRefTracer`-funktioner när ett "
"Python-objekt har skapats."

msgid ""
"The value for the *event* parameter to :c:type:`PyRefTracer` functions when "
"a Python object has been destroyed."
msgstr ""
"Värdet för parametern *event* till :c:type:`PyRefTracer`-funktioner när ett "
"Python-objekt har förstörts."

msgid ""
"Register a reference tracer function. The function will be called when a new "
"Python has been created or when an object is going to be destroyed. If "
"**data** is provided it must be an opaque pointer that will be provided when "
"the tracer function is called. Return ``0`` on success. Set an exception and "
"return ``-1`` on error."
msgstr ""
"Registrera en funktion för referensspårning. Funktionen kommer att anropas "
"när en ny Python har skapats eller när ett objekt ska förstöras. Om **data** "
"anges måste det vara en ogenomskinlig pekare som kommer att anges när "
"spårningsfunktionen anropas. Returnera ``0`` vid framgång. Ställ in ett "
"undantag och returnera ``-1`` vid fel."

msgid ""
"Not that tracer functions **must not** create Python objects inside or "
"otherwise the call will be re-entrant. The tracer also **must not** clear "
"any existing exception or set an exception.  A :term:`thread state` will be "
"active every time the tracer function is called."
msgstr ""
"Observera att spårningsfunktioner **inte** får skapa Python-objekt inuti, "
"annars kommer anropet att vara re-entrant. Spåraren får inte heller "
"**klara** något befintligt undantag eller skapa ett undantag.  En :term:"
"`thread state` kommer att vara aktiv varje gång tracerfunktionen anropas."

msgid ""
"There must be an :term:`attached thread state` when calling this function."
msgstr ""
"Det måste finnas en :term:`attached thread state` när denna funktion anropas."

msgid ""
"Get the registered reference tracer function and the value of the opaque "
"data pointer that was registered when :c:func:`PyRefTracer_SetTracer` was "
"called. If no tracer was registered this function will return NULL and will "
"set the **data** pointer to NULL."
msgstr ""
"Hämtar den registrerade referensspårningsfunktionen och värdet på den opaka "
"datapekaren som registrerades när :c:func:`PyRefTracer_SetTracer` anropades. "
"Om ingen spårningsfunktion registrerades returnerar denna funktion NULL och "
"sätter pekaren **data** till NULL."

msgid "Advanced Debugger Support"
msgstr "Avancerat stöd för felsökare"

msgid ""
"These functions are only intended to be used by advanced debugging tools."
msgstr ""
"Dessa funktioner är endast avsedda att användas av avancerade "
"felsökningsverktyg."

msgid ""
"Return the interpreter state object at the head of the list of all such "
"objects."
msgstr ""
"Returnerar tolkens statusobjekt längst upp i listan över alla sådana objekt."

msgid "Return the main interpreter state object."
msgstr "Returnerar huvudtolkens statusobjekt."

msgid ""
"Return the next interpreter state object after *interp* from the list of all "
"such objects."
msgstr ""
"Returnerar nästa tolktillståndsobjekt efter *interp* från listan över alla "
"sådana objekt."

msgid ""
"Return the pointer to the first :c:type:`PyThreadState` object in the list "
"of threads associated with the interpreter *interp*."
msgstr ""
"Returnerar pekaren till det första :c:type:`PyThreadState`-objektet i listan "
"över trådar som är associerade med tolken *interp*."

msgid ""
"Return the next thread state object after *tstate* from the list of all such "
"objects belonging to the same :c:type:`PyInterpreterState` object."
msgstr ""
"Returnerar nästa trådtillståndsobjekt efter *tstate* från listan över alla "
"sådana objekt som tillhör samma :c:type:`PyInterpreterState`-objekt."

msgid "Thread Local Storage Support"
msgstr "Tråd Stöd för lokal lagring"

msgid ""
"The Python interpreter provides low-level support for thread-local storage "
"(TLS) which wraps the underlying native TLS implementation to support the "
"Python-level thread local storage API (:class:`threading.local`).  The "
"CPython C level APIs are similar to those offered by pthreads and Windows: "
"use a thread key and functions to associate a :c:expr:`void*` value per "
"thread."
msgstr ""
"Python-tolken ger stöd på låg nivå för trådlokal lagring (TLS) som omsluter "
"den underliggande inbyggda TLS-implementeringen för att stödja API:et för "
"trådlokal lagring på Python-nivå (:class:`threading.local`).  CPythons API:"
"er på C-nivå liknar de som erbjuds av pthreads och Windows: använd en "
"trådnyckel och funktioner för att associera ett :c:expr:`void*`-värde per "
"tråd."

msgid ""
"A :term:`thread state` does *not* need to be :term:`attached <attached "
"thread state>` when calling these functions; they suppl their own locking."
msgstr ""
"En :term:`thread state` behöver *inte* vara :term:`attached <attached thread "
"state>` när dessa funktioner anropas; de kompletterar sin egen låsning."

msgid ""
"Note that :file:`Python.h` does not include the declaration of the TLS APIs, "
"you need to include :file:`pythread.h` to use thread-local storage."
msgstr ""
"Observera att :file:`Python.h` inte innehåller deklarationen av TLS API:"
"erna, du måste inkludera :file:`pythread.h` för att använda trådlokal "
"lagring."

msgid ""
"None of these API functions handle memory management on behalf of the :c:"
"expr:`void*` values.  You need to allocate and deallocate them yourself. If "
"the :c:expr:`void*` values happen to be :c:expr:`PyObject*`, these functions "
"don't do refcount operations on them either."
msgstr ""
"Ingen av dessa API-funktioner hanterar minneshantering för :c:expr:`void*`-"
"värdenas räkning.  Du måste allokera och avallokera dem själv. Om :c:expr:"
"`void*`-värdena råkar vara :c:expr:`PyObject*`, utför dessa funktioner inte "
"heller refcount-operationer på dem."

msgid "Thread Specific Storage (TSS) API"
msgstr "API för trådspecifik lagring (TSS)"

msgid ""
"TSS API is introduced to supersede the use of the existing TLS API within "
"the CPython interpreter.  This API uses a new type :c:type:`Py_tss_t` "
"instead of :c:expr:`int` to represent thread keys."
msgstr ""
"TSS API introduceras för att ersätta användningen av det befintliga TLS API "
"inom CPython-tolken.  Detta API använder en ny typ :c:type:`Py_tss_t` "
"istället för :c:expr:`int` för att representera trådnycklar."

msgid "\"A New C-API for Thread-Local Storage in CPython\" (:pep:`539`)"
msgstr "\"Ett nytt C-API för trådlokal lagring i CPython\" (:pep:`539`)"

msgid ""
"This data structure represents the state of a thread key, the definition of "
"which may depend on the underlying TLS implementation, and it has an "
"internal field representing the key's initialization state.  There are no "
"public members in this structure."
msgstr ""
"Denna datastruktur representerar tillståndet för en trådnyckel, vars "
"definition kan bero på den underliggande TLS-implementeringen, och den har "
"ett internt fält som representerar nyckelns initialiseringstillstånd.  Det "
"finns inga offentliga medlemmar i denna struktur."

msgid ""
"When :ref:`Py_LIMITED_API <stable>` is not defined, static allocation of "
"this type by :c:macro:`Py_tss_NEEDS_INIT` is allowed."
msgstr ""
"När :ref:`Py_LIMITED_API <stable>` inte är definierad, tillåts statisk "
"allokering av denna typ genom :c:macro:`Py_tss_NEEDS_INIT`."

msgid ""
"This macro expands to the initializer for :c:type:`Py_tss_t` variables. Note "
"that this macro won't be defined with :ref:`Py_LIMITED_API <stable>`."
msgstr ""
"Detta makro expanderar till initialiseraren för :c:type:`Py_tss_t`-"
"variabler. Observera att detta makro inte kommer att definieras med :ref:"
"`Py_LIMITED_API <stable>`."

msgid "Dynamic Allocation"
msgstr "Dynamisk allokering"

msgid ""
"Dynamic allocation of the :c:type:`Py_tss_t`, required in extension modules "
"built with :ref:`Py_LIMITED_API <stable>`, where static allocation of this "
"type is not possible due to its implementation being opaque at build time."
msgstr ""
"Dynamisk allokering av :c:type:`Py_tss_t`, krävs i tilläggsmoduler byggda "
"med :ref:`Py_LIMITED_API <stable>`, där statisk allokering av denna typ inte "
"är möjlig på grund av att dess implementation är ogenomskinlig vid byggtiden."

msgid ""
"Return a value which is the same state as a value initialized with :c:macro:"
"`Py_tss_NEEDS_INIT`, or ``NULL`` in the case of dynamic allocation failure."
msgstr ""
"Returnerar ett värde som är i samma tillstånd som ett värde som initierats "
"med :c:macro:`Py_tss_NEEDS_INIT`, eller ``NULL`` om dynamisk allokering "
"misslyckats."

msgid ""
"Free the given *key* allocated by :c:func:`PyThread_tss_alloc`, after first "
"calling :c:func:`PyThread_tss_delete` to ensure any associated thread locals "
"have been unassigned. This is a no-op if the *key* argument is ``NULL``."
msgstr ""
"Frigör den givna *key* som allokerats av :c:func:`PyThread_tss_alloc`, efter "
"att först ha anropat :c:func:`PyThread_tss_delete` för att säkerställa att "
"alla associerade trådlokaler har avallokerats. Detta är ett no-op om "
"argumentet *key* är ``NULL``."

msgid ""
"A freed key becomes a dangling pointer. You should reset the key to ``NULL``."
msgstr ""
"En frigjord nyckel blir en hängande pekare. Du bör återställa nyckeln till "
"``NULL``."

msgid "Methods"
msgstr "Metoder"

msgid ""
"The parameter *key* of these functions must not be ``NULL``.  Moreover, the "
"behaviors of :c:func:`PyThread_tss_set` and :c:func:`PyThread_tss_get` are "
"undefined if the given :c:type:`Py_tss_t` has not been initialized by :c:"
"func:`PyThread_tss_create`."
msgstr ""
"Parametern *key* i dessa funktioner får inte vara ``NULL``.  Dessutom är "
"beteendena hos :c:func:`PyThread_tss_set` och :c:func:`PyThread_tss_get` "
"odefinierade om den givna :c:type:`Py_tss_t` inte har initialiserats av :c:"
"func:`PyThread_tss_create`."

msgid ""
"Return a non-zero value if the given :c:type:`Py_tss_t` has been initialized "
"by :c:func:`PyThread_tss_create`."
msgstr ""
"Returnerar ett värde som inte är noll om den angivna :c:type:`Py_tss_t` har "
"initialiserats av :c:func:`PyThread_tss_create`."

msgid ""
"Return a zero value on successful initialization of a TSS key.  The behavior "
"is undefined if the value pointed to by the *key* argument is not "
"initialized by :c:macro:`Py_tss_NEEDS_INIT`.  This function can be called "
"repeatedly on the same key -- calling it on an already initialized key is a "
"no-op and immediately returns success."
msgstr ""
"Returnerar ett nollvärde vid lyckad initialisering av en TSS-nyckel.  "
"Beteendet är odefinierat om det värde som pekas ut av argumentet *key* inte "
"initieras av :c:macro:`Py_tss_NEEDS_INIT`.  Denna funktion kan anropas "
"upprepade gånger på samma nyckel - att anropa den på en redan initialiserad "
"nyckel är en no-op och returnerar omedelbart framgång."

msgid ""
"Destroy a TSS key to forget the values associated with the key across all "
"threads, and change the key's initialization state to uninitialized.  A "
"destroyed key is able to be initialized again by :c:func:"
"`PyThread_tss_create`. This function can be called repeatedly on the same "
"key -- calling it on an already destroyed key is a no-op."
msgstr ""
"Förstör en TSS-nyckel för att glömma de värden som är associerade med "
"nyckeln i alla trådar och ändra nyckelns initialiseringstillstånd till "
"uninitialized.  En förstörd nyckel kan initialiseras igen med :c:func:"
"`PyThread_tss_create`. Den här funktionen kan anropas upprepade gånger på "
"samma nyckel - att anropa den på en redan förstörd nyckel är inte möjligt."

msgid ""
"Return a zero value to indicate successfully associating a :c:expr:`void*` "
"value with a TSS key in the current thread.  Each thread has a distinct "
"mapping of the key to a :c:expr:`void*` value."
msgstr ""
"Returnerar ett nollvärde för att indikera att ett :c:expr:`void*`-värde har "
"associerats med en TSS-nyckel i den aktuella tråden.  Varje tråd har en "
"distinkt mappning av nyckeln till ett :c:expr:`void*`-värde."

msgid ""
"Return the :c:expr:`void*` value associated with a TSS key in the current "
"thread.  This returns ``NULL`` if no value is associated with the key in the "
"current thread."
msgstr ""
"Returnerar det :c:expr:`void*`-värde som associeras med en TSS-nyckel i den "
"aktuella tråden.  Returnerar ``NULL`` om inget värde är associerat med "
"nyckeln i den aktuella tråden."

msgid "Thread Local Storage (TLS) API"
msgstr "API för lokal lagring av trådar (TLS)"

msgid ""
"This API is superseded by :ref:`Thread Specific Storage (TSS) API <thread-"
"specific-storage-api>`."
msgstr ""
"Detta API ersätts av :ref:`Thread Specific Storage (TSS) API <thread-"
"specific-storage-api>`."

msgid ""
"This version of the API does not support platforms where the native TLS key "
"is defined in a way that cannot be safely cast to ``int``.  On such "
"platforms, :c:func:`PyThread_create_key` will return immediately with a "
"failure status, and the other TLS functions will all be no-ops on such "
"platforms."
msgstr ""
"Den här versionen av API:et stöder inte plattformar där den ursprungliga TLS-"
"nyckeln definieras på ett sätt som inte säkert kan kastas till ``int``.  På "
"sådana plattformar kommer :c:func:`PyThread_create_key` att returnera "
"omedelbart med en felstatus, och de andra TLS-funktionerna kommer alla att "
"vara no-ops på sådana plattformar."

msgid ""
"Due to the compatibility problem noted above, this version of the API should "
"not be used in new code."
msgstr ""
"På grund av det kompatibilitetsproblem som nämns ovan bör denna version av "
"API:et inte användas i ny kod."

msgid "Synchronization Primitives"
msgstr "Synkroniseringsprimitiver"

msgid "The C-API provides a basic mutual exclusion lock."
msgstr "C-API tillhandahåller ett grundläggande lås med ömsesidig uteslutning."

msgid ""
"A mutual exclusion lock.  The :c:type:`!PyMutex` should be initialized to "
"zero to represent the unlocked state.  For example::"
msgstr ""
"Ett ömsesidigt uteslutningslås.  :c:type:`!PyMutex` bör initialiseras till "
"noll för att representera det olåsta tillståndet.  Till exempel::"

msgid "PyMutex mutex = {0};"
msgstr "PyMutex mutex = {0};"

msgid ""
"Instances of :c:type:`!PyMutex` should not be copied or moved.  Both the "
"contents and address of a :c:type:`!PyMutex` are meaningful, and it must "
"remain at a fixed, writable location in memory."
msgstr ""
"Instanser av :c:type:`!PyMutex` bör inte kopieras eller flyttas.  Både "
"innehållet och adressen i en :c:type:`!PyMutex` är meningsfulla och den "
"måste ligga kvar på en fast, skrivbar plats i minnet."

msgid ""
"A :c:type:`!PyMutex` currently occupies one byte, but the size should be "
"considered unstable.  The size may change in future Python releases without "
"a deprecation period."
msgstr ""
"En :c:type:`!PyMutex` upptar för närvarande en byte, men storleken bör "
"betraktas som instabil.  Storleken kan komma att ändras i framtida Python-"
"utgåvor utan en utfasningsperiod."

msgid ""
"Lock mutex *m*.  If another thread has already locked it, the calling thread "
"will block until the mutex is unlocked.  While blocked, the thread will "
"temporarily detach the :term:`thread state <attached thread state>` if one "
"exists."
msgstr ""
"Låser mutex *m*.  Om en annan tråd redan har låst den, kommer den anropande "
"tråden att blockera tills mutexen låses upp.  Under blockeringen kommer "
"tråden tillfälligt att ta bort :term:`thread state <attached thread state>` "
"om en sådan finns."

msgid ""
"Unlock mutex *m*. The mutex must be locked --- otherwise, the function will "
"issue a fatal error."
msgstr ""
"Lås upp mutex *m*. Mutex måste vara låst --- annars kommer funktionen att "
"utfärda ett fatalt fel."

msgid "Returns non-zero if the mutex *m* is currently locked, zero otherwise."
msgstr "Returnerar icke-noll om mutex *m* för närvarande är låst, noll annars."

msgid ""
"This function is intended for use in assertions and debugging only and "
"should not be used to make concurrency control decisions, as the lock state "
"may change immediately after the check."
msgstr ""
"Den här funktionen är endast avsedd att användas i samband med påståenden "
"och felsökning och bör inte användas för att fatta beslut om "
"samtidighetskontroll, eftersom låsets tillstånd kan ändras omedelbart efter "
"kontrollen."

msgid "Python Critical Section API"
msgstr "Python API för kritiska avsnitt"

msgid ""
"The critical section API provides a deadlock avoidance layer on top of per-"
"object locks for :term:`free-threaded <free threading>` CPython.  They are "
"intended to replace reliance on the :term:`global interpreter lock`, and are "
"no-ops in versions of Python with the global interpreter lock."
msgstr ""
"API:et för kritiska sektioner tillhandahåller ett lager för att undvika "
"deadlock ovanpå lås per objekt för :term:``free-threaded <free threading>` "
"CPython.  De är avsedda att ersätta beroendet av :term:`global interpreter "
"lock`, och är no-ops i versioner av Python med global interpreter lock."

msgid ""
"Critical sections avoid deadlocks by implicitly suspending active critical "
"sections and releasing the locks during calls to :c:func:"
"`PyEval_SaveThread`. When :c:func:`PyEval_RestoreThread` is called, the most "
"recent critical section is resumed, and its locks reacquired.  This means "
"the critical section API provides weaker guarantees than traditional locks "
"-- they are useful because their behavior is similar to the :term:`GIL`."
msgstr ""
"Kritiska sektioner undviker dödlägen genom att implicit avbryta aktiva "
"kritiska sektioner och släppa låsen under anrop till :c:func:"
"`PyEval_SaveThread`. När :c:func:`PyEval_RestoreThread` anropas återupptas "
"den senaste kritiska sektionen och dess lås återfås.  Detta innebär att API:"
"et för kritiska avsnitt ger svagare garantier än traditionella lås -- de är "
"användbara eftersom deras beteende liknar :term:`GIL`."

msgid ""
"Variants that accept :c:type:`PyMutex` pointers rather than Python objects "
"are also available. Use these variants to start a critical section in a "
"situation where there is no :c:type:`PyObject` -- for example, when working "
"with a C type that does not extend or wrap :c:type:`PyObject` but still "
"needs to call into the C API in a manner that might lead to deadlocks."
msgstr ""
"Varianter som accepterar :c:type:`PyMutex`-pekare i stället för Python-"
"objekt finns också tillgängliga. Använd dessa varianter för att starta ett "
"kritiskt avsnitt i en situation där det inte finns någon :c:type:`PyObject` "
"-- till exempel när du arbetar med en C-typ som inte utökar eller omsluter :"
"c:type:`PyObject` men som ändå behöver anropa C API:et på ett sätt som kan "
"leda till dödlägen."

msgid ""
"The functions and structs used by the macros are exposed for cases where C "
"macros are not available. They should only be used as in the given macro "
"expansions. Note that the sizes and contents of the structures may change in "
"future Python versions."
msgstr ""
"De funktioner och strukturer som används av makron är exponerade för fall "
"där C-makron inte är tillgängliga. De bör endast användas som i de givna "
"makroexpansionerna. Observera att strukturernas storlek och innehåll kan "
"komma att ändras i framtida Python-versioner."

msgid ""
"Operations that need to lock two objects at once must use :c:macro:"
"`Py_BEGIN_CRITICAL_SECTION2`.  You *cannot* use nested critical sections to "
"lock more than one object at once, because the inner critical section may "
"suspend the outer critical sections.  This API does not provide a way to "
"lock more than two objects at once."
msgstr ""
"Operationer som behöver låsa två objekt samtidigt måste använda :c:macro:"
"`Py_BEGIN_CRITICAL_SECTION2`.  Du *kan* inte använda nästlade kritiska "
"avsnitt för att låsa mer än ett objekt samtidigt, eftersom det inre kritiska "
"avsnittet kan avbryta de yttre kritiska avsnitten.  Detta API "
"tillhandahåller inte något sätt att låsa mer än två objekt samtidigt."

msgid "Example usage::"
msgstr "Exempel på användning::"

msgid ""
"static PyObject *\n"
"set_field(MyObject *self, PyObject *value)\n"
"{\n"
"   Py_BEGIN_CRITICAL_SECTION(self);\n"
"   Py_SETREF(self->field, Py_XNewRef(value));\n"
"   Py_END_CRITICAL_SECTION();\n"
"   Py_RETURN_NONE;\n"
"}"
msgstr ""
"statiskt PyObject *\n"
"set_field(MyObject *self, PyObject *värde)\n"
"{\n"
"   Py_BEGIN_CRITICAL_SECTION(self);\n"
"   Py_SETREF(self->field, Py_XNewRef(value));\n"
"   Py_END_CRITICAL_SECTION();\n"
"   Py_RETURN_NONE;\n"
"}"

msgid ""
"In the above example, :c:macro:`Py_SETREF` calls :c:macro:`Py_DECREF`, which "
"can call arbitrary code through an object's deallocation function.  The "
"critical section API avoids potential deadlocks due to reentrancy and lock "
"ordering by allowing the runtime to temporarily suspend the critical section "
"if the code triggered by the finalizer blocks and calls :c:func:"
"`PyEval_SaveThread`."
msgstr ""
"I exemplet ovan anropar :c:macro:`Py_SETREF` :c:macro:`Py_DECREF`, som kan "
"anropa godtycklig kod via ett objekts deallokeringsfunktion.  API:et för "
"kritiska sektioner undviker potentiella dödlägen på grund av reentrancy och "
"låsordning genom att tillåta runtime att tillfälligt avbryta den kritiska "
"sektionen om koden som utlöses av finalizer blockerar och anropar :c:func:"
"`PyEval_SaveThread`."

msgid ""
"Acquires the per-object lock for the object *op* and begins a critical "
"section."
msgstr ""
"Förvärvar låset per objekt för objektet *op* och påbörjar ett kritiskt "
"avsnitt."

msgid "In the free-threaded build, this macro expands to::"
msgstr "I den fritt trådade versionen expanderar detta makro till::"

msgid ""
"{\n"
"    PyCriticalSection _py_cs;\n"
"    PyCriticalSection_Begin(&_py_cs, (PyObject*)(op))"
msgstr ""
"{\n"
"    PyCriticalSection _py_cs;\n"
"    PyCriticalSection_Begin(&_py_cs, (PyObject*)(op))"

msgid "In the default build, this macro expands to ``{``."
msgstr "I standardutförandet expanderar detta makro till ``{``."

msgid "Locks the mutex *m* and begins a critical section."
msgstr "Låser mutex *m* och påbörjar en kritisk sektion."

msgid ""
"{\n"
"     PyCriticalSection _py_cs;\n"
"     PyCriticalSection_BeginMutex(&_py_cs, m)"
msgstr ""
"{\n"
"     PyCriticalSection _py_cs;\n"
"     PyCriticalSection_BeginMutex(&_py_cs, m)"

msgid ""
"Note that unlike :c:macro:`Py_BEGIN_CRITICAL_SECTION`, there is no cast for "
"the argument of the macro - it must be a :c:type:`PyMutex` pointer."
msgstr ""
"Observera att till skillnad från :c:macro:`Py_BEGIN_CRITICAL_SECTION` finns "
"det ingen cast för argumentet i makrot - det måste vara en :c:type:`PyMutex`-"
"pekare."

msgid "On the default build, this macro expands to ``{``."
msgstr "I standardutförandet expanderar detta makro till ``{``."

msgid "Ends the critical section and releases the per-object lock."
msgstr "Avslutar det kritiska avsnittet och frigör låset per objekt."

msgid ""
"    PyCriticalSection_End(&_py_cs);\n"
"}"
msgstr ""
"    PyCriticalSection_End(&_py_cs);\n"
"}"

msgid "In the default build, this macro expands to ``}``."
msgstr "I standardutförandet expanderar detta makro till ``}``."

msgid ""
"Acquires the per-objects locks for the objects *a* and *b* and begins a "
"critical section.  The locks are acquired in a consistent order (lowest "
"address first) to avoid lock ordering deadlocks."
msgstr ""
"Förvärvar låsen per objekt för objekten *a* och *b* och påbörjar en kritisk "
"sektion.  Låsen förvärvas i en konsekvent ordning (lägsta adress först) för "
"att undvika låsningsdödlägen."

msgid ""
"{\n"
"    PyCriticalSection2 _py_cs2;\n"
"    PyCriticalSection2_Begin(&_py_cs2, (PyObject*)(a), (PyObject*)(b))"
msgstr ""
"{\n"
"    PyCriticalSection2 _py_cs2;\n"
"    PyCriticalSection2_Begin(&_py_cs2, (PyObject*)(a), (PyObject*)(b))"

msgid "Locks the mutexes *m1* and *m2* and begins a critical section."
msgstr "Låser mutexarna *m1* och *m2* och påbörjar en kritisk sektion."

msgid ""
"{\n"
"     PyCriticalSection2 _py_cs2;\n"
"     PyCriticalSection2_BeginMutex(&_py_cs2, m1, m2)"
msgstr ""
"{\n"
"     PyCriticalSection2 _py_cs2;\n"
"     PyCriticalSection2_BeginMutex(&_py_cs2, m1, m2)"

msgid ""
"Note that unlike :c:macro:`Py_BEGIN_CRITICAL_SECTION2`, there is no cast for "
"the arguments of the macro - they must be :c:type:`PyMutex` pointers."
msgstr ""
"Observera att till skillnad från :c:macro:`Py_BEGIN_CRITICAL_SECTION2` finns "
"det ingen cast för argumenten i makrot - de måste vara :c:type:`PyMutex`-"
"pekare."

msgid "Ends the critical section and releases the per-object locks."
msgstr "Avslutar det kritiska avsnittet och frigör låsen per objekt."

msgid ""
"    PyCriticalSection2_End(&_py_cs2);\n"
"}"
msgstr ""
"    PyCriticalSection2_End(&_py_cs2);\n"
"}"

msgid "PyEval_InitThreads()"
msgstr "PyEval_InitThreads()"

msgid "modules (in module sys)"
msgstr "moduler (i modul sys)"

msgid "path (in module sys)"
msgstr "sökväg (i modul sys)"

msgid "module"
msgstr "modul"

msgid "builtins"
msgstr "inbyggda"

msgid "__main__"
msgstr "__main__"

msgid "sys"
msgstr "system"

msgid "search"
msgstr "sök"

msgid "path"
msgstr "väg"

msgid "Py_FinalizeEx (C function)"
msgstr "Py_FinalizeEx (C-funktion)"

msgid "Py_Initialize()"
msgstr "Py_Initialize()"

msgid "main()"
msgstr "main()"

msgid "Py_GetPath()"
msgstr "Py_GetPath()"

msgid "executable (in module sys)"
msgstr "körbar (i modul sys)"

msgid "version (in module sys)"
msgstr "version (i modul sys)"

msgid "platform (in module sys)"
msgstr "plattform (i modul sys)"

msgid "copyright (in module sys)"
msgstr "copyright (i modul sys)"

msgid "Py_FatalError()"
msgstr "Py_FatalError()"

msgid "argv (in module sys)"
msgstr "argv (i modul sys)"

msgid "global interpreter lock"
msgstr "globalt tolklås"

msgid "interpreter lock"
msgstr "tolklås"

msgid "lock, interpreter"
msgstr "lås, tolk"

msgid "setswitchinterval (in module sys)"
msgstr "setswitchinterval (i modul sys)"

msgid "PyThreadState (C type)"
msgstr "PyThreadState (C-typ)"

msgid "Py_BEGIN_ALLOW_THREADS (C macro)"
msgstr "Py_BEGIN_ALLOW_THREADS (C-makro)"

msgid "Py_END_ALLOW_THREADS (C macro)"
msgstr "Py_END_ALLOW_THREADS (C-makro)"

msgid "PyEval_RestoreThread (C function)"
msgstr "PyEval_RestoreThread (C-funktion)"

msgid "PyEval_SaveThread (C function)"
msgstr "PyEval_SaveThread (C-funktion)"

msgid "PyEval_AcquireThread()"
msgstr "PyEval_AcquireThread()"

msgid "PyEval_ReleaseThread()"
msgstr "PyEval_ReleaseThread()"

msgid "PyEval_SaveThread()"
msgstr "PyEval_SaveThread()"

msgid "PyEval_RestoreThread()"
msgstr "PyEval_RestoreThread()"

msgid "_thread"
msgstr "_tråd"

msgid "stdout (in module sys)"
msgstr "stdout (i modul sys)"

msgid "stderr (in module sys)"
msgstr "stderr (i modul sys)"

msgid "stdin (in module sys)"
msgstr "stdin (i modul sys)"

msgid "Py_Initialize (C function)"
msgstr "Py_Initialize (C-funktion)"

msgid "close (in module os)"
msgstr "close (i modul os)"
