# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's New in Python 2.6"
msgstr "Vad är nytt i Python 2.6"

msgid "Author"
msgstr "Författare"

msgid "A.M. Kuchling (amk at amk.ca)"
msgstr "A.M. Kuchling (amk at amk.ca)"

msgid ""
"This article explains the new features in Python 2.6, released on October 1, "
"2008.  The release schedule is described in :pep:`361`."
msgstr ""
"Den här artikeln förklarar de nya funktionerna i Python 2.6, som släpptes "
"den 1 oktober 2008.  Utgivningsschemat beskrivs i :pep:`361`."

msgid ""
"The major theme of Python 2.6 is preparing the migration path to Python 3.0, "
"a major redesign of the language.  Whenever possible, Python 2.6 "
"incorporates new features and syntax from 3.0 while remaining compatible "
"with existing code by not removing older features or syntax.  When it's not "
"possible to do that, Python 2.6 tries to do what it can, adding "
"compatibility functions in a :mod:`future_builtins` module and a :option:"
"`!-3` switch to warn about usages that will become unsupported in 3.0."
msgstr ""
"Huvudtemat i Python 2.6 är att förbereda migreringsvägen till Python 3.0, en "
"stor omdesign av språket.  När det är möjligt införlivar Python 2.6 nya "
"funktioner och syntax från 3.0 samtidigt som den förblir kompatibel med "
"befintlig kod genom att inte ta bort äldre funktioner eller syntax.  När det "
"inte är möjligt att göra det försöker Python 2.6 göra vad det kan, genom att "
"lägga till kompatibilitetsfunktioner i en :mod:`future_builtins`-modul och "
"en :option:`!-3`-switch för att varna för användningar som inte längre stöds "
"i 3.0."

msgid ""
"Some significant new packages have been added to the standard library, such "
"as the :mod:`multiprocessing` and :mod:`json` modules, but there aren't many "
"new features that aren't related to Python 3.0 in some way."
msgstr ""
"Några viktiga nya paket har lagts till i standardbiblioteket, till exempel "
"modulerna :mod:`multiprocessing` och :mod:`json`, men det finns inte många "
"nya funktioner som inte är relaterade till Python 3.0 på något sätt."

msgid ""
"Python 2.6 also sees a number of improvements and bugfixes throughout the "
"source.  A search through the change logs finds there were 259 patches "
"applied and 612 bugs fixed between Python 2.5 and 2.6.  Both figures are "
"likely to be underestimates."
msgstr ""
"Python 2.6 innehåller också ett antal förbättringar och buggfixar i hela "
"källan.  En sökning genom ändringsloggarna visar att det fanns 259 "
"korrigeringar som tillämpades och 612 buggar fixade mellan Python 2.5 och "
"2.6.  Båda siffrorna är sannolikt underskattningar."

msgid ""
"This article doesn't attempt to provide a complete specification of the new "
"features, but instead provides a convenient overview.  For full details, you "
"should refer to the documentation for Python 2.6. If you want to understand "
"the rationale for the design and implementation, refer to the PEP for a "
"particular new feature. Whenever possible, \"What's New in Python\" links to "
"the bug/patch item for each change."
msgstr ""
"Den här artikeln försöker inte ge en fullständig specifikation av de nya "
"funktionerna, utan ger istället en praktisk översikt.  För fullständiga "
"detaljer bör du hänvisa till dokumentationen för Python 2.6. Om du vill "
"förstå bakgrunden till utformningen och implementeringen bör du läsa PEP:n "
"för en viss ny funktion. När det är möjligt länkar \"What's New in Python\" "
"till buggen/patch-objektet för varje ändring."

msgid "Python 3.0"
msgstr "Python 3.0"

msgid ""
"The development cycle for Python versions 2.6 and 3.0 was synchronized, with "
"the alpha and beta releases for both versions being made on the same days.  "
"The development of 3.0 has influenced many features in 2.6."
msgstr ""
"Utvecklingscykeln för Python-versionerna 2.6 och 3.0 var synkroniserad, och "
"alfa- och beta-versionerna för båda versionerna släpptes samma dagar.  "
"Utvecklingen av 3.0 har påverkat många funktioner i 2.6."

msgid ""
"Python 3.0 is a far-ranging redesign of Python that breaks compatibility "
"with the 2.x series.  This means that existing Python code will need some "
"conversion in order to run on Python 3.0.  However, not all the changes in "
"3.0 necessarily break compatibility.  In cases where new features won't "
"cause existing code to break, they've been backported to 2.6 and are "
"described in this document in the appropriate place.  Some of the 3.0-"
"derived features are:"
msgstr ""
"Python 3.0 är en omfattande omarbetning av Python som bryter "
"kompatibiliteten med 2.x-serien.  Detta innebär att befintlig Python-kod "
"kommer att behöva en viss konvertering för att kunna köras på Python 3.0.  "
"Men inte alla förändringar i 3.0 bryter nödvändigtvis kompatibiliteten.  I "
"de fall där nya funktioner inte kommer att orsaka att befintlig kod bryts, "
"har de backporterats till 2.6 och beskrivs i detta dokument på lämplig "
"plats.  Några av de 3.0-härledda funktionerna är:"

msgid ""
"A :meth:`__complex__` method for converting objects to a complex number."
msgstr ""
"En :meth:`__complex__`-metod för att konvertera objekt till ett komplext tal."

msgid "Alternate syntax for catching exceptions: ``except TypeError as exc``."
msgstr ""
"Alternativ syntax för att fånga upp undantag: ``except TypeError as exc``."

msgid ""
"The addition of :func:`functools.reduce` as a synonym for the built-in :func:"
"`reduce` function."
msgstr ""
"Tillägget av :func:`functools.reduce` som en synonym till den inbyggda "
"funktionen :func:`reduce`."

msgid ""
"Python 3.0 adds several new built-in functions and changes the semantics of "
"some existing builtins.  Functions that are new in 3.0 such as :func:`bin` "
"have simply been added to Python 2.6, but existing builtins haven't been "
"changed; instead, the :mod:`future_builtins` module has versions with the "
"new 3.0 semantics.  Code written to be compatible with 3.0 can do ``from "
"future_builtins import hex, map`` as necessary."
msgstr ""
"Python 3.0 lägger till flera nya inbyggda funktioner och ändrar semantiken "
"för vissa befintliga builtins.  Funktioner som är nya i 3.0 som :func:`bin` "
"har helt enkelt lagts till i Python 2.6, men befintliga inbyggda funktioner "
"har inte ändrats; istället har modulen :mod:`future_builtins` versioner med "
"den nya 3.0-semantiken.  Kod skriven för att vara kompatibel med 3.0 kan "
"göra ``from future_builtins import hex, map`` vid behov."

msgid ""
"A new command-line switch, :option:`!-3`, enables warnings about features "
"that will be removed in Python 3.0.  You can run code with this switch to "
"see how much work will be necessary to port code to 3.0.  The value of this "
"switch is available to Python code as the boolean variable :data:`sys."
"py3kwarning`, and to C extension code as :c:data:`!Py_Py3kWarningFlag`."
msgstr ""
"En ny kommandoradsväxel, :option:`!-3`, aktiverar varningar om funktioner "
"som kommer att tas bort i Python 3.0.  Du kan köra kod med denna switch för "
"att se hur mycket arbete som kommer att krävas för att porta kod till 3.0.  "
"Värdet på denna switch är tillgänglig för Python-kod som den booleska "
"variabeln :data:`sys.py3kwarning`, och för C-tilläggskod som :c:data:`!"
"Py_Py3kWarningFlag`."

msgid ""
"The 3\\ *xxx* series of PEPs, which contains proposals for Python 3.0. :pep:"
"`3000` describes the development process for Python 3.0. Start with :pep:"
"`3100` that describes the general goals for Python 3.0, and then explore the "
"higher-numbered PEPs that propose specific features."
msgstr ""
"3\\ *xxx*-serien av PEPs, som innehåller förslag för Python 3.0. :pep:`3000` "
"beskriver utvecklingsprocessen för Python 3.0. Börja med :pep:`3100` som "
"beskriver de allmänna målen för Python 3.0, och utforska sedan de högre "
"numrerade PEP:erna som föreslår specifika funktioner."

msgid "Changes to the Development Process"
msgstr "Förändringar i utvecklingsprocessen"

msgid ""
"While 2.6 was being developed, the Python development process underwent two "
"significant changes: we switched from SourceForge's issue tracker to a "
"customized Roundup installation, and the documentation was converted from "
"LaTeX to reStructuredText."
msgstr ""
"Medan 2.6 utvecklades genomgick Pythons utvecklingsprocess två betydande "
"förändringar: vi bytte från SourceForges issue tracker till en anpassad "
"Roundup-installation och dokumentationen konverterades från LaTeX till "
"reStructuredText."

msgid "New Issue Tracker: Roundup"
msgstr "Spårare av nya nummer: Sammanställning"

msgid ""
"For a long time, the Python developers had been growing increasingly annoyed "
"by SourceForge's bug tracker.  SourceForge's hosted solution doesn't permit "
"much customization; for example, it wasn't possible to customize the life "
"cycle of issues."
msgstr ""
"Python-utvecklarna hade under en längre tid blivit alltmer irriterade på "
"SourceForges buggtracker.  SourceForges värdbaserade lösning tillåter inte "
"mycket anpassning; till exempel var det inte möjligt att anpassa livscykeln "
"för frågor."

msgid ""
"The infrastructure committee of the Python Software Foundation therefore "
"posted a call for issue trackers, asking volunteers to set up different "
"products and import some of the bugs and patches from SourceForge.  Four "
"different trackers were examined: `Jira <https://www.atlassian.com/software/"
"jira/>`__, `Launchpad <https://launchpad.net/>`__, `Roundup <https://roundup."
"sourceforge.io/>`__, and `Trac <https://trac.edgewall.org/>`__. The "
"committee eventually settled on Jira and Roundup as the two candidates.  "
"Jira is a commercial product that offers no-cost hosted instances to free-"
"software projects; Roundup is an open-source project that requires "
"volunteers to administer it and a server to host it."
msgstr ""
"Infrastrukturkommittén i Python Software Foundation publicerade därför en "
"efterlysning av problemspårare och bad frivilliga att sätta upp olika "
"produkter och importera några av buggarna och korrigeringarna från "
"SourceForge.  Fyra olika trackers undersöktes: `Jira <https://www.atlassian."
"com/software/jira/>`__, `Launchpad <https://launchpad.net/>`__, `Roundup "
"<https://roundup.sourceforge.io/>`__ och `Trac <https://trac.edgewall.org/"
">`__. Kommittén enades till slut om Jira och Roundup som de två "
"kandidaterna.  Jira är en kommersiell produkt som erbjuder kostnadsfria "
"hostade instanser till projekt med fri programvara; Roundup är ett projekt "
"med öppen källkod som kräver frivilliga för att administrera det och en "
"server för att hosta det."

msgid ""
"After posting a call for volunteers, a new Roundup installation was set up "
"at https://bugs.python.org.  One installation of Roundup can host multiple "
"trackers, and this server now also hosts issue trackers for Jython and for "
"the Python web site.  It will surely find other uses in the future.  Where "
"possible, this edition of \"What's New in Python\" links to the bug/patch "
"item for each change."
msgstr ""
"Efter att ha publicerat ett upprop för frivilliga, sattes en ny Roundup-"
"installation upp på https://bugs.python.org.  En installation av Roundup kan "
"vara värd för flera spårare, och denna server är nu också värd för "
"problemspårare för Jython och för Python-webbplatsen.  Den kommer säkert att "
"hitta andra användningsområden i framtiden.  Där det är möjligt länkar denna "
"utgåva av \"What's New in Python\" till buggen/patchen för varje ändring."

msgid ""
"Hosting of the Python bug tracker is kindly provided by `Upfront Systems "
"<https://upfrontsoftware.co.za>`__ of Stellenbosch, South Africa.  Martin "
"von Löwis put a lot of effort into importing existing bugs and patches from "
"SourceForge; his scripts for this import operation are at ``https://svn."
"python.org/view/tracker/importer/`` and may be useful to other projects "
"wishing to move from SourceForge to Roundup."
msgstr ""
"Värd för Python-buggspåraren är vänligen tillhandahållen av `Upfront Systems "
"<https://upfrontsoftware.co.za>`__ i Stellenbosch, Sydafrika.  Martin von "
"Löwis har lagt ner mycket arbete på att importera befintliga buggar och "
"korrigeringar från SourceForge; hans skript för denna import finns på "
"``https://svn.python.org/view/tracker/importer/`` och kan vara användbara "
"för andra projekt som vill flytta från SourceForge till Roundup."

msgid "https://bugs.python.org"
msgstr "https://bugs.python.org"

msgid "The Python bug tracker."
msgstr "Pythons buggspårare."

msgid "https://bugs.jython.org:"
msgstr "https://bugs.jython.org:"

msgid "The Jython bug tracker."
msgstr "Buggspåraren för Jython."

msgid "https://roundup.sourceforge.io/"
msgstr "https://roundup.sourceforge.io/"

msgid "Roundup downloads and documentation."
msgstr "Nedladdningar och dokumentation av Roundup."

msgid "https://svn.python.org/view/tracker/importer/"
msgstr "https://svn.python.org/view/tracker/importer/"

msgid "Martin von Löwis's conversion scripts."
msgstr "Martin von Löwis konverteringsskript."

msgid "New Documentation Format: reStructuredText Using Sphinx"
msgstr "Nytt dokumentationsformat: reStructuredText med hjälp av Sphinx"

msgid ""
"The Python documentation was written using LaTeX since the project started "
"around 1989.  In the 1980s and early 1990s, most documentation was printed "
"out for later study, not viewed online. LaTeX was widely used because it "
"provided attractive printed output while remaining straightforward to write "
"once the basic rules of the markup were learned."
msgstr ""
"Python-dokumentationen skrevs med hjälp av LaTeX sedan projektet startade "
"omkring 1989.  Under 1980-talet och början av 1990-talet skrevs den mesta "
"dokumentationen ut för senare studier och visades inte online. LaTeX "
"användes i stor utsträckning eftersom det gav attraktiva utskrifter "
"samtidigt som det var enkelt att skriva när man väl lärt sig de "
"grundläggande reglerna för markeringen."

msgid ""
"Today LaTeX is still used for writing publications destined for printing, "
"but the landscape for programming tools has shifted.  We no longer print out "
"reams of documentation; instead, we browse through it online and HTML has "
"become the most important format to support. Unfortunately, converting LaTeX "
"to HTML is fairly complicated and Fred L. Drake Jr., the long-time Python "
"documentation editor, spent a lot of time maintaining the conversion "
"process.  Occasionally people would suggest converting the documentation "
"into SGML and later XML, but performing a good conversion is a major task "
"and no one ever committed the time required to finish the job."
msgstr ""
"Idag används LaTeX fortfarande för att skriva publikationer som ska tryckas, "
"men landskapet för programmeringsverktyg har förändrats.  Vi skriver inte "
"längre ut mängder av dokumentation, utan bläddrar igenom den online och HTML "
"har blivit det viktigaste formatet att stödja. Tyvärr är det ganska "
"komplicerat att konvertera LaTeX till HTML och Fred L. Drake Jr, Pythons "
"mångårige dokumentationsredaktör, ägnade mycket tid åt att underhålla "
"konverteringsprocessen.  Ibland föreslog folk att dokumentationen skulle "
"konverteras till SGML och senare XML, men att göra en bra konvertering är en "
"stor uppgift och ingen avsatte någonsin den tid som krävdes för att slutföra "
"jobbet."

msgid ""
"During the 2.6 development cycle, Georg Brandl put a lot of effort into "
"building a new toolchain for processing the documentation.  The resulting "
"package is called Sphinx, and is available from https://www.sphinx-doc.org/."
msgstr ""
"Under utvecklingscykeln för 2.6 lade Georg Brandl ner mycket arbete på att "
"bygga en ny verktygskedja för bearbetning av dokumentationen.  Det "
"resulterande paketet kallas Sphinx och finns tillgängligt från https://www."
"sphinx-doc.org/."

msgid ""
"Sphinx concentrates on HTML output, producing attractively styled and modern "
"HTML; printed output is still supported through conversion to LaTeX.  The "
"input format is reStructuredText, a markup syntax supporting custom "
"extensions and directives that is commonly used in the Python community."
msgstr ""
"Sphinx koncentrerar sig på HTML-utdata och producerar attraktivt utformad "
"och modern HTML; tryckt utdata stöds fortfarande genom konvertering till "
"LaTeX.  Inmatningsformatet är reStructuredText, en markeringssyntax som "
"stöder anpassade tillägg och direktiv och som ofta används i Python-"
"samhället."

msgid ""
"Sphinx is a standalone package that can be used for writing, and almost two "
"dozen other projects (`listed on the Sphinx web site <https://www.sphinx-doc."
"org/en/master/examples.html>`__) have adopted Sphinx as their documentation "
"tool."
msgstr ""
"Sphinx är ett fristående paket som kan användas för att skriva, och nästan "
"två dussin andra projekt (`listade på Sphinx webbplats <https://www.sphinx-"
"doc.org/en/master/examples.html>`__) har antagit Sphinx som sitt "
"dokumentationsverktyg."

msgid "`Documenting Python <https://devguide.python.org/documenting/>`__"
msgstr "`Dokumentation av Python <https://devguide.python.org/documenting/>`__"

msgid "Describes how to write for Python's documentation."
msgstr "Beskriver hur man skriver för Pythons dokumentation."

msgid "`Sphinx <https://www.sphinx-doc.org/>`__"
msgstr "`Sphinx <https://www.sphinx-doc.org/>`__"

msgid "Documentation and code for the Sphinx toolchain."
msgstr "Dokumentation och kod för verktygskedjan Sphinx."

msgid "`Docutils <https://docutils.sourceforge.io>`__"
msgstr "`Docutils <https://docutils.sourceforge.io>`__"

msgid "The underlying reStructuredText parser and toolset."
msgstr "Den underliggande reStructuredText-parsern och verktygssatsen."

msgid "PEP 343: The 'with' statement"
msgstr "PEP 343: Uttalandet \"med"

msgid ""
"The previous version, Python 2.5, added the ':keyword:`with`' statement as "
"an optional feature, to be enabled by a ``from __future__ import "
"with_statement`` directive.  In 2.6 the statement no longer needs to be "
"specially enabled; this means that :keyword:`!with` is now always a "
"keyword.  The rest of this section is a copy of the corresponding section "
"from the \"What's New in Python 2.5\" document; if you're familiar with the "
"':keyword:`!with`' statement from Python 2.5, you can skip this section."
msgstr ""
"Den tidigare versionen, Python 2.5, lade till ':keyword:`with`'-uttalandet "
"som en valfri funktion, som skulle aktiveras med ett ``from __future__ "
"import with_statement``-direktiv.  I 2.6 behöver uttalandet inte längre "
"aktiveras särskilt; detta innebär att :keyword:`!with` nu alltid är ett "
"nyckelord.  Resten av detta avsnitt är en kopia av motsvarande avsnitt från "
"dokumentet \"What's New in Python 2.5\"; om du är bekant med ':keyword:`!"
"with`'-uttalandet från Python 2.5 kan du hoppa över detta avsnitt."

msgid ""
"The ':keyword:`with`' statement clarifies code that previously would use "
"``try...finally`` blocks to ensure that clean-up code is executed.  In this "
"section, I'll discuss the statement as it will commonly be used.  In the "
"next section, I'll examine the implementation details and show how to write "
"objects for use with this statement."
msgstr ""
"Satsen ':keyword:`with`' förtydligar kod som tidigare skulle använda ``try..."
"finally``-block för att säkerställa att uppstädningskoden körs.  I det här "
"avsnittet diskuterar jag uttalandet som det vanligtvis kommer att användas.  "
"I nästa avsnitt undersöker jag implementeringsdetaljerna och visar hur man "
"skriver objekt som kan användas med den här satsen."

msgid ""
"The ':keyword:`with`' statement is a control-flow structure whose basic "
"structure is::"
msgstr ""
"Satsen ':nyckelord:`med`' är en kontrollflödesstruktur vars grundstruktur "
"är::"

msgid ""
"with expression [as variable]:\n"
"    with-block"
msgstr ""
"med uttryck [som variabel]:\n"
"    med-blockera"

msgid ""
"The expression is evaluated, and it should result in an object that supports "
"the context management protocol (that is, has :meth:`~object.__enter__` and :"
"meth:`~object.__exit__` methods)."
msgstr ""
"Uttrycket utvärderas och bör resultera i ett objekt som stöder protokollet "
"för kontexthantering (dvs. har metoderna :meth:`~object.__enter__` och :meth:"
"`~object.__exit__`)."

msgid ""
"The object's :meth:`~object.__enter__` is called before *with-block* is "
"executed and therefore can run set-up code. It also may return a value that "
"is bound to the name *variable*, if given.  (Note carefully that *variable* "
"is *not* assigned the result of *expression*.)"
msgstr ""
"Objektets :meth:`~object.__enter__` anropas innan *with-block* exekveras och "
"kan därför köra installationskod. Den kan också returnera ett värde som är "
"bundet till namnet *variable*, om det anges.  (Observera noga att *variable* "
"*inte* tilldelas resultatet av *expression*)"

msgid ""
"After execution of the *with-block* is finished, the object's :meth:`~object."
"__exit__` method is called, even if the block raised an exception, and can "
"therefore run clean-up code."
msgstr ""
"Efter att *with-blocket* har exekverats anropas objektets metod :meth:"
"`~object.__exit__`, även om blocket gav upphov till ett undantag, och kan "
"därför köra uppstädningskod."

msgid ""
"Some standard Python objects now support the context management protocol and "
"can be used with the ':keyword:`with`' statement. File objects are one "
"example::"
msgstr ""
"Vissa standard Python-objekt har nu stöd för kontexthanteringsprotokollet "
"och kan användas med ':keyword:`with`'. Filobjekt är ett exempel::"

msgid ""
"with open('/etc/passwd', 'r') as f:\n"
"    for line in f:\n"
"        print line\n"
"        ... more processing code ..."
msgstr ""
"med open('/etc/passwd', 'r') som f:\n"
"    för rad i f:\n"
"        skriv ut rad\n"
"        ... mer bearbetningskod ..."

msgid ""
"After this statement has executed, the file object in *f* will have been "
"automatically closed, even if the :keyword:`for` loop raised an exception "
"part-way through the block."
msgstr ""
"Efter att denna sats har exekverats kommer filobjektet i *f* att ha stängts "
"automatiskt, även om :keyword:`for` -loopen gjorde ett undantag halvvägs "
"genom blocket."

msgid ""
"In this case, *f* is the same object created by :func:`open`, because :meth:"
"`~object.__enter__` returns *self*."
msgstr ""
"I det här fallet är *f* samma objekt som skapades av :func:`open`, eftersom :"
"meth:`~object.__enter__` returnerar *self*."

msgid ""
"The :mod:`threading` module's locks and condition variables  also support "
"the ':keyword:`with`' statement::"
msgstr ""
"Modulen :mod:`threading`:s lås och villkorvariabler stöder också ':keyword:"
"`with`'-satsen::"

msgid ""
"lock = threading.Lock()\n"
"with lock:\n"
"    # Critical section of code\n"
"    ..."
msgstr ""
"lock = threading.Lock()\n"
"med lock:\n"
"    # Kritisk del av koden\n"
"    ..."

msgid ""
"The lock is acquired before the block is executed and always released once  "
"the block is complete."
msgstr ""
"Låset förvärvas innan blocket exekveras och släpps alltid när blocket är "
"klart."

msgid ""
"The :func:`localcontext` function in the :mod:`decimal` module makes it easy "
"to save and restore the current decimal context, which encapsulates the "
"desired precision and rounding characteristics for computations::"
msgstr ""
"Funktionen :func:`localcontext` i modulen :mod:`decimal` gör det enkelt att "
"spara och återställa den aktuella decimalkontexten, som innehåller önskad "
"precision och avrundningsegenskaper för beräkningar::"

msgid ""
"from decimal import Decimal, Context, localcontext\n"
"\n"
"# Displays with default precision of 28 digits\n"
"v = Decimal('578')\n"
"print v.sqrt()\n"
"\n"
"with localcontext(Context(prec=16)):\n"
"    # All code in this block uses a precision of 16 digits.\n"
"    # The original context is restored on exiting the block.\n"
"    print v.sqrt()"
msgstr ""
"från decimal importera Decimal, Context, localcontext\n"
"\n"
"# Visar med standardprecision på 28 siffror\n"
"v = Decimal('578')\n"
"print v.sqrt()\n"
"\n"
"med localcontext(Context(prec=16)):\n"
"    # All kod i detta block använder en precision på 16 siffror.\n"
"    # Den ursprungliga kontexten återställs när blocket avslutas.\n"
"    skriv ut v.sqrt()"

msgid "Writing Context Managers"
msgstr "Skriva för kontextansvariga"

msgid ""
"Under the hood, the ':keyword:`with`' statement is fairly complicated. Most "
"people will only use ':keyword:`!with`' in company with existing objects and "
"don't need to know these details, so you can skip the rest of this section "
"if you like.  Authors of new objects will need to understand the details of "
"the underlying implementation and should keep reading."
msgstr ""
"Under huven är ':keyword:`with`'-satsen ganska komplicerad. De flesta "
"människor kommer bara att använda ':keyword:`!with`' i samband med "
"befintliga objekt och behöver inte känna till dessa detaljer, så du kan "
"hoppa över resten av det här avsnittet om du vill.  Författare till nya "
"objekt kommer att behöva förstå detaljerna i den underliggande "
"implementationen och bör fortsätta läsa."

msgid "A high-level explanation of the context management protocol is:"
msgstr "En förklaring på hög nivå av protokollet för kontexthantering är:"

msgid ""
"The expression is evaluated and should result in an object called a "
"\"context manager\".  The context manager must have :meth:`~object."
"__enter__` and :meth:`~object.__exit__` methods."
msgstr ""
"Uttrycket utvärderas och bör resultera i ett objekt som kallas \"context "
"manager\".  Kontexthanteraren måste ha metoderna :meth:`~object.__enter__` "
"och :meth:`~object.__exit__`."

msgid ""
"The context manager's :meth:`~object.__enter__` method is called.  The value "
"returned is assigned to *VAR*.  If no ``as VAR`` clause is present, the "
"value is simply discarded."
msgstr ""
"Kontexthanterarens metod :meth:`~object.__enter__` anropas.  Det värde som "
"returneras tilldelas *VAR*.  Om ingen ``as VAR``-klausul finns, kasseras "
"värdet helt enkelt."

msgid "The code in *BLOCK* is executed."
msgstr "Koden i *BLOCK* utförs."

msgid ""
"If *BLOCK* raises an exception, the context manager's :meth:`~object."
"__exit__` method is called with three arguments, the exception details "
"(``type, value, traceback``, the same values returned by :func:`sys."
"exc_info`, which can also be ``None`` if no exception occurred).  The "
"method's return value controls whether an exception is re-raised: any false "
"value re-raises the exception, and ``True`` will result in suppressing it.  "
"You'll only rarely want to suppress the exception, because if you do the "
"author of the code containing the ':keyword:`with`' statement will never "
"realize anything went wrong."
msgstr ""
"Om *BLOCK* ger upphov till ett undantag anropas kontexthanterarens metod :"
"meth:`~object.__exit__` med tre argument, undantagsdetaljerna (``typ, värde, "
"traceback``, samma värden som returneras av :func:`sys.exc_info`, som också "
"kan vara ``None`` om inget undantag inträffade).  Metodens returvärde "
"kontrollerar om ett undantag ska tas upp igen: alla falska värden tar upp "
"undantaget igen, och ``True`` resulterar i att det undertrycks.  Du kommer "
"bara sällan att vilja undertrycka undantaget, för om du gör det kommer "
"författaren till koden som innehåller ':keyword:`with`'-uttalandet aldrig "
"att inse att något gick fel."

msgid ""
"If *BLOCK* didn't raise an exception,  the :meth:`~object.__exit__` method "
"is still called, but *type*, *value*, and *traceback* are all ``None``."
msgstr ""
"Om *BLOCK* inte gav upphov till ett undantag anropas fortfarande metoden :"
"meth:`~object.__exit__`, men *type*, *value* och *traceback* är alla "
"``None``."

msgid ""
"Let's think through an example.  I won't present detailed code but will only "
"sketch the methods necessary for a database that supports transactions."
msgstr ""
"Låt oss tänka igenom ett exempel.  Jag kommer inte att presentera detaljerad "
"kod utan bara skissa på de metoder som krävs för en databas som stöder "
"transaktioner."

msgid ""
"(For people unfamiliar with database terminology: a set of changes to the "
"database are grouped into a transaction.  Transactions can be either "
"committed, meaning that all the changes are written into the database, or "
"rolled back, meaning that the changes are all discarded and the database is "
"unchanged.  See any database textbook for more information.)"
msgstr ""
"(För den som inte är bekant med databasterminologi: en uppsättning ändringar "
"i databasen grupperas i en transaktion.  Transaktioner kan antingen "
"bekräftas, vilket innebär att alla ändringar skrivs in i databasen, eller "
"rullas tillbaka, vilket innebär att alla ändringar tas bort och att "
"databasen är oförändrad.  Se en databasbok för mer information)"

msgid ""
"Let's assume there's an object representing a database connection. Our goal "
"will be to let the user write code like this::"
msgstr ""
"Låt oss anta att det finns ett objekt som representerar en "
"databasanslutning. Vårt mål kommer att vara att låta användaren skriva kod "
"som denna::"

msgid ""
"db_connection = DatabaseConnection()\n"
"with db_connection as cursor:\n"
"    cursor.execute('insert into ...')\n"
"    cursor.execute('delete from ...')\n"
"    # ... more operations ..."
msgstr ""
"db_connection = Databasanslutning()\n"
"med db_connection som cursor:\n"
"    cursor.execute('insert into ...')\n"
"    cursor.execute('ta bort från ...')\n"
"    # ... fler operationer ..."

msgid ""
"The transaction should be committed if the code in the block runs flawlessly "
"or rolled back if there's an exception. Here's the basic interface for :"
"class:`DatabaseConnection` that I'll assume::"
msgstr ""
"Transaktionen bör genomföras om koden i blocket körs felfritt eller rullas "
"tillbaka om det finns ett undantag. Här är det grundläggande gränssnittet "
"för :class:`DatabaseConnection` som jag kommer att anta::"

msgid ""
"class DatabaseConnection:\n"
"    # Database interface\n"
"    def cursor(self):\n"
"        \"Returns a cursor object and starts a new transaction\"\n"
"    def commit(self):\n"
"        \"Commits current transaction\"\n"
"    def rollback(self):\n"
"        \"Rolls back current transaction\""
msgstr ""
"klass DatabaseConnection:\n"
"    # Databasgränssnitt\n"
"    def cursor(self):\n"
"        \"Returnerar ett cursor-objekt och startar en ny transaktion\"\n"
"    def commit(self):\n"
"        \"Commitar aktuell transaktion\"\n"
"    def rollback(self):\n"
"        \"Rullar tillbaka aktuell transaktion\""

msgid ""
"The :meth:`~object.__enter__` method is pretty easy, having only to start a "
"new transaction.  For this application the resulting cursor object would be "
"a useful result, so the method will return it.  The user can then add ``as "
"cursor`` to their ':keyword:`with`' statement to bind the cursor to a "
"variable name. ::"
msgstr ""
"Metoden :meth:`~object.__enter__` är ganska enkel, det räcker med att starta "
"en ny transaktion.  För den här applikationen skulle det resulterande "
"markörobjektet vara ett användbart resultat, så metoden returnerar det.  "
"Användaren kan sedan lägga till ``as cursor`` i sin ':keyword:`with`'-sats "
"för att binda markören till ett variabelnamn. ::"

msgid ""
"class DatabaseConnection:\n"
"    ...\n"
"    def __enter__(self):\n"
"        # Code to start a new transaction\n"
"        cursor = self.cursor()\n"
"        return cursor"
msgstr ""
"klass DatabaseConnection:\n"
"    ...\n"
"    def __enter__(self):\n"
"        # Kod för att starta en ny transaktion\n"
"        cursor = self.cursor()\n"
"        returnera cursor"

msgid ""
"The :meth:`~object.__exit__` method is the most complicated because it's "
"where most of the work has to be done.  The method has to check if an "
"exception occurred.  If there was no exception, the transaction is "
"committed.  The transaction is rolled back if there was an exception."
msgstr ""
"Metoden :meth:`~object.__exit__` är den mest komplicerade eftersom det är "
"där det mesta av arbetet måste göras.  Metoden måste kontrollera om ett "
"undantag inträffade.  Om det inte inträffade något undantag genomförs "
"transaktionen.  Transaktionen rullas tillbaka om det inträffade ett undantag."

msgid ""
"In the code below, execution will just fall off the end of the function, "
"returning the default value of ``None``.  ``None`` is false, so the "
"exception will be re-raised automatically.  If you wished, you could be more "
"explicit and add a :keyword:`return` statement at the marked location. ::"
msgstr ""
"I koden nedan kommer exekveringen bara att falla av i slutet av funktionen "
"och returnera standardvärdet ``None``.  ``None`` är falskt, så undantaget "
"kommer att återkallas automatiskt.  Om du vill kan du vara mer explicit och "
"lägga till en :keyword:`return`-sats på den markerade platsen. ::"

msgid ""
"class DatabaseConnection:\n"
"    ...\n"
"    def __exit__(self, type, value, tb):\n"
"        if tb is None:\n"
"            # No exception, so commit\n"
"            self.commit()\n"
"        else:\n"
"            # Exception occurred, so rollback.\n"
"            self.rollback()\n"
"            # return False"
msgstr ""
"klass DatabaseConnection:\n"
"    ...\n"
"    def __exit__(self, type, value, tb):\n"
"        om tb är None:\n"
"            # Inget undantag, så commit\n"
"            self.commit()\n"
"        else:\n"
"            # Undantag inträffade, så rollback.\n"
"            self.rollback()\n"
"            # return False"

msgid "The contextlib module"
msgstr "Modulen contextlib"

msgid ""
"The :mod:`contextlib` module provides some functions and a decorator that "
"are useful when writing objects for use with the ':keyword:`with`' statement."
msgstr ""
"Modulen :mod:`contextlib` innehåller några funktioner och en dekorator som "
"är användbara när du skriver objekt som ska användas med ':keyword:`with`'."

msgid ""
"The decorator is called :func:`contextmanager`, and lets you write a single "
"generator function instead of defining a new class.  The generator should "
"yield exactly one value.  The code up to the :keyword:`yield` will be "
"executed as the :meth:`~object.__enter__` method, and the value yielded will "
"be the method's return value that will get bound to the variable in the ':"
"keyword:`with`' statement's :keyword:`!as` clause, if any.  The code after "
"the :keyword:`!yield` will be executed in the :meth:`~object.__exit__` "
"method.  Any exception raised in the block will be raised by the :keyword:`!"
"yield` statement."
msgstr ""
"Dekoratorn heter :func:`contextmanager` och gör att du kan skriva en enda "
"generatorfunktion istället för att definiera en ny klass.  Generatorn ska ge "
"exakt ett värde.  Koden fram till :keyword:`yield` kommer att exekveras som :"
"meth:`~object.__enter__`-metoden, och det värde som genereras kommer att "
"vara metodens returvärde som kommer att bindas till variabeln i ':keyword:"
"`with`'-satsens :keyword:`!as`-klausul, om någon.  Koden efter :keyword:`!"
"yield` kommer att exekveras i metoden :meth:`~object.__exit__`.  Alla "
"undantag som uppstår i blocket kommer att uppstå i :keyword:`!yield`-satsen."

msgid ""
"Using this decorator, our database example from the previous section could "
"be written as::"
msgstr ""
"Med hjälp av denna dekorator kan vårt databasexempel från föregående avsnitt "
"skrivas som::"

msgid ""
"from contextlib import contextmanager\n"
"\n"
"@contextmanager\n"
"def db_transaction(connection):\n"
"    cursor = connection.cursor()\n"
"    try:\n"
"        yield cursor\n"
"    except:\n"
"        connection.rollback()\n"
"        raise\n"
"    else:\n"
"        connection.commit()\n"
"\n"
"db = DatabaseConnection()\n"
"with db_transaction(db) as cursor:\n"
"    ..."
msgstr ""
"från contextlib import contextmanager\n"
"\n"
"@kontexthanterare\n"
"def db_transaction(anslutning):\n"
"    cursor = anslutning.cursor()\n"
"    försök:\n"
"        avkastning cursor\n"
"    except:\n"
"        connection.rollback()\n"
"        höja\n"
"    else:\n"
"        anslutning.commit()\n"
"\n"
"db = Databasanslutning()\n"
"med db_transaction(db) som cursor:\n"
"    ..."

msgid ""
"The :mod:`contextlib` module also has a ``nested(mgr1, mgr2, ...)`` function "
"that combines a number of context managers so you don't need to write nested "
"':keyword:`with`' statements.  In this example, the single ':keyword:`!"
"with`' statement both starts a database transaction and acquires a thread "
"lock::"
msgstr ""
"Modulen :mod:`contextlib` har också en funktion ``nested(mgr1, mgr2, ...)`` "
"som kombinerar ett antal kontexthanterare så att du inte behöver skriva "
"nästlade ':keyword:`with`'-satser.  I det här exemplet startar en enda ':"
"keyword:`!with`'-sats både en databastransaktion och förvärvar ett trådlås:"

msgid ""
"lock = threading.Lock()\n"
"with nested (db_transaction(db), lock) as (cursor, locked):\n"
"    ..."
msgstr ""
"lock = threading.Lock()\n"
"med nested (db_transaction(db), lock) som (cursor, locked):\n"
"    ..."

msgid ""
"Finally, the :func:`closing` function returns its argument so that it can be "
"bound to a variable, and calls the argument's ``.close()`` method at the end "
"of the block. ::"
msgstr ""
"Slutligen returnerar funktionen :func:`closing` sitt argument så att det kan "
"bindas till en variabel, och anropar argumentets metod ``.close()`` i slutet "
"av blocket. ::"

msgid ""
"import urllib, sys\n"
"from contextlib import closing\n"
"\n"
"with closing(urllib.urlopen('http://www.yahoo.com')) as f:\n"
"    for line in f:\n"
"        sys.stdout.write(line)"
msgstr ""
"import urllib, sys\n"
"from contextlib import closing\n"
"\n"
"with closing(urllib.urlopen('http://www.yahoo.com')) as f:\n"
"    for line in f:\n"
"        sys.stdout.write(line)"

msgid ":pep:`343` - The \"with\" statement"
msgstr ":pep:`343` - Uttalandet \"med\""

msgid ""
"PEP written by Guido van Rossum and Nick Coghlan; implemented by Mike Bland, "
"Guido van Rossum, and Neal Norwitz.  The PEP shows the code generated for a "
"':keyword:`with`' statement, which can be helpful in learning how the "
"statement works."
msgstr ""
"PEP skriven av Guido van Rossum och Nick Coghlan; implementerad av Mike "
"Bland, Guido van Rossum och Neal Norwitz.  PEP:n visar koden som genereras "
"för en ':keyword:`with`'-sats, vilket kan vara till hjälp för att lära sig "
"hur satsen fungerar."

msgid "The documentation  for the :mod:`contextlib` module."
msgstr "Dokumentationen för modulen :mod:`contextlib`."

msgid "PEP 366: Explicit Relative Imports From a Main Module"
msgstr "PEP 366: Explicit relativistisk import från en huvudmodul"

msgid ""
"Python's :option:`-m` switch allows running a module as a script. When you "
"ran a module that was located inside a package, relative imports didn't work "
"correctly."
msgstr ""
"Pythons :option:`-m` gör det möjligt att köra en modul som ett skript. När "
"du körde en modul som låg i ett paket fungerade inte relativ import korrekt."

msgid ""
"The fix for Python 2.6 adds a :attr:`module.__package__` attribute. When "
"this attribute is present, relative imports will be relative to the value of "
"this attribute instead of the :attr:`~module.__name__` attribute."
msgstr ""
"Fixen för Python 2.6 lägger till ett :attr:`module.__package__`-attribut. "
"När detta attribut är närvarande kommer relativ import att vara relativ till "
"värdet på detta attribut istället för attributet :attr:`~module.__name__`."

msgid ""
"PEP 302-style importers can then set :attr:`~module.__package__` as "
"necessary. The :mod:`runpy` module that implements the :option:`-m` switch "
"now does this, so relative imports will now work correctly in scripts "
"running from inside a package."
msgstr ""
"PEP 302-stil importörer kan sedan ställa in :attr:`~module.__package__` vid "
"behov. Modulen :mod:`runpy` som implementerar bytet :option:`-m` gör nu "
"detta, så relativ import kommer nu att fungera korrekt i skript som körs "
"inifrån ett paket."

msgid "PEP 370: Per-user ``site-packages`` Directory"
msgstr "PEP 370: ``site-packages``-katalog per användare"

msgid ""
"When you run Python, the module search path ``sys.path`` usually includes a "
"directory whose path ends in ``\"site-packages\"``.  This directory is "
"intended to hold locally installed packages available to all users using a "
"machine or a particular site installation."
msgstr ""
"När du kör Python innehåller sökvägen för modulen ``sys.path`` vanligtvis en "
"katalog vars sökväg slutar på ``\"site-packages\"``.  Den här katalogen är "
"avsedd att innehålla lokalt installerade paket som är tillgängliga för alla "
"användare som använder en maskin eller en viss webbplatsinstallation."

msgid ""
"Python 2.6 introduces a convention for user-specific site directories. The "
"directory varies depending on the platform:"
msgstr ""
"Python 2.6 introducerar en konvention för användarspecifika "
"webbplatskataloger. Katalogen varierar beroende på plattform:"

msgid "Unix and Mac OS X: :file:`~/.local/`"
msgstr "Unix och Mac OS X: :file:`~/.local/`"

msgid "Windows: :file:`%APPDATA%/Python`"
msgstr "Windows: :file:`%APPDATA%/Python`"

msgid ""
"Within this directory, there will be version-specific subdirectories, such "
"as :file:`lib/python2.6/site-packages` on Unix/Mac OS and :file:`Python26/"
"site-packages` on Windows."
msgstr ""
"I den här katalogen finns det versionsspecifika underkataloger, t.ex. :file:"
"`lib/python2.6/site-packages` på Unix/Mac OS och :file:`Python26/site-"
"packages` på Windows."

msgid ""
"If you don't like the default directory, it can be overridden by an "
"environment variable.  :envvar:`PYTHONUSERBASE` sets the root directory used "
"for all Python versions supporting this feature.  On Windows, the directory "
"for application-specific data can be changed by setting the :envvar:"
"`APPDATA` environment variable.  You can also modify the :file:`site.py` "
"file for your Python installation."
msgstr ""
"Om du inte gillar standardkatalogen kan den åsidosättas med en "
"miljövariabel. :envvar:`PYTHONUSERBASE` anger den rotkatalog som används för "
"alla Python-versioner som stöder denna funktion.  I Windows kan katalogen "
"för applikationsspecifika data ändras genom att ställa in miljövariabeln :"
"envvar:`APPDATA`.  Du kan också ändra filen :file:`site.py` för din Python-"
"installation."

msgid ""
"The feature can be disabled entirely by running Python with the :option:`-s` "
"option or setting the :envvar:`PYTHONNOUSERSITE` environment variable."
msgstr ""
"Funktionen kan avaktiveras helt genom att köra Python med alternativet :"
"option:`-s` eller genom att ställa in miljövariabeln :envvar:"
"`PYTHONNOUSERSITE`."

msgid ":pep:`370` - Per-user ``site-packages`` Directory"
msgstr ":pep:`370` - Katalog för ``site-paket`` per användare"

msgid "PEP written and implemented by Christian Heimes."
msgstr "PEP skrivet och implementerat av Christian Heimes."

msgid "PEP 371: The ``multiprocessing`` Package"
msgstr "PEP 371: Paketet \"Multiprocessing"

msgid ""
"The new :mod:`multiprocessing` package lets Python programs create new "
"processes that will perform a computation and return a result to the "
"parent.  The parent and child processes can communicate using queues and "
"pipes, synchronize their operations using locks and semaphores, and can "
"share simple arrays of data."
msgstr ""
"Det nya :mod:`multiprocessing`-paketet låter Python-program skapa nya "
"processer som utför en beräkning och returnerar ett resultat till "
"föräldern.  Föräldra- och barnprocesserna kan kommunicera med hjälp av köer "
"och pipes, synkronisera sina operationer med hjälp av lås och semaforer och "
"kan dela enkla matriser med data."

msgid ""
"The :mod:`multiprocessing` module started out as an exact emulation of the :"
"mod:`threading` module using processes instead of threads.  That goal was "
"discarded along the path to Python 2.6, but the general approach of the "
"module is still similar.  The fundamental class is the :class:`Process`, "
"which is passed a callable object and a collection of arguments.  The :meth:"
"`start` method sets the callable running in a subprocess, after which you "
"can call the :meth:`is_alive` method to check whether the subprocess is "
"still running and the :meth:`join` method to wait for the process to exit."
msgstr ""
"Modulen :mod:`multiprocessing` började som en exakt emulering av modulen :"
"mod:`threading` som använder processer istället för trådar.  Det målet "
"förkastades på vägen till Python 2.6, men det allmänna tillvägagångssättet "
"för modulen är fortfarande liknande.  Den grundläggande klassen är :class:"
"`Process`, som får ett anropsbart objekt och en samling argument.  Metoden :"
"meth:`start` sätter igång det anropbara objektet i en subprocess, varefter "
"du kan anropa metoden :meth:`is_alive` för att kontrollera om subprocessen "
"fortfarande körs och metoden :meth:`join` för att vänta på att processen ska "
"avslutas."

msgid ""
"Here's a simple example where the subprocess will calculate a factorial.  "
"The function doing the calculation is written strangely so that it takes "
"significantly longer when the input argument is a multiple of 4."
msgstr ""
"Här är ett enkelt exempel där subprocessen ska beräkna en faktoriell.  "
"Funktionen som gör beräkningen är konstigt skriven så att den tar betydligt "
"längre tid när indata är en multipel av 4."

msgid ""
"import time\n"
"from multiprocessing import Process, Queue\n"
"\n"
"\n"
"def factorial(queue, N):\n"
"    \"Compute a factorial.\"\n"
"    # If N is a multiple of 4, this function will take much longer.\n"
"    if (N % 4) == 0:\n"
"        time.sleep(.05 * N/4)\n"
"\n"
"    # Calculate the result\n"
"    fact = 1L\n"
"    for i in range(1, N+1):\n"
"        fact = fact * i\n"
"\n"
"    # Put the result on the queue\n"
"    queue.put(fact)\n"
"\n"
"if __name__ == '__main__':\n"
"    queue = Queue()\n"
"\n"
"    N = 5\n"
"\n"
"    p = Process(target=factorial, args=(queue, N))\n"
"    p.start()\n"
"    p.join()\n"
"\n"
"    result = queue.get()\n"
"    print 'Factorial', N, '=', result"
msgstr ""
"import time\n"
"from multiprocessing import Process, Queue\n"
"\n"
"\n"
"def factorial(queue, N):\n"
"    \"Compute a factorial.\"\n"
"    # If N is a multiple of 4, this function will take much longer.\n"
"    if (N % 4) == 0:\n"
"        time.sleep(.05 * N/4)\n"
"\n"
"    # Calculate the result\n"
"    fact = 1L\n"
"    for i in range(1, N+1):\n"
"        fact = fact * i\n"
"\n"
"    # Put the result on the queue\n"
"    queue.put(fact)\n"
"\n"
"if __name__ == '__main__':\n"
"    queue = Queue()\n"
"\n"
"    N = 5\n"
"\n"
"    p = Process(target=factorial, args=(queue, N))\n"
"    p.start()\n"
"    p.join()\n"
"\n"
"    result = queue.get()\n"
"    print 'Factorial', N, '=', result"

msgid ""
"A :class:`~queue.Queue` is used to communicate the result of the factorial. "
"The :class:`~queue.Queue` object is stored in a global variable. The child "
"process will use the value of the variable when the child was created; "
"because it's a :class:`~queue.Queue`, parent and child can use the object to "
"communicate.  (If the parent were to change the value of the global "
"variable, the child's value would be unaffected, and vice versa.)"
msgstr ""
"En :class:`~queue.Queue` används för att kommunicera resultatet av "
"faktorialtalet. Objektet :class:`~queue.Queue` lagras i en global variabel. "
"Barnprocessen kommer att använda variabelns värde när barnet skapades; "
"eftersom det är en :class:`~queue.Queue` kan förälder och barn använda "
"objektet för att kommunicera.  (Om föräldern skulle ändra värdet på den "
"globala variabeln skulle barnets värde inte påverkas, och vice versa)"

msgid ""
"Two other classes, :class:`Pool` and :class:`Manager`, provide higher-level "
"interfaces.  :class:`Pool` will create a fixed number of worker processes, "
"and requests can then be distributed to the workers by calling :meth:`apply` "
"or :meth:`apply_async` to add a single request, and :meth:`map` or :meth:"
"`map_async` to add a number of requests.  The following code uses a :class:"
"`Pool` to spread requests across 5 worker processes and retrieve a list of "
"results::"
msgstr ""
"Två andra klasser, :class:`Pool` och :class:`Manager`, tillhandahåller "
"gränssnitt på högre nivå. :class:`Pool` skapar ett fast antal "
"arbetsprocesser, och förfrågningar kan sedan distribueras till "
"arbetsprocesserna genom att anropa :meth:`apply` eller :meth:`apply_async` "
"för att lägga till en enda förfrågan, och :meth:`map` eller :meth:"
"`map_async` för att lägga till ett antal förfrågningar.  Följande kod "
"använder en :class:`Pool` för att sprida ut förfrågningar över 5 "
"arbetsprocesser och hämta en lista med resultat::"

msgid ""
"from multiprocessing import Pool\n"
"\n"
"def factorial(N, dictionary):\n"
"    \"Compute a factorial.\"\n"
"    ...\n"
"p = Pool(5)\n"
"result = p.map(factorial, range(1, 1000, 10))\n"
"for v in result:\n"
"    print v"
msgstr ""
"från multiprocessing import Pool\n"
"\n"
"def faktoriell(N, ordbok):\n"
"    \"Beräkna en faktoriell.\"\n"
"    ...\n"
"p = Pool(5)\n"
"resultat = p.map(faktoriell, intervall(1, 1000, 10))\n"
"för v i resultat:\n"
"    print v"

msgid "This produces the following output::"
msgstr "Detta ger följande utdata::"

msgid ""
"1\n"
"39916800\n"
"51090942171709440000\n"
"8222838654177922817725562880000000\n"
"33452526613163807108170062053440751665152000000000\n"
"..."
msgstr ""
"1\n"
"39916800\n"
"51090942171709440000\n"
"8222838654177922817725562880000000\n"
"33452526613163807108170062053440751665152000000000\n"
"..."

msgid ""
"The other high-level interface, the :class:`Manager` class, creates a "
"separate server process that can hold master copies of Python data "
"structures.  Other processes can then access and modify these data "
"structures using proxy objects.  The following example creates a shared "
"dictionary by calling the :meth:`dict` method; the worker processes then "
"insert values into the dictionary.  (Locking is not done for you "
"automatically, which doesn't matter in this example. :class:`Manager`'s "
"methods also include :meth:`Lock`, :meth:`RLock`, and :meth:`Semaphore` to "
"create shared locks.)"
msgstr ""
"Det andra högnivågränssnittet, klassen :class:`Manager`, skapar en separat "
"serverprocess som kan hålla masterkopior av Python-datastrukturer.  Andra "
"processer kan sedan komma åt och modifiera dessa datastrukturer med hjälp av "
"proxyobjekt.  Följande exempel skapar en delad ordbok genom att anropa "
"metoden :meth:`dict`; arbetsprocesserna infogar sedan värden i ordboken.  "
"(Låsning görs inte automatiskt, vilket inte spelar någon roll i det här "
"exemplet. :class:`Manager`:s metoder inkluderar även :meth:`Lock`, :meth:"
"`RLock` och :meth:`Semaphore` för att skapa delade lås)"

msgid ""
"import time\n"
"from multiprocessing import Pool, Manager\n"
"\n"
"def factorial(N, dictionary):\n"
"    \"Compute a factorial.\"\n"
"    # Calculate the result\n"
"    fact = 1L\n"
"    for i in range(1, N+1):\n"
"        fact = fact * i\n"
"\n"
"    # Store result in dictionary\n"
"    dictionary[N] = fact\n"
"\n"
"if __name__ == '__main__':\n"
"    p = Pool(5)\n"
"    mgr = Manager()\n"
"    d = mgr.dict()         # Create shared dictionary\n"
"\n"
"    # Run tasks using the pool\n"
"    for N in range(1, 1000, 10):\n"
"        p.apply_async(factorial, (N, d))\n"
"\n"
"    # Mark pool as closed -- no more tasks can be added.\n"
"    p.close()\n"
"\n"
"    # Wait for tasks to exit\n"
"    p.join()\n"
"\n"
"    # Output results\n"
"    for k, v in sorted(d.items()):\n"
"        print k, v"
msgstr ""
"import time\n"
"from multiprocessing import Pool, Manager\n"
"\n"
"def factorial(N, dictionary):\n"
"    \"Compute a factorial.\"\n"
"    # Calculate the result\n"
"    fact = 1L\n"
"    for i in range(1, N+1):\n"
"        fact = fact * i\n"
"\n"
"    # Store result in dictionary\n"
"    dictionary[N] = fact\n"
"\n"
"if __name__ == '__main__':\n"
"    p = Pool(5)\n"
"    mgr = Manager()\n"
"    d = mgr.dict()         # Create shared dictionary\n"
"\n"
"    # Run tasks using the pool\n"
"    for N in range(1, 1000, 10):\n"
"        p.apply_async(factorial, (N, d))\n"
"\n"
"    # Mark pool as closed -- no more tasks can be added.\n"
"    p.close()\n"
"\n"
"    # Wait for tasks to exit\n"
"    p.join()\n"
"\n"
"    # Output results\n"
"    for k, v in sorted(d.items()):\n"
"        print k, v"

msgid "This will produce the output::"
msgstr "Detta kommer att ge utdata::"

msgid ""
"1 1\n"
"11 39916800\n"
"21 51090942171709440000\n"
"31 8222838654177922817725562880000000\n"
"41 33452526613163807108170062053440751665152000000000\n"
"51 15511187532873822802242430164693032110632597200169861120000..."
msgstr ""
"1 1\n"
"11 39916800\n"
"21 51090942171709440000\n"
"31 8222838654177922817725562880000000\n"
"41 33452526613163807108170062053440751665152000000000\n"
"51 15511187532873822802242430164693032110632597200169861120000..."

msgid "The documentation for the :mod:`multiprocessing` module."
msgstr "Dokumentationen för modulen :mod:`multiprocessing`."

msgid ":pep:`371` - Addition of the multiprocessing package"
msgstr ":pep:`371` - Tillägg av multiprocessing-paketet"

msgid ""
"PEP written by Jesse Noller and Richard Oudkerk; implemented by Richard "
"Oudkerk and Jesse Noller."
msgstr ""
"PEP skriven av Jesse Noller och Richard Oudkerk; implementerad av Richard "
"Oudkerk och Jesse Noller."

msgid "PEP 3101: Advanced String Formatting"
msgstr "PEP 3101: Avancerad strängformatering"

msgid ""
"In Python 3.0, the ``%`` operator is supplemented by a more powerful string "
"formatting method, :meth:`format`.  Support for the :meth:`str.format` "
"method has been backported to Python 2.6."
msgstr ""
"I Python 3.0 kompletteras operatorn ``%`` med en mer kraftfull "
"strängformateringsmetod, :meth:`format`.  Stöd för metoden :meth:`str."
"format` har backporterats till Python 2.6."

msgid ""
"In 2.6, both 8-bit and Unicode strings have a ``.format()`` method that "
"treats the string as a template and takes the arguments to be formatted. The "
"formatting template uses curly brackets (``{``, ``}``) as special "
"characters::"
msgstr ""
"I 2.6 har både 8-bitars och Unicode-strängar en ``.format()``-metod som "
"behandlar strängen som en mall och tar argumenten som ska formateras. "
"Formateringsmallen använder hakparenteser (``{``, ``}``) som specialtecken::"

msgid ""
">>> # Substitute positional argument 0 into the string.\n"
">>> \"User ID: {0}\".format(\"root\")\n"
"'User ID: root'\n"
">>> # Use the named keyword arguments\n"
">>> \"User ID: {uid}   Last seen: {last_login}\".format(\n"
"...    uid=\"root\",\n"
"...    last_login = \"5 Mar 2008 07:20\")\n"
"'User ID: root   Last seen: 5 Mar 2008 07:20'"
msgstr ""
">>> # Ersätt det positionella argumentet 0 i strängen.\n"
">>> \"Användar-ID: {0}\".format(\"root\")\n"
"\"Användar-ID: root\n"
">>> # Använd de namngivna nyckelordsargumenten\n"
">>> \"Användar-ID: {uid} Senast sett: {last_login}\".format(\n"
"... uid=\"root\",\n"
"... last_login = \"5 mars 2008 07:20\")\n"
"\"Användar-ID: root Senast sedd: 5 mars 2008 07:20"

msgid "Curly brackets can be escaped by doubling them::"
msgstr "Lockiga parenteser kan undkommas genom att dubblera dem::"

msgid ""
">>> \"Empty dict: {{}}\".format()\n"
"\"Empty dict: {}\""
msgstr ""
">>> \"Tomt diktat: {{}}\".format()\n"
"\"Tomt diktat: {}\""

msgid ""
"Field names can be integers indicating positional arguments, such as ``{0}"
"``, ``{1}``, etc. or names of keyword arguments.  You can also supply "
"compound field names that read attributes or access dictionary keys::"
msgstr ""
"Fältnamn kan vara heltal som anger positionella argument, t.ex. ``{0}``, "
"``{1}`` etc. eller namn på nyckelordsargument.  Du kan också ange "
"sammansatta fältnamn som läser attribut eller ger tillgång till nycklar i en "
"ordbok::"

msgid ""
">>> import sys\n"
">>> print 'Platform: {0.platform}\\nPython version: {0.version}'."
"format(sys)\n"
"Platform: darwin\n"
"Python version: 2.6a1+ (trunk:61261M, Mar  5 2008, 20:29:41)\n"
"[GCC 4.0.1 (Apple Computer, Inc. build 5367)]'\n"
"\n"
">>> import mimetypes\n"
">>> 'Content-type: {0[.mp4]}'.format(mimetypes.types_map)\n"
"'Content-type: video/mp4'"
msgstr ""
">>> import sys\n"
">>> print 'Plattform: {0.platform}\\nPython version: {0.version}'."
"format(sys)\n"
"Plattform: darwin\n"
"Python-version: 2.6a1+ (trunk:61261M, 5 mars 2008, 20:29:41)\n"
"[GCC 4.0.1 (Apple Computer, Inc. build 5367)]'\n"
"\n"
">>> import mimetypes\n"
">>> 'Innehållstyp: {0[.mp4]}'.format(mimetypes.types_map)\n"
"\"Innehållstyp: video/mp4"

msgid ""
"Note that when using dictionary-style notation such as ``[.mp4]``, you don't "
"need to put any quotation marks around the string; it will look up the value "
"using ``.mp4`` as the key.  Strings beginning with a number will be "
"converted to an integer.  You can't write more complicated expressions "
"inside a format string."
msgstr ""
"Observera att när du använder ordboksliknande notation som ``[.mp4]`` "
"behöver du inte sätta några citattecken runt strängen; den kommer att leta "
"upp värdet med ``.mp4`` som nyckel.  Strängar som börjar med ett tal "
"konverteras till ett heltal.  Du kan inte skriva mer komplicerade uttryck "
"inuti en formatsträng."

msgid ""
"So far we've shown how to specify which field to substitute into the "
"resulting string.  The precise formatting used is also controllable by "
"adding a colon followed by a format specifier.  For example::"
msgstr ""
"Hittills har vi visat hur man anger vilket fält som ska ersättas i den "
"resulterande strängen.  Den exakta formatering som används kan också "
"kontrolleras genom att lägga till ett kolon följt av en formatspecifikator.  "
"Till exempel::"

msgid ""
">>> # Field 0: left justify, pad to 15 characters\n"
">>> # Field 1: right justify, pad to 6 characters\n"
">>> fmt = '{0:15} ${1:>6}'\n"
">>> fmt.format('Registration', 35)\n"
"'Registration    $    35'\n"
">>> fmt.format('Tutorial', 50)\n"
"'Tutorial        $    50'\n"
">>> fmt.format('Banquet', 125)\n"
"'Banquet         $   125'"
msgstr ""
">>> # Fält 0: vänsterjustera, fyll i till 15 tecken\n"
">>> # Fält 1: högerjustera, fyll i till 6 tecken\n"
">>> fmt = '{0:15} ${1:>6}'\n"
">>> fmt.format('Registrering', 35)\n"
"'Registrering $ 35'\n"
">>> fmt.format('Självstudier', 50)\n"
"\"Handledning $ 50\n"
">>> fmt.format('Bankett', 125)\n"
"\"Bankett $ 125"

msgid "Format specifiers can reference other fields through nesting::"
msgstr "Formatangivelser kan referera till andra fält genom nesting::"

msgid ""
">>> fmt = '{0:{1}}'\n"
">>> width = 15\n"
">>> fmt.format('Invoice #1234', width)\n"
"'Invoice #1234  '\n"
">>> width = 35\n"
">>> fmt.format('Invoice #1234', width)\n"
"'Invoice #1234                      '"
msgstr ""
">>> fmt = '{0:{1}}'\n"
">>> bredd = 15\n"
">>> fmt.format('Faktura #1234', bredd)\n"
"'Faktura #1234 '\n"
">>> bredd = 35\n"
">>> fmt.format('Faktura #1234', bredd)\n"
"\"Faktura #1234"

msgid "The alignment of a field within the desired width can be specified:"
msgstr "Inriktningen av ett fält inom den önskade bredden kan specificeras:"

msgid "Character"
msgstr "Tecken"

msgid "Effect"
msgstr "Effekt"

msgid "< (default)"
msgstr "< (standard)"

msgid "Left-align"
msgstr "Vänsterjusterad"

msgid ">"
msgstr ">"

msgid "Right-align"
msgstr "Högerjusterad"

msgid "^"
msgstr "^"

msgid "Center"
msgstr "Centrera"

msgid "="
msgstr "="

msgid "(For numeric types only) Pad after the sign."
msgstr "(Endast för numeriska typer) Fyll i efter tecknet."

msgid ""
"Format specifiers can also include a presentation type, which controls how "
"the value is formatted.  For example, floating-point numbers can be "
"formatted as a general number or in exponential notation::"
msgstr ""
"Formatspecifikationer kan också innehålla en presentationstyp, som styr hur "
"värdet formateras.  Flyttal kan t.ex. formateras som ett allmänt tal eller i "
"exponentiell notation::"

msgid ""
">>> '{0:g}'.format(3.75)\n"
"'3.75'\n"
">>> '{0:e}'.format(3.75)\n"
"'3.750000e+00'"
msgstr ""
">>> '{0:g}'.format(3,75)\n"
"'3.75'\n"
">>> '{0:e}'.format(3.75)\n"
"'3.750000e+00'"

msgid ""
"A variety of presentation types are available.  Consult the 2.6 "
"documentation for a :ref:`complete list <formatstrings>`; here's a sample:"
msgstr ""
"En mängd olika presentationstyper finns tillgängliga.  Se dokumentationen "
"för 2.6 för en :ref:`fullständig lista <formatstrings>`; här är ett exempel:"

msgid "``b``"
msgstr "``b``"

msgid "Binary. Outputs the number in base 2."
msgstr "Binär. Utmatning av talet i bas 2."

msgid "``c``"
msgstr "``c``"

msgid ""
"Character. Converts the integer to the corresponding Unicode character "
"before printing."
msgstr ""
"Tecken. Konverterar heltalet till motsvarande Unicode-tecken före utskrift."

msgid "``d``"
msgstr "``d``"

msgid "Decimal Integer. Outputs the number in base 10."
msgstr "Decimalt heltal. Utmatning av talet i bas 10."

msgid "``o``"
msgstr "``o``"

msgid "Octal format. Outputs the number in base 8."
msgstr "Oktalformat. Utmatning av talet i bas 8."

msgid "``x``"
msgstr "``x``"

msgid ""
"Hex format. Outputs the number in base 16, using lower-case letters for the "
"digits above 9."
msgstr ""
"Hex-format. Utmatar talet i bas 16, med små bokstäver för siffrorna över 9."

msgid "``e``"
msgstr "``e``"

msgid ""
"Exponent notation. Prints the number in scientific notation using the letter "
"'e' to indicate the exponent."
msgstr ""
"Exponentnotation. Skriver ut talet i vetenskaplig notation med bokstaven "
"\"e\" för att ange exponenten."

msgid "``g``"
msgstr "``g``"

msgid ""
"General format. This prints the number as a fixed-point number, unless the "
"number is too large, in which case it switches to 'e' exponent notation."
msgstr ""
"Allmänt format. Detta skriver ut talet som ett fastpunktstal, såvida inte "
"talet är för stort, i vilket fall det växlar till \"e\"-exponentnotation."

msgid "``n``"
msgstr "``n``"

msgid ""
"Number. This is the same as 'g' (for floats) or 'd' (for integers), except "
"that it uses the current locale setting to insert the appropriate number "
"separator characters."
msgstr ""
"Siffra. Detta är samma sak som 'g' (för flyttal) eller 'd' (för heltal), "
"förutom att den använder den aktuella lokalinställningen för att infoga "
"lämpligt antal separatortecken."

msgid "``%``"
msgstr "``%``"

msgid ""
"Percentage. Multiplies the number by 100 and displays in fixed ('f') format, "
"followed by a percent sign."
msgstr ""
"Procent. Multiplicerar talet med 100 och visas i fast ('f') format, följt av "
"ett procenttecken."

msgid ""
"Classes and types can define a :meth:`__format__` method to control how "
"they're formatted.  It receives a single argument, the format specifier::"
msgstr ""
"Klasser och typer kan definiera en :meth:`__format__`-metod för att styra "
"hur de formateras.  Den tar emot ett enda argument, formatspecificeraren::"

msgid ""
"def __format__(self, format_spec):\n"
"    if isinstance(format_spec, unicode):\n"
"        return unicode(str(self))\n"
"    else:\n"
"        return str(self)"
msgstr ""
"def __format__(self, format_spec):\n"
"    if isinstance(format_spec, unicode):\n"
"        return unicode(str(self))\n"
"    annat:\n"
"        returnera str(self)"

msgid ""
"There's also a :func:`format` builtin that will format a single value.  It "
"calls the type's :meth:`__format__` method with the provided specifier::"
msgstr ""
"Det finns också en inbyggd :func:`format` som formaterar ett enskilt värde.  "
"Den anropar typens :meth:`__format__`-metod med den angivna specifikatorn::"

msgid ""
">>> format(75.6564, '.2f')\n"
"'75.66'"
msgstr ""
">>> format(75.6564, '.2f')\n"
"'75.66'"

msgid ":ref:`formatstrings`"
msgstr ":ref:`formatsträngar`"

msgid "The reference documentation for format fields."
msgstr "Referensdokumentation för formatfält."

msgid ":pep:`3101` - Advanced String Formatting"
msgstr ":pep:`3101` - Avancerad strängformatering"

msgid "PEP written by Talin. Implemented by Eric Smith."
msgstr "PEP skriven av Talin. Implementerad av Eric Smith."

msgid "PEP 3105: ``print`` As a Function"
msgstr "PEP 3105: ``print`` som funktion"

msgid ""
"The ``print`` statement becomes the :func:`print` function in Python 3.0. "
"Making :func:`print` a function makes it possible to replace the function by "
"doing ``def print(...)`` or importing a new function from somewhere else."
msgstr ""
"Satsen ``print`` blir funktionen :func:`print` i Python 3.0. Att göra :func:"
"`print` till en funktion gör det möjligt att ersätta funktionen genom att "
"göra ``def print(...)`` eller importera en ny funktion från någon annanstans."

msgid ""
"Python 2.6 has a ``__future__`` import that removes ``print`` as language "
"syntax, letting you use the functional form instead.  For example::"
msgstr ""
"Python 2.6 har en ``__future__`` import som tar bort ``print`` som "
"språksyntax, så att du kan använda den funktionella formen istället.  Till "
"exempel::"

msgid ""
">>> from __future__ import print_function\n"
">>> print('# of entries', len(dictionary), file=sys.stderr)"
msgstr ""
">>> från __future__ import print_function\n"
">>> print('# of entries', len(dictionary), file=sys.stderr)"

msgid "The signature of the new function is::"
msgstr "Signaturen för den nya funktionen är::"

msgid "def print(*args, sep=' ', end='\\n', file=None)"
msgstr "def print(*args, sep=' ', end='\\n', file=None)"

msgid "The parameters are:"
msgstr "Parametrarna är:"

msgid "*args*: positional arguments whose values will be printed out."
msgstr "*args*: positionella argument vars värden kommer att skrivas ut."

msgid "*sep*: the separator, which will be printed between arguments."
msgstr "*sep*: separatorn, som skrivs ut mellan argumenten."

msgid ""
"*end*: the ending text, which will be printed after all of the arguments "
"have been output."
msgstr ""
"*end*: sluttexten, som skrivs ut efter att alla argument har matats ut."

msgid "*file*: the file object to which the output will be sent."
msgstr "*file*: det filobjekt som utdata ska skickas till."

msgid ":pep:`3105` - Make print a function"
msgstr ":pep:`3105` - Gör print till en funktion"

msgid "PEP written by Georg Brandl."
msgstr "PEP skriven av Georg Brandl."

msgid "PEP 3110: Exception-Handling Changes"
msgstr "PEP 3110: Ändringar i undantagshantering"

msgid ""
"One error that Python programmers occasionally make is writing the following "
"code::"
msgstr ""
"Ett fel som Python-programmerare ibland gör är att skriva följande kod::"

msgid ""
"try:\n"
"    ...\n"
"except TypeError, ValueError:  # Wrong!\n"
"    ..."
msgstr ""
"försök:\n"
"    ...\n"
"except TypeError, ValueError:  # Fel!\n"
"    ..."

msgid ""
"The author is probably trying to catch both :exc:`TypeError` and :exc:"
"`ValueError` exceptions, but this code actually does something different: it "
"will catch :exc:`TypeError` and bind the resulting exception object to the "
"local name ``\"ValueError\"``.  The :exc:`ValueError` exception will not be "
"caught at all.  The correct code specifies a tuple of exceptions::"
msgstr ""
"Författaren försöker förmodligen fånga både :exc:`TypeError`- och :exc:"
"`ValueError`-undantagen, men den här koden gör faktiskt något annat: den "
"fångar :exc:`TypeError` och binder det resulterande undantagsobjektet till "
"det lokala namnet ``\"ValueError\"``.  Undantaget :exc:`ValueError` kommer "
"inte att fångas alls.  Den korrekta koden specificerar en tupel av undantag::"

msgid ""
"try:\n"
"    ...\n"
"except (TypeError, ValueError):\n"
"    ..."
msgstr ""
"försök:\n"
"    ...\n"
"except (TypFel, VärdeFel):\n"
"    ..."

msgid ""
"This error happens because the use of the comma here is ambiguous: does it "
"indicate two different nodes in the parse tree, or a single node that's a "
"tuple?"
msgstr ""
"Det här felet uppstår eftersom användningen av kommatecken här är tvetydig: "
"anger det två olika noder i parseträdet eller en enda nod som är en tupel?"

msgid ""
"Python 3.0 makes this unambiguous by replacing the comma with the word "
"\"as\".  To catch an exception and store the exception object in the "
"variable ``exc``, you must write::"
msgstr ""
"Python 3.0 gör detta otvetydigt genom att ersätta kommatecknet med ordet "
"\"som\".  För att fånga ett undantag och lagra undantagsobjektet i variabeln "
"``exc`` måste du skriva::"

msgid ""
"try:\n"
"    ...\n"
"except TypeError as exc:\n"
"    ..."
msgstr ""
"försök:\n"
"    ...\n"
"except TypeError as exc:\n"
"    ..."

msgid ""
"Python 3.0 will only support the use of \"as\", and therefore interprets the "
"first example as catching two different exceptions.  Python 2.6 supports "
"both the comma and \"as\", so existing code will continue to work.  We "
"therefore suggest using \"as\" when writing new Python code that will only "
"be executed with 2.6."
msgstr ""
"Python 3.0 stöder endast användningen av \"as\", och tolkar därför det "
"första exemplet som att två olika undantag fångas upp.  Python 2.6 stöder "
"både kommatecken och \"as\", så befintlig kod kommer att fortsätta att "
"fungera.  Vi föreslår därför att du använder \"as\" när du skriver ny Python-"
"kod som bara kommer att köras med 2.6."

msgid ":pep:`3110` - Catching Exceptions in Python 3000"
msgstr ":pep:`3110` - Att fånga upp undantag i Python 3000"

msgid "PEP written and implemented by Collin Winter."
msgstr "PEP skrivet och genomfört av Collin Winter."

msgid "PEP 3112: Byte Literals"
msgstr "PEP 3112: Bytebokstäver"

msgid ""
"Python 3.0 adopts Unicode as the language's fundamental string type and "
"denotes 8-bit literals differently, either as ``b'string'`` or using a :"
"class:`bytes` constructor.  For future compatibility, Python 2.6 adds :class:"
"`bytes` as a synonym for the :class:`str` type, and it also supports the "
"``b''`` notation."
msgstr ""
"Python 3.0 antar Unicode som språkets grundläggande strängtyp och betecknar "
"8-bitars literaler på olika sätt, antingen som ``b'string'`` eller med hjälp "
"av en :class:`bytes`-konstruktor.  För framtida kompatibilitet lägger Python "
"2.6 till :class:`bytes` som en synonym för typen :class:`str` och stöder "
"även notationen ``b''``."

msgid ""
"The 2.6 :class:`str` differs from 3.0's :class:`bytes` type in various ways; "
"most notably, the constructor is completely different.  In 3.0, ``bytes([65, "
"66, 67])`` is 3 elements long, containing the bytes representing ``ABC``; in "
"2.6, ``bytes([65, 66, 67])`` returns the 12-byte string representing the :"
"func:`str` of the list."
msgstr ""
"Typen 2.6 :class:`str` skiljer sig från 3.0:s :class:`bytes` på flera sätt; "
"framför allt är konstruktören helt annorlunda.  I 3.0 är ``bytes([65, 66, "
"67])`` 3 element lång och innehåller de byte som representerar ``ABC``; i "
"2.6 returnerar ``bytes([65, 66, 67])`` den 12-byte långa sträng som "
"representerar listans :func:`str`."

msgid ""
"The primary use of :class:`bytes` in 2.6 will be to write tests of object "
"type such as ``isinstance(x, bytes)``.  This will help the 2to3 converter, "
"which can't tell whether 2.x code intends strings to contain either "
"characters or 8-bit bytes; you can now use either :class:`bytes` or :class:"
"`str` to represent your intention exactly, and the resulting code will also "
"be correct in Python 3.0."
msgstr ""
"Den primära användningen av :class:`bytes` i 2.6 kommer att vara att skriva "
"tester av objekttyp som ``isinstance(x, bytes)``.  Detta kommer att hjälpa "
"2to3-omvandlaren, som inte kan avgöra om 2.x-koden avser att strängar ska "
"innehålla antingen tecken eller 8-bitars bytes; du kan nu använda antingen :"
"class:`bytes` eller :class:`str` för att representera din avsikt exakt, och "
"den resulterande koden kommer också att vara korrekt i Python 3.0."

msgid ""
"There's also a ``__future__`` import that causes all string literals to "
"become Unicode strings.  This means that ``\\u`` escape sequences can be "
"used to include Unicode characters::"
msgstr ""
"Det finns också en ``__future__``-import som gör att alla stränglitteraler "
"blir Unicode-strängar.  Detta innebär att ```u`` escape-sekvenser kan "
"användas för att inkludera Unicode-tecken::"

msgid ""
"from __future__ import unicode_literals\n"
"\n"
"s = ('\\u751f\\u3080\\u304e\\u3000\\u751f\\u3054'\n"
"     '\\u3081\\u3000\\u751f\\u305f\\u307e\\u3054')\n"
"\n"
"print len(s)               # 12 Unicode characters"
msgstr ""
"from __future__ import unicode_literals\n"
"\n"
"s = ('\\u751f\\u3080\\u304e\\u3000\\u751f\\u3054'\n"
"     '\\u3081\\u3000\\u751f\\u305f\\u307e\\u3054')\n"
"\n"
"print len(s)               # 12 Unicode characters"

msgid ""
"At the C level, Python 3.0 will rename the existing 8-bit string type, "
"called :c:type:`!PyStringObject` in Python 2.x, to :c:type:`PyBytesObject`.  "
"Python 2.6 uses ``#define`` to support using the names :c:func:"
"`PyBytesObject`, :c:func:`PyBytes_Check`, :c:func:"
"`PyBytes_FromStringAndSize`, and all the other functions and macros used "
"with strings."
msgstr ""
"På C-nivå kommer Python 3.0 att byta namn på den befintliga 8-bitars "
"strängtypen, kallad :c:type:`!PyStringObject` i Python 2.x, till :c:type:"
"`PyBytesObject`.  Python 2.6 använder ``#define`` för att stödja användning "
"av namnen :c:func:`PyBytesObject`, :c:func:`PyBytes_Check`, :c:func:"
"`PyBytes_FromStringAndSize`, och alla andra funktioner och makron som "
"används med strängar."

msgid ""
"Instances of the :class:`bytes` type are immutable just as strings are.  A "
"new :class:`bytearray` type stores a mutable sequence of bytes::"
msgstr ""
"Instanser av typen :class:`bytes` är oföränderliga precis som strängar är.  "
"En ny typ av :class:`bytearray` lagrar en föränderlig sekvens av bytes::"

msgid ""
">>> bytearray([65, 66, 67])\n"
"bytearray(b'ABC')\n"
">>> b = bytearray(u'\\u21ef\\u3244', 'utf-8')\n"
">>> b\n"
"bytearray(b'\\xe2\\x87\\xaf\\xe3\\x89\\x84')\n"
">>> b[0] = '\\xe3'\n"
">>> b\n"
"bytearray(b'\\xe3\\x87\\xaf\\xe3\\x89\\x84')\n"
">>> unicode(str(b), 'utf-8')\n"
"u'\\u31ef \\u3244'"
msgstr ""
">>> bytearray([65, 66, 67])\n"
"bytearray(b'ABC')\n"
">>> b = bytearray(u'\\u21ef\\u3244', 'utf-8')\n"
">>> b\n"
"bytearray(b'\\xe2\\x87\\xaf\\xe3\\x89\\x84')\n"
">>> b[0] = '\\xe3'\n"
">>> b\n"
"bytearray(b'\\xe3\\x87\\xaf\\xe3\\x89\\x84')\n"
">>> unicode(str(b), 'utf-8')\n"
"u'\\u31ef \\u3244'"

msgid ""
"Byte arrays support most of the methods of string types, such as :meth:"
"`startswith`/:meth:`endswith`, :meth:`find`/:meth:`rfind`, and some of the "
"methods of lists, such as :meth:`append`, :meth:`pop`,  and :meth:`reverse`."
msgstr ""
"Bytearrayer stöder de flesta av metoderna för strängtyper, t.ex. :meth:"
"`startswith`/:meth:`endswith`, :meth:`find`/:meth:`rfind`, och några av "
"metoderna för listor, t.ex. :meth:`append`, :meth:`pop` och :meth:`reverse`."

msgid ""
">>> b = bytearray('ABC')\n"
">>> b.append('d')\n"
">>> b.append(ord('e'))\n"
">>> b\n"
"bytearray(b'ABCde')"
msgstr ""
">>> b = bytearray('ABC')\n"
">>> b.append('d')\n"
">>> b.append(ord('e'))\n"
">>> b\n"
"bytearray(b'ABCde')"

msgid ""
"There's also a corresponding C API, with :c:func:`PyByteArray_FromObject`, :"
"c:func:`PyByteArray_FromStringAndSize`, and various other functions."
msgstr ""
"Det finns också ett motsvarande C API, med :c:func:"
"`PyByteArray_FromObject`, :c:func:`PyByteArray_FromStringAndSize`, och "
"diverse andra funktioner."

msgid ":pep:`3112` - Bytes literals in Python 3000"
msgstr ":pep:`3112` - Byteslitteraler i Python 3000"

msgid "PEP written by Jason Orendorff; backported to 2.6 by Christian Heimes."
msgstr ""
"PEP skriven av Jason Orendorff; bakåtporterad till 2.6 av Christian Heimes."

msgid "PEP 3116: New I/O Library"
msgstr "PEP 3116: Nytt I/O-bibliotek"

msgid ""
"Python's built-in file objects support a number of methods, but file-like "
"objects don't necessarily support all of them.  Objects that imitate files "
"usually support :meth:`read` and :meth:`write`, but they may not support :"
"meth:`readline`, for example.  Python 3.0 introduces a layered I/O library "
"in the :mod:`io` module that separates buffering and text-handling features "
"from the fundamental read and write operations."
msgstr ""
"Pythons inbyggda filobjekt har stöd för ett antal metoder, men filliknande "
"objekt har inte nödvändigtvis stöd för alla.  Objekt som imiterar filer "
"stöder vanligtvis :meth:`read` och :meth:`write`, men de kanske inte stöder :"
"meth:`readline`, till exempel.  Python 3.0 introducerar ett skiktat I/O-"
"bibliotek i modulen :mod:`io` som separerar buffrings- och "
"texthanteringsfunktioner från de grundläggande läs- och skrivoperationerna."

msgid ""
"There are three levels of abstract base classes provided by the :mod:`io` "
"module:"
msgstr ""
"Det finns tre nivåer av abstrakta basklasser som tillhandahålls av modulen :"
"mod:`io`:"

msgid ""
":class:`RawIOBase` defines raw I/O operations: :meth:`read`, :meth:"
"`readinto`, :meth:`write`, :meth:`seek`, :meth:`tell`, :meth:`truncate`, "
"and :meth:`close`. Most of the methods of this class will often map to a "
"single system call. There are also :meth:`readable`, :meth:`writable`, and :"
"meth:`seekable` methods for determining what operations a given object will "
"allow."
msgstr ""
":class:`RawIOBase` definierar råa I/O-operationer: :meth:`read`, :meth:"
"`readinto`, :meth:`write`, :meth:`seek`, :meth:`tell`, :meth:`truncate` och :"
"meth:`close`. De flesta metoderna i denna klass kommer ofta att motsvara ett "
"enda systemanrop. Det finns också metoderna :meth:`readable`, :meth:"
"`writable` och :meth:`seekable` för att avgöra vilka operationer ett visst "
"objekt tillåter."

msgid ""
"Python 3.0 has concrete implementations of this class for files and sockets, "
"but Python 2.6 hasn't restructured its file and socket objects in this way."
msgstr ""
"Python 3.0 har konkreta implementeringar av den här klassen för filer och "
"sockets, men Python 2.6 har inte omstrukturerat sina fil- och socketobjekt "
"på det här sättet."

msgid ""
":class:`BufferedIOBase` is an abstract base class that buffers data in "
"memory to reduce the number of system calls used, making I/O processing more "
"efficient. It supports all of the methods of :class:`RawIOBase`, and adds a :"
"attr:`raw` attribute holding the underlying raw object."
msgstr ""
":class:`BufferedIOBase` är en abstrakt basklass som buffrar data i minnet "
"för att minska antalet systemanrop som används, vilket gör I/O-bearbetning "
"mer effektiv. Den stöder alla metoder i :class:`RawIOBase` och lägger till "
"ett :attr:`raw`-attribut som innehåller det underliggande råobjektet."

msgid ""
"There are five concrete classes implementing this ABC. :class:"
"`BufferedWriter` and :class:`BufferedReader` are for objects that support "
"write-only or read-only usage that have a :meth:`seek` method for random "
"access.  :class:`BufferedRandom` objects support read and write access upon "
"the same underlying stream, and :class:`BufferedRWPair` is for objects such "
"as TTYs that have both read and write operations acting upon unconnected "
"streams of data. The :class:`BytesIO` class supports reading, writing, and "
"seeking over an in-memory buffer."
msgstr ""
"Det finns fem konkreta klasser som implementerar denna ABC. :class:"
"`BufferedWriter` och :class:`BufferedReader` är för objekt som stöder "
"skrivskyddad eller skrivskyddad användning som har en :meth:`seek`-metod för "
"slumpmässig åtkomst. :class:`BufferedRandom`-objekt stöder läs- och "
"skrivåtkomst på samma underliggande ström, och :class:`BufferedRWPair` är "
"för objekt som TTYs som har både läs- och skrivoperationer som verkar på "
"oanslutna dataströmmar. Klassen :class:`BytesIO` stöder läsning, skrivning "
"och sökning över en buffert i minnet."

msgid ""
":class:`TextIOBase`: Provides functions for reading and writing strings "
"(remember, strings will be Unicode in Python 3.0), and supporting :term:"
"`universal newlines`.  :class:`TextIOBase` defines the :meth:`readline` "
"method and supports iteration upon objects."
msgstr ""
":class:`TextIOBase`: Innehåller funktioner för att läsa och skriva strängar "
"(kom ihåg att strängar kommer att vara Unicode i Python 3.0), och stödjer :"
"term:`universal newlines`. :class:`TextIOBase` definierar metoden :meth:"
"`readline` och stödjer iteration på objekt."

msgid ""
"There are two concrete implementations.  :class:`TextIOWrapper` wraps a "
"buffered I/O object, supporting all of the methods for text I/O and adding "
"a :attr:`buffer` attribute for access to the underlying object.  :class:"
"`StringIO` simply buffers everything in memory without ever writing anything "
"to disk."
msgstr ""
"Det finns två konkreta implementeringar. :class:`TextIOWrapper` omsluter ett "
"buffrat I/O-objekt, stöder alla metoder för text-I/O och lägger till ett :"
"attr:`buffer`-attribut för åtkomst till det underliggande objektet. :class:"
"`StringIO` buffrar helt enkelt allt i minnet utan att någonsin skriva något "
"till disk."

msgid ""
"(In Python 2.6, :class:`io.StringIO` is implemented in pure Python, so it's "
"pretty slow.   You should therefore stick with the existing :mod:`!StringIO` "
"module or :mod:`!cStringIO` for now.  At some point Python 3.0's :mod:`io` "
"module will be rewritten into C for speed, and perhaps the C implementation "
"will be  backported to the 2.x releases.)"
msgstr ""
"(I Python 2.6 är :class:`io.StringIO` implementerad i ren Python, så den är "
"ganska långsam.   Du bör därför hålla dig till den befintliga :mod:`!"
"StringIO`-modulen eller :mod:`!cStringIO` för tillfället.  Vid någon "
"tidpunkt kommer Python 3.0:s :mod:`io`-modul att skrivas om till C för att "
"bli snabbare, och kanske kommer C-implementeringen att backporteras till 2.x-"
"utgåvorna)"

msgid ""
"In Python 2.6, the underlying implementations haven't been restructured to "
"build on top of the :mod:`io` module's classes.  The module is being "
"provided to make it easier to write code that's forward-compatible with 3.0, "
"and to save developers the effort of writing their own implementations of "
"buffering and text I/O."
msgstr ""
"I Python 2.6 har de underliggande implementationerna inte omstrukturerats "
"för att bygga vidare på :mod:`io`-modulens klasser.  Modulen tillhandahålls "
"för att göra det enklare att skriva kod som är framåtkompatibel med 3.0 och "
"för att bespara utvecklare ansträngningen att skriva sina egna "
"implementationer av buffring och text-I/O."

msgid ":pep:`3116` - New I/O"
msgstr ":pep:`3116` - Ny I/O"

msgid ""
"PEP written by Daniel Stutzbach, Mike Verdone, and Guido van Rossum. Code by "
"Guido van Rossum, Georg Brandl, Walter Doerwald, Jeremy Hylton, Martin von "
"Löwis, Tony Lownds, and others."
msgstr ""
"PEP skrivet av Daniel Stutzbach, Mike Verdone och Guido van Rossum. Kod av "
"Guido van Rossum, Georg Brandl, Walter Doerwald, Jeremy Hylton, Martin von "
"Löwis, Tony Lownds och andra."

msgid "PEP 3118: Revised Buffer Protocol"
msgstr "PEP 3118: Reviderat buffertprotokoll"

msgid ""
"The buffer protocol is a C-level API that lets Python types exchange "
"pointers into their internal representations.  A memory-mapped file can be "
"viewed as a buffer of characters, for example, and this lets another module "
"such as :mod:`re` treat memory-mapped files as a string of characters to be "
"searched."
msgstr ""
"Buffertprotokollet är ett API på C-nivå som låter Python-typer utbyta pekare "
"till sina interna representationer.  En minnesmappad fil kan till exempel "
"ses som en buffert med tecken, och detta gör att en annan modul som :mod:"
"`re` kan behandla minnesmappade filer som en sträng med tecken som ska sökas."

msgid ""
"The primary users of the buffer protocol are numeric-processing packages "
"such as NumPy, which expose the internal representation of arrays so that "
"callers can write data directly into an array instead of going through a "
"slower API.  This PEP updates the buffer protocol in light of experience "
"from NumPy development, adding a number of new features such as indicating "
"the shape of an array or locking a memory region."
msgstr ""
"De primära användarna av buffertprotokollet är numeriska bearbetningspaket "
"som NumPy, som exponerar den interna representationen av matriser så att "
"anropare kan skriva data direkt till en matris istället för att gå igenom "
"ett långsammare API.  Denna PEP uppdaterar buffertprotokollet mot bakgrund "
"av erfarenheterna från NumPy-utvecklingen och lägger till ett antal nya "
"funktioner som att ange formen på en array eller låsa en minnesregion."

msgid ""
"The most important new C API function is ``PyObject_GetBuffer(PyObject *obj, "
"Py_buffer *view, int flags)``, which takes an object and a set of flags, and "
"fills in the ``Py_buffer`` structure with information about the object's "
"memory representation.  Objects can use this operation to lock memory in "
"place while an external caller could be modifying the contents, so there's a "
"corresponding ``PyBuffer_Release(Py_buffer *view)`` to indicate that the "
"external caller is done."
msgstr ""
"Den viktigaste nya C API-funktionen är ``PyObject_GetBuffer(PyObject *obj, "
"Py_buffer *view, int flags)``, som tar ett objekt och en uppsättning flaggor "
"och fyller i ``Py_buffer``-strukturen med information om objektets "
"minnesrepresentation.  Objekt kan använda denna operation för att låsa "
"minnet på plats medan en extern anropare kan ändra innehållet, så det finns "
"en motsvarande ``PyBuffer_Release(Py_buffer *view)`` för att indikera att "
"den externa anroparen är klar."

msgid ""
"The *flags* argument to :c:func:`PyObject_GetBuffer` specifies constraints "
"upon the memory returned.  Some examples are:"
msgstr ""
"Argumentet *flags* till :c:func:`PyObject_GetBuffer` anger begränsningar för "
"det minne som returneras.  Några exempel är:"

msgid ":c:macro:`PyBUF_WRITABLE` indicates that the memory must be writable."
msgstr ":c:macro:`PyBUF_WRITABLE` anger att minnet måste vara skrivbart."

msgid ""
":c:macro:`PyBUF_LOCK` requests a read-only or exclusive lock on the memory."
msgstr ""
":c:macro:`PyBUF_LOCK` begär ett skrivskyddat eller exklusivt lås på minnet."

msgid ""
":c:macro:`PyBUF_C_CONTIGUOUS` and :c:macro:`PyBUF_F_CONTIGUOUS` requests a C-"
"contiguous (last dimension varies the fastest) or Fortran-contiguous (first "
"dimension varies the fastest) array layout."
msgstr ""
":c:macro:`PyBUF_C_CONTIGUOUS` och :c:macro:`PyBUF_F_CONTIGUOUS` begär en C-"
"sluten (sista dimensionen varierar snabbast) eller Fortran-sluten (första "
"dimensionen varierar snabbast) array-layout."

msgid ""
"Two new argument codes for :c:func:`PyArg_ParseTuple`, ``s*`` and ``z*``, "
"return locked buffer objects for a parameter."
msgstr ""
"Två nya argumentkoder för :c:func:`PyArg_ParseTuple`, ``s*`` och ``z*``, "
"returnerar låsta buffertobjekt för en parameter."

msgid ":pep:`3118` - Revising the buffer protocol"
msgstr ":pep:`3118` - Revidering av buffertprotokollet"

msgid ""
"PEP written by Travis Oliphant and Carl Banks; implemented by Travis "
"Oliphant."
msgstr ""
"PEP skriven av Travis Oliphant och Carl Banks; implementerad av Travis "
"Oliphant."

msgid "PEP 3119: Abstract Base Classes"
msgstr "PEP 3119: Abstrakta basklasser"

msgid ""
"Some object-oriented languages such as Java support interfaces, declaring "
"that a class has a given set of methods or supports a given access "
"protocol.  Abstract Base Classes (or ABCs) are an equivalent feature for "
"Python. The ABC support consists of an :mod:`abc` module containing a "
"metaclass called :class:`ABCMeta`, special handling of this metaclass by "
"the :func:`isinstance` and :func:`issubclass` builtins, and a collection of "
"basic ABCs that the Python developers think will be widely useful.  Future "
"versions of Python will probably add more ABCs."
msgstr ""
"Vissa objektorienterade språk som Java stöder gränssnitt, som deklarerar att "
"en klass har en viss uppsättning metoder eller stöder ett visst "
"åtkomstprotokoll.  Abstract Base Classes (eller ABC) är en motsvarande "
"funktion för Python. ABC-stödet består av en :mod:`abc`-modul som innehåller "
"en metaklass som heter :class:`ABCMeta`, specialhantering av denna metaklass "
"av :func:`isinstance` och :func:`issubclass` builtins, och en samling "
"grundläggande ABC som Python-utvecklarna tror kommer att vara allmänt "
"användbara.  Framtida versioner av Python kommer förmodligen att lägga till "
"fler ABC."

msgid ""
"Let's say you have a particular class and wish to know whether it supports "
"dictionary-style access.  The phrase \"dictionary-style\" is vague, however. "
"It probably means that accessing items with ``obj[1]`` works. Does it imply "
"that setting items with ``obj[2] = value`` works? Or that the object will "
"have :meth:`keys`, :meth:`values`, and :meth:`items` methods?  What about "
"the iterative variants  such as :meth:`iterkeys`?  :meth:`copy` and :meth:"
"`update`?  Iterating over the object with :func:`iter`?"
msgstr ""
"Låt oss säga att du har en viss klass och vill veta om den stöder åtkomst i "
"ordboksstil.  Uttrycket \"dictionary-style\" är dock vagt. Det betyder "
"förmodligen att åtkomst till objekt med ``obj[1]`` fungerar. Innebär det att "
"det fungerar att ställa in objekt med ``obj[2] = value``? Eller att objektet "
"kommer att ha metoderna :meth:`keys`, :meth:`values` och :meth:`items`?  Hur "
"är det med de iterativa varianterna som :meth:`iterkeys`? :meth:`copy` och :"
"meth:`update`?  Iteration över objektet med :func:`iter`?"

msgid ""
"The Python 2.6 :mod:`collections` module includes a number of different ABCs "
"that represent these distinctions.  :class:`Iterable` indicates that a class "
"defines :meth:`__iter__`, and :class:`Container` means the class defines a :"
"meth:`__contains__` method and therefore supports ``x in y`` expressions.  "
"The basic dictionary interface of getting items, setting items, and :meth:"
"`keys`, :meth:`values`, and :meth:`items`, is defined by the :class:"
"`MutableMapping` ABC."
msgstr ""
"Python 2.6 :mod:`collections`-modulen innehåller ett antal olika ABC som "
"representerar dessa distinktioner. :class:`Iterable` indikerar att en klass "
"definierar :meth:`__iter__`, och :class:`Container` betyder att klassen "
"definierar en :meth:`__contains__`-metod och därför stöder ``x i y``-"
"uttryck.  Det grundläggande ordboksgränssnittet för att hämta objekt, ställa "
"in objekt och :meth:`keys`, :meth:`values` och :meth:`items` definieras av :"
"class:`MutableMapping` ABC."

msgid ""
"You can derive your own classes from a particular ABC to indicate they "
"support that ABC's interface::"
msgstr ""
"Du kan härleda dina egna klasser från en viss ABC för att ange att de stöder "
"den ABC:s gränssnitt::"

msgid ""
"import collections\n"
"\n"
"class Storage(collections.MutableMapping):\n"
"    ..."
msgstr ""
"import collections\n"
"\n"
"class Storage(collections.MutableMapping):\n"
"    ..."

msgid ""
"Alternatively, you could write the class without deriving from the desired "
"ABC and instead register the class by calling the ABC's :meth:`register` "
"method::"
msgstr ""
"Alternativt kan man skriva klassen utan att härleda från önskad ABC och "
"istället registrera klassen genom att anropa ABC:s :meth:`register`-metod::"

msgid ""
"import collections\n"
"\n"
"class Storage:\n"
"    ...\n"
"\n"
"collections.MutableMapping.register(Storage)"
msgstr ""
"import collections\n"
"\n"
"class Storage:\n"
"    ...\n"
"\n"
"collections.MutableMapping.register(Storage)"

msgid ""
"For classes that you write, deriving from the ABC is probably clearer. The :"
"meth:`register`  method is useful when you've written a new ABC that can "
"describe an existing type or class, or if you want to declare that some "
"third-party class implements an ABC. For example, if you defined a :class:"
"`PrintableType` ABC, it's legal to do::"
msgstr ""
"För klasser som du skriver är det förmodligen tydligare att härleda från "
"ABC. Metoden :meth:`register` är användbar när du har skrivit en ny ABC som "
"kan beskriva en befintlig typ eller klass, eller om du vill deklarera att en "
"klass från tredje part implementerar en ABC. Om du till exempel har "
"definierat en :class:`PrintableType` ABC, är det lagligt att göra::"

msgid ""
"# Register Python's types\n"
"PrintableType.register(int)\n"
"PrintableType.register(float)\n"
"PrintableType.register(str)"
msgstr ""
"# Registrera Pythons typer\n"
"PrintableType.register(int)\n"
"PrintableType.register(float)\n"
"PrintableType.register(str)"

msgid ""
"Classes should obey the semantics specified by an ABC, but Python can't "
"check this; it's up to the class author to understand the ABC's requirements "
"and to implement the code accordingly."
msgstr ""
"Klasser bör följa den semantik som anges av en ABC, men Python kan inte "
"kontrollera detta; det är upp till klassens författare att förstå ABC:s krav "
"och att implementera koden i enlighet därmed."

msgid ""
"To check whether an object supports a particular interface, you can now "
"write::"
msgstr ""
"För att kontrollera om ett objekt stöder ett visst gränssnitt kan du nu "
"skriva::"

msgid ""
"def func(d):\n"
"    if not isinstance(d, collections.MutableMapping):\n"
"        raise ValueError(\"Mapping object expected, not %r\" % d)"
msgstr ""
"def func(d):\n"
"    if not isinstance(d, collections.MutableMapping):\n"
"        raise ValueError(\"Mapping-objekt förväntat, inte %r\" % d)"

msgid ""
"Don't feel that you must now begin writing lots of checks as in the above "
"example.  Python has a strong tradition of duck-typing, where explicit type-"
"checking is never done and code simply calls methods on an object, trusting "
"that those methods will be there and raising an exception if they aren't.  "
"Be judicious in checking for ABCs and only do it where it's absolutely "
"necessary."
msgstr ""
"Känn inte att du nu måste börja skriva massor av kontroller som i exemplet "
"ovan.  Python har en stark tradition av duck-typing, där explicit "
"typkontroll aldrig görs och koden helt enkelt anropar metoder på ett objekt, "
"litar på att dessa metoder kommer att finnas där och gör ett undantag om de "
"inte gör det.  Var försiktig med att kontrollera ABC och gör det bara där "
"det är absolut nödvändigt."

msgid ""
"You can write your own ABCs by using ``abc.ABCMeta`` as the metaclass in a "
"class definition::"
msgstr ""
"Du kan skriva din egen ABC genom att använda ``abc.ABCMeta`` som metaklass i "
"en klassdefinition::"

msgid ""
"from abc import ABCMeta, abstractmethod\n"
"\n"
"class Drawable():\n"
"    __metaclass__ = ABCMeta\n"
"\n"
"    @abstractmethod\n"
"    def draw(self, x, y, scale=1.0):\n"
"        pass\n"
"\n"
"    def draw_doubled(self, x, y):\n"
"        self.draw(x, y, scale=2.0)\n"
"\n"
"\n"
"class Square(Drawable):\n"
"    def draw(self, x, y, scale):\n"
"        ..."
msgstr ""
"from abc import ABCMeta, abstractmethod\n"
"\n"
"class Drawable():\n"
"    __metaclass__ = ABCMeta\n"
"\n"
"    @abstractmethod\n"
"    def draw(self, x, y, scale=1.0):\n"
"        pass\n"
"\n"
"    def draw_doubled(self, x, y):\n"
"        self.draw(x, y, scale=2.0)\n"
"\n"
"\n"
"class Square(Drawable):\n"
"    def draw(self, x, y, scale):\n"
"        ..."

msgid ""
"In the :class:`Drawable` ABC above, the :meth:`draw_doubled` method renders "
"the object at twice its size and can be implemented in terms of other "
"methods described in :class:`Drawable`.  Classes implementing this ABC "
"therefore don't need to provide their own implementation of :meth:"
"`draw_doubled`, though they can do so.  An implementation of :meth:`draw` is "
"necessary, though; the ABC can't provide a useful generic implementation."
msgstr ""
"I :class:`Drawable` ABC ovan renderar :meth:`draw_doubled` metoden objektet "
"i dubbel storlek och kan implementeras i termer av andra metoder som "
"beskrivs i :class:`Drawable`.  Klasser som implementerar denna ABC behöver "
"därför inte tillhandahålla sin egen implementation av :meth:`draw_doubled`, "
"även om de kan göra det.  En implementation av :meth:`draw` är dock "
"nödvändig; ABC kan inte tillhandahålla en användbar generisk implementation."

msgid ""
"You can apply the ``@abstractmethod`` decorator to methods such as :meth:"
"`draw` that must be implemented; Python will then raise an exception for "
"classes that don't define the method. Note that the exception is only raised "
"when you actually try to create an instance of a subclass lacking the "
"method::"
msgstr ""
"Du kan använda dekoratorn ``@abstractmethod`` på metoder som :meth:`draw` "
"som måste implementeras; Python kommer då att göra ett undantag för klasser "
"som inte definierar metoden. Observera att undantaget bara uppstår när du "
"faktiskt försöker skapa en instans av en underklass som saknar metoden::"

msgid ""
">>> class Circle(Drawable):\n"
"...     pass\n"
"...\n"
">>> c = Circle()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: Can't instantiate abstract class Circle with abstract methods "
"draw\n"
">>>"
msgstr ""
"&gt;&gt;&gt; klass Cirkel(Ritbar):\n"
"... pass\n"
"...\n"
"&gt;&gt;&gt; c = Cirkel()\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i <module>\n"
"TypeError (Typfel): Kan inte instansiera den abstrakta klassen Circle med "
"abstrakta metoder draw\n"
"&gt;&gt;&gt"

msgid ""
"Abstract data attributes can be declared using the ``@abstractproperty`` "
"decorator::"
msgstr ""
"Abstrakta dataattribut kan deklareras med hjälp av dekoratorn "
"``@abstractproperty``::"

msgid ""
"from abc import abstractproperty\n"
"...\n"
"\n"
"@abstractproperty\n"
"def readonly(self):\n"
"   return self._x"
msgstr ""
"från abc import abstractproperty\n"
"...\n"
"\n"
"@abstraktegenskap\n"
"def readonly(self):\n"
"   returnera self._x"

msgid "Subclasses must then define a :meth:`readonly` property."
msgstr "Subklasser måste sedan definiera en :meth:`readonly`-egenskap."

msgid ":pep:`3119` - Introducing Abstract Base Classes"
msgstr ":pep:`3119` - Introduktion av abstrakta basklasser"

msgid ""
"PEP written by Guido van Rossum and Talin. Implemented by Guido van Rossum. "
"Backported to 2.6 by Benjamin Aranguren, with Alex Martelli."
msgstr ""
"PEP skriven av Guido van Rossum och Talin. Implementerad av Guido van "
"Rossum. Backporterad till 2.6 av Benjamin Aranguren, med Alex Martelli."

msgid "PEP 3127: Integer Literal Support and Syntax"
msgstr "PEP 3127: Stöd för heltalsbokstäver och syntax"

msgid ""
"Python 3.0 changes the syntax for octal (base-8) integer literals, prefixing "
"them with \"0o\" or \"0O\" instead of a leading zero, and adds support for "
"binary (base-2) integer literals, signalled by a \"0b\" or \"0B\" prefix."
msgstr ""
"Python 3.0 ändrar syntaxen för oktala (bas-8) heltalslitteraler, som "
"prefixas med \"0o\" eller \"0O\" istället för en ledande nolla, och lägger "
"till stöd för binära (bas-2) heltalslitteraler, som signaleras med prefixet "
"\"0b\" eller \"0B\"."

msgid ""
"Python 2.6 doesn't drop support for a leading 0 signalling an octal number, "
"but it does add support for \"0o\" and \"0b\"::"
msgstr ""
"Python 2.6 släpper inte stödet för ett ledande 0 som signalerar ett oktalt "
"tal, men det lägger till stöd för \"0o\" och \"0b\"::"

msgid ""
">>> 0o21, 2*8 + 1\n"
"(17, 17)\n"
">>> 0b101111\n"
"47"
msgstr ""
">>> 0o21, 2*8 + 1\n"
"(17, 17)\n"
">>> 0b101111\n"
"47"

msgid ""
"The :func:`oct` builtin still returns numbers prefixed with a leading zero, "
"and a new :func:`bin` builtin returns the binary representation for a "
"number::"
msgstr ""
"Inbyggnadsrutinen :func:`oct` returnerar fortfarande tal med en inledande "
"nolla och den nya inbyggnadsrutinen :func:`bin` returnerar den binära "
"representationen för ett tal::"

msgid ""
">>> oct(42)\n"
"'052'\n"
">>> future_builtins.oct(42)\n"
"'0o52'\n"
">>> bin(173)\n"
"'0b10101101'"
msgstr ""
">>> okt(42)\n"
"'052'\n"
">>> future_builtins.oct(42)\n"
"'0o52'\n"
">>> bin(173)\n"
"'0b10101101'"

msgid ""
"The :func:`int` and :func:`long` builtins will now accept the \"0o\" and "
"\"0b\" prefixes when base-8 or base-2 are requested, or when the *base* "
"argument is zero (signalling that the base used should be determined from "
"the string)::"
msgstr ""
"Inbyggnaderna :func:`int` och :func:`long` accepterar nu prefixen \"0o\" och "
"\"0b\" när bas-8 eller bas-2 begärs, eller när argumentet *base* är noll "
"(vilket signalerar att den bas som används ska bestämmas från strängen)::"

msgid ""
">>> int ('0o52', 0)\n"
"42\n"
">>> int('1101', 2)\n"
"13\n"
">>> int('0b1101', 2)\n"
"13\n"
">>> int('0b1101', 0)\n"
"13"
msgstr ""
">>> int ('0o52', 0)\n"
"42\n"
">>> int('1101', 2)\n"
"13\n"
">>> int('0b1101', 2)\n"
"13\n"
">>> int('0b1101', 0)\n"
"13"

msgid ":pep:`3127` - Integer Literal Support and Syntax"
msgstr ":pep:`3127` - Stöd för heltalsbokstäver och syntax"

msgid "PEP written by Patrick Maupin; backported to 2.6 by Eric Smith."
msgstr "PEP skriven av Patrick Maupin; bakåtporterad till 2.6 av Eric Smith."

msgid "PEP 3129: Class Decorators"
msgstr "PEP 3129: Klassdekoratörer"

msgid ""
"Decorators have been extended from functions to classes.  It's now legal to "
"write::"
msgstr ""
"Decorators har utökats från funktioner till klasser.  Det är nu lagligt att "
"skriva::"

msgid ""
"@foo\n"
"@bar\n"
"class A:\n"
"  pass"
msgstr ""
"@foo\n"
"@bar\n"
"klass A:\n"
"  pass"

msgid "This is equivalent to::"
msgstr "Detta är likvärdigt med::"

msgid ""
"class A:\n"
"  pass\n"
"\n"
"A = foo(bar(A))"
msgstr ""
"klass A:\n"
"  pass\n"
"\n"
"A = foo(bar(A))"

msgid ":pep:`3129` - Class Decorators"
msgstr ":pep:`3129` - Klassdekoratorer"

msgid "PEP written by Collin Winter."
msgstr "PEP skriven av Collin Winter."

msgid "PEP 3141: A Type Hierarchy for Numbers"
msgstr "PEP 3141: En typhierarki för siffror"

msgid ""
"Python 3.0 adds several abstract base classes for numeric types inspired by "
"Scheme's numeric tower.  These classes were backported to 2.6 as the :mod:"
"`numbers` module."
msgstr ""
"Python 3.0 lägger till flera abstrakta basklasser för numeriska typer "
"inspirerade av Scheme's numeriska torn.  Dessa klasser bakåtporterades till "
"2.6 som modulen :mod:`numbers`."

msgid ""
"The most general ABC is :class:`Number`.  It defines no operations at all, "
"and only exists to allow checking if an object is a number by doing "
"``isinstance(obj, Number)``."
msgstr ""
"Den mest generella ABC:en är :class:`Number`.  Den definierar inga "
"operationer alls och existerar bara för att man ska kunna kontrollera om ett "
"objekt är ett tal genom att göra ``isinstance(obj, Number)``."

msgid ""
":class:`Complex` is a subclass of :class:`Number`.  Complex numbers can "
"undergo the basic operations of addition, subtraction, multiplication, "
"division, and exponentiation, and you can retrieve the real and imaginary "
"parts and obtain a number's conjugate.  Python's built-in complex type is an "
"implementation of :class:`Complex`."
msgstr ""
":class:`Complex` är en underklass till :class:`Number`.  Komplexa tal kan "
"genomgå de grundläggande operationerna addition, subtraktion, "
"multiplikation, division och exponentiering, och du kan hämta de reella och "
"imaginära delarna och få ett tals konjugat.  Pythons inbyggda komplexa typ "
"är en implementation av :class:`Complex`."

msgid ""
":class:`Real` further derives from :class:`Complex`, and adds operations "
"that only work on real numbers: :func:`floor`, :func:`trunc`, rounding, "
"taking the remainder mod N, floor division, and comparisons."
msgstr ""
":class:`Real` härstammar vidare från :class:`Complex` och lägger till "
"operationer som bara fungerar på reella tal: :func:`floor`, :func:`trunc`, "
"avrundning, ta resten mod N, division med golv och jämförelser."

msgid ""
":class:`Rational` numbers derive from :class:`Real`, have :attr:`numerator` "
"and :attr:`denominator` properties, and can be converted to floats.  Python "
"2.6 adds a simple rational-number class, :class:`Fraction`, in the :mod:"
"`fractions` module.  (It's called :class:`Fraction` instead of :class:"
"`Rational` to avoid a name clash with :class:`numbers.Rational`.)"
msgstr ""
":class:`Rational` numbers härstammar från :class:`Real`, har egenskaperna :"
"attr:`numerator` och :attr:`denominator` och kan konverteras till floats.  "
"Python 2.6 lägger till en enkel klass för rationella tal, :class:`Fraction`, "
"i modulen :mod:`fractions`.  (Den kallas :class:`Fraction` istället för :"
"class:`Rational` för att undvika en namnkrock med :class:`numbers.Rational`)"

msgid ""
":class:`Integral` numbers derive from :class:`Rational`, and can be shifted "
"left and right with ``<<`` and ``>>``, combined using bitwise operations "
"such as ``&`` and ``|``, and can be used as array indexes and slice "
"boundaries."
msgstr ""
":class:`Integral` numbers härstammar från :class:`Rational`, och kan flyttas "
"åt vänster och höger med ``<<`` och ``>>``, kombineras med bitvisa "
"operationer som ``&`` och ``|``, och kan användas som array-index och slice-"
"gränser."

msgid ""
"In Python 3.0, the PEP slightly redefines the existing builtins :func:"
"`round`, :func:`math.floor`, :func:`math.ceil`, and adds a new one, :func:"
"`math.trunc`, that's been backported to Python 2.6. :func:`math.trunc` "
"rounds toward zero, returning the closest :class:`Integral` that's between "
"the function's argument and zero."
msgstr ""
"I Python 3.0 omdefinierar PEP något de befintliga builtins :func:`round`, :"
"func:`math.floor`, :func:`math.ceil`, och lägger till en ny, :func:`math."
"trunc`, som har backporterats till Python 2.6. :func:`math.trunc` rundar mot "
"noll och returnerar den närmaste :class:`Integral` som ligger mellan "
"funktionens argument och noll."

msgid ":pep:`3141` - A Type Hierarchy for Numbers"
msgstr ":pep:`3141` - En typhierarki för siffror"

msgid "PEP written by Jeffrey Yasskin."
msgstr "PEP skriven av Jeffrey Yasskin."

msgid ""
"`Scheme's numerical tower <https://www.gnu.org/software/guile/manual/"
"html_node/Numerical-Tower.html#Numerical-Tower>`__, from the Guile manual."
msgstr ""
"`Schemets numeriska torn <https://www.gnu.org/software/guile/manual/"
"html_node/Numerical-Tower.html#Numerical-Tower>`__, från Guile-manualen."

msgid ""
"`Scheme's number datatypes <https://conservatory.scheme.org/schemers/"
"Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_sec_6.2>`__ from the R5RS "
"Scheme specification."
msgstr ""
"`Schemes datatyper för tal <https://conservatory.scheme.org/schemers/"
"Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_sec_6.2>`__ från R5RS Scheme-"
"specifikationen."

msgid "The :mod:`fractions` Module"
msgstr "Modulen :mod:`fraktioner"

msgid ""
"To fill out the hierarchy of numeric types, the :mod:`fractions` module "
"provides a rational-number class.  Rational numbers store their values as a "
"numerator and denominator forming a fraction, and can exactly represent "
"numbers such as ``2/3`` that floating-point numbers can only approximate."
msgstr ""
"För att fylla ut hierarkin av numeriska typer tillhandahåller modulen :mod:"
"`fractions` en klass för rationella tal.  Rationella tal lagrar sina värden "
"som en täljare och nämnare som bildar ett bråk, och kan exakt representera "
"tal som ``2/3`` som flyttal bara kan approximera."

msgid ""
"The :class:`Fraction` constructor takes two :class:`Integral` values that "
"will be the numerator and denominator of the resulting fraction. ::"
msgstr ""
"Konstruktören :class:`Fraction` tar två :class:`Integral`-värden som blir "
"täljare och nämnare i den resulterande fraktionen. ::"

msgid ""
">>> from fractions import Fraction\n"
">>> a = Fraction(2, 3)\n"
">>> b = Fraction(2, 5)\n"
">>> float(a), float(b)\n"
"(0.66666666666666663, 0.40000000000000002)\n"
">>> a+b\n"
"Fraction(16, 15)\n"
">>> a/b\n"
"Fraction(5, 3)"
msgstr ""
">>> from fractions import Fraktion\n"
">>> a = Fraktion(2, 3)\n"
">>> b = Fraktion(2, 5)\n"
">>> float(a), float(b)\n"
"(0.66666666666666663, 0.40000000000000002)\n"
">>> a+b\n"
"Fraktion(16, 15)\n"
">>> a/b\n"
"Fraktion(5, 3)"

msgid ""
"For converting floating-point numbers to rationals, the float type now has "
"an :meth:`as_integer_ratio` method that returns the numerator and "
"denominator for a fraction that evaluates to the same floating-point value::"
msgstr ""
"För konvertering av flyttal till rationella tal har float-typen nu en metod :"
"meth:`as_integer_ratio` som returnerar täljaren och nämnaren för ett bråk "
"som utvärderas till samma flyttalsvärde::"

msgid ""
">>> (2.5) .as_integer_ratio()\n"
"(5, 2)\n"
">>> (3.1415) .as_integer_ratio()\n"
"(7074029114692207L, 2251799813685248L)\n"
">>> (1./3) .as_integer_ratio()\n"
"(6004799503160661L, 18014398509481984L)"
msgstr ""
">>> (2,5) .as_integer_ratio()\n"
"(5, 2)\n"
">>> (3,1415) .as_integer_ratio()\n"
"(7074029114692207L, 2251799813685248L)\n"
">>> (1./3) .as_integer_ratio()\n"
"(6004799503160661L, 18014398509481984L)"

msgid ""
"Note that values that can only be approximated by floating-point numbers, "
"such as 1./3, are not simplified to the number being approximated; the "
"fraction attempts to match the floating-point value **exactly**."
msgstr ""
"Observera att värden som bara kan approximeras med flyttal, t.ex. 1./3, inte "
"förenklas till det tal som approximeras; bråket försöker matcha "
"flyttalsvärdet **exakt**."

msgid ""
"The :mod:`fractions` module is based upon an implementation by Sjoerd "
"Mullender that was in Python's :file:`Demo/classes/` directory for a long "
"time.  This implementation was significantly updated by Jeffrey Yasskin."
msgstr ""
"Modulen :mod:`fractions` är baserad på en implementation av Sjoerd Mullender "
"som länge fanns i Pythons :file:`Demo/classes/`-katalog.  Denna "
"implementation har uppdaterats avsevärt av Jeffrey Yasskin."

msgid "Other Language Changes"
msgstr "Andra språkliga förändringar"

msgid "Some smaller changes made to the core Python language are:"
msgstr "Några mindre ändringar som gjorts i Python-språkets kärna är:"

msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can now "
"be executed directly by passing their name to the interpreter. The directory "
"or zip archive is automatically inserted as the first entry in sys.path.  "
"(Suggestion and initial patch by Andy Chu, subsequently revised by Phillip "
"J. Eby and Nick Coghlan; :issue:`1739468`.)"
msgstr ""
"Kataloger och zip-arkiv som innehåller en :file:`__main__.py`-fil kan nu "
"exekveras direkt genom att deras namn anges till tolken. Katalogen eller zip-"
"arkivet infogas automatiskt som den första posten i sys.path.  (Förslag och "
"inledande patch av Andy Chu, därefter reviderad av Phillip J. Eby och Nick "
"Coghlan; :issue:`1739468`.)"

msgid ""
"The :func:`hasattr` function was catching and ignoring all errors, under the "
"assumption that they meant a :meth:`__getattr__` method was failing somehow "
"and the return value of :func:`hasattr` would therefore be ``False``.  This "
"logic shouldn't be applied to :exc:`KeyboardInterrupt` and :exc:"
"`SystemExit`, however; Python 2.6 will no longer discard such exceptions "
"when :func:`hasattr` encounters them.  (Fixed by Benjamin Peterson; :issue:"
"`2196`.)"
msgstr ""
"Funktionen :func:`hasattr` fångade upp och ignorerade alla fel, under "
"antagandet att de betydde att en :meth:`__getattr__`-metod misslyckades på "
"något sätt och att returvärdet för :func:`hasattr` därför skulle vara "
"``False``.  Denna logik bör dock inte tillämpas på :exc:`KeyboardInterrupt` "
"och :exc:`SystemExit`; Python 2.6 kommer inte längre att kassera sådana "
"undantag när :func:`hasattr` stöter på dem.  (Rättad av Benjamin Peterson; :"
"issue:`2196`.)"

msgid ""
"When calling a function using the ``**`` syntax to provide keyword "
"arguments, you are no longer required to use a Python dictionary; any "
"mapping will now work::"
msgstr ""
"När du anropar en funktion som använder ``**``-syntaxen för att ange "
"nyckelordsargument behöver du inte längre använda en Python-ordbok; vilken "
"mappning som helst fungerar nu::"

msgid ""
">>> def f(**kw):\n"
"...    print sorted(kw)\n"
"...\n"
">>> ud=UserDict.UserDict()\n"
">>> ud['a'] = 1\n"
">>> ud['b'] = 'string'\n"
">>> f(**ud)\n"
"['a', 'b']"
msgstr ""
">>> def f(**kw):\n"
"... print sorterad(kw)\n"
"...\n"
">>> ud=UserDict.UserDict()\n"
">>> ud['a'] = 1\n"
">>> ud['b'] = 'sträng'\n"
">>> f(**ud)\n"
"['a', 'b']"

msgid "(Contributed by Alexander Belopolsky; :issue:`1686487`.)"
msgstr "(Bidrag från Alexander Belopolsky; :issue:`1686487`.)"

msgid ""
"It's also become legal to provide keyword arguments after a ``*args`` "
"argument to a function call. ::"
msgstr ""
"Det har också blivit lagligt att ange nyckelordsargument efter ett ``*args``-"
"argument i ett funktionsanrop:"

msgid ""
">>> def f(*args, **kw):\n"
"...     print args, kw\n"
"...\n"
">>> f(1,2,3, *(4,5,6), keyword=13)\n"
"(1, 2, 3, 4, 5, 6) {'keyword': 13}"
msgstr ""
">>> def f(*args, **kw):\n"
"... print args, kw\n"
"...\n"
">>> f(1,2,3, *(4,5,6), nyckelord=13)\n"
"(1, 2, 3, 4, 5, 6) {'nyckelord': 13}"

msgid ""
"Previously this would have been a syntax error. (Contributed by Amaury "
"Forgeot d'Arc; :issue:`3473`.)"
msgstr ""
"Tidigare skulle detta ha varit ett syntaxfel. (Bidrag från Amaury Forgeot "
"d'Arc; :issue:`3473`.)"

msgid ""
"A new builtin, ``next(iterator, [default])`` returns the next item from the "
"specified iterator.  If the *default* argument is supplied, it will be "
"returned if *iterator* has been exhausted; otherwise, the :exc:"
"`StopIteration` exception will be raised.  (Backported in :issue:`2719`.)"
msgstr ""
"En ny inbyggd funktion, ``next(iterator, [default])`` returnerar nästa "
"objekt från den angivna iteratorn.  Om argumentet *default* anges, kommer "
"det att returneras om *iterator* har uttömts; annars kommer :exc:"
"`StopIteration` undantaget att uppstå.  (Återinförd i :issue:`2719`.)"

msgid ""
"Tuples now have :meth:`index` and :meth:`count` methods matching the list "
"type's :meth:`index` and :meth:`count` methods::"
msgstr ""
"Tuples har nu metoderna :meth:`index` och :meth:`count` som matchar "
"listtypens metoder :meth:`index` och :meth:`count`::"

msgid ""
">>> t = (0,1,2,3,4,0,1,2)\n"
">>> t.index(3)\n"
"3\n"
">>> t.count(0)\n"
"2"
msgstr ""
">>> t = (0,1,2,3,4,0,1,2)\n"
">>> t.index(3)\n"
"3\n"
">>> t.count(0)\n"
"2"

msgid "(Contributed by Raymond Hettinger)"
msgstr "(Bidrag från Raymond Hettinger)"

msgid ""
"The built-in types now have improved support for extended slicing syntax, "
"accepting various combinations of ``(start, stop, step)``. Previously, the "
"support was partial and certain corner cases wouldn't work. (Implemented by "
"Thomas Wouters.)"
msgstr ""
"De inbyggda typerna har nu förbättrat stöd för utökad slicing-syntax och "
"accepterar olika kombinationer av ``(start, stop, step)``. Tidigare var "
"stödet partiellt och vissa hörnfall fungerade inte. (Implementerat av Thomas "
"Wouters.)"

msgid ""
"Properties now have three attributes, :attr:`getter`, :attr:`setter` and :"
"attr:`deleter`, that are decorators providing useful shortcuts for adding a "
"getter, setter or deleter function to an existing property. You would use "
"them like this::"
msgstr ""
"Egenskaper har nu tre attribut, :attr:`getter`, :attr:`setter` och :attr:"
"`deleter`, som är dekoratorer som ger användbara genvägar för att lägga till "
"en getter-, setter- eller deleter-funktion till en befintlig egenskap. Du "
"kan använda dem så här::"

msgid ""
"class C(object):\n"
"    @property\n"
"    def x(self):\n"
"        return self._x\n"
"\n"
"    @x.setter\n"
"    def x(self, value):\n"
"        self._x = value\n"
"\n"
"    @x.deleter\n"
"    def x(self):\n"
"        del self._x\n"
"\n"
"class D(C):\n"
"    @C.x.getter\n"
"    def x(self):\n"
"        return self._x * 2\n"
"\n"
"    @x.setter\n"
"    def x(self, value):\n"
"        self._x = value / 2"
msgstr ""
"klass C(objekt):\n"
"    @egenskap\n"
"    def x(self):\n"
"        return self._x\n"
"\n"
"    @x.inställare\n"
"    def x(self, värde):\n"
"        self._x = värde\n"
"\n"
"    @x.borttagare\n"
"    def x(self):\n"
"        del self._x\n"
"\n"
"klass D(C):\n"
"    @C.x.getter\n"
"    def x(self):\n"
"        returnerar self._x * 2\n"
"\n"
"    @x.inställare\n"
"    def x(self, värde):\n"
"        self._x = värde / 2"

msgid ""
"Several methods of the built-in set types now accept multiple iterables: :"
"meth:`intersection`, :meth:`intersection_update`, :meth:`union`, :meth:"
"`update`, :meth:`difference` and :meth:`difference_update`."
msgstr ""
"Flera metoder för de inbyggda set-typerna accepterar nu flera iterabler: :"
"meth:`intersection`, :meth:`intersection_update`, :meth:`union`, :meth:"
"`update`, :meth:`difference` och :meth:`difference_update`."

msgid ""
">>> s=set('1234567890')\n"
">>> s.intersection('abc123', 'cdf246')  # Intersection between all inputs\n"
"set(['2'])\n"
">>> s.difference('246', '789')\n"
"set(['1', '0', '3', '5'])"
msgstr ""
">>> s=set('1234567890')\n"
">>> s.intersection('abc123', 'cdf246') # Intersektion mellan alla ingångar\n"
"set(['2'])\n"
">>> s.skillnad('246', '789')\n"
"set(['1', '0', '3', '5'])"

msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Bidrag från Raymond Hettinger.)"

msgid ""
"Many floating-point features were added.  The :func:`float` function will "
"now turn the string ``nan`` into an IEEE 754 Not A Number value, and "
"``+inf`` and ``-inf`` into positive or negative infinity.  This works on any "
"platform with IEEE 754 semantics.  (Contributed by Christian Heimes; :issue:"
"`1635`.)"
msgstr ""
"Många funktioner för flyttal har lagts till.  Funktionen :func:`float` "
"förvandlar nu strängen ``nan`` till ett IEEE 754 Not A Number-värde, och "
"``+inf`` och ``-inf`` till positiv eller negativ oändlighet.  Detta fungerar "
"på alla plattformar med IEEE 754-semantik.  (Bidrag från Christian Heimes; :"
"issue:`1635`.)"

msgid ""
"Other functions in the :mod:`math` module, :func:`isinf` and :func:`isnan`, "
"return true if their floating-point argument is infinite or Not A Number.  (:"
"issue:`1640`)"
msgstr ""
"Andra funktioner i modulen :mod:`math`, :func:`isinf` och :func:`isnan`, "
"returnerar true om deras flyttalsargument är oändligt eller Not A Number.  (:"
"issue:`1640`)"

msgid ""
"Conversion functions were added to convert floating-point numbers into "
"hexadecimal strings (:issue:`3008`).  These functions convert floats to and "
"from a string representation without introducing rounding errors from the "
"conversion between decimal and binary.  Floats have a :meth:`hex` method "
"that returns a string representation, and the ``float.fromhex()`` method "
"converts a string back into a number::"
msgstr ""
"Konverteringsfunktioner har lagts till för att konvertera flyttal till "
"hexadecimala strängar (:issue:`3008`).  Dessa funktioner konverterar flyttal "
"till och från en strängrepresentation utan att införa avrundningsfel från "
"konverteringen mellan decimal och binär.  Floats har en :meth:`hex`-metod "
"som returnerar en strängrepresentation, och metoden ``float.fromhex()`` "
"konverterar en sträng tillbaka till ett tal::"

msgid ""
">>> a = 3.75\n"
">>> a.hex()\n"
"'0x1.e000000000000p+1'\n"
">>> float.fromhex('0x1.e000000000000p+1')\n"
"3.75\n"
">>> b=1./3\n"
">>> b.hex()\n"
"'0x1.5555555555555p-2'"
msgstr ""
">>> a = 3.75\n"
">>> a.hex()\n"
"'0x1.e000000000000p+1'\n"
">>> float.fromhex('0x1.e000000000000p+1')\n"
"3.75\n"
">>> b=1./3\n"
">>> b.hex()\n"
"'0x1.5555555555555p-2'"

msgid ""
"A numerical nicety: when creating a complex number from two floats on "
"systems that support signed zeros (-0 and +0), the :func:`complex` "
"constructor will now preserve the sign of the zero.  (Fixed by Mark T. "
"Dickinson; :issue:`1507`.)"
msgstr ""
"En numerisk finess: när man skapar ett komplext tal från två flyttal på "
"system som stöder signerade nollor (-0 och +0), kommer :func:`complex`-"
"konstruktören nu att bevara tecknet på nollan.  (Rättad av Mark T. "
"Dickinson; :issue:`1507`.)"

msgid ""
"Classes that inherit a :meth:`__hash__` method from a parent class can set "
"``__hash__ = None`` to indicate that the class isn't hashable.  This will "
"make ``hash(obj)`` raise a :exc:`TypeError` and the class will not be "
"indicated as implementing the :class:`Hashable` ABC."
msgstr ""
"Klasser som ärver en :meth:`__hash__`-metod från en överordnad klass kan "
"sätta ``__hash__ = None`` för att ange att klassen inte är hashbar.  Detta "
"kommer att göra att ``hash(obj)`` ger upphov till ett :exc:`TypeError` och "
"klassen kommer inte att anges som implementerande av :class:`Hashable` ABC."

msgid ""
"You should do this when you've defined a :meth:`__cmp__` or :meth:`__eq__` "
"method that compares objects by their value rather than by identity.  All "
"objects have a default hash method that uses ``id(obj)`` as the hash value.  "
"There's no tidy way to remove the :meth:`__hash__` method inherited from a "
"parent class, so assigning ``None`` was implemented as an override.  At the "
"C level, extensions can set ``tp_hash`` to :c:func:"
"`PyObject_HashNotImplemented`. (Fixed by Nick Coghlan and Amaury Forgeot "
"d'Arc; :issue:`2235`.)"
msgstr ""
"Du bör göra detta när du har definierat en :meth:`__cmp__`- eller :meth:"
"`__eq__`-metod som jämför objekt med deras värde snarare än med identitet.  "
"Alla objekt har en standardhashmetod som använder ``id(obj)`` som "
"hashvärde.  Det finns inget snyggt sätt att ta bort :meth:`__hash__`-metoden "
"som ärvts från en överordnad klass, så att tilldela ``None`` implementerades "
"som en åsidosättning.  På C-nivå kan tillägg ställa in ``tp_hash`` till :c:"
"func:`PyObject_HashNotImplemented`. (Rättad av Nick Coghlan och Amaury "
"Forgeot d'Arc; :issue:`2235`.)"

msgid ""
"The :exc:`GeneratorExit` exception now subclasses :exc:`BaseException` "
"instead of :exc:`Exception`.  This means that an exception handler that does "
"``except Exception:`` will not inadvertently catch :exc:`GeneratorExit`. "
"(Contributed by Chad Austin; :issue:`1537`.)"
msgstr ""
"Undantaget :exc:`GeneratorExit` subklassar nu :exc:`BaseException` istället "
"för :exc:`Exception`.  Detta innebär att en undantagshanterare som gör "
"``except Exception:`` inte oavsiktligt kommer att fånga :exc:"
"`GeneratorExit`. (Bidrag från Chad Austin; :issue:`1537`.)"

msgid ""
"Generator objects now have a :attr:`gi_code` attribute that refers to the "
"original code object backing the generator. (Contributed by Collin Winter; :"
"issue:`1473257`.)"
msgstr ""
"Generatorobjekt har nu ett :attr:`gi_code`-attribut som hänvisar till det "
"ursprungliga kodobjektet som backar upp generatorn. (Bidrag från Collin "
"Winter; :issue:`1473257`.)"

msgid ""
"The :func:`compile` built-in function now accepts keyword arguments as well "
"as positional parameters.  (Contributed by Thomas Wouters; :issue:`1444529`.)"
msgstr ""
"Den inbyggda funktionen :func:`compile` accepterar nu nyckelordsargument "
"såväl som positionella parametrar.  (Bidrag från Thomas Wouters; :issue:"
"`1444529`.)"

msgid ""
"The :func:`complex` constructor now accepts strings containing parenthesized "
"complex numbers, meaning that ``complex(repr(cplx))`` will now round-trip "
"values.  For example, ``complex('(3+4j)')`` now returns the value (3+4j).  (:"
"issue:`1491866`)"
msgstr ""
"Konstruktorn :func:`complex` accepterar nu strängar som innehåller komplexa "
"tal inom parentes, vilket innebär att ``complex(repr(cplx))`` nu avrundar "
"värden.  Till exempel, ``complex('(3+4j)')`` returnerar nu värdet (3+4j).  (:"
"issue:`1491866`)"

msgid ""
"The string :meth:`translate` method now accepts ``None`` as the translation "
"table parameter, which is treated as the identity transformation.   This "
"makes it easier to carry out operations that only delete characters.  "
"(Contributed by Bengt Richter and implemented by Raymond Hettinger; :issue:"
"`1193128`.)"
msgstr ""
"Metoden string :meth:`translate` accepterar nu ``None`` som parameter för "
"översättningstabellen, som behandlas som en identitetstransformation.   "
"Detta gör det enklare att utföra operationer som bara tar bort tecken.  "
"(Bidrag från Bengt Richter och implementerat av Raymond Hettinger; :issue:"
"`1193128`.)"

msgid ""
"The built-in :func:`dir` function now checks for a :meth:`__dir__` method on "
"the objects it receives.  This method must return a list of strings "
"containing the names of valid attributes for the object, and lets the object "
"control the value that :func:`dir` produces. Objects that have :meth:"
"`__getattr__` or :meth:`__getattribute__` methods can use this to advertise "
"pseudo-attributes they will honor. (:issue:`1591665`)"
msgstr ""
"Den inbyggda funktionen :func:`dir` kontrollerar nu om det finns en metod :"
"meth:`__dir__` i de objekt som den tar emot.  Denna metod måste returnera en "
"lista med strängar som innehåller namnen på giltiga attribut för objektet, "
"och låter objektet styra det värde som :func:`dir` producerar. Objekt som "
"har :meth:`__getattr__` eller :meth:`__getattribute__` metoder kan använda "
"detta för att annonsera pseudoattribut som de kommer att respektera. (:issue:"
"`1591665`)"

msgid ""
"Instance method objects have new attributes for the object and function "
"comprising the method; the new synonym for :attr:`!im_self` is :attr:"
"`~method.__self__`, and :attr:`!im_func` is also available as :attr:`~method."
"__func__`. The old names are still supported in Python 2.6, but are gone in "
"3.0."
msgstr ""
"Instansmetodobjekt har nya attribut för det objekt och den funktion som "
"utgör metoden; den nya synonymen för :attr:`!im_self` är :attr:`~method."
"__self__`, och :attr:`!im_func` finns också som :attr:`~method.__func__`. De "
"gamla namnen stöds fortfarande i Python 2.6, men är borta i 3.0."

msgid ""
"An obscure change: when you use the :func:`locals` function inside a :"
"keyword:`class` statement, the resulting dictionary no longer returns free "
"variables.  (Free variables, in this case, are variables referenced in the :"
"keyword:`!class` statement  that aren't attributes of the class.)"
msgstr ""
"En obskyr förändring: när du använder funktionen :func:`locals` i en :"
"keyword:`class`-sats returnerar den resulterande ordlistan inte längre fria "
"variabler.  (Fria variabler är i det här fallet variabler som refereras till "
"i :keyword:`!class`-satsen och som inte är attribut till klassen)"

msgid "Optimizations"
msgstr "Optimeringar"

msgid ""
"The :mod:`warnings` module has been rewritten in C.  This makes it possible "
"to invoke warnings from the parser, and may also make the interpreter's "
"startup faster. (Contributed by Neal Norwitz and Brett Cannon; :issue:"
"`1631171`.)"
msgstr ""
"Modulen :mod:`warnings` har skrivits om till C. Detta gör det möjligt att "
"anropa varningar från parsern, och kan också göra tolkens uppstart snabbare. "
"(Bidrag från Neal Norwitz och Brett Cannon; :issue:`1631171`.)"

msgid ""
"Type objects now have a cache of methods that can reduce the work required "
"to find the correct method implementation for a particular class; once "
"cached, the interpreter doesn't need to traverse base classes to figure out "
"the right method to call. The cache is cleared if a base class or the class "
"itself is modified, so the cache should remain correct even in the face of "
"Python's dynamic nature. (Original optimization implemented by Armin Rigo, "
"updated for Python 2.6 by Kevin Jacobs; :issue:`1700288`.)"
msgstr ""
"Typobjekt har nu en cache av metoder som kan minska det arbete som krävs för "
"att hitta rätt metodimplementering för en viss klass; när den väl är cachad "
"behöver tolken inte korsa basklasser för att ta reda på rätt metod att "
"anropa. Cachen rensas om en basklass eller klassen i sig ändras, så cachen "
"bör förbli korrekt även med tanke på Pythons dynamiska natur. "
"(Originaloptimering implementerad av Armin Rigo, uppdaterad för Python 2.6 "
"av Kevin Jacobs; :issue:`1700288`.)"

msgid ""
"By default, this change is only applied to types that are included with the "
"Python core.  Extension modules may not necessarily be compatible with this "
"cache, so they must explicitly add :c:macro:`Py_TPFLAGS_HAVE_VERSION_TAG` to "
"the module's ``tp_flags`` field to enable the method cache. (To be "
"compatible with the method cache, the extension module's code must not "
"directly access and modify the ``tp_dict`` member of any of the types it "
"implements.  Most modules don't do this, but it's impossible for the Python "
"interpreter to determine that. See :issue:`1878` for some discussion.)"
msgstr ""
"Som standard tillämpas denna ändring endast på typer som ingår i Python-"
"kärnan.  Tilläggsmoduler är inte nödvändigtvis kompatibla med denna cache, "
"så de måste uttryckligen lägga till :c:macro:`Py_TPFLAGS_HAVE_VERSION_TAG` i "
"modulens ``tp_flags``-fält för att aktivera metodcachen. (För att vara "
"kompatibel med metodcachen får tilläggsmodulens kod inte direkt komma åt och "
"modifiera ``tp_dict``-medlemmen i någon av de typer som den implementerar.  "
"De flesta moduler gör inte detta, men det är omöjligt för Python-tolken att "
"avgöra det. Se :issue:`1878` för en diskussion)"

msgid ""
"Function calls that use keyword arguments are significantly faster by doing "
"a quick pointer comparison, usually saving the time of a full string "
"comparison.  (Contributed by Raymond Hettinger, after an initial "
"implementation by Antoine Pitrou; :issue:`1819`.)"
msgstr ""
"Funktionsanrop som använder nyckelordsargument är betydligt snabbare genom "
"att göra en snabb pekarjämförelse, vilket vanligtvis sparar tid jämfört med "
"en fullständig strängjämförelse.  (Bidrag från Raymond Hettinger, efter en "
"första implementering av Antoine Pitrou; :issue:`1819`.)"

msgid ""
"All of the functions in the :mod:`struct` module have been rewritten in C, "
"thanks to work at the Need For Speed sprint. (Contributed by Raymond "
"Hettinger.)"
msgstr ""
"Alla funktioner i modulen :mod:`struct` har skrivits om till C, tack vare "
"arbetet med Need For Speed-sprinten. (Bidrag från Raymond Hettinger.)"

msgid ""
"Some of the standard built-in types now set a bit in their type objects.  "
"This speeds up checking whether an object is a subclass of one of these "
"types.  (Contributed by Neal Norwitz.)"
msgstr ""
"Vissa av de inbyggda standardtyperna anger nu en bit i sina typobjekt.  "
"Detta påskyndar kontrollen av om ett objekt är en underklass av en av dessa "
"typer.  (Bidrag från Neal Norwitz.)"

msgid ""
"Unicode strings now use faster code for detecting whitespace and line "
"breaks; this speeds up the :meth:`split` method by about 25% and :meth:"
"`splitlines` by 35%. (Contributed by Antoine Pitrou.)  Memory usage is "
"reduced by using pymalloc for the Unicode string's data."
msgstr ""
"Unicode-strängar använder nu snabbare kod för att upptäcka blanksteg och "
"radbrytningar; detta snabbar upp :meth:`split`-metoden med cirka 25% aoch :"
"meth:`splitlines` med 35%. (Bidrag från Antoine Pitrou.) Minnesanvändningen "
"minskas genom att pymalloc används för Unicode-strängens data."

msgid ""
"The ``with`` statement now stores the :meth:`~object.__exit__` method on the "
"stack, producing a small speedup.  (Implemented by Jeffrey Yasskin.)"
msgstr ""
"``with``-satsen lagrar nu :meth:`~object.__exit__`-metoden på stacken, "
"vilket ger en liten hastighetsökning.  (Implementerat av Jeffrey Yasskin.)"

msgid ""
"To reduce memory usage, the garbage collector will now clear internal free "
"lists when garbage-collecting the highest generation of objects. This may "
"return memory to the operating system sooner."
msgstr ""
"För att minska minnesanvändningen rensar skräpsamlaren nu interna lediga "
"listor när den högsta generationen av objekt samlas in. Detta kan göra att "
"minnet återlämnas till operativsystemet tidigare."

msgid "Interpreter Changes"
msgstr "Förändringar av tolk"

msgid ""
"Two command-line options have been reserved for use by other Python "
"implementations.  The :option:`!-J` switch has been reserved for use by "
"Jython for Jython-specific options, such as switches that are passed to the "
"underlying JVM.  :option:`-X` has been reserved for options specific to a "
"particular implementation of Python such as CPython, Jython, or IronPython.  "
"If either option is used with Python 2.6, the interpreter will report that "
"the option isn't currently used."
msgstr ""
"Två kommandoradsalternativ har reserverats för användning av andra Python-"
"implementationer.  Växeln :option:`!-J` har reserverats för användning av "
"Jython för Jython-specifika alternativ, till exempel växlar som skickas till "
"den underliggande JVM:n. :option:`-X` har reserverats för alternativ som är "
"specifika för en viss implementering av Python, till exempel CPython, Jython "
"eller IronPython.  Om något av alternativen används med Python 2.6 kommer "
"tolken att rapportera att alternativet inte används för närvarande."

msgid ""
"Python can now be prevented from writing :file:`.pyc` or :file:`.pyo` files "
"by supplying the :option:`-B` switch to the Python interpreter, or by "
"setting the :envvar:`PYTHONDONTWRITEBYTECODE` environment variable before "
"running the interpreter.  This setting is available to Python programs as "
"the ``sys.dont_write_bytecode`` variable, and Python code can change the "
"value to modify the interpreter's behaviour.  (Contributed by Neal Norwitz "
"and Georg Brandl.)"
msgstr ""
"Python kan nu förhindras från att skriva :file:`.pyc` eller :file:`.pyo`-"
"filer genom att ange :option:`-B` till Python-tolken, eller genom att ställa "
"in miljövariabeln :envvar:`PYTHONDONTONTWRITEBYTECODE` innan tolken körs.  "
"Denna inställning är tillgänglig för Python-program som variabeln ``sys."
"dont_write_bytecode``, och Python-kod kan ändra värdet för att modifiera "
"tolkens beteende.  (Bidrag från Neal Norwitz och Georg Brandl.)"

msgid ""
"The encoding used for standard input, output, and standard error can be "
"specified by setting the :envvar:`PYTHONIOENCODING` environment variable "
"before running the interpreter.  The value should be a string in the form "
"``<encoding>`` or ``<encoding>:<errorhandler>``. The *encoding* part "
"specifies the encoding's name, e.g. ``utf-8`` or ``latin-1``; the optional "
"*errorhandler* part specifies what to do with characters that can't be "
"handled by the encoding, and  should be one of \"error\", \"ignore\", or "
"\"replace\".   (Contributed by Martin von Löwis.)"
msgstr ""
"Kodningen som används för standardinmatning, -utmatning och standardfel kan "
"specificeras genom att ställa in miljövariabeln :envvar:`PYTHONIOENCODING` "
"innan tolken körs.  Värdet bör vara en sträng i formen ``<encoding>`` eller "
"``<encoding>:<errorhandler>``. Delen *encoding* anger kodningens namn, t.ex. "
"``utf-8`` eller ``latin-1``; den valfria delen *errorhandler* anger vad som "
"ska göras med tecken som inte kan hanteras av kodningen, och bör vara en av "
"\"error\", \"ignore\" eller \"replace\".   (Bidrag från Martin von Löwis.)"

msgid "New and Improved Modules"
msgstr "Nya och förbättrade moduler"

msgid ""
"As in every release, Python's standard library received a number of "
"enhancements and bug fixes.  Here's a partial list of the most notable "
"changes, sorted alphabetically by module name. Consult the :file:`Misc/NEWS` "
"file in the source tree for a more complete list of changes, or look through "
"the Subversion logs for all the details."
msgstr ""
"Som i varje release fick Pythons standardbibliotek ett antal förbättringar "
"och buggfixar.  Här är en partiell lista över de mest anmärkningsvärda "
"ändringarna, sorterade alfabetiskt efter modulnamn. Se filen :file:`Misc/"
"NEWS` i källträdet för en mer komplett lista över ändringar, eller titta "
"igenom Subversion-loggarna för alla detaljer."

msgid ""
"The :mod:`!asyncore` and :mod:`!asynchat` modules are being actively "
"maintained again, and a number of patches and bugfixes were applied.  "
"(Maintained by Josiah Carlson; see :issue:`1736190` for one patch.)"
msgstr ""
"Modulerna :mod:`!asyncore` och :mod:`!asynchat` underhålls aktivt igen, och "
"ett antal korrigeringar och buggfixar har införts.  (Underhålls av Josiah "
"Carlson; se :issue:`1736190` för en patch)"

msgid ""
"The :mod:`bsddb` module also has a new maintainer, Jesús Cea Avión, and the "
"package is now available as a standalone package.  The web page for the "
"package is `www.jcea.es/programacion/pybsddb.htm <https://www.jcea.es/"
"programacion/pybsddb.htm>`__. The plan is to remove the package from the "
"standard library in Python 3.0, because its pace of releases is much more "
"frequent than Python's."
msgstr ""
"Modulen :mod:`bsddb` har också fått en ny underhållare, Jesús Cea Avión, och "
"paketet finns nu tillgängligt som ett fristående paket.  Webbsidan för "
"paketet är `www.jcea.es/programacion/pybsddb.htm <https://www.jcea.es/"
"programacion/pybsddb.htm>`__. Planen är att ta bort paketet från "
"standardbiblioteket i Python 3.0, eftersom Python 3.0 har en mycket tätare "
"utgivningstakt än Python."

msgid ""
"The :mod:`bsddb.dbshelve` module now uses the highest pickling protocol "
"available, instead of restricting itself to protocol 1. (Contributed by W. "
"Barnes.)"
msgstr ""
"Modulen :mod:`bsddb.dbshelve` använder nu det högsta tillgängliga "
"betningsprotokollet, istället för att begränsa sig till protokoll 1. (Bidrag "
"från W. Barnes.)"

msgid ""
"The :mod:`!cgi` module will now read variables from the query string of an "
"HTTP POST request.  This makes it possible to use form actions with URLs "
"that include query strings such as \"/cgi-bin/add.py?category=1\".  "
"(Contributed by Alexandre Fiori and Nubis; :issue:`1817`.)"
msgstr ""
"Modulen :mod:`!cgi` kan nu läsa variabler från frågesträngen i en HTTP POST-"
"begäran.  Detta gör det möjligt att använda formuläråtgärder med "
"webbadresser som innehåller frågesträngar som \"/cgi-bin/add.py?"
"category=1\".  (Bidrag från Alexandre Fiori och Nubis; :issue:`1817`.)"

msgid ""
"The :func:`parse_qs` and :func:`parse_qsl` functions have been relocated "
"from the :mod:`!cgi` module to the :mod:`urlparse <urllib.parse>` module. "
"The versions still available in the :mod:`!cgi` module will trigger :exc:"
"`PendingDeprecationWarning` messages in 2.6 (:issue:`600362`)."
msgstr ""
"Funktionerna :func:`parse_qs` och :func:`parse_qsl` har flyttats från "
"modulen :mod:`!cgi` till modulen :mod:`urlparse <urllib.parse>`. De "
"versioner som fortfarande finns tillgängliga i :mod:`!cgi`-modulen kommer "
"att utlösa :exc:`PendingDeprecationWarning`-meddelanden i 2.6 (:issue:"
"`600362`)."

msgid ""
"The :mod:`cmath` module underwent extensive revision, contributed by Mark "
"Dickinson and Christian Heimes. Five new functions were added:"
msgstr ""
"Modulen :mod:`cmath` har genomgått en omfattande revidering, med bidrag från "
"Mark Dickinson och Christian Heimes. Fem nya funktioner har lagts till:"

msgid ""
":func:`polar` converts a complex number to polar form, returning the modulus "
"and argument of the complex number."
msgstr ""
":func:`polar` konverterar ett komplext tal till polarform och returnerar "
"modulus och argument för det komplexa talet."

msgid ""
":func:`rect` does the opposite, turning a modulus, argument pair back into "
"the corresponding complex number."
msgstr ""
":func:`rect` gör tvärtom och förvandlar ett modulus-argumentpar tillbaka "
"till motsvarande komplexa tal."

msgid ""
":func:`phase` returns the argument (also called the angle) of a complex "
"number."
msgstr ""
":func:`phase` returnerar argumentet (även kallat vinkeln) för ett komplext "
"tal."

msgid ""
":func:`isnan` returns True if either the real or imaginary part of its "
"argument is a NaN."
msgstr ""
":func:`isnan` returnerar True om antingen den verkliga eller den imaginära "
"delen av argumentet är ett NaN."

msgid ""
":func:`isinf` returns True if either the real or imaginary part of its "
"argument is infinite."
msgstr ""
":func:`isinf` returnerar True om antingen den reella eller imaginära delen "
"av dess argument är oändlig."

msgid ""
"The revisions also improved the numerical soundness of the :mod:`cmath` "
"module.  For all functions, the real and imaginary parts of the results are "
"accurate to within a few units of least precision (ulps) whenever possible.  "
"See :issue:`1381` for the details.  The branch cuts for :func:`asinh`, :func:"
"`atanh`: and :func:`atan` have also been corrected."
msgstr ""
"Revideringarna har också förbättrat den numeriska tillförlitligheten hos "
"modulen :mod:`cmath`.  För alla funktioner är de reella och imaginära "
"delarna av resultaten korrekta inom några få enheter av minsta precision "
"(ulps) när så är möjligt.  Se :issue:`1381` för detaljer.  Grenavsnitten "
"för :func:`asinh`, :func:`atanh`: och :func:`atan` har också korrigerats."

msgid ""
"The tests for the module have been greatly expanded; nearly 2000 new test "
"cases exercise the algebraic functions."
msgstr ""
"Testerna för modulen har utökats kraftigt; nästan 2000 nya testfall tränar "
"de algebraiska funktionerna."

msgid ""
"On IEEE 754 platforms, the :mod:`cmath` module now handles IEEE 754 special "
"values and floating-point exceptions in a manner consistent with Annex 'G' "
"of the C99 standard."
msgstr ""
"På IEEE 754-plattformar hanterar modulen :mod:`cmath` nu IEEE 754-"
"specialvärden och undantag för flyttal på ett sätt som överensstämmer med "
"Annex 'G' i C99-standarden."

msgid ""
"A new data type in the :mod:`collections` module: ``namedtuple(typename, "
"fieldnames)`` is a factory function that creates subclasses of the standard "
"tuple whose fields are accessible by name as well as index.  For example::"
msgstr ""
"En ny datatyp i modulen :mod:`collections`: ``namedtuple(typename, "
"fieldnames)`` är en fabriksfunktion som skapar underklasser av "
"standardtupeln vars fält är tillgängliga via namn såväl som index.  Till "
"exempel::"

msgid ""
">>> var_type = collections.namedtuple('variable',\n"
"...             'id name type size')\n"
">>> # Names are separated by spaces or commas.\n"
">>> # 'id, name, type, size' would also work.\n"
">>> var_type._fields\n"
"('id', 'name', 'type', 'size')\n"
"\n"
">>> var = var_type(1, 'frequency', 'int', 4)\n"
">>> print var[0], var.id    # Equivalent\n"
"1 1\n"
">>> print var[2], var.type  # Equivalent\n"
"int int\n"
">>> var._asdict()\n"
"{'size': 4, 'type': 'int', 'id': 1, 'name': 'frequency'}\n"
">>> v2 = var._replace(name='amplitude')\n"
">>> v2\n"
"variable(id=1, name='amplitude', type='int', size=4)"
msgstr ""
">>> var_type = collections.namedtuple('variabel',\n"
"...             'id namn typ storlek')\n"
">>> # Namnen separeras med mellanslag eller kommatecken.\n"
">>> # 'id, name, type, size' skulle också fungera.\n"
">>> var_typ._fält\n"
"('id', 'namn', 'typ', 'storlek')\n"
"\n"
">>> var = var_type(1, 'frequency', 'int', 4)\n"
">>> print var[0], var.id # Likvärdig\n"
"1 1\n"
">>> print var[2], var.type # Ekvivalent\n"
"int int\n"
">>> var._asdict()\n"
"{'size': 4, 'type': 'int', 'id': 1, 'name': 'frekvens'}\n"
">>> v2 = var._replace(name='amplitud')\n"
">>> v2\n"
"variabel(id=1, name='amplitud', type='int', size=4)"

msgid ""
"Several places in the standard library that returned tuples have been "
"modified to return :func:`namedtuple` instances.  For example, the :meth:"
"`Decimal.as_tuple` method now returns a named tuple with :attr:`sign`, :attr:"
"`digits`, and :attr:`exponent` fields."
msgstr ""
"Flera ställen i standardbiblioteket som returnerade tuplar har ändrats till "
"att returnera :func:`namedtuple`-instanser.  Till exempel returnerar "
"metoden :meth:`Decimal.as_tuple` nu en namngiven tupel med fälten :attr:"
"`sign`, :attr:`digits` och :attr:`exponent`."

msgid ""
"Another change to the :mod:`collections` module is that the :class:`deque` "
"type now supports an optional *maxlen* parameter; if supplied, the deque's "
"size will be restricted to no more than *maxlen* items.  Adding more items "
"to a full deque causes old items to be discarded."
msgstr ""
"En annan förändring i modulen :mod:`collections` är att typen :class:`deque` "
"nu har stöd för en valfri parameter *maxlen*; om den anges kommer deques "
"storlek att begränsas till högst *maxlen* objekt.  Om du lägger till fler "
"objekt i en full deque kommer gamla objekt att kasseras."

msgid ""
">>> from collections import deque\n"
">>> dq=deque(maxlen=3)\n"
">>> dq\n"
"deque([], maxlen=3)\n"
">>> dq.append(1); dq.append(2); dq.append(3)\n"
">>> dq\n"
"deque([1, 2, 3], maxlen=3)\n"
">>> dq.append(4)\n"
">>> dq\n"
"deque([2, 3, 4], maxlen=3)"
msgstr ""
">>> from collections import deque\n"
">>> dq=deque(maxlen=3)\n"
">>> dq\n"
"deque([], maxlen=3)\n"
">>> dq.append(1); dq.append(2); dq.append(3)\n"
">>> dq\n"
"deque([1, 2, 3], maxlen=3)\n"
">>> dq.append(4)\n"
">>> dq\n"
"deque([2, 3, 4], maxlen=3)"

msgid ""
"The :mod:`Cookie <http.cookies>` module's :class:`~http.cookies.Morsel` "
"objects now support an :attr:`~http.cookies.Morsel.httponly` attribute.  In "
"some browsers. cookies with this attribute set cannot be accessed or "
"manipulated by JavaScript code. (Contributed by Arvin Schnell; :issue:"
"`1638033`.)"
msgstr ""
"Modulen :mod:`Cookie <http.cookies>` :class:`~http.cookies.Morsel`-objekt "
"har nu stöd för attributet :attr:`~http.cookies.Morsel.httponly`.  I vissa "
"webbläsare kan cookies med detta attribut inte nås eller manipuleras av "
"JavaScript-kod. (Bidrag från Arvin Schnell; :issue:`1638033`.)"

msgid ""
"A new window method in the :mod:`curses` module, :meth:`chgat`, changes the "
"display attributes for a certain number of characters on a single line.  "
"(Contributed by Fabian Kreutz.)"
msgstr ""
"En ny fönstermetod i modulen :mod:`curses`, :meth:`chgat`, ändrar "
"visningsattributen för ett visst antal tecken på en rad.  (Bidrag från "
"Fabian Kreutz.)"

msgid ""
"# Boldface text starting at y=0,x=21\n"
"# and affecting the rest of the line.\n"
"stdscr.chgat(0, 21, curses.A_BOLD)"
msgstr ""
"# Text i fetstil som börjar vid y=0,x=21\n"
"# och påverkar resten av raden.\n"
"stdscr.chgat(0, 21, curses.A_BOLD)"

msgid ""
"The :class:`Textbox` class in the :mod:`curses.textpad` module now supports "
"editing in insert mode as well as overwrite mode. Insert mode is enabled by "
"supplying a true value for the *insert_mode* parameter when creating the :"
"class:`Textbox` instance."
msgstr ""
"Klassen :class:`Textbox` i modulen :mod:`curses.textpad` stöder nu "
"redigering i både infogningsläge och överskrivningsläge. Insert-läget "
"aktiveras genom att ange ett true-värde för parametern *insert_mode* när :"
"class:`Textbox`-instansen skapas."

msgid ""
"The :mod:`datetime` module's :meth:`strftime` methods now support a ``%f`` "
"format code that expands to the number of microseconds in the object, zero-"
"padded on the left to six places.  (Contributed by Skip Montanaro; :issue:"
"`1158`.)"
msgstr ""
":mod:`datetime`-modulens :meth:`strftime`-metoder stöder nu en ``%f``-"
"formatkod som expanderar till antalet mikrosekunder i objektet, nolladderad "
"till vänster till sex platser.  (Bidrag från Skip Montanaro; :issue:`1158`.)"

msgid ""
"The :mod:`decimal` module was updated to version 1.66 of `the General "
"Decimal Specification <https://speleotrove.com/decimal/decarith.html>`__.  "
"New features include some methods for some basic mathematical functions such "
"as :meth:`exp` and :meth:`log10`::"
msgstr ""
"Modulen :mod:`decimal` uppdaterades till version 1.66 av `the General "
"Decimal Specification <https://speleotrove.com/decimal/decarith.html>`__.  "
"Nya funktioner inkluderar några metoder för några grundläggande matematiska "
"funktioner som :meth:`exp` och :meth:`log10`::"

msgid ""
">>> Decimal(1).exp()\n"
"Decimal(\"2.718281828459045235360287471\")\n"
">>> Decimal(\"2.7182818\").ln()\n"
"Decimal(\"0.9999999895305022877376682436\")\n"
">>> Decimal(1000).log10()\n"
"Decimal(\"3\")"
msgstr ""
">>> Decimal(1).exp()\n"
"Decimal(\"2.718281828459045235360287471\")\n"
">>> Decimal(\"2.7182818\").ln()\n"
"Decimal(\"0.9999999895305022877376682436\")\n"
">>> Decimal(1000).log10()\n"
"Decimal(\"3\")"

msgid ""
"The :meth:`as_tuple` method of :class:`Decimal` objects now returns a named "
"tuple with :attr:`sign`, :attr:`digits`, and :attr:`exponent` fields."
msgstr ""
"Metoden :meth:`as_tuple` för :class:`Decimal`-objekt returnerar nu en "
"namngiven tuple med fälten :attr:`sign`, :attr:`digits` och :attr:`exponent`."

msgid ""
"(Implemented by Facundo Batista and Mark Dickinson.  Named tuple support "
"added by Raymond Hettinger.)"
msgstr ""
"(Implementerad av Facundo Batista och Mark Dickinson.  Stöd för namngivna "
"tuplar tillagt av Raymond Hettinger.)"

msgid ""
"The :mod:`difflib` module's :class:`SequenceMatcher` class now returns named "
"tuples representing matches, with :attr:`a`, :attr:`b`, and :attr:`size` "
"attributes. (Contributed by Raymond Hettinger.)"
msgstr ""
"Klassen :class:`SequenceMatcher` i modulen :mod:`difflib` returnerar nu "
"namngivna tuples som representerar matchningar, med attributen :attr:`a`, :"
"attr:`b` och :attr:`size`. (Bidrag från Raymond Hettinger.)"

msgid ""
"An optional ``timeout`` parameter, specifying a timeout measured in seconds, "
"was added to the :class:`ftplib.FTP` class constructor as well as the :meth:"
"`connect` method.  (Added by Facundo Batista.) Also, the :class:`FTP` "
"class's :meth:`storbinary` and :meth:`storlines` now take an optional "
"*callback* parameter that will be called with each block of data after the "
"data has been sent. (Contributed by Phil Schwartz; :issue:`1221598`.)"
msgstr ""
"En valfri parameter ``timeout``, som anger en timeout mätt i sekunder, har "
"lagts till i :class:`ftplib.FTP`-klassens konstruktor samt i metoden :meth:"
"`connect`.  (Tillagt av Facundo Batista.) Dessutom tar :class:`FTP`-"
"klassens :meth:`storbinary` och :meth:`storlines` nu en valfri *callback*-"
"parameter som kommer att anropas med varje datablock efter att data har "
"skickats. (Bidrag från Phil Schwartz; :issue:`1221598`.)"

msgid ""
"The :func:`reduce` built-in function is also available in the :mod:"
"`functools` module.  In Python 3.0, the builtin has been dropped and :func:"
"`reduce` is only available from :mod:`functools`; currently there are no "
"plans to drop the builtin in the 2.x series. (Patched by Christian Heimes; :"
"issue:`1739906`.)"
msgstr ""
"Den inbyggda funktionen :func:`reduce` finns också i modulen :mod:"
"`functools`.  I Python 3.0 har den inbyggda funktionen tagits bort och :func:"
"`reduce` är endast tillgänglig från :mod:`functools`; för närvarande finns "
"det inga planer på att ta bort den inbyggda funktionen i 2.x-serien. "
"(Patchad av Christian Heimes; :issue:`1739906`.)"

msgid ""
"When possible, the :mod:`getpass` module will now use :file:`/dev/tty` to "
"print a prompt message and read the password, falling back to standard error "
"and standard input.  If the password may be echoed to the terminal, a "
"warning is printed before the prompt is displayed.  (Contributed by Gregory "
"P. Smith.)"
msgstr ""
"När det är möjligt kommer modulen :mod:`getpass` nu att använda :file:`/dev/"
"tty` för att skriva ut ett promptmeddelande och läsa lösenordet, med "
"återkoppling till standardfel och standardinmatning.  Om lösenordet kan ekas "
"till terminalen skrivs en varning ut innan prompten visas.  (Bidrag från "
"Gregory P. Smith.)"

msgid ""
"The :func:`glob.glob` function can now return Unicode filenames if a Unicode "
"path was used and Unicode filenames are matched within the directory.  (:"
"issue:`1001604`)"
msgstr ""
"Funktionen :func:`glob.glob` kan nu returnera Unicode-filnamn om en Unicode-"
"sökväg användes och Unicode-filnamn matchas inom katalogen.  (:issue:"
"`1001604`)"

msgid ""
"A new function in the :mod:`heapq` module, ``merge(iter1, iter2, ...)``, "
"takes any number of iterables returning data in sorted order, and returns a "
"new generator that returns the contents of all the iterators, also in sorted "
"order.  For example::"
msgstr ""
"En ny funktion i modulen :mod:`heapq`, ``merge(iter1, iter2, ...)``, tar ett "
"valfritt antal iteratorer som returnerar data i sorterad ordning och "
"returnerar en ny generator som returnerar innehållet i alla iteratorer, "
"också i sorterad ordning.  Till exempel::"

msgid ""
">>> list(heapq.merge([1, 3, 5, 9], [2, 8, 16]))\n"
"[1, 2, 3, 5, 8, 9, 16]"
msgstr ""
">>> list(heapq.merge([1, 3, 5, 9], [2, 8, 16]))\n"
"[1, 2, 3, 5, 8, 9, 16]"

msgid ""
"Another new function, ``heappushpop(heap, item)``, pushes *item* onto "
"*heap*, then pops off and returns the smallest item. This is more efficient "
"than making a call to :func:`heappush` and then :func:`heappop`."
msgstr ""
"En annan ny funktion, ``heappushpop(heap, item)``, skjuter *item* till "
"*heap*, sedan popar den upp och returnerar det minsta objektet. Detta är mer "
"effektivt än att göra ett anrop till :func:`heappush` och sedan :func:"
"`heappop`."

msgid ""
":mod:`heapq` is now implemented to only use less-than comparison, instead of "
"the less-than-or-equal comparison it previously used. This makes :mod:"
"`heapq`'s usage of a type match the :meth:`list.sort` method. (Contributed "
"by Raymond Hettinger.)"
msgstr ""
":mod:`heapq` är nu implementerad för att endast använda mindre-än "
"jämförelse, istället för mindre-än-eller-lika jämförelse som den tidigare "
"använde. Detta gör att :mod:`heapq` användning av en typ matchar metoden :"
"meth:`list.sort`. (Bidrag från Raymond Hettinger.)"

msgid ""
"An optional ``timeout`` parameter, specifying a timeout measured in seconds, "
"was added to the :class:`httplib.HTTPConnection <http.client."
"HTTPConnection>` and :class:`HTTPSConnection <http.client.HTTPSConnection>` "
"class constructors.  (Added by Facundo Batista.)"
msgstr ""
"En valfri parameter ``timeout``, som anger en timeout mätt i sekunder, lades "
"till i klasskonstruktörerna :class:`httplib.HTTPConnection <http.client."
"HTTPConnection>` och :class:`HTTPSConnection <http.client."
"HTTPSConnection>`.  (Tillagd av Facundo Batista.)"

msgid ""
"Most of the :mod:`inspect` module's functions, such as :func:`getmoduleinfo` "
"and :func:`getargs`, now return named tuples. In addition to behaving like "
"tuples, the elements of the  return value can also be accessed as "
"attributes. (Contributed by Raymond Hettinger.)"
msgstr ""
"De flesta av :mod:`inspect`-modulens funktioner, till exempel :func:"
"`getmoduleinfo` och :func:`getargs`, returnerar nu namngivna tupler. Förutom "
"att de beter sig som tupler kan elementen i returvärdet också nås som "
"attribut. (Bidrag från Raymond Hettinger.)"

msgid ""
"Some new functions in the module include :func:`isgenerator`, :func:"
"`isgeneratorfunction`, and :func:`isabstract`."
msgstr ""
"Några nya funktioner i modulen är :func:`isgenerator`, :func:"
"`isgeneratorfunction` och :func:`isabstract`."

msgid "The :mod:`itertools` module gained several new functions."
msgstr "Modulen :mod:`itertools` har fått flera nya funktioner."

msgid ""
"``izip_longest(iter1, iter2, ...[, fillvalue])`` makes tuples from each of "
"the elements; if some of the iterables are shorter than others, the missing "
"values are set to *fillvalue*.  For example::"
msgstr ""
"``izip_longest(iter1, iter2, ...[, fillvalue])`` skapar tupler av varje "
"element; om några av iterablerna är kortare än andra sätts de saknade "
"värdena till *fillvalue*.  Till exempel::"

msgid ""
">>> tuple(itertools.izip_longest([1,2,3], [1,2,3,4,5]))\n"
"((1, 1), (2, 2), (3, 3), (None, 4), (None, 5))"
msgstr ""
">>> tuple(itertools.izip_longest([1,2,3], [1,2,3,4,5]))\n"
"((1, 1), (2, 2), (3, 3), (Ingen, 4), (Ingen, 5))"

msgid ""
"``product(iter1, iter2, ..., [repeat=N])`` returns the Cartesian product of "
"the supplied iterables, a set of tuples containing every possible "
"combination of the elements returned from each iterable. ::"
msgstr ""
"``product(iter1, iter2, ..., [repeat=N])`` returnerar den kartesiska "
"produkten av de angivna iterablerna, en uppsättning tuples som innehåller "
"alla möjliga kombinationer av de element som returneras från varje "
"iterabel. ::"

msgid ""
">>> list(itertools.product([1,2,3], [4,5,6]))\n"
"[(1, 4), (1, 5), (1, 6),\n"
" (2, 4), (2, 5), (2, 6),\n"
" (3, 4), (3, 5), (3, 6)]"
msgstr ""
">>> list(itertools.product([1,2,3], [4,5,6]))\n"
"[(1, 4), (1, 5), (1, 6),\n"
" (2, 4), (2, 5), (2, 6),\n"
" (3, 4), (3, 5), (3, 6)]"

msgid ""
"The optional *repeat* keyword argument is used for taking the product of an "
"iterable or a set of iterables with themselves, repeated *N* times.  With a "
"single iterable argument, *N*-tuples are returned::"
msgstr ""
"Det valfria nyckelordsargumentet *repeat* används för att ta produkten av en "
"iterabel eller en uppsättning iterabler med sig själva, upprepade *N* "
"gånger.  Med ett enda iterabelargument returneras *N*-tuples::"

msgid ""
">>> list(itertools.product([1,2], repeat=3))\n"
"[(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2),\n"
" (2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2)]"
msgstr ""
">>> list(itertools.product([1,2], repeat=3))\n"
"[(1, 1, 1), (1, 1, 2), (1, 2, 1), (1, 2, 2),\n"
" (2, 1, 1), (2, 1, 2), (2, 2, 1), (2, 2, 2)]"

msgid "With two iterables, *2N*-tuples are returned. ::"
msgstr "Med två iterabler returneras *2N*-tuples. ::"

msgid ""
">>> list(itertools.product([1,2], [3,4], repeat=2))\n"
"[(1, 3, 1, 3), (1, 3, 1, 4), (1, 3, 2, 3), (1, 3, 2, 4),\n"
" (1, 4, 1, 3), (1, 4, 1, 4), (1, 4, 2, 3), (1, 4, 2, 4),\n"
" (2, 3, 1, 3), (2, 3, 1, 4), (2, 3, 2, 3), (2, 3, 2, 4),\n"
" (2, 4, 1, 3), (2, 4, 1, 4), (2, 4, 2, 3), (2, 4, 2, 4)]"
msgstr ""
">>> list(itertools.product([1,2], [3,4], repeat=2))\n"
"[(1, 3, 1, 3), (1, 3, 1, 4), (1, 3, 2, 3), (1, 3, 2, 4),\n"
" (1, 4, 1, 3), (1, 4, 1, 4), (1, 4, 2, 3), (1, 4, 2, 4),\n"
" (2, 3, 1, 3), (2, 3, 1, 4), (2, 3, 2, 3), (2, 3, 2, 4),\n"
" (2, 4, 1, 3), (2, 4, 1, 4), (2, 4, 2, 3), (2, 4, 2, 4)]"

msgid ""
"``combinations(iterable, r)`` returns sub-sequences of length *r* from the "
"elements of *iterable*. ::"
msgstr ""
"``combinations(iterable, r)`` returnerar undersekvenser med längden *r* från "
"elementen i *iterable*. ::"

msgid ""
">>> list(itertools.combinations('123', 2))\n"
"[('1', '2'), ('1', '3'), ('2', '3')]\n"
">>> list(itertools.combinations('123', 3))\n"
"[('1', '2', '3')]\n"
">>> list(itertools.combinations('1234', 3))\n"
"[('1', '2', '3'), ('1', '2', '4'),\n"
" ('1', '3', '4'), ('2', '3', '4')]"
msgstr ""
">>> list(itertools.kombinationer('123', 2))\n"
"[('1', '2'), ('1', '3'), ('2', '3')]\n"
">>> list(itertools.kombinationer('123', 3))\n"
"[('1', '2', '3')]\n"
">>> lista(itertools.kombinationer('1234', 3))\n"
"[('1', '2', '3'), ('1', '2', '4'),\n"
" ('1', '3', '4'), ('2', '3', '4')]"

msgid ""
"``permutations(iter[, r])`` returns all the permutations of length *r* of "
"the iterable's elements.  If *r* is not specified, it will default to the "
"number of elements produced by the iterable. ::"
msgstr ""
"``permutations(iter[, r])`` returnerar alla permutationer av längden *r* av "
"iterabelns element.  Om *r* inte anges, kommer det att vara standardvärdet "
"för antalet element som produceras av iterabeln. ::"

msgid ""
">>> list(itertools.permutations([1,2,3,4], 2))\n"
"[(1, 2), (1, 3), (1, 4),\n"
" (2, 1), (2, 3), (2, 4),\n"
" (3, 1), (3, 2), (3, 4),\n"
" (4, 1), (4, 2), (4, 3)]"
msgstr ""
">>> list(itertools.permutationer([1,2,3,4], 2))\n"
"[(1, 2), (1, 3), (1, 4),\n"
" (2, 1), (2, 3), (2, 4),\n"
" (3, 1), (3, 2), (3, 4),\n"
" (4, 1), (4, 2), (4, 3)]"

msgid ""
"``itertools.chain(*iterables)`` is an existing function in :mod:`itertools` "
"that gained a new constructor in Python 2.6. ``itertools.chain."
"from_iterable(iterable)`` takes a single iterable that should return other "
"iterables.  :func:`chain` will then return all the elements of the first "
"iterable, then all the elements of the second, and so on. ::"
msgstr ""
"``itertools.chain(*iterables)`` är en befintlig funktion i :mod:`itertools` "
"som fick en ny konstruktör i Python 2.6. ``itertools.chain."
"from_iterable(iterable)`` tar en enda iterable som ska returnera andra "
"iterables. :func:`chain` kommer då att returnera alla element i den första "
"iterable, sedan alla element i den andra, och så vidare:"

msgid ""
">>> list(itertools.chain.from_iterable([[1,2,3], [4,5,6]]))\n"
"[1, 2, 3, 4, 5, 6]"
msgstr ""
">>> list(itertools.chain.from_iterable([[1,2,3], [4,5,6]]))\n"
"[1, 2, 3, 4, 5, 6]"

msgid "(All contributed by Raymond Hettinger.)"
msgstr "(Alla bidrag från Raymond Hettinger.)"

msgid ""
"The :mod:`logging` module's :class:`FileHandler` class and its subclasses :"
"class:`WatchedFileHandler`, :class:`RotatingFileHandler`, and :class:"
"`TimedRotatingFileHandler` now have an optional *delay* parameter to their "
"constructors.  If *delay* is true, opening of the log file is deferred until "
"the first :meth:`emit` call is made.  (Contributed by Vinay Sajip.)"
msgstr ""
"Modulen :mod:`logging`:s klass :class:`FileHandler` och dess underklasser :"
"class:`WatchedFileHandler`, :class:`RotatingFileHandler` och :class:"
"`TimedRotatingFileHandler` har nu en valfri *delay*-parameter i sina "
"konstruktörer.  Om *delay* är true, skjuts öppningen av loggfilen upp tills "
"det första :meth:`emit`-anropet görs.  (Bidrag från Vinay Sajip.)"

msgid ""
":class:`TimedRotatingFileHandler` also has a *utc* constructor parameter.  "
"If the argument is true, UTC time will be used in determining when midnight "
"occurs and in generating filenames; otherwise local time will be used."
msgstr ""
":class:`TimedRotatingFileHandler` har också en *utc*-konstruktorparameter.  "
"Om argumentet är sant kommer UTC-tid att användas för att bestämma när "
"midnatt inträffar och för att generera filnamn; annars kommer lokal tid att "
"användas."

msgid "Several new functions were added to the :mod:`math` module:"
msgstr "Flera nya funktioner har lagts till i modulen :mod:`math`:"

msgid ""
":func:`~math.isinf` and :func:`~math.isnan` determine whether a given float "
"is a (positive or negative) infinity or a NaN (Not a Number), respectively."
msgstr ""
":func:`~math.isinf` och :func:`~math.isnan` avgör om ett givet flyttal är en "
"(positiv eller negativ) oändlighet respektive ett NaN (Not a Number)."

msgid ""
":func:`~math.copysign` copies the sign bit of an IEEE 754 number, returning "
"the absolute value of *x* combined with the sign bit of *y*.  For example, "
"``math.copysign(1, -0.0)`` returns -1.0. (Contributed by Christian Heimes.)"
msgstr ""
":func:`~math.copysign` kopierar teckenbiten i ett IEEE 754-tal och "
"returnerar det absoluta värdet av *x* kombinerat med teckenbiten i *y*.  "
"Till exempel, ``math.copysign(1, -0.0)`` returnerar -1.0. (Bidrag från "
"Christian Heimes.)"

msgid ""
":func:`~math.factorial` computes the factorial of a number. (Contributed by "
"Raymond Hettinger; :issue:`2138`.)"
msgstr ""
":func:`~math.factorial` beräknar faktorn av ett tal. (Bidrag från Raymond "
"Hettinger; :issue:`2138`.)"

msgid ""
":func:`~math.fsum` adds up the stream of numbers from an iterable, and is "
"careful to avoid loss of precision through using partial sums. (Contributed "
"by Jean Brouwers, Raymond Hettinger, and Mark Dickinson; :issue:`2819`.)"
msgstr ""
":func:`~math.fsum` adderar talflödet från en iterabel och är noga med att "
"undvika precisionsförlust genom att använda partiella summor. (Bidrag från "
"Jean Brouwers, Raymond Hettinger och Mark Dickinson; :issue:`2819`.)"

msgid ""
":func:`~math.acosh`, :func:`~math.asinh` and :func:`~math.atanh` compute the "
"inverse hyperbolic functions."
msgstr ""
":func:`~math.acosh`, :func:`~math.asinh` och :func:`~math.atanh` beräknar de "
"inversa hyperboliska funktionerna."

msgid ":func:`~math.log1p` returns the natural logarithm of *1+x* (base *e*)."
msgstr ""
":func:`~math.log1p` returnerar den naturliga logaritmen av *1+x* (bas *e*)."

msgid ""
":func:`trunc` rounds a number toward zero, returning the closest :class:"
"`Integral` that's between the function's argument and zero. Added as part of "
"the backport of `PEP 3141's type hierarchy for numbers <#pep-3141>`__."
msgstr ""
":func:`trunc` avrundar ett tal mot noll och returnerar den närmaste :class:"
"`Integral` som ligger mellan funktionens argument och noll. Tillagd som en "
"del av bakporten av `PEP 3141:s typhierarki för tal <#pep-3141>`__."

msgid ""
"The :mod:`math` module has been improved to give more consistent behaviour "
"across platforms, especially with respect to handling of floating-point "
"exceptions and IEEE 754 special values."
msgstr ""
"Modulen :mod:`math` har förbättrats för att ge ett mer konsekvent beteende "
"på olika plattformar, särskilt när det gäller hantering av undantag för "
"flyttal och specialvärden enligt IEEE 754."

msgid ""
"Whenever possible, the module follows the recommendations of the C99 "
"standard about 754's special values.  For example, ``sqrt(-1.)`` should now "
"give a :exc:`ValueError` across almost all platforms, while "
"``sqrt(float('NaN'))`` should return a NaN on all IEEE 754 platforms.  Where "
"Annex 'F' of the C99 standard recommends signaling 'divide-by-zero' or "
"'invalid', Python will raise :exc:`ValueError`. Where Annex 'F' of the C99 "
"standard recommends signaling 'overflow', Python will raise :exc:"
"`OverflowError`.  (See :issue:`711019` and :issue:`1640`.)"
msgstr ""
"När så är möjligt följer modulen rekommendationerna i C99-standarden om 754:"
"s specialvärden.  Till exempel bör ``sqrt(-1.)`` nu ge ett :exc:`ValueError` "
"på nästan alla plattformar, medan ``sqrt(float('NaN'))`` bör returnera ett "
"NaN på alla IEEE 754-plattformar.  Där bilaga 'F' i C99-standarden "
"rekommenderar att signalera 'divide-by-zero' eller 'invalid', kommer Python "
"att ge :exc:`ValueError`. Där bilaga 'F' i C99-standarden rekommenderar att "
"signalera 'overflow', kommer Python att ge :exc:`OverflowError`.  (Se :issue:"
"`711019` och :issue:`1640`.)"

msgid "(Contributed by Christian Heimes and Mark Dickinson.)"
msgstr "(Bidrag från Christian Heimes och Mark Dickinson.)"

msgid ""
":class:`~mmap.mmap` objects now have a :meth:`rfind` method that searches "
"for a substring beginning at the end of the string and searching backwards.  "
"The :meth:`find` method also gained an *end* parameter giving an index at "
"which to stop searching. (Contributed by John Lenton.)"
msgstr ""
":class:`~mmap.mmap`-objekt har nu en :meth:`rfind`-metod som söker efter en "
"delsträng med början i slutet av strängen och bakåt.  Metoden :meth:`find` "
"har också fått en *end*-parameter som anger ett index vid vilket sökningen "
"ska avslutas. (Bidrag från John Lenton.)"

msgid ""
"The :mod:`operator` module gained a :func:`methodcaller` function that takes "
"a name and an optional set of arguments, returning a callable that will call "
"the named function on any arguments passed to it.  For example::"
msgstr ""
"Modulen :mod:`operator` fick en :func:`methodcaller`-funktion som tar ett "
"namn och en valfri uppsättning argument och returnerar en anropbar funktion "
"som anropar den namngivna funktionen med alla argument som skickas till "
"den.  Till exempel::"

msgid ""
">>> # Equivalent to lambda s: s.replace('old', 'new')\n"
">>> replacer = operator.methodcaller('replace', 'old', 'new')\n"
">>> replacer('old wine in old bottles')\n"
"'new wine in new bottles'"
msgstr ""
">>> # Motsvarar lambda s: s.replace('old', 'new')\n"
">>> replacer = operator.methodcaller('replace', 'old', 'new')\n"
">>> replacer('gammalt vin i gamla flaskor')\n"
"'nytt vin i nya flaskor'"

msgid "(Contributed by Georg Brandl, after a suggestion by Gregory Petrosyan.)"
msgstr "(Bidrag från Georg Brandl, efter ett förslag från Gregory Petrosyan.)"

msgid ""
"The :func:`attrgetter` function now accepts dotted names and performs the "
"corresponding attribute lookups::"
msgstr ""
"Funktionen :func:`attrgetter` accepterar nu prickade namn och utför "
"motsvarande attributuppslagningar::"

msgid ""
">>> inst_name = operator.attrgetter(\n"
"...        '__class__.__name__')\n"
">>> inst_name('')\n"
"'str'\n"
">>> inst_name(help)\n"
"'_Helper'"
msgstr ""
">>> inst_name = operator.attrgetter(\n"
"...        '__class__.__name__')\n"
">>> inst_name('')\n"
"'str'\n"
">>> inst_name(hjälp)\n"
"'_Hjälpare'"

msgid "(Contributed by Georg Brandl, after a suggestion by Barry Warsaw.)"
msgstr "(Bidrag från Georg Brandl, efter ett förslag från Barry Warsaw.)"

msgid ""
"The :mod:`os` module now wraps several new system calls. ``fchmod(fd, "
"mode)`` and ``fchown(fd, uid, gid)`` change the mode and ownership of an "
"opened file, and ``lchmod(path, mode)`` changes the mode of a symlink.  "
"(Contributed by Georg Brandl and Christian Heimes.)"
msgstr ""
"Modulen :mod:`os` omsluter nu flera nya systemanrop. ``fchmod(fd, mode)`` "
"och ``fchown(fd, uid, gid)`` ändrar läge och ägandeskap för en öppnad fil, "
"och ``lchmod(path, mode)`` ändrar läget för en symlänk.  (Bidrag från Georg "
"Brandl och Christian Heimes.)"

msgid ""
":func:`chflags` and :func:`lchflags` are wrappers for the corresponding "
"system calls (where they're available), changing the flags set on a file.  "
"Constants for the flag values are defined in the :mod:`stat` module; some "
"possible values include :const:`UF_IMMUTABLE` to signal the file may not be "
"changed and :const:`UF_APPEND` to indicate that data can only be appended to "
"the file.  (Contributed by M. Levinson.)"
msgstr ""
":func:`chflags` och :func:`lchflags` är omslag för motsvarande systemanrop "
"(där de är tillgängliga), som ändrar flaggvärdena för en fil.  Konstanter "
"för flaggvärdena definieras i modulen :mod:`stat`; några möjliga värden "
"inkluderar :const:`UF_IMMUTABLE` för att signalera att filen inte får ändras "
"och :const:`UF_APPEND` för att indikera att data endast kan läggas till i "
"filen.  (Bidrag från M. Levinson.)"

msgid ""
"``os.closerange(low, high)`` efficiently closes all file descriptors from "
"*low* to *high*, ignoring any errors and not including *high* itself. This "
"function is now used by the :mod:`subprocess` module to make starting "
"processes faster.  (Contributed by Georg Brandl; :issue:`1663329`.)"
msgstr ""
"``os.closerange(low, high)``` stänger effektivt alla filbeskrivare från "
"*low* till *high*, ignorerar eventuella fel och inkluderar inte *high* "
"själv. Den här funktionen används nu av modulen :mod:`subprocess` för att "
"göra det snabbare att starta processer.  (Bidrag från Georg Brandl; :issue:"
"`1663329`.)"

msgid ""
"The ``os.environ`` object's :meth:`clear` method will now unset the "
"environment variables using :func:`os.unsetenv` in addition to clearing the "
"object's keys.  (Contributed by Martin Horcicka; :issue:`1181`.)"
msgstr ""
"Objektet ``os.environ``:s :meth:`clear`-metod kommer nu att återställa "
"miljövariablerna med :func:`os.unsetenv` förutom att rensa objektets "
"nycklar.  (Bidrag från Martin Horcicka; :issue:`1181`.)"

msgid ""
"The :func:`os.walk` function now has a ``followlinks`` parameter. If set to "
"True, it will follow symlinks pointing to directories and visit the "
"directory's contents.  For backward compatibility, the parameter's default "
"value is false.  Note that the function can fall into an infinite recursion "
"if there's a symlink that points to a parent directory.  (:issue:`1273829`)"
msgstr ""
"Funktionen :func:`os.walk` har nu en parameter för ``followlinks``. Om den "
"är satt till True kommer den att följa symlinks som pekar på kataloger och "
"besöka katalogens innehåll.  För bakåtkompatibilitet är parameterns "
"standardvärde false.  Observera att funktionen kan hamna i en oändlig "
"rekursion om det finns en symbollänk som pekar på en överordnad katalog.  (:"
"issue:`1273829`)"

msgid ""
"In the :mod:`os.path` module, the :func:`splitext` function has been changed "
"to not split on leading period characters. This produces better results when "
"operating on Unix's dot-files. For example, ``os.path.splitext('.ipython')`` "
"now returns ``('.ipython', '')`` instead of ``('', '.ipython')``. (:issue:"
"`1115886`)"
msgstr ""
"I modulen :mod:`os.path` har funktionen :func:`splitext` ändrats så att den "
"inte delar upp inledande punkttecken. Detta ger bättre resultat vid "
"användning av Unix punktfiler. Till exempel returnerar ```os.path.splitext('."
"ipython')`` nu ``('.ipython', '')`` istället för ``('', '.ipython')``. (:"
"issue:`1115886`)"

msgid ""
"A new function, ``os.path.relpath(path, start='.')``, returns a relative "
"path from the ``start`` path, if it's supplied, or from the current working "
"directory to the destination ``path``.  (Contributed by Richard Barran; :"
"issue:`1339796`.)"
msgstr ""
"En ny funktion, ``os.path.relpath(path, start='.')``, returnerar en relativ "
"sökväg från ``start``-sökvägen, om den anges, eller från den aktuella "
"arbetskatalogen till målet ``path``.  (Bidrag från Richard Barran; :issue:"
"`1339796`.)"

msgid ""
"On Windows, :func:`os.path.expandvars` will now expand environment variables "
"given in the form \"%var%\", and \"~user\" will be expanded into the user's "
"home directory path.  (Contributed by Josiah Carlson; :issue:`957650`.)"
msgstr ""
"I Windows kommer :func:`os.path.expandvars` nu att expandera miljövariabler "
"som anges i formen \"%var%\", och \"~user\" kommer att expanderas till "
"användarens sökväg till hemkatalogen.  (Bidrag från Josiah Carlson; :issue:"
"`957650`.)"

msgid ""
"The Python debugger provided by the :mod:`pdb` module gained a new command: "
"\"run\" restarts the Python program being debugged and can optionally take "
"new command-line arguments for the program. (Contributed by Rocky "
"Bernstein; :issue:`1393667`.)"
msgstr ""
"Python-felsökaren som tillhandahålls av modulen :mod:`pdb` har fått ett nytt "
"kommando: \"run\" startar om Python-programmet som felsöks och kan "
"eventuellt ta emot nya kommandoradsargument för programmet. (Bidrag från "
"Rocky Bernstein; :issue:`1393667`.)"

msgid ""
"The :func:`pdb.post_mortem` function, used to begin debugging a traceback, "
"will now use the traceback returned by :func:`sys.exc_info` if no traceback "
"is supplied.   (Contributed by Facundo Batista; :issue:`1106316`.)"
msgstr ""
"Funktionen :func:`pdb.post_mortem`, som används för att påbörja felsökning "
"av en spårning, kommer nu att använda den spårning som returneras av :func:"
"`sys.exc_info` om ingen spårning anges.   (Bidrag från Facundo Batista; :"
"issue:`1106316`.)"

msgid ""
"The :mod:`pickletools` module now has an :func:`optimize` function that "
"takes a string containing a pickle and removes some unused opcodes, "
"returning a shorter pickle that contains the same data structure. "
"(Contributed by Raymond Hettinger.)"
msgstr ""
"Modulen :mod:`pickletools` har nu en :func:`optimize`-funktion som tar en "
"sträng som innehåller en pickle och tar bort några oanvända opkoder, vilket "
"returnerar en kortare pickle som innehåller samma datastruktur. (Bidrag från "
"Raymond Hettinger.)"

msgid ""
"A :func:`get_data` function was added to the :mod:`pkgutil` module that "
"returns the contents of resource files included with an installed Python "
"package.  For example::"
msgstr ""
"En :func:`get_data`-funktion har lagts till i :mod:`pkgutil`-modulen som "
"returnerar innehållet i resursfiler som ingår i ett installerat Python-"
"paket.  Till exempel::"

msgid ""
">>> import pkgutil\n"
">>> print pkgutil.get_data('test', 'exception_hierarchy.txt')\n"
"BaseException\n"
" +-- SystemExit\n"
" +-- KeyboardInterrupt\n"
" +-- GeneratorExit\n"
" +-- Exception\n"
"      +-- StopIteration\n"
"      +-- StandardError\n"
" ..."
msgstr ""
">>> import pkgutil\n"
">>> print pkgutil.get_data('test', 'exception_hierarchy.txt')\n"
"BaseException\n"
" +-- Systemavslut\n"
" +-- KeyboardInterrupt\n"
" +-- GeneratorExit\n"
" +-- Undantag\n"
"      +-- StoppIteration\n"
"      +-- Standardfel\n"
" ..."

msgid "(Contributed by Paul Moore; :issue:`2439`.)"
msgstr "(Bidrag från Paul Moore; :issue:`2439`.)"

msgid ""
"The :mod:`pyexpat` module's :class:`Parser` objects now allow setting their :"
"attr:`buffer_size` attribute to change the size of the buffer used to hold "
"character data. (Contributed by Achim Gaedke; :issue:`1137`.)"
msgstr ""
":mod:`pyexpat`-modulens :class:`Parser`-objekt tillåter nu att man ställer "
"in deras :attr:`buffer_size`-attribut för att ändra storleken på den buffert "
"som används för att hålla teckendata. (Bidrag från Achim Gaedke; :issue:"
"`1137`.)"

msgid ""
"The :mod:`Queue` module now provides queue variants that retrieve entries in "
"different orders.  The :class:`PriorityQueue` class stores queued items in a "
"heap and retrieves them in priority order, and :class:`LifoQueue` retrieves "
"the most recently added entries first, meaning that it behaves like a stack. "
"(Contributed by Raymond Hettinger.)"
msgstr ""
"Modulen :mod:`Queue` tillhandahåller nu kövarianter som hämtar poster i "
"olika ordning.  Klassen :class:`PriorityQueue` lagrar köade objekt i en hög "
"och hämtar dem i prioritetsordning, och :class:`LifoQueue` hämtar de senast "
"tillagda objekten först, vilket innebär att den beter sig som en stack. "
"(Bidrag från Raymond Hettinger.)"

msgid ""
"The :mod:`random` module's :class:`Random` objects can now be pickled on a "
"32-bit system and unpickled on a 64-bit system, and vice versa.  "
"Unfortunately, this change also means that Python 2.6's :class:`Random` "
"objects can't be unpickled correctly on earlier versions of Python. "
"(Contributed by Shawn Ligocki; :issue:`1727780`.)"
msgstr ""
"Modulen :mod:`random`:s :class:`Random`-objekt kan nu picklas på ett 32-"
"bitars system och unpicklas på ett 64-bitars system, och vice versa.  Tyvärr "
"innebär denna förändring också att Python 2.6:s :class:`Random`-objekt inte "
"kan avpicklas korrekt på tidigare versioner av Python. (Bidrag från Shawn "
"Ligocki; :issue:`1727780`.)"

msgid ""
"The new ``triangular(low, high, mode)`` function returns random numbers "
"following a triangular distribution.   The returned values are between *low* "
"and *high*, not including *high* itself, and with *mode* as the most "
"frequently occurring value in the distribution.  (Contributed by Wladmir van "
"der Laan and Raymond Hettinger; :issue:`1681432`.)"
msgstr ""
"Den nya funktionen ``triangular(low, high, mode)`` returnerar slumpmässiga "
"tal som följer en triangulär fördelning.   De returnerade värdena ligger "
"mellan *låg* och *hög*, exklusive *hög* själv, och med *mode* som det mest "
"frekvent förekommande värdet i fördelningen.  (Bidrag från Wladmir van der "
"Laan och Raymond Hettinger; :issue:`1681432`.)"

msgid ""
"Long regular expression searches carried out by the  :mod:`re` module will "
"check for signals being delivered, so time-consuming searches can now be "
"interrupted. (Contributed by Josh Hoyt and Ralf Schmitt; :issue:`846388`.)"
msgstr ""
"Långa sökningar med reguljära uttryck som utförs av modulen :mod:`re` kommer "
"att kontrollera om signaler levereras, så tidskrävande sökningar kan nu "
"avbrytas. (Bidrag från Josh Hoyt och Ralf Schmitt; :issue:`846388`.)"

msgid ""
"The regular expression module is implemented by compiling bytecodes for a "
"tiny regex-specific virtual machine.  Untrusted code could create malicious "
"strings of bytecode directly and cause crashes, so Python 2.6 includes a "
"verifier for the regex bytecode. (Contributed by Guido van Rossum from work "
"for Google App Engine; :issue:`3487`.)"
msgstr ""
"Modulen för reguljära uttryck implementeras genom att kompilera bytekoder "
"för en liten regex-specifik virtuell maskin.  Otillförlitlig kod kan skapa "
"skadliga strängar av bytecode direkt och orsaka kraschar, så Python 2.6 "
"innehåller en verifierare för regex-bytecode. (Bidrag från Guido van Rossum "
"från arbetet för Google App Engine; :issue:`3487`.)"

msgid ""
"The :mod:`rlcompleter` module's :meth:`Completer.complete` method will now "
"ignore exceptions triggered while evaluating a name. (Fixed by Lorenz "
"Quack; :issue:`2250`.)"
msgstr ""
"Modulen :mod:`rlcompleter`:s metod :meth:`Completer.complete` ignorerar nu "
"undantag som utlöses när ett namn utvärderas. (Rättad av Lorenz Quack; :"
"issue:`2250`.)"

msgid ""
"The :mod:`sched` module's :class:`scheduler` instances now have a read-only :"
"attr:`queue` attribute that returns the contents of the scheduler's queue, "
"represented as a list of named tuples with the fields ``(time, priority, "
"action, argument)``. (Contributed by Raymond Hettinger; :issue:`1861`.)"
msgstr ""
":mod:`sched`-modulens :class:`scheduler`-instanser har nu ett skrivskyddat :"
"attr:`queue`-attribut som returnerar innehållet i schemaläggarens kö, "
"representerad som en lista av namngivna tuples med fälten ``(tid, prioritet, "
"åtgärd, argument)``. (Bidrag från Raymond Hettinger; :issue:`1861`.)"

msgid ""
"The :mod:`select` module now has wrapper functions for the Linux :c:func:`!"
"epoll` and BSD :c:func:`!kqueue` system calls. :meth:`modify` method was "
"added to the existing :class:`poll` objects; ``pollobj.modify(fd, "
"eventmask)`` takes a file descriptor or file object and an event mask, "
"modifying the recorded event mask for that file. (Contributed by Christian "
"Heimes; :issue:`1657`.)"
msgstr ""
"Modulen :mod:`select` har nu omslagsfunktioner för systemanropen Linux :c:"
"func:`!epoll` och BSD :c:func:`!kqueue`. Metoden :meth:`modify` lades till i "
"de befintliga objekten :class:`poll`; ``pollobj.modify(fd, eventmask)`` tar "
"en filbeskrivning eller ett filobjekt och en händelsemask och ändrar den "
"inspelade händelsemasken för filen. (Bidrag från Christian Heimes; :issue:"
"`1657`.)"

msgid ""
"The :func:`shutil.copytree` function now has an optional *ignore* argument "
"that takes a callable object.  This callable will receive each directory "
"path and a list of the directory's contents, and returns a list of names "
"that will be ignored, not copied."
msgstr ""
"Funktionen :func:`shutil.copytree` har nu ett valfritt *ignore*-argument som "
"tar ett anropbart objekt.  Detta anropsbara objekt tar emot varje "
"katalogsökväg och en lista över katalogens innehåll och returnerar en lista "
"med namn som ignoreras och inte kopieras."

msgid ""
"The :mod:`shutil` module also provides an :func:`ignore_patterns` function "
"for use with this new parameter.  :func:`ignore_patterns` takes an arbitrary "
"number of glob-style patterns and returns a callable that will ignore any "
"files and directories that match any of these patterns.  The following "
"example copies a directory tree, but skips both :file:`.svn` directories and "
"Emacs backup files, which have names ending with '~'::"
msgstr ""
"Modulen :mod:`shutil` innehåller också en funktion :func:`ignore_patterns` "
"som kan användas med den här nya parametern. :func:`ignore_patterns` tar ett "
"godtyckligt antal glob-mönster och returnerar en anropbar funktion som "
"ignorerar alla filer och kataloger som matchar något av dessa mönster.  "
"Följande exempel kopierar ett katalogträd, men hoppar över både :file:`.svn`-"
"kataloger och Emacs backup-filer, som har namn som slutar med '~'::"

msgid ""
"shutil.copytree('Doc/library', '/tmp/library',\n"
"                ignore=shutil.ignore_patterns('*~', '.svn'))"
msgstr ""
"shutil.copytree('Doc/library', '/tmp/library',\n"
"                ignore=shutil.ignore_patterns('*~', '.svn'))"

msgid "(Contributed by Tarek Ziadé; :issue:`2663`.)"
msgstr "(Bidrag från Tarek Ziadé; :issue:`2663`.)"

msgid ""
"Integrating signal handling with GUI handling event loops like those used by "
"Tkinter or GTk+ has long been a problem; most software ends up polling, "
"waking up every fraction of a second to check if any GUI events have "
"occurred. The :mod:`signal` module can now make this more efficient. Calling "
"``signal.set_wakeup_fd(fd)`` sets a file descriptor to be used; when a "
"signal is received, a byte is written to that file descriptor.  There's also "
"a C-level function, :c:func:`PySignal_SetWakeupFd`, for setting the "
"descriptor."
msgstr ""
"Att integrera signalhantering med händelseslingor för GUI-hantering som de "
"som används av Tkinter eller GTk+ har länge varit ett problem; de flesta "
"programvaror slutar med polling, att vakna upp varje bråkdel av en sekund "
"för att kontrollera om några GUI-händelser har inträffat. Modulen :mod:"
"`signal` kan nu göra detta mer effektivt. Genom att anropa ``signal."
"set_wakeup_fd(fd)`` anges en filbeskrivare som ska användas; när en signal "
"tas emot skrivs en byte till den filbeskrivaren.  Det finns också en "
"funktion på C-nivå, :c:func:`PySignal_SetWakeupFd`, för att ställa in "
"descriptorn."

msgid ""
"Event loops will use this by opening a pipe to create two descriptors, one "
"for reading and one for writing.  The writable descriptor will be passed to :"
"func:`set_wakeup_fd`, and the readable descriptor will be added to the list "
"of descriptors monitored by the event loop via :c:func:`!select` or :c:func:"
"`!poll`. On receiving a signal, a byte will be written and the main event "
"loop will be woken up, avoiding the need to poll."
msgstr ""
"Händelseslingor använder detta genom att öppna en pipe för att skapa två "
"deskriptorer, en för läsning och en för skrivning.  Den skrivbara "
"deskriptorn skickas till :func:`set_wakeup_fd`, och den läsbara deskriptorn "
"läggs till i listan över deskriptorer som övervakas av händelseslingan via :"
"c:func:`!select` eller :c:func:`!poll`. När en signal tas emot skrivs en "
"byte och huvudhändelseslingan väcks, vilket gör att pollning inte behövs."

msgid "(Contributed by Adam Olsen; :issue:`1583`.)"
msgstr "(Bidrag från Adam Olsen; :issue:`1583`.)"

msgid ""
"The :func:`siginterrupt` function is now available from Python code, and "
"allows changing whether signals can interrupt system calls or not. "
"(Contributed by Ralf Schmitt.)"
msgstr ""
"Funktionen :func:`siginterrupt` är nu tillgänglig från Python-kod och gör "
"det möjligt att ändra om signaler kan avbryta systemanrop eller inte. "
"(Bidrag från Ralf Schmitt.)"

msgid ""
"The :func:`setitimer` and :func:`getitimer` functions have also been added "
"(where they're available).  :func:`setitimer` allows setting interval timers "
"that will cause a signal to be delivered to the process after a specified "
"time, measured in wall-clock time, consumed process time, or combined "
"process+system time.  (Contributed by Guilherme Polo; :issue:`2240`.)"
msgstr ""
"Funktionerna :func:`setitimer` och :func:`getitimer` har också lagts till "
"(där de är tillgängliga). :func:`setitimer` gör det möjligt att ställa in "
"intervalltidtagare som gör att en signal levereras till processen efter en "
"angiven tid, mätt i väggklocktid, förbrukad processtid eller kombinerad "
"process+systemtid.  (Bidrag från Guilherme Polo; :issue:`2240`.)"

msgid ""
"The :mod:`smtplib` module now supports SMTP over SSL thanks to the addition "
"of the :class:`SMTP_SSL` class. This class supports an interface identical "
"to the existing :class:`SMTP` class. (Contributed by Monty Taylor.)  Both "
"class constructors also have an optional ``timeout`` parameter that "
"specifies a timeout for the initial connection attempt, measured in "
"seconds.  (Contributed by Facundo Batista.)"
msgstr ""
"Modulen :mod:`smtplib` har nu stöd för SMTP över SSL tack vare tillägget av "
"klassen :class:`SMTP_SSL`. Denna klass stöder ett gränssnitt som är "
"identiskt med den befintliga :class:`SMTP`-klassen. (Bidrag från Monty "
"Taylor.) Båda klasskonstruktörerna har också en valfri ``timeout``-parameter "
"som anger en timeout för det första anslutningsförsöket, mätt i sekunder.  "
"(Bidrag från Facundo Batista.)"

msgid ""
"An implementation of the LMTP protocol (:rfc:`2033`) was also added to the "
"module.  LMTP is used in place of SMTP when transferring e-mail between "
"agents that don't manage a mail queue.  (LMTP implemented by Leif Hedstrom; :"
"issue:`957003`.)"
msgstr ""
"En implementering av LMTP-protokollet (:rfc:`2033`) har också lagts till i "
"modulen.  LMTP används i stället för SMTP vid överföring av e-post mellan "
"agenter som inte hanterar en e-postkö.  (LMTP implementerat av Leif "
"Hedström; :issue:`957003`.)"

msgid ""
":meth:`SMTP.starttls` now complies with :rfc:`3207` and forgets any "
"knowledge obtained from the server not obtained from the TLS negotiation "
"itself.  (Patch contributed by Bill Fenner; :issue:`829951`.)"
msgstr ""
":meth:`SMTP.starttls` följer nu :rfc:`3207` och glömmer all kunskap som "
"erhålls från servern som inte erhålls från själva TLS-förhandlingen.  (Patch "
"bidragit av Bill Fenner; :issue:`829951`.)"

msgid ""
"The :mod:`socket` module now supports TIPC (https://tipc.sourceforge.net/), "
"a high-performance non-IP-based protocol designed for use in clustered "
"environments.  TIPC addresses are 4- or 5-tuples. (Contributed by Alberto "
"Bertogli; :issue:`1646`.)"
msgstr ""
"Modulen :mod:`socket` har nu stöd för TIPC (https://tipc.sourceforge.net/), "
"ett högpresterande icke-IP-baserat protokoll som är utformat för användning "
"i klustermiljöer.  TIPC-adresser är 4- eller 5-tupler. (Bidrag från Alberto "
"Bertogli; :issue:`1646`.)"

msgid ""
"A new function, :func:`create_connection`, takes an address and connects to "
"it using an optional timeout value, returning the connected socket object.  "
"This function also looks up the address's type and connects to it using IPv4 "
"or IPv6 as appropriate.  Changing your code to use :func:`create_connection` "
"instead of ``socket(socket.AF_INET, ...)`` may be all that's required to "
"make your code work with IPv6."
msgstr ""
"En ny funktion, :func:`create_connection`, tar en adress och ansluter till "
"den med hjälp av ett valfritt timeoutvärde och returnerar det anslutna "
"socketobjektet.  Den här funktionen söker också upp adressens typ och "
"ansluter till den med IPv4 eller IPv6 beroende på vad som är lämpligt.  Att "
"ändra din kod så att den använder :func:`create_connection` istället för "
"``socket(socket.AF_INET, ...)`` kan vara allt som krävs för att få din kod "
"att fungera med IPv6."

msgid ""
"The base classes in the :mod:`SocketServer <socketserver>` module now "
"support calling a :meth:`~socketserver.BaseServer.handle_timeout` method "
"after a span of inactivity specified by the server's :attr:`~socketserver."
"BaseServer.timeout` attribute.  (Contributed by Michael Pomraning.)  The :"
"meth:`~socketserver.BaseServer.serve_forever` method now takes an optional "
"poll interval measured in seconds, controlling how often the server will "
"check for a shutdown request. (Contributed by Pedro Werneck and Jeffrey "
"Yasskin; :issue:`742598`, :issue:`1193577`.)"
msgstr ""
"Basklasserna i modulen :mod:`SocketServer <socketserver>` stöder nu anrop av "
"metoden :meth:`~socketserver.BaseServer.handle_timeout` efter en tid av "
"inaktivitet som anges av serverns attribut :attr:`~socketserver.BaseServer."
"timeout`.  (Bidrag från Michael Pomraning.) Metoden :meth:`~socketserver."
"BaseServer.serve_forever` tar nu ett valfritt pollintervall mätt i sekunder, "
"vilket styr hur ofta servern ska kontrollera om det finns en begäran om "
"avstängning. (Bidrag från Pedro Werneck och Jeffrey Yasskin; :issue:"
"`742598`, :issue:`1193577`.)"

msgid ""
"The :mod:`sqlite3` module, maintained by Gerhard Häring, has been updated "
"from version 2.3.2 in Python 2.5 to version 2.4.1."
msgstr ""
"Modulen :mod:`sqlite3`, som underhålls av Gerhard Häring, har uppdaterats "
"från version 2.3.2 i Python 2.5 till version 2.4.1."

msgid ""
"The :mod:`struct` module now supports the C99 :c:expr:`_Bool` type, using "
"the format character ``'?'``. (Contributed by David Remahl.)"
msgstr ""
"Modulen :mod:`struct` har nu stöd för C99-typen :c:expr:`_Bool`, som "
"använder formattecknet ``'?'``. (Bidrag från David Remahl.)"

msgid ""
"The :class:`~subprocess.Popen` objects provided by the :mod:`subprocess` "
"module now have :meth:`~subprocess.Popen.terminate`, :meth:`~subprocess."
"Popen.kill`, and :meth:`~subprocess.Popen.send_signal` methods. On Windows, :"
"meth:`!send_signal` only supports the :py:const:`~signal.SIGTERM` signal, "
"and all these methods are aliases for the Win32 API function :c:func:`!"
"TerminateProcess`. (Contributed by Christian Heimes.)"
msgstr ""
"Objekten :class:`~subprocess.Popen` som tillhandahålls av modulen :mod:"
"`subprocess` har nu metoderna :meth:`~subprocess.Popen.terminate`, :meth:"
"`~subprocess.Popen.kill` och :meth:`~subprocess.Popen.send_signal`. På "
"Windows stöder :meth:`!send_signal` endast signalen :py:const:`~signal."
"SIGTERM`, och alla dessa metoder är alias för Win32 API-funktionen :c:func:`!"
"TerminateProcess`. (Bidrag från Christian Heimes.)"

msgid ""
"A new variable in the :mod:`sys` module, :attr:`float_info`, is an object "
"containing information derived from the :file:`float.h` file about the "
"platform's floating-point support.  Attributes of this object include :attr:"
"`mant_dig` (number of digits in the mantissa), :attr:`epsilon` (smallest "
"difference between 1.0 and the next largest value representable), and "
"several others.  (Contributed by Christian Heimes; :issue:`1534`.)"
msgstr ""
"En ny variabel i modulen :mod:`sys`, :attr:`float_info`, är ett objekt som "
"innehåller information från filen :file:`float.h` om plattformens stöd för "
"flyttal.  Attribut för detta objekt inkluderar :attr:`mant_dig` (antal "
"siffror i mantissan), :attr:`epsilon` (minsta skillnaden mellan 1,0 och "
"nästa största representerbara värde), och flera andra.  (Bidrag från "
"Christian Heimes; :issue:`1534`.)"

msgid ""
"Another new variable, :attr:`dont_write_bytecode`, controls whether Python "
"writes any :file:`.pyc` or :file:`.pyo` files on importing a module. If this "
"variable is true, the compiled files are not written.  The variable is "
"initially set on start-up by supplying the :option:`-B` switch to the Python "
"interpreter, or by setting the :envvar:`PYTHONDONTWRITEBYTECODE` environment "
"variable before running the interpreter.  Python code can subsequently "
"change the value of this variable to control whether bytecode files are "
"written or not. (Contributed by Neal Norwitz and Georg Brandl.)"
msgstr ""
"En annan ny variabel, :attr:`dont_write_bytecode`, styr om Python skriver "
"några :file:`.pyc`- eller :file:`.pyo`-filer vid import av en modul. Om "
"variabeln är true skrivs inte de kompilerade filerna.  Variabeln ställs in "
"initialt vid start genom att ange :option:`-B` till Python-tolken, eller "
"genom att ställa in miljövariabeln :envvar:`PYTHONDONTWRITEBYTECODE` innan "
"tolken körs.  Python-kod kan därefter ändra värdet på denna variabel för att "
"kontrollera om bytecode-filer skrivs eller inte. (Bidrag från Neal Norwitz "
"och Georg Brandl.)"

msgid ""
"Information about the command-line arguments supplied to the Python "
"interpreter is available by reading attributes of a named tuple available as "
"``sys.flags``.  For example, the :attr:`verbose` attribute is true if Python "
"was executed in verbose mode, :attr:`debug` is true in debugging mode, etc. "
"These attributes are all read-only. (Contributed by Christian Heimes.)"
msgstr ""
"Information om kommandoradsargumenten som levereras till Python-tolken är "
"tillgänglig genom att läsa attribut för en namngiven tupel som finns "
"tillgänglig som ``sys.flags``.  Exempelvis är attributet :attr:`verbose` "
"sant om Python kördes i verbose-läge, :attr:`debug` är sant i debugging-"
"läge, etc. Alla dessa attribut är skrivskyddade. (Bidrag från Christian "
"Heimes.)"

msgid ""
"A new function, :func:`getsizeof`, takes a Python object and returns the "
"amount of memory used by the object, measured in bytes.  Built-in objects "
"return correct results; third-party extensions may not, but can define a :"
"meth:`__sizeof__` method to return the object's size. (Contributed by Robert "
"Schuppenies; :issue:`2898`.)"
msgstr ""
"En ny funktion, :func:`getsizeof`, tar ett Python-objekt och returnerar den "
"mängd minne som används av objektet, mätt i byte.  Inbyggda objekt "
"returnerar korrekta resultat; tredjepartstillägg kanske inte gör det, men "
"kan definiera en :meth:`__sizeof__`-metod för att returnera objektets "
"storlek. (Bidrag från Robert Schuppenies; :issue:`2898`.)"

msgid ""
"It's now possible to determine the current profiler and tracer functions by "
"calling :func:`sys.getprofile` and :func:`sys.gettrace`. (Contributed by "
"Georg Brandl; :issue:`1648`.)"
msgstr ""
"Det är nu möjligt att bestämma de aktuella profilerings- och "
"spårningsfunktionerna genom att anropa :func:`sys.getprofile` och :func:`sys."
"gettrace`. (Bidrag från Georg Brandl; :issue:`1648`.)"

msgid ""
"The :mod:`tarfile` module now supports POSIX.1-2001 (pax) tarfiles in "
"addition to the POSIX.1-1988 (ustar) and GNU tar formats that were already "
"supported.  The default format is GNU tar; specify the ``format`` parameter "
"to open a file using a different format::"
msgstr ""
"Modulen :mod:`tarfile` stöder nu POSIX.1-2001 (pax)-tarfiler utöver "
"POSIX.1-1988 (ustar)- och GNU tar-formaten som redan tidigare stöddes.  "
"Standardformatet är GNU tar; ange parametern ``format`` för att öppna en fil "
"med ett annat format::"

msgid ""
"tar = tarfile.open(\"output.tar\", \"w\",\n"
"                   format=tarfile.PAX_FORMAT)"
msgstr ""
"tar = tarfile.open(\"output.tar\", \"w\",\n"
"                   format=tarfile.PAX_FORMAT)"

msgid ""
"The new ``encoding`` and ``errors`` parameters specify an encoding and an "
"error handling scheme for character conversions.  ``'strict'``, "
"``'ignore'``, and ``'replace'`` are the three standard ways Python can "
"handle errors,; ``'utf-8'`` is a special value that replaces bad characters "
"with their UTF-8 representation.  (Character conversions occur because the "
"PAX format supports Unicode filenames, defaulting to UTF-8 encoding.)"
msgstr ""
"De nya parametrarna ``encoding`` och ``errors`` anger en kodning och ett "
"felhanteringsschema för teckenkonverteringar.  ``'strict'``, ``'ignore'`` "
"och ``'replace'`` är de tre standardsätten som Python kan hantera fel på; "
"``'utf-8'`` är ett specialvärde som ersätter dåliga tecken med deras UTF-8-"
"representation.  (Teckenkonvertering sker eftersom PAX-formatet stöder "
"Unicode-filnamn och som standard använder UTF-8-kodning)"

msgid ""
"The :meth:`TarFile.add` method now accepts an ``exclude`` argument that's a "
"function that can be used to exclude certain filenames from an archive. The "
"function must take a filename and return true if the file should be excluded "
"or false if it should be archived. The function is applied to both the name "
"initially passed to :meth:`add` and to the names of files in recursively "
"added directories."
msgstr ""
"Metoden :meth:`TarFile.add` accepterar nu ett ``exclude``-argument som är en "
"funktion som kan användas för att utesluta vissa filnamn från ett arkiv. "
"Funktionen måste ta ett filnamn och returnera true om filen ska uteslutas "
"eller false om den ska arkiveras. Funktionen tillämpas både på det namn som "
"ursprungligen skickades till :meth:`add` och på namnen på filer i rekursivt "
"tillagda kataloger."

msgid "(All changes contributed by Lars Gustäbel)."
msgstr "(Alla ändringar har gjorts av Lars Gustäbel)."

msgid ""
"An optional ``timeout`` parameter was added to the :class:`!telnetlib."
"Telnet` class constructor, specifying a timeout measured in seconds.  (Added "
"by Facundo Batista.)"
msgstr ""
"En valfri ``timeout``-parameter lades till i :class:`!telnetlib.Telnet`-"
"klassens konstruktör, som anger en timeout mätt i sekunder.  (Tillagd av "
"Facundo Batista.)"

msgid ""
"The :class:`tempfile.NamedTemporaryFile` class usually deletes the temporary "
"file it created when the file is closed.  This behaviour can now be changed "
"by passing ``delete=False`` to the constructor.  (Contributed by Damien "
"Miller; :issue:`1537850`.)"
msgstr ""
"Klassen :class:`tempfile.NamedTemporaryFile` raderar vanligtvis den "
"temporära fil som den skapade när filen stängs.  Detta beteende kan nu "
"ändras genom att skicka ``delete=False`` till konstruktören.  (Bidrag från "
"Damien Miller; :issue:`1537850`.)"

msgid ""
"A new class, :class:`SpooledTemporaryFile`, behaves like a temporary file "
"but stores its data in memory until a maximum size is exceeded.  On reaching "
"that limit, the contents will be written to an on-disk temporary file.  "
"(Contributed by Dustin J. Mitchell.)"
msgstr ""
"En ny klass, :class:`SpooledTemporaryFile`, beter sig som en temporär fil "
"men lagrar sina data i minnet tills en maximal storlek överskrids.  När "
"denna gräns nås skrivs innehållet till en temporär fil på disken.  (Bidrag "
"från Dustin J. Mitchell.)"

msgid ""
"The :class:`NamedTemporaryFile` and :class:`SpooledTemporaryFile` classes "
"both work as context managers, so you can write ``with tempfile."
"NamedTemporaryFile() as tmp: ...``. (Contributed by Alexander Belopolsky; :"
"issue:`2021`.)"
msgstr ""
"Klasserna :class:`NamedTemporaryFile` och :class:`SpooledTemporaryFile` "
"fungerar båda som kontexthanterare, så att du kan skriva ``with tempfile."
"NamedTemporaryFile() as tmp: ...``. (Bidrag från Alexander Belopolsky; :"
"issue:`2021`.)"

msgid ""
"The :mod:`test.test_support <test.support>` module gained a number of "
"context managers useful for writing tests. :func:`~test.support.os_helper."
"EnvironmentVarGuard` is a context manager that temporarily changes "
"environment variables and automatically restores them to their old values."
msgstr ""
"Modulen :mod:`test.test_support <test.support>` innehåller ett antal "
"kontexthanterare som är användbara för att skriva tester. :func:`~test."
"support.os_helper.EnvironmentVarGuard` är en kontexthanterare som "
"tillfälligt ändrar miljövariabler och automatiskt återställer dem till deras "
"gamla värden."

msgid ""
"Another context manager, :class:`TransientResource`, can surround calls to "
"resources that may or may not be available; it will catch and ignore a "
"specified list of exceptions.  For example, a network test may ignore "
"certain failures when connecting to an external web site::"
msgstr ""
"En annan kontexthanterare, :class:`TransientResource`, kan omge anrop till "
"resurser som kan vara tillgängliga eller inte; den fångar upp och ignorerar "
"en specificerad lista med undantag.  Ett nätverkstest kan t.ex. ignorera "
"vissa fel vid anslutning till en extern webbplats::"

msgid ""
"with test_support.TransientResource(IOError,\n"
"                                errno=errno.ETIMEDOUT):\n"
"    f = urllib.urlopen('https://sf.net')\n"
"    ..."
msgstr ""
"med test_support.TransientResource(IOError,\n"
"                                errno=errno.ETIMEDOUT):\n"
"    f = urllib.urlopen('https://sf.net')\n"
"    ..."

msgid ""
"Finally, :func:`check_warnings` resets the :mod:`warning` module's warning "
"filters and returns an object that will record all warning messages "
"triggered (:issue:`3781`)::"
msgstr ""
"Slutligen återställer :func:`check_warnings` :mod:`warning`-modulens "
"varningsfilter och returnerar ett objekt som registrerar alla "
"varningsmeddelanden som utlösts (:issue:`3781`)::"

msgid ""
"with test_support.check_warnings() as wrec:\n"
"    warnings.simplefilter(\"always\")\n"
"    # ... code that triggers a warning ...\n"
"    assert str(wrec.message) == \"function is outdated\"\n"
"    assert len(wrec.warnings) == 1, \"Multiple warnings raised\""
msgstr ""
"med test_support.check_warnings() som wrec:\n"
"    warnings.simplefilter(\"alltid\")\n"
"    # ... kod som utlöser en varning ...\n"
"    assert str(wrec.message) == \"funktionen är föråldrad\"\n"
"    assert len(wrec.warnings) == 1, \"Flera varningar utlöses\""

msgid "(Contributed by Brett Cannon.)"
msgstr "(Bidrag från Brett Cannon.)"

msgid ""
"The :mod:`textwrap` module can now preserve existing whitespace at the "
"beginnings and ends of the newly created lines by specifying "
"``drop_whitespace=False`` as an argument::"
msgstr ""
"Modulen :mod:`textwrap` kan nu bevara befintliga blanksteg i början och "
"slutet av de nyskapade raderna genom att ange ``drop_whitespace=False`` som "
"argument::"

msgid ""
">>> S = \"\"\"This  sentence  has a bunch   of\n"
"...   extra   whitespace.\"\"\"\n"
">>> print textwrap.fill(S, width=15)\n"
"This  sentence\n"
"has a bunch\n"
"of    extra\n"
"whitespace.\n"
">>> print textwrap.fill(S, drop_whitespace=False, width=15)\n"
"This  sentence\n"
"  has a bunch\n"
"   of    extra\n"
"   whitespace.\n"
">>>"
msgstr ""
">>> S = \"\"\"Den här meningen har en massa\n"
"... extra blanksteg.\"\"\"\n"
">>> print textwrap.fill(S, width=15)\n"
"Den här meningen\n"
"har en massa\n"
"extra\n"
"blanksteg.\n"
">>> Skriv ut textwrap.fill(S, drop_whitespace=False, width=15)\n"
"Den här meningen\n"
"  har en massa\n"
"   av extra\n"
"   blanksteg.\n"
">>>"

msgid "(Contributed by Dwayne Bailey; :issue:`1581073`.)"
msgstr "(Bidrag från Dwayne Bailey; :issue:`1581073`.)"

msgid ""
"The :mod:`threading` module API is being changed to use properties such as :"
"attr:`daemon` instead of :meth:`setDaemon` and :meth:`isDaemon` methods, and "
"some methods have been renamed to use underscores instead of camel-case; for "
"example, the :meth:`activeCount` method is renamed to :meth:`active_count`.  "
"Both the 2.6 and 3.0 versions of the module support the same properties and "
"renamed methods, but don't remove the old methods.  No date has been set for "
"the deprecation of the old APIs in Python 3.x; the old APIs won't be removed "
"in any 2.x version. (Carried out by several people, most notably Benjamin "
"Peterson.)"
msgstr ""
"API:et för modulen :mod:`threading` har ändrats så att egenskaper som :attr:"
"`daemon` används i stället för metoderna :meth:`setDaemon` och :meth:"
"`isDaemon`, och vissa metoder har bytt namn så att de använder understreck i "
"stället för versaler, t.ex. har metoden :meth:`activeCount` bytt namn till :"
"meth:`active_count`.  Både 2.6- och 3.0-versionerna av modulen stöder samma "
"egenskaper och omdöpta metoder, men tar inte bort de gamla metoderna.  Inget "
"datum har fastställts för utfasningen av de gamla API: erna i Python 3.x; de "
"gamla API: erna kommer inte att tas bort i någon 2.x-version. (Genomfört av "
"flera personer, särskilt Benjamin Peterson.)"

msgid ""
"The :mod:`threading` module's :class:`Thread` objects gained an :attr:"
"`ident` property that returns the thread's identifier, a nonzero integer.  "
"(Contributed by Gregory P. Smith; :issue:`2871`.)"
msgstr ""
":mod:`threading`-modulens :class:`Thread`-objekt fick en :attr:`ident`-"
"egenskap som returnerar trådens identifierare, ett heltal som inte är noll.  "
"(Bidrag från Gregory P. Smith; :issue:`2871`.)"

msgid ""
"The :mod:`timeit` module now accepts callables as well as strings for the "
"statement being timed and for the setup code. Two convenience functions were "
"added for creating :class:`Timer` instances: ``repeat(stmt, setup, time, "
"repeat, number)`` and ``timeit(stmt, setup, time, number)`` create an "
"instance and call the corresponding method. (Contributed by Erik Demaine; :"
"issue:`1533909`.)"
msgstr ""
"Modulen :mod:`timeit` accepterar nu anropsbara objekt samt strängar för det "
"uttalande som tidsbestäms och för inställningskoden. Två "
"bekvämlighetsfunktioner har lagts till för att skapa :class:`Timer`-"
"instanser: ``repeat(stmt, setup, time, repeat, number)`` och ``timeit(stmt, "
"setup, time, number)`` skapar en instans och anropar motsvarande metod. "
"(Bidrag från Erik Demaine; :issue:`1533909`.)"

msgid ""
"The :mod:`Tkinter` module now accepts lists and tuples for options, "
"separating the elements by spaces before passing the resulting value to Tcl/"
"Tk. (Contributed by Guilherme Polo; :issue:`2906`.)"
msgstr ""
"Modulen :mod:`Tkinter` accepterar nu listor och tupler som alternativ och "
"separerar elementen med mellanslag innan det resulterande värdet skickas "
"till Tcl/Tk. (Bidrag från Guilherme Polo; :issue:`2906`.)"

msgid ""
"The :mod:`turtle` module for turtle graphics was greatly enhanced by Gregor "
"Lingl.  New features in the module include:"
msgstr ""
"Modulen :mod:`turtle` för sköldpaddsgrafik har förbättrats avsevärt av "
"Gregor Lingl.  Nya funktioner i modulen inkluderar:"

msgid "Better animation of turtle movement and rotation."
msgstr "Bättre animering av sköldpaddans rörelse och rotation."

msgid ""
"Control over turtle movement using the new :meth:`delay`, :meth:`tracer`, "
"and :meth:`speed` methods."
msgstr ""
"Kontroll över sköldpaddans rörelser med hjälp av de nya metoderna :meth:"
"`delay`, :meth:`tracer` och :meth:`speed`."

msgid ""
"The ability to set new shapes for the turtle, and to define a new coordinate "
"system."
msgstr ""
"Möjligheten att ställa in nya former för sköldpaddan och att definiera ett "
"nytt koordinatsystem."

msgid "Turtles now have an :meth:`undo` method that can roll back actions."
msgstr ""
"Sköldpaddor har nu en :meth:`undo`-metod som kan rulla tillbaka åtgärder."

msgid ""
"Simple support for reacting to input events such as mouse and keyboard "
"activity, making it possible to write simple games."
msgstr ""
"Enkelt stöd för att reagera på indatahändelser som mus- och "
"tangentbordsaktivitet, vilket gör det möjligt att skriva enkla spel."

msgid ""
"A :file:`turtle.cfg` file can be used to customize the starting appearance "
"of the turtle's screen."
msgstr ""
"En :file:`turtle.cfg`-fil kan användas för att anpassa startutseendet på "
"sköldpaddans skärm."

msgid ""
"The module's docstrings can be replaced by new docstrings that have been "
"translated into another language."
msgstr ""
"Modulens dokumentationssträngar kan ersättas av nya dokumentationssträngar "
"som har översatts till ett annat språk."

msgid "(:issue:`1513695`)"
msgstr "(:utgåva:`1513695`)"

msgid ""
"An optional ``timeout`` parameter was added to the :func:`urllib.urlopen "
"<urllib.request.urlopen>` function and the :class:`urllib.ftpwrapper` class "
"constructor, as well as the :func:`urllib2.urlopen <urllib.request.urlopen>` "
"function.  The parameter specifies a timeout measured in seconds.   For "
"example::"
msgstr ""
"En valfri parameter ``timeout`` har lagts till i funktionen :func:`urllib."
"urlopen <urllib.request.urlopen>` och klasskonstruktören :class:`urllib."
"ftpwrapper`, samt i funktionen :func:`urllib2.urlopen <urllib.request."
"urlopen>`.  Parametern anger en timeout som mäts i sekunder.   Till exempel::"

msgid ""
">>> u = urllib2.urlopen(\"http://slow.example.com\",\n"
"                        timeout=3)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"urllib2.URLError: <urlopen error timed out>\n"
">>>"
msgstr ""
"&gt;&gt;&gt; u = urllib2.urlopen(\"http://slow.example.com\",\n"
"                        timeout=3)\n"
"Traceback (senaste anropet senast):\n"
"  ...\n"
"urllib2.URLError: <urlopen error timed out>\n"
"&gt;&gt;&gt"

msgid "(Added by Facundo Batista.)"
msgstr "(Tillagd av Facundo Batista.)"

msgid ""
"The Unicode database provided by the :mod:`unicodedata` module has been "
"updated to version 5.1.0.  (Updated by Martin von Löwis; :issue:`3811`.)"
msgstr ""
"Unicode-databasen som tillhandahålls av modulen :mod:`unicodedata` har "
"uppdaterats till version 5.1.0. (Uppdaterad av Martin von Löwis; :issue:"
"`3811`.)"

msgid ""
"The :mod:`warnings` module's :func:`formatwarning` and :func:`showwarning` "
"gained an optional *line* argument that can be used to supply the line of "
"source code.  (Added as part of :issue:`1631171`, which re-implemented part "
"of the :mod:`warnings` module in C code.)"
msgstr ""
"Modulerna :mod:`warnings` :func:`formatwarning` och :func:`showwarning` har "
"fått ett valfritt *line*-argument som kan användas för att ange en rad i "
"källkoden.  (Tillagd som en del av :issue:`1631171`, som återimplementerade "
"en del av modulen :mod:`warnings` i C-kod)"

msgid ""
"A new function, :func:`catch_warnings`, is a context manager intended for "
"testing purposes that lets you temporarily modify the warning filters and "
"then restore their original values (:issue:`3781`)."
msgstr ""
"En ny funktion, :func:`catch_warnings`, är en kontexthanterare avsedd för "
"teständamål som gör att du tillfälligt kan ändra varningsfiltren och sedan "
"återställa deras ursprungliga värden (:issue:`3781`)."

msgid ""
"The XML-RPC :class:`SimpleXMLRPCServer <xmlrpc.server>` and :class:"
"`DocXMLRPCServer <xmlrpc.server>` classes can now be prevented from "
"immediately opening and binding to their socket by passing ``False`` as the "
"*bind_and_activate* constructor parameter.  This can be used to modify the "
"instance's :attr:`allow_reuse_address` attribute before calling the :meth:"
"`server_bind` and :meth:`server_activate` methods to open the socket and "
"begin listening for connections. (Contributed by Peter Parente; :issue:"
"`1599845`.)"
msgstr ""
"XML-RPC-klasserna :class:`SimpleXMLRPCServer <xmlrpc.server>` och :class:"
"`DocXMLRPCServer <xmlrpc.server>` kan nu förhindras från att omedelbart "
"öppna och binda till sin socket genom att ange ``False`` som "
"*bind_and_activate*-konstruktörsparameter.  Detta kan användas för att "
"modifiera instansens attribut :attr:`allow_reuse_address` innan metoderna :"
"meth:`server_bind` och :meth:`server_activate` anropas för att öppna sockeln "
"och börja lyssna på anslutningar. (Bidrag från Peter Parente; :issue:"
"`1599845`.)"

msgid ""
":class:`SimpleXMLRPCServer` also has a :attr:`_send_traceback_header` "
"attribute; if true, the exception and formatted traceback are returned as "
"HTTP headers \"X-Exception\" and \"X-Traceback\".  This feature is for "
"debugging purposes only and should not be used on production servers because "
"the tracebacks might reveal passwords or other sensitive information.  "
"(Contributed by Alan McIntyre as part of his project for Google's Summer of "
"Code 2007.)"
msgstr ""
":class:`SimpleXMLRPCServer` har också ett :attr:`_send_traceback_header`-"
"attribut; om true returneras undantaget och den formaterade tracebacken som "
"HTTP-rubriker \"X-Exception\" och \"X-Traceback\".  Denna funktion är endast "
"avsedd för felsökning och bör inte användas på produktionsservrar eftersom "
"spårningarna kan avslöja lösenord eller annan känslig information.  (Bidrag "
"från Alan McIntyre som en del av hans projekt för Googles Summer of Code "
"2007)"

msgid ""
"The :mod:`xmlrpclib <xmlrpc.client>` module no longer automatically "
"converts :class:`datetime.date` and :class:`datetime.time` to the :class:"
"`xmlrpclib.DateTime <xmlrpc.client.DateTime>` type; the conversion semantics "
"were not necessarily correct for all applications.  Code using :mod:`!"
"xmlrpclib` should convert :class:`date` and :class:`~datetime.time` "
"instances. (:issue:`1330538`)  The code can also handle dates before 1900 "
"(contributed by Ralf Schmitt; :issue:`2014`) and 64-bit integers represented "
"by using ``<i8>`` in XML-RPC responses (contributed by Riku Lindblad; :issue:"
"`2985`)."
msgstr ""
"Modulen :mod:`xmlrpclib <xmlrpc.client>` konverterar inte längre "
"automatiskt :class:`datetime.date` och :class:`datetime.time` till typen :"
"class:`xmlrpclib.DateTime <xmlrpc.client.DateTime>`; konverteringssemantiken "
"var inte nödvändigtvis korrekt för alla applikationer.  Kod som använder :"
"mod:`!xmlrpclib` bör konvertera :class:`date` och :class:`~datetime.time` "
"instanser. (:issue:`1330538`) Koden kan även hantera datum före 1900 (bidrag "
"från Ralf Schmitt; :issue:`2014`) och 64-bitars heltal som representeras "
"genom att använda ``<i8>`` i XML-RPC-svar (bidrag från Riku Lindblad; :issue:"
"`2985`)."

msgid ""
"The :mod:`zipfile` module's :class:`ZipFile` class now has :meth:`extract` "
"and :meth:`extractall` methods that will unpack a single file or all the "
"files in the archive to the current directory, or to a specified directory::"
msgstr ""
"Modulen :mod:`zipfile`'s klass :class:`ZipFile` har nu metoderna :meth:"
"`extract` och :meth:`extractall` som packar upp en enskild fil eller alla "
"filer i arkivet till den aktuella katalogen eller till en angiven katalog::"

msgid ""
"z = zipfile.ZipFile('python-251.zip')\n"
"\n"
"# Unpack a single file, writing it relative\n"
"# to the /tmp directory.\n"
"z.extract('Python/sysmodule.c', '/tmp')\n"
"\n"
"# Unpack all the files in the archive.\n"
"z.extractall()"
msgstr ""
"z = zipfile.ZipFile('python-251.zip')\n"
"\n"
"# Packa upp en enda fil och skriv den relativt\n"
"# till katalogen /tmp.\n"
"z.extract('Python/sysmodule.c', '/tmp')\n"
"\n"
"# Packa upp alla filer i arkivet.\n"
"z.extraheraall()"

msgid "(Contributed by Alan McIntyre; :issue:`467924`.)"
msgstr "(Bidrag från Alan McIntyre; :issue:`467924`.)"

msgid ""
"The :meth:`open`, :meth:`read` and :meth:`extract` methods can now take "
"either a filename or a :class:`ZipInfo` object.  This is useful when an "
"archive accidentally contains a duplicated filename. (Contributed by Graham "
"Horler; :issue:`1775025`.)"
msgstr ""
"Metoderna :meth:`open`, :meth:`read` och :meth:`extract` kan nu ta emot "
"antingen ett filnamn eller ett :class:`ZipInfo`-objekt.  Detta är användbart "
"när ett arkiv av misstag innehåller ett duplicerat filnamn. (Bidrag från "
"Graham Horler; :issue:`1775025`.)"

msgid ""
"Finally, :mod:`zipfile` now supports using Unicode filenames for archived "
"files.  (Contributed by Alexey Borzenkov; :issue:`1734346`.)"
msgstr ""
"Slutligen stöder :mod:`zipfile` nu användning av Unicode-filnamn för "
"arkiverade filer.  (Bidrag från Alexey Borzenkov; :issue:`1734346`.)"

msgid "The :mod:`ast` module"
msgstr "Modulen :mod:`ast"

msgid ""
"The :mod:`ast` module provides an Abstract Syntax Tree representation of "
"Python code, and Armin Ronacher contributed a set of helper functions that "
"perform a variety of common tasks.  These will be useful for HTML templating "
"packages, code analyzers, and similar tools that process Python code."
msgstr ""
"Modulen :mod:`ast` ger en representation av Python-kod i form av ett "
"abstrakt syntaxträd, och Armin Ronacher har bidragit med en uppsättning "
"hjälpfunktioner som utför en mängd vanliga uppgifter.  Dessa kommer att vara "
"användbara för HTML-templating-paket, kodanalysatorer och liknande verktyg "
"som bearbetar Python-kod."

msgid ""
"The :func:`parse` function takes an expression and returns an AST. The :func:"
"`dump` function outputs a representation of a tree, suitable for debugging::"
msgstr ""
"Funktionen :func:`parse` tar ett uttryck och returnerar en AST. Funktionen :"
"func:`dump` ger en representation av ett träd, lämplig för felsökning::"

msgid ""
"import ast\n"
"\n"
"t = ast.parse(\"\"\"\n"
"d = {}\n"
"for i in 'abcdefghijklm':\n"
"    d[i + i] = ord(i) - ord('a') + 1\n"
"print d\n"
"\"\"\")\n"
"print ast.dump(t)"
msgstr ""
"import ast\n"
"\n"
"t = ast.parse(\"\"\"\n"
"d = {}\n"
"for i in 'abcdefghijklm':\n"
"    d[i + i] = ord(i) - ord('a') + 1\n"
"print d\n"
"\"\"\")\n"
"print ast.dump(t)"

msgid "This outputs a deeply nested tree::"
msgstr "Detta ger ett djupt nästlat träd::"

msgid ""
"Module(body=[\n"
"  Assign(targets=[\n"
"    Name(id='d', ctx=Store())\n"
"   ], value=Dict(keys=[], values=[]))\n"
"  For(target=Name(id='i', ctx=Store()),\n"
"      iter=Str(s='abcdefghijklm'), body=[\n"
"    Assign(targets=[\n"
"      Subscript(value=\n"
"        Name(id='d', ctx=Load()),\n"
"          slice=\n"
"          Index(value=\n"
"            BinOp(left=Name(id='i', ctx=Load()), op=Add(),\n"
"             right=Name(id='i', ctx=Load()))), ctx=Store())\n"
"     ], value=\n"
"     BinOp(left=\n"
"      BinOp(left=\n"
"       Call(func=\n"
"        Name(id='ord', ctx=Load()), args=[\n"
"          Name(id='i', ctx=Load())\n"
"         ], keywords=[], starargs=None, kwargs=None),\n"
"       op=Sub(), right=Call(func=\n"
"        Name(id='ord', ctx=Load()), args=[\n"
"          Str(s='a')\n"
"         ], keywords=[], starargs=None, kwargs=None)),\n"
"       op=Add(), right=Num(n=1)))\n"
"    ], orelse=[])\n"
"   Print(dest=None, values=[\n"
"     Name(id='d', ctx=Load())\n"
"   ], nl=True)\n"
" ])"
msgstr ""
"Modul(kropp=[\n"
"  Tilldela(mål=[\n"
"    Namn(id='d', ctx=Store())\n"
"   ], value=Dict(keys=[], values=[]))\n"
"  For(target=Name(id='i', ctx=Store()),\n"
"      iter=Str(s='abcdefghijklm'), body=[\n"
"    Tilldela(mål=[\n"
"      Subscript(värde=\n"
"        Name(id='d', ctx=Load()),\n"
"          slice=\n"
"          Index(värde=\n"
"            BinOp(left=Namn(id='i', ctx=Load()), op=Add(),\n"
"             right=Name(id='i', ctx=Load()))), ctx=Store())\n"
"     ], värde=\n"
"     BinOp(vänster=\n"
"      BinOp(vänster=\n"
"       Anrop(func=\n"
"        Name(id='ord', ctx=Load()), args=[\n"
"          Namn(id='i', ctx=Load())\n"
"         ], nyckelord=[], starargs=None, kwargs=None),\n"
"       op=Sub(), right=Anrop(func=\n"
"        Name(id='ord', ctx=Load()), args=[\n"
"          Str(s='a')\n"
"         ], nyckelord=[], starargs=None, kwargs=None)),\n"
"       op=Add(), right=Num(n=1)))\n"
"    ], orelse=[])\n"
"   Print(dest=One, värden=[\n"
"     Namn(id='d', ctx=Load())\n"
"   ], nl=True)\n"
" ])"

msgid ""
"The :func:`literal_eval` method takes a string or an AST representing a "
"literal expression, parses and evaluates it, and returns the resulting "
"value.  A literal expression is a Python expression containing only strings, "
"numbers, dictionaries, etc. but no statements or function calls.  If you "
"need to evaluate an expression but cannot accept the security risk of using "
"an :func:`eval` call, :func:`literal_eval` will handle it safely::"
msgstr ""
"Metoden :func:`literal_eval` tar en sträng eller en AST som representerar "
"ett bokstavligt uttryck, analyserar och utvärderar det och returnerar det "
"resulterande värdet.  Ett bokstavligt uttryck är ett Python-uttryck som bara "
"innehåller strängar, tal, lexikon etc. men inga satser eller "
"funktionsanrop.  Om du behöver utvärdera ett uttryck men inte kan acceptera "
"säkerhetsrisken med att använda ett :func:`eval`-anrop, kommer :func:"
"`literal_eval` att hantera det på ett säkert sätt::"

msgid ""
">>> literal = '(\"a\", \"b\", {2:4, 3:8, 1:2})'\n"
">>> print ast.literal_eval(literal)\n"
"('a', 'b', {1: 2, 2: 4, 3: 8})\n"
">>> print ast.literal_eval('\"a\" + \"b\"')\n"
"Traceback (most recent call last):\n"
"  ...\n"
"ValueError: malformed string"
msgstr ""
">>> literal = '(\"a\", \"b\", {2:4, 3:8, 1:2})'\n"
">>> print ast.literal_eval(literal)\n"
"('a', 'b', {1: 2, 2: 4, 3: 8})\n"
">>> print ast.literal_eval('\"a\" + \"b\"')\n"
"Traceback (senaste anropet senast):\n"
"  ...\n"
"ValueError: missbildad sträng"

msgid ""
"The module also includes :class:`NodeVisitor` and :class:`NodeTransformer` "
"classes for traversing and modifying an AST, and functions for common "
"transformations such as changing line numbers."
msgstr ""
"Modulen innehåller också klasserna :class:`NodeVisitor` och :class:"
"`NodeTransformer` för genomgång och modifiering av en AST, samt funktioner "
"för vanliga transformationer, t.ex. ändring av radnummer."

msgid "The :mod:`future_builtins` module"
msgstr "Modulen :mod:`future_builtins"

msgid ""
"Python 3.0 makes many changes to the repertoire of built-in functions, and "
"most of the changes can't be introduced in the Python 2.x series because "
"they would break compatibility. The :mod:`future_builtins` module provides "
"versions of these built-in functions that can be imported when writing 3.0-"
"compatible code."
msgstr ""
"Python 3.0 gör många ändringar i repertoaren av inbyggda funktioner, och de "
"flesta av ändringarna kan inte införas i Python 2.x-serien eftersom de "
"skulle bryta kompatibiliteten. Modulen :mod:`future_builtins` "
"tillhandahåller versioner av dessa inbyggda funktioner som kan importeras "
"när du skriver 3.0-kompatibel kod."

msgid "The functions in this module currently include:"
msgstr "Funktionerna i denna modul omfattar för närvarande:"

msgid ""
"``ascii(obj)``: equivalent to :func:`repr`.  In Python 3.0, :func:`repr` "
"will return a Unicode string, while :func:`ascii` will return a pure ASCII "
"bytestring."
msgstr ""
"``ascii(obj)``: likvärdig med :func:`repr`.  I Python 3.0 kommer :func:"
"`repr` att returnera en Unicode-sträng, medan :func:`ascii` kommer att "
"returnera en ren ASCII-bytestring."

msgid ""
"``filter(predicate, iterable)``, ``map(func, iterable1, ...)``: the 3.0 "
"versions return iterators, unlike the 2.x builtins which return lists."
msgstr ""
"``filter(predikat, iterabel)``, ``map(func, iterabel1, ...)``: 3.0-"
"versionerna returnerar iteratorer, till skillnad från 2.x-inbyggnaderna som "
"returnerar listor."

msgid ""
"``hex(value)``, ``oct(value)``: instead of calling the :meth:`__hex__` or :"
"meth:`__oct__` methods, these versions will call the :meth:`__index__` "
"method and convert the result to hexadecimal or octal.  :func:`oct` will use "
"the new ``0o`` notation for its result."
msgstr ""
"``hex(värde)``, ``oct(värde)``: istället för att anropa metoderna :meth:"
"`__hex__` eller :meth:`__oct__` anropar dessa versioner metoden :meth:"
"`__index__` och konverterar resultatet till hexadecimal eller oktal. :func:"
"`oct` använder den nya notationen ``0o`` för sitt resultat."

msgid "The :mod:`json` module: JavaScript Object Notation"
msgstr "Modulen :mod:`json`: JavaScript-objektnotation"

msgid ""
"The new :mod:`json` module supports the encoding and decoding of Python "
"types in JSON (Javascript Object Notation). JSON is a lightweight "
"interchange format often used in web applications. For more information "
"about JSON, see http://www.json.org."
msgstr ""
"Den nya modulen :mod:`json` stöder kodning och avkodning av Python-typer i "
"JSON (Javascript Object Notation). JSON är ett lättviktigt utbytesformat som "
"ofta används i webbapplikationer. För mer information om JSON, se http://www."
"json.org."

msgid ""
":mod:`json` comes with support for decoding and encoding most built-in "
"Python types. The following example encodes and decodes a dictionary::"
msgstr ""
":mod:`json` har stöd för avkodning och kodning av de flesta inbyggda Python-"
"typer. Följande exempel kodar och avkodar en ordbok::"

msgid ""
">>> import json\n"
">>> data = {\"spam\": \"foo\", \"parrot\": 42}\n"
">>> in_json = json.dumps(data) # Encode the data\n"
">>> in_json\n"
"'{\"parrot\": 42, \"spam\": \"foo\"}'\n"
">>> json.loads(in_json) # Decode into a Python object\n"
"{\"spam\": \"foo\", \"parrot\": 42}"
msgstr ""
">>> import json\n"
">>> data = {\"spam\": \"foo\", \"papegoja\": 42}\n"
">>> in_json = json.dumps(data) # Koda data\n"
">>> in_json\n"
"'{\"papegoja\": 42, \"spam\": \"foo\"}'\n"
">>> json.loads(in_json) # Avkoda till ett Python-objekt\n"
"{\"spam\": \"foo\", \"papegoja\": 42}"

msgid ""
"It's also possible to write your own decoders and encoders to support more "
"types. Pretty-printing of the JSON strings is also supported."
msgstr ""
"Det är också möjligt att skriva egna avkodare och kodare för att stödja fler "
"typer. Pretty-printing av JSON-strängarna stöds också."

msgid ":mod:`json` (originally called simplejson) was written by Bob Ippolito."
msgstr ":mod:`json` (ursprungligen kallad simplejson) skrevs av Bob Ippolito."

msgid "The :mod:`plistlib` module: A Property-List Parser"
msgstr "Modulen :mod:`plistlib`: En parser för egenskapslistor"

msgid ""
"The ``.plist`` format is commonly used on Mac OS X to store basic data types "
"(numbers, strings, lists, and dictionaries) by serializing them into an XML-"
"based format. It resembles the XML-RPC serialization of data types."
msgstr ""
"Formatet ``.plist`` används ofta på Mac OS X för att lagra grundläggande "
"datatyper (siffror, strängar, listor och ordböcker) genom att serialisera "
"dem till ett XML-baserat format. Det liknar XML-RPC-serialisering av "
"datatyper."

msgid ""
"Despite being primarily used on Mac OS X, the format has nothing Mac-"
"specific about it and the Python implementation works on any platform that "
"Python supports, so the :mod:`plistlib` module has been promoted to the "
"standard library."
msgstr ""
"Trots att formatet främst används på Mac OS X är det inte Mac-specifikt och "
"Python-implementationen fungerar på alla plattformar som Python stöder, så "
"modulen :mod:`plistlib` har flyttats till standardbiblioteket."

msgid "Using the module is simple::"
msgstr "Det är enkelt att använda modulen::"

msgid ""
"import sys\n"
"import plistlib\n"
"import datetime\n"
"\n"
"# Create data structure\n"
"data_struct = dict(lastAccessed=datetime.datetime.now(),\n"
"                   version=1,\n"
"                   categories=('Personal','Shared','Private'))\n"
"\n"
"# Create string containing XML.\n"
"plist_str = plistlib.writePlistToString(data_struct)\n"
"new_struct = plistlib.readPlistFromString(plist_str)\n"
"print data_struct\n"
"print new_struct\n"
"\n"
"# Write data structure to a file and read it back.\n"
"plistlib.writePlist(data_struct, '/tmp/customizations.plist')\n"
"new_struct = plistlib.readPlist('/tmp/customizations.plist')\n"
"\n"
"# read/writePlist accepts file-like objects as well as paths.\n"
"plistlib.writePlist(data_struct, sys.stdout)"
msgstr ""
"import sys\n"
"import plistlib\n"
"import datetime\n"
"\n"
"# Create data structure\n"
"data_struct = dict(lastAccessed=datetime.datetime.now(),\n"
"                   version=1,\n"
"                   categories=('Personal','Shared','Private'))\n"
"\n"
"# Create string containing XML.\n"
"plist_str = plistlib.writePlistToString(data_struct)\n"
"new_struct = plistlib.readPlistFromString(plist_str)\n"
"print data_struct\n"
"print new_struct\n"
"\n"
"# Write data structure to a file and read it back.\n"
"plistlib.writePlist(data_struct, '/tmp/customizations.plist')\n"
"new_struct = plistlib.readPlist('/tmp/customizations.plist')\n"
"\n"
"# read/writePlist accepts file-like objects as well as paths.\n"
"plistlib.writePlist(data_struct, sys.stdout)"

msgid "ctypes Enhancements"
msgstr "förbättringar av ctypes"

msgid ""
"Thomas Heller continued to maintain and enhance the :mod:`ctypes` module."
msgstr ""
"Thomas Heller fortsatte att underhålla och förbättra modulen :mod:`ctypes`."

msgid ""
":mod:`ctypes` now supports a :class:`c_bool` datatype that represents the "
"C99 ``bool`` type.  (Contributed by David Remahl; :issue:`1649190`.)"
msgstr ""
":mod:`ctypes` stöder nu en :class:`c_bool`-datatyp som representerar C99-"
"typen ``bool``.  (Bidrag från David Remahl; :issue:`1649190`.)"

msgid ""
"The :mod:`ctypes` string, buffer and array types have improved support for "
"extended slicing syntax, where various combinations of ``(start, stop, "
"step)`` are supplied. (Implemented by Thomas Wouters.)"
msgstr ""
"Typerna :mod:`ctypes` string, buffer och array har förbättrat stöd för "
"utökad slicing-syntax, där olika kombinationer av ``(start, stop, step)`` "
"anges. (Implementerat av Thomas Wouters.)"

msgid ""
"All :mod:`ctypes` data types now support :meth:`from_buffer` and :meth:"
"`from_buffer_copy` methods that create a ctypes instance based on a provided "
"buffer object.  :meth:`from_buffer_copy` copies the contents of the object, "
"while :meth:`from_buffer` will share the same memory area."
msgstr ""
"Alla :mod:`ctypes` datatyper stöder nu :meth:`from_buffer` och :meth:"
"`from_buffer_copy` metoder som skapar en ctypes-instans baserat på ett "
"tillhandahållet buffertobjekt. :meth:`from_buffer_copy` kopierar innehållet "
"i objektet, medan :meth:`from_buffer` delar samma minnesområde."

msgid ""
"A new calling convention tells :mod:`ctypes` to clear the ``errno`` or Win32 "
"LastError variables at the outset of each wrapped call. (Implemented by "
"Thomas Heller; :issue:`1798`.)"
msgstr ""
"En ny anropskonvention säger till :mod:`ctypes` att rensa variablerna "
"``errno`` eller Win32 LastError i början av varje inkapslat anrop. "
"(Implementerat av Thomas Heller; :issue:`1798`.)"

msgid ""
"You can now retrieve the Unix ``errno`` variable after a function call.  "
"When creating a wrapped function, you can supply ``use_errno=True`` as a "
"keyword parameter to the :func:`DLL` function and then call the module-level "
"methods :meth:`set_errno` and :meth:`get_errno` to set and retrieve the "
"error value."
msgstr ""
"Du kan nu hämta Unix-variabeln ``errno`` efter ett funktionsanrop.  När du "
"skapar en omsluten funktion kan du ange ``use_errno=True`` som en "
"nyckelordsparameter till :func:`DLL`-funktionen och sedan anropa "
"modulnivåmetoderna :meth:`set_errno` och :meth:`get_errno` för att ställa in "
"och hämta felvärdet."

msgid ""
"The Win32 LastError variable is similarly supported by the :func:`DLL`, :"
"func:`OleDLL`, and :func:`WinDLL` functions. You supply "
"``use_last_error=True`` as a keyword parameter and then call the module-"
"level methods :meth:`set_last_error` and :meth:`get_last_error`."
msgstr ""
"Win32-variabeln LastError stöds på liknande sätt av funktionerna :func:"
"`DLL`, :func:`OleDLL` och :func:`WinDLL`. Du anger ``use_last_error=True`` "
"som en nyckelordsparameter och anropar sedan modulnivåmetoderna :meth:"
"`set_last_error` och :meth:`get_last_error`."

msgid ""
"The :func:`byref` function, used to retrieve a pointer to a ctypes instance, "
"now has an optional *offset* parameter that is a byte count that will be "
"added to the returned pointer."
msgstr ""
"Funktionen :func:`byref`, som används för att hämta en pekare till en ctypes-"
"instans, har nu en valfri parameter *offset* som är ett byteantal som läggs "
"till den returnerade pekaren."

msgid "Improved SSL Support"
msgstr "Förbättrat SSL-stöd"

msgid ""
"Bill Janssen made extensive improvements to Python 2.6's support for the "
"Secure Sockets Layer by adding a new module, :mod:`ssl`, that's built atop "
"the `OpenSSL <https://www.openssl.org/>`__ library. This new module provides "
"more control over the protocol negotiated, the X.509 certificates used, and "
"has better support for writing SSL servers (as opposed to clients) in "
"Python.  The existing SSL support in the :mod:`socket` module hasn't been "
"removed and continues to work, though it will be removed in Python 3.0."
msgstr ""
"Bill Janssen har gjort omfattande förbättringar av Python 2.6:s stöd för "
"Secure Sockets Layer genom att lägga till en ny modul, :mod:`ssl`, som är "
"byggd ovanpå biblioteket `OpenSSL <https://www.openssl.org/>`__. Denna nya "
"modul ger mer kontroll över det protokoll som förhandlas, de X.509-"
"certifikat som används och har bättre stöd för att skriva SSL-servrar (i "
"motsats till klienter) i Python.  Det befintliga SSL-stödet i modulen :mod:"
"`socket` har inte tagits bort och fortsätter att fungera, även om det kommer "
"att tas bort i Python 3.0."

msgid ""
"To use the new module, you must first create a TCP connection in the usual "
"way and then pass it to the :func:`ssl.wrap_socket` function. It's possible "
"to specify whether a certificate is required, and to obtain certificate info "
"by calling the :meth:`getpeercert` method."
msgstr ""
"För att använda den nya modulen måste du först skapa en TCP-anslutning på "
"vanligt sätt och sedan skicka den till funktionen :func:`ssl.wrap_socket`. "
"Det är möjligt att ange om ett certifikat krävs och att få "
"certifikatinformation genom att anropa metoden :meth:`getpeercert`."

msgid "The documentation for the :mod:`ssl` module."
msgstr "Dokumentationen för modulen :mod:`ssl`."

msgid "Deprecations and Removals"
msgstr "Avskrivningar och borttagningar"

msgid ""
"String exceptions have been removed.  Attempting to use them raises a :exc:"
"`TypeError`."
msgstr ""
"Strängundantag har tagits bort.  Försök att använda dem ger upphov till ett :"
"exc:`TypeError`."

msgid ""
"Changes to the :class:`Exception` interface as dictated by :pep:`352` "
"continue to be made.  For 2.6, the :attr:`!message` attribute is being "
"deprecated in favor of the :attr:`~BaseException.args` attribute."
msgstr ""
"Ändringar i :class:`Exception`-gränssnittet enligt :pep:`352` fortsätter att "
"göras.  För 2.6 kommer attributet :attr:`!message` att tas bort till förmån "
"för attributet :attr:`~BaseException.args`."

msgid ""
"(3.0-warning mode) Python 3.0 will feature a reorganized standard library "
"that will drop many outdated modules and rename others. Python 2.6 running "
"in 3.0-warning mode will warn about these modules when they are imported."
msgstr ""
"(3.0-varningsläge) Python 3.0 kommer att innehålla ett omorganiserat "
"standardbibliotek som kommer att ta bort många föråldrade moduler och byta "
"namn på andra. Python 2.6 som körs i 3.0-varningsläge kommer att varna för "
"dessa moduler när de importeras."

msgid ""
"The list of deprecated modules is: :mod:`!audiodev`, :mod:`!bgenlocations`, :"
"mod:`!buildtools`, :mod:`!bundlebuilder`, :mod:`!Canvas`, :mod:`!compiler`, :"
"mod:`!dircache`, :mod:`!dl`, :mod:`!fpformat`, :mod:`!gensuitemodule`, :mod:"
"`!ihooks`, :mod:`!imageop`, :mod:`!imgfile`, :mod:`!linuxaudiodev`, :mod:`!"
"mhlib`, :mod:`!mimetools`, :mod:`!multifile`, :mod:`!new`, :mod:`!pure`, :"
"mod:`!statvfs`, :mod:`!sunaudiodev`, :mod:`!test.testall`, and :mod:`!"
"toaiff`."
msgstr ""
"Listan över utfasade moduler är: :mod:`!audiodev`, :mod:`!bgenlocations`, :"
"mod:`!buildtools`, :mod:`!bundlebuilder`, :mod:`!Canvas`, :mod:`!compiler`, :"
"mod:`!dircache`, :mod:`!dl`, :mod:`!fpformat`, :mod:`!gensuitemodule`, :mod:"
"`!ihooks`, :mod:`!imageop`, :mod:`!imgfile`, :mod:`!linuxaudiodev`, :mod:`!"
"mhlib`, :mod:`!mimetools`, :mod:`!multifile`, :mod:`!new`, :mod:`!pure`, :"
"mod:`!statvfs`, :mod:`!sunaudiodev`, :mod:`!test.testall`, och :mod:`!"
"toaiff`."

msgid "The :mod:`!gopherlib` module has been removed."
msgstr "Modulen :mod:`!gopherlib` har tagits bort."

msgid ""
"The :mod:`!MimeWriter` module and :mod:`!mimify` module have been "
"deprecated; use the :mod:`email` package instead."
msgstr ""
"Modulerna :mod:`!MimeWriter` och :mod:`!mimify` har utgått; använd paketet :"
"mod:`email` istället."

msgid ""
"The :mod:`!md5` module has been deprecated; use the :mod:`hashlib` module "
"instead."
msgstr ""
"Modulen :mod:`!md5` har utgått; använd istället modulen :mod:`hashlib`."

msgid ""
"The :mod:`!posixfile` module has been deprecated; :func:`fcntl.lockf` "
"provides better locking."
msgstr ""
"Modulen :mod:`!posixfile` har utgått; :func:`fcntl.lockf` ger bättre låsning."

msgid ""
"The :mod:`!popen2` module has been deprecated; use the :mod:`subprocess` "
"module."
msgstr "Modulen :mod:`!popen2` har utgått; använd modulen :mod:`subprocess`."

msgid "The :mod:`!rgbimg` module has been removed."
msgstr "Modulen :mod:`!rgbimg` har tagits bort."

msgid ""
"The :mod:`!sets` module has been deprecated; it's better to use the built-"
"in :class:`set` and :class:`frozenset` types."
msgstr ""
"Modulen :mod:`!sets` har utgått; det är bättre att använda de inbyggda "
"typerna :class:`set` och :class:`frozenset`."

msgid ""
"The :mod:`!sha` module has been deprecated; use the :mod:`hashlib` module "
"instead."
msgstr ""
"Modulen :mod:`!sha` har utgått; använd istället modulen :mod:`hashlib`."

msgid "Build and C API Changes"
msgstr "Ändringar i Build och C API"

msgid "Changes to Python's build process and to the C API include:"
msgstr "Ändringar i Pythons byggprocess och i C API inkluderar:"

msgid ""
"Python now must be compiled with C89 compilers (after 19 years!).  This "
"means that the Python source tree has dropped its own implementations of :c:"
"func:`!memmove` and :c:func:`!strerror`, which are in the C89 standard "
"library."
msgstr ""
"Python måste nu kompileras med C89-kompilatorer (efter 19 år!).  Detta "
"innebär att Pythons källträd har släppt sina egna implementationer av :c:"
"func:`!memmove` och :c:func:`!strerror`, som finns i C89:s standardbibliotek."

msgid ""
"Python 2.6 can be built with Microsoft Visual Studio 2008 (version 9.0), and "
"this is the new default compiler.  See the :file:`PCbuild` directory for the "
"build files.  (Implemented by Christian Heimes.)"
msgstr ""
"Python 2.6 kan byggas med Microsoft Visual Studio 2008 (version 9.0), och "
"detta är den nya standardkompilatorn.  Se katalogen :file:`PCbuild` för "
"byggfilerna.  (Implementerat av Christian Heimes.)"

msgid ""
"On Mac OS X, Python 2.6 can be compiled as a 4-way universal build. The :"
"program:`configure` script can take a :option:`!--with-universal-archs=[32-"
"bit|64-bit|all]` switch, controlling whether the binaries are built for 32-"
"bit architectures (x86, PowerPC), 64-bit (x86-64 and PPC-64), or both. "
"(Contributed by Ronald Oussoren.)"
msgstr ""
"På Mac OS X kan Python 2.6 kompileras som en 4-vägs universalbyggnad. "
"Skriptet :program:`configure` kan innehålla ett :option:`!--with-universal-"
"archs=[32-bit|64-bit|all]` som styr om binärerna ska byggas för 32-"
"bitarsarkitekturer (x86, PowerPC), 64-bitarsarkitekturer (x86-64 och PPC-64) "
"eller båda. (Bidrag från Ronald Oussoren.)"

msgid ""
"A new function added in Python 2.6.6, :c:func:`!PySys_SetArgvEx`, sets the "
"value of ``sys.argv`` and can optionally update ``sys.path`` to include the "
"directory containing the script named by ``sys.argv[0]`` depending on the "
"value of an *updatepath* parameter."
msgstr ""
"En ny funktion tillagd i Python 2.6.6, :c:func:`!PySys_SetArgvEx`, anger "
"värdet på ``sys.argv`` och kan eventuellt uppdatera ``sys.path`` till att "
"inkludera katalogen som innehåller skriptet som heter ``sys.argv[0]`` "
"beroende på värdet på en *updatepath*-parameter."

msgid ""
"This function was added to close a security hole for applications that embed "
"Python.  The old function, :c:func:`!PySys_SetArgv`, would always update "
"``sys.path``, and sometimes it would add the current directory.  This meant "
"that, if you ran an application embedding Python in a directory controlled "
"by someone else, attackers could put a Trojan-horse module in the directory "
"(say, a file named :file:`os.py`) that your application would then import "
"and run."
msgstr ""
"Denna funktion lades till för att täppa till ett säkerhetshål för program "
"som bäddar in Python.  Den gamla funktionen, :c:func:`!PySys_SetArgv`, "
"uppdaterade alltid ``sys.path``, och ibland lade den till den aktuella "
"katalogen.  Detta innebar att om du körde ett program som bäddade in Python "
"i en katalog som kontrollerades av någon annan, kunde angripare lägga in en "
"trojansk modul i katalogen (till exempel en fil med namnet :file:`os.py`) "
"som ditt program sedan importerade och körde."

msgid ""
"If you maintain a C/C++ application that embeds Python, check whether you're "
"calling :c:func:`!PySys_SetArgv` and carefully consider whether the "
"application should be using :c:func:`!PySys_SetArgvEx` with *updatepath* set "
"to false.  Note that using this function will break compatibility with "
"Python versions 2.6.5 and earlier; if you have to continue working with "
"earlier versions, you can leave the call to :c:func:`!PySys_SetArgv` alone "
"and call ``PyRun_SimpleString(\"sys.path.pop(0)\\n\")`` afterwards to "
"discard the first ``sys.path`` component."
msgstr ""
"Om du underhåller ett C/C++-program som bäddar in Python, kontrollera om du "
"anropar :c:func:`!PySys_SetArgv` och överväg noga om programmet bör använda :"
"c:func:`!PySys_SetArgvEx` med *updatepath* satt till false.  Observera att "
"användningen av denna funktion kommer att bryta kompatibiliteten med Python-"
"versioner 2.6.5 och tidigare; om du måste fortsätta att arbeta med tidigare "
"versioner kan du låta bli att anropa :c:func:`!PySys_SetArgv` och anropa "
"``PyRun_SimpleString(\"sys.path.pop(0)\\n\")`` efteråt för att kassera den "
"första ``sys.path``-komponenten."

msgid ""
"Security issue reported as :cve:`2008-5983`; discussed in :gh:`50003`, and "
"fixed by Antoine Pitrou."
msgstr ""
"Säkerhetsproblem rapporterat som :cve:`2008-5983`; diskuterat i :gh:`50003`, "
"och åtgärdat av Antoine Pitrou."

msgid ""
"The BerkeleyDB module now has a C API object, available as ``bsddb.db."
"api``.   This object can be used by other C extensions that wish to use the :"
"mod:`bsddb` module for their own purposes. (Contributed by Duncan Grisby.)"
msgstr ""
"BerkeleyDB-modulen har nu ett C API-objekt, tillgängligt som ``bsddb.db."
"api``.   Detta objekt kan användas av andra C-tillägg som vill använda :mod:"
"`bsddb`-modulen för sina egna syften. (Bidrag från Duncan Grisby.)"

msgid ""
"The new buffer interface, previously described in `the PEP 3118 section "
"<#pep-3118-revised-buffer-protocol>`__, adds :c:func:`PyObject_GetBuffer` "
"and :c:func:`PyBuffer_Release`, as well as a few other functions."
msgstr ""
"Det nya buffertgränssnittet, som tidigare beskrevs i avsnittet <#pep-3118-"
"revised-buffer-protocol>`__ i PEP 3118, lägger till :c:func:"
"`PyObject_GetBuffer` och :c:func:`PyBuffer_Release`, samt några andra "
"funktioner."

msgid ""
"Python's use of the C stdio library is now thread-safe, or at least as "
"thread-safe as the underlying library is.  A long-standing potential bug "
"occurred if one thread closed a file object while another thread was reading "
"from or writing to the object.  In 2.6 file objects have a reference count, "
"manipulated by the :c:func:`!PyFile_IncUseCount` and :c:func:`!"
"PyFile_DecUseCount` functions.  File objects can't be closed unless the "
"reference count is zero.  :c:func:`!PyFile_IncUseCount` should be called "
"while the GIL is still held, before carrying out an I/O operation using the "
"``FILE *`` pointer, and :c:func:`!PyFile_DecUseCount` should be called "
"immediately after the GIL is re-acquired. (Contributed by Antoine Pitrou and "
"Gregory P. Smith.)"
msgstr ""
"Pythons användning av C stdio-biblioteket är nu trådsäkert, eller åtminstone "
"lika trådsäkert som det underliggande biblioteket är.  En potentiell bugg "
"som funnits länge uppstod om en tråd stängde ett filobjekt medan en annan "
"tråd läste från eller skrev till objektet.  I 2.6 har filobjekt ett "
"referensantal som manipuleras av funktionerna :c:func:`!PyFile_IncUseCount` "
"och :c:func:`!PyFile_DecUseCount`.  Filobjekt kan inte stängas om inte "
"referensantalet är noll. :c:func:`!PyFile_IncUseCount` bör anropas medan GIL "
"fortfarande hålls, innan en I/O-operation utförs med hjälp av pekaren ``FILE "
"*``, och :c:func:`!PyFile_DecUseCount` bör anropas omedelbart efter att GIL "
"återfåtts. (Bidrag från Antoine Pitrou och Gregory P. Smith.)"

msgid ""
"Importing modules simultaneously in two different threads no longer "
"deadlocks; it will now raise an :exc:`ImportError`.  A new API function, :c:"
"func:`PyImport_ImportModuleNoBlock`, will look for a module in ``sys."
"modules`` first, then try to import it after acquiring an import lock.  If "
"the import lock is held by another thread, an :exc:`ImportError` is raised. "
"(Contributed by Christian Heimes.)"
msgstr ""
"Att importera moduler samtidigt i två olika trådar leder inte längre till "
"dödlägen; det kommer nu att ge upphov till ett :exc:`ImportError`.  En ny "
"API-funktion, :c:func:`PyImport_ImportModuleNoBlock`, letar först efter en "
"modul i ``sys.modules`` och försöker sedan importera den efter att ha fått "
"ett importlås.  Om importlåset hålls av en annan tråd, kommer ett :exc:"
"`ImportError` att uppstå. (Bidrag från Christian Heimes.)"

msgid ""
"Several functions return information about the platform's floating-point "
"support.  :c:func:`PyFloat_GetMax` returns the maximum representable "
"floating-point value, and :c:func:`PyFloat_GetMin` returns the minimum "
"positive value.  :c:func:`PyFloat_GetInfo` returns an object containing more "
"information from the :file:`float.h` file, such as ``\"mant_dig\"`` (number "
"of digits in the mantissa), ``\"epsilon\"`` (smallest difference between 1.0 "
"and the next largest value representable), and several others. (Contributed "
"by Christian Heimes; :issue:`1534`.)"
msgstr ""
"Flera funktioner returnerar information om plattformens stöd för flyttal. :c:"
"func:`PyFloat_GetMax` returnerar det högsta representerbara flyttalsvärdet "
"och :c:func:`PyFloat_GetMin` returnerar det lägsta positiva värdet.  :c:func:"
"`PyFloat_GetInfo` returnerar ett objekt som innehåller mer information från "
"filen :file:`float.h`, till exempel ``\"mant_dig\"`` (antal siffror i "
"mantissan), ``\"epsilon\"`` (minsta skillnaden mellan 1,0 och det näst "
"största representerbara värdet) och flera andra. (Bidrag från Christian "
"Heimes; :issue:`1534`.)"

msgid ""
"C functions and methods that use :c:func:`PyComplex_AsCComplex` will now "
"accept arguments that have a :meth:`__complex__` method.  In particular, the "
"functions in the :mod:`cmath` module will now accept objects with this "
"method. This is a backport of a Python 3.0 change. (Contributed by Mark "
"Dickinson; :issue:`1675423`.)"
msgstr ""
"C-funktioner och metoder som använder :c:func:`PyComplex_AsCComplex` kommer "
"nu att acceptera argument som har en :meth:`__complex__`-metod.  I synnerhet "
"kommer funktionerna i modulen :mod:`cmath` nu att acceptera objekt med den "
"här metoden. Detta är en backport av en ändring i Python 3.0. (Bidrag från "
"Mark Dickinson; :issue:`1675423`.)"

msgid ""
"Python's C API now includes two functions for case-insensitive string "
"comparisons, ``PyOS_stricmp(char*, char*)`` and ``PyOS_strnicmp(char*, "
"char*, Py_ssize_t)``. (Contributed by Christian Heimes; :issue:`1635`.)"
msgstr ""
"Pythons C API innehåller nu två funktioner för skiftlägesokänsliga "
"strängjämförelser, ``PyOS_stricmp(char*, char*)`` och ``PyOS_strnicmp(char*, "
"char*, Py_ssize_t)``. (Bidrag från Christian Heimes; :issue:`1635`.)"

msgid ""
"Many C extensions define their own little macro for adding integers and "
"strings to the module's dictionary in the ``init*`` function.  Python 2.6 "
"finally defines standard macros for adding values to a module, :c:macro:"
"`PyModule_AddStringMacro` and :c:macro:`PyModule_AddIntMacro()`.  "
"(Contributed by Christian Heimes.)"
msgstr ""
"Många C-tillägg definierar sina egna små makron för att lägga till heltal "
"och strängar till modulens ordbok i funktionen ``init*``.  Python 2.6 "
"definierar äntligen standardmakron för att lägga till värden i en modul, :c:"
"macro:`PyModule_AddStringMacro` och :c:macro:`PyModule_AddIntMacro()`.  "
"(Bidrag från Christian Heimes.)"

msgid ""
"Some macros were renamed in both 3.0 and 2.6 to make it clearer that they "
"are macros, not functions.  :c:macro:`!Py_Size()` became :c:macro:"
"`Py_SIZE()`, :c:macro:`!Py_Type()` became :c:macro:`Py_TYPE()`, and :c:macro:"
"`!Py_Refcnt()` became :c:macro:`Py_REFCNT()`. The mixed-case macros are "
"still available in Python 2.6 for backward compatibility. (:issue:`1629`)"
msgstr ""
"Vissa makron döptes om i både 3.0 och 2.6 för att göra det tydligare att de "
"är makron, inte funktioner. :c:macro:`!Py_Size()` blev :c:macro:"
"`Py_SIZE()`, :c:macro:`!Py_Type()` blev :c:macro:`Py_TYPE()`, och :c:macro:`!"
"Py_Refcnt()` blev :c:macro:`Py_REFCNT()`. Makron med blandade versaler är "
"fortfarande tillgängliga i Python 2.6 för bakåtkompatibilitet. (:issue:"
"`1629`)"

msgid ""
"Distutils now places C extensions it builds in a different directory when "
"running on a debug version of Python. (Contributed by Collin Winter; :issue:"
"`1530959`.)"
msgstr ""
"Distutils placerar nu C-tillägg som den bygger i en annan katalog när den "
"körs på en debug-version av Python. (Bidrag från Collin Winter; :issue:"
"`1530959`.)"

msgid ""
"Several basic data types, such as integers and strings, maintain internal "
"free lists of objects that can be re-used.  The data structures for these "
"free lists now follow a naming convention: the variable is always named "
"``free_list``, the counter is always named ``numfree``, and a macro "
"``Py<typename>_MAXFREELIST`` is always defined."
msgstr ""
"Flera grundläggande datatyper, t.ex. heltal och strängar, har interna fria "
"listor med objekt som kan återanvändas.  Datastrukturerna för dessa fria "
"listor följer nu en namngivningskonvention: variabeln heter alltid "
"``free_list``, räknaren heter alltid ``numfree`` och ett makro "
"``Py<typename>_MAXFREELIST`` definieras alltid."

msgid ""
"A new Makefile target, \"make patchcheck\", prepares the Python source tree "
"for making a patch: it fixes trailing whitespace in all modified ``.py`` "
"files, checks whether the documentation has been changed, and reports "
"whether the :file:`Misc/ACKS` and :file:`Misc/NEWS` files have been updated. "
"(Contributed by Brett Cannon.)"
msgstr ""
"Ett nytt Makefile-mål, \"make patchcheck\", förbereder Python-källträdet för "
"att göra en patch: det fixar efterföljande blanksteg i alla modifierade ``."
"py`'-filer, kontrollerar om dokumentationen har ändrats och rapporterar om "
"filerna :file:`Misc/ACKS` och :file:`Misc/NEWS` har uppdaterats. (Bidrag "
"från Brett Cannon.)"

msgid ""
"Another new target, \"make profile-opt\", compiles a Python binary using "
"GCC's profile-guided optimization.  It compiles Python with profiling "
"enabled, runs the test suite to obtain a set of profiling results, and then "
"compiles using these results for optimization. (Contributed by Gregory P. "
"Smith.)"
msgstr ""
"Ett annat nytt mål, \"make profile-opt\", kompilerar en Python-binärfil med "
"hjälp av GCC:s profilstyrda optimering.  Det kompilerar Python med "
"profilering aktiverad, kör testsviten för att få en uppsättning "
"profileringsresultat och kompilerar sedan med hjälp av dessa resultat för "
"optimering. (Bidrag från Gregory P. Smith.)"

msgid "Port-Specific Changes: Windows"
msgstr "Portspecifika ändringar: Fönster"

msgid ""
"The support for Windows 95, 98, ME and NT4 has been dropped. Python 2.6 "
"requires at least Windows 2000 SP4."
msgstr ""
"Stödet för Windows 95, 98, ME och NT4 har tagits bort. Python 2.6 kräver "
"minst Windows 2000 SP4."

msgid ""
"The new default compiler on Windows is Visual Studio 2008 (version 9.0). The "
"build directories for Visual Studio 2003 (version 7.1) and 2005 (version "
"8.0) were moved into the PC/ directory. The new :file:`PCbuild` directory "
"supports cross compilation for X64, debug builds and Profile Guided "
"Optimization (PGO). PGO builds are roughly 10% faster than normal builds.  "
"(Contributed by Christian Heimes with help from Amaury Forgeot d'Arc and "
"Martin von Löwis.)"
msgstr ""
"Den nya standardkompilatorn i Windows är Visual Studio 2008 (version 9.0). "
"Byggkatalogerna för Visual Studio 2003 (version 7.1) och 2005 (version 8.0) "
"har flyttats till katalogen PC/. Den nya :file:`PCbuild`-katalogen stöder "
"korskompilering för X64, debug-byggnader och Profile Guided Optimization "
"(PGO). PGO-byggnationer är ungefär 10% faster än normala byggnationer.  "
"(Bidrag från Christian Heimes med hjälp av Amaury Forgeot d'Arc och Martin "
"von Löwis)"

msgid ""
"The :mod:`msvcrt` module now supports both the normal and wide char variants "
"of the console I/O API.  The :func:`~msvcrt.getwch` function reads a "
"keypress and returns a Unicode value, as does the :func:`~msvcrt.getwche` "
"function.  The :func:`~msvcrt.putwch` function takes a Unicode character and "
"writes it to the console. (Contributed by Christian Heimes.)"
msgstr ""
"Modulen :mod:`msvcrt` har nu stöd för både normal- och wide char-varianterna "
"av konsolens I/O API.  Funktionen :func:`~msvcrt.getwch` läser en "
"tangenttryckning och returnerar ett Unicode-värde, vilket även gäller för "
"funktionen :func:`~msvcrt.getwche`.  Funktionen :func:`~msvcrt.putwch` tar "
"ett Unicode-tecken och skriver det till konsolen. (Bidrag från Christian "
"Heimes.)"

msgid ""
":func:`os.path.expandvars` will now expand environment variables in the form "
"\"%var%\", and \"~user\" will be expanded into the user's home directory "
"path.  (Contributed by Josiah Carlson; :issue:`957650`.)"
msgstr ""
":func:`os.path.expandvars` kommer nu att expandera miljövariabler i formen "
"\"%var%\", och \"~user\" kommer att expanderas till användarens sökväg till "
"hemkatalogen.  (Bidrag från Josiah Carlson; :issue:`957650`.)"

msgid ""
"The :mod:`socket` module's socket objects now have an :meth:`~socket.socket."
"ioctl` method that provides a limited interface to the :c:func:`WSAIoctl` "
"system interface."
msgstr ""
"Socketobjekten i modulen :mod:`socket` har nu en metod :meth:`~socket.socket."
"ioctl` som ger ett begränsat gränssnitt till systemgränssnittet :c:func:"
"`WSAIoctl`."

msgid ""
"The :mod:`_winreg <winreg>` module now has a function, :func:`~winreg."
"ExpandEnvironmentStrings`, that expands environment variable references such "
"as ``%NAME%`` in an input string.  The handle objects provided by this "
"module now support the context protocol, so they can be used in :keyword:"
"`with` statements. (Contributed by Christian Heimes.)"
msgstr ""
"Modulen :mod:`_winreg <winreg>` har nu en funktion, :func:`~winreg."
"ExpandEnvironmentStrings`, som expanderar referenser till miljövariabler som "
"``%NAME%`` i en indatasträng.  Handle-objekten som tillhandahålls av denna "
"modul stöder nu kontextprotokollet, så att de kan användas i :keyword:`with`-"
"satser. (Bidrag från Christian Heimes.)"

msgid ""
":mod:`_winreg <winreg>` also has better support for x64 systems, exposing "
"the :func:`~winreg.DisableReflectionKey`, :func:`~winreg."
"EnableReflectionKey`, and :func:`~winreg.QueryReflectionKey` functions, "
"which enable and disable registry reflection for 32-bit processes running on "
"64-bit systems. (:issue:`1753245`)"
msgstr ""
":mod:`_winreg <winreg>` har också bättre stöd för x64-system, med "
"funktionerna :func:`~winreg.DisableReflectionKey`, :func:`~winreg."
"EnableReflectionKey` och :func:`~winreg.QueryReflectionKey`, som aktiverar "
"och inaktiverar registerreflektion för 32-bitars processer som körs på 64-"
"bitars system. (:issue:`1753245`)"

msgid ""
"The :mod:`!msilib` module's :class:`!Record` object gained :meth:`!"
"GetInteger` and :meth:`!GetString` methods that return field values as an "
"integer or a string. (Contributed by Floris Bruynooghe; :issue:`2125`.)"
msgstr ""
"Modulen :mod:`!msilib`:s :class:`!Record`-objekt har fått metoderna :meth:`!"
"GetInteger` och :meth:`!GetString` som returnerar fältvärden som ett heltal "
"eller en sträng. (Bidrag från Floris Bruynooghe; :issue:`2125`.)"

msgid "Port-Specific Changes: Mac OS X"
msgstr "Hamnspecifika ändringar: Mac OS X"

msgid ""
"When compiling a framework build of Python, you can now specify the "
"framework name to be used by providing the :option:`!--with-framework-name=` "
"option to the :program:`configure` script."
msgstr ""
"När du kompilerar en ramverksversion av Python kan du nu ange vilket "
"ramverksnamn som ska användas genom att ange alternativet :option:`!--with-"
"framework-name=` till skriptet :program:`configure`."

msgid ""
"The :mod:`!macfs` module has been removed.  This in turn required the :func:"
"`!macostools.touched` function to be removed because it depended on the :mod:"
"`!macfs` module.  (:issue:`1490190`)"
msgstr ""
"Modulen :mod:`!macfs` har tagits bort.  Detta krävde i sin tur att "
"funktionen :func:`!macostools.touched` togs bort eftersom den var beroende "
"av modulen :mod:`!macfs`.  (:issue:`1490190`)"

msgid ""
"Many other Mac OS modules have been deprecated and will be removed in Python "
"3.0: :mod:`!_builtinSuites`, :mod:`!aepack`, :mod:`!aetools`, :mod:`!"
"aetypes`, :mod:`!applesingle`, :mod:`!appletrawmain`, :mod:`!appletrunner`, :"
"mod:`!argvemulator`, :mod:`!Audio_mac`, :mod:`!autoGIL`, :mod:`!Carbon`, :"
"mod:`!cfmfile`, :mod:`!CodeWarrior`, :mod:`!ColorPicker`, :mod:`!"
"EasyDialogs`, :mod:`!Explorer`, :mod:`!Finder`, :mod:`!FrameWork`, :mod:`!"
"findertools`, :mod:`!ic`, :mod:`!icglue`, :mod:`!icopen`, :mod:`!"
"macerrors`, :mod:`!MacOS`, :mod:`!macfs`, :mod:`!macostools`, :mod:`!"
"macresource`, :mod:`!MiniAEFrame`, :mod:`!Nav`, :mod:`!Netscape`, :mod:`!"
"OSATerminology`, :mod:`!pimp`, :mod:`!PixMapWrapper`, :mod:`!StdSuites`, :"
"mod:`!SystemEvents`, :mod:`!Terminal`, and :mod:`!terminalcommand`."
msgstr ""
"Många andra Mac OS-moduler har blivit föråldrade och kommer att tas bort i "
"Python 3.0: :mod:`!_builtinSuites`, :mod:`!aepack`, :mod:`!aetools`, :mod:`!"
"aetypes`, :mod:`!applesingle`, :mod:`!appletrawmain`, :mod:`!appletrunner`, :"
"mod:`!argvemulator`, :mod:`!Audio_mac`, :mod:`!autoGIL`, :mod:`!Carbon`, :"
"mod:`!cfmfile`, :mod:`!CodeWarrior`, :mod:`!ColorPicker`, :mod:`!"
"EasyDialogs`, :mod:`!Explorer`, :mod:`!Finder`, :mod:`!FrameWork`, :mod:`!"
"findertools`, :mod:`!ic`, :mod:`!icglue`, :mod:`!icopen`, :mod:`!"
"macerrors`, :mod:`!MacOS`, :mod:`!macfs`, :mod:`!macostools`, :mod:`!"
"macresource`, :mod:`!MiniAEFrame`, :mod:`!Nav`, :mod:`!Netscape`, :mod:`!"
"OSATerminology`, :mod:`!pimp`, :mod:`!PixMapWrapper`, :mod:`!StdSuites`, :"
"mod:`!SystemEvents`, :mod:`!Terminal`, och :mod:`!terminalcommand`."

msgid "Port-Specific Changes: IRIX"
msgstr "Portspecifika ändringar: IRIX"

msgid ""
"A number of old IRIX-specific modules were deprecated and will be removed in "
"Python 3.0: :mod:`!al` and :mod:`!AL`, :mod:`!cd`, :mod:`!cddb`, :mod:`!"
"cdplayer`, :mod:`!CL` and :mod:`!cl`, :mod:`!DEVICE`, :mod:`!ERRNO`, :mod:`!"
"FILE`, :mod:`!FL` and :mod:`!fl`, :mod:`!flp`, :mod:`!fm`, :mod:`!GET`, :mod:"
"`!GLWS`, :mod:`!GL` and :mod:`!gl`, :mod:`!IN`, :mod:`!IOCTL`, :mod:`!"
"jpeg`, :mod:`!panelparser`, :mod:`!readcd`, :mod:`!SV` and :mod:`!sv`, :mod:"
"`!torgb`, :mod:`!videoreader`, and :mod:`!WAIT`."
msgstr ""
"Ett antal gamla IRIX-specifika moduler har föråldrats och kommer att tas "
"bort i Python 3.0: :mod:`!al` och :mod:`!AL`, :mod:`!cd`, :mod:`!cddb`, :mod:"
"`!cdplayer`, :mod:`!CL` och :mod:`!cl`, :mod:`!DEVICE`, :mod:`!ERRNO`, :mod:"
"`!FILE`, :mod:`!FL` och :mod:`!fl`, :mod:`!flp`, :mod:`!fm`, :mod:`!GET`, :"
"mod:`!GLWS`, :mod:`!GL` och :mod:`!gl`, :mod:`!IN`, :mod:`!IOCTL`, :mod:`!"
"jpeg`, :mod:`!panelparser`, :mod:`!readcd`, :mod:`!SV` och :mod:`!sv`, :mod:"
"`!torgb`, :mod:`!videoreader`, och :mod:`!WAIT`."

msgid "Porting to Python 2.6"
msgstr "Portning till Python 2.6"

msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr ""
"I det här avsnittet listas tidigare beskrivna ändringar och andra buggfixar "
"som kan kräva ändringar i din kod:"

msgid ""
"Classes that aren't supposed to be hashable should set ``__hash__ = None`` "
"in their definitions to indicate the fact."
msgstr ""
"Klasser som inte är avsedda att vara hashbara bör ange ``__hash__ = None`` i "
"sina definitioner för att ange detta."

msgid ""
"The :meth:`__init__` method of :class:`collections.deque` now clears any "
"existing contents of the deque before adding elements from the iterable.  "
"This change makes the behavior match ``list.__init__()``."
msgstr ""
"Metoden :meth:`__init__` i :class:`collections.deque` rensar nu allt "
"befintligt innehåll i deque innan element läggs till från iterabeln.  Denna "
"ändring gör att beteendet matchar ``list.__init__()``."

msgid ""
":meth:`object.__init__` previously accepted arbitrary arguments and keyword "
"arguments, ignoring them.  In Python 2.6, this is no longer allowed and will "
"result in a :exc:`TypeError`.  This will affect :meth:`__init__` methods "
"that end up calling the corresponding method on :class:`object` (perhaps "
"through using :func:`super`). See :issue:`1683368` for discussion."
msgstr ""
":meth:`object.__init__` accepterade tidigare godtyckliga argument och "
"nyckelordsargument och ignorerade dem.  I Python 2.6 är detta inte längre "
"tillåtet och kommer att resultera i ett :exc:`TypeError`.  Detta kommer att "
"påverka :meth:`__init__`-metoder som i slutändan anropar motsvarande metod "
"på :class:`object` (kanske genom att använda :func:`super`). Se :issue:"
"`1683368` för diskussion."

msgid ""
"The :class:`Decimal` constructor now accepts leading and trailing whitespace "
"when passed a string.  Previously it would raise an :exc:`InvalidOperation` "
"exception.  On the other hand, the :meth:`create_decimal` method of :class:"
"`Context` objects now explicitly disallows extra whitespace, raising a :exc:"
"`ConversionSyntax` exception."
msgstr ""
"Konstruktorn :class:`Decimal` accepterar nu inledande och avslutande "
"blanksteg när den får en sträng.  Tidigare skulle den ge upphov till ett :"
"exc:`InvalidOperation` undantag.  Å andra sidan, metoden :meth:"
"`create_decimal` för :class:`Context`-objekt tillåter nu uttryckligen inte "
"extra blanksteg, vilket ger upphov till ett :exc:`ConversionSyntax`-undantag."

msgid ""
"Due to an implementation accident, if you passed a file path to the built-"
"in  :func:`__import__` function, it would actually import the specified "
"file.  This was never intended to work, however, and the implementation now "
"explicitly checks for this case and raises an :exc:`ImportError`."
msgstr ""
"På grund av en implementeringsolycka, om du skickade en filsökväg till den "
"inbyggda :func:`__import__`-funktionen, skulle den faktiskt importera den "
"angivna filen.  Detta var dock aldrig tänkt att fungera, och "
"implementationen kontrollerar nu uttryckligen för detta fall och ger upphov "
"till ett :exc:`ImportError`."

msgid ""
"C API: the :c:func:`PyImport_Import` and :c:func:`PyImport_ImportModule` "
"functions now default to absolute imports, not relative imports. This will "
"affect C extensions that import other modules."
msgstr ""
"C API: funktionerna :c:func:`PyImport_Import` och :c:func:"
"`PyImport_ImportModule` använder nu som standard absolut import, inte "
"relativ import. Detta kommer att påverka C-tillägg som importerar andra "
"moduler."

msgid ""
"C API: extension data types that shouldn't be hashable should define their "
"``tp_hash`` slot to :c:func:`PyObject_HashNotImplemented`."
msgstr ""
"C API: Tilläggsdatatyper som inte bör vara hashbara bör definiera sin "
"``tp_hash``-plats till :c:func:`PyObject_HashNotImplemented`."

msgid ""
"The :mod:`socket` module exception :exc:`socket.error` now inherits from :"
"exc:`IOError`.  Previously it wasn't a subclass of :exc:`StandardError` but "
"now it is, through :exc:`IOError`. (Implemented by Gregory P. Smith; :issue:"
"`1706815`.)"
msgstr ""
"Modulundantaget :mod:`socket` :exc:`socket.error` ärver nu från :exc:"
"`IOError`.  Tidigare var det inte en underklass till :exc:`StandardError` "
"men nu är det det, genom :exc:`IOError`. (Implementerat av Gregory P. "
"Smith; :issue:`1706815`.)"

msgid ""
"The :mod:`xmlrpclib <xmlrpc.client>` module no longer automatically "
"converts :class:`datetime.date` and :class:`datetime.time` to the :class:"
"`xmlrpclib.DateTime <xmlrpc.client.DateTime>` type; the conversion semantics "
"were not necessarily correct for all applications.  Code using :mod:`!"
"xmlrpclib` should convert :class:`date` and :class:`~datetime.time` "
"instances. (:issue:`1330538`)"
msgstr ""
"Modulen :mod:`xmlrpclib <xmlrpc.client>` konverterar inte längre "
"automatiskt :class:`datetime.date` och :class:`datetime.time` till typen :"
"class:`xmlrpclib.DateTime <xmlrpc.client.DateTime>`; konverteringssemantiken "
"var inte nödvändigtvis korrekt för alla applikationer.  Kod som använder :"
"mod:`!xmlrpclib` bör konvertera :class:`date` och :class:`~datetime.time` "
"instanser. (:issue:`1330538`)"

msgid ""
"(3.0-warning mode) The :class:`Exception` class now warns when accessed "
"using slicing or index access; having :class:`Exception` behave like a tuple "
"is being phased out."
msgstr ""
"(3.0-warning mode) Klassen :class:`Exception` varnar nu vid åtkomst med "
"slicing eller indexåtkomst; att :class:`Exception` beter sig som en tuple "
"håller på att fasas ut."

msgid ""
"(3.0-warning mode) inequality comparisons between two dictionaries or two "
"objects that don't implement comparison methods are reported as warnings.  "
"``dict1 == dict2`` still works, but ``dict1 < dict2`` is being phased out."
msgstr ""
"(3.0-varningsläge) ojämlikhetsjämförelser mellan två ordböcker eller två "
"objekt som inte implementerar jämförelsemetoder rapporteras som varningar.  "
"``dict1 == dict2`` fungerar fortfarande, men ``dict1 < dict2`` håller på att "
"fasas ut."

msgid ""
"Comparisons between cells, which are an implementation detail of Python's "
"scoping rules, also cause warnings because such comparisons are forbidden "
"entirely in 3.0."
msgstr ""
"Jämförelser mellan celler, som är en implementeringsdetalj av Pythons "
"scoping-regler, orsakar också varningar eftersom sådana jämförelser är helt "
"förbjudna i 3.0."

msgid "For applications that embed Python:"
msgstr "För applikationer som bygger in Python:"

msgid ""
"The :c:func:`!PySys_SetArgvEx` function was added in Python 2.6.6, letting "
"applications close a security hole when the existing :c:func:`!"
"PySys_SetArgv` function was used.  Check whether you're calling :c:func:`!"
"PySys_SetArgv` and carefully consider whether the application should be "
"using :c:func:`!PySys_SetArgvEx` with *updatepath* set to false."
msgstr ""
"Funktionen :c:func:`!PySys_SetArgvEx` lades till i Python 2.6.6, vilket gör "
"det möjligt för applikationer att täppa till ett säkerhetshål när den "
"befintliga funktionen :c:func:`!PySys_SetArgv` användes.  Kontrollera om du "
"anropar :c:func:`!PySys_SetArgv` och överväg noga om programmet bör använda :"
"c:func:`!PySys_SetArgvEx` med *updatepath* satt till false."

msgid "Acknowledgements"
msgstr "Tack till"

msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Georg Brandl, Steve Brown, Nick Coghlan, Ralph Corderoy, Jim Jewett, Kent "
"Johnson, Chris Lambacher,  Martin Michlmayr, Antoine Pitrou, Brian Warner."
msgstr ""
"Författaren vill tacka följande personer för förslag, korrigeringar och "
"hjälp med olika utkast av denna artikel: Georg Brandl, Steve Brown, Nick "
"Coghlan, Ralph Corderoy, Jim Jewett, Kent Johnson, Chris Lambacher, Martin "
"Michlmayr, Antoine Pitrou, Brian Warner."

msgid "universal newlines"
msgstr "universella nya rader"

msgid "What's new"
msgstr "Vad är nytt"
