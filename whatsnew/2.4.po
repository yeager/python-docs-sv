# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's New in Python 2.4"
msgstr "Vad är nytt i Python 2.4"

msgid "Author"
msgstr "Författare"

msgid "A.M. Kuchling"
msgstr "A.M. Kuchling"

msgid ""
"This article explains the new features in Python 2.4.1, released on March "
"30, 2005."
msgstr ""
"I den här artikeln beskrivs de nya funktionerna i Python 2.4.1, som släpptes "
"den 30 mars 2005."

msgid ""
"Python 2.4 is a medium-sized release.  It doesn't introduce as many changes "
"as the radical Python 2.2, but introduces more features than the "
"conservative 2.3 release.  The most significant new language features are "
"function decorators and generator expressions; most other changes are to the "
"standard library."
msgstr ""
"Python 2.4 är en medelstor release.  Den introducerar inte lika många "
"förändringar som den radikala Python 2.2, men introducerar fler funktioner "
"än den konservativa 2.3-versionen.  De mest betydande nya språkfunktionerna "
"är funktionsdekoratorer och generatoruttryck; de flesta andra ändringar är i "
"standardbiblioteket."

msgid ""
"According to the CVS change logs, there were 481 patches applied and 502 "
"bugs fixed between Python 2.3 and 2.4.  Both figures are likely to be "
"underestimates."
msgstr ""
"Enligt CVS-ändringsloggarna tillämpades 481 korrigeringar och 502 buggar "
"åtgärdades mellan Python 2.3 och 2.4.  Båda siffrorna är sannolikt "
"underskattningar."

msgid ""
"This article doesn't attempt to provide a complete specification of every "
"single new feature, but instead provides a brief introduction to each "
"feature.  For full details, you should refer to the documentation for Python "
"2.4, such as the Python Library Reference and the Python Reference Manual.  "
"Often you will be referred to the PEP for a particular new feature for "
"explanations of the implementation and design rationale."
msgstr ""
"Den här artikeln försöker inte ge en fullständig specifikation av varje "
"enskild ny funktion, utan ger istället en kort introduktion till varje "
"funktion.  För fullständiga detaljer bör du hänvisa till dokumentationen för "
"Python 2.4, till exempel Python Library Reference och Python Reference "
"Manual.  Ofta kommer du att hänvisas till PEP för en viss ny funktion för "
"förklaringar av implementeringen och designrationaliteten."

msgid "PEP 218: Built-In Set Objects"
msgstr "PEP 218: Inbyggda set-objekt"

msgid ""
"Python 2.3 introduced the :mod:`sets` module.  C implementations of set data "
"types have now been added to the Python core as two new built-in types, "
"``set(iterable)`` and ``frozenset(iterable)``.  They provide high speed "
"operations for membership testing, for eliminating duplicates from "
"sequences, and for mathematical operations like unions, intersections, "
"differences, and symmetric differences. ::"
msgstr ""
"Python 2.3 introducerade modulen :mod:`sets`.  C-implementeringar av set-"
"datatyper har nu lagts till i Python-kärnan som två nya inbyggda typer, "
"``set(iterable)`` och ``frozenset(iterable)``.  De ger "
"höghastighetsoperationer för medlemskapstestning, för att eliminera "
"dubbletter från sekvenser och för matematiska operationer som unioner, "
"korsningar, skillnader och symmetriska skillnader:"

msgid ""
">>> a = set('abracadabra')              # form a set from a string\n"
">>> 'z' in a                            # fast membership testing\n"
"False\n"
">>> a                                   # unique letters in a\n"
"set(['a', 'r', 'b', 'c', 'd'])\n"
">>> ''.join(a)                          # convert back into a string\n"
"'arbcd'\n"
"\n"
">>> b = set('alacazam')                 # form a second set\n"
">>> a - b                               # letters in a but not in b\n"
"set(['r', 'd', 'b'])\n"
">>> a | b                               # letters in either a or b\n"
"set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'])\n"
">>> a & b                               # letters in both a and b\n"
"set(['a', 'c'])\n"
">>> a ^ b                               # letters in a or b but not both\n"
"set(['r', 'd', 'b', 'm', 'z', 'l'])\n"
"\n"
">>> a.add('z')                          # add a new element\n"
">>> a.update('wxy')                     # add multiple new elements\n"
">>> a\n"
"set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'x', 'z'])\n"
">>> a.remove('x')                       # take one element out\n"
">>> a\n"
"set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'z'])"
msgstr ""
">>> a = set('abracadabra') # bilda ett set från en sträng\n"
">>> 'z' i a # snabb testning av medlemskap\n"
"Falsk\n"
">>> a # unika bokstäver i a\n"
"set(['a', 'r', 'b', 'c', 'd'])\n"
">>> ''.join(a) # konvertera tillbaka till en sträng\n"
"'arbcd'\n"
"\n"
">>> b = set('alacazam') # bilda ett andra set\n"
">>> a - b # bokstäver i a men inte i b\n"
"set(['r', 'd', 'b'])\n"
">>> a | b # bokstäver i antingen a eller b\n"
"set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'])\n"
">>> a & b # bokstäver i både a och b\n"
"set(['a', 'c'])\n"
">>> a ^ b # bokstäver i a eller b men inte i båda\n"
"set(['r', 'd', 'b', 'm', 'z', 'l'])\n"
"\n"
">>> a.add('z') # lägg till ett nytt element\n"
">>> a.update('wxy') # lägg till flera nya element\n"
">>> a\n"
"set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'x', 'z'])\n"
">>> a.remove('x') # ta bort ett element\n"
">>> a\n"
"set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'z'])"

msgid ""
"The :func:`frozenset` type is an immutable version of :func:`set`. Since it "
"is immutable and hashable, it may be used as a dictionary key or as a member "
"of another set."
msgstr ""
"Typen :func:`frozenset` är en oföränderlig version av :func:`set`. Eftersom "
"den är oföränderlig och hashbar kan den användas som en nyckel i en ordbok "
"eller som en del av en annan uppsättning."

msgid ""
"The :mod:`sets` module remains in the standard library, and may be useful if "
"you wish to subclass the :class:`Set` or :class:`ImmutableSet` classes.  "
"There are currently no plans to deprecate the module."
msgstr ""
"Modulen :mod:`sets` finns kvar i standardbiblioteket och kan vara användbar "
"om du vill underordna klasserna :class:`Set` eller :class:`ImmutableSet`.  "
"Det finns för närvarande inga planer på att avskriva modulen."

msgid ":pep:`218` - Adding a Built-In Set Object Type"
msgstr ":pep:`218` - Lägga till en inbyggd objekttyp för set"

msgid ""
"Originally proposed by Greg Wilson and ultimately implemented by Raymond "
"Hettinger."
msgstr ""
"Ursprungligen föreslagen av Greg Wilson och slutligen implementerad av "
"Raymond Hettinger."

msgid "PEP 237: Unifying Long Integers and Integers"
msgstr "PEP 237: Förenande av långa heltal och heltal"

msgid ""
"The lengthy transition process for this PEP, begun in Python 2.2, takes "
"another step forward in Python 2.4.  In 2.3, certain integer operations that "
"would behave differently after int/long unification triggered :exc:"
"`FutureWarning` warnings and returned values limited to 32 or 64 bits "
"(depending on your platform).  In 2.4, these expressions no longer produce a "
"warning and instead produce a different result that's usually a long integer."
msgstr ""
"Den långa övergångsprocessen för denna PEP, som påbörjades i Python 2.2, tar "
"ytterligare ett steg framåt i Python 2.4.  I 2.3 utlöste vissa "
"heltalsoperationer som skulle bete sig annorlunda efter int/long-unifiering :"
"exc:`FutureWarning`-varningar och returnerade värden begränsade till 32 "
"eller 64 bitar (beroende på din plattform).  I 2.4 ger dessa uttryck inte "
"längre någon varning utan ger istället ett annat resultat som vanligtvis är "
"ett långt heltal."

msgid ""
"The problematic expressions are primarily left shifts and lengthy "
"hexadecimal and octal constants.  For example, ``2 << 32`` results in a "
"warning in 2.3, evaluating to 0 on 32-bit platforms.  In Python 2.4, this "
"expression now returns the correct answer, 8589934592."
msgstr ""
"De problematiska uttrycken är främst vänsterskift och långa hexadecimal- och "
"oktalkonstanter.  Till exempel resulterar ``2 << 32`` i en varning i 2.3, "
"som utvärderas till 0 på 32-bitars plattformar.  I Python 2.4 returnerar "
"detta uttryck nu det korrekta svaret, 8589934592."

msgid ":pep:`237` - Unifying Long Integers and Integers"
msgstr ":pep:`237` - Unifiera långa heltal och heltal"

msgid ""
"Original PEP written by Moshe Zadka and GvR.  The changes for 2.4 were "
"implemented by  Kalle Svensson."
msgstr ""
"Ursprunglig PEP skriven av Moshe Zadka och GvR.  Ändringarna för 2.4 "
"implementerades av Kalle Svensson."

msgid "PEP 289: Generator Expressions"
msgstr "PEP 289: Generatoruttryck"

msgid ""
"The iterator feature introduced in Python 2.2 and the :mod:`itertools` "
"module make it easier to write programs that loop through large data sets "
"without having the entire data set in memory at one time.  List "
"comprehensions don't fit into this picture very well because they produce a "
"Python list object containing all of the items.  This unavoidably pulls all "
"of the objects into memory, which can be a problem if your data set is very "
"large.  When trying to write a functionally styled program, it would be "
"natural to write something like::"
msgstr ""
"Iteratorfunktionen som introducerades i Python 2.2 och modulen :mod:"
"`itertools` gör det lättare att skriva program som loopar genom stora "
"datamängder utan att ha hela datamängden i minnet på en gång.  "
"Listkomprehensioner passar inte in i den här bilden särskilt bra eftersom de "
"producerar ett Python-listobjekt som innehåller alla objekt.  Detta drar "
"oundvikligen alla objekt till minnet, vilket kan vara ett problem om din "
"datauppsättning är mycket stor.  När man försöker skriva ett program i "
"funktionell stil skulle det vara naturligt att skriva något i stil med::"

msgid ""
"links = [link for link in get_all_links() if not link.followed]\n"
"for link in links:\n"
"    ..."
msgstr ""
"links = [link for link in get_all_links() if not link.followed]\n"
"för länk i länkar:\n"
"    ..."

msgid "instead of  ::"
msgstr "istället för ::"

msgid ""
"for link in get_all_links():\n"
"    if link.followed:\n"
"        continue\n"
"    ..."
msgstr ""
"för länk i get_all_links():\n"
"    om länk.följd:\n"
"        fortsätt\n"
"    ..."

msgid ""
"The first form is more concise and perhaps more readable, but if you're "
"dealing with a large number of link objects you'd have to write the second "
"form to avoid having all link objects in memory at the same time."
msgstr ""
"Den första formen är mer kortfattad och kanske mer läsbar, men om du har att "
"göra med ett stort antal länkobjekt måste du skriva den andra formen för att "
"undvika att ha alla länkobjekt i minnet samtidigt."

msgid ""
"Generator expressions work similarly to list comprehensions but don't "
"materialize the entire list; instead they create a generator that will "
"return elements one by one.  The above example could be written as::"
msgstr ""
"Generatoruttryck fungerar på samma sätt som listkomprehensioner men "
"materialiserar inte hela listan; istället skapar de en generator som "
"returnerar elementen ett efter ett.  Exemplet ovan kan skrivas som::"

msgid ""
"links = (link for link in get_all_links() if not link.followed)\n"
"for link in links:\n"
"    ..."
msgstr ""
"länkar = (länk för länk i get_all_links() if not link.followed)\n"
"för länk i länkar:\n"
"    ..."

msgid ""
"Generator expressions always have to be written inside parentheses, as in "
"the above example.  The parentheses signalling a function call also count, "
"so if you want to create an iterator that will be immediately passed to a "
"function you could write::"
msgstr ""
"Generatoruttryck måste alltid skrivas inom parentes, som i exemplet ovan.  "
"Parentesen som signalerar ett funktionsanrop räknas också, så om du vill "
"skapa en iterator som omedelbart skickas till en funktion kan du skriva::"

msgid "print sum(obj.count for obj in list_all_objects())"
msgstr "print sum(obj.count för obj i list_all_objects())"

msgid ""
"Generator expressions differ from list comprehensions in various small ways. "
"Most notably, the loop variable (*obj* in the above example) is not "
"accessible outside of the generator expression.  List comprehensions leave "
"the variable assigned to its last value; future versions of Python will "
"change this, making list comprehensions match generator expressions in this "
"respect."
msgstr ""
"Generatoruttryck skiljer sig från listkomprehensioner på flera små sätt. Det "
"mest anmärkningsvärda är att loopvariabeln (*obj* i exemplet ovan) inte är "
"tillgänglig utanför generatoruttrycket.  Listförståelser lämnar variabeln "
"tilldelad till sitt senaste värde; framtida versioner av Python kommer att "
"ändra detta, vilket gör att listförståelser matchar generatoruttryck i detta "
"avseende."

msgid ":pep:`289` - Generator Expressions"
msgstr ":pep:`289` - Generatoruttryck"

msgid ""
"Proposed by Raymond Hettinger and implemented by Jiwon Seo with early "
"efforts steered by Hye-Shik Chang."
msgstr ""
"Föreslagen av Raymond Hettinger och implementerad av Jiwon Seo med tidiga "
"insatser styrda av Hye-Shik Chang."

msgid "PEP 292: Simpler String Substitutions"
msgstr "PEP 292: Enklare strängbyten"

msgid ""
"Some new classes in the standard library provide an alternative mechanism "
"for substituting variables into strings; this style of substitution may be "
"better for applications where untrained users need to edit templates."
msgstr ""
"Några nya klasser i standardbiblioteket ger en alternativ mekanism för att "
"ersätta variabler med strängar; denna typ av ersättning kan vara bättre för "
"applikationer där otränade användare behöver redigera mallar."

msgid "The usual way of substituting variables by name is the ``%`` operator::"
msgstr "Det vanliga sättet att ersätta variabler med namn är operatorn ``%``::"

msgid ""
">>> '%(page)i: %(title)s' % {'page':2, 'title': 'The Best of Times'}\n"
"'2: The Best of Times'"
msgstr ""
">>> '%(page)i: %(title)s' % {'page':2, 'title': 'Den bästa av tider'}\n"
"'2: Den bästa av tider'"

msgid ""
"When writing the template string, it can be easy to forget the ``i`` or "
"``s`` after the closing parenthesis.  This isn't a big problem if the "
"template is in a Python module, because you run the code, get an "
"\"Unsupported format character\" :exc:`ValueError`, and fix the problem.  "
"However, consider an application such as Mailman where template strings or "
"translations are being edited by users who aren't aware of the Python "
"language.  The format string's syntax is complicated to explain to such "
"users, and if they make a mistake, it's difficult to provide helpful "
"feedback to them."
msgstr ""
"När man skriver mallsträngen kan det vara lätt att glömma ``i`` eller ``s`` "
"efter den avslutande parentesen.  Det här är inte ett stort problem om "
"mallen finns i en Python-modul, eftersom du kör koden, får ett \"Unsupported "
"format character\" :exc:`ValueError` och åtgärdar problemet.  Men tänk på en "
"applikation som Mailman där mallsträngar eller översättningar redigeras av "
"användare som inte känner till Python-språket.  Formatsträngens syntax är "
"komplicerad att förklara för sådana användare, och om de gör ett misstag är "
"det svårt att ge dem användbar feedback."

msgid ""
"PEP 292 adds a :class:`Template` class to the :mod:`string` module that uses "
"``$`` to indicate a substitution::"
msgstr ""
"PEP 292 lägger till en :class:`Template`-klass till :mod:`string`-modulen "
"som använder ``$`` för att ange en substitution::"

msgid ""
">>> import string\n"
">>> t = string.Template('$page: $title')\n"
">>> t.substitute({'page':2, 'title': 'The Best of Times'})\n"
"'2: The Best of Times'"
msgstr ""
">>> import sträng\n"
">>> t = sträng.mall('$sida: $titel')\n"
">>> t.substitute({'page':2, 'title': 'The Best of Times'})\n"
"'2: Den bästa av tider'"

msgid ""
"If a key is missing from the dictionary, the :meth:`substitute` method will "
"raise a :exc:`KeyError`.  There's also a :meth:`safe_substitute` method that "
"ignores missing keys::"
msgstr ""
"Om en nyckel saknas i ordlistan kommer metoden :meth:`substitute` att ge "
"upphov till ett :exc:`KeyError`.  Det finns också en :meth:`safe_substitute`-"
"metod som ignorerar saknade nycklar::"

msgid ""
">>> t = string.Template('$page: $title')\n"
">>> t.safe_substitute({'page':3})\n"
"'3: $title'"
msgstr ""
">>> t = sträng.mall('$sida: $titel')\n"
">>> t.safe_substitute({'page':3})\n"
"'3: $title'"

msgid ":pep:`292` - Simpler String Substitutions"
msgstr ":pep:`292` - Enklare ersättningar för strängar"

msgid "Written and implemented  by Barry Warsaw."
msgstr "Skriven och implementerad av Barry Warsaw."

msgid "PEP 318: Decorators for Functions and Methods"
msgstr "PEP 318: Dekoratorer för funktioner och metoder"

msgid ""
"Python 2.2 extended Python's object model by adding static methods and class "
"methods, but it didn't extend Python's syntax to provide any new way of "
"defining static or class methods.  Instead, you had to write a :keyword:"
"`def` statement in the usual way, and pass the resulting method to a :func:"
"`staticmethod` or :func:`classmethod` function that would wrap up the "
"function as a method of the new type. Your code would look like this::"
msgstr ""
"Python 2.2 utökade Pythons objektmodell genom att lägga till statiska "
"metoder och klassmetoder, men det utökade inte Pythons syntax för att ge "
"något nytt sätt att definiera statiska metoder eller klassmetoder.  Istället "
"var du tvungen att skriva en :keyword:`def`-sats på vanligt sätt och skicka "
"den resulterande metoden till en :func:`staticmethod`- eller :func:"
"`classmethod`-funktion som skulle packa upp funktionen som en metod av den "
"nya typen. Din kod skulle se ut så här::"

msgid ""
"class C:\n"
"   def meth (cls):\n"
"       ...\n"
"\n"
"   meth = classmethod(meth)   # Rebind name to wrapped-up class method"
msgstr ""
"klass C:\n"
"   def meth (cls):\n"
"       ...\n"
"\n"
"   meth = classmethod(meth) # Återkoppla namn till inplastad klassmetod"

msgid ""
"If the method was very long, it would be easy to miss or forget the :func:"
"`classmethod` invocation after the function body."
msgstr ""
"Om metoden var mycket lång skulle det vara lätt att missa eller glömma :func:"
"`classmethod`-inkallelsen efter funktionskroppen."

msgid ""
"The intention was always to add some syntax to make such definitions more "
"readable, but at the time of 2.2's release a good syntax was not obvious.  "
"Today a good syntax *still* isn't obvious but users are asking for easier "
"access to the feature; a new syntactic feature has been added to meet this "
"need."
msgstr ""
"Avsikten var alltid att lägga till en syntax för att göra sådana "
"definitioner mer läsbara, men vid tidpunkten för 2.2:s release var en bra "
"syntax inte självklar.  I dag är en bra syntax *fortfarande* inte självklar, "
"men användarna efterfrågar enklare tillgång till funktionen; en ny "
"syntaktisk funktion har lagts till för att tillgodose detta behov."

msgid ""
"The new feature is called \"function decorators\".  The name comes from the "
"idea that :func:`classmethod`, :func:`staticmethod`, and friends are storing "
"additional information on a function object; they're *decorating* functions "
"with more details."
msgstr ""
"Den nya funktionen kallas \"funktionsdekoratorer\".  Namnet kommer från idén "
"att :func:`classmethod`, :func:`staticmethod` och vänner lagrar ytterligare "
"information om ett funktionsobjekt; de *dekorerar* funktioner med mer "
"detaljer."

msgid ""
"The notation borrows from Java and uses the ``'@'`` character as an "
"indicator. Using the new syntax, the example above would be written::"
msgstr ""
"Notationen är hämtad från Java och använder tecknet ``'@'`` som indikator. "
"Med hjälp av den nya syntaxen skulle exemplet ovan skrivas::"

msgid ""
"class C:\n"
"\n"
"   @classmethod\n"
"   def meth (cls):\n"
"       ..."
msgstr ""
"class C:\n"
"\n"
"   @classmethod\n"
"   def meth (cls):\n"
"       ..."

msgid ""
"The ``@classmethod`` is shorthand for the ``meth=classmethod(meth)`` "
"assignment. More generally, if you have the following::"
msgstr ""
"``@classmethod`` är en förkortning för uppgiften ``meth=classmethod(meth)``. "
"Mer generellt, om du har följande::"

msgid ""
"@A\n"
"@B\n"
"@C\n"
"def f ():\n"
"    ..."
msgstr ""
"@A\n"
"@B\n"
"@C\n"
"def f ():\n"
"    ..."

msgid "It's equivalent to the following pre-decorator code::"
msgstr "Det motsvarar följande kod före inredningen::"

msgid ""
"def f(): ...\n"
"f = A(B(C(f)))"
msgstr ""
"def f(): ...\n"
"f = A(B(C(f)))"

msgid ""
"Decorators must come on the line before a function definition, one decorator "
"per line, and can't be on the same line as the def statement, meaning that "
"``@A def f(): ...`` is illegal.  You can only decorate function definitions, "
"either at the module level or inside a class; you can't decorate class "
"definitions."
msgstr ""
"Dekoratorer måste komma på raden före en funktionsdefinition, en dekorator "
"per rad, och kan inte vara på samma rad som def-satsen, vilket innebär att "
"``@A def f(): ...`` är olagligt.  Du kan bara dekorera "
"funktionsdefinitioner, antingen på modulnivå eller inuti en klass; du kan "
"inte dekorera klassdefinitioner."

msgid ""
"A decorator is just a function that takes the function to be decorated as an "
"argument and returns either the same function or some new object.  The "
"return value of the decorator need not be callable (though it typically is), "
"unless further decorators will be applied to the result.  It's easy to write "
"your own decorators.  The following simple example just sets an attribute on "
"the function object::"
msgstr ""
"En dekorator är bara en funktion som tar den funktion som ska dekoreras som "
"argument och returnerar antingen samma funktion eller något nytt objekt.  "
"Returvärdet för dekoratorn behöver inte vara anropsbart (även om det "
"vanligtvis är det), såvida inte ytterligare dekoratorer kommer att tillämpas "
"på resultatet.  Det är lätt att skriva egna dekoratorer.  Följande enkla "
"exempel sätter bara ett attribut på funktionsobjektet::"

msgid ""
">>> def deco(func):\n"
"...    func.attr = 'decorated'\n"
"...    return func\n"
"...\n"
">>> @deco\n"
"... def f(): pass\n"
"...\n"
">>> f\n"
"<function f at 0x402ef0d4>\n"
">>> f.attr\n"
"'decorated'\n"
">>>"
msgstr ""
">>> def deco(func):\n"
"...    func.attr = 'decorated'\n"
"...    return func\n"
"...\n"
">>> @deco\n"
"... def f(): pass\n"
"...\n"
">>> f\n"
"<function f at 0x402ef0d4>\n"
">>> f.attr\n"
"'decorated'\n"
">>>"

msgid ""
"As a slightly more realistic example, the following decorator checks that "
"the supplied argument is an integer::"
msgstr ""
"Som ett lite mer realistiskt exempel kontrollerar följande dekorator att det "
"medföljande argumentet är ett heltal::"

msgid ""
"def require_int (func):\n"
"    def wrapper (arg):\n"
"        assert isinstance(arg, int)\n"
"        return func(arg)\n"
"\n"
"    return wrapper\n"
"\n"
"@require_int\n"
"def p1 (arg):\n"
"    print arg\n"
"\n"
"@require_int\n"
"def p2(arg):\n"
"    print arg*2"
msgstr ""
"def require_int (func):\n"
"    def wrapper (arg):\n"
"        assert isinstance(arg, int)\n"
"        return func(arg)\n"
"\n"
"    returnera omslag\n"
"\n"
"@kräv_int\n"
"def p1 (arg):\n"
"    skriv ut arg\n"
"\n"
"@krav_int\n"
"def p2(arg):\n"
"    skriv ut arg*2"

msgid ""
"An example in :pep:`318` contains a fancier version of this idea that lets "
"you both specify the required type and check the returned type."
msgstr ""
"Ett exempel i :pep:`318` innehåller en finare version av denna idé som låter "
"dig både ange den nödvändiga typen och kontrollera den returnerade typen."

msgid ""
"Decorator functions can take arguments.  If arguments are supplied, your "
"decorator function is called with only those arguments and must return a new "
"decorator function; this function must take a single function and return a "
"function, as previously described.  In other words, ``@A @B @C(args)`` "
"becomes::"
msgstr ""
"Dekoratorfunktioner kan ta argument.  Om argument anges anropas din "
"dekoratorfunktion med endast dessa argument och måste returnera en ny "
"dekoratorfunktion; denna funktion måste ta en enda funktion och returnera en "
"funktion, enligt tidigare beskrivning.  Med andra ord, ``@A @B @C(args)`` "
"blir::"

msgid ""
"def f(): ...\n"
"_deco = C(args)\n"
"f = A(B(_deco(f)))"
msgstr ""
"def f(): ...\n"
"_deco = C(args)\n"
"f = A(B(_deco(f)))"

msgid ""
"Getting this right can be slightly brain-bending, but it's not too difficult."
msgstr ""
"Att få till det här kan vara en smula klurigt, men det är inte särskilt "
"svårt."

msgid ""
"A small related change makes the :attr:`func_name <function.__name__>` "
"attribute of functions writable.  This attribute is used to display function "
"names in tracebacks, so decorators should change the name of any new "
"function that's constructed and returned."
msgstr ""
"En liten relaterad förändring gör attributet :attr:`func_name <function."
"__name__>` för funktioner skrivbart.  Detta attribut används för att visa "
"funktionsnamn i spårningar, så dekoratorer bör ändra namnet på alla nya "
"funktioner som konstrueras och returneras."

msgid ":pep:`318` - Decorators for Functions, Methods and Classes"
msgstr ":pep:`318` - Dekoratorer för funktioner, metoder och klasser"

msgid ""
"Written  by Kevin D. Smith, Jim Jewett, and Skip Montanaro.  Several people "
"wrote patches implementing function decorators, but the one that was "
"actually checked in was patch #979728, written by Mark Russell."
msgstr ""
"Skriven av Kevin D. Smith, Jim Jewett och Skip Montanaro.  Flera personer "
"skrev patchar som implementerade funktionsdekoratorer, men den som faktiskt "
"checkades in var patch #979728, skriven av Mark Russell."

msgid "https://wiki.python.org/moin/PythonDecoratorLibrary"
msgstr "https://wiki.python.org/moin/PythonDecoratorLibrary"

msgid "This Wiki page contains several examples of decorators."
msgstr "Denna Wiki-sida innehåller flera exempel på dekoratorer."

msgid "PEP 322: Reverse Iteration"
msgstr "PEP 322: Omvänd iteration"

msgid ""
"A new built-in function, ``reversed(seq)``, takes a sequence and returns an "
"iterator that loops over the elements of the sequence  in reverse order.   ::"
msgstr ""
"En ny inbyggd funktion, ``reversed(seq)``, tar en sekvens och returnerar en "
"iterator som loopar över elementen i sekvensen i omvänd ordning. ::"

msgid ""
">>> for i in reversed(xrange(1,4)):\n"
"...    print i\n"
"...\n"
"3\n"
"2\n"
"1"
msgstr ""
">>> for i in reversed(xrange(1,4)):\n"
"... print i\n"
"...\n"
"3\n"
"2\n"
"1"

msgid ""
"Compared to extended slicing, such as ``range(1,4)[::-1]``, :func:`reversed` "
"is easier to read, runs faster, and uses substantially less memory."
msgstr ""
"Jämfört med utökad skivning, t.ex. ``range(1,4)[::-1]``, är :func:`reversed` "
"lättare att läsa, körs snabbare och använder betydligt mindre minne."

msgid ""
"Note that :func:`reversed` only accepts sequences, not arbitrary iterators.  "
"If you want to reverse an iterator, first convert it to  a list with :func:"
"`list`. ::"
msgstr ""
"Observera att :func:`reversed` endast accepterar sekvenser, inte godtyckliga "
"iteratorer.  Om du vill vända en iterator måste du först konvertera den till "
"en lista med :func:`list`. ::"

msgid ""
">>> input = open('/etc/passwd', 'r')\n"
">>> for line in reversed(list(input)):\n"
"...   print line\n"
"...\n"
"root:*:0:0:System Administrator:/var/root:/bin/tcsh\n"
"  ..."
msgstr ""
">>> input = open('/etc/passwd', 'r')\n"
">>> for line in reversed(list(input)):\n"
"... skriv ut rad\n"
"...\n"
"root:*:0:0:Systemadministratör:/var/root:/bin/tcsh\n"
"  ..."

msgid ":pep:`322` - Reverse Iteration"
msgstr ":pep:`322` - Omvänd iteration"

msgid "Written and implemented by Raymond Hettinger."
msgstr "Skriven och implementerad av Raymond Hettinger."

msgid "PEP 324: New subprocess Module"
msgstr "PEP 324: Ny delprocess Modul"

msgid ""
"The standard library provides a number of ways to execute a subprocess, "
"offering different features and different levels of complexity. ``os."
"system(command)`` is easy to use, but slow (it runs a shell process which "
"executes the command) and dangerous (you have to be careful about escaping "
"the shell's metacharacters).  The :mod:`!popen2` module offers classes that "
"can capture standard output and standard error from the subprocess, but the "
"naming is confusing.  The :mod:`subprocess` module cleans  this up, "
"providing a unified interface that offers all the features you might need."
msgstr ""
"Standardbiblioteket tillhandahåller ett antal sätt att exekvera en "
"subprocess, med olika funktioner och olika komplexitetsnivåer. ``os."
"system(command)`` är lätt att använda, men långsam (den kör en skalprocess "
"som exekverar kommandot) och farlig (du måste vara försiktig med att escapa "
"skalets metatecken).  Modulen :mod:`!popen2` erbjuder klasser som kan fånga "
"standardutdata och standardfel från subprocessen, men namngivningen är "
"förvirrande.  Modulen :mod:`subprocess` rensar upp detta och ger ett "
"enhetligt gränssnitt som erbjuder alla funktioner du kan behöva."

msgid ""
"Instead of :mod:`!popen2`'s collection of classes, :mod:`subprocess` "
"contains a single class called :class:`subprocess.Popen`  whose constructor "
"supports a number of different keyword arguments. ::"
msgstr ""
"Istället för :mod:`!popen2`:s samling av klasser innehåller :mod:"
"`subprocess` en enda klass som heter :class:`subprocess.Popen` vars "
"konstruktor stöder ett antal olika nyckelordsargument. ::"

msgid ""
"class Popen(args, bufsize=0, executable=None,\n"
"            stdin=None, stdout=None, stderr=None,\n"
"            preexec_fn=None, close_fds=False, shell=False,\n"
"            cwd=None, env=None, universal_newlines=False,\n"
"            startupinfo=None, creationflags=0):"
msgstr ""
"class Popen(args, bufsize=0, körbar=None,\n"
"            stdin=None, stdout=None, stderr=None,\n"
"            preexec_fn=None, close_fds=False, shell=False,\n"
"            cwd=Ingen, env=Ingen, universal_newlines=False,\n"
"            startupinfo=None, creationflags=0):"

msgid ""
"*args* is commonly a sequence of strings that will be the arguments to the "
"program executed as the subprocess.  (If the *shell* argument is true, "
"*args* can be a string which will then be passed on to the shell for "
"interpretation, just as :func:`os.system` does.)"
msgstr ""
"*args* är vanligen en sekvens av strängar som kommer att vara argumenten "
"till det program som körs som subprocess.  (Om argumentet *shell* är sant "
"kan *args* vara en sträng som sedan skickas vidare till skalet för tolkning, "
"precis som :func:`os.system` gör)"

msgid ""
"*stdin*, *stdout*, and *stderr* specify what the subprocess's input, output, "
"and error streams will be.  You can provide a file object or a file "
"descriptor, or you can use the constant ``subprocess.PIPE`` to create a pipe "
"between the subprocess and the parent."
msgstr ""
"*stdin*, *stdout* och *stderr* anger vad subprocessens in-, ut- och "
"felströmmar ska vara.  Du kan ange ett filobjekt eller en filbeskrivare, "
"eller så kan du använda konstanten ``subprocess.PIPE`` för att skapa en pipe "
"mellan subprocessen och den överordnade processen."

msgid "The constructor has a number of handy options:"
msgstr "Konstruktören har ett antal praktiska alternativ:"

msgid ""
"*close_fds* requests that all file descriptors be closed before running the "
"subprocess."
msgstr ""
"*close_fds* begär att alla filbeskrivare stängs innan subprocessen körs."

msgid ""
"*cwd* specifies the working directory in which the subprocess will be "
"executed (defaulting to whatever the parent's working directory is)."
msgstr ""
"*cwd* anger den arbetskatalog i vilken subprocessen ska köras (standard är "
"den överordnade processens arbetskatalog)."

msgid "*env* is a dictionary specifying environment variables."
msgstr "*env* är en ordbok som anger miljövariabler."

msgid ""
"*preexec_fn* is a function that gets called before the child is started."
msgstr "*preexec_fn* är en funktion som anropas innan barnet startas."

msgid ""
"*universal_newlines* opens the child's input and output using Python's :term:"
"`universal newlines` feature."
msgstr ""
"*universal_newlines* öppnar barnets in- och utdata med hjälp av Pythons :"
"term:`universal newlines`-funktion."

msgid ""
"Once you've created the :class:`Popen` instance,  you can call its :meth:"
"`wait` method to pause until the subprocess has exited, :meth:`poll` to "
"check if it's exited without pausing,  or ``communicate(data)`` to send the "
"string *data* to the subprocess's standard input.   ``communicate(data)``  "
"then reads any data that the subprocess has sent to its standard output  or "
"standard error, returning a tuple ``(stdout_data, stderr_data)``."
msgstr ""
"När du har skapat instansen :class:`Popen` kan du anropa dess metod :meth:"
"`wait` för att pausa tills subprocessen har avslutats, :meth:`poll` för att "
"kontrollera om den har avslutats utan paus, eller ``communicate(data)`` för "
"att skicka strängen *data* till subprocessens standardinmatning.   "
"``communicate(data)`` läser sedan alla data som underprocessen har skickat "
"till sin standardutgång eller standardfel, och returnerar en tupel "
"``(stdout_data, stderr_data)``."

msgid ""
":func:`call` is a shortcut that passes its arguments along to the :class:"
"`Popen` constructor, waits for the command to complete, and returns the "
"status code of the subprocess.  It can serve as a safer analog to :func:`os."
"system`::"
msgstr ""
":func:`call` är en genväg som skickar sina argument till :class:`Popen`-"
"konstruktören, väntar på att kommandot ska slutföras och returnerar "
"statuskoden för underprocessen.  Den kan fungera som en säkrare motsvarighet "
"till :func:`os.system`::"

msgid ""
"sts = subprocess.call(['dpkg', '-i', '/tmp/new-package.deb'])\n"
"if sts == 0:\n"
"    # Success\n"
"    ...\n"
"else:\n"
"    # dpkg returned an error\n"
"    ..."
msgstr ""
"sts = subprocess.call(['dpkg', '-i', '/tmp/new-package.deb'])\n"
"if sts == 0:\n"
"    # Framgång\n"
"    ...\n"
"else:\n"
"    # dpkg returnerade ett fel\n"
"    ..."

msgid ""
"The command is invoked without use of the shell.  If you really do want to  "
"use the shell, you can add ``shell=True`` as a keyword argument and provide "
"a string instead of a sequence::"
msgstr ""
"Kommandot anropas utan användning av skalet.  Om du verkligen vill använda "
"skalet kan du lägga till ``shell=True`` som ett nyckelordsargument och ange "
"en sträng i stället för en sekvens::"

msgid "sts = subprocess.call('dpkg -i /tmp/new-package.deb', shell=True)"
msgstr "sts = subprocess.call('dpkg -i /tmp/nytt-paket.deb', shell=True)"

msgid ""
"The PEP takes various examples of shell and Python code and shows how they'd "
"be translated into Python code that uses :mod:`subprocess`.  Reading this "
"section of the PEP is highly recommended."
msgstr ""
"PEP:en tar olika exempel på shell- och Python-kod och visar hur de skulle "
"kunna översättas till Python-kod som använder :mod:`subprocess`.  Att läsa "
"detta avsnitt av PEP rekommenderas starkt."

msgid ":pep:`324` - subprocess - New process module"
msgstr ":pep:`324` - subprocess - Ny processmodul"

msgid ""
"Written and implemented by Peter Åstrand, with assistance from Fredrik Lundh "
"and others."
msgstr ""
"Skriven och implementerad av Peter Åstrand, med hjälp av bland andra Fredrik "
"Lundh."

msgid "PEP 327: Decimal Data Type"
msgstr "PEP 327: Decimal datatyp"

msgid ""
"Python has always supported floating-point (FP) numbers, based on the "
"underlying C :c:expr:`double` type, as a data type.  However, while most "
"programming languages provide a floating-point type, many people (even "
"programmers) are unaware that floating-point numbers don't represent certain "
"decimal fractions accurately.  The new :class:`Decimal` type can represent "
"these fractions accurately, up to a user-specified precision limit."
msgstr ""
"Python har alltid haft stöd för flyttal (FP), baserat på den underliggande "
"C :c:expr:`double`-typen, som datatyp.  Men även om de flesta "
"programmeringsspråk tillhandahåller en flyttalstyp, är många människor (även "
"programmerare) omedvetna om att flyttal inte representerar vissa "
"decimalfraktioner korrekt.  Den nya typen :class:`Decimal` kan representera "
"dessa fraktioner korrekt, upp till en användarspecificerad precisionsgräns."

msgid "Why is Decimal needed?"
msgstr "Varför behövs Decimal?"

msgid ""
"The limitations arise from the representation used for floating-point "
"numbers. FP numbers are made up of three components:"
msgstr ""
"Begränsningarna härrör från den representation som används för flyttal. FP-"
"tal består av tre komponenter:"

msgid "The sign, which is positive or negative."
msgstr "Tecknet, som är positivt eller negativt."

msgid ""
"The mantissa, which is a single-digit binary number   followed by a "
"fractional part.  For example, ``1.01`` in base-2 notation is ``1 + 0/2 + "
"1/4``, or 1.25 in decimal notation."
msgstr ""
"Mantissan, som är ett ensiffrigt binärt tal följt av en bråkdel.  Till "
"exempel är ``1,01`` i bas-2-notation ``1 + 0/2 + 1/4``, eller 1,25 i "
"decimalnotation."

msgid ""
"The exponent, which tells where the decimal point is located in the number "
"represented."
msgstr ""
"Exponenten, som anger var decimaltecknet är placerat i det representerade "
"talet."

msgid ""
"For example, the number 1.25 has positive sign, a mantissa value of 1.01 (in "
"binary), and an exponent of 0 (the decimal point doesn't need to be "
"shifted). The number 5 has the same sign and mantissa, but the exponent is 2 "
"because the mantissa is multiplied by 4 (2 to the power of the exponent 2); "
"1.25 \\* 4 equals 5."
msgstr ""
"Till exempel har talet 1,25 positivt tecken, ett mantissavärde på 1,01 (i "
"binär) och en exponent på 0 (decimaltecknet behöver inte flyttas). Talet 5 "
"har samma tecken och mantissa, men exponenten är 2 eftersom mantissan "
"multipliceras med 4 (2 i potens med exponenten 2); 1,25 \\* 4 är lika med 5."

msgid ""
"Modern systems usually provide floating-point support that conforms to a "
"standard called IEEE 754.  C's :c:expr:`double` type is usually implemented "
"as a 64-bit IEEE 754 number, which uses 52 bits of space for the mantissa.  "
"This means that numbers can only be specified to 52 bits of precision.  If "
"you're trying to represent numbers whose expansion repeats endlessly, the "
"expansion is cut off after 52 bits. Unfortunately, most software needs to "
"produce output in base 10, and common fractions in base 10 are often "
"repeating decimals in binary. For example, 1.1 decimal is binary "
"``1.0001100110011 ...``; .1 = 1/16 + 1/32 + 1/256 plus an infinite number of "
"additional terms.  IEEE 754 has to chop off that infinitely repeated decimal "
"after 52 digits, so the representation is slightly inaccurate."
msgstr ""
"Moderna system har vanligtvis stöd för flyttal som följer en standard som "
"kallas IEEE 754.  C:s typ :c:expr:`double` implementeras vanligtvis som ett "
"64-bitars IEEE 754-tal, som använder 52 bitars utrymme för mantissan.  Detta "
"innebär att tal endast kan specificeras med 52 bitars precision.  Om du "
"försöker representera tal vars expansion upprepas i det oändliga, avbryts "
"expansionen efter 52 bitar. Tyvärr måste de flesta programvaror producera "
"utdata i bas 10, och vanliga bråk i bas 10 är ofta upprepade decimaler i "
"binär. Till exempel är 1,1 decimal binär ``1,0001100110011 ...``; .1 = 1/16 "
"+ 1/32 + 1/256 plus ett oändligt antal ytterligare termer.  IEEE 754 måste "
"hugga bort den oändligt upprepade decimalen efter 52 siffror, så "
"representationen är något felaktig."

msgid "Sometimes you can see this inaccuracy when the number is printed::"
msgstr "Ibland kan du se denna felaktighet när numret skrivs ut::"

msgid ""
">>> 1.1\n"
"1.1000000000000001"
msgstr ""
">>> 1.1\n"
"1.1000000000000001"

msgid ""
"The inaccuracy isn't always visible when you print the number because the FP-"
"to-decimal-string conversion is provided by the C library, and most C "
"libraries try to produce sensible output.  Even if it's not displayed, "
"however, the inaccuracy is still there and subsequent operations can magnify "
"the error."
msgstr ""
"Felaktigheten syns inte alltid när du skriver ut talet eftersom "
"konverteringen av FP till decimalsträng tillhandahålls av C-biblioteket, och "
"de flesta C-bibliotek försöker producera förnuftig utdata.  Även om det inte "
"visas, finns felaktigheten fortfarande kvar och efterföljande operationer "
"kan förstora felet."

msgid ""
"For many applications this doesn't matter.  If I'm plotting points and "
"displaying them on my monitor, the difference between 1.1 and "
"1.1000000000000001 is too small to be visible.  Reports often limit output "
"to a certain number of decimal places, and if you round the number to two or "
"three or even eight decimal places, the error is never apparent.  However, "
"for applications where it does matter,  it's a lot of work to implement your "
"own custom arithmetic routines."
msgstr ""
"För många tillämpningar spelar detta ingen roll.  Om jag plottar punkter och "
"visar dem på min bildskärm är skillnaden mellan 1,1 och 1,1000000000000001 "
"för liten för att synas.  Rapporter begränsar ofta utdata till ett visst "
"antal decimaler och om man avrundar till två, tre eller till och med åtta "
"decimaler syns aldrig felet.  För applikationer där det spelar roll är det "
"dock mycket arbete att implementera egna aritmetiska rutiner."

msgid "Hence, the :class:`Decimal` type was created."
msgstr "Därför skapades typen :class:`Decimal`."

msgid "The :class:`Decimal` type"
msgstr "Typen :class:`Decimal"

msgid ""
"A new module, :mod:`decimal`, was added to Python's standard library.  It "
"contains two classes, :class:`Decimal` and :class:`Context`.  :class:"
"`Decimal` instances represent numbers, and :class:`Context` instances are "
"used to wrap up various settings such as the precision and default rounding "
"mode."
msgstr ""
"En ny modul, :mod:`decimal`, har lagts till i Pythons standardbibliotek.  "
"Den innehåller två klasser, :class:`Decimal` och :class:`Context`. :class:"
"`Decimal`-instanser representerar tal, och :class:`Context`-instanser "
"används för att sammanfatta olika inställningar som precision och "
"standardavrundningsläge."

msgid ""
":class:`Decimal` instances are immutable, like regular Python integers and "
"FP numbers; once it's been created, you can't change the value an instance "
"represents.  :class:`Decimal` instances can be created from integers or "
"strings::"
msgstr ""
":class:`Decimal`-instanser är oföränderliga, precis som vanliga heltal och "
"FP-tal i Python; när de väl har skapats kan du inte ändra det värde som en "
"instans representerar. :class:`Decimal`-instanser kan skapas från heltal "
"eller strängar::"

msgid ""
">>> import decimal\n"
">>> decimal.Decimal(1972)\n"
"Decimal(\"1972\")\n"
">>> decimal.Decimal(\"1.1\")\n"
"Decimal(\"1.1\")"
msgstr ""
">>> import decimal\n"
">>> decimal.decimal(1972)\n"
"Decimal(\"1972\")\n"
">>> decimal.decimal(\"1,1\")\n"
"Decimal(\"1,1\")"

msgid ""
"You can also provide tuples containing the sign, the mantissa represented  "
"as a tuple of decimal digits, and the exponent::"
msgstr ""
"Du kan också ange tuples som innehåller tecknet, mantissan representerad som "
"en tuple av decimalsiffror och exponenten::"

msgid ""
">>> decimal.Decimal((1, (1, 4, 7, 5), -2))\n"
"Decimal(\"-14.75\")"
msgstr ""
">>> decimal.Decimal((1, (1, 4, 7, 5), -2))\n"
"Decimal(\"-14,75\")"

msgid ""
"Cautionary note: the sign bit is a Boolean value, so 0 is positive and 1 is "
"negative."
msgstr ""
"Försiktighetsåtgärd: teckenbiten är ett booleskt värde, så 0 är positivt och "
"1 är negativt."

msgid ""
"Converting from floating-point numbers poses a bit of a problem: should the "
"FP number representing 1.1 turn into the decimal number for exactly 1.1, or "
"for 1.1 plus whatever inaccuracies are introduced? The decision was to dodge "
"the issue and leave such a conversion out of the API.  Instead, you should "
"convert the floating-point number into a string using the desired precision "
"and pass the string to the :class:`Decimal` constructor::"
msgstr ""
"Konvertering från flyttal innebär lite av ett problem: ska FP-talet som "
"representerar 1,1 bli decimaltalet för exakt 1,1, eller för 1,1 plus "
"eventuella felaktigheter som införs? Beslutet blev att undvika problemet och "
"lämna en sådan konvertering utanför API:et.  Istället bör du konvertera "
"flyttalstalet till en sträng med önskad precision och skicka strängen till :"
"class:`Decimal`-konstruktören::"

msgid ""
">>> f = 1.1\n"
">>> decimal.Decimal(str(f))\n"
"Decimal(\"1.1\")\n"
">>> decimal.Decimal('%.12f' % f)\n"
"Decimal(\"1.100000000000\")"
msgstr ""
">>> f = 1.1\n"
">>> decimal.decimal(str(f))\n"
"Decimal(\"1,1\")\n"
">>> decimal.decimal('%.12f' % f)\n"
"Decimal(\"1.100000000000\")"

msgid ""
"Once you have :class:`Decimal` instances, you can perform the usual "
"mathematical operations on them.  One limitation: exponentiation requires an "
"integer exponent::"
msgstr ""
"När du har :class:`Decimal`-instanser kan du utföra de vanliga matematiska "
"operationerna på dem.  En begränsning: exponentiering kräver en "
"heltalsexponent::"

msgid ""
">>> a = decimal.Decimal('35.72')\n"
">>> b = decimal.Decimal('1.73')\n"
">>> a+b\n"
"Decimal(\"37.45\")\n"
">>> a-b\n"
"Decimal(\"33.99\")\n"
">>> a*b\n"
"Decimal(\"61.7956\")\n"
">>> a/b\n"
"Decimal(\"20.64739884393063583815028902\")\n"
">>> a ** 2\n"
"Decimal(\"1275.9184\")\n"
">>> a**b\n"
"Traceback (most recent call last):\n"
"  ...\n"
"decimal.InvalidOperation: x ** (non-integer)"
msgstr ""
">>> a = decimal.Decimal('35.72')\n"
">>> b = decimal.decimal('1,73')\n"
">>> a+b\n"
"Decimal(\"37,45\")\n"
">>> a-b\n"
"Decimal(\"33,99\")\n"
">>> a*b\n"
"Decimal(\"61,7956\")\n"
">>> a/b\n"
"Decimal(\"20.64739884393063583815028902\")\n"
">>> a ** 2\n"
"Decimal(\"1275,9184\")\n"
">>> a**b\n"
"Traceback (senaste anropet senast):\n"
"  ...\n"
"decimal.InvalidOperation: x ** (icke-integer)"

msgid ""
"You can combine :class:`Decimal` instances with integers, but not with "
"floating-point numbers::"
msgstr ""
"Du kan kombinera :class:`Decimal`-instanser med heltal, men inte med "
"flyttal::"

msgid ""
">>> a + 4\n"
"Decimal(\"39.72\")\n"
">>> a + 4.5\n"
"Traceback (most recent call last):\n"
"  ...\n"
"TypeError: You can interact Decimal only with int, long or Decimal data "
"types.\n"
">>>"
msgstr ""
">>> a + 4\n"
"Decimal(\"39,72\")\n"
">>> a + 4.5\n"
"Traceback (senaste anropet senast):\n"
"  ...\n"
"TypeError (Typfel): Du kan bara interagera Decimal med datatyperna int, long "
"eller Decimal.\n"
">>>"

msgid ""
":class:`Decimal` numbers can be used with the :mod:`math` and :mod:`cmath` "
"modules, but note that they'll be immediately converted to  floating-point "
"numbers before the operation is performed, resulting in a possible loss of "
"precision and accuracy.  You'll also get back a regular floating-point "
"number and not a :class:`Decimal`.   ::"
msgstr ""
":class:`Decimal`-tal kan användas med modulerna :mod:`math` och :mod:"
"`cmath`, men observera att de omedelbart konverteras till flyttal innan "
"operationen utförs, vilket kan resultera i en möjlig förlust av precision "
"och noggrannhet.  Du kommer också att få tillbaka ett vanligt flyttal och "
"inte ett :class:`Decimal`. ::"

msgid ""
">>> import math, cmath\n"
">>> d = decimal.Decimal('123456789012.345')\n"
">>> math.sqrt(d)\n"
"351364.18288201344\n"
">>> cmath.sqrt(-d)\n"
"351364.18288201344j"
msgstr ""
">>> import matematik, cmath\n"
">>> d = decimal.Decimal('123456789012.345')\n"
">>> math.sqrt(d)\n"
"351364.18288201344\n"
">>> cmath.sqrt(-d)\n"
"351364.18288201344j"

msgid ""
":class:`Decimal` instances have a :meth:`sqrt` method that returns a :class:"
"`Decimal`, but if you need other things such as trigonometric functions "
"you'll have to implement them. ::"
msgstr ""
":class:`Decimal`-instanser har en :meth:`sqrt`-metod som returnerar en :"
"class:`Decimal`, men om du behöver andra saker, t.ex. trigonometriska "
"funktioner, måste du implementera dem:"

msgid ""
">>> d.sqrt()\n"
"Decimal(\"351364.1828820134592177245001\")"
msgstr ""
">>> d.sqrt()\n"
"Decimal(\"351364.1828820134592177245001\")"

msgid "The :class:`Context` type"
msgstr "Typen :class:`Context"

msgid ""
"Instances of the :class:`Context` class encapsulate several settings for "
"decimal operations:"
msgstr ""
"Instanser av klassen :class:`Context` kapslar in flera inställningar för "
"decimaloperationer:"

msgid ":attr:`prec` is the precision, the number of decimal places."
msgstr ":attr:`prec` är precisionen, antalet decimaler."

msgid ""
":attr:`rounding` specifies the rounding mode.  The :mod:`decimal` module has "
"constants for the various possibilities: :const:`ROUND_DOWN`, :const:"
"`ROUND_CEILING`,  :const:`ROUND_HALF_EVEN`, and various others."
msgstr ""
":attr:`rounding` anger avrundningssättet.  Modulen :mod:`decimal` har "
"konstanter för de olika möjligheterna: :const:`ROUND_DOWN`, :const:"
"`ROUND_CEILING`, :const:`ROUND_HALF_EVEN` och flera andra."

msgid ""
":attr:`traps` is a dictionary specifying what happens on encountering "
"certain error conditions: either  an exception is raised or  a value is "
"returned.  Some examples of error conditions are division by zero, loss of "
"precision, and overflow."
msgstr ""
":attr:`traps` är en ordbok som anger vad som händer när vissa feltillstånd "
"inträffar: antingen uppstår ett undantag eller så returneras ett värde.  "
"Några exempel på feltillstånd är division med noll, precisionsförlust och "
"överflöd."

msgid ""
"There's a thread-local default context available by calling :func:"
"`getcontext`; you can change the properties of this context to alter the "
"default precision, rounding, or trap handling.  The following example shows "
"the effect of changing the precision of the default context::"
msgstr ""
"Det finns en trådlokal standardkontext tillgänglig genom att anropa :func:"
"`getcontext`; du kan ändra egenskaperna för denna kontext för att ändra "
"standardprecision, avrundning eller trap-hantering.  Följande exempel visar "
"effekten av att ändra precisionen för standardkontexten::"

msgid ""
">>> decimal.getcontext().prec\n"
"28\n"
">>> decimal.Decimal(1) / decimal.Decimal(7)\n"
"Decimal(\"0.1428571428571428571428571429\")\n"
">>> decimal.getcontext().prec = 9\n"
">>> decimal.Decimal(1) / decimal.Decimal(7)\n"
"Decimal(\"0.142857143\")"
msgstr ""
">>> decimal.getcontext().prec\n"
"28\n"
">>> decimal.decimal(1) / decimal.decimal(7)\n"
"Decimal(\"0.1428571428571428571428571429\")\n"
">>> decimal.getcontext().prec = 9\n"
">>> decimal.decimal(1) / decimal.decimal(7)\n"
"Decimal(\"0.142857143\")"

msgid ""
"The default action for error conditions is selectable; the module can either "
"return a special value such as infinity or not-a-number, or exceptions can "
"be raised::"
msgstr ""
"Standardåtgärden för feltillstånd är valbar; modulen kan antingen returnera "
"ett specialvärde som oändlighet eller inte ett tal, eller så kan undantag "
"skapas::"

msgid ""
">>> decimal.Decimal(1) / decimal.Decimal(0)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"decimal.DivisionByZero: x / 0\n"
">>> decimal.getcontext().traps[decimal.DivisionByZero] = False\n"
">>> decimal.Decimal(1) / decimal.Decimal(0)\n"
"Decimal(\"Infinity\")\n"
">>>"
msgstr ""
">>> decimal.Decimal(1) / decimal.Decimal(0)\n"
"Traceback (senaste anropet senast):\n"
"  ...\n"
"decimal.DivisionByZero: x / 0\n"
">>> decimal.getcontext().traps[decimal.DivisionByZero] = False\n"
">>> decimal.Decimal(1) / decimal.Decimal(0)\n"
"Decimal(\"Oändlighet\")\n"
">>>"

msgid ""
"The :class:`Context` instance also has various methods for formatting  "
"numbers such as :meth:`to_eng_string` and :meth:`to_sci_string`."
msgstr ""
"Instansen :class:`Context` har också olika metoder för att formatera tal, t."
"ex. :meth:`to_eng_string` och :meth:`to_sci_string`."

msgid ""
"For more information, see the documentation for the :mod:`decimal` module, "
"which includes a quick-start tutorial and a reference."
msgstr ""
"Mer information finns i dokumentationen för modulen :mod:`decimal`, som "
"innehåller en snabbstartshandledning och en referens."

msgid ":pep:`327` - Decimal Data Type"
msgstr ":pep:`327` - Decimal datatyp"

msgid ""
"Written by Facundo Batista and implemented by Facundo Batista, Eric Price, "
"Raymond Hettinger, Aahz, and Tim Peters."
msgstr ""
"Skriven av Facundo Batista och implementerad av Facundo Batista, Eric Price, "
"Raymond Hettinger, Aahz och Tim Peters."

msgid ""
"`http://www.lahey.com/float.htm <https://web.archive.org/web/20230604072523/"
"http://www.lahey.com/float.htm>`__"
msgstr ""
"`http://www.lahey.com/float.htm <https://web.archive.org/web/20230604072523/"
"http://www.lahey.com/float.htm>`__"

msgid ""
"The article uses Fortran code to illustrate many of the problems that "
"floating-point inaccuracy can cause."
msgstr ""
"I artikeln används Fortran-kod för att illustrera många av de problem som "
"felaktigheter i flyttal kan orsaka."

msgid "https://speleotrove.com/decimal/"
msgstr "https://speleotrove.com/decimal/"

msgid ""
"A description of a decimal-based representation.  This representation is "
"being proposed as a standard, and underlies the new Python decimal type.  "
"Much of this material was written by Mike Cowlishaw, designer of the Rexx "
"language."
msgstr ""
"En beskrivning av en decimalbaserad representation.  Denna representation "
"föreslås som en standard och ligger till grund för Pythons nya decimaltyp.  "
"Mycket av detta material har skrivits av Mike Cowlishaw, designer av Rexx-"
"språket."

msgid "PEP 328: Multi-line Imports"
msgstr "PEP 328: Import av flera linjer"

msgid ""
"One language change is a small syntactic tweak aimed at making it easier to "
"import many names from a module.  In a ``from module import names`` "
"statement, *names* is a sequence of names separated by commas.  If the "
"sequence is  very long, you can either write multiple imports from the same "
"module, or you can use backslashes to escape the line endings like this::"
msgstr ""
"En språkändring är en liten syntaktisk justering som syftar till att göra "
"det enklare att importera många namn från en modul.  I en ``from module "
"import names``-sats är *names* en sekvens av namn åtskilda med kommatecken.  "
"Om sekvensen är mycket lång kan du antingen skriva flera importer från samma "
"modul, eller så kan du använda backslashes för att undkomma "
"radavslutningarna så här::"

msgid ""
"from SimpleXMLRPCServer import SimpleXMLRPCServer,\\\n"
"            SimpleXMLRPCRequestHandler,\\\n"
"            CGIXMLRPCRequestHandler,\\\n"
"            resolve_dotted_attribute"
msgstr ""
"from SimpleXMLRPCServer import SimpleXMLRPCServer,\\\n"
"            SimpleXMLRPCRequestHandler,\\\n"
"            CGIXMLRPCRequestHandler,\\\n"
"            resolve_prickad_attribut"

msgid ""
"The syntactic change in Python 2.4 simply allows putting the names within "
"parentheses.  Python ignores newlines within a parenthesized expression, so "
"the backslashes are no longer needed::"
msgstr ""
"Den syntaktiska förändringen i Python 2.4 gör det helt enkelt möjligt att "
"sätta namnen inom parentes.  Python ignorerar nya rader inom ett uttryck med "
"parenteser, så de bakre bindestrecken behövs inte längre::"

msgid ""
"from SimpleXMLRPCServer import (SimpleXMLRPCServer,\n"
"                                SimpleXMLRPCRequestHandler,\n"
"                                CGIXMLRPCRequestHandler,\n"
"                                resolve_dotted_attribute)"
msgstr ""
"from SimpleXMLRPCServer import (SimpleXMLRPCServer,\n"
"                                SimpleXMLRPCRequestHandler,\n"
"                                CGIXMLRPCRequestHandler,\n"
"                                resolve_dotted_attribute)"

msgid ""
"The PEP also proposes that all :keyword:`import` statements be absolute "
"imports, with a leading ``.`` character to indicate a relative import.  This "
"part of the PEP was not implemented for Python 2.4, but was completed for "
"Python 2.5."
msgstr ""
"PEP föreslår också att alla :keyword:`import`-satser ska vara absoluta "
"importer, med ett inledande ``.``-tecken för att indikera en relativ "
"import.  Denna del av PEP implementerades inte för Python 2.4, men "
"slutfördes för Python 2.5."

msgid ":pep:`328` - Imports: Multi-Line and Absolute/Relative"
msgstr ":pep:`328` - Import: Flera rader och absolut/relativ"

msgid "Written by Aahz.  Multi-line imports were implemented by Dima Dorfman."
msgstr "Skrivet av Aahz.  Import av flera rader genomfördes av Dima Dorfman."

msgid "PEP 331: Locale-Independent Float/String Conversions"
msgstr "PEP 331: Lokaloberoende omvandling av flyttal/sträng"

msgid ""
"The :mod:`locale` modules lets Python software select various conversions "
"and display conventions that are localized to a particular country or "
"language. However, the module was careful to not change the numeric locale "
"because various functions in Python's implementation required that the "
"numeric locale remain set to the ``'C'`` locale.  Often this was because the "
"code was using the C library's :c:func:`atof` function."
msgstr ""
"Modulen :mod:`locale` låter Python-program välja olika konverteringar och "
"visningskonventioner som är anpassade till ett visst land eller språk. "
"Modulen var dock noga med att inte ändra den numeriska locale eftersom olika "
"funktioner i Pythons implementation krävde att den numeriska locale skulle "
"förbli inställd på ``'C'`` locale.  Ofta berodde detta på att koden använde "
"C-bibliotekets funktion :c:func:`atof`."

msgid ""
"Not setting the numeric locale caused trouble for extensions that used third-"
"party C libraries, however, because they wouldn't have the correct locale "
"set. The motivating example was GTK+, whose user interface widgets weren't "
"displaying numbers in the current locale."
msgstr ""
"Att inte ställa in den numeriska språkdräkten orsakade dock problem för "
"tillägg som använde C-bibliotek från tredje part, eftersom de inte skulle ha "
"rätt språkdräkt inställd. Det motiverande exemplet var GTK+, vars widgetar i "
"användargränssnittet inte visade siffror i den aktuella språkdräkten."

msgid ""
"The solution described in the PEP is to add three new functions to the "
"Python API that perform ASCII-only conversions, ignoring the locale setting:"
msgstr ""
"Lösningen som beskrivs i PEP är att lägga till tre nya funktioner i Python "
"API som endast utför ASCII-konverteringar och ignorerar locale-inställningen:"

msgid ""
"``PyOS_ascii_strtod(str, ptr)``  and ``PyOS_ascii_atof(str, ptr)`` both "
"convert a string to a C :c:expr:`double`."
msgstr ""
"``PyOS_ascii_strtod(str, ptr)`` och ``PyOS_ascii_atof(str, ptr)`` "
"konverterar båda en sträng till en C :c:expr:`double`."

msgid ""
"``PyOS_ascii_formatd(buffer, buf_len, format, d)`` converts a :c:expr:"
"`double` to an ASCII string."
msgstr ""
"``PyOS_ascii_formatd(buffer, buf_len, format, d)`` konverterar ett :c:expr:"
"`double` till en ASCII-sträng."

msgid ""
"The code for these functions came from the GLib library (`https://developer-"
"old.gnome.org/glib/2.26/ <http://web.archive.org/web/20210306104320/https://"
"developer.gnome.org/glib/2.26/>`__), whose developers kindly relicensed the "
"relevant functions and donated them to the Python Software Foundation.  The :"
"mod:`locale` module  can now change the numeric locale, letting extensions "
"such as GTK+  produce the correct results."
msgstr ""
"Koden för dessa funktioner kom från GLib-biblioteket (`https://developer-old."
"gnome.org/glib/2.26/ <http://web.archive.org/web/20210306104320/https://"
"developer.gnome.org/glib/2.26/>`__), vars utvecklare vänligen licensierade "
"de relevanta funktionerna och donerade dem till Python Software Foundation.  "
"Modulen :mod:`locale` kan nu ändra den numeriska språkdräkten, så att "
"tillägg som GTK+ ger rätt resultat."

msgid ":pep:`331` - Locale-Independent Float/String Conversions"
msgstr ":pep:`331` - Lokaloberoende omvandling av float/sträng"

msgid "Written by Christian R. Reis, and implemented by Gustavo Carneiro."
msgstr "Skriven av Christian R. Reis och implementerad av Gustavo Carneiro."

msgid "Other Language Changes"
msgstr "Andra språkliga förändringar"

msgid ""
"Here are all of the changes that Python 2.4 makes to the core Python "
"language."
msgstr "Här är alla ändringar som Python 2.4 gör i kärnan i Python-språket."

msgid "Decorators for functions and methods were added (:pep:`318`)."
msgstr "Dekoratorer för funktioner och metoder har lagts till (:pep:`318`)."

msgid ""
"Built-in :func:`set` and :func:`frozenset` types were  added (:pep:`218`). "
"Other new built-ins include the ``reversed(seq)`` function (:pep:`322`)."
msgstr ""
"Inbyggda :func:`set` och :func:`frozenset` typer har lagts till (:pep:"
"`218`). Andra nya inbyggda funktioner inkluderar funktionen "
"``reversed(seq)`` (:pep:`322`)."

msgid "Generator expressions were added (:pep:`289`)."
msgstr "Generatoruttryck har lagts till (:pep:`289`)."

msgid ""
"Certain numeric expressions no longer return values restricted to 32 or 64 "
"bits (:pep:`237`)."
msgstr ""
"Vissa numeriska uttryck returnerar inte längre värden som är begränsade till "
"32 eller 64 bitar (:pep:`237`)."

msgid ""
"You can now put parentheses around the list of names in a ``from module "
"import names`` statement (:pep:`328`)."
msgstr ""
"Du kan nu sätta parenteser runt listan med namn i en ``from module import "
"names``-sats (:pep:`328`)."

msgid ""
"The :meth:`dict.update` method now accepts the same argument forms as the :"
"class:`dict` constructor.  This includes any mapping, any iterable of key/"
"value pairs, and keyword arguments. (Contributed by Raymond Hettinger.)"
msgstr ""
"Metoden :meth:`dict.update` accepterar nu samma argumentformer som "
"konstruktören :class:`dict`.  Detta inkluderar alla mappningar, alla "
"iterationer av nyckel/värde-par och nyckelordsargument. (Bidrag från Raymond "
"Hettinger.)"

msgid ""
"The string methods :meth:`ljust`, :meth:`rjust`, and :meth:`center` now take "
"an optional argument for specifying a fill character other than a space. "
"(Contributed by Raymond Hettinger.)"
msgstr ""
"Strängmetoderna :meth:`ljust`, :meth:`rjust` och :meth:`center` tar nu ett "
"valfritt argument för att ange ett annat fyllnadstecken än ett mellanslag. "
"(Bidrag från Raymond Hettinger.)"

msgid ""
"Strings also gained an :meth:`rsplit` method that works like the :meth:"
"`split` method but splits from the end of the string.   (Contributed by Sean "
"Reifschneider.) ::"
msgstr ""
"Strängar har också fått en :meth:`rsplit`-metod som fungerar som :meth:"
"`split`-metoden men delar från slutet av strängen.   (Bidrag från Sean "
"Reifschneider.) ::"

msgid ""
">>> 'www.python.org'.split('.', 1)\n"
"['www', 'python.org']\n"
"'www.python.org'.rsplit('.', 1)\n"
"['www.python', 'org']"
msgstr ""
">>> 'www.python.org'.split('.', 1)\n"
"['www', 'python.org']\n"
"'www.python.org'.rsplit('.', 1)\n"
"['www.python', 'org']"

msgid ""
"Three keyword parameters, *cmp*, *key*, and *reverse*, were added to the :"
"meth:`sort` method of lists. These parameters make some common usages of :"
"meth:`sort` simpler. All of these parameters are optional."
msgstr ""
"Tre nyckelordsparametrar, *cmp*, *key* och *reverse*, lades till i metoden :"
"meth:`sort` för listor. Dessa parametrar gör vissa vanliga användningar av :"
"meth:`sort` enklare. Alla dessa parametrar är valfria."

msgid ""
"For the *cmp* parameter, the value should be a comparison function that "
"takes two parameters and returns -1, 0, or +1 depending on how the "
"parameters compare. This function will then be used to sort the list.  "
"Previously this was the only parameter that could be provided to :meth:"
"`sort`."
msgstr ""
"För parametern *cmp* ska värdet vara en jämförelsefunktion som tar två "
"parametrar och returnerar -1, 0 eller +1 beroende på hur parametrarna "
"jämförs. Denna funktion kommer sedan att användas för att sortera listan.  "
"Tidigare var detta den enda parametern som kunde anges till :meth:`sort`."

msgid ""
"*key* should be a single-parameter function that takes a list element and "
"returns a comparison key for the element.  The list is then sorted using the "
"comparison keys.  The following example sorts a list case-insensitively::"
msgstr ""
"*key* bör vara en funktion med en parameter som tar ett element i en lista "
"och returnerar en jämförelsenyckel för elementet.  Listan sorteras sedan med "
"hjälp av jämförelsenycklarna.  I följande exempel sorteras en lista utan "
"hänsyn till fall::"

msgid ""
">>> L = ['A', 'b', 'c', 'D']\n"
">>> L.sort()                 # Case-sensitive sort\n"
">>> L\n"
"['A', 'D', 'b', 'c']\n"
">>> # Using 'key' parameter to sort list\n"
">>> L.sort(key=lambda x: x.lower())\n"
">>> L\n"
"['A', 'b', 'c', 'D']\n"
">>> # Old-fashioned way\n"
">>> L.sort(cmp=lambda x,y: cmp(x.lower(), y.lower()))\n"
">>> L\n"
"['A', 'b', 'c', 'D']"
msgstr ""
">>> L = ['A', 'b', 'c', 'D']\n"
">>> L.sort() # Skiftlägeskänslig sortering\n"
">>> L\n"
"['A', 'D', 'b', 'c']\n"
">>> # Använda parametern 'nyckel' för att sortera listan\n"
">>> L.sort(nyckel=lambda x: x.lower())\n"
">>> L\n"
"['A', 'b', 'c', 'D']\n"
">>> # Gammalmodigt sätt\n"
">>> L.sort(cmp=lambda x,y: cmp(x.lower(), y.lower())))\n"
">>> L\n"
"['A', 'b', 'c', 'D']"

msgid ""
"The last example, which uses the *cmp* parameter, is the old way to perform "
"a case-insensitive sort.  It works but is slower than using a *key* "
"parameter. Using *key* calls :meth:`lower` method once for each element in "
"the list while using *cmp* will call it twice for each comparison, so using "
"*key* saves on invocations of the :meth:`lower` method."
msgstr ""
"Det sista exemplet, där parametern *cmp* används, är det gamla sättet att "
"utföra en sortering utan skiftlägeskänslighet.  Det fungerar men är "
"långsammare än att använda en *key*-parameter. Med *key* anropas :meth:"
"`lower`-metoden en gång för varje element i listan, medan den med *cmp* "
"anropas två gånger för varje jämförelse, så med *key* sparas anrop av :meth:"
"`lower`-metoden."

msgid ""
"For simple key functions and comparison functions, it is often possible to "
"avoid a :keyword:`lambda` expression by using an unbound method instead.  "
"For example, the above case-insensitive sort is best written as::"
msgstr ""
"För enkla nyckelfunktioner och jämförelsefunktioner är det ofta möjligt att "
"undvika ett :keyword:`lambda`-uttryck genom att använda en obunden metod i "
"stället.  Till exempel skrivs ovanstående sortering utan "
"skiftlägeskänslighet bäst som::"

msgid ""
">>> L.sort(key=str.lower)\n"
">>> L\n"
"['A', 'b', 'c', 'D']"
msgstr ""
">>> L.sortera(nyckel=str.lägre)\n"
">>> L\n"
"['A', 'b', 'c', 'D']"

msgid ""
"Finally, the *reverse* parameter takes a Boolean value.  If the value is "
"true, the list will be sorted into reverse order. Instead of ``L.sort(); L."
"reverse()``, you can now write ``L.sort(reverse=True)``."
msgstr ""
"Slutligen tar parametern *reverse* ett booleskt värde.  Om värdet är sant "
"kommer listan att sorteras i omvänd ordning. Istället för ``L.sort(); L."
"reverse()`` kan du nu skriva ``L.sort(reverse=True)``."

msgid ""
"The results of sorting are now guaranteed to be stable.  This means that two "
"entries with equal keys will be returned in the same order as they were "
"input. For example, you can sort a list of people by name, and then sort the "
"list by age, resulting in a list sorted by age where people with the same "
"age are in name-sorted order."
msgstr ""
"Resultatet av sorteringen är nu garanterat stabilt.  Det innebär att två "
"poster med lika nycklar returneras i samma ordning som de matades in. Du kan "
"t.ex. sortera en lista med personer efter namn och sedan sortera listan "
"efter ålder, vilket resulterar i en lista som är sorterad efter ålder där "
"personer med samma ålder är i namnsorterad ordning."

msgid "(All changes to :meth:`sort` contributed by Raymond Hettinger.)"
msgstr "(Alla ändringar i :meth:`sort` har gjorts av Raymond Hettinger.)"

msgid ""
"There is a new built-in function ``sorted(iterable)`` that works like the in-"
"place :meth:`list.sort` method but can be used in expressions.  The "
"differences are:"
msgstr ""
"Det finns en ny inbyggd funktion ``sorted(iterable)`` som fungerar som in-"
"place :meth:`list.sort`-metoden men som kan användas i uttryck.  "
"Skillnaderna är:"

msgid "the input may be any iterable;"
msgstr "indata kan vara vilken iterabel som helst;"

msgid "a newly formed copy is sorted, leaving the original intact; and"
msgstr "en nybildad kopia sorteras, varvid originalet lämnas intakt; och"

msgid "the expression returns the new sorted copy"
msgstr "uttrycket returnerar den nya sorterade kopian"

msgid ""
">>> L = [9,7,8,3,2,4,1,6,5]\n"
">>> [10+i for i in sorted(L)]       # usable in a list comprehension\n"
"[11, 12, 13, 14, 15, 16, 17, 18, 19]\n"
">>> L                               # original is left unchanged\n"
"[9,7,8,3,2,4,1,6,5]\n"
">>> sorted('Monty Python')          # any iterable may be an input\n"
"[' ', 'M', 'P', 'h', 'n', 'n', 'o', 'o', 't', 't', 'y', 'y']\n"
"\n"
">>> # List the contents of a dict sorted by key values\n"
">>> colormap = dict(red=1, blue=2, green=3, black=4, yellow=5)\n"
">>> for k, v in sorted(colormap.iteritems()):\n"
"...     print k, v\n"
"...\n"
"black 4\n"
"blue 2\n"
"green 3\n"
"red 1\n"
"yellow 5"
msgstr ""
">>> L = [9,7,8,3,2,4,1,6,5]\n"
">>> [10+i for i in sorted(L)] # användbar i en listförståelse\n"
"[11, 12, 13, 14, 15, 16, 17, 18, 19]\n"
">>> L # originalet lämnas oförändrat\n"
"[9,7,8,3,2,4,1,6,5]\n"
">>> sorted('Monty Python') # vilken iterabel som helst kan vara en "
"inmatning\n"
"[' ', 'M', 'P', 'h', 'n', 'n', 'o', 'o', 't', 't', 'y', 'y']\n"
"\n"
">>> # Lista innehållet i en dict sorterat efter nyckelvärden\n"
">>> kolormap = dict(röd=1, blå=2, grön=3, svart=4, gul=5)\n"
">>> for k, v in sorted(colormap.iteritems()):\n"
"... print k, v\n"
"...\n"
"svart 4\n"
"blå 2\n"
"grön 3\n"
"röd 1\n"
"gul 5"

msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Bidrag från Raymond Hettinger.)"

msgid ""
"Integer operations will no longer trigger an :exc:`OverflowWarning`. The :"
"exc:`OverflowWarning` warning will disappear in Python 2.5."
msgstr ""
"Integer-operationer kommer inte längre att utlösa en :exc:`OverflowWarning`. "
"Varningen :exc:`OverflowWarning` kommer att försvinna i Python 2.5."

msgid ""
"The interpreter gained a new switch, :option:`-m`, that takes a name, "
"searches for the corresponding  module on ``sys.path``, and runs the module "
"as a script. For example,  you can now run the Python profiler with ``python "
"-m profile``. (Contributed by Nick Coghlan.)"
msgstr ""
"Tolken har fått en ny switch, :option:`-m`, som tar ett namn, söker efter "
"motsvarande modul på ``sys.path`` och kör modulen som ett skript. Till "
"exempel kan du nu köra Python-profileraren med ``python -m profile``. "
"(Bidrag från Nick Coghlan.)"

msgid ""
"The ``eval(expr, globals, locals)`` and ``execfile(filename, globals, "
"locals)`` functions and the ``exec`` statement now accept any mapping type "
"for the *locals* parameter.  Previously this had to be a regular Python "
"dictionary.  (Contributed by Raymond Hettinger.)"
msgstr ""
"Funktionerna ``eval(expr, globals, locals)`` och ``execfile(filnamn, "
"globals, locals)`` samt ``exec``-satsen accepterar nu valfri mappningstyp "
"för parametern *locals*.  Tidigare var detta tvunget att vara en vanlig "
"Python-ordbok.  (Bidrag från Raymond Hettinger.)"

msgid ""
"The :func:`zip` built-in function and :func:`itertools.izip` now return an "
"empty list if called with no arguments. Previously they raised a :exc:"
"`TypeError` exception.  This makes them more suitable for use with variable "
"length argument lists::"
msgstr ""
"Den inbyggda funktionen :func:`zip` och :func:`itertools.izip` returnerar nu "
"en tom lista om de anropas utan argument. Tidigare gav de upphov till ett :"
"exc:`TypeError`-undantag.  Detta gör dem mer lämpade för användning med "
"argumentlistor av varierande längd::"

msgid ""
">>> def transpose(array):\n"
"...    return zip(*array)\n"
"...\n"
">>> transpose([(1,2,3), (4,5,6)])\n"
"[(1, 4), (2, 5), (3, 6)]\n"
">>> transpose([])\n"
"[]"
msgstr ""
">>> def transpose(array):\n"
"... return zip(*array)\n"
"...\n"
">>> transpose([(1,2,3), (4,5,6)])\n"
"[(1, 4), (2, 5), (3, 6)]\n"
">>> transpose([])\n"
"[]"

msgid ""
"Encountering a failure while importing a module no longer leaves a partially "
"initialized module object in ``sys.modules``.  The incomplete module object "
"left behind would fool further imports of the same module into succeeding, "
"leading to confusing errors.   (Fixed by Tim Peters.)"
msgstr ""
"Om ett fel uppstår vid import av en modul lämnas inte längre ett delvis "
"initialiserat modulobjekt kvar i ``sys.modules``.  Det ofullständiga "
"modulobjektet som lämnades kvar kunde hindra ytterligare import av samma "
"modul från att lyckas, vilket ledde till förvirrande fel.   (Åtgärdat av Tim "
"Peters.)"

msgid ""
":const:`None` is now a constant; code that binds a new value to  the name "
"``None`` is now a syntax error. (Contributed by Raymond Hettinger.)"
msgstr ""
":const:`None` är nu en konstant; kod som binder ett nytt värde till namnet "
"``None`` är nu ett syntaxfel. (Bidrag från Raymond Hettinger.)"

msgid "Optimizations"
msgstr "Optimeringar"

msgid ""
"The inner loops for list and tuple slicing were optimized and now run about "
"one-third faster.  The inner loops for dictionaries were also optimized, "
"resulting in performance boosts for :meth:`keys`, :meth:`values`, :meth:"
"`items`, :meth:`iterkeys`, :meth:`itervalues`, and :meth:`iteritems`. "
"(Contributed by Raymond Hettinger.)"
msgstr ""
"De inre looparna för list- och tuple-slicing har optimerats och körs nu "
"ungefär en tredjedel snabbare.  De inre looparna för ordböcker optimerades "
"också, vilket resulterade i prestandaökningar för :meth:`keys`, :meth:"
"`values`, :meth:`items`, :meth:`iterkeys`, :meth:`itervalues` och :meth:"
"`iteritems`. (Bidrag från Raymond Hettinger.)"

msgid ""
"The machinery for growing and shrinking lists was optimized for speed and "
"for space efficiency.  Appending and popping from lists now runs faster due "
"to more efficient code paths and less frequent use of the underlying system :"
"c:func:`realloc`.  List comprehensions also benefit.   :meth:`list.extend` "
"was also optimized and no longer converts its argument into a temporary list "
"before extending the base list.  (Contributed by Raymond Hettinger.)"
msgstr ""
"Maskineriet för att växa och krympa listor har optimerats för hastighet och "
"utrymmeseffektivitet.  Att lägga till och plocka från listor går nu snabbare "
"tack vare effektivare kodvägar och mindre frekvent användning av det "
"underliggande systemet :c:func:`realloc`.  Listförståelse gynnas också.   :"
"meth:`list.extend` har också optimerats och konverterar inte längre sitt "
"argument till en tillfällig lista innan baslistan utökas.  (Bidrag från "
"Raymond Hettinger.)"

msgid ""
":func:`list`, :func:`tuple`, :func:`map`, :func:`filter`, and :func:`zip` "
"now run several times faster with non-sequence arguments that supply a :meth:"
"`__len__` method.  (Contributed by Raymond Hettinger.)"
msgstr ""
":func:`list`, :func:`tuple`, :func:`map`, :func:`filter` och :func:`zip` "
"körs nu flera gånger snabbare med argument som inte är sekvenser och som "
"innehåller metoden :meth:`__len__`.  (Bidrag från Raymond Hettinger.)"

msgid ""
"The methods :meth:`list.__getitem__`, :meth:`dict.__getitem__`, and :meth:"
"`dict.__contains__` are now implemented as :class:`method_descriptor` "
"objects rather than :class:`wrapper_descriptor` objects.  This form of  "
"access doubles their performance and makes them more suitable for use as "
"arguments to functionals: ``map(mydict.__getitem__, keylist)``. (Contributed "
"by Raymond Hettinger.)"
msgstr ""
"Metoderna :meth:`list.__getitem__`, :meth:`dict.__getitem__` och :meth:`dict."
"__contains__` är nu implementerade som :class:`method_descriptor`-objekt i "
"stället för :class:`wrapper_descriptor`-objekt.  Denna form av åtkomst "
"fördubblar deras prestanda och gör dem mer lämpliga att använda som argument "
"till funktionaler: ``map(mydict.__getitem__, keylist)``. (Bidrag från "
"Raymond Hettinger.)"

msgid ""
"Added a new opcode, ``LIST_APPEND``, that simplifies the generated bytecode "
"for list comprehensions and speeds them up by about a third.  (Contributed "
"by Raymond Hettinger.)"
msgstr ""
"Lade till en ny opcode, ``LIST_APPEND``, som förenklar den genererade "
"bytekoden för listförståelser och snabbar upp dem med ungefär en tredjedel.  "
"(Bidrag från Raymond Hettinger.)"

msgid ""
"The peephole bytecode optimizer has been improved to  produce shorter, "
"faster bytecode; remarkably, the resulting bytecode is  more readable.  "
"(Enhanced by Raymond Hettinger.)"
msgstr ""
"Bytekodsoptimeraren Peephole har förbättrats för att producera kortare och "
"snabbare bytekod; anmärkningsvärt nog är den resulterande bytekoden mer "
"läsbar.  (Förbättrad av Raymond Hettinger.)"

msgid ""
"String concatenations in statements of the form ``s = s + \"abc\"`` and ``s "
"+= \"abc\"`` are now performed more efficiently in certain circumstances.  "
"This optimization won't be present in other Python implementations such as "
"Jython, so you shouldn't rely on it; using the :meth:`join` method of "
"strings is still recommended when you want to efficiently glue a large "
"number of strings together. (Contributed by Armin Rigo.)"
msgstr ""
"Strängkonkateneringar i satser av formen ``s = s + \"abc\"`` och ``s += "
"\"abc\"`` utförs nu mer effektivt under vissa omständigheter.  Denna "
"optimering kommer inte att finnas i andra Python-implementationer som "
"Jython, så du bör inte förlita dig på den; att använda :meth:`join`-metoden "
"för strängar rekommenderas fortfarande när du effektivt vill limma ihop ett "
"stort antal strängar. (Bidrag från Armin Rigo.)"

msgid ""
"The net result of the 2.4 optimizations is that Python 2.4 runs the pystone "
"benchmark around 5% faster than Python 2.3 and 35% faster than Python 2.2. "
"(pystone is not a particularly good benchmark, but it's the most commonly "
"used measurement of Python's performance.  Your own applications may show "
"greater or smaller benefits from Python 2.4.)"
msgstr ""
"Nettoresultatet av 2.4-optimeringarna är att Python 2.4 kör pystone-"
"riktmärket cirka 5% faster än Python 2.3 och 35% faster än Python 2.2. "
"(pystone är inte ett särskilt bra riktmärke, men det är den mest använda "
"mätningen av Pythons prestanda.  Dina egna applikationer kan visa större "
"eller mindre fördelar med Python 2.4.)"

msgid "New, Improved, and Deprecated Modules"
msgstr "Nya, förbättrade och utfasade moduler"

msgid ""
"As usual, Python's standard library received a number of enhancements and "
"bug fixes.  Here's a partial list of the most notable changes, sorted "
"alphabetically by module name. Consult the :file:`Misc/NEWS` file in the "
"source tree for a more complete list of changes, or look through the CVS "
"logs for all the details."
msgstr ""
"Som vanligt fick Pythons standardbibliotek ett antal förbättringar och "
"buggfixar.  Här är en partiell lista över de mest anmärkningsvärda "
"ändringarna, sorterade alfabetiskt efter modulnamn. Se filen :file:`Misc/"
"NEWS` i källträdet för en mer komplett lista över ändringar, eller titta "
"igenom CVS-loggarna för alla detaljer."

msgid ""
"The :mod:`!asyncore` module's :func:`!loop` function now has a *count* "
"parameter that lets you perform a limited number of passes through the "
"polling loop.  The default is still to loop forever."
msgstr ""
"Modulen :mod:`!asyncore`:s funktion :func:`!loop` har nu en parameter "
"*count* som låter dig utföra ett begränsat antal genomgångar av "
"pollingloopen.  Standardinställningen är fortfarande att loopa för evigt."

msgid ""
"The :mod:`base64` module now has more complete :rfc:`3548` support for "
"Base64, Base32, and Base16 encoding and decoding, including optional case "
"folding and optional alternative alphabets. (Contributed by Barry Warsaw.)"
msgstr ""
"Modulen :mod:`base64` har nu mer komplett :rfc:`3548`-stöd för Base64-, "
"Base32- och Base16-kodning och -avkodning, inklusive valfri "
"skiftlägesändring och valfria alternativa alfabet. (Bidrag från Barry "
"Warsaw.)"

msgid ""
"The :mod:`bisect` module now has an underlying C implementation for improved "
"performance. (Contributed by Dmitry Vasiliev.)"
msgstr ""
"Modulen :mod:`bisect` har nu en underliggande C-implementering för "
"förbättrad prestanda. (Bidrag från Dmitry Vasiliev.)"

msgid ""
"The CJKCodecs collections of East Asian codecs, maintained by Hye-Shik "
"Chang, was integrated into 2.4.   The new encodings are:"
msgstr ""
"CJKCodecs samlingar av östasiatiska codecs, som underhålls av Hye-Shik "
"Chang, integrerades i 2.4.   De nya kodningarna är:"

msgid "Chinese (PRC): gb2312, gbk, gb18030, big5hkscs, hz"
msgstr "Kinesiska (PRC): gb2312, gbk, gb18030, big5hkscs, hz"

msgid "Chinese (ROC): big5, cp950"
msgstr "Kinesiska (ROC): big5, cp950"

msgid "Japanese: cp932, euc-jis-2004, euc-jp, euc-jisx0213, iso-2022-jp,"
msgstr "Japanska: cp932, euc-jis-2004, euc-jp, euc-jisx0213, iso-2022-jp,"

msgid ""
"iso-2022-jp-1, iso-2022-jp-2, iso-2022-jp-3, iso-2022-jp-ext, iso-2022-"
"jp-2004, shift-jis, shift-jisx0213, shift-jis-2004"
msgstr ""
"iso-2022-jp-1, iso-2022-jp-2, iso-2022-jp-3, iso-2022-jp-ext, iso-2022-"
"jp-2004, shift-jis, shift-jisx0213, shift-jis-2004"

msgid "Korean: cp949, euc-kr, johab, iso-2022-kr"
msgstr "Koreanska: cp949, euc-kr, johab, iso-2022-kr"

msgid ""
"Some other new encodings were added: HP Roman8,  ISO_8859-11, ISO_8859-16, "
"PCTP-154, and TIS-620."
msgstr ""
"Några andra nya kodningar har lagts till: HP Roman8, ISO_8859-11, "
"ISO_8859-16, PCTP-154 och TIS-620."

msgid ""
"The UTF-8 and UTF-16 codecs now cope better with receiving partial input. "
"Previously the :class:`StreamReader` class would try to read more data, "
"making it impossible to resume decoding from the stream.  The :meth:`read` "
"method will now return as much data as it can and future calls will resume "
"decoding where previous ones left off.  (Implemented by Walter Dörwald.)"
msgstr ""
"UTF-8- och UTF-16-codecs klarar nu bättre av att ta emot partiell indata. "
"Tidigare försökte klassen :class:`StreamReader` att läsa mer data, vilket "
"gjorde det omöjligt att återuppta avkodningen från strömmen.  Metoden :meth:"
"`read` kommer nu att returnera så mycket data som möjligt och framtida anrop "
"kommer att återuppta avkodningen där tidigare anrop slutade.  (Implementerad "
"av Walter Dörwald.)"

msgid ""
"There is a new :mod:`collections` module for  various specialized collection "
"datatypes.  Currently it contains just one type, :class:`deque`, a double-"
"ended queue that supports efficiently adding and removing elements from "
"either end::"
msgstr ""
"Det finns en ny :mod:`collections`-modul för olika specialiserade datatyper "
"för samlingar.  För närvarande innehåller den bara en typ, :class:`deque`, "
"en kö med dubbla ändar som stöder effektivt tillägg och borttagning av "
"element från båda ändarna:"

msgid ""
">>> from collections import deque\n"
">>> d = deque('ghi')        # make a new deque with three items\n"
">>> d.append('j')           # add a new entry to the right side\n"
">>> d.appendleft('f')       # add a new entry to the left side\n"
">>> d                       # show the representation of the deque\n"
"deque(['f', 'g', 'h', 'i', 'j'])\n"
">>> d.pop()                 # return and remove the rightmost item\n"
"'j'\n"
">>> d.popleft()             # return and remove the leftmost item\n"
"'f'\n"
">>> list(d)                 # list the contents of the deque\n"
"['g', 'h', 'i']\n"
">>> 'h' in d                # search the deque\n"
"True"
msgstr ""
">>> from collections import deque\n"
">>> d = deque('ghi') # gör en ny deque med tre objekt\n"
">>> d.append('j') # lägg till en ny post på höger sida\n"
">>> d.appendleft('f') # lägg till en ny post på vänster sida\n"
">>> d # visa representationen av deque\n"
"deque(['f', 'g', 'h', 'i', 'j'])\n"
">>> d.pop() # returnera och ta bort objektet längst till höger\n"
"'j'\n"
">>> d.popleft() # returnera och ta bort objektet längst till vänster\n"
"'f'\n"
">>> list(d) # lista innehållet i deque\n"
"['g', 'h', 'i']\n"
">>> 'h' i d # sök i deque\n"
"Sant"

msgid ""
"Several modules, such as the :mod:`Queue` and :mod:`threading` modules, now "
"take advantage of :class:`collections.deque` for improved performance.  "
"(Contributed by Raymond Hettinger.)"
msgstr ""
"Flera moduler, t.ex. modulerna :mod:`Queue` och :mod:`threading`, utnyttjar "
"nu :class:`collections.deque` för förbättrad prestanda.  (Bidrag från "
"Raymond Hettinger.)"

msgid ""
"The :mod:`ConfigParser <configparser>` classes have been enhanced slightly. "
"The :meth:`~configparser.ConfigParser.read` method now returns a list of the "
"files that were successfully parsed, and the :meth:`~configparser."
"ConfigParser.set` method raises :exc:`TypeError` if passed a *value* "
"argument that isn't a string.   (Contributed by John Belmonte and David "
"Goodger.)"
msgstr ""
"Klasserna :mod:`ConfigParser <configparser>` har förbättrats något. Metoden :"
"meth:`~configparser.ConfigParser.read` returnerar nu en lista över de filer "
"som har analyserats framgångsrikt, och metoden :meth:`~configparser."
"ConfigParser.set` ger upphov till :exc:`TypeError` om ett *value*-argument "
"som inte är en sträng skickas.   (Bidrag från John Belmonte och David "
"Goodger.)"

msgid ""
"The :mod:`curses` module now supports the ncurses extension :func:"
"`use_default_colors`.  On platforms where the terminal supports "
"transparency, this makes it possible to use a transparent background. "
"(Contributed by Jörg Lehmann.)"
msgstr ""
"Modulen :mod:`curses` har nu stöd för ncurses-tillägget :func:"
"`use_default_colors`.  På plattformar där terminalen stöder transparens gör "
"detta det möjligt att använda en transparent bakgrund. (Bidrag från Jörg "
"Lehmann.)"

msgid ""
"The :mod:`difflib` module now includes an :class:`HtmlDiff` class that "
"creates an HTML table showing a side by side comparison of two versions of a "
"text. (Contributed by Dan Gass.)"
msgstr ""
"Modulen :mod:`difflib` innehåller nu en klass :class:`HtmlDiff` som skapar "
"en HTML-tabell som visar en jämförelse sida vid sida mellan två versioner av "
"en text. (Bidrag från Dan Gass.)"

msgid ""
"The :mod:`email` package was updated to version 3.0,  which dropped various "
"deprecated APIs and removes support for Python versions earlier than 2.3.  "
"The 3.0 version of the package uses a new incremental parser for MIME "
"messages, available in the :mod:`email.FeedParser` module.  The new parser "
"doesn't require reading the entire message into memory, and doesn't raise "
"exceptions if a message is malformed; instead it records any problems in "
"the  :attr:`defect` attribute of the message.  (Developed by Anthony Baxter, "
"Barry Warsaw, Thomas Wouters, and others.)"
msgstr ""
"Paketet :mod:`email` har uppdaterats till version 3.0, som innehåller flera "
"föråldrade API:er och tar bort stöd för Python-versioner tidigare än 2.3.  I "
"version 3.0 av paketet används en ny inkrementell parser för MIME-"
"meddelanden, som finns i modulen :mod:`email.FeedParser`.  Den nya parsern "
"kräver inte att hela meddelandet läses in i minnet och ger inte upphov till "
"undantag om ett meddelande är felaktigt utformat; i stället registreras "
"eventuella problem i meddelandets attribut :attr:`defect`.  (Utvecklad av "
"Anthony Baxter, Barry Warsaw, Thomas Wouters och andra)"

msgid ""
"The :mod:`heapq` module has been converted to C.  The resulting tenfold "
"improvement in speed makes the module suitable for handling high volumes of "
"data.  In addition, the module has two new functions :func:`nlargest` and :"
"func:`nsmallest` that use heaps to find the N largest or smallest values in "
"a dataset without the expense of a full sort.  (Contributed by Raymond "
"Hettinger.)"
msgstr ""
"Modulen :mod:`heapq` har konverterats till C. Den tiofaldigt förbättrade "
"hastigheten gör att modulen lämpar sig för hantering av stora datamängder.  "
"Dessutom har modulen två nya funktioner :func:`nlargest` och :func:"
"`nsmallest` som använder heaps för att hitta de N största eller minsta "
"värdena i en datauppsättning utan att behöva göra en fullständig sortering.  "
"(Bidrag från Raymond Hettinger.)"

msgid ""
"The :mod:`httplib <http>` module now contains constants for HTTP status "
"codes defined in various HTTP-related RFC documents.  Constants have names "
"such as :const:`OK`, :const:`CREATED`, :const:`CONTINUE`, and :const:"
"`MOVED_PERMANENTLY`; use pydoc to get a full list.  (Contributed by Andrew "
"Eland.)"
msgstr ""
"Modulen :mod:`httplib <http>` innehåller nu konstanter för HTTP-statuskoder "
"som definieras i olika HTTP-relaterade RFC-dokument.  Konstanterna har namn "
"som :const:`OK`, :const:`CREATED`, :const:`CONTINUE` och :const:"
"`MOVED_PERMANENTLY`; använd pydoc för att få en fullständig lista.  (Bidrag "
"från Andrew Eland.)"

msgid ""
"The :mod:`imaplib` module now supports IMAP's THREAD command (contributed by "
"Yves Dionne) and new :meth:`deleteacl` and :meth:`myrights` methods "
"(contributed by Arnaud Mazin)."
msgstr ""
"Modulen :mod:`imaplib` har nu stöd för IMAP:s THREAD-kommando (bidrag från "
"Yves Dionne) och de nya metoderna :meth:`deleteacl` och :meth:`myrights` "
"(bidrag från Arnaud Mazin)."

msgid ""
"The :mod:`itertools` module gained a ``groupby(iterable[, *func*])`` "
"function. *iterable* is something that can be iterated over to return a "
"stream of elements, and the optional *func* parameter is a function that "
"takes an element and returns a key value; if omitted, the key is simply the "
"element itself.  :func:`groupby` then groups the elements into subsequences "
"which have matching values of the key, and returns a series of 2-tuples "
"containing the key value and an iterator over the subsequence."
msgstr ""
"Modulen :mod:`itertools` har utökats med funktionen ``groupby(iterable[, "
"*func*])``. *iterable* är något som kan itereras över för att returnera en "
"ström av element, och den valfria parametern *func* är en funktion som tar "
"ett element och returnerar ett nyckelvärde; om den utelämnas är nyckeln helt "
"enkelt själva elementet. :func:`groupby` grupperar sedan elementen i "
"undersekvenser som har matchande värden på nyckeln, och returnerar en serie "
"av 2-tupler som innehåller nyckelvärdet och en iterator över undersekvensen."

msgid ""
"Here's an example to make this clearer.  The *key* function simply returns "
"whether a number is even or odd, so the result of :func:`groupby` is to "
"return consecutive runs of odd or even numbers. ::"
msgstr ""
"Här är ett exempel för att göra det tydligare.  Funktionen *key* returnerar "
"helt enkelt om ett tal är jämnt eller udda, så resultatet av :func:`groupby` "
"är att returnera på varandra följande serier av udda eller jämna tal. ::"

msgid ""
">>> import itertools\n"
">>> L = [2, 4, 6, 7, 8, 9, 11, 12, 14]\n"
">>> for key_val, it in itertools.groupby(L, lambda x: x % 2):\n"
"...    print key_val, list(it)\n"
"...\n"
"0 [2, 4, 6]\n"
"1 [7]\n"
"0 [8]\n"
"1 [9, 11]\n"
"0 [12, 14]\n"
">>>"
msgstr ""
">>> import itertools\n"
">>> L = [2, 4, 6, 7, 8, 9, 11, 12, 14]\n"
">>> for key_val, it in itertools.groupby(L, lambda x: x % 2):\n"
"...    print key_val, list(it)\n"
"...\n"
"0 [2, 4, 6]\n"
"1 [7]\n"
"0 [8]\n"
"1 [9, 11]\n"
"0 [12, 14]\n"
">>>"

msgid ""
":func:`groupby` is typically used with sorted input.  The logic for :func:"
"`groupby` is similar to the Unix ``uniq`` filter which makes it handy for "
"eliminating, counting, or identifying duplicate elements::"
msgstr ""
":func:`groupby` används vanligen med sorterad indata.  Logiken för :func:"
"`groupby` liknar Unix ``uniq``-filter, vilket gör det praktiskt för att "
"eliminera, räkna eller identifiera duplicerade element::"

msgid ""
">>> word = 'abracadabra'\n"
">>> letters = sorted(word)   # Turn string into a sorted list of letters\n"
">>> letters\n"
"['a', 'a', 'a', 'a', 'a', 'b', 'b', 'c', 'd', 'r', 'r']\n"
">>> for k, g in itertools.groupby(letters):\n"
"...    print k, list(g)\n"
"...\n"
"a ['a', 'a', 'a', 'a', 'a']\n"
"b ['b', 'b']\n"
"c ['c']\n"
"d ['d']\n"
"r ['r', 'r']\n"
">>> # List unique letters\n"
">>> [k for k, g in groupby(letters)]\n"
"['a', 'b', 'c', 'd', 'r']\n"
">>> # Count letter occurrences\n"
">>> [(k, len(list(g))) for k, g in groupby(letters)]\n"
"[('a', 5), ('b', 2), ('c', 1), ('d', 1), ('r', 2)]"
msgstr ""
">>> ord = 'abracadabra'\n"
">>> letters = sorted(word) # Gör om strängen till en sorterad lista med "
"bokstäver\n"
">>> bokstäver\n"
"['a', 'a', 'a', 'a', 'a', 'b', 'b', 'c', 'd', 'r', 'r']\n"
">>> för k, g i itertools.groupby(bokstäver):\n"
"... print k, list(g)\n"
"...\n"
"a ['a', 'a', 'a', 'a', 'a']\n"
"b ['b', 'b']\n"
"c ['c']\n"
"d ['d']\n"
"r ['r', 'r']\n"
">>> # Lista unika bokstäver\n"
">>> [k för k, g i groupby(bokstäver)]\n"
"['a', 'b', 'c', 'd', 'r']\n"
">>> # Räkna förekomster av bokstäver\n"
">>> [(k, len(list(g))) för k, g i groupby(bokstäver)]\n"
"[('a', 5), ('b', 2), ('c', 1), ('d', 1), ('r', 2)]"

msgid "(Contributed by Hye-Shik Chang.)"
msgstr "(Bidrag från Hye-Shik Chang.)"

msgid ""
":mod:`itertools` also gained a function named ``tee(iterator, N)`` that "
"returns *N* independent iterators that replicate *iterator*.  If *N* is "
"omitted, the default is 2. ::"
msgstr ""
":mod:`itertools` har också fått en funktion som heter ``tee(iterator, N)`` "
"som returnerar *N* oberoende iteratorer som replikerar *iterator*.  Om *N* "
"utelämnas är standardvärdet 2. ::"

msgid ""
">>> L = [1,2,3]\n"
">>> i1, i2 = itertools.tee(L)\n"
">>> i1,i2\n"
"(<itertools.tee object at 0x402c2080>, <itertools.tee object at "
"0x402c2090>)\n"
">>> list(i1)               # Run the first iterator to exhaustion\n"
"[1, 2, 3]\n"
">>> list(i2)               # Run the second iterator to exhaustion\n"
"[1, 2, 3]"
msgstr ""
">>> L = [1,2,3]\n"
">>> i1, i2 = itertools.tee(L)\n"
">>> i1,i2\n"
"(<itertools.tee-objekt på 0x402c2080>, <itertools.tee-objekt på "
"0x402c2090>)\n"
">>> list(i1) # Kör den första iteratorn till utmattning\n"
"[1, 2, 3]\n"
">>> list(i2) # Kör den andra iteratorn till utmattning\n"
"[1, 2, 3]"

msgid ""
"Note that :func:`tee` has to keep copies of the values returned  by the "
"iterator; in the worst case, it may need to keep all of them.   This should "
"therefore be used carefully if the leading iterator can run far ahead of the "
"trailing iterator in a long stream of inputs. If the separation is large, "
"then you might as well use  :func:`list` instead.  When the iterators track "
"closely with one another, :func:`tee` is ideal.  Possible applications "
"include bookmarking, windowing, or lookahead iterators. (Contributed by "
"Raymond Hettinger.)"
msgstr ""
"Observera att :func:`tee` måste behålla kopior av de värden som iteratorn "
"returnerar; i värsta fall kan den behöva behålla dem alla.   Detta bör "
"därför användas försiktigt om den ledande iteratorn kan springa långt före "
"den efterföljande iteratorn i en lång ström av inmatningar. Om separationen "
"är stor kan du lika gärna använda :func:`list` istället.  När iteratorerna "
"ligger nära varandra är :func:`tee` perfekt.  Möjliga tillämpningar "
"inkluderar bokmärken, fönster eller lookahead-iteratorer. (Bidrag från "
"Raymond Hettinger.)"

msgid ""
"A number of functions were added to the :mod:`locale`  module, such as :func:"
"`bind_textdomain_codeset` to specify a particular encoding and a family of :"
"func:`!l\\*gettext` functions that return messages in the chosen encoding. "
"(Contributed by Gustavo Niemeyer.)"
msgstr ""
"Ett antal funktioner har lagts till i modulen :mod:`locale`, t.ex. :func:"
"`bind_textdomain_codeset` för att ange en viss kodning och en familj av :"
"func:`!l\\*gettext`-funktioner som returnerar meddelanden i den valda "
"kodningen. (Bidrag från Gustavo Niemeyer.)"

msgid ""
"Some keyword arguments were added to the :mod:`logging` package's :func:"
"`basicConfig` function to simplify log configuration.  The default behavior "
"is to log messages to standard error, but various keyword arguments can be "
"specified to log to a particular file, change the logging format, or set the "
"logging level. For example::"
msgstr ""
"Några nyckelordsargument har lagts till i :mod:`logging`-paketets :func:"
"`basicConfig`-funktion för att förenkla loggkonfigurationen.  "
"Standardbeteendet är att logga meddelanden till standardfel, men olika "
"nyckelordsargument kan anges för att logga till en viss fil, ändra "
"loggningsformatet eller ställa in loggningsnivån. Till exempel::"

msgid ""
"import logging\n"
"logging.basicConfig(filename='/var/log/application.log',\n"
"    level=0,  # Log all messages\n"
"    format='%(levelname):%(process):%(thread):%(message)')"
msgstr ""
"import logging\n"
"logging.basicConfig(filename='/var/log/application.log',\n"
"    level=0,  # Log all messages\n"
"    format='%(levelname):%(process):%(thread):%(message)')"

msgid ""
"Other additions to the :mod:`logging` package include a ``log(level, msg)`` "
"convenience method, as well as a :class:`TimedRotatingFileHandler` class "
"that rotates its log files at a timed interval.  The module already had :"
"class:`RotatingFileHandler`, which rotated logs once the file exceeded a "
"certain size.  Both classes derive from a new :class:`BaseRotatingHandler` "
"class that can be used to implement other rotating handlers."
msgstr ""
"Andra tillägg till :mod:`logging`-paketet inkluderar en ``log(level, msg)`` "
"bekvämlighetsmetod, samt en :class:`TimedRotatingFileHandler`-klass som "
"roterar sina loggfiler med ett tidsbestämt intervall.  Modulen hade redan :"
"class:`RotatingFileHandler`, som roterade loggarna när filen översteg en "
"viss storlek.  Båda klasserna härstammar från en ny klass :class:"
"`BaseRotatingHandler` som kan användas för att implementera andra "
"rotationshanterare."

msgid "(Changes implemented by Vinay Sajip.)"
msgstr "(Ändringar implementerade av Vinay Sajip.)"

msgid ""
"The :mod:`marshal` module now shares interned strings on unpacking a  data "
"structure.  This may shrink the size of certain pickle strings, but the "
"primary effect is to make :file:`.pyc` files significantly smaller. "
"(Contributed by Martin von Löwis.)"
msgstr ""
"Modulen :mod:`marshal` delar nu internerade strängar vid uppackning av en "
"datastruktur.  Detta kan krympa storleken på vissa pickle-strängar, men den "
"primära effekten är att göra :file:`.pyc`-filer betydligt mindre. (Bidrag "
"från Martin von Löwis.)"

msgid ""
"The :mod:`!nntplib` module's :class:`NNTP` class gained :meth:`description` "
"and :meth:`descriptions` methods to retrieve  newsgroup descriptions for a "
"single group or for a range of groups. (Contributed by Jürgen A. Erhard.)"
msgstr ""
":mod:`!nntplib`-modulens :class:`NNTP`-klass fick metoderna :meth:"
"`description` och :meth:`descriptions` för att hämta beskrivningar av "
"nyhetsgrupper för en enda grupp eller för ett antal grupper. (Bidrag från "
"Jürgen A. Erhard.)"

msgid ""
"Two new functions were added to the :mod:`operator` module, "
"``attrgetter(attr)`` and ``itemgetter(index)``. Both functions return "
"callables that take a single argument and return the corresponding attribute "
"or item; these callables make excellent data extractors when used with :func:"
"`map` or :func:`sorted`.  For example::"
msgstr ""
"Två nya funktioner har lagts till i modulen :mod:`operator`, "
"``attrgetter(attr)`` och ``itemgetter(index)``. Båda funktionerna returnerar "
"anropbara filer som tar ett enda argument och returnerar motsvarande "
"attribut eller objekt; dessa anropbara filer är utmärkta datautdragare när "
"de används med :func:`map` eller :func:`sorted`.  Till exempel::"

msgid ""
">>> L = [('c', 2), ('d', 1), ('a', 4), ('b', 3)]\n"
">>> map(operator.itemgetter(0), L)\n"
"['c', 'd', 'a', 'b']\n"
">>> map(operator.itemgetter(1), L)\n"
"[2, 1, 4, 3]\n"
">>> sorted(L, key=operator.itemgetter(1)) # Sort list by second tuple item\n"
"[('d', 1), ('c', 2), ('b', 3), ('a', 4)]"
msgstr ""
">>> L = [('c', 2), ('d', 1), ('a', 4), ('b', 3)]\n"
">>> map(operator.itemgetter(0), L)\n"
"['c', 'd', 'a', 'b']\n"
">>> karta(operator.itemgetter(1), L)\n"
"[2, 1, 4, 3]\n"
">>> sorted(L, key=operator.itemgetter(1)) # Sortera listan efter andra "
"tupelobjektet\n"
"[('d', 1), ('c', 2), ('b', 3), ('a', 4)]"

msgid ""
"The :mod:`optparse` module was updated in various ways.  The module now "
"passes its messages through :func:`gettext.gettext`, making it possible to "
"internationalize Optik's help and error messages.  Help messages for options "
"can now include the string ``'%default'``, which will be replaced by the "
"option's default value.  (Contributed by Greg Ward.)"
msgstr ""
"Modulen :mod:`optparse` har uppdaterats på olika sätt.  Modulen skickar nu "
"sina meddelanden genom :func:`gettext.gettext`, vilket gör det möjligt att "
"internationalisera Optiks hjälp- och felmeddelanden.  Hjälpmeddelanden för "
"alternativ kan nu inkludera strängen ``'%default'``, som kommer att ersättas "
"av alternativets standardvärde.  (Bidrag från Greg Ward.)"

msgid ""
"The long-term plan is to deprecate the :mod:`!rfc822` module in some future "
"Python release in favor of the :mod:`email` package. To this end, the :func:"
"`email.Utils.formatdate <email.utils.formatdate>` function has been changed "
"to make it usable as a replacement for :func:`!rfc822.formatdate`.  You may "
"want to write new e-mail processing code with this in mind.  (Change "
"implemented by Anthony Baxter.)"
msgstr ""
"Den långsiktiga planen är att avskaffa :mod:`!rfc822`-modulen i någon "
"framtida Python-utgåva till förmån för :mod:`email`-paketet. För detta "
"ändamål har funktionen :func:`email.Utils.formatdate <email.utils."
"formatdate>` ändrats för att göra den användbar som en ersättning för :func:"
"`!rfc822.formatdate`.  Du kanske vill skriva ny kod för e-postbehandling med "
"detta i åtanke.  (Ändringen implementerades av Anthony Baxter.)"

msgid ""
"A new ``urandom(n)`` function was added to the :mod:`os` module, returning a "
"string containing *n* bytes of random data.  This function provides access "
"to platform-specific sources of randomness such as :file:`/dev/urandom` on "
"Linux or the Windows CryptoAPI.  (Contributed by Trevor Perrin.)"
msgstr ""
"En ny funktion ``urandom(n)`` har lagts till i modulen :mod:`os`, som "
"returnerar en sträng innehållande *n* bytes slumpmässiga data.  Denna "
"funktion ger tillgång till plattformsspecifika källor till slumpmässiga data "
"såsom :file:`/dev/urandom` på Linux eller Windows CryptoAPI.  (Bidrag från "
"Trevor Perrin.)"

msgid ""
"Another new function: ``os.path.lexists(path)``  returns true if the file "
"specified by *path* exists, whether or not it's a symbolic link.  This "
"differs from the existing ``os.path.exists(path)`` function, which returns "
"false if *path* is a symlink that points to a destination that doesn't "
"exist. (Contributed by Beni Cherniavsky.)"
msgstr ""
"Ytterligare en ny funktion: ```os.path.lexists(path)`` returnerar sant om "
"filen som anges av *path* existerar, oavsett om det är en symbolisk länk "
"eller inte.  Detta skiljer sig från den befintliga funktionen ``os.path."
"exists(path)``, som returnerar false om *path* är en symbolisk länk som "
"pekar på en destination som inte existerar. (Bidrag från Beni Cherniavsky.)"

msgid ""
"A new :func:`getsid` function was added to the :mod:`posix` module that "
"underlies the :mod:`os` module. (Contributed by J. Raynor.)"
msgstr ""
"En ny funktion :func:`getsid` lades till i modulen :mod:`posix` som ligger "
"till grund för modulen :mod:`os`. (Bidrag från J. Raynor.)"

msgid ""
"The :mod:`poplib` module now supports POP over SSL.  (Contributed by Hector "
"Urtubia.)"
msgstr ""
"Modulen :mod:`poplib` har nu stöd för POP över SSL.  (Bidrag från Hector "
"Urtubia.)"

msgid ""
"The :mod:`profile` module can now profile C extension functions. "
"(Contributed by Nick Bastin.)"
msgstr ""
"Modulen :mod:`profile` kan nu profilera C-tilläggsfunktioner. (Bidrag från "
"Nick Bastin.)"

msgid ""
"The :mod:`random` module has a new method called ``getrandbits(N)`` that "
"returns a long integer *N* bits in length.  The existing :meth:`randrange` "
"method now uses :meth:`getrandbits` where appropriate, making generation of "
"arbitrarily large random numbers more efficient.  (Contributed by Raymond "
"Hettinger.)"
msgstr ""
"Modulen :mod:`random` har en ny metod som heter ``getrandbits(N)`` som "
"returnerar ett långt heltal *N* bitar långt.  Den befintliga metoden :meth:"
"`randrange` använder nu :meth:`getrandbits` där det är lämpligt, vilket gör "
"generering av godtyckligt stora slumptal mer effektiv.  (Bidrag från Raymond "
"Hettinger.)"

msgid ""
"The regular expression language accepted by the :mod:`re` module was "
"extended with simple conditional expressions, written as ``(?(group)A|B)``.  "
"*group* is either a numeric group ID or a group name defined with ``(?"
"P<group>...)`` earlier in the expression.  If the specified group matched, "
"the regular expression pattern *A* will be tested against the string; if the "
"group didn't match, the pattern *B* will be used instead. (Contributed by "
"Gustavo Niemeyer.)"
msgstr ""
"Det språk för reguljära uttryck som accepteras av modulen :mod:`re` har "
"utökats med enkla villkorliga uttryck, skrivna som ``(?(group)A|B)``.  "
"*group* är antingen ett numeriskt grupp-ID eller ett gruppnamn definierat "
"med ``(?P<group>...)`` tidigare i uttrycket.  Om den angivna gruppen "
"matchade, kommer det reguljära uttrycksmönstret *A* att testas mot strängen; "
"om gruppen inte matchade, kommer mönstret *B* att användas istället. (Bidrag "
"från Gustavo Niemeyer.)"

msgid ""
"The :mod:`re` module is also no longer recursive, thanks to a massive amount "
"of work by Gustavo Niemeyer.  In a recursive regular expression engine, "
"certain patterns result in a large amount of C stack space being consumed, "
"and it was possible to overflow the stack. For example, if you matched a "
"30000-byte string of ``a`` characters against the expression ``(a|b)+``, one "
"stack frame was consumed per character.  Python 2.3 tried to check for stack "
"overflow and raise a :exc:`RuntimeError` exception, but certain patterns "
"could sidestep the checking and if you were unlucky Python could segfault. "
"Python 2.4's regular expression engine can match this pattern without "
"problems."
msgstr ""
"Modulen :mod:`re` är inte heller längre rekursiv, tack vare ett enormt "
"arbete av Gustavo Niemeyer.  I en rekursiv reguljär uttrycksmotor resulterar "
"vissa mönster i att en stor mängd C-stackutrymme förbrukas, och det var "
"möjligt att överfylla stacken. Om du till exempel matchade en 30000-byte-"
"sträng med ``a``-tecken mot uttrycket ``(a|b)+``, förbrukades en stackram "
"per tecken.  Python 2.3 försökte kontrollera för stacköverflöd och skapa "
"ett :exc:`RuntimeError`-undantag, men vissa mönster kunde kringgå kontrollen "
"och om du hade otur kunde Python få segfault. Python 2.4:s motor för "
"reguljära uttryck kan matcha det här mönstret utan problem."

msgid ""
"The :mod:`signal` module now performs tighter error-checking on the "
"parameters to the :func:`signal.signal` function.  For example, you can't "
"set a handler on the :const:`SIGKILL` signal; previous versions of Python "
"would quietly accept this, but 2.4 will raise a :exc:`RuntimeError` "
"exception."
msgstr ""
"Modulen :mod:`signal` utför nu en striktare felkontroll på parametrarna till "
"funktionen :func:`signal.signal`.  Till exempel kan du inte ställa in en "
"hanterare på :const:`SIGKILL`-signalen; tidigare versioner av Python skulle "
"tyst acceptera detta, men 2.4 kommer att ge upphov till ett :exc:"
"`RuntimeError`-undantag."

msgid ""
"Two new functions were added to the :mod:`socket` module. :func:`socketpair` "
"returns a pair of connected sockets and ``getservbyport(port)`` looks up the "
"service name for a given port number. (Contributed by Dave Cole and Barry "
"Warsaw.)"
msgstr ""
"Två nya funktioner har lagts till i modulen :mod:`socket`. :func:"
"`socketpair` returnerar ett par anslutna socklar och ``getservbyport(port)`` "
"söker upp servicenamnet för ett givet portnummer. (Bidrag från Dave Cole och "
"Barry Warsaw.)"

msgid ""
"The :func:`sys.exitfunc` function has been deprecated.  Code should be using "
"the existing :mod:`atexit` module, which correctly handles calling multiple "
"exit functions.  Eventually :func:`sys.exitfunc` will become a purely "
"internal interface, accessed only by :mod:`atexit`."
msgstr ""
"Funktionen :func:`sys.exitfunc` har utgått.  Kod bör använda den befintliga "
"modulen :mod:`atexit`, som korrekt hanterar anrop av flera exit-funktioner.  "
"Så småningom kommer :func:`sys.exitfunc` att bli ett rent internt "
"gränssnitt, som endast nås av :mod:`atexit`."

msgid ""
"The :mod:`tarfile` module now generates GNU-format tar files by default. "
"(Contributed by Lars Gustäbel.)"
msgstr ""
"Modulen :mod:`tarfile` genererar nu tar-filer i GNU-format som standard. "
"(Bidrag från Lars Gustäbel.)"

msgid ""
"The :mod:`threading` module now has an elegantly simple way to support "
"thread-local data.  The module contains a :class:`local` class whose "
"attribute values are local to different threads. ::"
msgstr ""
"Modulen :mod:`threading` har nu ett elegant och enkelt sätt att stödja "
"trådlokala data.  Modulen innehåller en :class:`local`-klass vars "
"attributvärden är lokala för olika trådar. ::"

msgid ""
"import threading\n"
"\n"
"data = threading.local()\n"
"data.number = 42\n"
"data.url = ('www.python.org', 80)"
msgstr ""
"import threading\n"
"\n"
"data = threading.local()\n"
"data.number = 42\n"
"data.url = ('www.python.org', 80)"

msgid ""
"Other threads can assign and retrieve their own values for the :attr:"
"`number` and :attr:`url` attributes.  You can subclass :class:`local` to "
"initialize attributes or to add methods. (Contributed by Jim Fulton.)"
msgstr ""
"Andra trådar kan tilldela och hämta sina egna värden för attributen :attr:"
"`number` och :attr:`url`.  Du kan underklassa :class:`local` för att "
"initiera attribut eller lägga till metoder. (Bidrag från Jim Fulton.)"

msgid ""
"The :mod:`timeit` module now automatically disables periodic garbage "
"collection during the timing loop.  This change makes consecutive timings "
"more comparable.  (Contributed by Raymond Hettinger.)"
msgstr ""
"Modulen :mod:`timeit` inaktiverar nu automatiskt periodisk skräpinsamling "
"under tidtagningsslingan.  Denna förändring gör på varandra följande "
"tidtagningar mer jämförbara.  (Bidrag från Raymond Hettinger.)"

msgid ""
"The :mod:`weakref` module now supports a wider variety of objects including "
"Python functions, class instances, sets, frozensets, deques, arrays, files, "
"sockets, and regular expression pattern objects. (Contributed by Raymond "
"Hettinger.)"
msgstr ""
"Modulen :mod:`weakref` stöder nu ett större antal objekt, inklusive Python-"
"funktioner, klassinstanser, set, frozensets, deques, arrays, filer, sockets "
"och objekt med mönster för reguljära uttryck. (Bidrag från Raymond "
"Hettinger.)"

msgid ""
"The :mod:`xmlrpclib <xmlrpc.client>` module now supports a multi-call "
"extension for transmitting multiple XML-RPC calls in a single HTTP "
"operation. (Contributed by Brian Quinlan.)"
msgstr ""
"Modulen :mod:`xmlrpclib <xmlrpc.client>` stöder nu ett tillägg för flera "
"anrop för att överföra flera XML-RPC-anrop i en enda HTTP-operation. (Bidrag "
"från Brian Quinlan.)"

msgid ""
"The :mod:`mpz`, :mod:`rotor`, and :mod:`xreadlines` modules have  been "
"removed."
msgstr ""
"Modulerna :mod:`mpz`, :mod:`rotor` och :mod:`xreadlines` har tagits bort."

msgid "cookielib"
msgstr "cookielib"

msgid ""
"The :mod:`cookielib <http.cookiejar>` library supports client-side handling "
"for HTTP cookies, mirroring the :mod:`Cookie <http.cookies>` module's server-"
"side cookie support. Cookies are stored in cookie jars; the library "
"transparently stores cookies offered by the web server in the cookie jar, "
"and fetches the cookie from the jar when connecting to the server. As in web "
"browsers, policy objects control whether cookies are accepted or not."
msgstr ""
"Biblioteket :mod:`cookielib <http.cookiejar>` har stöd för hantering av HTTP-"
"cookies på klientsidan och speglar modulen :mod:`Cookie <http.cookies>`:s "
"stöd för cookies på serversidan. Cookies lagras i cookie-burkar; biblioteket "
"lagrar på ett transparent sätt cookies som erbjuds av webbservern i cookie-"
"burken och hämtar cookien från burken när du ansluter till servern. Precis "
"som i webbläsare styr policyobjekt om cookies ska accepteras eller inte."

msgid ""
"In order to store cookies across sessions, two implementations of cookie "
"jars are provided: one that stores cookies in the Netscape format so "
"applications can use the Mozilla or Lynx cookie files, and one that stores "
"cookies in the same format as the Perl libwww library."
msgstr ""
"För att kunna lagra cookies över sessioner finns det två implementeringar av "
"cookie jars: en som lagrar cookies i Netscape-format så att program kan "
"använda Mozilla- eller Lynx-cookiefiler, och en som lagrar cookies i samma "
"format som Perl-biblioteket libwww."

msgid ""
":mod:`urllib2 <urllib.request>` has been changed to interact with :mod:"
"`cookielib <http.cookiejar>`: :class:`HTTPCookieProcessor` manages a cookie "
"jar that is used when accessing URLs."
msgstr ""
":mod:`urllib2 <urllib.request>` har ändrats för att interagera med :mod:"
"`cookielib <http.cookiejar>`: :class:`HTTPCookieProcessor` hanterar en "
"cookiejar som används vid åtkomst till URL:er."

msgid "This module was contributed by John J. Lee."
msgstr "Denna modul har tillhandahållits av John J. Lee."

msgid "doctest"
msgstr "doktest"

msgid ""
"The :mod:`doctest` module underwent considerable refactoring thanks to "
"Edward Loper and Tim Peters.  Testing can still be as simple as running :"
"func:`doctest.testmod`, but the refactorings allow customizing the module's "
"operation in various ways"
msgstr ""
"Modulen :mod:`doctest` har genomgått en betydande omarbetning tack vare "
"Edward Loper och Tim Peters.  Testning kan fortfarande vara lika enkelt som "
"att köra :func:`doctest.testmod`, men omarbetningarna gör det möjligt att "
"anpassa modulens funktion på olika sätt"

msgid ""
"The new :class:`DocTestFinder` class extracts the tests from a given  "
"object's docstrings::"
msgstr ""
"Den nya :class:`DocTestFinder`-klassen extraherar testerna från ett visst "
"objekts docstrings::"

msgid ""
"def f (x, y):\n"
"    \"\"\">>> f(2,2)\n"
"4\n"
">>> f(3,2)\n"
"6\n"
"    \"\"\"\n"
"    return x*y\n"
"\n"
"finder = doctest.DocTestFinder()\n"
"\n"
"# Get list of DocTest instances\n"
"tests = finder.find(f)"
msgstr ""
"def f (x, y):\n"
"    \"\"\">>> f(2,2)\n"
"4\n"
">>> f(3,2)\n"
"6\n"
"    \"\"\"\n"
"    returnera x*y\n"
"\n"
"finder = doctest.DocTestFinder()\n"
"\n"
"# Hämta lista över DocTest-instanser\n"
"tester = finder.find(f)"

msgid ""
"The new :class:`DocTestRunner` class then runs individual tests and can "
"produce a summary of the results::"
msgstr ""
"Den nya :class:`DocTestRunner`-klassen kör sedan enskilda tester och kan "
"producera en sammanfattning av resultaten::"

msgid ""
"runner = doctest.DocTestRunner()\n"
"for t in tests:\n"
"    tried, failed = runner.run(t)\n"
"\n"
"runner.summarize(verbose=1)"
msgstr ""
"runner = doctest.DocTestRunner()\n"
"för t i tester:\n"
"    tried, failed = runner.run(t)\n"
"\n"
"runner.summarize(verbose=1)"

msgid "The above example produces the following output::"
msgstr "Exemplet ovan ger följande resultat::"

msgid ""
"1 items passed all tests:\n"
"   2 tests in f\n"
"2 tests in 1 items.\n"
"2 passed and 0 failed.\n"
"Test passed."
msgstr ""
"1 objekt klarade alla tester:\n"
"   2 tester i f\n"
"2 tester i 1 objekt.\n"
"2 godkända och 0 underkända.\n"
"Testet godkändes."

msgid ""
":class:`DocTestRunner` uses an instance of the :class:`OutputChecker` class "
"to compare the expected output with the actual output.  This class takes a "
"number of different flags that customize its behaviour; ambitious users can "
"also write a completely new subclass of :class:`OutputChecker`."
msgstr ""
":class:`DocTestRunner` använder en instans av klassen :class:`OutputChecker` "
"för att jämföra den förväntade utdata med den faktiska utdata.  Denna klass "
"tar ett antal olika flaggor som anpassar dess beteende; ambitiösa användare "
"kan också skriva en helt ny underklass av :class:`OutputChecker`."

msgid ""
"The default output checker provides a number of handy features. For example, "
"with the :const:`doctest.ELLIPSIS` option flag, an ellipsis (``...``) in the "
"expected output matches any substring,  making it easier to accommodate "
"outputs that vary in minor ways::"
msgstr ""
"Standardutdatakontrollen har ett antal praktiska funktioner. Till exempel, "
"med :const:`doctest.ELLIPSIS` option flagga, en ellips (``...``) i den "
"förväntade utdata matchar alla delsträngar, vilket gör det lättare att "
"tillgodose utdata som varierar på mindre sätt::"

msgid ""
"def o (n):\n"
"    \"\"\">>> o(1)\n"
"<__main__.C instance at 0x...>\n"
">>>\n"
"\"\"\""
msgstr ""
"def o (n):\n"
"    \"\"\">>> o(1)\n"
"<__main__.C-instans på 0x...>\n"
">>>\n"
"\"\"\""

msgid "Another special string, ``<BLANKLINE>``, matches a blank line::"
msgstr "En annan speciell sträng, ``<BLANKLINE>``, matchar en tom rad::"

msgid ""
"def p (n):\n"
"    \"\"\">>> p(1)\n"
"<BLANKLINE>\n"
">>>\n"
"\"\"\""
msgstr ""
"def p (n):\n"
"    \"\"\"&gt;&gt;&gt; p(1)\n"
"<BLANKLINE>\n"
"&gt;&gt;&gt\n"
"\"\"\""

msgid ""
"Another new capability is producing a diff-style display of the output by "
"specifying the :const:`doctest.REPORT_UDIFF` (unified diffs), :const:"
"`doctest.REPORT_CDIFF` (context diffs), or :const:`doctest.REPORT_NDIFF` "
"(delta-style) option flags.  For example::"
msgstr ""
"En annan ny funktion är att producera en diff-stilsvisning av utdata genom "
"att ange alternativflaggorna :const:`doctest.REPORT_UDIFF` (unified diffs), :"
"const:`doctest.REPORT_CDIFF` (context diffs) eller :const:`doctest."
"REPORT_NDIFF` (delta-style).  Till exempel::"

msgid ""
"def g (n):\n"
"    \"\"\">>> g(4)\n"
"here\n"
"is\n"
"a\n"
"lengthy\n"
">>>\"\"\"\n"
"    L = 'here is a rather lengthy list of words'.split()\n"
"    for word in L[:n]:\n"
"        print word"
msgstr ""
"def g (n):\n"
"    \"\"\">>> g(4)\n"
"här\n"
"är\n"
"a\n"
"lång\n"
">>>\"\"\"\n"
"    L = 'här är en ganska lång lista med ord'.split()\n"
"    för ord i L[:n]:\n"
"        skriv ut ord"

msgid ""
"Running the above function's tests with :const:`doctest.REPORT_UDIFF` "
"specified, you get the following output:"
msgstr ""
"Om du kör testerna för ovanstående funktion med :const:`doctest."
"REPORT_UDIFF` specificerad får du följande resultat:"

msgid ""
"**********************************************************************\n"
"File \"t.py\", line 15, in g\n"
"Failed example:\n"
"    g(4)\n"
"Differences (unified diff with -expected +actual):\n"
"    @@ -2,3 +2,3 @@\n"
"     is\n"
"     a\n"
"    -lengthy\n"
"    +rather\n"
"**********************************************************************"
msgstr ""
"**********************************************************************\n"
"Fil \"t.py\", rad 15, i g\n"
"Misslyckat exempel:\n"
"    g(4)\n"
"Skillnader (enhetlig diff med -förväntat +verkligt):\n"
"    @@ -2,3 +2,3 @@\n"
"     är\n"
"     a\n"
"    -lång\n"
"    +mer\n"
"**********************************************************************"

msgid "Build and C API Changes"
msgstr "Ändringar i Build och C API"

msgid "Some of the changes to Python's build process and to the C API are:"
msgstr "Några av ändringarna i Pythons byggprocess och i C API:et är följande:"

msgid ""
"Three new convenience macros were added for common return values from "
"extension functions: :c:macro:`Py_RETURN_NONE`, :c:macro:`Py_RETURN_TRUE`, "
"and :c:macro:`Py_RETURN_FALSE`. (Contributed by Brett Cannon.)"
msgstr ""
"Tre nya bekvämlighetsmakron har lagts till för vanliga returvärden från "
"tilläggsfunktioner: :c:macro:`Py_RETURN_NONE`, :c:macro:`Py_RETURN_TRUE` "
"och :c:macro:`Py_RETURN_FALSE`. (Bidrag från Brett Cannon.)"

msgid ""
"Another new macro, :c:macro:`Py_CLEAR`,  decreases the reference count of "
"*obj* and sets *obj* to the null pointer.  (Contributed by Jim Fulton.)"
msgstr ""
"Ett annat nytt makro, :c:macro:`Py_CLEAR`, minskar referensantalet för *obj* "
"och sätter *obj* till nollpekaren.  (Bidrag från Jim Fulton.)"

msgid ""
"A new function, ``PyTuple_Pack(N, obj1, obj2, ..., objN)``, constructs "
"tuples from a variable length argument list of Python objects.  (Contributed "
"by Raymond Hettinger.)"
msgstr ""
"En ny funktion, ``PyTuple_Pack(N, obj1, obj2, ..., objN)``, konstruerar "
"tuplar från en argumentlista med variabel längd av Python-objekt.  (Bidrag "
"från Raymond Hettinger.)"

msgid ""
"A new function, ``PyDict_Contains(d, k)``, implements fast dictionary "
"lookups without masking exceptions raised during the look-up process. "
"(Contributed by Raymond Hettinger.)"
msgstr ""
"En ny funktion, ``PyDict_Contains(d, k)``, implementerar snabba "
"ordboksuppslagningar utan att maskera undantag som uppstår under "
"uppslagningsprocessen. (Bidrag från Raymond Hettinger.)"

msgid ""
"The :c:expr:`Py_IS_NAN(X)` macro returns 1 if  its float or double argument "
"*X* is a NaN.   (Contributed by Tim Peters.)"
msgstr ""
"Makrot :c:expr:`Py_IS_NAN(X)` returnerar 1 om dess float- eller double-"
"argument *X* är ett NaN.   (Bidrag från Tim Peters.)"

msgid ""
"C code can avoid unnecessary locking by using the new :c:func:`!"
"PyEval_ThreadsInitialized` function to tell  if any thread operations have "
"been performed.  If this function  returns false, no lock operations are "
"needed. (Contributed by Nick Coghlan.)"
msgstr ""
"C-kod kan undvika onödig låsning genom att använda den nya :c:func:`!"
"PyEval_ThreadsInitialized`-funktionen för att avgöra om några "
"trådoperationer har utförts.  Om denna funktion returnerar false behövs inga "
"låsoperationer. (Bidrag från Nick Coghlan.)"

msgid ""
"A new function, :c:func:`PyArg_VaParseTupleAndKeywords`, is the same as :c:"
"func:`PyArg_ParseTupleAndKeywords` but takes a  :c:type:`va_list` instead of "
"a number of arguments. (Contributed by Greg Chapman.)"
msgstr ""
"En ny funktion, :c:func:`PyArg_VaParseTupleAndKeywords`, är samma sak som :c:"
"func:`PyArg_ParseTupleAndKeywords` men tar en :c:type:`va_list` istället för "
"ett antal argument. (Bidrag från Greg Chapman.)"

msgid ""
"A new method flag, :c:macro:`METH_COEXIST`, allows a function defined in "
"slots to co-exist with a :c:type:`PyCFunction` having the same name.  This "
"can halve the access time for a method such as :meth:`set.__contains__`.  "
"(Contributed by Raymond Hettinger.)"
msgstr ""
"En ny metodflagga, :c:macro:`METH_COEXIST`, gör att en funktion som "
"definieras i slots kan samexistera med en :c:type:`PyCFunction` med samma "
"namn.  Detta kan halvera åtkomsttiden för en metod som :meth:`set."
"__contains__`.  (Bidrag från Raymond Hettinger.)"

msgid ""
"Python can now be built with additional profiling for the interpreter "
"itself, intended as an aid to people developing the Python core.  Providing :"
"option:`!--enable-profiling` to the :program:`configure` script will let you "
"profile the interpreter with :program:`gprof`, and providing the :option:`!--"
"with-tsc` switch enables profiling using the Pentium's Time-Stamp-Counter "
"register.  Note that the :option:`!--with-tsc` switch is slightly misnamed, "
"because the profiling feature also works on the PowerPC platform, though "
"that processor architecture doesn't call that register \"the TSC "
"register\".  (Contributed by Jeremy Hylton.)"
msgstr ""
"Python kan nu byggas med ytterligare profilering för själva tolken, avsedd "
"som ett hjälpmedel för personer som utvecklar Python-kärnan.  Om du lägger "
"till :option:`!--enable-profiling` i skriptet :program:`configure` kan du "
"profilera tolken med :program:`gprof`, och om du lägger till :option:`!--"
"with-tsc` kan du profilera med hjälp av Pentiums Time-Stamp-Counter-"
"register.  Observera att bytet :option:`!--with-tsc` är något felaktigt "
"namngivet, eftersom profileringsfunktionen även fungerar på PowerPC-"
"plattformen, även om den processorarkitekturen inte kallar registret för "
"\"TSC-registret\".  (Bidrag från Jeremy Hylton.)"

msgid ""
"The :c:type:`!tracebackobject` type has been renamed to :c:type:"
"`PyTracebackObject`."
msgstr ""
"Typen :c:type:`!tracebackobject` har bytt namn till :c:type:"
"`PyTracebackObject`."

msgid "Port-Specific Changes"
msgstr "Hamnspecifika ändringar"

msgid ""
"The Windows port now builds under MSVC++ 7.1 as well as version 6. "
"(Contributed by Martin von Löwis.)"
msgstr ""
"Windows-porten bygger nu under MSVC++ 7.1 såväl som version 6. (Bidrag från "
"Martin von Löwis.)"

msgid "Porting to Python 2.4"
msgstr "Portning till Python 2.4"

msgid ""
"This section lists previously described changes that may require changes to "
"your code:"
msgstr ""
"I detta avsnitt listas tidigare beskrivna ändringar som kan kräva ändringar "
"i din kod:"

msgid ""
"Left shifts and hexadecimal/octal constants that are too  large no longer "
"trigger a :exc:`FutureWarning` and return  a value limited to 32 or 64 bits; "
"instead they return a long integer."
msgstr ""
"Vänsterförskjutningar och hexadecimala/oktala konstanter som är för stora "
"utlöser inte längre en :exc:`FutureWarning` och returnerar ett värde "
"begränsat till 32 eller 64 bitar; istället returnerar de ett långt heltal."

msgid ""
"The :func:`zip` built-in function and :func:`itertools.izip` now return  an "
"empty list instead of raising a :exc:`TypeError` exception if called with no "
"arguments."
msgstr ""
"De inbyggda funktionerna :func:`zip` och :func:`itertools.izip` returnerar "
"nu en tom lista istället för att ge upphov till ett :exc:`TypeError`-"
"undantag om de anropas utan argument."

msgid ""
"You can no longer compare the :class:`date` and :class:`~datetime.datetime` "
"instances provided by the :mod:`datetime` module.  Two  instances of "
"different classes will now always be unequal, and  relative comparisons "
"(``<``, ``>``) will raise a :exc:`TypeError`."
msgstr ""
"Du kan inte längre jämföra instanserna :class:`date` och :class:`~datetime."
"datetime` som tillhandahålls av modulen :mod:`datetime`.  Två instanser av "
"olika klasser kommer nu alltid att vara ojämlika och relativa jämförelser "
"(``<``, ``>``) kommer att ge upphov till ett :exc:`TypeError`."

msgid ""
":func:`!dircache.listdir` now passes exceptions to the caller instead of "
"returning empty lists."
msgstr ""
":func:`!dircache.listdir` skickar nu undantag till anroparen istället för "
"att returnera tomma listor."

msgid ""
":func:`LexicalHandler.startDTD` used to receive the public and system IDs in "
"the wrong order.  This has been corrected; applications relying on the wrong "
"order need to be fixed."
msgstr ""
":func:`LexicalHandler.startDTD` brukade ta emot offentliga ID:n och system-"
"ID:n i fel ordning.  Detta har korrigerats; applikationer som förlitar sig "
"på den felaktiga ordningen måste åtgärdas."

msgid ""
":func:`fcntl.ioctl` now warns if the *mutate*  argument is omitted and "
"relevant."
msgstr ""
":func:`fcntl.ioctl` varnar nu om argumentet *mutate* utelämnas och är "
"relevant."

msgid ""
"The :mod:`tarfile` module now generates GNU-format tar files by default."
msgstr ""
"Modulen :mod:`tarfile` genererar nu tar-filer i GNU-format som standard."

msgid ""
"Encountering a failure while importing a module no longer leaves a partially "
"initialized module object in ``sys.modules``."
msgstr ""
"Om ett fel inträffar vid import av en modul lämnas inte längre ett delvis "
"initialiserat modulobjekt kvar i ``sys.modules``."

msgid ""
":const:`None` is now a constant; code that binds a new value to  the name "
"``None`` is now a syntax error."
msgstr ""
":const:`None` är nu en konstant; kod som binder ett nytt värde till namnet "
"``None`` är nu ett syntaxfel."

msgid ""
"The :func:`signals.signal` function now raises a :exc:`RuntimeError` "
"exception for certain illegal values; previously these errors would pass "
"silently.  For example, you can no longer set a handler on the :const:"
"`SIGKILL` signal."
msgstr ""
"Funktionen :func:`signals.signal` ger nu upphov till ett :exc:`RuntimeError`-"
"undantag för vissa olagliga värden; tidigare passerade dessa fel tyst.  Du "
"kan t.ex. inte längre ställa in en hanterare för signalen :const:`SIGKILL`."

msgid "Acknowledgements"
msgstr "Tack till"

msgid ""
"The author would like to thank the following people for offering "
"suggestions, corrections and assistance with various drafts of this article: "
"Koray Can, Hye-Shik Chang, Michael Dyck, Raymond Hettinger, Brian Hurt, "
"Hamish Lawson, Fredrik Lundh, Sean Reifschneider, Sadruddin Rejeb."
msgstr ""
"Författaren vill tacka följande personer för förslag, korrigeringar och "
"hjälp med olika utkast av denna artikel: Koray Can, Hye-Shik Chang, Michael "
"Dyck, Raymond Hettinger, Brian Hurt, Hamish Lawson, Fredrik Lundh, Sean "
"Reifschneider, Sadruddin Rejeb."

msgid "universal newlines"
msgstr "universella nya rader"

msgid "What's new"
msgstr "Vad är nytt"
