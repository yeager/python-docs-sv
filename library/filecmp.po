# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!filecmp` --- File and Directory Comparisons"
msgstr ""

msgid "**Source code:** :source:`Lib/filecmp.py`"
msgstr ""

msgid ""
"The :mod:`filecmp` module defines functions to compare files and "
"directories, with various optional time/correctness trade-offs. For "
"comparing files, see also the :mod:`difflib` module."
msgstr ""

msgid "The :mod:`filecmp` module defines the following functions:"
msgstr ""

msgid ""
"Compare the files named *f1* and *f2*, returning ``True`` if they seem "
"equal, ``False`` otherwise."
msgstr ""

msgid ""
"If *shallow* is true and the :func:`os.stat` signatures (file type, size, "
"and modification time) of both files are identical, the files are taken to "
"be equal."
msgstr ""

msgid ""
"Otherwise, the files are treated as different if their sizes or contents "
"differ."
msgstr ""

msgid ""
"Note that no external programs are called from this function, giving it "
"portability and efficiency."
msgstr ""

msgid ""
"This function uses a cache for past comparisons and the results, with cache "
"entries invalidated if the :func:`os.stat` information for the file "
"changes.  The entire cache may be cleared using :func:`clear_cache`."
msgstr ""

msgid ""
"Compare the files in the two directories *dir1* and *dir2* whose names are "
"given by *common*."
msgstr ""

msgid ""
"Returns three lists of file names: *match*, *mismatch*, *errors*.  *match* "
"contains the list of files that match, *mismatch* contains the names of "
"those that don't, and *errors* lists the names of files which could not be "
"compared.  Files are listed in *errors* if they don't exist in one of the "
"directories, the user lacks permission to read them or if the comparison "
"could not be done for some other reason."
msgstr ""

msgid ""
"The *shallow* parameter has the same meaning and default value as for :func:"
"`filecmp.cmp`."
msgstr ""

msgid ""
"For example, ``cmpfiles('a', 'b', ['c', 'd/e'])`` will compare ``a/c`` with "
"``b/c`` and ``a/d/e`` with ``b/d/e``.  ``'c'`` and ``'d/e'`` will each be in "
"one of the three returned lists."
msgstr ""

msgid ""
"Clear the filecmp cache. This may be useful if a file is compared so quickly "
"after it is modified that it is within the mtime resolution of the "
"underlying filesystem."
msgstr ""

msgid "The :class:`dircmp` class"
msgstr ""

msgid ""
"Construct a new directory comparison object, to compare the directories *a* "
"and *b*.  *ignore* is a list of names to ignore, and defaults to :const:"
"`filecmp.DEFAULT_IGNORES`.  *hide* is a list of names to hide, and defaults "
"to ``[os.curdir, os.pardir]``."
msgstr ""

msgid ""
"The :class:`dircmp` class compares files by doing *shallow* comparisons as "
"described for :func:`filecmp.cmp` by default using the *shallow* parameter."
msgstr ""

msgid "Added the *shallow* parameter."
msgstr ""

msgid "The :class:`dircmp` class provides the following methods:"
msgstr ""

msgid "Print (to :data:`sys.stdout`) a comparison between *a* and *b*."
msgstr ""

msgid ""
"Print a comparison between *a* and *b* and common immediate subdirectories."
msgstr ""

msgid ""
"Print a comparison between *a* and *b* and common subdirectories "
"(recursively)."
msgstr ""

msgid ""
"The :class:`dircmp` class offers a number of interesting attributes that may "
"be used to get various bits of information about the directory trees being "
"compared."
msgstr ""

msgid ""
"Note that via :meth:`~object.__getattr__` hooks, all attributes are computed "
"lazily, so there is no speed penalty if only those attributes which are "
"lightweight to compute are used."
msgstr ""

msgid "The directory *a*."
msgstr ""

msgid "The directory *b*."
msgstr ""

msgid "Files and subdirectories in *a*, filtered by *hide* and *ignore*."
msgstr ""

msgid "Files and subdirectories in *b*, filtered by *hide* and *ignore*."
msgstr ""

msgid "Files and subdirectories in both *a* and *b*."
msgstr ""

msgid "Files and subdirectories only in *a*."
msgstr ""

msgid "Files and subdirectories only in *b*."
msgstr ""

msgid "Subdirectories in both *a* and *b*."
msgstr ""

msgid "Files in both *a* and *b*."
msgstr ""

msgid ""
"Names in both *a* and *b*, such that the type differs between the "
"directories, or names for which :func:`os.stat` reports an error."
msgstr ""

msgid ""
"Files which are identical in both *a* and *b*, using the class's file "
"comparison operator."
msgstr ""

msgid ""
"Files which are in both *a* and *b*, whose contents differ according to the "
"class's file comparison operator."
msgstr ""

msgid "Files which are in both *a* and *b*, but could not be compared."
msgstr ""

msgid ""
"A dictionary mapping names in :attr:`common_dirs` to :class:`dircmp` "
"instances (or MyDirCmp instances if this instance is of type MyDirCmp, a "
"subclass of :class:`dircmp`)."
msgstr ""

msgid ""
"Previously entries were always :class:`dircmp` instances. Now entries are "
"the same type as *self*, if *self* is a subclass of :class:`dircmp`."
msgstr ""

msgid "List of directories ignored by :class:`dircmp` by default."
msgstr ""

msgid ""
"Here is a simplified example of using the ``subdirs`` attribute to search "
"recursively through two directories to show common different files::"
msgstr ""

msgid ""
">>> from filecmp import dircmp\n"
">>> def print_diff_files(dcmp):\n"
"...     for name in dcmp.diff_files:\n"
"...         print(\"diff_file %s found in %s and %s\" % (name, dcmp.left,\n"
"...               dcmp.right))\n"
"...     for sub_dcmp in dcmp.subdirs.values():\n"
"...         print_diff_files(sub_dcmp)\n"
"...\n"
">>> dcmp = dircmp('dir1', 'dir2')\n"
">>> print_diff_files(dcmp)"
msgstr ""
