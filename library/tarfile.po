# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-29 14:17+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!tarfile` --- Read and write tar archive files"
msgstr ""

msgid "**Source code:** :source:`Lib/tarfile.py`"
msgstr ""

msgid ""
"The :mod:`tarfile` module makes it possible to read and write tar archives, "
"including those using gzip, bz2 and lzma compression. Use the :mod:`zipfile` "
"module to read or write :file:`.zip` files, or the higher-level functions "
"in :ref:`shutil <archiving-operations>`."
msgstr ""

msgid "Some facts and figures:"
msgstr ""

msgid ""
"reads and writes :mod:`gzip`, :mod:`bz2`, :mod:`compression.zstd`, and :mod:"
"`lzma` compressed archives if the respective modules are available."
msgstr ""

msgid "read/write support for the POSIX.1-1988 (ustar) format."
msgstr ""

msgid ""
"read/write support for the GNU tar format including *longname* and "
"*longlink* extensions, read-only support for all variants of the *sparse* "
"extension including restoration of sparse files."
msgstr ""

msgid "read/write support for the POSIX.1-2001 (pax) format."
msgstr ""

msgid ""
"handles directories, regular files, hardlinks, symbolic links, fifos, "
"character devices and block devices and is able to acquire and restore file "
"information like timestamp, access permissions and owner."
msgstr ""

msgid "Added support for :mod:`lzma` compression."
msgstr ""

msgid ""
"Archives are extracted using a :ref:`filter <tarfile-extraction-filter>`, "
"which makes it possible to either limit surprising/dangerous features, or to "
"acknowledge that they are expected and the archive is fully trusted."
msgstr ""

msgid ""
"Set the default extraction filter to :func:`data <data_filter>`, which "
"disallows some dangerous features such as links to absolute paths or paths "
"outside of the destination. Previously, the filter strategy was equivalent "
"to :func:`fully_trusted <fully_trusted_filter>`."
msgstr ""

msgid "Added support for Zstandard compression using :mod:`compression.zstd`."
msgstr ""

msgid ""
"Return a :class:`TarFile` object for the pathname *name*. For detailed "
"information on :class:`TarFile` objects and the keyword arguments that are "
"allowed, see :ref:`tarfile-objects`."
msgstr ""

msgid ""
"*mode* has to be a string of the form ``'filemode[:compression]'``, it "
"defaults to ``'r'``. Here is a full list of mode combinations:"
msgstr ""

msgid "mode"
msgstr ""

msgid "action"
msgstr ""

msgid "``'r'`` or ``'r:*'``"
msgstr "``'r'`` eller ``'r:*'``"

msgid "Open for reading with transparent compression (recommended)."
msgstr ""

msgid "``'r:'``"
msgstr "``'r:'``"

msgid "Open for reading exclusively without compression."
msgstr ""

msgid "``'r:gz'``"
msgstr "``'r:gz'``"

msgid "Open for reading with gzip compression."
msgstr ""

msgid "``'r:bz2'``"
msgstr "``'r:bz2'``"

msgid "Open for reading with bzip2 compression."
msgstr ""

msgid "``'r:xz'``"
msgstr "``'r:xz'``"

msgid "Open for reading with lzma compression."
msgstr ""

msgid "``'r:zst'``"
msgstr "``'r:zst'``"

msgid "Open for reading with Zstandard compression."
msgstr ""

msgid "``'x'`` or ``'x:'``"
msgstr "``'x'`` eller ``'x:'``"

msgid ""
"Create a tarfile exclusively without compression. Raise a :exc:"
"`FileExistsError` exception if it already exists."
msgstr ""

msgid "``'x:gz'``"
msgstr "``'x:gz'``"

msgid ""
"Create a tarfile with gzip compression. Raise a :exc:`FileExistsError` "
"exception if it already exists."
msgstr ""

msgid "``'x:bz2'``"
msgstr "``'x:bz2'``"

msgid ""
"Create a tarfile with bzip2 compression. Raise a :exc:`FileExistsError` "
"exception if it already exists."
msgstr ""

msgid "``'x:xz'``"
msgstr "``'x:xz'``"

msgid ""
"Create a tarfile with lzma compression. Raise a :exc:`FileExistsError` "
"exception if it already exists."
msgstr ""

msgid "``'x:zst'``"
msgstr "``'x:zst'``"

msgid ""
"Create a tarfile with Zstandard compression. Raise a :exc:`FileExistsError` "
"exception if it already exists."
msgstr ""

msgid "``'a'`` or ``'a:'``"
msgstr "``'a'`` eller ``'a:'``"

msgid ""
"Open for appending with no compression. The file is created if it does not "
"exist."
msgstr ""

msgid "``'w'`` or ``'w:'``"
msgstr "``'w'`` eller ``'w:'``"

msgid "Open for uncompressed writing."
msgstr ""

msgid "``'w:gz'``"
msgstr "``'w:gz'``"

msgid "Open for gzip compressed writing."
msgstr ""

msgid "``'w:bz2'``"
msgstr "``'w:bz2'``"

msgid "Open for bzip2 compressed writing."
msgstr ""

msgid "``'w:xz'``"
msgstr "``'w:xz'``"

msgid "Open for lzma compressed writing."
msgstr ""

msgid "``'w:zst'``"
msgstr "``'w:zst'``"

msgid "Open for Zstandard compressed writing."
msgstr ""

msgid ""
"Note that ``'a:gz'``, ``'a:bz2'`` or ``'a:xz'`` is not possible. If *mode* "
"is not suitable to open a certain (compressed) file for reading, :exc:"
"`ReadError` is raised. Use *mode* ``'r'`` to avoid this.  If a compression "
"method is not supported, :exc:`CompressionError` is raised."
msgstr ""

msgid ""
"If *fileobj* is specified, it is used as an alternative to a :term:`file "
"object` opened in binary mode for *name*. It is supposed to be at position 0."
msgstr ""

msgid ""
"For modes ``'w:gz'``, ``'x:gz'``, ``'w|gz'``, ``'w:bz2'``, ``'x:bz2'``, ``'w|"
"bz2'``, :func:`tarfile.open` accepts the keyword argument *compresslevel* "
"(default ``9``) to specify the compression level of the file."
msgstr ""

msgid ""
"For modes ``'w:xz'``, ``'x:xz'`` and ``'w|xz'``, :func:`tarfile.open` "
"accepts the keyword argument *preset* to specify the compression level of "
"the file."
msgstr ""

msgid ""
"For modes ``'w:zst'``, ``'x:zst'`` and ``'w|zst'``, :func:`tarfile.open` "
"accepts the keyword argument *level* to specify the compression level of the "
"file. The keyword argument *options* may also be passed, providing advanced "
"Zstandard compression parameters described by :class:`~compression.zstd."
"CompressionParameter`. The keyword argument *zstd_dict* can be passed to "
"provide a :class:`~compression.zstd.ZstdDict`, a Zstandard dictionary used "
"to improve compression of smaller amounts of data."
msgstr ""

msgid ""
"For special purposes, there is a second format for *mode*: ``'filemode|"
"[compression]'``.  :func:`tarfile.open` will return a :class:`TarFile` "
"object that processes its data as a stream of blocks.  No random seeking "
"will be done on the file. If given, *fileobj* may be any object that has a :"
"meth:`~io.RawIOBase.read` or :meth:`~io.RawIOBase.write` method (depending "
"on the *mode*) that works with bytes. *bufsize* specifies the blocksize and "
"defaults to ``20 * 512`` bytes. Use this variant in combination with e.g. "
"``sys.stdin.buffer``, a socket :term:`file object` or a tape device. "
"However, such a :class:`TarFile` object is limited in that it does not allow "
"random access, see :ref:`tar-examples`.  The currently possible modes:"
msgstr ""

msgid "Mode"
msgstr ""

msgid "Action"
msgstr ""

msgid "``'r|*'``"
msgstr ""

msgid "Open a *stream* of tar blocks for reading with transparent compression."
msgstr ""

msgid "``'r|'``"
msgstr ""

msgid "Open a *stream* of uncompressed tar blocks for reading."
msgstr ""

msgid "``'r|gz'``"
msgstr ""

msgid "Open a gzip compressed *stream* for reading."
msgstr ""

msgid "``'r|bz2'``"
msgstr ""

msgid "Open a bzip2 compressed *stream* for reading."
msgstr ""

msgid "``'r|xz'``"
msgstr ""

msgid "Open an lzma compressed *stream* for reading."
msgstr ""

msgid "``'r|zst'``"
msgstr ""

msgid "Open a Zstandard compressed *stream* for reading."
msgstr ""

msgid "``'w|'``"
msgstr ""

msgid "Open an uncompressed *stream* for writing."
msgstr ""

msgid "``'w|gz'``"
msgstr ""

msgid "Open a gzip compressed *stream* for writing."
msgstr ""

msgid "``'w|bz2'``"
msgstr ""

msgid "Open a bzip2 compressed *stream* for writing."
msgstr ""

msgid "``'w|xz'``"
msgstr ""

msgid "Open an lzma compressed *stream* for writing."
msgstr ""

msgid "``'w|zst'``"
msgstr ""

msgid "Open a Zstandard compressed *stream* for writing."
msgstr ""

msgid "The ``'x'`` (exclusive creation) mode was added."
msgstr ""

msgid "The *name* parameter accepts a :term:`path-like object`."
msgstr "Parametern *name* accepterar en :term:`path-like object`."

msgid "The *compresslevel* keyword argument also works for streams."
msgstr ""

msgid "The *preset* keyword argument also works for streams."
msgstr ""

msgid ""
"Class for reading and writing tar archives. Do not use this class directly: "
"use :func:`tarfile.open` instead. See :ref:`tarfile-objects`."
msgstr ""

msgid ""
"Return :const:`True` if *name* is a tar archive file, that the :mod:"
"`tarfile` module can read. *name* may be a :class:`str`, file, or file-like "
"object."
msgstr ""

msgid "Support for file and file-like objects."
msgstr ""

msgid "The :mod:`tarfile` module defines the following exceptions:"
msgstr ""

msgid "Base class for all :mod:`tarfile` exceptions."
msgstr ""

msgid ""
"Is raised when a tar archive is opened, that either cannot be handled by "
"the :mod:`tarfile` module or is somehow invalid."
msgstr ""

msgid ""
"Is raised when a compression method is not supported or when the data cannot "
"be decoded properly."
msgstr ""

msgid ""
"Is raised for the limitations that are typical for stream-like :class:"
"`TarFile` objects."
msgstr ""

msgid ""
"Is raised for *non-fatal* errors when using :meth:`TarFile.extract`, but "
"only if :attr:`TarFile.errorlevel`\\ ``== 2``."
msgstr ""

msgid "Is raised by :meth:`TarInfo.frombuf` if the buffer it gets is invalid."
msgstr ""

msgid ""
"Base class for members :ref:`refused <tarfile-extraction-refuse>` by filters."
msgstr ""

msgid ""
"Information about the member that the filter refused to extract, as :ref:"
"`TarInfo <tarinfo-objects>`."
msgstr ""

msgid "Raised to refuse extracting a member with an absolute path."
msgstr ""

msgid "Raised to refuse extracting a member outside the destination directory."
msgstr ""

msgid "Raised to refuse extracting a special file (e.g. a device or pipe)."
msgstr ""

msgid "Raised to refuse extracting a symbolic link with an absolute path."
msgstr ""

msgid ""
"Raised to refuse extracting a symbolic link pointing outside the destination "
"directory."
msgstr ""

msgid ""
"Raised to refuse emulating a link (hard or symbolic) by extracting another "
"archive member, when that member would be rejected by the filter location. "
"The exception that was raised to reject the replacement member is available "
"as :attr:`!BaseException.__context__`."
msgstr ""

msgid "The following constants are available at the module level:"
msgstr ""

msgid ""
"The default character encoding: ``'utf-8'`` on Windows, the value returned "
"by :func:`sys.getfilesystemencoding` otherwise."
msgstr ""

msgid "A regular file :attr:`~TarInfo.type`."
msgstr ""

msgid "A link (inside tarfile) :attr:`~TarInfo.type`."
msgstr ""

msgid "A symbolic link :attr:`~TarInfo.type`."
msgstr ""

msgid "A character special device :attr:`~TarInfo.type`."
msgstr ""

msgid "A block special device :attr:`~TarInfo.type`."
msgstr ""

msgid "A directory :attr:`~TarInfo.type`."
msgstr ""

msgid "A FIFO special device :attr:`~TarInfo.type`."
msgstr ""

msgid "A contiguous file :attr:`~TarInfo.type`."
msgstr ""

msgid "A GNU tar longname :attr:`~TarInfo.type`."
msgstr ""

msgid "A GNU tar longlink :attr:`~TarInfo.type`."
msgstr ""

msgid "A GNU tar sparse file :attr:`~TarInfo.type`."
msgstr ""

msgid ""
"Each of the following constants defines a tar archive format that the :mod:"
"`tarfile` module is able to create. See section :ref:`tar-formats` for "
"details."
msgstr ""

msgid "POSIX.1-1988 (ustar) format."
msgstr ""

msgid "GNU tar format."
msgstr ""

msgid "POSIX.1-2001 (pax) format."
msgstr ""

msgid ""
"The default format for creating archives. This is currently :const:"
"`PAX_FORMAT`."
msgstr ""

msgid ""
"The default format for new archives was changed to :const:`PAX_FORMAT` from :"
"const:`GNU_FORMAT`."
msgstr ""

msgid "Module :mod:`zipfile`"
msgstr ""

msgid "Documentation of the :mod:`zipfile` standard module."
msgstr ""

msgid ":ref:`archiving-operations`"
msgstr ":ref:`archiving-operations`"

msgid ""
"Documentation of the higher-level archiving facilities provided by the "
"standard :mod:`shutil` module."
msgstr ""

msgid ""
"`GNU tar manual, Basic Tar Format <https://www.gnu.org/software/tar/manual/"
"html_node/Standard.html>`_"
msgstr ""

msgid "Documentation for tar archive files, including GNU tar extensions."
msgstr ""

msgid "TarFile Objects"
msgstr ""

msgid ""
"The :class:`TarFile` object provides an interface to a tar archive. A tar "
"archive is a sequence of blocks. An archive member (a stored file) is made "
"up of a header block followed by data blocks. It is possible to store a file "
"in a tar archive several times. Each archive member is represented by a :"
"class:`TarInfo` object, see :ref:`tarinfo-objects` for details."
msgstr ""

msgid ""
"A :class:`TarFile` object can be used as a context manager in a :keyword:"
"`with` statement. It will automatically be closed when the block is "
"completed. Please note that in the event of an exception an archive opened "
"for writing will not be finalized; only the internally used file object will "
"be closed. See the :ref:`tar-examples` section for a use case."
msgstr ""

msgid "Added support for the context management protocol."
msgstr ""

msgid ""
"All following arguments are optional and can be accessed as instance "
"attributes as well."
msgstr ""

msgid ""
"*name* is the pathname of the archive. *name* may be a :term:`path-like "
"object`. It can be omitted if *fileobj* is given. In this case, the file "
"object's :attr:`!name` attribute is used if it exists."
msgstr ""

msgid ""
"*mode* is either ``'r'`` to read from an existing archive, ``'a'`` to append "
"data to an existing file, ``'w'`` to create a new file overwriting an "
"existing one, or ``'x'`` to create a new file only if it does not already "
"exist."
msgstr ""

msgid ""
"If *fileobj* is given, it is used for reading or writing data. If it can be "
"determined, *mode* is overridden by *fileobj*'s mode. *fileobj* will be used "
"from position 0."
msgstr ""

msgid "*fileobj* is not closed, when :class:`TarFile` is closed."
msgstr ""

msgid ""
"*format* controls the archive format for writing. It must be one of the "
"constants :const:`USTAR_FORMAT`, :const:`GNU_FORMAT` or :const:`PAX_FORMAT` "
"that are defined at module level. When reading, format will be automatically "
"detected, even if different formats are present in a single archive."
msgstr ""

msgid ""
"The *tarinfo* argument can be used to replace the default :class:`TarInfo` "
"class with a different one."
msgstr ""

msgid ""
"If *dereference* is :const:`False`, add symbolic and hard links to the "
"archive. If it is :const:`True`, add the content of the target files to the "
"archive. This has no effect on systems that do not support symbolic links."
msgstr ""

msgid ""
"If *ignore_zeros* is :const:`False`, treat an empty block as the end of the "
"archive. If it is :const:`True`, skip empty (and invalid) blocks and try to "
"get as many members as possible. This is only useful for reading "
"concatenated or damaged archives."
msgstr ""

msgid ""
"*debug* can be set from ``0`` (no debug messages) up to ``3`` (all debug "
"messages). The messages are written to ``sys.stderr``."
msgstr ""

msgid ""
"*errorlevel* controls how extraction errors are handled, see :attr:`the "
"corresponding attribute <TarFile.errorlevel>`."
msgstr ""

msgid ""
"The *encoding* and *errors* arguments define the character encoding to be "
"used for reading or writing the archive and how conversion errors are going "
"to be handled. The default settings will work for most users. See section :"
"ref:`tar-unicode` for in-depth information."
msgstr ""

msgid ""
"The *pax_headers* argument is an optional dictionary of strings which will "
"be added as a pax global header if *format* is :const:`PAX_FORMAT`."
msgstr ""

msgid ""
"If *stream* is set to :const:`True` then while reading the archive info "
"about files in the archive are not cached, saving memory."
msgstr ""

msgid "Use ``'surrogateescape'`` as the default for the *errors* argument."
msgstr ""

msgid "Add the *stream* parameter."
msgstr ""

msgid ""
"Alternative constructor. The :func:`tarfile.open` function is actually a "
"shortcut to this classmethod."
msgstr ""

msgid ""
"Return a :class:`TarInfo` object for member *name*. If *name* can not be "
"found in the archive, :exc:`KeyError` is raised."
msgstr ""

msgid ""
"If a member occurs more than once in the archive, its last occurrence is "
"assumed to be the most up-to-date version."
msgstr ""

msgid ""
"Return the members of the archive as a list of :class:`TarInfo` objects. The "
"list has the same order as the members in the archive."
msgstr ""

msgid ""
"Return the members as a list of their names. It has the same order as the "
"list returned by :meth:`getmembers`."
msgstr ""

msgid ""
"Print a table of contents to ``sys.stdout``. If *verbose* is :const:`False`, "
"only the names of the members are printed. If it is :const:`True`, output "
"similar to that of :program:`ls -l` is produced. If optional *members* is "
"given, it must be a subset of the list returned by :meth:`getmembers`."
msgstr ""

msgid "Added the *members* parameter."
msgstr ""

msgid ""
"Return the next member of the archive as a :class:`TarInfo` object, when :"
"class:`TarFile` is opened for reading. Return :const:`None` if there is no "
"more available."
msgstr ""

msgid ""
"Extract all members from the archive to the current working directory or "
"directory *path*. If optional *members* is given, it must be a subset of the "
"list returned by :meth:`getmembers`. Directory information like owner, "
"modification time and permissions are set after all members have been "
"extracted. This is done to work around two problems: A directory's "
"modification time is reset each time a file is created in it. And, if a "
"directory's permissions do not allow writing, extracting files to it will "
"fail."
msgstr ""

msgid ""
"If *numeric_owner* is :const:`True`, the uid and gid numbers from the "
"tarfile are used to set the owner/group for the extracted files. Otherwise, "
"the named values from the tarfile are used."
msgstr ""

msgid ""
"The *filter* argument specifies how ``members`` are modified or rejected "
"before extraction. See :ref:`tarfile-extraction-filter` for details. It is "
"recommended to set this explicitly only if specific *tar* features are "
"required, or as ``filter='data'`` to support Python versions with a less "
"secure default (3.13 and lower)."
msgstr ""

msgid "Never extract archives from untrusted sources without prior inspection."
msgstr ""

msgid ""
"Since Python 3.14, the default (:func:`data <data_filter>`) will prevent the "
"most dangerous security issues. However, it will not prevent *all* "
"unintended or insecure behavior. Read the :ref:`tarfile-extraction-filter` "
"section for details."
msgstr ""

msgid "Added the *numeric_owner* parameter."
msgstr ""

msgid "The *path* parameter accepts a :term:`path-like object`."
msgstr "Parametern *path* accepterar en :term:`path-like object`."

msgid "Added the *filter* parameter."
msgstr ""

msgid "The *filter* parameter now defaults to ``'data'``."
msgstr ""

msgid ""
"Extract a member from the archive to the current working directory, using "
"its full name. Its file information is extracted as accurately as possible. "
"*member* may be a filename or a :class:`TarInfo` object. You can specify a "
"different directory using *path*. *path* may be a :term:`path-like object`. "
"File attributes (owner, mtime, mode) are set unless *set_attrs* is false."
msgstr ""

msgid ""
"The *numeric_owner* and *filter* arguments are the same as for :meth:"
"`extractall`."
msgstr ""

msgid ""
"The :meth:`extract` method does not take care of several extraction issues. "
"In most cases you should consider using the :meth:`extractall` method."
msgstr ""

msgid ""
"Never extract archives from untrusted sources without prior inspection. See "
"the warning for :meth:`extractall` for details."
msgstr ""

msgid "Added the *set_attrs* parameter."
msgstr ""

msgid ""
"Extract a member from the archive as a file object. *member* may be a "
"filename or a :class:`TarInfo` object. If *member* is a regular file or a "
"link, an :class:`io.BufferedReader` object is returned. For all other "
"existing members, :const:`None` is returned. If *member* does not appear in "
"the archive, :exc:`KeyError` is raised."
msgstr ""

msgid "Return an :class:`io.BufferedReader` object."
msgstr ""

msgid ""
"The returned :class:`io.BufferedReader` object has the :attr:`!mode` "
"attribute which is always equal to ``'rb'``."
msgstr ""

msgid ""
"If *errorlevel* is ``0``, errors are ignored when using :meth:`TarFile."
"extract` and :meth:`TarFile.extractall`. Nevertheless, they appear as error "
"messages in the debug output when *debug* is greater than 0. If ``1`` (the "
"default), all *fatal* errors are raised as :exc:`OSError` or :exc:"
"`FilterError` exceptions. If ``2``, all *non-fatal* errors are raised as :"
"exc:`TarError` exceptions as well."
msgstr ""

msgid ""
"Some exceptions, e.g. ones caused by wrong argument types or data "
"corruption, are always raised."
msgstr ""

msgid ""
"Custom :ref:`extraction filters <tarfile-extraction-filter>` should raise :"
"exc:`FilterError` for *fatal* errors and :exc:`ExtractError` for *non-fatal* "
"ones."
msgstr ""

msgid ""
"Note that when an exception is raised, the archive may be partially "
"extracted. It is the user’s responsibility to clean up."
msgstr ""

msgid ""
"The :ref:`extraction filter <tarfile-extraction-filter>` used as a default "
"for the *filter* argument of :meth:`~TarFile.extract` and :meth:`~TarFile."
"extractall`."
msgstr ""

msgid ""
"The attribute may be ``None`` or a callable. String names are not allowed "
"for this attribute, unlike the *filter* argument to :meth:`~TarFile.extract`."
msgstr ""

msgid ""
"If ``extraction_filter`` is ``None`` (the default), extraction methods will "
"use the :func:`data <data_filter>` filter by default."
msgstr ""

msgid ""
"The attribute may be set on instances or overridden in subclasses. It also "
"is possible to set it on the ``TarFile`` class itself to set a global "
"default, although, since it affects all uses of *tarfile*, it is best "
"practice to only do so in top-level applications or :mod:`site configuration "
"<site>`. To set a global default this way, a filter function needs to be "
"wrapped in :func:`staticmethod` to prevent injection of a ``self`` argument."
msgstr ""

msgid ""
"The default filter is set to :func:`data <data_filter>`, which disallows "
"some dangerous features such as links to absolute paths or paths outside of "
"the destination. Previously, the default was equivalent to :func:"
"`fully_trusted <fully_trusted_filter>`."
msgstr ""

msgid ""
"Add the file *name* to the archive. *name* may be any type of file "
"(directory, fifo, symbolic link, etc.). If given, *arcname* specifies an "
"alternative name for the file in the archive. Directories are added "
"recursively by default. This can be avoided by setting *recursive* to :const:"
"`False`. Recursion adds entries in sorted order. If *filter* is given, it "
"should be a function that takes a :class:`TarInfo` object argument and "
"returns the changed :class:`TarInfo` object. If it instead returns :const:"
"`None` the :class:`TarInfo` object will be excluded from the archive. See :"
"ref:`tar-examples` for an example."
msgstr ""

msgid "Recursion adds entries in sorted order."
msgstr ""

msgid ""
"Add the :class:`TarInfo` object *tarinfo* to the archive. If *tarinfo* "
"represents a non zero-size regular file, the *fileobj* argument should be a :"
"term:`binary file`, and ``tarinfo.size`` bytes are read from it and added to "
"the archive.  You can create :class:`TarInfo` objects directly, or by using :"
"meth:`gettarinfo`."
msgstr ""

msgid "*fileobj* must be given for non-zero-sized regular files."
msgstr ""

msgid ""
"Create a :class:`TarInfo` object from the result of :func:`os.stat` or "
"equivalent on an existing file.  The file is either named by *name*, or "
"specified as a :term:`file object` *fileobj* with a file descriptor. *name* "
"may be a :term:`path-like object`.  If given, *arcname* specifies an "
"alternative name for the file in the archive, otherwise, the name is taken "
"from *fileobj*’s :attr:`~io.FileIO.name` attribute, or the *name* argument.  "
"The name should be a text string."
msgstr ""

msgid ""
"You can modify some of the :class:`TarInfo`’s attributes before you add it "
"using :meth:`addfile`. If the file object is not an ordinary file object "
"positioned at the beginning of the file, attributes such as :attr:`~TarInfo."
"size` may need modifying.  This is the case for objects such as :class:"
"`~gzip.GzipFile`. The :attr:`~TarInfo.name` may also be modified, in which "
"case *arcname* could be a dummy string."
msgstr ""

msgid ""
"Close the :class:`TarFile`. In write mode, two finishing zero blocks are "
"appended to the archive."
msgstr ""

msgid "A dictionary containing key-value pairs of pax global headers."
msgstr ""

msgid "TarInfo Objects"
msgstr ""

msgid ""
"A :class:`TarInfo` object represents one member in a :class:`TarFile`. Aside "
"from storing all required attributes of a file (like file type, size, time, "
"permissions, owner etc.), it provides some useful methods to determine its "
"type. It does *not* contain the file's data itself."
msgstr ""

msgid ""
":class:`TarInfo` objects are returned by :class:`TarFile`'s methods :meth:"
"`~TarFile.getmember`, :meth:`~TarFile.getmembers` and :meth:`~TarFile."
"gettarinfo`."
msgstr ""

msgid ""
"Modifying the objects returned by :meth:`~TarFile.getmember` or :meth:"
"`~TarFile.getmembers` will affect all subsequent operations on the archive. "
"For cases where this is unwanted, you can use :mod:`copy.copy() <copy>` or "
"call the :meth:`~TarInfo.replace` method to create a modified copy in one "
"step."
msgstr ""

msgid ""
"Several attributes can be set to ``None`` to indicate that a piece of "
"metadata is unused or unknown. Different :class:`TarInfo` methods handle "
"``None`` differently:"
msgstr ""

msgid ""
"The :meth:`~TarFile.extract` or :meth:`~TarFile.extractall` methods will "
"ignore the corresponding metadata, leaving it set to a default."
msgstr ""

msgid ":meth:`~TarFile.addfile` will fail."
msgstr ""

msgid ":meth:`~TarFile.list` will print a placeholder string."
msgstr ""

msgid "Create a :class:`TarInfo` object."
msgstr ""

msgid "Create and return a :class:`TarInfo` object from string buffer *buf*."
msgstr ""

msgid "Raises :exc:`HeaderError` if the buffer is invalid."
msgstr ""

msgid ""
"Read the next member from the :class:`TarFile` object *tarfile* and return "
"it as a :class:`TarInfo` object."
msgstr ""

msgid ""
"Create a string buffer from a :class:`TarInfo` object. For information on "
"the arguments see the constructor of the :class:`TarFile` class."
msgstr ""

msgid "A ``TarInfo`` object has the following public data attributes:"
msgstr ""

msgid "Name of the archive member."
msgstr ""

msgid "Size in bytes."
msgstr ""

msgid ""
"Time of last modification in seconds since the :ref:`epoch <epoch>`, as in :"
"attr:`os.stat_result.st_mtime`."
msgstr ""

msgid ""
"Can be set to ``None`` for :meth:`~TarFile.extract` and :meth:`~TarFile."
"extractall`, causing extraction to skip applying this attribute."
msgstr ""

msgid "Permission bits, as for :func:`os.chmod`."
msgstr ""

msgid ""
"File type.  *type* is usually one of these constants: :const:`REGTYPE`, :"
"const:`AREGTYPE`, :const:`LNKTYPE`, :const:`SYMTYPE`, :const:`DIRTYPE`, :"
"const:`FIFOTYPE`, :const:`CONTTYPE`, :const:`CHRTYPE`, :const:`BLKTYPE`, :"
"const:`GNUTYPE_SPARSE`.  To determine the type of a :class:`TarInfo` object "
"more conveniently, use the ``is*()`` methods below."
msgstr ""

msgid ""
"Name of the target file name, which is only present in :class:`TarInfo` "
"objects of type :const:`LNKTYPE` and :const:`SYMTYPE`."
msgstr ""

msgid ""
"For symbolic links (``SYMTYPE``), the *linkname* is relative to the "
"directory that contains the link. For hard links (``LNKTYPE``), the "
"*linkname* is relative to the root of the archive."
msgstr ""

msgid "User ID of the user who originally stored this member."
msgstr ""

msgid "Group ID of the user who originally stored this member."
msgstr ""

msgid "User name."
msgstr ""

msgid "Group name."
msgstr ""

msgid "Header checksum."
msgstr ""

msgid "Device major number."
msgstr ""

msgid "Device minor number."
msgstr ""

msgid "The tar header starts here."
msgstr ""

msgid "The file's data starts here."
msgstr ""

msgid "Sparse member information."
msgstr ""

msgid ""
"A dictionary containing key-value pairs of an associated pax extended header."
msgstr ""

msgid ""
"Return a *new* copy of the :class:`!TarInfo` object with the given "
"attributes changed. For example, to return a ``TarInfo`` with the group name "
"set to ``'staff'``, use::"
msgstr ""

msgid "new_tarinfo = old_tarinfo.replace(gname='staff')"
msgstr ""

msgid ""
"By default, a deep copy is made. If *deep* is false, the copy is shallow, i."
"e. ``pax_headers`` and any custom attributes are shared with the original "
"``TarInfo`` object."
msgstr ""

msgid "A :class:`TarInfo` object also provides some convenient query methods:"
msgstr ""

msgid "Return :const:`True` if the :class:`TarInfo` object is a regular file."
msgstr ""

msgid "Same as :meth:`isfile`."
msgstr ""

msgid "Return :const:`True` if it is a directory."
msgstr ""

msgid "Return :const:`True` if it is a symbolic link."
msgstr ""

msgid "Return :const:`True` if it is a hard link."
msgstr ""

msgid "Return :const:`True` if it is a character device."
msgstr ""

msgid "Return :const:`True` if it is a block device."
msgstr ""

msgid "Return :const:`True` if it is a FIFO."
msgstr ""

msgid ""
"Return :const:`True` if it is one of character device, block device or FIFO."
msgstr ""

msgid "Extraction filters"
msgstr ""

msgid ""
"The *tar* format is designed to capture all details of a UNIX-like "
"filesystem, which makes it very powerful. Unfortunately, the features make "
"it easy to create tar files that have unintended -- and possibly malicious "
"-- effects when extracted. For example, extracting a tar file can overwrite "
"arbitrary files in various ways (e.g.  by using absolute paths, ``..`` path "
"components, or symlinks that affect later members)."
msgstr ""

msgid ""
"In most cases, the full functionality is not needed. Therefore, *tarfile* "
"supports extraction filters: a mechanism to limit functionality, and thus "
"mitigate some of the security issues."
msgstr ""

msgid ""
"None of the available filters blocks *all* dangerous archive features. Never "
"extract archives from untrusted sources without prior inspection. See also :"
"ref:`tarfile-further-verification`."
msgstr ""

msgid ":pep:`706`"
msgstr ""

msgid "Contains further motivation and rationale behind the design."
msgstr ""

msgid ""
"The *filter* argument to :meth:`TarFile.extract` or :meth:`~TarFile."
"extractall` can be:"
msgstr ""

msgid ""
"the string ``'fully_trusted'``: Honor all metadata as specified in the "
"archive. Should be used if the user trusts the archive completely, or "
"implements their own complex verification."
msgstr ""

msgid ""
"the string ``'tar'``: Honor most *tar*-specific features (i.e. features of "
"UNIX-like filesystems), but block features that are very likely to be "
"surprising or malicious. See :func:`tar_filter` for details."
msgstr ""

msgid ""
"the string ``'data'``: Ignore or block most features specific to UNIX-like "
"filesystems. Intended for extracting cross-platform data archives. See :func:"
"`data_filter` for details."
msgstr ""

msgid "``None`` (default): Use :attr:`TarFile.extraction_filter`."
msgstr ""

msgid ""
"If that is also ``None`` (the default), the ``'data'`` filter will be used."
msgstr ""

msgid ""
"The default filter is set to :func:`data <data_filter>`. Previously, the "
"default was equivalent to :func:`fully_trusted <fully_trusted_filter>`."
msgstr ""

msgid ""
"A callable which will be called for each extracted member with a :ref:"
"`TarInfo <tarinfo-objects>` describing the member and the destination path "
"to where the archive is extracted (i.e. the same path is used for all "
"members)::"
msgstr ""

msgid "filter(member: TarInfo, path: str, /) -> TarInfo | None"
msgstr ""

msgid ""
"The callable is called just before each member is extracted, so it can take "
"the current state of the disk into account. It can:"
msgstr ""

msgid ""
"return a :class:`TarInfo` object which will be used instead of the metadata "
"in the archive, or"
msgstr ""

msgid "return ``None``, in which case the member will be skipped, or"
msgstr ""

msgid ""
"raise an exception to abort the operation or skip the member, depending on :"
"attr:`~TarFile.errorlevel`. Note that when extraction is aborted, :meth:"
"`~TarFile.extractall` may leave the archive partially extracted. It does not "
"attempt to clean up."
msgstr ""

msgid "Default named filters"
msgstr ""

msgid ""
"The pre-defined, named filters are available as functions, so they can be "
"reused in custom filters:"
msgstr ""

msgid "Return *member* unchanged."
msgstr ""

msgid "This implements the ``'fully_trusted'`` filter."
msgstr ""

msgid "Implements the ``'tar'`` filter."
msgstr ""

msgid "Strip leading slashes (``/`` and :data:`os.sep`) from filenames."
msgstr ""

msgid ""
":ref:`Refuse <tarfile-extraction-refuse>` to extract files with absolute "
"paths (in case the name is absolute even after stripping slashes, e.g. ``C:/"
"foo`` on Windows). This raises :class:`~tarfile.AbsolutePathError`."
msgstr ""

msgid ""
":ref:`Refuse <tarfile-extraction-refuse>` to extract files whose absolute "
"path (after following symlinks) would end up outside the destination. This "
"raises :class:`~tarfile.OutsideDestinationError`."
msgstr ""

msgid ""
"Clear high mode bits (setuid, setgid, sticky) and group/other write bits (:"
"const:`~stat.S_IWGRP` | :const:`~stat.S_IWOTH`)."
msgstr ""

msgid "Return the modified ``TarInfo`` member."
msgstr ""

msgid ""
"Implements the ``'data'`` filter. In addition to what ``tar_filter`` does:"
msgstr ""

msgid ""
"Normalize link targets (:attr:`TarInfo.linkname`) using :func:`os.path."
"normpath`. Note that this removes internal ``..`` components, which may "
"change the meaning of the link if the path in :attr:`!TarInfo.linkname` "
"traverses symbolic links."
msgstr ""

msgid ""
":ref:`Refuse <tarfile-extraction-refuse>` to extract links (hard or soft) "
"that link to absolute paths, or ones that link outside the destination."
msgstr ""

msgid ""
"This raises :class:`~tarfile.AbsoluteLinkError` or :class:`~tarfile."
"LinkOutsideDestinationError`."
msgstr ""

msgid ""
"Note that such files are refused even on platforms that do not support "
"symbolic links."
msgstr ""

msgid ""
":ref:`Refuse <tarfile-extraction-refuse>` to extract device files (including "
"pipes). This raises :class:`~tarfile.SpecialFileError`."
msgstr ""

msgid "For regular files, including hard links:"
msgstr ""

msgid ""
"Set the owner read and write permissions (:const:`~stat.S_IRUSR` | :const:"
"`~stat.S_IWUSR`)."
msgstr ""

msgid ""
"Remove the group & other executable permission (:const:`~stat.S_IXGRP` | :"
"const:`~stat.S_IXOTH`) if the owner doesn’t have it (:const:`~stat.S_IXUSR`)."
msgstr ""

msgid ""
"For other files (directories), set ``mode`` to ``None``, so that extraction "
"methods skip applying permission bits."
msgstr ""

msgid ""
"Set user and group info (``uid``, ``gid``, ``uname``, ``gname``) to "
"``None``, so that extraction methods skip setting it."
msgstr ""

msgid ""
"Note that this filter does not block *all* dangerous archive features. See :"
"ref:`tarfile-further-verification`  for details."
msgstr ""

msgid "Link targets are now normalized."
msgstr ""

msgid "Filter errors"
msgstr ""

msgid ""
"When a filter refuses to extract a file, it will raise an appropriate "
"exception, a subclass of :class:`~tarfile.FilterError`. This will abort the "
"extraction if :attr:`TarFile.errorlevel` is 1 or more. With ``errorlevel=0`` "
"the error will be logged and the member will be skipped, but extraction will "
"continue."
msgstr ""

msgid "Hints for further verification"
msgstr ""

msgid ""
"Even with ``filter='data'``, *tarfile* is not suited for extracting "
"untrusted files without prior inspection. Among other issues, the pre-"
"defined filters do not prevent denial-of-service attacks. Users should do "
"additional checks."
msgstr ""

msgid "Here is an incomplete list of things to consider:"
msgstr ""

msgid ""
"Extract to a :func:`new temporary directory <tempfile.mkdtemp>` to prevent e."
"g. exploiting pre-existing links, and to make it easier to clean up after a "
"failed extraction."
msgstr ""

msgid "Disallow symbolic links if you do not need the functionality."
msgstr ""

msgid ""
"When working with untrusted data, use external (e.g. OS-level) limits on "
"disk, memory and CPU usage."
msgstr ""

msgid ""
"Check filenames against an allow-list of characters (to filter out control "
"characters, confusables, foreign path separators, and so on)."
msgstr ""

msgid ""
"Check that filenames have expected extensions (discouraging files that "
"execute when you “click on them”, or extension-less files like Windows "
"special device names)."
msgstr ""

msgid ""
"Limit the number of extracted files, total size of extracted data, filename "
"length (including symlink length), and size of individual files."
msgstr ""

msgid "Check for files that would be shadowed on case-insensitive filesystems."
msgstr ""

msgid "Also note that:"
msgstr ""

msgid ""
"Tar files may contain multiple versions of the same file. Later ones are "
"expected to overwrite any earlier ones. This feature is crucial to allow "
"updating tape archives, but can be abused maliciously."
msgstr ""

msgid ""
"*tarfile* does not protect against issues with “live” data, e.g. an attacker "
"tinkering with the destination (or source) directory while extraction (or "
"archiving) is in progress."
msgstr ""

msgid "Supporting older Python versions"
msgstr ""

msgid ""
"Extraction filters were added to Python 3.12, but may be backported to older "
"versions as security updates. To check whether the feature is available, use "
"e.g. ``hasattr(tarfile, 'data_filter')`` rather than checking the Python "
"version."
msgstr ""

msgid ""
"The following examples show how to support Python versions with and without "
"the feature. Note that setting ``extraction_filter`` will affect any "
"subsequent operations."
msgstr ""

msgid "Fully trusted archive::"
msgstr ""

msgid ""
"my_tarfile.extraction_filter = (lambda member, path: member)\n"
"my_tarfile.extractall()"
msgstr ""

msgid ""
"Use the ``'data'`` filter if available, but revert to Python 3.11 behavior "
"(``'fully_trusted'``) if this feature is not available::"
msgstr ""

msgid ""
"my_tarfile.extraction_filter = getattr(tarfile, 'data_filter',\n"
"                                       (lambda member, path: member))\n"
"my_tarfile.extractall()"
msgstr ""

msgid "Use the ``'data'`` filter; *fail* if it is not available::"
msgstr ""

msgid "my_tarfile.extractall(filter=tarfile.data_filter)"
msgstr ""

msgid "or::"
msgstr ""

msgid ""
"my_tarfile.extraction_filter = tarfile.data_filter\n"
"my_tarfile.extractall()"
msgstr ""

msgid "Use the ``'data'`` filter; *warn* if it is not available::"
msgstr ""

msgid ""
"if hasattr(tarfile, 'data_filter'):\n"
"    my_tarfile.extractall(filter='data')\n"
"else:\n"
"    # remove this when no longer needed\n"
"    warn_the_user('Extracting may be unsafe; consider updating Python')\n"
"    my_tarfile.extractall()"
msgstr ""

msgid "Stateful extraction filter example"
msgstr ""

msgid ""
"While *tarfile*'s extraction methods take a simple *filter* callable, custom "
"filters may be more complex objects with an internal state. It may be useful "
"to write these as context managers, to be used like this::"
msgstr ""

msgid ""
"with StatefulFilter() as filter_func:\n"
"    tar.extractall(path, filter=filter_func)"
msgstr ""

msgid "Such a filter can be written as, for example::"
msgstr ""

msgid ""
"class StatefulFilter:\n"
"    def __init__(self):\n"
"        self.file_count = 0\n"
"\n"
"    def __enter__(self):\n"
"        return self\n"
"\n"
"    def __call__(self, member, path):\n"
"        self.file_count += 1\n"
"        return member\n"
"\n"
"    def __exit__(self, *exc_info):\n"
"        print(f'{self.file_count} files extracted')"
msgstr ""

msgid "Command-Line Interface"
msgstr ""

msgid ""
"The :mod:`tarfile` module provides a simple command-line interface to "
"interact with tar archives."
msgstr ""

msgid ""
"If you want to create a new tar archive, specify its name after the :option:"
"`-c` option and then list the filename(s) that should be included:"
msgstr ""

msgid "$ python -m tarfile -c monty.tar  spam.txt eggs.txt"
msgstr ""

msgid "Passing a directory is also acceptable:"
msgstr ""

msgid "$ python -m tarfile -c monty.tar life-of-brian_1979/"
msgstr ""

msgid ""
"If you want to extract a tar archive into the current directory, use the :"
"option:`-e` option:"
msgstr ""

msgid "$ python -m tarfile -e monty.tar"
msgstr ""

msgid ""
"You can also extract a tar archive into a different directory by passing the "
"directory's name:"
msgstr ""

msgid "$ python -m tarfile -e monty.tar  other-dir/"
msgstr ""

msgid "For a list of the files in a tar archive, use the :option:`-l` option:"
msgstr ""

msgid "$ python -m tarfile -l monty.tar"
msgstr ""

msgid "Command-line options"
msgstr ""

msgid "List files in a tarfile."
msgstr ""

msgid "Create tarfile from source files."
msgstr ""

msgid ""
"Extract tarfile into the current directory if *output_dir* is not specified."
msgstr ""

msgid "Test whether the tarfile is valid or not."
msgstr ""

msgid "Verbose output."
msgstr ""

msgid ""
"Specifies the *filter* for ``--extract``. See :ref:`tarfile-extraction-"
"filter` for details. Only string names are accepted (that is, "
"``fully_trusted``, ``tar``, and ``data``)."
msgstr ""

msgid "Examples"
msgstr ""

msgid "Reading examples"
msgstr ""

msgid "How to extract an entire tar archive to the current working directory::"
msgstr ""

msgid ""
"import tarfile\n"
"tar = tarfile.open(\"sample.tar.gz\")\n"
"tar.extractall(filter='data')\n"
"tar.close()"
msgstr ""

msgid ""
"How to extract a subset of a tar archive with :meth:`TarFile.extractall` "
"using a generator function instead of a list::"
msgstr ""

msgid ""
"import os\n"
"import tarfile\n"
"\n"
"def py_files(members):\n"
"    for tarinfo in members:\n"
"        if os.path.splitext(tarinfo.name)[1] == \".py\":\n"
"            yield tarinfo\n"
"\n"
"tar = tarfile.open(\"sample.tar.gz\")\n"
"tar.extractall(members=py_files(tar))\n"
"tar.close()"
msgstr ""

msgid ""
"How to read a gzip compressed tar archive and display some member "
"information::"
msgstr ""

msgid ""
"import tarfile\n"
"tar = tarfile.open(\"sample.tar.gz\", \"r:gz\")\n"
"for tarinfo in tar:\n"
"    print(tarinfo.name, \"is\", tarinfo.size, \"bytes in size and is \", "
"end=\"\")\n"
"    if tarinfo.isreg():\n"
"        print(\"a regular file.\")\n"
"    elif tarinfo.isdir():\n"
"        print(\"a directory.\")\n"
"    else:\n"
"        print(\"something else.\")\n"
"tar.close()"
msgstr ""

msgid "Writing examples"
msgstr ""

msgid "How to create an uncompressed tar archive from a list of filenames::"
msgstr ""

msgid ""
"import tarfile\n"
"tar = tarfile.open(\"sample.tar\", \"w\")\n"
"for name in [\"foo\", \"bar\", \"quux\"]:\n"
"    tar.add(name)\n"
"tar.close()"
msgstr ""

msgid "The same example using the :keyword:`with` statement::"
msgstr ""

msgid ""
"import tarfile\n"
"with tarfile.open(\"sample.tar\", \"w\") as tar:\n"
"    for name in [\"foo\", \"bar\", \"quux\"]:\n"
"        tar.add(name)"
msgstr ""

msgid ""
"How to create and write an archive to stdout using :data:`sys.stdout.buffer "
"<sys.stdout>` in the *fileobj* parameter in :meth:`TarFile.add`::"
msgstr ""

msgid ""
"import sys\n"
"import tarfile\n"
"with tarfile.open(\"sample.tar.gz\", \"w|gz\", fileobj=sys.stdout.buffer) as "
"tar:\n"
"    for name in [\"foo\", \"bar\", \"quux\"]:\n"
"        tar.add(name)"
msgstr ""

msgid ""
"How to create an archive and reset the user information using the *filter* "
"parameter in :meth:`TarFile.add`::"
msgstr ""

msgid ""
"import tarfile\n"
"def reset(tarinfo):\n"
"    tarinfo.uid = tarinfo.gid = 0\n"
"    tarinfo.uname = tarinfo.gname = \"root\"\n"
"    return tarinfo\n"
"tar = tarfile.open(\"sample.tar.gz\", \"w:gz\")\n"
"tar.add(\"foo\", filter=reset)\n"
"tar.close()"
msgstr ""

msgid "Supported tar formats"
msgstr ""

msgid ""
"There are three tar formats that can be created with the :mod:`tarfile` "
"module:"
msgstr ""

msgid ""
"The POSIX.1-1988 ustar format (:const:`USTAR_FORMAT`). It supports filenames "
"up to a length of at best 256 characters and linknames up to 100 characters. "
"The maximum file size is 8 GiB. This is an old and limited but widely "
"supported format."
msgstr ""

msgid ""
"The GNU tar format (:const:`GNU_FORMAT`). It supports long filenames and "
"linknames, files bigger than 8 GiB and sparse files. It is the de facto "
"standard on GNU/Linux systems. :mod:`tarfile` fully supports the GNU tar "
"extensions for long names, sparse file support is read-only."
msgstr ""

msgid ""
"The POSIX.1-2001 pax format (:const:`PAX_FORMAT`). It is the most flexible "
"format with virtually no limits. It supports long filenames and linknames, "
"large files and stores pathnames in a portable way. Modern tar "
"implementations, including GNU tar, bsdtar/libarchive and star, fully "
"support extended *pax* features; some old or unmaintained libraries may not, "
"but should treat *pax* archives as if they were in the universally supported "
"*ustar* format. It is the current default format for new archives."
msgstr ""

msgid ""
"It extends the existing *ustar* format with extra headers for information "
"that cannot be stored otherwise. There are two flavours of pax headers: "
"Extended headers only affect the subsequent file header, global headers are "
"valid for the complete archive and affect all following files. All the data "
"in a pax header is encoded in *UTF-8* for portability reasons."
msgstr ""

msgid ""
"There are some more variants of the tar format which can be read, but not "
"created:"
msgstr ""

msgid ""
"The ancient V7 format. This is the first tar format from Unix Seventh "
"Edition, storing only regular files and directories. Names must not be "
"longer than 100 characters, there is no user/group name information. Some "
"archives have miscalculated header checksums in case of fields with non-"
"ASCII characters."
msgstr ""

msgid ""
"The SunOS tar extended format. This format is a variant of the POSIX.1-2001 "
"pax format, but is not compatible."
msgstr ""

msgid "Unicode issues"
msgstr ""

msgid ""
"The tar format was originally conceived to make backups on tape drives with "
"the main focus on preserving file system information. Nowadays tar archives "
"are commonly used for file distribution and exchanging archives over "
"networks. One problem of the original format (which is the basis of all "
"other formats) is that there is no concept of supporting different character "
"encodings. For example, an ordinary tar archive created on a *UTF-8* system "
"cannot be read correctly on a *Latin-1* system if it contains non-*ASCII* "
"characters. Textual metadata (like filenames, linknames, user/group names) "
"will appear damaged. Unfortunately, there is no way to autodetect the "
"encoding of an archive. The pax format was designed to solve this problem. "
"It stores non-ASCII metadata using the universal character encoding *UTF-8*."
msgstr ""

msgid ""
"The details of character conversion in :mod:`tarfile` are controlled by the "
"*encoding* and *errors* keyword arguments of the :class:`TarFile` class."
msgstr ""

msgid ""
"*encoding* defines the character encoding to use for the metadata in the "
"archive. The default value is :func:`sys.getfilesystemencoding` or "
"``'ascii'`` as a fallback. Depending on whether the archive is read or "
"written, the metadata must be either decoded or encoded. If *encoding* is "
"not set appropriately, this conversion may fail."
msgstr ""

msgid ""
"The *errors* argument defines how characters are treated that cannot be "
"converted. Possible values are listed in section :ref:`error-handlers`. The "
"default scheme is ``'surrogateescape'`` which Python also uses for its file "
"system calls, see :ref:`os-filenames`."
msgstr ""

msgid ""
"For :const:`PAX_FORMAT` archives (the default), *encoding* is generally not "
"needed because all the metadata is stored using *UTF-8*. *encoding* is only "
"used in the rare cases when binary pax headers are decoded or when strings "
"with surrogate characters are stored."
msgstr ""
