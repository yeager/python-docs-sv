# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!shelve` --- Python object persistence"
msgstr ":mod:`!shelve` --- Python-objektets beständighet"

msgid "**Source code:** :source:`Lib/shelve.py`"
msgstr "**Källkod:** :source:`Lib/shelve.py`"

msgid ""
"A \"shelf\" is a persistent, dictionary-like object.  The difference with "
"\"dbm\" databases is that the values (not the keys!) in a shelf can be "
"essentially arbitrary Python objects --- anything that the :mod:`pickle` "
"module can handle. This includes most class instances, recursive data types, "
"and objects containing lots of shared  sub-objects.  The keys are ordinary "
"strings."
msgstr ""
"En \"shelf\" är ett beständigt, ordboksliknande objekt.  Skillnaden mot "
"\"dbm\"-databaser är att värdena (inte nycklarna!) i en hylla kan vara i "
"princip godtyckliga Python-objekt --- allt som :mod:`pickle`-modulen kan "
"hantera. Detta inkluderar de flesta klassinstanser, rekursiva datatyper och "
"objekt som innehåller massor av delade underobjekt.  Nycklarna är vanliga "
"strängar."

msgid ""
"Open a persistent dictionary.  The filename specified is the base filename "
"for the underlying database.  As a side-effect, an extension may be added to "
"the filename and more than one file may be created.  By default, the "
"underlying database file is opened for reading and writing.  The optional "
"*flag* parameter has the same interpretation as the *flag* parameter of :"
"func:`dbm.open`."
msgstr ""
"Öppnar en persistent ordbok.  Det angivna filnamnet är basfilnamnet för den "
"underliggande databasen.  Som en bieffekt kan ett tillägg läggas till "
"filnamnet och mer än en fil kan skapas.  Som standard öppnas den "
"underliggande databasfilen för läsning och skrivning.  Den valfria "
"parametern *flag* har samma tolkning som parametern *flag* i :func:`dbm."
"open`."

msgid ""
"By default, pickles created with :const:`pickle.DEFAULT_PROTOCOL` are used "
"to serialize values.  The version of the pickle protocol can be specified "
"with the *protocol* parameter."
msgstr ""
"Som standard används pickles som skapats med :const:`pickle."
"DEFAULT_PROTOCOL` för att serialisera värden.  Versionen av pickle-"
"protokollet kan anges med parametern *protocol*."

msgid ""
"Because of Python semantics, a shelf cannot know when a mutable persistent-"
"dictionary entry is modified.  By default modified objects are written "
"*only* when assigned to the shelf (see :ref:`shelve-example`).  If the "
"optional *writeback* parameter is set to ``True``, all entries accessed are "
"also cached in memory, and written back on :meth:`~Shelf.sync` and :meth:"
"`~Shelf.close`; this can make it handier to mutate mutable entries in the "
"persistent dictionary, but, if many entries are accessed, it can consume "
"vast amounts of memory for the cache, and it can make the close operation "
"very slow since all accessed entries are written back (there is no way to "
"determine which accessed entries are mutable, nor which ones were actually "
"mutated)."
msgstr ""
"På grund av Pythons semantik kan en hylla inte veta när en mutabel "
"persistent-dictionary-post ändras.  Som standard skrivs modifierade objekt "
"*endast* när de tilldelas hyllan (se :ref:`shelve-example`).  Om den valfria "
"parametern *writeback* är inställd på ``True``, kommer alla poster som nås "
"också att cachas i minnet och skrivas tillbaka vid :meth:`~Shelf.sync` och :"
"meth:`~Shelf.close`; detta kan göra det enklare att mutera muterbara poster "
"i den beständiga ordboken, men om många poster öppnas kan det förbruka stora "
"mängder minne för cacheminnet, och det kan göra stängningsoperationen mycket "
"långsam eftersom alla öppnade poster skrivs tillbaka (det finns inget sätt "
"att avgöra vilka öppnade poster som är muterbara, eller vilka som faktiskt "
"muterades)."

msgid ""
":const:`pickle.DEFAULT_PROTOCOL` is now used as the default pickle protocol."
msgstr ""
":const:`pickle.DEFAULT_PROTOCOL` används nu som standardprotokoll för pickle."

msgid "Accepts :term:`path-like object` for filename."
msgstr "Accepterar :term:`path-like object` för filnamn."

msgid ""
"Do not rely on the shelf being closed automatically; always call :meth:"
"`~Shelf.close` explicitly when you don't need it any more, or use :func:"
"`shelve.open` as a context manager::"
msgstr ""
"Lita inte på att hyllan stängs automatiskt; anropa alltid :meth:`~Shelf."
"close` explicit när du inte behöver det längre, eller använd :func:`shelve."
"open` som en kontexthanterare:"

msgid ""
"with shelve.open('spam') as db:\n"
"    db['eggs'] = 'eggs'"
msgstr ""
"with shelve.open('spam') as db:\n"
"    db['eggs'] = 'eggs'"

msgid ""
"Because the :mod:`shelve` module is backed by :mod:`pickle`, it is insecure "
"to load a shelf from an untrusted source.  Like with pickle, loading a shelf "
"can execute arbitrary code."
msgstr ""
"Eftersom modulen :mod:`shelve` backas upp av :mod:`pickle` är det osäkert "
"att ladda en shelf från en icke betrodd källa.  Precis som med pickle kan "
"man köra godtycklig kod om man laddar en shelf."

msgid ""
"Shelf objects support most of methods and operations supported by "
"dictionaries (except copying, constructors and operators ``|`` and ``|=``).  "
"This eases the transition from dictionary based scripts to those requiring "
"persistent storage."
msgstr ""
"Shelf-objekt stöder de flesta metoder och operationer som stöds av ordböcker "
"(utom kopiering, konstruktörer och operatorerna ``|`` och ``|=``).  Detta "
"underlättar övergången från ordboksbaserade skript till skript som kräver "
"beständig lagring."

msgid "Two additional methods are supported:"
msgstr "Ytterligare två metoder stöds:"

msgid ""
"Write back all entries in the cache if the shelf was opened with *writeback* "
"set to :const:`True`.  Also empty the cache and synchronize the persistent "
"dictionary on disk, if feasible.  This is called automatically when the "
"shelf is closed with :meth:`close`."
msgstr ""
"Skriv tillbaka alla poster i cacheminnet om hyllan öppnades med *writeback* "
"inställd på :const:`True`.  Töm också cacheminnet och synkronisera den "
"beständiga ordboken på disk, om det är möjligt.  Detta anropas automatiskt "
"när hyllan stängs med :meth:`close`."

msgid ""
"Synchronize and close the persistent *dict* object.  Operations on a closed "
"shelf will fail with a :exc:`ValueError`."
msgstr ""
"Synkroniserar och stänger det beständiga *dict*-objektet.  Åtgärder på en "
"stängd hylla kommer att misslyckas med ett :exc:`ValueError`."

msgid ""
"`Persistent dictionary recipe <https://code.activestate.com/recipes/576642-"
"persistent-dict-with-multiple-standard-file-format/>`_ with widely supported "
"storage formats and having the speed of native dictionaries."
msgstr ""
"`Persistent ordboksrecept <https://code.activestate.com/recipes/576642-"
"persistent-dict-with-multiple-standard-file-format/>`_ med lagringsformat "
"som stöds i stor utsträckning och med samma hastighet som inbyggda ordböcker."

msgid "Restrictions"
msgstr "Begränsningar"

msgid ""
"The choice of which database package will be used (such as :mod:`dbm.ndbm` "
"or :mod:`dbm.gnu`) depends on which interface is available.  Therefore it is "
"not safe to open the database directly using :mod:`dbm`.  The database is "
"also (unfortunately) subject to the limitations of :mod:`dbm`, if it is used "
"--- this means that (the pickled representation of) the objects stored in "
"the database should be fairly small, and in rare cases key collisions may "
"cause the database to refuse updates."
msgstr ""
"Valet av vilket databaspaket som ska användas (t.ex. :mod:`dbm.ndbm` eller :"
"mod:`dbm.gnu`) beror på vilket gränssnitt som är tillgängligt.  Därför är "
"det inte säkert att öppna databasen direkt med :mod:`dbm`.  Databasen är "
"också (tyvärr) föremål för begränsningarna i :mod:`dbm`, om den används --- "
"detta innebär att (den inlagda representationen av) de objekt som lagras i "
"databasen bör vara ganska små, och i sällsynta fall kan nyckelkollisioner "
"leda till att databasen vägrar uppdateringar."

msgid ""
"The :mod:`shelve` module does not support *concurrent* read/write access to "
"shelved objects.  (Multiple simultaneous read accesses are safe.)  When a "
"program has a shelf open for writing, no other program should have it open "
"for reading or writing.  Unix file locking can be used to solve this, but "
"this differs across Unix versions and requires knowledge about the database "
"implementation used."
msgstr ""
"Modulen :mod:`shelve` stöder inte *samtidig* läs- och skrivåtkomst till "
"objekt i hyllor.  (Flera samtidiga läsåtkomster är säkra.) När ett program "
"har en hylla öppen för skrivning, bör inget annat program ha den öppen för "
"läsning eller skrivning.  Unix fillåsning kan användas för att lösa detta, "
"men det skiljer sig mellan olika Unix-versioner och kräver kunskap om den "
"databasimplementering som används."

msgid ""
"On macOS :mod:`dbm.ndbm` can silently corrupt the database file on updates, "
"which can cause hard crashes when trying to read from the database."
msgstr ""
"På macOS kan :mod:`dbm.ndbm` i tysthet korrumpera databasfilen vid "
"uppdateringar, vilket kan orsaka hårda krascher när man försöker läsa från "
"databasen."

msgid ""
"A subclass of :class:`collections.abc.MutableMapping` which stores pickled "
"values in the *dict* object."
msgstr ""
"En underklass till :class:`collections.abc.MutableMapping` som lagrar "
"inlagda värden i *dict*-objektet."

msgid ""
"By default, pickles created with :const:`pickle.DEFAULT_PROTOCOL` are used "
"to serialize values.  The version of the pickle protocol can be specified "
"with the *protocol* parameter.  See the :mod:`pickle` documentation for a "
"discussion of the pickle protocols."
msgstr ""
"Som standard används pickles som skapats med :const:`pickle."
"DEFAULT_PROTOCOL` för att serialisera värden.  Versionen av pickle-"
"protokollet kan specificeras med parametern *protocol*.  Se :mod:`pickle`-"
"dokumentationen för en diskussion om pickle-protokollen."

msgid ""
"If the *writeback* parameter is ``True``, the object will hold a cache of "
"all entries accessed and write them back to the *dict* at sync and close "
"times. This allows natural operations on mutable entries, but can consume "
"much more memory and make sync and close take a long time."
msgstr ""
"Om parametern *writeback* är ``True``, kommer objektet att hålla en cache av "
"alla poster som nås och skriva tillbaka dem till *dict* vid synkroniserings- "
"och stängningstider. Detta möjliggör naturliga operationer på föränderliga "
"poster, men kan förbruka mycket mer minne och göra att synkronisering och "
"stängning tar lång tid."

msgid ""
"The *keyencoding* parameter is the encoding used to encode keys before they "
"are used with the underlying dict."
msgstr ""
"Parametern *keyencoding* är den kodning som används för att koda nycklar "
"innan de används med den underliggande dict."

msgid ""
"A :class:`Shelf` object can also be used as a context manager, in which case "
"it will be automatically closed when the :keyword:`with` block ends."
msgstr ""
"Ett :class:`Shelf`-objekt kan också användas som en kontexthanterare, i "
"vilket fall det automatiskt kommer att stängas när :keyword:`with`-blocket "
"avslutas."

msgid ""
"Added the *keyencoding* parameter; previously, keys were always encoded in "
"UTF-8."
msgstr ""
"Parametern *keyencoding* har lagts till; tidigare var nycklar alltid kodade "
"i UTF-8."

msgid "Added context manager support."
msgstr "Stöd för kontexthanterare har lagts till."

msgid ""
"A subclass of :class:`Shelf` which exposes :meth:`!first`, :meth:`!next`, :"
"meth:`!previous`, :meth:`!last` and :meth:`!set_location` methods. These are "
"available in the third-party :mod:`!bsddb` module from `pybsddb <https://www."
"jcea.es/programacion/pybsddb.htm>`_ but not in other database modules.  The "
"*dict* object passed to the constructor must support those methods.  This is "
"generally accomplished by calling one of :func:`!bsddb.hashopen`, :func:`!"
"bsddb.btopen` or :func:`!bsddb.rnopen`.  The optional *protocol*, "
"*writeback*, and *keyencoding* parameters have the same interpretation as "
"for the :class:`Shelf` class."
msgstr ""
"En subklass av :class:`Shelf` som exponerar metoderna :meth:`!first`, :meth:"
"`!next`, :meth:`!previous`, :meth:`!last` och :meth:`!set_location`. Dessa "
"är tillgängliga i tredjepartsmodulen :mod:`!bsddb` från `pybsddb <https://"
"www.jcea.es/programacion/pybsddb.htm>`_ men inte i andra databasmoduler.  "
"Objektet *dict* som skickas till konstruktören måste stödja dessa metoder.  "
"Detta görs i allmänhet genom att anropa en av :func:`!bsddb.hashopen`, :func:"
"`!bsddb.btopen` eller :func:`!bsddb.rnopen`.  De valfria parametrarna "
"*protocol*, *writeback* och *keyencoding* har samma tolkning som för "
"klassen :class:`Shelf`."

msgid ""
"A subclass of :class:`Shelf` which accepts a *filename* instead of a dict-"
"like object.  The underlying file will be opened using :func:`dbm.open`.  By "
"default, the file will be created and opened for both read and write.  The "
"optional *flag* parameter has the same interpretation as for the :func:`."
"open` function.  The optional *protocol* and *writeback* parameters have the "
"same interpretation as for the :class:`Shelf` class."
msgstr ""
"En subklass av :class:`Shelf` som accepterar ett *filnamn* istället för ett "
"diktatliknande objekt.  Den underliggande filen öppnas med hjälp av :func:"
"`dbm.open`.  Som standard kommer filen att skapas och öppnas för både "
"läsning och skrivning.  Den valfria parametern *flag* har samma tolkning som "
"för funktionen :func:`.open`.  De valfria parametrarna *protocol* och "
"*writeback* har samma tolkning som för klassen :class:`Shelf`."

msgid "Example"
msgstr "Exempel"

msgid ""
"To summarize the interface (``key`` is a string, ``data`` is an arbitrary "
"object)::"
msgstr ""
"För att sammanfatta gränssnittet (``key`` är en sträng, ``data`` är ett "
"godtyckligt objekt)::"

msgid ""
"import shelve\n"
"\n"
"d = shelve.open(filename)  # open -- file may get suffix added by low-level\n"
"                           # library\n"
"\n"
"d[key] = data              # store data at key (overwrites old data if\n"
"                           # using an existing key)\n"
"data = d[key]              # retrieve a COPY of data at key (raise KeyError\n"
"                           # if no such key)\n"
"del d[key]                 # delete data stored at key (raises KeyError\n"
"                           # if no such key)\n"
"\n"
"flag = key in d            # true if the key exists\n"
"klist = list(d.keys())     # a list of all existing keys (slow!)\n"
"\n"
"# as d was opened WITHOUT writeback=True, beware:\n"
"d['xx'] = [0, 1, 2]        # this works as expected, but...\n"
"d['xx'].append(3)          # *this doesn't!* -- d['xx'] is STILL [0, 1, 2]!\n"
"\n"
"# having opened d without writeback=True, you need to code carefully:\n"
"temp = d['xx']             # extracts the copy\n"
"temp.append(5)             # mutates the copy\n"
"d['xx'] = temp             # stores the copy right back, to persist it\n"
"\n"
"# or, d=shelve.open(filename,writeback=True) would let you just code\n"
"# d['xx'].append(5) and have it work as expected, BUT it would also\n"
"# consume more memory and make the d.close() operation slower.\n"
"\n"
"d.close()                  # close it"
msgstr ""
"import shelve\n"
"\n"
"d = shelve.open(filename)  # open -- file may get suffix added by low-level\n"
"                           # library\n"
"\n"
"d[key] = data              # store data at key (overwrites old data if\n"
"                           # using an existing key)\n"
"data = d[key]              # retrieve a COPY of data at key (raise KeyError\n"
"                           # if no such key)\n"
"del d[key]                 # delete data stored at key (raises KeyError\n"
"                           # if no such key)\n"
"\n"
"flag = key in d            # true if the key exists\n"
"klist = list(d.keys())     # a list of all existing keys (slow!)\n"
"\n"
"# as d was opened WITHOUT writeback=True, beware:\n"
"d['xx'] = [0, 1, 2]        # this works as expected, but...\n"
"d['xx'].append(3)          # *this doesn't!* -- d['xx'] is STILL [0, 1, 2]!\n"
"\n"
"# having opened d without writeback=True, you need to code carefully:\n"
"temp = d['xx']             # extracts the copy\n"
"temp.append(5)             # mutates the copy\n"
"d['xx'] = temp             # stores the copy right back, to persist it\n"
"\n"
"# or, d=shelve.open(filename,writeback=True) would let you just code\n"
"# d['xx'].append(5) and have it work as expected, BUT it would also\n"
"# consume more memory and make the d.close() operation slower.\n"
"\n"
"d.close()                  # close it"

msgid "Module :mod:`dbm`"
msgstr "Modul :mod:`dbm`"

msgid "Generic interface to ``dbm``-style databases."
msgstr "Generiskt gränssnitt för databaser av typen ``dbm``."

msgid "Module :mod:`pickle`"
msgstr "Modul :mod:`pickle`"

msgid "Object serialization used by :mod:`shelve`."
msgstr "Objektserialisering som används av :mod:`shelve`."

msgid "module"
msgstr "module"

msgid "pickle"
msgstr "pickle"

msgid "dbm.ndbm"
msgstr "dbm.ndbm"

msgid "dbm.gnu"
msgstr "dbm.gnu"
