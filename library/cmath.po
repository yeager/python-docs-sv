# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-17 14:16+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!cmath` --- Mathematical functions for complex numbers"
msgstr ""

msgid ""
"This module provides access to mathematical functions for complex numbers.  "
"The functions in this module accept integers, floating-point numbers or "
"complex numbers as arguments. They will also accept any Python object that "
"has either a :meth:`~object.__complex__` or a :meth:`~object.__float__` "
"method: these methods are used to convert the object to a complex or "
"floating-point number, respectively, and the function is then applied to the "
"result of the conversion."
msgstr ""

msgid ""
"For functions involving branch cuts, we have the problem of deciding how to "
"define those functions on the cut itself. Following Kahan's \"Branch cuts "
"for complex elementary functions\" paper, as well as Annex G of C99 and "
"later C standards, we use the sign of zero to distinguish one side of the "
"branch cut from the other: for a branch cut along (a portion of) the real "
"axis we look at the sign of the imaginary part, while for a branch cut along "
"the imaginary axis we look at the sign of the real part."
msgstr ""

msgid ""
"For example, the :func:`cmath.sqrt` function has a branch cut along the "
"negative real axis. An argument of ``-2-0j`` is treated as though it lies "
"*below* the branch cut, and so gives a result on the negative imaginary "
"axis::"
msgstr ""

msgid ""
">>> cmath.sqrt(-2-0j)\n"
"-1.4142135623730951j"
msgstr ""

msgid ""
"But an argument of ``-2+0j`` is treated as though it lies above the branch "
"cut::"
msgstr ""

msgid ""
">>> cmath.sqrt(-2+0j)\n"
"1.4142135623730951j"
msgstr ""

msgid "**Conversions to and from polar coordinates**"
msgstr ""

msgid ":func:`phase(z) <phase>`"
msgstr ""

msgid "Return the phase of *z*"
msgstr ""

msgid ":func:`polar(z) <polar>`"
msgstr ""

msgid "Return the representation of *z* in polar coordinates"
msgstr ""

msgid ":func:`rect(r, phi) <rect>`"
msgstr ""

msgid "Return the complex number *z* with polar coordinates *r* and *phi*"
msgstr ""

msgid "**Power and logarithmic functions**"
msgstr ""

msgid ":func:`exp(z) <exp>`"
msgstr ""

msgid "Return *e* raised to the power *z*"
msgstr ""

msgid ":func:`log(z[, base]) <log>`"
msgstr ""

msgid "Return the logarithm of *z* to the given *base* (*e* by default)"
msgstr ""

msgid ":func:`log10(z) <log10>`"
msgstr ""

msgid "Return the base-10 logarithm of *z*"
msgstr ""

msgid ":func:`sqrt(z) <sqrt>`"
msgstr ""

msgid "Return the square root of *z*"
msgstr ""

msgid "**Trigonometric functions**"
msgstr ""

msgid ":func:`acos(z) <acos>`"
msgstr ""

msgid "Return the arc cosine of *z*"
msgstr ""

msgid ":func:`asin(z) <asin>`"
msgstr ""

msgid "Return the arc sine of *z*"
msgstr ""

msgid ":func:`atan(z) <atan>`"
msgstr ""

msgid "Return the arc tangent of *z*"
msgstr ""

msgid ":func:`cos(z) <cos>`"
msgstr ""

msgid "Return the cosine of *z*"
msgstr ""

msgid ":func:`sin(z) <sin>`"
msgstr ""

msgid "Return the sine of *z*"
msgstr ""

msgid ":func:`tan(z) <tan>`"
msgstr ""

msgid "Return the tangent of *z*"
msgstr ""

msgid "**Hyperbolic functions**"
msgstr ""

msgid ":func:`acosh(z) <acosh>`"
msgstr ""

msgid "Return the inverse hyperbolic cosine of *z*"
msgstr ""

msgid ":func:`asinh(z) <asinh>`"
msgstr ""

msgid "Return the inverse hyperbolic sine of *z*"
msgstr ""

msgid ":func:`atanh(z) <atanh>`"
msgstr ""

msgid "Return the inverse hyperbolic tangent of *z*"
msgstr ""

msgid ":func:`cosh(z) <cosh>`"
msgstr ""

msgid "Return the hyperbolic cosine of *z*"
msgstr ""

msgid ":func:`sinh(z) <sinh>`"
msgstr ""

msgid "Return the hyperbolic sine of *z*"
msgstr ""

msgid ":func:`tanh(z) <tanh>`"
msgstr ""

msgid "Return the hyperbolic tangent of *z*"
msgstr ""

msgid "**Classification functions**"
msgstr ""

msgid ":func:`isfinite(z) <isfinite>`"
msgstr ""

msgid "Check if all components of *z* are finite"
msgstr ""

msgid ":func:`isinf(z) <isinf>`"
msgstr ""

msgid "Check if any component of *z* is infinite"
msgstr ""

msgid ":func:`isnan(z) <isnan>`"
msgstr ""

msgid "Check if any component of *z* is a NaN"
msgstr ""

msgid ":func:`isclose(a, b, *, rel_tol, abs_tol) <isclose>`"
msgstr ""

msgid "Check if the values *a* and *b* are close to each other"
msgstr ""

msgid "**Constants**"
msgstr ""

msgid ":data:`pi`"
msgstr ""

msgid "*π* = 3.141592..."
msgstr ""

msgid ":data:`e`"
msgstr ""

msgid "*e* = 2.718281..."
msgstr ""

msgid ":data:`tau`"
msgstr ""

msgid "*τ* = 2\\ *π* = 6.283185..."
msgstr ""

msgid ":data:`inf`"
msgstr ""

msgid "Positive infinity"
msgstr ""

msgid ":data:`infj`"
msgstr ""

msgid "Pure imaginary infinity"
msgstr ""

msgid ":data:`nan`"
msgstr ""

msgid "\"Not a number\" (NaN)"
msgstr ""

msgid ":data:`nanj`"
msgstr ""

msgid "Pure imaginary NaN"
msgstr ""

msgid "Conversions to and from polar coordinates"
msgstr ""

msgid ""
"A Python complex number ``z`` is stored internally using *rectangular* or "
"*Cartesian* coordinates.  It is completely determined by its *real part* ``z."
"real`` and its *imaginary part* ``z.imag``."
msgstr ""

msgid ""
"*Polar coordinates* give an alternative way to represent a complex number.  "
"In polar coordinates, a complex number *z* is defined by the modulus *r* and "
"the phase angle *phi*. The modulus *r* is the distance from *z* to the "
"origin, while the phase *phi* is the counterclockwise angle, measured in "
"radians, from the positive x-axis to the line segment that joins the origin "
"to *z*."
msgstr ""

msgid ""
"The following functions can be used to convert from the native rectangular "
"coordinates to polar coordinates and back."
msgstr ""

msgid ""
"Return the phase of *z* (also known as the *argument* of *z*), as a float. "
"``phase(z)`` is equivalent to ``math.atan2(z.imag, z.real)``.  The result "
"lies in the range [-\\ *π*, *π*], and the branch cut for this operation lies "
"along the negative real axis.  The sign of the result is the same as the "
"sign of ``z.imag``, even when ``z.imag`` is zero::"
msgstr ""

msgid ""
">>> phase(-1+0j)\n"
"3.141592653589793\n"
">>> phase(-1-0j)\n"
"-3.141592653589793"
msgstr ""

msgid ""
"The modulus (absolute value) of a complex number *z* can be computed using "
"the built-in :func:`abs` function.  There is no separate :mod:`cmath` module "
"function for this operation."
msgstr ""

msgid ""
"Return the representation of *z* in polar coordinates.  Returns a pair ``(r, "
"phi)`` where *r* is the modulus of *z* and *phi* is the phase of *z*.  "
"``polar(z)`` is equivalent to ``(abs(z), phase(z))``."
msgstr ""

msgid ""
"Return the complex number *z* with polar coordinates *r* and *phi*. "
"Equivalent to ``complex(r * math.cos(phi), r * math.sin(phi))``."
msgstr ""

msgid "Power and logarithmic functions"
msgstr ""

msgid ""
"Return *e* raised to the power *z*, where *e* is the base of natural "
"logarithms."
msgstr ""

msgid ""
"Return the logarithm of *z* to the given *base*. If the *base* is not "
"specified, returns the natural logarithm of *z*. There is one branch cut, "
"from 0 along the negative real axis to -∞."
msgstr ""

msgid ""
"Return the base-10 logarithm of *z*. This has the same branch cut as :func:"
"`log`."
msgstr ""

msgid ""
"Return the square root of *z*. This has the same branch cut as :func:`log`."
msgstr ""

msgid "Trigonometric functions"
msgstr ""

msgid ""
"Return the arc cosine of *z*. There are two branch cuts: One extends right "
"from 1 along the real axis to ∞. The other extends left from -1 along the "
"real axis to -∞."
msgstr ""

msgid ""
"Return the arc sine of *z*. This has the same branch cuts as :func:`acos`."
msgstr ""

msgid ""
"Return the arc tangent of *z*. There are two branch cuts: One extends from "
"``1j`` along the imaginary axis to ``∞j``. The other extends from ``-1j`` "
"along the imaginary axis to ``-∞j``."
msgstr ""

msgid "Return the cosine of *z*."
msgstr ""

msgid "Return the sine of *z*."
msgstr ""

msgid "Return the tangent of *z*."
msgstr ""

msgid "Hyperbolic functions"
msgstr ""

msgid ""
"Return the inverse hyperbolic cosine of *z*. There is one branch cut, "
"extending left from 1 along the real axis to -∞."
msgstr ""

msgid ""
"Return the inverse hyperbolic sine of *z*. There are two branch cuts: One "
"extends from ``1j`` along the imaginary axis to ``∞j``.  The other extends "
"from ``-1j`` along the imaginary axis to ``-∞j``."
msgstr ""

msgid ""
"Return the inverse hyperbolic tangent of *z*. There are two branch cuts: One "
"extends from ``1`` along the real axis to ``∞``. The other extends from "
"``-1`` along the real axis to ``-∞``."
msgstr ""

msgid "Return the hyperbolic cosine of *z*."
msgstr ""

msgid "Return the hyperbolic sine of *z*."
msgstr ""

msgid "Return the hyperbolic tangent of *z*."
msgstr ""

msgid "Classification functions"
msgstr ""

msgid ""
"Return ``True`` if both the real and imaginary parts of *z* are finite, and "
"``False`` otherwise."
msgstr ""

msgid ""
"Return ``True`` if either the real or the imaginary part of *z* is an "
"infinity, and ``False`` otherwise."
msgstr ""

msgid ""
"Return ``True`` if either the real or the imaginary part of *z* is a NaN, "
"and ``False`` otherwise."
msgstr ""

msgid ""
"Return ``True`` if the values *a* and *b* are close to each other and "
"``False`` otherwise."
msgstr ""

msgid ""
"Whether or not two values are considered close is determined according to "
"given absolute and relative tolerances.  If no errors occur, the result will "
"be: ``abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)``."
msgstr ""

msgid ""
"*rel_tol* is the relative tolerance -- it is the maximum allowed difference "
"between *a* and *b*, relative to the larger absolute value of *a* or *b*. "
"For example, to set a tolerance of 5%, pass ``rel_tol=0.05``.  The default "
"tolerance is ``1e-09``, which assures that the two values are the same "
"within about 9 decimal digits.  *rel_tol* must be nonnegative and less than "
"``1.0``."
msgstr ""

msgid ""
"*abs_tol* is the absolute tolerance; it defaults to ``0.0`` and it must be "
"nonnegative.  When comparing ``x`` to ``0.0``, ``isclose(x, 0)`` is computed "
"as ``abs(x) <= rel_tol  * abs(x)``, which is ``False`` for any ``x`` and "
"rel_tol less than ``1.0``.  So add an appropriate positive abs_tol argument "
"to the call."
msgstr ""

msgid ""
"The IEEE 754 special values of ``NaN``, ``inf``, and ``-inf`` will be "
"handled according to IEEE rules.  Specifically, ``NaN`` is not considered "
"close to any other value, including ``NaN``.  ``inf`` and ``-inf`` are only "
"considered close to themselves."
msgstr ""

msgid ":pep:`485` -- A function for testing approximate equality"
msgstr ""

msgid "Constants"
msgstr ""

msgid "The mathematical constant *π*, as a float."
msgstr ""

msgid "The mathematical constant *e*, as a float."
msgstr ""

msgid "The mathematical constant *τ*, as a float."
msgstr ""

msgid "Floating-point positive infinity. Equivalent to ``float('inf')``."
msgstr ""

msgid ""
"Complex number with zero real part and positive infinity imaginary part. "
"Equivalent to ``complex(0.0, float('inf'))``."
msgstr ""

msgid ""
"A floating-point \"not a number\" (NaN) value.  Equivalent to "
"``float('nan')``."
msgstr ""

msgid ""
"Complex number with zero real part and NaN imaginary part. Equivalent to "
"``complex(0.0, float('nan'))``."
msgstr ""

msgid ""
"Note that the selection of functions is similar, but not identical, to that "
"in module :mod:`math`.  The reason for having two modules is that some users "
"aren't interested in complex numbers, and perhaps don't even know what they "
"are.  They would rather have ``math.sqrt(-1)`` raise an exception than "
"return a complex number. Also note that the functions defined in :mod:"
"`cmath` always return a complex number, even if the answer can be expressed "
"as a real number (in which case the complex number has an imaginary part of "
"zero)."
msgstr ""

msgid ""
"A note on branch cuts: They are curves along which the given function fails "
"to be continuous.  They are a necessary feature of many complex functions.  "
"It is assumed that if you need to compute with complex functions, you will "
"understand about branch cuts.  Consult almost any (not too elementary) book "
"on complex variables for enlightenment.  For information of the proper "
"choice of branch cuts for numerical purposes, a good reference should be the "
"following:"
msgstr ""

msgid ""
"Kahan, W:  Branch cuts for complex elementary functions; or, Much ado about "
"nothing's sign bit.  In Iserles, A., and Powell, M. (eds.), The state of the "
"art in numerical analysis. Clarendon Press (1987) pp165--211."
msgstr ""

msgid "module"
msgstr ""

msgid "math"
msgstr ""
