# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-17 14:16+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!turtle` --- Turtle graphics"
msgstr ""

msgid "**Source code:** :source:`Lib/turtle.py`"
msgstr ""

msgid "Introduction"
msgstr ""

msgid ""
"Turtle graphics is an implementation of `the popular geometric drawing tools "
"introduced in Logo <https://en.wikipedia.org/wiki/Turtle_ (robot)>`_, "
"developed by Wally Feurzeig, Seymour Papert and Cynthia Solomon in 1967."
msgstr ""

msgid "Get started"
msgstr ""

msgid ""
"Imagine a robotic turtle starting at (0, 0) in the x-y plane.  After an "
"``import turtle``, give it the command ``turtle.forward(15)``, and it moves "
"(on-screen!) 15 pixels in the direction it is facing, drawing a line as it "
"moves.  Give it the command ``turtle.right(25)``, and it rotates in-place 25 "
"degrees clockwise."
msgstr ""

msgid ""
"Turtle can draw intricate shapes using programs that repeat simple moves."
msgstr ""

msgid ""
"In Python, turtle graphics provides a representation of a physical "
"\"turtle\" (a little robot with a pen) that draws on a sheet of paper on the "
"floor."
msgstr ""

msgid ""
"It's an effective and well-proven way for learners to encounter programming "
"concepts and interaction with software, as it provides instant, visible "
"feedback. It also provides convenient access to graphical output in general."
msgstr ""

msgid ""
"Turtle drawing was originally created as an educational tool, to be used by "
"teachers in the classroom. For the programmer who needs to produce some "
"graphical output it can be a way to do that without the overhead of "
"introducing more complex or external libraries into their work."
msgstr ""

msgid "Tutorial"
msgstr ""

msgid ""
"New users should start here. In this tutorial we'll explore some of the "
"basics of turtle drawing."
msgstr ""

msgid "Starting a turtle environment"
msgstr ""

msgid "In a Python shell, import all the objects of the ``turtle`` module::"
msgstr ""

msgid "from turtle import *"
msgstr ""

msgid ""
"If you run into a ``No module named '_tkinter'`` error, you'll have to "
"install the :mod:`Tk interface package <tkinter>` on your system."
msgstr ""

msgid "Basic drawing"
msgstr ""

msgid "Send the turtle forward 100 steps::"
msgstr ""

msgid "forward(100)"
msgstr ""

msgid ""
"You should see (most likely, in a new window on your display) a line drawn "
"by the turtle, heading East. Change the direction of the turtle, so that it "
"turns 120 degrees left (anti-clockwise)::"
msgstr ""

msgid "left(120)"
msgstr ""

msgid "Let's continue by drawing a triangle::"
msgstr ""

msgid ""
"forward(100)\n"
"left(120)\n"
"forward(100)"
msgstr ""

msgid ""
"Notice how the turtle, represented by an arrow, points in different "
"directions as you steer it."
msgstr ""

msgid ""
"Experiment with those commands, and also with ``backward()`` and ``right()``."
msgstr ""

msgid "Pen control"
msgstr ""

msgid ""
"Try changing the color - for example, ``color('blue')`` - and width of the "
"line - for example, ``width(3)`` - and then drawing again."
msgstr ""

msgid ""
"You can also move the turtle around without drawing, by lifting up the pen: "
"``up()`` before moving. To start drawing again, use ``down()``."
msgstr ""

msgid "The turtle's position"
msgstr ""

msgid ""
"Send your turtle back to its starting-point (useful if it has disappeared "
"off-screen)::"
msgstr ""

msgid "home()"
msgstr ""

msgid ""
"The home position is at the center of the turtle's screen. If you ever need "
"to know them, get the turtle's x-y coordinates with::"
msgstr ""

msgid "pos()"
msgstr ""

msgid "Home is at ``(0, 0)``."
msgstr ""

msgid ""
"And after a while, it will probably help to clear the window so we can start "
"anew::"
msgstr ""

msgid "clearscreen()"
msgstr ""

msgid "Making algorithmic patterns"
msgstr ""

msgid "Using loops, it's possible to build up geometric patterns::"
msgstr ""

msgid ""
"for steps in range(100):\n"
"    for c in ('blue', 'red', 'green'):\n"
"        color(c)\n"
"        forward(steps)\n"
"        right(30)"
msgstr ""

msgid "\\ - which of course, are limited only by the imagination!"
msgstr ""

msgid ""
"Let's draw the star shape at the top of this page. We want red lines, filled "
"in with yellow::"
msgstr ""

msgid ""
"color('red')\n"
"fillcolor('yellow')"
msgstr ""

msgid ""
"Just as ``up()`` and ``down()`` determine whether lines will be drawn, "
"filling can be turned on and off::"
msgstr ""

msgid "begin_fill()"
msgstr ""

msgid "Next we'll create a loop::"
msgstr ""

msgid ""
"while True:\n"
"    forward(200)\n"
"    left(170)\n"
"    if abs(pos()) < 1:\n"
"        break"
msgstr ""

msgid ""
"``abs(pos()) < 1`` is a good way to know when the turtle is back at its home "
"position."
msgstr ""

msgid "Finally, complete the filling::"
msgstr ""

msgid "end_fill()"
msgstr ""

msgid ""
"(Note that filling only actually takes place when you give the "
"``end_fill()`` command.)"
msgstr ""

msgid "How to..."
msgstr ""

msgid "This section covers some typical turtle use-cases and approaches."
msgstr ""

msgid "Get started as quickly as possible"
msgstr ""

msgid ""
"One of the joys of turtle graphics is the immediate, visual feedback that's "
"available from simple commands - it's an excellent way to introduce children "
"to programming ideas, with a minimum of overhead (not just children, of "
"course)."
msgstr ""

msgid ""
"The turtle module makes this possible by exposing all its basic "
"functionality as functions, available with ``from turtle import *``. The :"
"ref:`turtle graphics tutorial <turtle-tutorial>` covers this approach."
msgstr ""

msgid ""
"It's worth noting that many of the turtle commands also have even more terse "
"equivalents, such as ``fd()`` for :func:`forward`. These are especially "
"useful when working with learners for whom typing is not a skill."
msgstr ""

msgid ""
"You'll need to have the :mod:`Tk interface package <tkinter>` installed on "
"your system for turtle graphics to work. Be warned that this is not always "
"straightforward, so check this in advance if you're planning to use turtle "
"graphics with a learner."
msgstr ""

msgid "Automatically begin and end filling"
msgstr ""

msgid ""
"Starting with Python 3.14, you can use the :func:`fill` :term:`context "
"manager` instead of :func:`begin_fill` and :func:`end_fill` to automatically "
"begin and end fill. Here is an example::"
msgstr ""

msgid ""
"with fill():\n"
"    for i in range(4):\n"
"        forward(100)\n"
"        right(90)\n"
"\n"
"forward(200)"
msgstr ""

msgid "The code above is equivalent to::"
msgstr ""

msgid ""
"begin_fill()\n"
"for i in range(4):\n"
"    forward(100)\n"
"    right(90)\n"
"end_fill()\n"
"\n"
"forward(200)"
msgstr ""

msgid "Use the ``turtle`` module namespace"
msgstr ""

msgid ""
"Using ``from turtle import *`` is convenient - but be warned that it imports "
"a rather large collection of objects, and if you're doing anything but "
"turtle graphics you run the risk of a name conflict (this becomes even more "
"an issue if you're using turtle graphics in a script where other modules "
"might be imported)."
msgstr ""

msgid ""
"The solution is to use ``import turtle`` - ``fd()`` becomes ``turtle.fd()``, "
"``width()`` becomes ``turtle.width()`` and so on. (If typing \"turtle\" over "
"and over again becomes tedious, use for example ``import turtle as t`` "
"instead.)"
msgstr ""

msgid "Use turtle graphics in a script"
msgstr ""

msgid ""
"It's recommended to use the ``turtle`` module namespace as described "
"immediately above, for example::"
msgstr ""

msgid ""
"import turtle as t\n"
"from random import random\n"
"\n"
"for i in range(100):\n"
"    steps = int(random() * 100)\n"
"    angle = int(random() * 360)\n"
"    t.right(angle)\n"
"    t.fd(steps)"
msgstr ""

msgid ""
"Another step is also required though - as soon as the script ends, Python "
"will also close the turtle's window. Add::"
msgstr ""

msgid "t.mainloop()"
msgstr ""

msgid ""
"to the end of the script. The script will now wait to be dismissed and will "
"not exit until it is terminated, for example by closing the turtle graphics "
"window."
msgstr ""

msgid "Use object-oriented turtle graphics"
msgstr ""

msgid ""
":ref:`Explanation of the object-oriented interface <turtle-explanation>`"
msgstr ""

msgid ""
"Other than for very basic introductory purposes, or for trying things out as "
"quickly as possible, it's more usual and much more powerful to use the "
"object-oriented approach to turtle graphics. For example, this allows "
"multiple turtles on screen at once."
msgstr ""

msgid ""
"In this approach, the various turtle commands are methods of objects (mostly "
"of ``Turtle`` objects). You *can* use the object-oriented approach in the "
"shell, but it would be more typical in a Python script."
msgstr ""

msgid "The example above then becomes::"
msgstr ""

msgid ""
"from turtle import Turtle\n"
"from random import random\n"
"\n"
"t = Turtle()\n"
"for i in range(100):\n"
"    steps = int(random() * 100)\n"
"    angle = int(random() * 360)\n"
"    t.right(angle)\n"
"    t.fd(steps)\n"
"\n"
"t.screen.mainloop()"
msgstr ""

msgid ""
"Note the last line. ``t.screen`` is an instance of the :class:`Screen` that "
"a Turtle instance exists on; it's created automatically along with the "
"turtle."
msgstr ""

msgid "The turtle's screen can be customised, for example::"
msgstr ""

msgid ""
"t.screen.title('Object-oriented turtle demo')\n"
"t.screen.bgcolor(\"orange\")"
msgstr ""

msgid "Turtle graphics reference"
msgstr ""

msgid ""
"In the following documentation the argument list for functions is given. "
"Methods, of course, have the additional first argument *self* which is "
"omitted here."
msgstr ""

msgid "Turtle methods"
msgstr ""

msgid "Turtle motion"
msgstr ""

msgid "Move and draw"
msgstr ""

msgid ":func:`forward` | :func:`fd`"
msgstr ""

msgid ":func:`backward` | :func:`bk` | :func:`back`"
msgstr ""

msgid ":func:`right` | :func:`rt`"
msgstr ""

msgid ":func:`left` | :func:`lt`"
msgstr ""

msgid ":func:`goto` | :func:`setpos` | :func:`setposition`"
msgstr ""

msgid ":func:`teleport`"
msgstr ""

msgid ":func:`setx`"
msgstr ""

msgid ":func:`sety`"
msgstr ""

msgid ":func:`setheading` | :func:`seth`"
msgstr ""

msgid ":func:`home`"
msgstr ""

msgid ":func:`circle`"
msgstr ""

msgid ":func:`dot`"
msgstr ""

msgid ":func:`stamp`"
msgstr ""

msgid ":func:`clearstamp`"
msgstr ""

msgid ":func:`clearstamps`"
msgstr ""

msgid ":func:`undo`"
msgstr ""

msgid ":func:`speed`"
msgstr ""

msgid "Tell Turtle's state"
msgstr ""

msgid ":func:`position` | :func:`pos`"
msgstr ""

msgid ":func:`towards`"
msgstr ""

msgid ":func:`xcor`"
msgstr ""

msgid ":func:`ycor`"
msgstr ""

msgid ":func:`heading`"
msgstr ""

msgid ":func:`distance`"
msgstr ""

msgid "Setting and measurement"
msgstr ""

msgid ":func:`degrees`"
msgstr ""

msgid ":func:`radians`"
msgstr ""

msgid "Drawing state"
msgstr ""

msgid ":func:`pendown` | :func:`pd` | :func:`down`"
msgstr ""

msgid ":func:`penup` | :func:`pu` | :func:`up`"
msgstr ""

msgid ":func:`pensize` | :func:`width`"
msgstr ""

msgid ":func:`pen`"
msgstr ""

msgid ":func:`isdown`"
msgstr ""

msgid "Color control"
msgstr ""

msgid ":func:`color`"
msgstr ""

msgid ":func:`pencolor`"
msgstr ""

msgid ":func:`fillcolor`"
msgstr ""

msgid "Filling"
msgstr ""

msgid ":func:`filling`"
msgstr ""

msgid ":func:`fill`"
msgstr ""

msgid ":func:`begin_fill`"
msgstr ""

msgid ":func:`end_fill`"
msgstr ""

msgid "More drawing control"
msgstr ""

msgid ":func:`reset`"
msgstr ""

msgid ":func:`clear`"
msgstr ""

msgid ":func:`write`"
msgstr ""

msgid "Turtle state"
msgstr ""

msgid "Visibility"
msgstr ""

msgid ":func:`showturtle` | :func:`st`"
msgstr ""

msgid ":func:`hideturtle` | :func:`ht`"
msgstr ""

msgid ":func:`isvisible`"
msgstr ""

msgid "Appearance"
msgstr ""

msgid ":func:`shape`"
msgstr ""

msgid ":func:`resizemode`"
msgstr ""

msgid ":func:`shapesize` | :func:`turtlesize`"
msgstr ""

msgid ":func:`shearfactor`"
msgstr ""

msgid ":func:`tiltangle`"
msgstr ""

msgid ":func:`tilt`"
msgstr ""

msgid ":func:`shapetransform`"
msgstr ""

msgid ":func:`get_shapepoly`"
msgstr ""

msgid "Using events"
msgstr ""

msgid ":func:`onclick`"
msgstr ""

msgid ":func:`onrelease`"
msgstr ""

msgid ":func:`ondrag`"
msgstr ""

msgid "Special Turtle methods"
msgstr ""

msgid ":func:`poly`"
msgstr ""

msgid ":func:`begin_poly`"
msgstr ""

msgid ":func:`end_poly`"
msgstr ""

msgid ":func:`get_poly`"
msgstr ""

msgid ":func:`clone`"
msgstr ""

msgid ":func:`getturtle` | :func:`getpen`"
msgstr ""

msgid ":func:`getscreen`"
msgstr ""

msgid ":func:`setundobuffer`"
msgstr ""

msgid ":func:`undobufferentries`"
msgstr ""

msgid "Methods of TurtleScreen/Screen"
msgstr ""

msgid "Window control"
msgstr ""

msgid ":func:`bgcolor`"
msgstr ""

msgid ":func:`bgpic`"
msgstr ""

msgid ":func:`clearscreen`"
msgstr ""

msgid ":func:`resetscreen`"
msgstr ""

msgid ":func:`screensize`"
msgstr ""

msgid ":func:`setworldcoordinates`"
msgstr ""

msgid "Animation control"
msgstr ""

msgid ":func:`no_animation`"
msgstr ""

msgid ":func:`delay`"
msgstr ""

msgid ":func:`tracer`"
msgstr ""

msgid ":func:`update`"
msgstr ""

msgid "Using screen events"
msgstr ""

msgid ":func:`listen`"
msgstr ""

msgid ":func:`onkey` | :func:`onkeyrelease`"
msgstr ""

msgid ":func:`onkeypress`"
msgstr ""

msgid ":func:`onclick` | :func:`onscreenclick`"
msgstr ""

msgid ":func:`ontimer`"
msgstr ""

msgid ":func:`mainloop` | :func:`done`"
msgstr ""

msgid "Settings and special methods"
msgstr ""

msgid ":func:`mode`"
msgstr ""

msgid ":func:`colormode`"
msgstr ""

msgid ":func:`getcanvas`"
msgstr ""

msgid ":func:`getshapes`"
msgstr ""

msgid ":func:`register_shape` | :func:`addshape`"
msgstr ""

msgid ":func:`turtles`"
msgstr ""

msgid ":func:`window_height`"
msgstr ""

msgid ":func:`window_width`"
msgstr ""

msgid "Input methods"
msgstr ""

msgid ":func:`textinput`"
msgstr ""

msgid ":func:`numinput`"
msgstr ""

msgid "Methods specific to Screen"
msgstr ""

msgid ":func:`bye`"
msgstr ""

msgid ":func:`exitonclick`"
msgstr ""

msgid ":func:`save`"
msgstr ""

msgid ":func:`setup`"
msgstr ""

msgid ":func:`title`"
msgstr ""

msgid "Methods of RawTurtle/Turtle and corresponding functions"
msgstr ""

msgid ""
"Most of the examples in this section refer to a Turtle instance called "
"``turtle``."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "a number (integer or float)"
msgstr ""

msgid ""
"Move the turtle forward by the specified *distance*, in the direction the "
"turtle is headed."
msgstr ""

msgid ""
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.forward(25)\n"
">>> turtle.position()\n"
"(25.00,0.00)\n"
">>> turtle.forward(-75)\n"
">>> turtle.position()\n"
"(-50.00,0.00)"
msgstr ""

msgid "a number"
msgstr ""

msgid ""
"Move the turtle backward by *distance*, opposite to the direction the turtle "
"is headed.  Do not change the turtle's heading."
msgstr ""

msgid ""
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.backward(30)\n"
">>> turtle.position()\n"
"(-30.00,0.00)"
msgstr ""

msgid ""
"Turn turtle right by *angle* units.  (Units are by default degrees, but can "
"be set via the :func:`degrees` and :func:`radians` functions.)  Angle "
"orientation depends on the turtle mode, see :func:`mode`."
msgstr ""

msgid ""
">>> turtle.heading()\n"
"22.0\n"
">>> turtle.right(45)\n"
">>> turtle.heading()\n"
"337.0"
msgstr ""

msgid ""
"Turn turtle left by *angle* units.  (Units are by default degrees, but can "
"be set via the :func:`degrees` and :func:`radians` functions.)  Angle "
"orientation depends on the turtle mode, see :func:`mode`."
msgstr ""

msgid ""
">>> turtle.heading()\n"
"22.0\n"
">>> turtle.left(45)\n"
">>> turtle.heading()\n"
"67.0"
msgstr ""

msgid "a number or a pair/vector of numbers"
msgstr ""

msgid "a number or ``None``"
msgstr ""

msgid ""
"If *y* is ``None``, *x* must be a pair of coordinates or a :class:`Vec2D` (e."
"g. as returned by :func:`pos`)."
msgstr ""

msgid ""
"Move turtle to an absolute position.  If the pen is down, draw line.  Do not "
"change the turtle's orientation."
msgstr ""

msgid ""
">>> tp = turtle.pos()\n"
">>> tp\n"
"(0.00,0.00)\n"
">>> turtle.setpos(60,30)\n"
">>> turtle.pos()\n"
"(60.00,30.00)\n"
">>> turtle.setpos((20,80))\n"
">>> turtle.pos()\n"
"(20.00,80.00)\n"
">>> turtle.setpos(tp)\n"
">>> turtle.pos()\n"
"(0.00,0.00)"
msgstr ""

msgid "a boolean"
msgstr ""

msgid ""
"Move turtle to an absolute position. Unlike goto(x, y), a line will not be "
"drawn. The turtle's orientation does not change. If currently filling, the "
"polygon(s) teleported from will be filled after leaving, and filling will "
"begin again after teleporting. This can be disabled with fill_gap=True, "
"which makes the imaginary line traveled during teleporting act as a fill "
"barrier like in goto(x, y)."
msgstr ""

msgid ""
">>> tp = turtle.pos()\n"
">>> tp\n"
"(0.00,0.00)\n"
">>> turtle.teleport(60)\n"
">>> turtle.pos()\n"
"(60.00,0.00)\n"
">>> turtle.teleport(y=10)\n"
">>> turtle.pos()\n"
"(60.00,10.00)\n"
">>> turtle.teleport(20, 30)\n"
">>> turtle.pos()\n"
"(20.00,30.00)"
msgstr ""

msgid ""
"Set the turtle's first coordinate to *x*, leave second coordinate unchanged."
msgstr ""

msgid ""
">>> turtle.position()\n"
"(0.00,240.00)\n"
">>> turtle.setx(10)\n"
">>> turtle.position()\n"
"(10.00,240.00)"
msgstr ""

msgid ""
"Set the turtle's second coordinate to *y*, leave first coordinate unchanged."
msgstr ""

msgid ""
">>> turtle.position()\n"
"(0.00,40.00)\n"
">>> turtle.sety(-10)\n"
">>> turtle.position()\n"
"(0.00,-10.00)"
msgstr ""

msgid ""
"Set the orientation of the turtle to *to_angle*.  Here are some common "
"directions in degrees:"
msgstr ""

msgid "standard mode"
msgstr ""

msgid "logo mode"
msgstr ""

msgid "0 - east"
msgstr ""

msgid "0 - north"
msgstr ""

msgid "90 - north"
msgstr ""

msgid "90 - east"
msgstr ""

msgid "180 - west"
msgstr ""

msgid "180 - south"
msgstr ""

msgid "270 - south"
msgstr ""

msgid "270 - west"
msgstr ""

msgid ""
">>> turtle.setheading(90)\n"
">>> turtle.heading()\n"
"90.0"
msgstr ""

msgid ""
"Move turtle to the origin -- coordinates (0,0) -- and set its heading to its "
"start-orientation (which depends on the mode, see :func:`mode`)."
msgstr ""

msgid ""
">>> turtle.heading()\n"
"90.0\n"
">>> turtle.position()\n"
"(0.00,-10.00)\n"
">>> turtle.home()\n"
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0"
msgstr ""

msgid "a number (or ``None``)"
msgstr ""

msgid "an integer (or ``None``)"
msgstr ""

msgid ""
"Draw a circle with given *radius*.  The center is *radius* units left of the "
"turtle; *extent* -- an angle -- determines which part of the circle is "
"drawn.  If *extent* is not given, draw the entire circle.  If *extent* is "
"not a full circle, one endpoint of the arc is the current pen position.  "
"Draw the arc in counterclockwise direction if *radius* is positive, "
"otherwise in clockwise direction.  Finally the direction of the turtle is "
"changed by the amount of *extent*."
msgstr ""

msgid ""
"As the circle is approximated by an inscribed regular polygon, *steps* "
"determines the number of steps to use.  If not given, it will be calculated "
"automatically.  May be used to draw regular polygons."
msgstr ""

msgid ""
">>> turtle.home()\n"
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0\n"
">>> turtle.circle(50)\n"
">>> turtle.position()\n"
"(-0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0\n"
">>> turtle.circle(120, 180)  # draw a semicircle\n"
">>> turtle.position()\n"
"(0.00,240.00)\n"
">>> turtle.heading()\n"
"180.0"
msgstr ""

msgid "an integer >= 1 (if given)"
msgstr ""

msgid "a colorstring or a numeric color tuple"
msgstr ""

msgid ""
"Draw a circular dot with diameter *size*, using *color*.  If *size* is not "
"given, the maximum of pensize+4 and 2*pensize is used."
msgstr ""

msgid ""
">>> turtle.home()\n"
">>> turtle.dot()\n"
">>> turtle.fd(50); turtle.dot(20, \"blue\"); turtle.fd(50)\n"
">>> turtle.position()\n"
"(100.00,-0.00)\n"
">>> turtle.heading()\n"
"0.0"
msgstr ""

msgid ""
"Stamp a copy of the turtle shape onto the canvas at the current turtle "
"position.  Return a stamp_id for that stamp, which can be used to delete it "
"by calling ``clearstamp(stamp_id)``."
msgstr ""

msgid ""
">>> turtle.color(\"blue\")\n"
">>> stamp_id = turtle.stamp()\n"
">>> turtle.fd(50)"
msgstr ""

msgid "an integer, must be return value of previous :func:`stamp` call"
msgstr ""

msgid "Delete stamp with given *stampid*."
msgstr ""

msgid ""
">>> turtle.position()\n"
"(150.00,-0.00)\n"
">>> turtle.color(\"blue\")\n"
">>> astamp = turtle.stamp()\n"
">>> turtle.fd(50)\n"
">>> turtle.position()\n"
"(200.00,-0.00)\n"
">>> turtle.clearstamp(astamp)\n"
">>> turtle.position()\n"
"(200.00,-0.00)"
msgstr ""

msgid ""
"Delete all or first/last *n* of turtle's stamps.  If *n* is ``None``, delete "
"all stamps, if *n* > 0 delete first *n* stamps, else if *n* < 0 delete last "
"*n* stamps."
msgstr ""

msgid ""
">>> for i in range(8):\n"
"...     unused_stamp_id = turtle.stamp()\n"
"...     turtle.fd(30)\n"
">>> turtle.clearstamps(2)\n"
">>> turtle.clearstamps(-2)\n"
">>> turtle.clearstamps()"
msgstr ""

msgid ""
"Undo (repeatedly) the last turtle action(s).  Number of available undo "
"actions is determined by the size of the undobuffer."
msgstr ""

msgid ""
">>> for i in range(4):\n"
"...     turtle.fd(50); turtle.lt(80)\n"
"...\n"
">>> for i in range(8):\n"
"...     turtle.undo()"
msgstr ""

msgid "an integer in the range 0..10 or a speedstring (see below)"
msgstr ""

msgid ""
"Set the turtle's speed to an integer value in the range 0..10.  If no "
"argument is given, return current speed."
msgstr ""

msgid ""
"If input is a number greater than 10 or smaller than 0.5, speed is set to "
"0.  Speedstrings are mapped to speedvalues as follows:"
msgstr ""

msgid "\"fastest\":  0"
msgstr ""

msgid "\"fast\":  10"
msgstr ""

msgid "\"normal\":  6"
msgstr ""

msgid "\"slow\":  3"
msgstr ""

msgid "\"slowest\":  1"
msgstr ""

msgid ""
"Speeds from 1 to 10 enforce increasingly faster animation of line drawing "
"and turtle turning."
msgstr ""

msgid ""
"Attention: *speed* = 0 means that *no* animation takes place. forward/back "
"makes turtle jump and likewise left/right make the turtle turn instantly."
msgstr ""

msgid ""
">>> turtle.speed()\n"
"3\n"
">>> turtle.speed('normal')\n"
">>> turtle.speed()\n"
"6\n"
">>> turtle.speed(9)\n"
">>> turtle.speed()\n"
"9"
msgstr ""

msgid ""
"Return the turtle's current location (x,y) (as a :class:`Vec2D` vector)."
msgstr ""

msgid ""
">>> turtle.pos()\n"
"(440.00,-0.00)"
msgstr ""

msgid "a number or a pair/vector of numbers or a turtle instance"
msgstr ""

msgid "a number if *x* is a number, else ``None``"
msgstr ""

msgid ""
"Return the angle between the line from turtle position to position specified "
"by (x,y), the vector or the other turtle.  This depends on the turtle's "
"start orientation which depends on the mode - \"standard\"/\"world\" or "
"\"logo\"."
msgstr ""

msgid ""
">>> turtle.goto(10, 10)\n"
">>> turtle.towards(0,0)\n"
"225.0"
msgstr ""

msgid "Return the turtle's x coordinate."
msgstr ""

msgid ""
">>> turtle.home()\n"
">>> turtle.left(50)\n"
">>> turtle.forward(100)\n"
">>> turtle.pos()\n"
"(64.28,76.60)\n"
">>> print(round(turtle.xcor(), 5))\n"
"64.27876"
msgstr ""

msgid "Return the turtle's y coordinate."
msgstr ""

msgid ""
">>> turtle.home()\n"
">>> turtle.left(60)\n"
">>> turtle.forward(100)\n"
">>> print(turtle.pos())\n"
"(50.00,86.60)\n"
">>> print(round(turtle.ycor(), 5))\n"
"86.60254"
msgstr ""

msgid ""
"Return the turtle's current heading (value depends on the turtle mode, see :"
"func:`mode`)."
msgstr ""

msgid ""
">>> turtle.home()\n"
">>> turtle.left(67)\n"
">>> turtle.heading()\n"
"67.0"
msgstr ""

msgid ""
"Return the distance from the turtle to (x,y), the given vector, or the given "
"other turtle, in turtle step units."
msgstr ""

msgid ""
">>> turtle.home()\n"
">>> turtle.distance(30,40)\n"
"50.0\n"
">>> turtle.distance((30,40))\n"
"50.0\n"
">>> joe = Turtle()\n"
">>> joe.forward(77)\n"
">>> turtle.distance(joe)\n"
"77.0"
msgstr ""

msgid "Settings for measurement"
msgstr ""

msgid ""
"Set angle measurement units, i.e. set number of \"degrees\" for a full "
"circle. Default value is 360 degrees."
msgstr ""

msgid ""
">>> turtle.home()\n"
">>> turtle.left(90)\n"
">>> turtle.heading()\n"
"90.0\n"
"\n"
">>> # Change angle measurement unit to grad (also known as gon,\n"
">>> # grade, or gradian and equals 1/100-th of the right angle.)\n"
">>> turtle.degrees(400.0)\n"
">>> turtle.heading()\n"
"100.0\n"
">>> turtle.degrees(360)\n"
">>> turtle.heading()\n"
"90.0"
msgstr ""

msgid ""
"Set the angle measurement units to radians.  Equivalent to ``degrees(2*math."
"pi)``."
msgstr ""

msgid ""
">>> turtle.home()\n"
">>> turtle.left(90)\n"
">>> turtle.heading()\n"
"90.0\n"
">>> turtle.radians()\n"
">>> turtle.heading()\n"
"1.5707963267948966"
msgstr ""

msgid "Pull the pen down -- drawing when moving."
msgstr ""

msgid "Pull the pen up -- no drawing when moving."
msgstr ""

msgid "a positive number"
msgstr ""

msgid ""
"Set the line thickness to *width* or return it.  If resizemode is set to "
"\"auto\" and turtleshape is a polygon, that polygon is drawn with the same "
"line thickness.  If no argument is given, the current pensize is returned."
msgstr ""

msgid ""
">>> turtle.pensize()\n"
"1\n"
">>> turtle.pensize(10)   # from here on lines of width 10 are drawn"
msgstr ""

msgid "a dictionary with some or all of the below listed keys"
msgstr ""

msgid "one or more keyword-arguments with the below listed keys as keywords"
msgstr ""

msgid ""
"Return or set the pen's attributes in a \"pen-dictionary\" with the "
"following key/value pairs:"
msgstr ""

msgid "\"shown\": True/False"
msgstr ""

msgid "\"pendown\": True/False"
msgstr ""

msgid "\"pencolor\": color-string or color-tuple"
msgstr ""

msgid "\"fillcolor\": color-string or color-tuple"
msgstr ""

msgid "\"pensize\": positive number"
msgstr ""

msgid "\"speed\": number in range 0..10"
msgstr ""

msgid "\"resizemode\": \"auto\" or \"user\" or \"noresize\""
msgstr ""

msgid "\"stretchfactor\": (positive number, positive number)"
msgstr ""

msgid "\"outline\": positive number"
msgstr ""

msgid "\"tilt\": number"
msgstr ""

msgid ""
"This dictionary can be used as argument for a subsequent call to :func:`pen` "
"to restore the former pen-state.  Moreover one or more of these attributes "
"can be provided as keyword-arguments.  This can be used to set several pen "
"attributes in one statement."
msgstr ""

msgid ""
">>> turtle.pen(fillcolor=\"black\", pencolor=\"red\", pensize=10)\n"
">>> sorted(turtle.pen().items())\n"
"[('fillcolor', 'black'), ('outline', 1), ('pencolor', 'red'),\n"
" ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),\n"
" ('shearfactor', 0.0), ('shown', True), ('speed', 9),\n"
" ('stretchfactor', (1.0, 1.0)), ('tilt', 0.0)]\n"
">>> penstate=turtle.pen()\n"
">>> turtle.color(\"yellow\", \"\")\n"
">>> turtle.penup()\n"
">>> sorted(turtle.pen().items())[:3]\n"
"[('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow')]\n"
">>> turtle.pen(penstate, fillcolor=\"green\")\n"
">>> sorted(turtle.pen().items())[:3]\n"
"[('fillcolor', 'green'), ('outline', 1), ('pencolor', 'red')]"
msgstr ""

msgid "Return ``True`` if pen is down, ``False`` if it's up."
msgstr ""

msgid ""
">>> turtle.penup()\n"
">>> turtle.isdown()\n"
"False\n"
">>> turtle.pendown()\n"
">>> turtle.isdown()\n"
"True"
msgstr ""

msgid "Return or set the pencolor."
msgstr ""

msgid "Four input formats are allowed:"
msgstr ""

msgid "``pencolor()``"
msgstr ""

msgid ""
"Return the current pencolor as color specification string or as a tuple (see "
"example).  May be used as input to another color/pencolor/fillcolor call."
msgstr ""

msgid "``pencolor(colorstring)``"
msgstr ""

msgid ""
"Set pencolor to *colorstring*, which is a Tk color specification string, "
"such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""

msgid "``pencolor((r, g, b))``"
msgstr ""

msgid ""
"Set pencolor to the RGB color represented by the tuple of *r*, *g*, and "
"*b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where "
"colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""

msgid "``pencolor(r, g, b)``"
msgstr ""

msgid ""
"Set pencolor to the RGB color represented by *r*, *g*, and *b*.  Each of "
"*r*, *g*, and *b* must be in the range 0..colormode."
msgstr ""

msgid ""
"If turtleshape is a polygon, the outline of that polygon is drawn with the "
"newly set pencolor."
msgstr ""

msgid ""
">>> colormode()\n"
"1.0\n"
">>> turtle.pencolor()\n"
"'red'\n"
">>> turtle.pencolor(\"brown\")\n"
">>> turtle.pencolor()\n"
"'brown'\n"
">>> tup = (0.2, 0.8, 0.55)\n"
">>> turtle.pencolor(tup)\n"
">>> turtle.pencolor()\n"
"(0.2, 0.8, 0.5490196078431373)\n"
">>> colormode(255)\n"
">>> turtle.pencolor()\n"
"(51.0, 204.0, 140.0)\n"
">>> turtle.pencolor('#32c18f')\n"
">>> turtle.pencolor()\n"
"(50.0, 193.0, 143.0)"
msgstr ""

msgid "Return or set the fillcolor."
msgstr ""

msgid "``fillcolor()``"
msgstr ""

msgid ""
"Return the current fillcolor as color specification string, possibly in "
"tuple format (see example).  May be used as input to another color/pencolor/"
"fillcolor call."
msgstr ""

msgid "``fillcolor(colorstring)``"
msgstr ""

msgid ""
"Set fillcolor to *colorstring*, which is a Tk color specification string, "
"such as ``\"red\"``, ``\"yellow\"``, or ``\"#33cc8c\"``."
msgstr ""

msgid "``fillcolor((r, g, b))``"
msgstr ""

msgid ""
"Set fillcolor to the RGB color represented by the tuple of *r*, *g*, and "
"*b*.  Each of *r*, *g*, and *b* must be in the range 0..colormode, where "
"colormode is either 1.0 or 255 (see :func:`colormode`)."
msgstr ""

msgid "``fillcolor(r, g, b)``"
msgstr ""

msgid ""
"Set fillcolor to the RGB color represented by *r*, *g*, and *b*.  Each of "
"*r*, *g*, and *b* must be in the range 0..colormode."
msgstr ""

msgid ""
"If turtleshape is a polygon, the interior of that polygon is drawn with the "
"newly set fillcolor."
msgstr ""

msgid ""
">>> turtle.fillcolor(\"violet\")\n"
">>> turtle.fillcolor()\n"
"'violet'\n"
">>> turtle.pencolor()\n"
"(50.0, 193.0, 143.0)\n"
">>> turtle.fillcolor((50, 193, 143))  # Integers, not floats\n"
">>> turtle.fillcolor()\n"
"(50.0, 193.0, 143.0)\n"
">>> turtle.fillcolor('#ffffff')\n"
">>> turtle.fillcolor()\n"
"(255.0, 255.0, 255.0)"
msgstr ""

msgid "Return or set pencolor and fillcolor."
msgstr ""

msgid ""
"Several input formats are allowed.  They use 0 to 3 arguments as follows:"
msgstr ""

msgid "``color()``"
msgstr ""

msgid ""
"Return the current pencolor and the current fillcolor as a pair of color "
"specification strings or tuples as returned by :func:`pencolor` and :func:"
"`fillcolor`."
msgstr ""

msgid "``color(colorstring)``, ``color((r,g,b))``, ``color(r,g,b)``"
msgstr ""

msgid ""
"Inputs as in :func:`pencolor`, set both, fillcolor and pencolor, to the "
"given value."
msgstr ""

msgid ""
"``color(colorstring1, colorstring2)``, ``color((r1,g1,b1), (r2,g2,b2))``"
msgstr ""

msgid ""
"Equivalent to ``pencolor(colorstring1)`` and ``fillcolor(colorstring2)`` and "
"analogously if the other input format is used."
msgstr ""

msgid ""
"If turtleshape is a polygon, outline and interior of that polygon is drawn "
"with the newly set colors."
msgstr ""

msgid ""
">>> turtle.color(\"red\", \"green\")\n"
">>> turtle.color()\n"
"('red', 'green')\n"
">>> color(\"#285078\", \"#a0c8f0\")\n"
">>> color()\n"
"((40.0, 80.0, 120.0), (160.0, 200.0, 240.0))"
msgstr ""

msgid "See also: Screen method :func:`colormode`."
msgstr ""

msgid "Return fillstate (``True`` if filling, ``False`` else)."
msgstr ""

msgid ""
">>> turtle.begin_fill()\n"
">>> if turtle.filling():\n"
"...    turtle.pensize(5)\n"
"... else:\n"
"...    turtle.pensize(3)"
msgstr ""

msgid "Fill the shape drawn in the ``with turtle.fill():`` block."
msgstr ""

msgid ""
">>> turtle.color(\"black\", \"red\")\n"
">>> with turtle.fill():\n"
"...     turtle.circle(80)"
msgstr ""

msgid ""
"Using :func:`!fill` is equivalent to adding the :func:`begin_fill` before "
"the fill-block and :func:`end_fill` after the fill-block:"
msgstr ""

msgid ""
">>> turtle.color(\"black\", \"red\")\n"
">>> turtle.begin_fill()\n"
">>> turtle.circle(80)\n"
">>> turtle.end_fill()"
msgstr ""

msgid "To be called just before drawing a shape to be filled."
msgstr ""

msgid "Fill the shape drawn after the last call to :func:`begin_fill`."
msgstr ""

msgid ""
"Whether or not overlap regions for self-intersecting polygons or multiple "
"shapes are filled depends on the operating system graphics, type of overlap, "
"and number of overlaps.  For example, the Turtle star above may be either "
"all yellow or have some white regions."
msgstr ""

msgid ""
"Delete the turtle's drawings from the screen, re-center the turtle and set "
"variables to the default values."
msgstr ""

msgid ""
">>> turtle.goto(0,-22)\n"
">>> turtle.left(100)\n"
">>> turtle.position()\n"
"(0.00,-22.00)\n"
">>> turtle.heading()\n"
"100.0\n"
">>> turtle.reset()\n"
">>> turtle.position()\n"
"(0.00,0.00)\n"
">>> turtle.heading()\n"
"0.0"
msgstr ""

msgid ""
"Delete the turtle's drawings from the screen.  Do not move turtle.  State "
"and position of the turtle as well as drawings of other turtles are not "
"affected."
msgstr ""

msgid "object to be written to the TurtleScreen"
msgstr ""

msgid "True/False"
msgstr ""

msgid "one of the strings \"left\", \"center\" or right\""
msgstr ""

msgid "a triple (fontname, fontsize, fonttype)"
msgstr ""

msgid ""
"Write text - the string representation of *arg* - at the current turtle "
"position according to *align* (\"left\", \"center\" or \"right\") and with "
"the given font.  If *move* is true, the pen is moved to the bottom-right "
"corner of the text.  By default, *move* is ``False``."
msgstr ""

msgid ""
"Make the turtle invisible.  It's a good idea to do this while you're in the "
"middle of doing some complex drawing, because hiding the turtle speeds up "
"the drawing observably."
msgstr ""

msgid ">>> turtle.hideturtle()"
msgstr ""

msgid "Make the turtle visible."
msgstr ""

msgid ">>> turtle.showturtle()"
msgstr ""

msgid "Return ``True`` if the Turtle is shown, ``False`` if it's hidden."
msgstr ""

msgid "a string which is a valid shapename"
msgstr ""

msgid ""
"Set turtle shape to shape with given *name* or, if name is not given, return "
"name of current shape.  Shape with *name* must exist in the TurtleScreen's "
"shape dictionary.  Initially there are the following polygon shapes: "
"\"arrow\", \"turtle\", \"circle\", \"square\", \"triangle\", \"classic\".  "
"To learn about how to deal with shapes see Screen method :func:"
"`register_shape`."
msgstr ""

msgid ""
">>> turtle.shape()\n"
"'classic'\n"
">>> turtle.shape(\"turtle\")\n"
">>> turtle.shape()\n"
"'turtle'"
msgstr ""

msgid "one of the strings \"auto\", \"user\", \"noresize\""
msgstr ""

msgid ""
"Set resizemode to one of the values: \"auto\", \"user\", \"noresize\".  If "
"*rmode* is not given, return current resizemode.  Different resizemodes have "
"the following effects:"
msgstr ""

msgid ""
"\"auto\": adapts the appearance of the turtle corresponding to the value of "
"pensize."
msgstr ""

msgid ""
"\"user\": adapts the appearance of the turtle according to the values of "
"stretchfactor and outlinewidth (outline), which are set by :func:`shapesize`."
msgstr ""

msgid "\"noresize\": no adaption of the turtle's appearance takes place."
msgstr ""

msgid ""
"``resizemode(\"user\")`` is called by :func:`shapesize` when used with "
"arguments."
msgstr ""

msgid ""
">>> turtle.resizemode()\n"
"'noresize'\n"
">>> turtle.resizemode(\"auto\")\n"
">>> turtle.resizemode()\n"
"'auto'"
msgstr ""

msgid "positive number"
msgstr ""

msgid ""
"Return or set the pen's attributes x/y-stretchfactors and/or outline.  Set "
"resizemode to \"user\".  If and only if resizemode is set to \"user\", the "
"turtle will be displayed stretched according to its stretchfactors: "
"*stretch_wid* is stretchfactor perpendicular to its orientation, "
"*stretch_len* is stretchfactor in direction of its orientation, *outline* "
"determines the width of the shape's outline."
msgstr ""

msgid ""
">>> turtle.shapesize()\n"
"(1.0, 1.0, 1)\n"
">>> turtle.resizemode(\"user\")\n"
">>> turtle.shapesize(5, 5, 12)\n"
">>> turtle.shapesize()\n"
"(5, 5, 12)\n"
">>> turtle.shapesize(outline=8)\n"
">>> turtle.shapesize()\n"
"(5, 5, 8)"
msgstr ""

msgid "number (optional)"
msgstr ""

msgid ""
"Set or return the current shearfactor. Shear the turtleshape according to "
"the given shearfactor shear, which is the tangent of the shear angle. Do "
"*not* change the turtle's heading (direction of movement). If shear is not "
"given: return the current shearfactor, i. e. the tangent of the shear angle, "
"by which lines parallel to the heading of the turtle are sheared."
msgstr ""

msgid ""
">>> turtle.shape(\"circle\")\n"
">>> turtle.shapesize(5,2)\n"
">>> turtle.shearfactor(0.5)\n"
">>> turtle.shearfactor()\n"
"0.5"
msgstr ""

msgid ""
"Rotate the turtleshape by *angle* from its current tilt-angle, but do *not* "
"change the turtle's heading (direction of movement)."
msgstr ""

msgid ""
">>> turtle.reset()\n"
">>> turtle.shape(\"circle\")\n"
">>> turtle.shapesize(5,2)\n"
">>> turtle.tilt(30)\n"
">>> turtle.fd(50)\n"
">>> turtle.tilt(30)\n"
">>> turtle.fd(50)"
msgstr ""

msgid "a number (optional)"
msgstr ""

msgid ""
"Set or return the current tilt-angle. If angle is given, rotate the "
"turtleshape to point in the direction specified by angle, regardless of its "
"current tilt-angle. Do *not* change the turtle's heading (direction of "
"movement). If angle is not given: return the current tilt-angle, i. e. the "
"angle between the orientation of the turtleshape and the heading of the "
"turtle (its direction of movement)."
msgstr ""

msgid ""
">>> turtle.reset()\n"
">>> turtle.shape(\"circle\")\n"
">>> turtle.shapesize(5,2)\n"
">>> turtle.tilt(45)\n"
">>> turtle.tiltangle()\n"
"45.0"
msgstr ""

msgid "Set or return the current transformation matrix of the turtle shape."
msgstr ""

msgid ""
"If none of the matrix elements are given, return the transformation matrix "
"as a tuple of 4 elements. Otherwise set the given elements and transform the "
"turtleshape according to the matrix consisting of first row t11, t12 and "
"second row t21, t22. The determinant t11 * t22 - t12 * t21 must not be zero, "
"otherwise an error is raised. Modify stretchfactor, shearfactor and "
"tiltangle according to the given matrix."
msgstr ""

msgid ""
">>> turtle = Turtle()\n"
">>> turtle.shape(\"square\")\n"
">>> turtle.shapesize(4,2)\n"
">>> turtle.shearfactor(-0.5)\n"
">>> turtle.shapetransform()\n"
"(4.0, -1.0, -0.0, 2.0)"
msgstr ""

msgid ""
"Return the current shape polygon as tuple of coordinate pairs. This can be "
"used to define a new shape or components of a compound shape."
msgstr ""

msgid ""
">>> turtle.shape(\"square\")\n"
">>> turtle.shapetransform(4, -1, 0, 2)\n"
">>> turtle.get_shapepoly()\n"
"((50, -20), (30, 20), (-50, 20), (-30, -20))"
msgstr ""

msgid ""
"a function with two arguments which will be called with the coordinates of "
"the clicked point on the canvas"
msgstr ""

msgid "number of the mouse-button, defaults to 1 (left mouse button)"
msgstr ""

msgid ""
"``True`` or ``False`` -- if ``True``, a new binding will be added, otherwise "
"it will replace a former binding"
msgstr ""

msgid ""
"Bind *fun* to mouse-click events on this turtle.  If *fun* is ``None``, "
"existing bindings are removed.  Example for the anonymous turtle, i.e. the "
"procedural way:"
msgstr ""

msgid ""
">>> def turn(x, y):\n"
"...     left(180)\n"
"...\n"
">>> onclick(turn)  # Now clicking into the turtle will turn it.\n"
">>> onclick(None)  # event-binding will be removed"
msgstr ""

msgid ""
"Bind *fun* to mouse-button-release events on this turtle.  If *fun* is "
"``None``, existing bindings are removed."
msgstr ""

msgid ""
">>> class MyTurtle(Turtle):\n"
"...     def glow(self,x,y):\n"
"...         self.fillcolor(\"red\")\n"
"...     def unglow(self,x,y):\n"
"...         self.fillcolor(\"\")\n"
"...\n"
">>> turtle = MyTurtle()\n"
">>> turtle.onclick(turtle.glow)     # clicking on turtle turns fillcolor "
"red,\n"
">>> turtle.onrelease(turtle.unglow) # releasing turns it to transparent."
msgstr ""

msgid ""
"Bind *fun* to mouse-move events on this turtle.  If *fun* is ``None``, "
"existing bindings are removed."
msgstr ""

msgid ""
"Remark: Every sequence of mouse-move-events on a turtle is preceded by a "
"mouse-click event on that turtle."
msgstr ""

msgid ">>> turtle.ondrag(turtle.goto)"
msgstr ""

msgid ""
"Subsequently, clicking and dragging the Turtle will move it across the "
"screen thereby producing handdrawings (if pen is down)."
msgstr ""

msgid ""
"Record the vertices of a polygon drawn in the ``with turtle.poly():`` block. "
"The first and last vertices will be connected."
msgstr ""

msgid ""
">>> with turtle.poly():\n"
"...     turtle.forward(100)\n"
"...     turtle.right(60)\n"
"...     turtle.forward(100)"
msgstr ""

msgid ""
"Start recording the vertices of a polygon.  Current turtle position is first "
"vertex of polygon."
msgstr ""

msgid ""
"Stop recording the vertices of a polygon.  Current turtle position is last "
"vertex of polygon.  This will be connected with the first vertex."
msgstr ""

msgid "Return the last recorded polygon."
msgstr ""

msgid ""
">>> turtle.home()\n"
">>> turtle.begin_poly()\n"
">>> turtle.fd(100)\n"
">>> turtle.left(20)\n"
">>> turtle.fd(30)\n"
">>> turtle.left(60)\n"
">>> turtle.fd(50)\n"
">>> turtle.end_poly()\n"
">>> p = turtle.get_poly()\n"
">>> register_shape(\"myFavouriteShape\", p)"
msgstr ""

msgid ""
"Create and return a clone of the turtle with same position, heading and "
"turtle properties."
msgstr ""

msgid ""
">>> mick = Turtle()\n"
">>> joe = mick.clone()"
msgstr ""

msgid ""
"Return the Turtle object itself.  Only reasonable use: as a function to "
"return the \"anonymous turtle\":"
msgstr ""

msgid ""
">>> pet = getturtle()\n"
">>> pet.fd(50)\n"
">>> pet\n"
"<turtle.Turtle object at 0x...>"
msgstr ""

msgid ""
"Return the :class:`TurtleScreen` object the turtle is drawing on. "
"TurtleScreen methods can then be called for that object."
msgstr ""

msgid ""
">>> ts = turtle.getscreen()\n"
">>> ts\n"
"<turtle._Screen object at 0x...>\n"
">>> ts.bgcolor(\"pink\")"
msgstr ""

msgid "an integer or ``None``"
msgstr ""

msgid ""
"Set or disable undobuffer.  If *size* is an integer, an empty undobuffer of "
"given size is installed.  *size* gives the maximum number of turtle actions "
"that can be undone by the :func:`undo` method/function.  If *size* is "
"``None``, the undobuffer is disabled."
msgstr ""

msgid ">>> turtle.setundobuffer(42)"
msgstr ""

msgid "Return number of entries in the undobuffer."
msgstr ""

msgid ""
">>> while undobufferentries():\n"
"...     undo()"
msgstr ""

msgid "Compound shapes"
msgstr ""

msgid ""
"To use compound turtle shapes, which consist of several polygons of "
"different color, you must use the helper class :class:`Shape` explicitly as "
"described below:"
msgstr ""

msgid "Create an empty Shape object of type \"compound\"."
msgstr ""

msgid ""
"Add as many components to this object as desired, using the :meth:`~Shape."
"addcomponent` method."
msgstr ""

msgid "For example:"
msgstr ""

msgid ""
">>> s = Shape(\"compound\")\n"
">>> poly1 = ((0,0),(10,-5),(0,10),(-10,-5))\n"
">>> s.addcomponent(poly1, \"red\", \"blue\")\n"
">>> poly2 = ((0,0),(10,-5),(-10,-5))\n"
">>> s.addcomponent(poly2, \"blue\", \"red\")"
msgstr ""

msgid "Now add the Shape to the Screen's shapelist and use it:"
msgstr ""

msgid ""
">>> register_shape(\"myshape\", s)\n"
">>> shape(\"myshape\")"
msgstr ""

msgid ""
"The :class:`Shape` class is used internally by the :func:`register_shape` "
"method in different ways.  The application programmer has to deal with the "
"Shape class *only* when using compound shapes like shown above!"
msgstr ""

msgid "Methods of TurtleScreen/Screen and corresponding functions"
msgstr ""

msgid ""
"Most of the examples in this section refer to a TurtleScreen instance called "
"``screen``."
msgstr ""

msgid ""
"a color string or three numbers in the range 0..colormode or a 3-tuple of "
"such numbers"
msgstr ""

msgid "Set or return background color of the TurtleScreen."
msgstr ""

msgid ""
">>> screen.bgcolor(\"orange\")\n"
">>> screen.bgcolor()\n"
"'orange'\n"
">>> screen.bgcolor(\"#800080\")\n"
">>> screen.bgcolor()\n"
"(128.0, 0.0, 128.0)"
msgstr ""

msgid ""
"a string, name of an image file (PNG, GIF, PGM, and PPM) or ``\"nopic\"``, "
"or ``None``"
msgstr ""

msgid ""
"Set background image or return name of current backgroundimage.  If "
"*picname* is a filename, set the corresponding image as background.  If "
"*picname* is ``\"nopic\"``, delete background image, if present.  If "
"*picname* is ``None``, return the filename of the current backgroundimage. ::"
msgstr ""

msgid ""
">>> screen.bgpic()\n"
"'nopic'\n"
">>> screen.bgpic(\"landscape.gif\")\n"
">>> screen.bgpic()\n"
"\"landscape.gif\""
msgstr ""

msgid ""
"This TurtleScreen method is available as a global function only under the "
"name ``clearscreen``.  The global function ``clear`` is a different one "
"derived from the Turtle method ``clear``."
msgstr ""

msgid ""
"Delete all drawings and all turtles from the TurtleScreen.  Reset the now "
"empty TurtleScreen to its initial state: white background, no background "
"image, no event bindings and tracing on."
msgstr ""

msgid ""
"This TurtleScreen method is available as a global function only under the "
"name ``resetscreen``.  The global function ``reset`` is another one derived "
"from the Turtle method ``reset``."
msgstr ""

msgid "Reset all Turtles on the Screen to their initial state."
msgstr ""

msgid "positive integer, new width of canvas in pixels"
msgstr ""

msgid "positive integer, new height of canvas in pixels"
msgstr ""

msgid "colorstring or color-tuple, new background color"
msgstr ""

msgid ""
"If no arguments are given, return current (canvaswidth, canvasheight).  Else "
"resize the canvas the turtles are drawing on.  Do not alter the drawing "
"window.  To observe hidden parts of the canvas, use the scrollbars. With "
"this method, one can make visible those parts of a drawing which were "
"outside the canvas before."
msgstr ""

msgid "e.g. to search for an erroneously escaped turtle ;-)"
msgstr ""

msgid "a number, x-coordinate of lower left corner of canvas"
msgstr ""

msgid "a number, y-coordinate of lower left corner of canvas"
msgstr ""

msgid "a number, x-coordinate of upper right corner of canvas"
msgstr ""

msgid "a number, y-coordinate of upper right corner of canvas"
msgstr ""

msgid ""
"Set up user-defined coordinate system and switch to mode \"world\" if "
"necessary.  This performs a ``screen.reset()``.  If mode \"world\" is "
"already active, all drawings are redrawn according to the new coordinates."
msgstr ""

msgid ""
"**ATTENTION**: in user-defined coordinate systems angles may appear "
"distorted."
msgstr ""

msgid ""
">>> screen.reset()\n"
">>> screen.setworldcoordinates(-50,-7.5,50,7.5)\n"
">>> for _ in range(72):\n"
"...     left(10)\n"
"...\n"
">>> for _ in range(8):\n"
"...     left(45); fd(2)   # a regular octagon"
msgstr ""

msgid ""
"Temporarily disable turtle animation. The code written inside the "
"``no_animation`` block will not be animated; once the code block is exited, "
"the drawing will appear."
msgstr ""

msgid ""
">>> with screen.no_animation():\n"
"...     for dist in range(2, 400, 2):\n"
"...         fd(dist)\n"
"...         rt(90)"
msgstr ""

msgid "positive integer"
msgstr ""

msgid ""
"Set or return the drawing *delay* in milliseconds.  (This is approximately "
"the time interval between two consecutive canvas updates.)  The longer the "
"drawing delay, the slower the animation."
msgstr ""

msgid "Optional argument:"
msgstr ""

msgid ""
">>> screen.delay()\n"
"10\n"
">>> screen.delay(5)\n"
">>> screen.delay()\n"
"5"
msgstr ""

msgid "nonnegative integer"
msgstr ""

msgid ""
"Turn turtle animation on/off and set delay for update drawings.  If *n* is "
"given, only each n-th regular screen update is really performed.  (Can be "
"used to accelerate the drawing of complex graphics.)  When called without "
"arguments, returns the currently stored value of n. Second argument sets "
"delay value (see :func:`delay`)."
msgstr ""

msgid ""
">>> screen.tracer(8, 25)\n"
">>> dist = 2\n"
">>> for i in range(200):\n"
"...     fd(dist)\n"
"...     rt(90)\n"
"...     dist += 2"
msgstr ""

msgid "Perform a TurtleScreen update. To be used when tracer is turned off."
msgstr ""

msgid "See also the RawTurtle/Turtle method :func:`speed`."
msgstr ""

msgid ""
"Set focus on TurtleScreen (in order to collect key-events).  Dummy arguments "
"are provided in order to be able to pass :func:`listen` to the onclick "
"method."
msgstr ""

msgid "a function with no arguments or ``None``"
msgstr ""

msgid "a string: key (e.g. \"a\") or key-symbol (e.g. \"space\")"
msgstr ""

msgid ""
"Bind *fun* to key-release event of key.  If *fun* is ``None``, event "
"bindings are removed. Remark: in order to be able to register key-events, "
"TurtleScreen must have the focus. (See method :func:`listen`.)"
msgstr ""

msgid ""
">>> def f():\n"
"...     fd(50)\n"
"...     lt(60)\n"
"...\n"
">>> screen.onkey(f, \"Up\")\n"
">>> screen.listen()"
msgstr ""

msgid ""
"Bind *fun* to key-press event of key if key is given, or to any key-press-"
"event if no key is given. Remark: in order to be able to register key-"
"events, TurtleScreen must have focus. (See method :func:`listen`.)"
msgstr ""

msgid ""
">>> def f():\n"
"...     fd(50)\n"
"...\n"
">>> screen.onkey(f, \"Up\")\n"
">>> screen.listen()"
msgstr ""

msgid ""
"Bind *fun* to mouse-click events on this screen.  If *fun* is ``None``, "
"existing bindings are removed."
msgstr ""

msgid ""
"Example for a TurtleScreen instance named ``screen`` and a Turtle instance "
"named ``turtle``:"
msgstr ""

msgid ""
">>> screen.onclick(turtle.goto) # Subsequently clicking into the "
"TurtleScreen will\n"
">>>                             # make the turtle move to the clicked "
"point.\n"
">>> screen.onclick(None)        # remove event binding again"
msgstr ""

msgid ""
"This TurtleScreen method is available as a global function only under the "
"name ``onscreenclick``.  The global function ``onclick`` is another one "
"derived from the Turtle method ``onclick``."
msgstr ""

msgid "a function with no arguments"
msgstr ""

msgid "a number >= 0"
msgstr ""

msgid "Install a timer that calls *fun* after *t* milliseconds."
msgstr ""

msgid ""
">>> running = True\n"
">>> def f():\n"
"...     if running:\n"
"...         fd(50)\n"
"...         lt(60)\n"
"...         screen.ontimer(f, 250)\n"
">>> f()   ### makes the turtle march around\n"
">>> running = False"
msgstr ""

msgid ""
"Starts event loop - calling Tkinter's mainloop function. Must be the last "
"statement in a turtle graphics program. Must *not* be used if a script is "
"run from within IDLE in -n mode (No subprocess) - for interactive use of "
"turtle graphics. ::"
msgstr ""

msgid ">>> screen.mainloop()"
msgstr ""

msgid "string"
msgstr ""

msgid ""
"Pop up a dialog window for input of a string. Parameter title is the title "
"of the dialog window, prompt is a text mostly describing what information to "
"input. Return the string input. If the dialog is canceled, return "
"``None``. ::"
msgstr ""

msgid ">>> screen.textinput(\"NIM\", \"Name of first player:\")"
msgstr ""

msgid ""
"Pop up a dialog window for input of a number. title is the title of the "
"dialog window, prompt is a text mostly describing what numerical information "
"to input. default: default value, minval: minimum value for input, maxval: "
"maximum value for input. The number input must be in the range minval .. "
"maxval if these are given. If not, a hint is issued and the dialog remains "
"open for correction. Return the number input. If the dialog is canceled,  "
"return ``None``. ::"
msgstr ""

msgid ""
">>> screen.numinput(\"Poker\", \"Your stakes:\", 1000, minval=10, "
"maxval=10000)"
msgstr ""

msgid "one of the strings \"standard\", \"logo\" or \"world\""
msgstr ""

msgid ""
"Set turtle mode (\"standard\", \"logo\" or \"world\") and perform reset.  If "
"mode is not given, current mode is returned."
msgstr ""

msgid ""
"Mode \"standard\" is compatible with old :mod:`turtle`.  Mode \"logo\" is "
"compatible with most Logo turtle graphics.  Mode \"world\" uses user-defined "
"\"world coordinates\". **Attention**: in this mode angles appear distorted "
"if ``x/y`` unit-ratio doesn't equal 1."
msgstr ""

msgid "Mode"
msgstr ""

msgid "Initial turtle heading"
msgstr ""

msgid "positive angles"
msgstr ""

msgid "\"standard\""
msgstr ""

msgid "to the right (east)"
msgstr ""

msgid "counterclockwise"
msgstr ""

msgid "\"logo\""
msgstr ""

msgid "upward    (north)"
msgstr ""

msgid "clockwise"
msgstr ""

msgid ""
">>> mode(\"logo\")   # resets turtle heading to north\n"
">>> mode()\n"
"'logo'"
msgstr ""

msgid "one of the values 1.0 or 255"
msgstr ""

msgid ""
"Return the colormode or set it to 1.0 or 255.  Subsequently *r*, *g*, *b* "
"values of color triples have to be in the range 0..*cmode*."
msgstr ""

msgid ""
">>> screen.colormode(1)\n"
">>> turtle.pencolor(240, 160, 80)\n"
"Traceback (most recent call last):\n"
"     ...\n"
"TurtleGraphicsError: bad color sequence: (240, 160, 80)\n"
">>> screen.colormode()\n"
"1.0\n"
">>> screen.colormode(255)\n"
">>> screen.colormode()\n"
"255\n"
">>> turtle.pencolor(240,160,80)"
msgstr ""

msgid ""
"Return the Canvas of this TurtleScreen.  Useful for insiders who know what "
"to do with a Tkinter Canvas."
msgstr ""

msgid ""
">>> cv = screen.getcanvas()\n"
">>> cv\n"
"<turtle.ScrolledCanvas object ...>"
msgstr ""

msgid "Return a list of names of all currently available turtle shapes."
msgstr ""

msgid ""
">>> screen.getshapes()\n"
"['arrow', 'blank', 'circle', ..., 'turtle']"
msgstr ""

msgid "There are four different ways to call this function:"
msgstr ""

msgid ""
"*name* is the name of an image file (PNG, GIF, PGM, and PPM) and *shape* is "
"``None``: Install the corresponding image shape. ::"
msgstr ""

msgid ">>> screen.register_shape(\"turtle.gif\")"
msgstr ""

msgid ""
"Image shapes *do not* rotate when turning the turtle, so they do not display "
"the heading of the turtle!"
msgstr ""

msgid ""
"*name* is an arbitrary string and *shape* is the name of an image file (PNG, "
"GIF, PGM, and PPM): Install the corresponding image shape. ::"
msgstr ""

msgid ">>> screen.register_shape(\"turtle\", \"turtle.gif\")"
msgstr ""

msgid ""
"*name* is an arbitrary string and *shape* is a tuple of pairs of "
"coordinates: Install the corresponding polygon shape."
msgstr ""

msgid ">>> screen.register_shape(\"triangle\", ((5,-3), (0,5), (-5,-3)))"
msgstr ""

msgid ""
"*name* is an arbitrary string and *shape* is a (compound) :class:`Shape` "
"object: Install the corresponding compound shape."
msgstr ""

msgid ""
"Add a turtle shape to TurtleScreen's shapelist.  Only thusly registered "
"shapes can be used by issuing the command ``shape(shapename)``."
msgstr ""

msgid ""
"Added support for PNG, PGM, and PPM image formats. Both a shape name and an "
"image file name can be specified."
msgstr ""

msgid "Return the list of turtles on the screen."
msgstr ""

msgid ""
">>> for turtle in screen.turtles():\n"
"...     turtle.color(\"red\")"
msgstr ""

msgid "Return the height of the turtle window. ::"
msgstr ""

msgid ""
">>> screen.window_height()\n"
"480"
msgstr ""

msgid "Return the width of the turtle window. ::"
msgstr ""

msgid ""
">>> screen.window_width()\n"
"640"
msgstr ""

msgid "Methods specific to Screen, not inherited from TurtleScreen"
msgstr ""

msgid "Shut the turtlegraphics window."
msgstr ""

msgid "Bind ``bye()`` method to mouse clicks on the Screen."
msgstr ""

msgid ""
"If the value \"using_IDLE\" in the configuration dictionary is ``False`` "
"(default value), also enter mainloop.  Remark: If IDLE with the ``-n`` "
"switch (no subprocess) is used, this value should be set to ``True`` in :"
"file:`turtle.cfg`.  In this case IDLE's own mainloop is active also for the "
"client script."
msgstr ""

msgid "Save the current turtle drawing (and turtles) as a PostScript file."
msgstr ""

msgid "the path of the saved PostScript file"
msgstr ""

msgid ""
"if ``False`` and there already exists a file with the given filename, then "
"the function will raise a ``FileExistsError``. If it is ``True``, the file "
"will be overwritten."
msgstr ""

msgid ""
">>> screen.save(\"my_drawing.ps\")\n"
">>> screen.save(\"my_drawing.ps\", overwrite=True)"
msgstr ""

msgid ""
"Set the size and position of the main window.  Default values of arguments "
"are stored in the configuration dictionary and can be changed via a :file:"
"`turtle.cfg` file."
msgstr ""

msgid ""
"if an integer, a size in pixels, if a float, a fraction of the screen; "
"default is 50% of screen"
msgstr ""

msgid ""
"if an integer, the height in pixels, if a float, a fraction of the screen; "
"default is 75% of screen"
msgstr ""

msgid ""
"if positive, starting position in pixels from the left edge of the screen, "
"if negative from the right edge, if ``None``, center window horizontally"
msgstr ""

msgid ""
"if positive, starting position in pixels from the top edge of the screen, if "
"negative from the bottom edge, if ``None``, center window vertically"
msgstr ""

msgid ""
">>> screen.setup (width=200, height=200, startx=0, starty=0)\n"
">>>              # sets window to 200x200 pixels, in upper left of screen\n"
">>> screen.setup(width=.75, height=0.5, startx=None, starty=None)\n"
">>>              # sets window to 75% of screen by 50% of screen and centers"
msgstr ""

msgid "a string that is shown in the titlebar of the turtle graphics window"
msgstr ""

msgid "Set title of turtle window to *titlestring*."
msgstr ""

msgid ">>> screen.title(\"Welcome to the turtle zoo!\")"
msgstr ""

msgid "Public classes"
msgstr ""

msgid ""
"a :class:`!tkinter.Canvas`, a :class:`ScrolledCanvas` or a :class:"
"`TurtleScreen`"
msgstr ""

msgid ""
"Create a turtle.  The turtle has all methods described above as \"methods of "
"Turtle/RawTurtle\"."
msgstr ""

msgid ""
"Subclass of RawTurtle, has the same interface but draws on a default :class:"
"`Screen` object created automatically when needed for the first time."
msgstr ""

msgid "a :class:`!tkinter.Canvas`"
msgstr ""

msgid ""
"Provides screen oriented methods like :func:`bgcolor` etc. that are "
"described above."
msgstr ""

msgid ""
"Subclass of TurtleScreen, with :ref:`four methods added <screenspecific>`."
msgstr ""

msgid ""
"some Tkinter widget to contain the ScrolledCanvas, i.e. a Tkinter-canvas "
"with scrollbars added"
msgstr ""

msgid ""
"Used by class Screen, which thus automatically provides a ScrolledCanvas as "
"playground for the turtles."
msgstr ""

msgid "one of the strings \"polygon\", \"image\", \"compound\""
msgstr ""

msgid ""
"Data structure modeling shapes.  The pair ``(type_, data)`` must follow this "
"specification:"
msgstr ""

msgid "*type_*"
msgstr ""

msgid "*data*"
msgstr ""

msgid "\"polygon\""
msgstr ""

msgid "a polygon-tuple, i.e. a tuple of pairs of coordinates"
msgstr ""

msgid "\"image\""
msgstr ""

msgid "an image  (in this form only used internally!)"
msgstr ""

msgid "\"compound\""
msgstr ""

msgid ""
"``None`` (a compound shape has to be constructed using the :meth:"
"`addcomponent` method)"
msgstr ""

msgid "a polygon, i.e. a tuple of pairs of numbers"
msgstr ""

msgid "a color the *poly* will be filled with"
msgstr ""

msgid "a color for the poly's outline (if given)"
msgstr ""

msgid "Example:"
msgstr ""

msgid ""
">>> poly = ((0,0),(10,-5),(0,10),(-10,-5))\n"
">>> s = Shape(\"compound\")\n"
">>> s.addcomponent(poly, \"red\", \"blue\")\n"
">>> # ... add more components and then use register_shape()"
msgstr ""

msgid "See :ref:`compoundshapes`."
msgstr ""

msgid ""
"A two-dimensional vector class, used as a helper class for implementing "
"turtle graphics.  May be useful for turtle graphics programs too.  Derived "
"from tuple, so a vector is a tuple!"
msgstr ""

msgid "Provides (for *a*, *b* vectors, *k* number):"
msgstr ""

msgid "``a + b`` vector addition"
msgstr ""

msgid "``a - b`` vector subtraction"
msgstr ""

msgid "``a * b`` inner product"
msgstr ""

msgid "``k * a`` and ``a * k`` multiplication with scalar"
msgstr ""

msgid "``abs(a)`` absolute value of a"
msgstr ""

msgid "``a.rotate(angle)`` rotation"
msgstr ""

msgid "Explanation"
msgstr ""

msgid ""
"A turtle object draws on a screen object, and there a number of key classes "
"in the turtle object-oriented interface that can be used to create them and "
"relate them to each other."
msgstr ""

msgid ""
"A :class:`Turtle` instance will automatically create a :class:`Screen` "
"instance if one is not already present."
msgstr ""

msgid ""
"``Turtle`` is a subclass of :class:`RawTurtle`, which *doesn't* "
"automatically create a drawing surface - a *canvas* will need to be provided "
"or created for it. The *canvas* can be a :class:`!tkinter.Canvas`, :class:"
"`ScrolledCanvas` or :class:`TurtleScreen`."
msgstr ""

msgid ""
":class:`TurtleScreen` is the basic drawing surface for a turtle. :class:"
"`Screen` is a subclass of ``TurtleScreen``, and includes :ref:`some "
"additional methods <screenspecific>` for managing its appearance (including "
"size and title) and behaviour. ``TurtleScreen``'s constructor needs a :class:"
"`!tkinter.Canvas` or a :class:`ScrolledCanvas` as an argument."
msgstr ""

msgid ""
"The functional interface for turtle graphics uses the various methods of "
"``Turtle`` and ``TurtleScreen``/``Screen``. Behind the scenes, a screen "
"object is automatically created whenever a function derived from a "
"``Screen`` method is called. Similarly, a turtle object is automatically "
"created whenever any of the functions derived from a Turtle method is called."
msgstr ""

msgid ""
"To use multiple turtles on a screen, the object-oriented interface must be "
"used."
msgstr ""

msgid "Help and configuration"
msgstr ""

msgid "How to use help"
msgstr ""

msgid ""
"The public methods of the Screen and Turtle classes are documented "
"extensively via docstrings.  So these can be used as online-help via the "
"Python help facilities:"
msgstr ""

msgid ""
"When using IDLE, tooltips show the signatures and first lines of the "
"docstrings of typed in function-/method calls."
msgstr ""

msgid "Calling :func:`help` on methods or functions displays the docstrings::"
msgstr ""

msgid ""
">>> help(Screen.bgcolor)\n"
"Help on method bgcolor in module turtle:\n"
"\n"
"bgcolor(self, *args) unbound turtle.Screen method\n"
"    Set or return backgroundcolor of the TurtleScreen.\n"
"\n"
"    Arguments (if given): a color string or three numbers\n"
"    in the range 0..colormode or a 3-tuple of such numbers.\n"
"\n"
"\n"
"    >>> screen.bgcolor(\"orange\")\n"
"    >>> screen.bgcolor()\n"
"    \"orange\"\n"
"    >>> screen.bgcolor(0.5,0,0.5)\n"
"    >>> screen.bgcolor()\n"
"    \"#800080\"\n"
"\n"
">>> help(Turtle.penup)\n"
"Help on method penup in module turtle:\n"
"\n"
"penup(self) unbound turtle.Turtle method\n"
"    Pull the pen up -- no drawing when moving.\n"
"\n"
"    Aliases: penup | pu | up\n"
"\n"
"    No argument\n"
"\n"
"    >>> turtle.penup()"
msgstr ""

msgid ""
"The docstrings of the functions which are derived from methods have a "
"modified form::"
msgstr ""

msgid ""
">>> help(bgcolor)\n"
"Help on function bgcolor in module turtle:\n"
"\n"
"bgcolor(*args)\n"
"    Set or return backgroundcolor of the TurtleScreen.\n"
"\n"
"    Arguments (if given): a color string or three numbers\n"
"    in the range 0..colormode or a 3-tuple of such numbers.\n"
"\n"
"    Example::\n"
"\n"
"      >>> bgcolor(\"orange\")\n"
"      >>> bgcolor()\n"
"      \"orange\"\n"
"      >>> bgcolor(0.5,0,0.5)\n"
"      >>> bgcolor()\n"
"      \"#800080\"\n"
"\n"
">>> help(penup)\n"
"Help on function penup in module turtle:\n"
"\n"
"penup()\n"
"    Pull the pen up -- no drawing when moving.\n"
"\n"
"    Aliases: penup | pu | up\n"
"\n"
"    No argument\n"
"\n"
"    Example:\n"
"    >>> penup()"
msgstr ""

msgid ""
"These modified docstrings are created automatically together with the "
"function definitions that are derived from the methods at import time."
msgstr ""

msgid "Translation of docstrings into different languages"
msgstr ""

msgid ""
"There is a utility to create a dictionary the keys of which are the method "
"names and the values of which are the docstrings of the public methods of "
"the classes Screen and Turtle."
msgstr ""

msgid "a string, used as filename"
msgstr ""

msgid ""
"Create and write docstring-dictionary to a Python script with the given "
"filename.  This function has to be called explicitly (it is not used by the "
"turtle graphics classes).  The docstring dictionary will be written to the "
"Python script :file:`{filename}.py`.  It is intended to serve as a template "
"for translation of the docstrings into different languages."
msgstr ""

msgid ""
"If you (or your students) want to use :mod:`turtle` with online help in your "
"native language, you have to translate the docstrings and save the resulting "
"file as e.g. :file:`turtle_docstringdict_german.py`."
msgstr ""

msgid ""
"If you have an appropriate entry in your :file:`turtle.cfg` file this "
"dictionary will be read in at import time and will replace the original "
"English docstrings."
msgstr ""

msgid ""
"At the time of this writing there are docstring dictionaries in German and "
"in Italian.  (Requests please to glingl@aon.at.)"
msgstr ""

msgid "How to configure Screen and Turtles"
msgstr ""

msgid ""
"The built-in default configuration mimics the appearance and behaviour of "
"the old turtle module in order to retain best possible compatibility with it."
msgstr ""

msgid ""
"If you want to use a different configuration which better reflects the "
"features of this module or which better fits to your needs, e.g. for use in "
"a classroom, you can prepare a configuration file ``turtle.cfg`` which will "
"be read at import time and modify the configuration according to its "
"settings."
msgstr ""

msgid ""
"The built in configuration would correspond to the following ``turtle.cfg``:"
msgstr ""

msgid ""
"width = 0.5\n"
"height = 0.75\n"
"leftright = None\n"
"topbottom = None\n"
"canvwidth = 400\n"
"canvheight = 300\n"
"mode = standard\n"
"colormode = 1.0\n"
"delay = 10\n"
"undobuffersize = 1000\n"
"shape = classic\n"
"pencolor = black\n"
"fillcolor = black\n"
"resizemode = noresize\n"
"visible = True\n"
"language = english\n"
"exampleturtle = turtle\n"
"examplescreen = screen\n"
"title = Python Turtle Graphics\n"
"using_IDLE = False"
msgstr ""

msgid "Short explanation of selected entries:"
msgstr ""

msgid ""
"The first four lines correspond to the arguments of the :func:`Screen.setup "
"<setup>` method."
msgstr ""

msgid ""
"Line 5 and 6 correspond to the arguments of the method :func:`Screen."
"screensize <screensize>`."
msgstr ""

msgid ""
"*shape* can be any of the built-in shapes, e.g: arrow, turtle, etc.  For "
"more info try ``help(shape)``."
msgstr ""

msgid ""
"If you want to use no fill color (i.e. make the turtle transparent), you "
"have to write ``fillcolor = \"\"`` (but all nonempty strings must not have "
"quotes in the cfg file)."
msgstr ""

msgid ""
"If you want to reflect the turtle its state, you have to use ``resizemode = "
"auto``."
msgstr ""

msgid ""
"If you set e.g. ``language = italian`` the docstringdict :file:"
"`turtle_docstringdict_italian.py` will be loaded at import time (if present "
"on the import path, e.g. in the same directory as :mod:`turtle`)."
msgstr ""

msgid ""
"The entries *exampleturtle* and *examplescreen* define the names of these "
"objects as they occur in the docstrings.  The transformation of method-"
"docstrings to function-docstrings will delete these names from the "
"docstrings."
msgstr ""

msgid ""
"*using_IDLE*: Set this to ``True`` if you regularly work with IDLE and its "
"``-n`` switch (\"no subprocess\").  This will prevent :func:`exitonclick` to "
"enter the mainloop."
msgstr ""

msgid ""
"There can be a :file:`turtle.cfg` file in the directory where :mod:`turtle` "
"is stored and an additional one in the current working directory.  The "
"latter will override the settings of the first one."
msgstr ""

msgid ""
"The :file:`Lib/turtledemo` directory contains a :file:`turtle.cfg` file.  "
"You can study it as an example and see its effects when running the demos "
"(preferably not from within the demo-viewer)."
msgstr ""

msgid ":mod:`turtledemo` --- Demo scripts"
msgstr ""

msgid ""
"The :mod:`turtledemo` package includes a set of demo scripts.  These scripts "
"can be run and viewed using the supplied demo viewer as follows::"
msgstr ""

msgid "python -m turtledemo"
msgstr ""

msgid ""
"Alternatively, you can run the demo scripts individually.  For example, ::"
msgstr ""

msgid "python -m turtledemo.bytedesign"
msgstr ""

msgid "The :mod:`turtledemo` package directory contains:"
msgstr ""

msgid ""
"A demo viewer :file:`__main__.py` which can be used to view the sourcecode "
"of the scripts and run them at the same time."
msgstr ""

msgid ""
"Multiple scripts demonstrating different features of the :mod:`turtle` "
"module.  Examples can be accessed via the Examples menu.  They can also be "
"run standalone."
msgstr ""

msgid ""
"A :file:`turtle.cfg` file which serves as an example of how to write and use "
"such files."
msgstr ""

msgid "The demo scripts are:"
msgstr ""

msgid "Name"
msgstr ""

msgid "Description"
msgstr ""

msgid "Features"
msgstr ""

msgid "bytedesign"
msgstr ""

msgid "complex classical turtle graphics pattern"
msgstr ""

msgid ":func:`tracer`, delay, :func:`update`"
msgstr ""

msgid "chaos"
msgstr ""

msgid ""
"graphs Verhulst dynamics, shows that computer's computations can generate "
"results sometimes against the common sense expectations"
msgstr ""

msgid "world coordinates"
msgstr ""

msgid "clock"
msgstr ""

msgid "analog clock showing time of your computer"
msgstr ""

msgid "turtles as clock's hands, ontimer"
msgstr ""

msgid "colormixer"
msgstr ""

msgid "experiment with r, g, b"
msgstr ""

msgid "forest"
msgstr ""

msgid "3 breadth-first trees"
msgstr ""

msgid "randomization"
msgstr ""

msgid "fractalcurves"
msgstr ""

msgid "Hilbert & Koch curves"
msgstr ""

msgid "recursion"
msgstr ""

msgid "lindenmayer"
msgstr ""

msgid "ethnomathematics (indian kolams)"
msgstr ""

msgid "L-System"
msgstr ""

msgid "minimal_hanoi"
msgstr ""

msgid "Towers of Hanoi"
msgstr ""

msgid "Rectangular Turtles as Hanoi discs (shape, shapesize)"
msgstr ""

msgid "nim"
msgstr ""

msgid ""
"play the classical nim game with three heaps of sticks against the computer."
msgstr ""

msgid "turtles as nimsticks, event driven (mouse, keyboard)"
msgstr ""

msgid "paint"
msgstr ""

msgid "super minimalistic drawing program"
msgstr ""

msgid "peace"
msgstr ""

msgid "elementary"
msgstr ""

msgid "turtle: appearance and animation"
msgstr ""

msgid "penrose"
msgstr ""

msgid "aperiodic tiling with kites and darts"
msgstr ""

msgid "planet_and_moon"
msgstr ""

msgid "simulation of gravitational system"
msgstr ""

msgid "compound shapes, :class:`Vec2D`"
msgstr ""

msgid "rosette"
msgstr ""

msgid "a pattern from the wikipedia article on turtle graphics"
msgstr ""

msgid ":func:`clone`, :func:`undo`"
msgstr ""

msgid "round_dance"
msgstr ""

msgid "dancing turtles rotating pairwise in opposite direction"
msgstr ""

msgid "compound shapes, clone shapesize, tilt, get_shapepoly, update"
msgstr ""

msgid "sorting_animate"
msgstr ""

msgid "visual demonstration of different sorting methods"
msgstr ""

msgid "simple alignment, randomization"
msgstr ""

msgid "tree"
msgstr ""

msgid "a (graphical) breadth first tree (using generators)"
msgstr ""

msgid "two_canvases"
msgstr ""

msgid "simple design"
msgstr ""

msgid "turtles on two canvases"
msgstr ""

msgid "yinyang"
msgstr ""

msgid "another elementary example"
msgstr ""

msgid "Have fun!"
msgstr ""

msgid "Changes since Python 2.6"
msgstr ""

msgid ""
"The methods :func:`Turtle.tracer <tracer>`, :func:`Turtle.window_width "
"<window_width>` and :func:`Turtle.window_height <window_height>` have been "
"eliminated. Methods with these names and functionality are now available "
"only as methods of :class:`Screen`. The functions derived from these remain "
"available. (In fact already in Python 2.6 these methods were merely "
"duplications of the corresponding :class:`TurtleScreen`/:class:`Screen` "
"methods.)"
msgstr ""

msgid ""
"The method :func:`!Turtle.fill` has been eliminated. The behaviour of :func:"
"`begin_fill` and :func:`end_fill` have changed slightly: now every filling "
"process must be completed with an ``end_fill()`` call."
msgstr ""

msgid ""
"A method :func:`Turtle.filling <filling>` has been added. It returns a "
"boolean value: ``True`` if a filling process is under way, ``False`` "
"otherwise. This behaviour corresponds to a ``fill()`` call without arguments "
"in Python 2.6."
msgstr ""

msgid "Changes since Python 3.0"
msgstr ""

msgid ""
"The :class:`Turtle` methods :func:`shearfactor`, :func:`shapetransform` and :"
"func:`get_shapepoly` have been added. Thus the full range of regular linear "
"transforms is now available for transforming turtle shapes. :func:"
"`tiltangle` has been enhanced in functionality: it now can be used to get or "
"set the tilt angle."
msgstr ""

msgid ""
"The :class:`Screen` method :func:`onkeypress` has been added as a complement "
"to :func:`onkey`. As the latter binds actions to the key release event, an "
"alias: :func:`onkeyrelease` was also added for it."
msgstr ""

msgid ""
"The method :func:`Screen.mainloop <mainloop>` has been added, so there is no "
"longer a need to use the standalone :func:`mainloop` function when working "
"with :class:`Screen` and :class:`Turtle` objects."
msgstr ""

msgid ""
"Two input methods have been added: :func:`Screen.textinput <textinput>` and :"
"func:`Screen.numinput <numinput>`. These pop up input dialogs and return "
"strings and numbers respectively."
msgstr ""
