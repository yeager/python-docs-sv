# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's new in Python 3.14"
msgstr "Vad är nytt i Python 3.14"

msgid "Editor"
msgstr "Redigerare"

msgid "Hugo van Kemenade"
msgstr "Hugo van Kemenade"

msgid ""
"This article explains the new features in Python 3.14, compared to 3.13."
msgstr ""
"I den här artikeln beskrivs de nya funktionerna i Python 3.14 jämfört med "
"3.13."

msgid "For full details, see the :ref:`changelog <changelog>`."
msgstr "För fullständig information, se :ref:`changelog <changelog>`."

msgid ":pep:`745` -- Python 3.14 release schedule"
msgstr ":pep:`745` -- Python 3.14 lanseringsschema"

msgid ""
"Prerelease users should be aware that this document is currently in draft "
"form. It will be updated substantially as Python 3.14 moves towards release, "
"so it's worth checking back even after reading earlier versions."
msgstr ""
"Prerelease-användare bör vara medvetna om att detta dokument för närvarande "
"är i utkastform. Det kommer att uppdateras väsentligt när Python 3.14 rör "
"sig mot release, så det är värt att kolla tillbaka även efter att ha läst "
"tidigare versioner."

msgid "Summary -- release highlights"
msgstr "Sammanfattning -- release highlights"

msgid ""
"Python 3.14 beta is the pre-release of the next version of the Python "
"programming language, with a mix of changes to the language, the "
"implementation and the standard library."
msgstr ""
"Python 3.14 beta är en förhandsversion av nästa version av "
"programmeringsspråket Python, med en blandning av ändringar i språket, "
"implementeringen och standardbiblioteket."

msgid ""
"The biggest changes to the implementation include template strings (:pep:"
"`750`), deferred evaluation of annotations (:pep:`649`), and a new type of "
"interpreter that uses tail calls."
msgstr ""
"De största förändringarna i implementationen är mallsträngar (:pep:`750`), "
"uppskjuten utvärdering av annotationer (:pep:`649`) och en ny typ av tolk "
"som använder tail-anrop."

msgid ""
"The library changes include the addition of a new :mod:`!annotationlib` "
"module for introspecting and wrapping annotations (:pep:`749`), a new :mod:`!"
"compression.zstd` module for Zstandard support (:pep:`784`), plus syntax "
"highlighting in the REPL, as well as the usual deprecations and removals, "
"and improvements in user-friendliness and correctness."
msgstr ""
"Biblioteksändringarna inkluderar tillägg av en ny :mod:`!annotationlib`-"
"modul för introspektion och omslag av anteckningar (:pep:`749`), en ny :mod:"
"`!compression.zstd`-modul för Zstandard-stöd (:pep:`784`), plus "
"syntaxmarkering i REPL, samt de vanliga avskrivningarna och borttagningarna "
"och förbättringar av användarvänlighet och korrekthet."

msgid ""
":ref:`PEP 779: Free-threaded Python is officially supported <whatsnew314-"
"pep779>`"
msgstr ""
":ref:`PEP 779: Fri trådad Python stöds officiellt <whatsnew314-pep779>`"

msgid ""
":ref:`PEP 649 and 749: deferred evaluation of annotations <whatsnew314-"
"pep649>`"
msgstr ""
":ref:`PEP 649 och 749: uppskjuten utvärdering av anteckningar <whatsnew314-"
"pep649>`"

msgid ""
":ref:`PEP 734: Multiple interpreters in the stdlib <whatsnew314-pep734>`"
msgstr ":ref:`PEP 734: Flera tolkar i stdlib <whatsnew314-pep734>`"

msgid ":ref:`PEP 741: Python configuration C API <whatsnew314-pep741>`"
msgstr ":ref:`PEP 741: Python-konfiguration C API <whatsnew314-pep741>`"

msgid ":ref:`PEP 750: Template strings <whatsnew314-pep750>`"
msgstr ":ref:`PEP 750: Mallsträngar <whatsnew314-pep750>`"

msgid ""
":ref:`PEP 758: Allow except and except* expressions without parentheses "
"<whatsnew314-pep758>`"
msgstr ""
":ref:`PEP 758: Tillåt except- och except*-uttryck utan parenteser "
"<whatsnew314-pep758>`"

msgid ":ref:`PEP 761: Discontinuation of PGP signatures <whatsnew314-pep761>`"
msgstr ":ref:`PEP 761: Avveckling av PGP-signaturer <whatsnew314-pep761>`"

msgid ""
":ref:`PEP 765: Disallow return/break/continue that exit a finally block "
"<whatsnew314-pep765>`"
msgstr ""
":ref:`PEP 765: Tillåt inte return/break/continue som lämnar ett finally "
"block <whatsnew314-pep765>`"

msgid ""
":ref:`Free-threaded mode improvements <whatsnew314-free-threaded-cpython>`"
msgstr ""
":ref:`Förbättringar av fri-trådat läge <whatsnew314-free-threaded-cpython>`"

msgid ""
":ref:`PEP 768: Safe external debugger interface for CPython <whatsnew314-"
"pep768>`"
msgstr ""
":ref:`PEP 768: Säkert externt felsökningsgränssnitt för CPython <whatsnew314-"
"pep768>`"

msgid ""
":ref:`PEP 784: Adding Zstandard to the standard library <whatsnew314-pep784>`"
msgstr ""
":ref:`PEP 784: Lägga till Zstandard i standardbiblioteket <whatsnew314-"
"pep784>`"

msgid ":ref:`A new type of interpreter <whatsnew314-tail-call>`"
msgstr ":ref:`En ny typ av tolk <whatsnew314-tail-call>`"

msgid ""
":ref:`Syntax highlighting in PyREPL <whatsnew314-pyrepl-highlighting>`, and "
"color output in :ref:`unittest <whatsnew314-color-unittest>`, :ref:`argparse "
"<whatsnew314-color-argparse>`, :ref:`json <whatsnew314-color-json>` and :ref:"
"`calendar <whatsnew314-color-calendar>` CLIs"
msgstr ""
":ref:`Syntaxmarkering i PyREPL <whatsnew314-pyrepl-highlighting>`, och "
"färgutmatning i :ref:`unittest <whatsnew314-color-unittest>`, :ref:`argparse "
"<whatsnew314-color-argparse>`, :ref:`json <whatsnew314-color-json>` och :ref:"
"`calendar <whatsnew314-color-calendar>` CLI:er"

msgid ""
":ref:`Binary releases for the experimental just-in-time compiler "
"<whatsnew314-jit-compiler>`"
msgstr ""
":ref:`Binära utgåvor för den experimentella just-in-time-kompilatorn "
"<whatsnew314-jit-compiler>`"

msgid "Incompatible changes"
msgstr "Inkompatibla förändringar"

msgid ""
"On platforms other than macOS and Windows, the default :ref:`start method "
"<multiprocessing-start-methods>` for :mod:`multiprocessing` and :class:"
"`~concurrent.futures.ProcessPoolExecutor` switches from *fork* to "
"*forkserver*."
msgstr ""
"På andra plattformar än macOS och Windows ändras standard :ref:`startmetod "
"<multiprocessing-start-methods>` för :mod:`multiprocessing` och :class:"
"`~concurrent.futures.ProcessPoolExecutor` från *fork* till *forkserver*."

msgid ""
"See :ref:`(1) <whatsnew314-concurrent-futures-start-method>` and :ref:`(2) "
"<whatsnew314-multiprocessing-start-method>` for details."
msgstr ""
"Se :ref:`(1) <whatsnew314-concurrent-futures-start-method>` och :ref:`(2) "
"<whatsnew314-multiprocessing-start-method>` för mer information."

msgid ""
"If you encounter :exc:`NameError`\\s or pickling errors coming out of :mod:"
"`multiprocessing` or :mod:`concurrent.futures`, see the :ref:`forkserver "
"restrictions <multiprocessing-programming-forkserver>`."
msgstr ""
"Om du stöter på :exc:`NameError` eller pickling-fel som kommer ut från :mod:"
"`multiprocessing` eller :mod:`concurrent.futures`, se :ref:`forkserver "
"restrictions <multiprocessing-programming-forkserver>`."

msgid ""
"The interpreter avoids some reference count modifications internally when "
"it's safe to do so. This can lead to different values returned from :func:"
"`sys.getrefcount` and :c:func:`Py_REFCNT` compared to previous versions of "
"Python.  See :ref:`below <whatsnew314-refcount>` for details."
msgstr ""
"Tolken undviker vissa referensräkningsmodifieringar internt när det är "
"säkert att göra det. Detta kan leda till olika värden som returneras från :"
"func:`sys.getrefcount` och :c:func:`Py_REFCNT` jämfört med tidigare "
"versioner av Python.  Se :ref:`below <whatsnew314-refcount>` för mer "
"information."

msgid "New features"
msgstr "Nya funktioner"

msgid "PEP 779: Free-threaded Python is officially supported"
msgstr "PEP 779: Fri trådad Python stöds officiellt"

msgid ""
"The free-threaded build of Python is now supported and no longer "
"experimental. This is the start of phase II where free-threaded Python is "
"officially supported but still optional."
msgstr ""
"Den fritt trådade versionen av Python stöds nu och är inte längre "
"experimentell. Detta är början på fas II där Python med fri tråd stöds "
"officiellt men fortfarande är valfritt."

msgid ""
"We are confident that the project is on the right path, and we appreciate "
"the continued dedication from everyone working to make free-threading ready "
"for broader adoption across the Python community."
msgstr ""
"Vi är övertygade om att projektet är på rätt väg, och vi uppskattar det "
"fortsatta engagemanget från alla som arbetar för att göra free-threading "
"redo för bredare användning i Python-gemenskapen."

msgid ""
"With these recommendations and the acceptance of this PEP, we as the Python "
"developer community should broadly advertise that free-threading is a "
"supported Python build option now and into the future, and that it will not "
"be removed without a proper deprecation schedule."
msgstr ""
"Med dessa rekommendationer och godkännandet av denna PEP bör vi som Python-"
"utvecklargemenskap i stor utsträckning annonsera att free-threading är ett "
"Python-byggalternativ som stöds nu och i framtiden, och att det inte kommer "
"att tas bort utan ett korrekt avvecklingsschema."

msgid ""
"Any decision to transition to phase III, with free-threading as the default "
"or sole build of Python is still undecided, and dependent on many factors "
"both within CPython itself and the community. This decision is for the "
"future."
msgstr ""
"Alla beslut om att övergå till fas III, med free-threading som standard "
"eller enda Python-byggnad, är fortfarande obeslutna och beroende av många "
"faktorer både inom CPython själv och samhället. Detta beslut är för "
"framtiden."

msgid ""
":pep:`779` and its `acceptance <https://discuss.python.org/t/pep-779-"
"criteria-for-supported-status-for-free-threaded-python/84319/123>`__."
msgstr ""
":pep:`779` och dess `acceptans <https://discuss.python.org/t/pep-779-"
"criteria-for-supported-status-for-free-threaded-python/84319/123>`__."

msgid "PEP 734: Multiple interpreters in the stdlib"
msgstr "PEP 734: Flera tolkar i stdlib"

msgid ""
"The CPython runtime supports running multiple copies of Python in the same "
"process simultaneously and has done so for over 20 years. Each of these "
"separate copies is called an \"interpreter\". However, the feature had been "
"available only through the C-API."
msgstr ""
"CPython runtime stöder körning av flera kopior av Python i samma process "
"samtidigt och har gjort det i över 20 år. Var och en av dessa separata "
"kopior kallas en \"tolk\". Funktionen har dock endast varit tillgänglig via "
"C-API."

msgid ""
"That limitation is removed in the 3.14 release, with the new :mod:"
"`concurrent.interpreters` module."
msgstr ""
"Den begränsningen har tagits bort i version 3.14 med den nya modulen :mod:"
"`concurrent.interpreters`."

msgid ""
"There are at least two notable reasons why using multiple interpreters is "
"worth considering:"
msgstr ""
"Det finns åtminstone två viktiga skäl till varför det är värt att överväga "
"att använda flera tolkar:"

msgid "they support a new (to Python), human-friendly concurrency model"
msgstr "de stöder en ny (för Python), människovänlig samtidighetsmodell"

msgid "true multi-core parallelism"
msgstr "äkta parallellism med flera kärnor"

msgid ""
"For some use cases, concurrency in software enables efficiency and can "
"simplify software, at a high level.  At the same time, implementing and "
"maintaining all but the simplest concurrency is often a struggle for the "
"human brain.  That especially applies to plain threads (for example, :mod:"
"`threading`), where all memory is shared between all threads."
msgstr ""
"För vissa användningsfall möjliggör samtidighet i programvara effektivitet "
"och kan förenkla programvaran på en hög nivå.  Samtidigt är implementering "
"och underhåll av allt utom den enklaste samtidigheten ofta en kamp för den "
"mänskliga hjärnan.  Det gäller särskilt vanliga trådar (t.ex. :mod:"
"`threading`), där allt minne delas mellan alla trådar."

msgid ""
"With multiple isolated interpreters, you can take advantage of a class of "
"concurrency models, like CSP or the actor model, that have found success in "
"other programming languages, like Smalltalk, Erlang, Haskell, and Go.  Think "
"of multiple interpreters like threads but with opt-in sharing."
msgstr ""
"Med flera isolerade tolkar kan du dra nytta av en klass av "
"samtidighetsmodeller, som CSP eller aktormodellen, som har haft framgång i "
"andra programmeringsspråk, som Smalltalk, Erlang, Haskell och Go.  Tänk på "
"flera tolkar som trådar men med opt-in-delning."

msgid ""
"Regarding multi-core parallelism: as of the 3.12 release, interpreters are "
"now sufficiently isolated from one another to be used in parallel. (See :pep:"
"`684`.)  This unlocks a variety of CPU-intensive use cases for Python that "
"were limited by the :term:`GIL`."
msgstr ""
"När det gäller parallellism med flera kärnor: från och med 3.12-utgåvan är "
"tolkarna nu tillräckligt isolerade från varandra för att kunna användas "
"parallellt. (Se :pep:`684`.) Detta öppnar upp för en mängd olika CPU-"
"intensiva användningsområden för Python som begränsades av :term:`GIL`."

msgid ""
"Using multiple interpreters is similar in many ways to :mod:"
"`multiprocessing`, in that they both provide isolated logical \"processes\" "
"that can run in parallel, with no sharing by default. However, when using "
"multiple interpreters, an application will use fewer system resources and "
"will operate more efficiently (since it stays within the same process).  "
"Think of multiple interpreters as having the isolation of processes with the "
"efficiency of threads."
msgstr ""
"Att använda flera tolkar liknar på många sätt :mod:`multiprocessing`, "
"eftersom de båda tillhandahåller isolerade logiska \"processer\" som kan "
"köras parallellt, utan någon delning som standard. Men när flera tolkar "
"används kommer en applikation att använda färre systemresurser och fungera "
"mer effektivt (eftersom den stannar inom samma process).  Tänk på multipla "
"tolkar som att de har processernas isolering med trådarnas effektivitet."

msgid ""
"While the feature has been around for decades, multiple interpreters have "
"not been used widely, due to low awareness and the lack of a stdlib module.  "
"Consequently, they currently have several notable limitations, which will "
"improve significantly now that the feature is finally going mainstream."
msgstr ""
"Även om funktionen har funnits i årtionden har multipla tolkar inte använts "
"i någon större utsträckning, på grund av låg medvetenhet och avsaknaden av "
"en stdlib-modul.  Följaktligen har de för närvarande flera anmärkningsvärda "
"begränsningar, som kommer att förbättras avsevärt nu när funktionen äntligen "
"blir mainstream."

msgid "Current limitations:"
msgstr "Nuvarande begränsningar:"

msgid "starting each interpreter has not been optimized yet"
msgstr "start av varje tolk har inte optimerats ännu"

msgid ""
"each interpreter uses more memory than necessary (we will be working next on "
"extensive internal sharing between interpreters)"
msgstr ""
"varje tolk använder mer minne än nödvändigt (vi kommer härnäst att arbeta "
"med omfattande intern delning mellan tolkar)"

msgid ""
"there aren't many options *yet* for truly sharing objects or other data "
"between interpreters (other than :type:`memoryview`)"
msgstr ""
"det finns inte många alternativ * ännu* för att verkligen dela objekt eller "
"andra data mellan tolkar (annat än :type:`memoryview`)"

msgid ""
"many extension modules on PyPI are not compatible with multiple interpreters "
"yet (stdlib extension modules *are* compatible)"
msgstr ""
"många tilläggsmoduler på PyPI är ännu inte kompatibla med flera tolkar "
"(stdlib-tilläggsmoduler *är* kompatibla)"

msgid ""
"the approach to writing applications that use multiple isolated interpreters "
"is mostly unfamiliar to Python users, for now"
msgstr ""
"metoden att skriva applikationer som använder flera isolerade tolkar är "
"mestadels obekant för Python-användare, än så länge"

msgid ""
"The impact of these limitations will depend on future CPython improvements, "
"how interpreters are used, and what the community solves through PyPI "
"packages.  Depending on the use case, the limitations may not have much "
"impact, so try it out!"
msgstr ""
"Effekten av dessa begränsningar beror på framtida CPython-förbättringar, hur "
"tolkar används och vad samhället löser genom PyPI-paket.  Beroende på "
"användningsfallet kanske begränsningarna inte har så stor inverkan, så prova "
"det!"

msgid ""
"Furthermore, future CPython releases will reduce or eliminate overhead and "
"provide utilities that are less appropriate on PyPI.  In the meantime, most "
"of the limitations can also be addressed through extension modules, meaning "
"PyPI packages can fill any gap for 3.14, and even back to 3.12 where "
"interpreters were finally properly isolated and stopped sharing the :term:"
"`GIL`.  Likewise, we expect to slowly see libraries on PyPI for high-level "
"abstractions on top of interpreters."
msgstr ""
"Dessutom kommer framtida CPython-utgåvor att minska eller eliminera overhead "
"och tillhandahålla verktyg som är mindre lämpliga på PyPI.  Under tiden kan "
"de flesta av begränsningarna också hanteras genom tilläggsmoduler, vilket "
"innebär att PyPI-paket kan fylla alla luckor för 3.14, och till och med "
"tillbaka till 3.12 där tolkar äntligen isolerades ordentligt och slutade "
"dela :term:`GIL`.  På samma sätt förväntar vi oss att långsamt se bibliotek "
"på PyPI för högnivåabstraktioner ovanpå tolkarna."

msgid ""
"Regarding extension modules, work is in progress to update some PyPI "
"projects, as well as tools like Cython, pybind11, nanobind, and PyO3. The "
"steps for isolating an extension module are found at :ref:`isolating-"
"extensions-howto`.  Isolating a module has a lot of overlap with what is "
"required to support :ref:`free-threading <whatsnew314-free-threaded-"
"cpython>`, so the ongoing work in the community in that area will help "
"accelerate support for multiple interpreters."
msgstr ""
"När det gäller tilläggsmoduler pågår arbete med att uppdatera vissa PyPI-"
"projekt, liksom verktyg som Cython, pybind11, nanobind och PyO3. Stegen för "
"att isolera en tilläggsmodul finns på :ref:`isolating-extensions-howto`.  "
"Att isolera en modul har en hel del överlappning med vad som krävs för att "
"stödja :ref:``free-threading <whatsnew314-free-threaded-cpython>``, så det "
"pågående arbetet i gemenskapen inom det området kommer att bidra till att "
"påskynda stödet för flera tolkar."

msgid ""
"Also added in 3.14: :ref:`concurrent.futures.InterpreterPoolExecutor "
"<whatsnew314-concurrent-futures-interp-pool>`."
msgstr ""
"Även tillagd i 3.14: :ref:`concurrent.futures.InterpreterPoolExecutor "
"<whatsnew314-concurrent-futures-interp-pool>`."

msgid ":pep:`734`."
msgstr ":pep:`734``."

msgid "PEP 750: Template strings"
msgstr "PEP 750: Strängar för mallar"

msgid ""
"Template string literals (t-strings) are a generalization of f-strings, "
"using a ``t`` in place of the ``f`` prefix. Instead of evaluating to :class:"
"`str`, t-strings evaluate to a new :class:`!string.templatelib.Template` "
"type:"
msgstr ""
"Template string literals (t-strängar) är en generalisering av f-strängar, "
"med ett ``t`` i stället för prefixet ``f``. Istället för att utvärdera till :"
"class:`str`, utvärderar t-strängar till en ny :class:`!string.templatelib."
"Template`-typ:"

msgid ""
"from string.templatelib import Template\n"
"\n"
"name = \"World\"\n"
"template: Template = t\"Hello {name}\""
msgstr ""
"från string.templatelib import Template\n"
"\n"
"namn = \"Värld\"\n"
"mall: Mall = t\"Hej {name}\""

msgid ""
"The template can then be combined with functions that operate on the "
"template's structure to produce a :class:`str` or a string-like result. For "
"example, sanitizing input:"
msgstr ""
"Mallen kan sedan kombineras med funktioner som använder mallens struktur för "
"att producera en :class:`str` eller ett strängliknande resultat. Till "
"exempel för att rensa indata:"

msgid ""
"evil = \"<script>alert('evil')</script>\"\n"
"template = t\"<p>{evil}</p>\"\n"
"assert html(template) == \"<p>&lt;script&gt;alert('evil')&lt;/script&gt;</"
"p>\""
msgstr ""
"ondska =<script>\"alert('ondska</script>')\"\n"
"mall = t\"<p>{evil}</p>\"\n"
"assert html(mall) ==<p>\"&lt;script&gt;alert('evil')&lt;/script&gt;\"</p>"

msgid "As another example, generating HTML attributes from data:"
msgstr "Ett annat exempel är generering av HTML-attribut från data:"

msgid ""
"attributes = {\"src\": \"shrubbery.jpg\", \"alt\": \"looks nice\"}\n"
"template = t\"<img {attributes}>\"\n"
"assert html(template) == '<img src=\"shrubbery.jpg\" alt=\"looks nice\" />'"
msgstr ""
"attribut = {\"src\": \"shrubbery.jpg\", \"alt\": \"ser fint ut\"}\n"
"mall = t\"&lt;img {attributes}&gt;\"\n"
"assert html(mall) == '<img src=\"shrubbery.jpg\" alt=\"looks nice\" />'"

msgid ""
"Compared to using an f-string, the ``html`` function has access to template "
"attributes containing the original information: static strings, "
"interpolations, and values from the original scope. Unlike existing "
"templating approaches, t-strings build from the well-known f-string syntax "
"and rules. Template systems thus benefit from Python tooling as they are "
"much closer to the Python language, syntax, scoping, and more."
msgstr ""
"Jämfört med att använda en f-sträng har funktionen ``html`` tillgång till "
"mallattribut som innehåller originalinformationen: statiska strängar, "
"interpoleringar och värden från det ursprungliga omfånget. Till skillnad "
"från befintliga templating-metoder bygger t-strängar på den välkända f-"
"strängens syntax och regler. Mallsystem drar således nytta av Python-verktyg "
"eftersom de ligger mycket närmare Python-språket, syntax, scoping med mera."

msgid "Writing template handlers is straightforward:"
msgstr "Att skriva mallhanterare är enkelt:"

msgid ""
"from string.templatelib import Template, Interpolation\n"
"\n"
"def lower_upper(template: Template) -> str:\n"
"    \"\"\"Render static parts lowercased and interpolations uppercased."
"\"\"\"\n"
"    parts: list[str] = []\n"
"    for item in template:\n"
"        if isinstance(item, Interpolation):\n"
"            parts.append(str(item.value).upper())\n"
"        else:\n"
"            parts.append(item.lower())\n"
"    return \"\".join(parts)\n"
"\n"
"name = \"world\"\n"
"assert lower_upper(t\"HELLO {name}\") == \"hello WORLD\""
msgstr ""
"from string.templatelib import Template, Interpolation\n"
"\n"
"def lower_upper(template: Template) -> str:\n"
"    \"\"\"Render static parts lowercased and interpolations uppercased."
"\"\"\"\n"
"    parts: list[str] = []\n"
"    for item in template:\n"
"        if isinstance(item, Interpolation):\n"
"            parts.append(str(item.value).upper())\n"
"        else:\n"
"            parts.append(item.lower())\n"
"    return \"\".join(parts)\n"
"\n"
"name = \"world\"\n"
"assert lower_upper(t\"HELLO {name}\") == \"hello WORLD\""

msgid ""
"With this in place, developers can write template systems to sanitize SQL, "
"make safe shell operations, improve logging, tackle modern ideas in web "
"development (HTML, CSS, and so on), and implement lightweight, custom "
"business DSLs."
msgstr ""
"Med detta på plats kan utvecklare skriva mallsystem för att rensa SQL, göra "
"säkra shell-operationer, förbättra loggning, hantera moderna idéer inom "
"webbutveckling (HTML, CSS och så vidare) och implementera lätta, anpassade "
"affärs-DSL:er."

msgid ""
"(Contributed by Jim Baker, Guido van Rossum, Paul Everitt, Koudai Aono, "
"Lysandros Nikolaou, Dave Peck, Adam Turner, Jelle Zijlstra, Bénédikt Tran, "
"and Pablo Galindo Salgado in :gh:`132661`.)"
msgstr ""
"(Bidrag från Jim Baker, Guido van Rossum, Paul Everitt, Koudai Aono, "
"Lysandros Nikolaou, Dave Peck, Adam Turner, Jelle Zijlstra, Bénédikt Tran "
"och Pablo Galindo Salgado i :gh:`132661`.)"

msgid ":pep:`750`."
msgstr ":pep:`750`."

msgid "PEP 768: Safe external debugger interface for CPython"
msgstr "PEP 768: Säkert gränssnitt för extern avlusare för CPython"

msgid ""
":pep:`768` introduces a zero-overhead debugging interface that allows "
"debuggers and profilers to safely attach to running Python processes. This "
"is a significant enhancement to Python's debugging capabilities allowing "
"debuggers to forego unsafe alternatives. See :ref:`below <whatsnew314-remote-"
"pdb>` for how this feature is leveraged to implement the new :mod:`pdb` "
"module's remote attaching capabilities."
msgstr ""
":pep:`768` introducerar ett noll-överhead felsökningsgränssnitt som gör det "
"möjligt för felsökare och profilerare att på ett säkert sätt ansluta till "
"Python-processer som körs. Detta är en betydande förbättring av Pythons "
"felsökningsfunktioner som gör det möjligt för felsökare att avstå från "
"osäkra alternativ. Se :ref:`below <whatsnew314-remote-pdb>` för hur denna "
"funktion utnyttjas för att implementera den nya :mod:`pdb`-modulens "
"fjärrkopplingsfunktioner."

msgid ""
"The new interface provides safe execution points for attaching debugger code "
"without modifying the interpreter's normal execution path or adding runtime "
"overhead. This enables tools to inspect and interact with Python "
"applications in real-time without stopping or restarting them — a crucial "
"capability for high-availability systems and production environments."
msgstr ""
"Det nya gränssnittet ger säkra exekveringspunkter för att bifoga debugger-"
"kod utan att ändra tolkens normala exekveringsväg eller lägga till runtime "
"overhead. Detta gör det möjligt för verktyg att inspektera och interagera "
"med Python-applikationer i realtid utan att stoppa eller starta om dem - en "
"viktig funktion för system med hög tillgänglighet och produktionsmiljöer."

msgid ""
"For convenience, CPython implements this interface through the :mod:`sys` "
"module with a :func:`sys.remote_exec` function::"
msgstr ""
"För enkelhetens skull implementerar CPython detta gränssnitt genom :mod:"
"`sys`-modulen med en :func:`sys.remote_exec`-funktion::"

msgid "sys.remote_exec(pid, script_path)"
msgstr "sys.remote_exec(pid, script_path)"

msgid ""
"This function allows sending Python code to be executed in a target process "
"at the next safe execution point. However, tool authors can also implement "
"the protocol directly as described in the PEP, which details the underlying "
"mechanisms used to safely attach to running processes."
msgstr ""
"Denna funktion gör det möjligt att skicka Python-kod som ska exekveras i en "
"målprocess vid nästa säkra exekveringspunkt. Verktygsförfattare kan dock "
"också implementera protokollet direkt enligt beskrivningen i PEP, som "
"beskriver de underliggande mekanismer som används för att på ett säkert sätt "
"ansluta till pågående processer."

msgid ""
"Here's a simple example that inspects object types in a running Python "
"process:"
msgstr ""
"Här är ett enkelt exempel som inspekterar objekttyper i en pågående Python-"
"process:"

msgid ""
"import os\n"
"import sys\n"
"import tempfile\n"
"\n"
"# Create a temporary script\n"
"with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as "
"f:\n"
"    script_path = f.name\n"
"    f.write(f\"import my_debugger; my_debugger.connect({os.getpid()})\")\n"
"try:\n"
"    # Execute in process with PID 1234\n"
"    print(\"Behold! An offering:\")\n"
"    sys.remote_exec(1234, script_path)\n"
"finally:\n"
"    os.unlink(script_path)"
msgstr ""
"import os\n"
"import sys\n"
"import tempfile\n"
"\n"
"# Create a temporary script\n"
"with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as "
"f:\n"
"    script_path = f.name\n"
"    f.write(f\"import my_debugger; my_debugger.connect({os.getpid()})\")\n"
"try:\n"
"    # Execute in process with PID 1234\n"
"    print(\"Behold! An offering:\")\n"
"    sys.remote_exec(1234, script_path)\n"
"finally:\n"
"    os.unlink(script_path)"

msgid ""
"The debugging interface has been carefully designed with security in mind "
"and includes several mechanisms to control access:"
msgstr ""
"Felsökningsgränssnittet har utformats med tanke på säkerheten och innehåller "
"flera mekanismer för att kontrollera åtkomsten:"

msgid "A :envvar:`PYTHON_DISABLE_REMOTE_DEBUG` environment variable."
msgstr "En :envvar:`PYTHON_DISABLE_REMOTE_DEBUG` miljövariabel."

msgid "A :option:`-X disable-remote-debug` command-line option."
msgstr "Ett kommandoradsalternativ för :option:`-X disable-remote-debug`."

msgid ""
"A :option:`--without-remote-debug` configure flag to completely disable the "
"feature at build time."
msgstr ""
"En konfigurationsflagga :option:`--without-remote-debug` för att helt "
"inaktivera funktionen vid byggtiden."

msgid ""
"A key implementation detail is that the interface piggybacks on the "
"interpreter's existing evaluation loop and safe points, ensuring zero "
"overhead during normal execution while providing a reliable way for external "
"processes to coordinate debugging operations."
msgstr ""
"En viktig detalj i implementeringen är att gränssnittet använder sig av "
"tolkens befintliga utvärderingsloop och säkra punkter, vilket gör att det "
"inte blir något overhead under normal exekvering samtidigt som det ger "
"externa processer ett tillförlitligt sätt att samordna "
"felsökningsoperationer."

msgid ""
"(Contributed by Pablo Galindo Salgado, Matt Wozniski, and Ivona Stojanovic "
"in :gh:`131591`.)"
msgstr ""
"(Bidrag från Pablo Galindo Salgado, Matt Wozniski och Ivona Stojanovic i :gh:"
"`131591`.)"

msgid ":pep:`768`."
msgstr ":pep:`768``."

msgid "PEP 784: Adding Zstandard to the standard library"
msgstr "PEP 784: Lägga till Zstandard i standardbiblioteket"

msgid ""
"The new ``compression`` package contains modules :mod:`!compression.lzma`, :"
"mod:`!compression.bz2`, :mod:`!compression.gzip` and :mod:`!compression."
"zlib` which re-export the :mod:`lzma`, :mod:`bz2`, :mod:`gzip` and :mod:"
"`zlib` modules respectively. The new import names under ``compression`` are "
"the canonical names for importing these compression modules going forward. "
"However, the existing modules names have not been deprecated. Any "
"deprecation or removal of the existing compression modules will occur no "
"sooner than five years after the release of 3.14."
msgstr ""
"Det nya paketet ``compression`` innehåller modulerna :mod:`!compression."
"lzma``, :mod:`!compression.bz2``, :mod:`!compression.gzip`` och :mod:`!"
"compression.zlib`` som åter exporterar modulerna :mod:`lzma``, :mod:`bz2``, :"
"mod:`gzip`` respektive :mod:`zlib``. De nya importnamnen under "
"``compression`` är de kanoniska namnen för import av dessa "
"komprimeringsmoduler framöver. De befintliga modulnamnen har dock inte "
"tagits bort. Eventuell föråldring eller borttagning av de befintliga "
"komprimeringsmodulerna kommer att ske tidigast fem år efter utgivningen av "
"3.14."

msgid ""
"The new :mod:`!compression.zstd` module provides compression and "
"decompression APIs for the Zstandard format via bindings to `Meta's zstd "
"library <https://facebook.github.io/zstd/>`__. Zstandard is a widely "
"adopted, highly efficient, and fast compression format. In addition to the "
"APIs introduced in :mod:`!compression.zstd`, support for reading and writing "
"Zstandard compressed archives has been added to the :mod:`tarfile`, :mod:"
"`zipfile`, and :mod:`shutil` modules."
msgstr ""
"Den nya :mod:`!compression.zstd`-modulen tillhandahåller API:er för "
"komprimering och dekomprimering för Zstandard-formatet via bindningar till "
"`Metas zstd-bibliotek <https://facebook.github.io/zstd/>`__. Zstandard är "
"ett allmänt antaget, mycket effektivt och snabbt komprimeringsformat. Utöver "
"de API:er som introducerades i :mod:`!compression.zstd`, har stöd för att "
"läsa och skriva komprimerade Zstandard-arkiv lagts till i modulerna :mod:"
"`tarfile`, :mod:`zipfile` och :mod:`shutil`."

msgid "Here's an example of using the new module to compress some data:"
msgstr ""
"Här är ett exempel på hur du använder den nya modulen för att komprimera "
"data:"

msgid ""
"from compression import zstd\n"
"import math\n"
"\n"
"data = str(math.pi).encode() * 20\n"
"\n"
"compressed = zstd.compress(data)\n"
"\n"
"ratio = len(compressed) / len(data)\n"
"print(f\"Achieved compression ratio of {ratio}\")"
msgstr ""
"from compression import zstd\n"
"import math\n"
"\n"
"data = str(math.pi).encode() * 20\n"
"\n"
"compressed = zstd.compress(data)\n"
"\n"
"ratio = len(compressed) / len(data)\n"
"print(f\"Achieved compression ratio of {ratio}\")"

msgid ""
"As can be seen, the API is similar to the APIs of the :mod:`!lzma` and :mod:"
"`!bz2` modules."
msgstr ""
"Som synes liknar API:et API:erna för modulerna :mod:`!lzma` och :mod:`!bz2`."

msgid ""
"(Contributed by Emma Harper Smith, Adam Turner, Gregory P. Smith, Tomas "
"Roun, Victor Stinner, and Rogdham in :gh:`132983`.)"
msgstr ""
"(Bidrag från Emma Harper Smith, Adam Turner, Gregory P. Smith, Tomas Roun, "
"Victor Stinner och Rogdham i :gh:`132983`.)"

msgid ":pep:`784`."
msgstr ":pep:`784``."

msgid "Remote attaching to a running Python process with PDB"
msgstr "Fjärrkoppling till en Python-process som körs med PDB"

msgid ""
"The :mod:`pdb` module now supports remote attaching to a running Python "
"process using a new ``-p PID`` command-line option:"
msgstr ""
"Modulen :mod:`pdb` stöder nu fjärrkoppling till en Python-process som körs "
"med hjälp av det nya kommandoradsalternativet ``-p PID``:"

msgid "python -m pdb -p 1234"
msgstr "python -m pdb -p 1234"

msgid ""
"This will connect to the Python process with the given PID and allow you to "
"debug it interactively. Notice that due to how the Python interpreter works "
"attaching to a remote process that is blocked in a system call or waiting "
"for I/O will only work once the next bytecode instruction is executed or "
"when the process receives a signal."
msgstr ""
"Detta kommer att ansluta till Python-processen med det angivna PID och låta "
"dig felsöka den interaktivt. Observera att på grund av hur Python-tolken "
"fungerar kommer anslutning till en fjärrprocess som är blockerad i ett "
"systemanrop eller väntar på I/O endast att fungera när nästa bytecode-"
"instruktion körs eller när processen får en signal."

msgid ""
"This feature uses :pep:`768` and the :func:`sys.remote_exec` function to "
"attach to the remote process and send the PDB commands to it."
msgstr ""
"Den här funktionen använder :pep:`768` och funktionen :func:`sys."
"remote_exec` för att ansluta till fjärrprocessen och skicka PDB-kommandon "
"till den."

msgid "(Contributed by Matt Wozniski and Pablo Galindo in :gh:`131591`.)"
msgstr "(Bidrag från Matt Wozniski och Pablo Galindo i :gh:`131591`.)"

msgid "PEP 758 – Allow except and except* expressions without parentheses"
msgstr "PEP 758 - Tillåt except- och except*-uttryck utan parenteser"

msgid ""
"The :keyword:`except` and :keyword:`except* <except_star>` expressions now "
"allow parentheses to be omitted when there are multiple exception types and "
"the ``as`` clause is not used. For example the following expressions are now "
"valid:"
msgstr ""
"Uttrycken :keyword:`except` och :keyword:`except* <except_star>` tillåter nu "
"att parenteser utelämnas när det finns flera undantagstyper och ``as``-"
"klausulen inte används. Till exempel är följande uttryck nu giltiga:"

msgid ""
"try:\n"
"    connect_to_server()\n"
"except TimeoutError, ConnectionRefusedError:\n"
"    print(\"Network issue encountered.\")\n"
"\n"
" # The same applies to except* (for exception groups):\n"
"\n"
"try:\n"
"    connect_to_server()\n"
"except* TimeoutError, ConnectionRefusedError:\n"
"    print(\"Network issue encountered.\")"
msgstr ""
"försök:\n"
"    connect_to_server()\n"
"except TimeoutError, ConnectionRefusedError:\n"
"    print(\"Nätverksproblem har uppstått.\")\n"
"\n"
" # Detsamma gäller för except* (för undantagsgrupper):\n"
"\n"
"try:\n"
"    connect_to_server()\n"
"except* TimeoutError, ConnectionRefusedError:\n"
"    print(\"Nätverksproblem har uppstått.\")"

msgid "Check :pep:`758` for more details."
msgstr "Se :pep:`758` för mer information."

msgid "(Contributed by Pablo Galindo and Brett Cannon in :gh:`131831`.)"
msgstr "(Bidrag från Pablo Galindo och Brett Cannon i :gh:`131831`.)"

msgid ":pep:`758`."
msgstr ":pep:`758``."

msgid "PEP 649 and 749: deferred evaluation of annotations"
msgstr "PEP 649 och 749: Uppskjuten utvärdering av annoteringar"

msgid ""
"The :term:`annotations <annotation>` on functions, classes, and modules are "
"no longer evaluated eagerly. Instead, annotations are stored in special-"
"purpose :term:`annotate functions <annotate function>` and evaluated only "
"when necessary (except if ``from __future__ import annotations`` is used). "
"This is specified in :pep:`649` and :pep:`749`."
msgstr ""
":term:`annotations <annotation>` på funktioner, klasser och moduler "
"utvärderas inte längre ivrigt. Istället lagras anteckningar i speciella :"
"term:`annotate functions <annotate function>` och utvärderas endast när det "
"är nödvändigt (förutom om ``from __future__ import annotations`` används). "
"Detta specificeras i :pep:`649` och :pep:`749`."

msgid ""
"This change is designed to make annotations in Python more performant and "
"more usable in most circumstances. The runtime cost for defining annotations "
"is minimized, but it remains possible to introspect annotations at runtime. "
"It is no longer necessary to enclose annotations in strings if they contain "
"forward references."
msgstr ""
"Denna förändring är utformad för att göra annotationer i Python mer "
"performanta och mer användbara under de flesta omständigheter. "
"Körtidskostnaden för att definiera annotationer minimeras, men det är "
"fortfarande möjligt att introspektera annotationer vid körtid. Det är inte "
"längre nödvändigt att innesluta annotationer i strängar om de innehåller "
"framåtriktade referenser."

msgid ""
"The new :mod:`annotationlib` module provides tools for inspecting deferred "
"annotations. Annotations may be evaluated in the :attr:`~annotationlib."
"Format.VALUE` format (which evaluates annotations to runtime values, similar "
"to the behavior in earlier Python versions), the :attr:`~annotationlib."
"Format.FORWARDREF` format (which replaces undefined names with special "
"markers), and the :attr:`~annotationlib.Format.STRING` format (which returns "
"annotations as strings)."
msgstr ""
"Den nya modulen :mod:`annotationlib` tillhandahåller verktyg för att "
"inspektera uppskjutna annoteringar. Anteckningar kan utvärderas i formatet :"
"attr:`~annotationlib.Format.VALUE` (som utvärderar anteckningar till runtime-"
"värden, liknande beteendet i tidigare Python-versioner), i formatet :attr:"
"`~annotationlib.Format.FORWARDREF` (som ersätter odefinierade namn med "
"speciella markörer) och i formatet :attr:`~annotationlib.Format.STRING` (som "
"returnerar anteckningar som strängar)."

msgid "This example shows how these formats behave:"
msgstr "Detta exempel visar hur dessa format fungerar:"

msgid ""
">>> from annotationlib import get_annotations, Format\n"
">>> def func(arg: Undefined):\n"
"...     pass\n"
">>> get_annotations(func, format=Format.VALUE)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"NameError: name 'Undefined' is not defined\n"
">>> get_annotations(func, format=Format.FORWARDREF)\n"
"{'arg': ForwardRef('Undefined', owner=<function func at 0x...>)}\n"
">>> get_annotations(func, format=Format.STRING)\n"
"{'arg': 'Undefined'}"
msgstr ""
">>> from annotationlib import get_annotations, Format\n"
">>> def func(arg: Odefinierad):\n"
"... passera\n"
">>> get_annotations(func, format=Format.VALUE)\n"
"Traceback (senaste anropet senast):\n"
"  ...\n"
"NameError: namnet 'Odefinierad' är inte definierat\n"
">>> get_annotations(func, format=Format.FORWARDREF)\n"
"{'arg': ForwardRef('Odefinierad', ägare=<funktion func vid 0x...>)}\n"
">>> get_annotations(func, format=Format.STRING)\n"
"{'arg': 'Odefinierad'}"

msgid "Implications for annotated code"
msgstr "Konsekvenser för annoterad kod"

msgid ""
"If you define annotations in your code (for example, for use with a static "
"type checker), then this change probably does not affect you: you can keep "
"writing annotations the same way you did with previous versions of Python."
msgstr ""
"Om du definierar annotationer i din kod (till exempel för användning med en "
"statisk typkontroll), påverkar denna ändring förmodligen inte dig: du kan "
"fortsätta att skriva annotationer på samma sätt som du gjorde med tidigare "
"versioner av Python."

msgid ""
"You will likely be able to remove quoted strings in annotations, which are "
"frequently used for forward references. Similarly, if you use ``from "
"__future__ import annotations`` to avoid having to write strings in "
"annotations, you may well be able to remove that import once you support "
"only Python 3.14 and newer. However, if you rely on third-party libraries "
"that read annotations, those libraries may need changes to support unquoted "
"annotations before they work as expected."
msgstr ""
"Du kommer sannolikt att kunna ta bort citerade strängar i annotationer, som "
"ofta används för framåtriktade referenser. På samma sätt, om du använder "
"``from __future__ import annotations`` för att undvika att behöva skriva "
"strängar i annotationer, kan du mycket väl ta bort den importen när du bara "
"stöder Python 3.14 och nyare. Men om du förlitar dig på tredjepartsbibliotek "
"som läser annotationer kan dessa bibliotek behöva ändras för att stödja "
"annotationer utan citat innan de fungerar som förväntat."

msgid "Implications for readers of ``__annotations__``"
msgstr "Konsekvenser för läsare av ``__annotationer__``"

msgid ""
"If your code reads the ``__annotations__`` attribute on objects, you may "
"want to make changes in order to support code that relies on deferred "
"evaluation of annotations. For example, you may want to use :func:"
"`annotationlib.get_annotations` with the :attr:`~annotationlib.Format."
"FORWARDREF` format, as the :mod:`dataclasses` module now does."
msgstr ""
"Om din kod läser attributet ``__annotations__`` på objekt, kanske du vill "
"göra ändringar för att stödja kod som förlitar sig på uppskjuten utvärdering "
"av annoteringar. Du kanske till exempel vill använda :func:`annotationlib."
"get_annotations` med formatet :attr:`~annotationlib.Format.FORWARDREF`, som "
"modulen :mod:`dataclasses` nu gör."

msgid ""
"The external :pypi:`typing_extensions` package provides partial backports of "
"some of the functionality of the :mod:`annotationlib` module, such as the :"
"class:`~annotationlib.Format` enum and the :func:`~annotationlib."
"get_annotations` function. These can be used to write cross-version code "
"that takes advantage of the new behavior in Python 3.14."
msgstr ""
"Det externa paketet :pypi:`typing_extensions` tillhandahåller partiella "
"bakåtporter av en del av funktionaliteten i modulen :mod:`annotationlib`, "
"såsom enum :class:`~annotationlib.Format` och funktionen :func:"
"`~annotationlib.get_annotations`. Dessa kan användas för att skriva "
"versionsöverskridande kod som drar nytta av det nya beteendet i Python 3.14."

msgid "Related changes"
msgstr "Relaterade ändringar"

msgid ""
"The changes in Python 3.14 are designed to rework how ``__annotations__`` "
"works at runtime while minimizing breakage to code that contains annotations "
"in source code and to code that reads ``__annotations__``. However, if you "
"rely on undocumented details of the annotation behavior or on private "
"functions in the standard library, there are many ways in which your code "
"may not work in Python 3.14. To safeguard your code against future changes, "
"use only the documented functionality of the :mod:`annotationlib` module."
msgstr ""
"Ändringarna i Python 3.14 är utformade för att omarbeta hur "
"``__annotations__`` fungerar vid körning samtidigt som avbrotten minimeras "
"för kod som innehåller annotationer i källkoden och för kod som läser "
"``__annotations__``. Men om du förlitar dig på odokumenterade detaljer i "
"annoteringsbeteendet eller på privata funktioner i standardbiblioteket, "
"finns det många sätt på vilka din kod kanske inte fungerar i Python 3.14. "
"För att skydda din kod mot framtida ändringar, använd endast den "
"dokumenterade funktionaliteten i modulen :mod:`annotationlib`."

msgid ""
"In particular, do not read annotations directly from the namespace "
"dictionary attribute of type objects. Use :func:`annotationlib."
"get_annotate_from_class_namespace` during class construction and :func:"
"`annotationlib.get_annotations` afterwards."
msgstr ""
"I synnerhet ska du inte läsa annoteringar direkt från namespace dictionary-"
"attributet för typobjekt. Använd :func:`annotationlib."
"get_annotate_from_class_namespace` under klasskonstruktionen och :func:"
"`annotationlib.get_annotations` efteråt."

msgid ""
"In previous releases, it was sometimes possible to access class annotations "
"from an instance of an annotated class. This behavior was undocumented and "
"accidental, and will no longer work in Python 3.14."
msgstr ""
"I tidigare versioner var det ibland möjligt att komma åt klassannoteringar "
"från en instans av en annoterad klass. Detta beteende var odokumenterat och "
"oavsiktligt, och kommer inte längre att fungera i Python 3.14."

msgid "``from __future__ import annotations``"
msgstr "``from __future__ import annotations``"

msgid ""
"In Python 3.7, :pep:`563` introduced the ``from __future__ import "
"annotations`` directive, which turns all annotations into strings. This "
"directive is now considered deprecated and it is expected to be removed in a "
"future version of Python. However, this removal will not happen until after "
"Python 3.13, the last version of Python without deferred evaluation of "
"annotations, reaches its end of life in 2029. In Python 3.14, the behavior "
"of code using ``from __future__ import annotations`` is unchanged."
msgstr ""
"I Python 3.7 introducerade :pep:`563` direktivet ``from __future__ import "
"annotations``, som förvandlar alla annotationer till strängar. Detta "
"direktiv anses nu vara föråldrat och det förväntas tas bort i en framtida "
"version av Python. Detta borttagande kommer dock inte att ske förrän efter "
"Python 3.13, den sista versionen av Python utan uppskjuten utvärdering av "
"annotationer, når slutet av sin livslängd 2029. I Python 3.14 är beteendet "
"för kod som använder ``from __future__ import annotations`` oförändrat."

msgid ""
"(Contributed by Jelle Zijlstra in :gh:`119180`; :pep:`649` was written by "
"Larry Hastings.)"
msgstr ""
"(Bidrag från Jelle Zijlstra i :gh:`119180`; :pep:`649` skrevs av Larry "
"Hastings.)"

msgid ":pep:`649` and :pep:`749`."
msgstr ":pep:`649` och :pep:`749`."

msgid "Improved error messages"
msgstr "Förbättrade felmeddelanden"

msgid ""
"The interpreter now provides helpful suggestions when it detects typos in "
"Python keywords. When a word that closely resembles a Python keyword is "
"encountered, the interpreter will suggest the correct keyword in the error "
"message. This feature helps programmers quickly identify and fix common "
"typing mistakes. For example:"
msgstr ""
"Tolken ger nu användbara förslag när den upptäcker stavfel i Python-"
"nyckelord. När ett ord som är mycket likt ett Python-nyckelord påträffas "
"kommer tolken att föreslå det korrekta nyckelordet i felmeddelandet. Den här "
"funktionen hjälper programmerare att snabbt identifiera och åtgärda vanliga "
"skrivfel. Ett exempel:"

msgid ""
">>> whille True:\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    whille True:\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'while'?\n"
"\n"
">>> asynch def fetch_data():\n"
"...     pass\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    asynch def fetch_data():\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'async'?\n"
"\n"
">>> async def foo():\n"
"...     awaid fetch_data()\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 2\n"
"    awaid fetch_data()\n"
"    ^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'await'?\n"
"\n"
">>> raisee ValueError(\"Error\")\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1\n"
"    raisee ValueError(\"Error\")\n"
"    ^^^^^^\n"
"SyntaxError: invalid syntax. Did you mean 'raise'?"
msgstr ""
"&gt;&gt;&gt; whille True:\n"
"... passera\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1\n"
"    whille sant:\n"
"    ^^^^^^\n"
"SyntaxError: ogiltig syntax. Menade du \"while\"?\n"
"\n"
"&gt;&gt;&gt; asynch def fetch_data():\n"
"... pass\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1\n"
"    asynch def hämta_data():\n"
"    ^^^^^^\n"
"SyntaxError: ogiltig syntax. Menade du \"async\"?\n"
"\n"
"&gt;&gt;&gt; async def foo():\n"
"... awaid fetch_data()\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 2\n"
"    awaid hämta_data()\n"
"    ^^^^^\n"
"SyntaxError: ogiltig syntax. Menade du \"await\"?\n"
"\n"
"&gt;&gt;&gt; raisee ValueError(\"Fel\")\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1\n"
"    raisee VärdeFel(\"Fel\")\n"
"    ^^^^^^\n"
"SyntaxError: ogiltig syntax. Menade du \"höja\"?"

msgid ""
"While the feature focuses on the most common cases, some variations of "
"misspellings may still result in regular syntax errors. (Contributed by "
"Pablo Galindo in :gh:`132449`.)"
msgstr ""
"Funktionen fokuserar på de vanligaste fallen, men vissa variationer av "
"felstavningar kan fortfarande resultera i vanliga syntaxfel. (Bidrag från "
"Pablo Galindo i :gh:`132449`.)"

msgid ""
"When unpacking assignment fails due to incorrect number of variables, the "
"error message prints the received number of values in more cases than "
"before. (Contributed by Tushar Sadhwani in :gh:`122239`.)"
msgstr ""
"När uppackningsuppgiften misslyckas på grund av felaktigt antal variabler, "
"skriver felmeddelandet ut det mottagna antalet värden i fler fall än "
"tidigare. (Bidrag från Tushar Sadhwani i :gh:`122239`.)"

msgid ""
">>> x, y, z = 1, 2, 3, 4\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"    x, y, z = 1, 2, 3, 4\n"
"    ^^^^^^^\n"
"ValueError: too many values to unpack (expected 3, got 4)"
msgstr ""
"&gt;&gt;&gt; x, y, z = 1, 2, 3, 4\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i <module>\n"
"    x, y, z = 1, 2, 3, 4\n"
"    ^^^^^^^\n"
"ValueError: för många värden att packa upp (förväntat 3, fick 4)"

msgid ""
":keyword:`elif` statements that follow an :keyword:`else` block now have a "
"specific error message. (Contributed by Steele Farnsworth in :gh:`129902`.)"
msgstr ""
":keyword:`elif`-satser som följer ett :keyword:`else`-block har nu ett "
"specifikt felmeddelande. (Bidrag från Steele Farnsworth i :gh:`129902`.)"

msgid ""
">>> if who == \"me\":\n"
"...     print(\"It's me!\")\n"
"... else:\n"
"...     print(\"It's not me!\")\n"
"... elif who is None:\n"
"...     print(\"Who is it?\")\n"
"File \"<stdin>\", line 5\n"
"  elif who is None:\n"
"  ^^^^\n"
"SyntaxError: 'elif' block follows an 'else' block"
msgstr ""
"&gt;&gt;&gt; if who == \"me\":\n"
"... print(\"Det är jag!\")\n"
"... annars:\n"
"... print(\"Det är inte jag!\")\n"
"... elif who är ingen:\n"
"... print(\"Vem är det?\")\n"
"Fil \"<stdin>\", rad 5\n"
"  elif who är Ingen:\n"
"  ^^^^\n"
"SyntaxError: 'elif'-blocket följer på ett 'else'-block"

msgid ""
"If a statement (:keyword:`pass`, :keyword:`del`, :keyword:`return`, :keyword:"
"`yield`, :keyword:`raise`, :keyword:`break`, :keyword:`continue`, :keyword:"
"`assert`, :keyword:`import`, :keyword:`from`) is passed to the :ref:"
"`if_expr` after :keyword:`else`, or one of :keyword:`pass`, :keyword:"
"`break`, or :keyword:`continue` is passed before :keyword:`if`, then the "
"error message highlights where the :token:`~python-grammar:expression` is "
"required. (Contributed by Sergey Miryanov in :gh:`129515`.)"
msgstr ""
"Om ett uttalande (:keyword:`pass`, :keyword:`del`, :keyword:`return`, :"
"keyword:`yield`, :keyword:`raise`, :keyword:`break`, :keyword:`continue`, :"
"keyword:`assert`, :keyword:`import`, :keyword:`from`) skickas till :ref:"
"`if_expr` efter :keyword:`else`, eller om ett av :keyword:`pass`, :keyword:"
"`break`, eller :keyword:`continue` skickas före :keyword:`if`, så markerar "
"felmeddelandet var :token:`~python-grammar:expression` krävs. (Bidrag från "
"Sergey Miryanov i :gh:`129515`.)"

msgid ""
">>> x = 1 if True else pass\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = 1 if True else pass\n"
"                       ^^^^\n"
"SyntaxError: expected expression after 'else', but statement is given\n"
"\n"
">>> x = continue if True else break\n"
"Traceback (most recent call last):\n"
"  File \"<string>\", line 1\n"
"    x = continue if True else break\n"
"        ^^^^^^^^\n"
"SyntaxError: expected expression before 'if', but statement is given"
msgstr ""
"&gt;&gt;&gt; x = 1 if True else pass\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<string>\", rad 1\n"
"    x = 1 if True else pass\n"
"                       ^^^^\n"
"SyntaxError: förväntat uttryck efter \"else\", men uttalandet är givet\n"
"\n"
"&gt;&gt;&gt; x = fortsätt if Sann else break\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<string>\", rad 1\n"
"    x = fortsätt om sant annars bryt\n"
"        ^^^^^^^^\n"
"SyntaxError: förväntat uttryck före 'if', men uttalandet är givet"

msgid ""
"When incorrectly closed strings are detected, the error message suggests "
"that the string may be intended to be part of the string. (Contributed by "
"Pablo Galindo in :gh:`88535`.)"
msgstr ""
"När felaktigt stängda strängar upptäcks, antyder felmeddelandet att strängen "
"kan vara avsedd att vara en del av strängen. (Bidrag från Pablo Galindo i :"
"gh:`88535`.)"

msgid ""
">>> \"The interesting object \"The important object\" is very important\"\n"
"Traceback (most recent call last):\n"
"SyntaxError: invalid syntax. Is this intended to be part of the string?"
msgstr ""
">>> \"Det intressanta objektet \"Det viktiga objektet\" är mycket viktigt\"\n"
"Traceback (senaste anropet senast):\n"
"SyntaxError: ogiltig syntax. Är det meningen att detta ska vara en del av "
"strängen?"

msgid ""
"When strings have incompatible prefixes, the error now shows which prefixes "
"are incompatible. (Contributed by Nikita Sobolev in :gh:`133197`.)"
msgstr ""
"När strängar har inkompatibla prefix visar felmeddelandet nu vilka prefix "
"som är inkompatibla. (Bidrag från Nikita Sobolev i :gh:`133197`.)"

msgid ""
">>> ub'abc'\n"
"  File \"<python-input-0>\", line 1\n"
"    ub'abc'\n"
"    ^^\n"
"SyntaxError: 'u' and 'b' prefixes are incompatible"
msgstr ""
"&gt;&gt;&gt; ub'abc'\n"
"  Fil \"<python-input-0>\", rad 1\n"
"    ub'abc'\n"
"    ^^\n"
"SyntaxError: Prefixen \"u\" och \"b\" är inte kompatibla"

msgid "Improved error messages when using ``as`` with incompatible targets in:"
msgstr ""
"Förbättrade felmeddelanden vid användning av ``as`` med inkompatibla mål i:"

msgid "Imports: ``import ... as ...``"
msgstr "Importera: ``import ... as ...``"

msgid "From imports: ``from ... import ... as ...``"
msgstr "Från import: ``from ... import ... as ...``"

msgid "Except handlers: ``except ... as ...``"
msgstr "Undantag hanterare: ``undantag ... som ...``"

msgid "Pattern-match cases: ``case ... as ...``"
msgstr "Fall som stämmer överens med mönster: ``fall ... som ...``"

msgid ""
"(Contributed by Nikita Sobolev in :gh:`123539`, :gh:`123562`, and :gh:"
"`123440`.)"
msgstr ""
"(Bidrag från Nikita Sobolev i :gh:`123539`, :gh:`123562`, och :gh:`123440`.)"

msgid ""
">>> import ast as arr[0]\n"
"  File \"<python-input-1>\", line 1\n"
"    import ast as arr[0]\n"
"                  ^^^^^^\n"
"SyntaxError: cannot use subscript as import target"
msgstr ""
">>> import ast as arr[0]\n"
"  File \"<python-input-1>\", line 1\n"
"    import ast as arr[0]\n"
"                  ^^^^^^\n"
"SyntaxError: cannot use subscript as import target"

msgid ""
"Improved error message when trying to add an instance of an unhashable type "
"to a :class:`dict` or :class:`set`. (Contributed by CF Bolz-Tereick and "
"Victor Stinner in :gh:`132828`.)"
msgstr ""
"Förbättrat felmeddelande när man försöker lägga till en instans av en "
"ohashable typ till en :class:`dict` eller :class:`set`. (Bidrag från CF Bolz-"
"Tereick och Victor Stinner i :gh:`132828`.)"

msgid ""
">>> s = set()\n"
">>> s.add({'pages': 12, 'grade': 'A'})\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-1>\", line 1, in <module>\n"
"    s.add({'pages': 12, 'grade': 'A'})\n"
"    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"TypeError: cannot use 'dict' as a set element (unhashable type: 'dict')\n"
">>> d = {}\n"
">>> l = [1, 2, 3]\n"
">>> d[l] = 12\n"
"Traceback (most recent call last):\n"
"  File \"<python-input-4>\", line 1, in <module>\n"
"    d[l] = 12\n"
"    ~^^^\n"
"TypeError: cannot use 'list' as a dict key (unhashable type: 'list')"
msgstr ""
"&gt;&gt;&gt; s = set()\n"
"&gt;&gt;&gt; s.add({'sidor': 12, 'betyg': 'A'})\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<python-input-1>\", rad 1, i <module>\n"
"    s.add({'sidor': 12, 'betyg': 'A'})\n"
"    ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"
"TypeError: kan inte använda 'dict' som ett set-element (ohashable-typ: "
"'dict')\n"
"&gt;&gt;&gt; d = {}\n"
"&gt;&gt;&gt; l = [1, 2, 3]\n"
"&gt;&gt;&gt; d[l] = 12\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<python-input-4>\", rad 1, i <module>\n"
"    d[l] = 12\n"
"    ~^^^\n"
"TypeError: kan inte använda 'list' som en dict-nyckel (ohashable-typ: 'list')"

msgid "PEP 741: Python configuration C API"
msgstr "PEP 741: Python-konfiguration C API"

msgid ""
"Add a :ref:`PyInitConfig C API <pyinitconfig_api>` to configure the Python "
"initialization without relying on C structures and the ability to make ABI-"
"compatible changes in the future."
msgstr ""
"Lägg till en :ref:`PyInitConfig C API <pyinitconfig_api>` för att "
"konfigurera Python-initialiseringen utan att förlita sig på C-strukturer och "
"möjligheten att göra ABI-kompatibla ändringar i framtiden."

msgid ""
"Complete the :pep:`587` :ref:`PyConfig C API <pyconfig_api>` by adding :c:"
"func:`PyInitConfig_AddModule` which can be used to add a built-in extension "
"module; feature previously referred to as the “inittab”."
msgstr ""
"Komplettera :pep:`587` :ref:`PyConfig C API <pyconfig_api>` genom att lägga "
"till :c:func:`PyInitConfig_AddModule` som kan användas för att lägga till en "
"inbyggd tilläggsmodul; funktion som tidigare kallades \"inittab\"."

msgid ""
"Add :c:func:`PyConfig_Get` and :c:func:`PyConfig_Set` functions to get and "
"set the current runtime configuration."
msgstr ""
"Lägg till funktionerna :c:func:`PyConfig_Get` och :c:func:`PyConfig_Set` för "
"att hämta och ställa in den aktuella körtidskonfigurationen."

msgid ""
"PEP 587 “Python Initialization Configuration” unified all the ways to "
"configure the Python initialization. This PEP unifies also the configuration "
"of the Python preinitialization and the Python initialization in a single "
"API. Moreover, this PEP only provides a single choice to embed Python, "
"instead of having two “Python” and “Isolated” choices (PEP 587), to simplify "
"the API further."
msgstr ""
"PEP 587 \"Python Initialization Configuration\" förenade alla sätt att "
"konfigurera Python-initialiseringen. Denna PEP förenar även konfigurationen "
"av Python-förinitialiseringen och Python-initialiseringen i ett enda API. "
"Dessutom ger denna PEP endast ett enda val för att bädda in Python, istället "
"för att ha två val \"Python\" och \"Isolated\" (PEP 587), för att förenkla "
"API:et ytterligare."

msgid ""
"The lower level PEP 587 PyConfig API remains available for use cases with an "
"intentionally higher level of coupling to CPython implementation details "
"(such as emulating the full functionality of CPython’s CLI, including its "
"configuration mechanisms)."
msgstr ""
"Den lägre nivån PEP 587 PyConfig API förblir tillgänglig för användningsfall "
"med en avsiktligt högre kopplingsnivå till CPython-implementeringsdetaljer "
"(t.ex. emulering av den fullständiga funktionaliteten i CPythons CLI, "
"inklusive dess konfigurationsmekanismer)."

msgid "(Contributed by Victor Stinner in :gh:`107954`.)"
msgstr "(Bidrag från Victor Stinner i :gh:`107954`.)"

msgid ":pep:`741`."
msgstr ":pep:`741`."

msgid "Asyncio introspection capabilities"
msgstr "Asyncios möjligheter till introspektion"

msgid ""
"Added a new command-line interface to inspect running Python processes using "
"asynchronous tasks, available via:"
msgstr ""
"Lagt till ett nytt kommandoradsgränssnitt för att inspektera Python-"
"processer som körs med hjälp av asynkrona uppgifter, tillgängligt via:"

msgid "python -m asyncio ps PID"
msgstr "python -m asyncio ps PID"

msgid ""
"This tool inspects the given process ID (PID) and displays information about "
"currently running asyncio tasks.  It outputs a task table: a flat listing of "
"all tasks, their names, their coroutine stacks, and which tasks are awaiting "
"them."
msgstr ""
"Detta verktyg inspekterar det angivna process-ID:t (PID) och visar "
"information om asyncio-uppgifter som körs för närvarande.  Det ger ut en "
"uppgiftstabell: en platt lista över alla uppgifter, deras namn, deras "
"coroutine-stackar och vilka uppgifter som väntar på dem."

msgid "python -m asyncio pstree PID"
msgstr "python -m asyncio pstree PID"

msgid ""
"This tool fetches the same information, but renders a visual async call "
"tree, showing coroutine relationships in a hierarchical format.  This "
"command is particularly useful for debugging long-running or stuck "
"asynchronous programs. It can help developers quickly identify where a "
"program is blocked, what tasks are pending, and how coroutines are chained "
"together."
msgstr ""
"Det här verktyget hämtar samma information, men visar ett visuellt asynkront "
"anropsträd som visar coroutine-relationer i ett hierarkiskt format.  Det här "
"kommandot är särskilt användbart för felsökning av asynkrona program som "
"körs länge eller har fastnat. Det kan hjälpa utvecklare att snabbt "
"identifiera var ett program är blockerat, vilka uppgifter som väntar och hur "
"coroutines är sammanlänkade."

msgid "For example given this code:"
msgstr "Till exempel med denna kod:"

msgid ""
"import asyncio\n"
"\n"
"async def play(track):\n"
"    await asyncio.sleep(5)\n"
"    print(f\"🎵 Finished: {track}\")\n"
"\n"
"async def album(name, tracks):\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        for track in tracks:\n"
"            tg.create_task(play(track), name=track)\n"
"\n"
"async def main():\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        tg.create_task(\n"
"          album(\"Sundowning\", [\"TNDNBTG\", \"Levitate\"]), "
"name=\"Sundowning\")\n"
"        tg.create_task(\n"
"          album(\"TMBTE\", [\"DYWTYLM\", \"Aqua Regia\"]), name=\"TMBTE\")\n"
"\n"
"if __name__ == \"__main__\":\n"
"    asyncio.run(main())"
msgstr ""
"import asyncio\n"
"\n"
"async def play(track):\n"
"    await asyncio.sleep(5)\n"
"    print(f\"🎵 Finished: {track}\")\n"
"\n"
"async def album(name, tracks):\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        for track in tracks:\n"
"            tg.create_task(play(track), name=track)\n"
"\n"
"async def main():\n"
"    async with asyncio.TaskGroup() as tg:\n"
"        tg.create_task(\n"
"          album(\"Sundowning\", [\"TNDNBTG\", \"Levitate\"]), "
"name=\"Sundowning\")\n"
"        tg.create_task(\n"
"          album(\"TMBTE\", [\"DYWTYLM\", \"Aqua Regia\"]), name=\"TMBTE\")\n"
"\n"
"if __name__ == \"__main__\":\n"
"    asyncio.run(main())"

msgid ""
"Executing the new tool on the running process will yield a table like this:"
msgstr ""
"Om du kör det nya verktyget på den pågående processen får du en tabell som "
"ser ut så här:"

msgid ""
"python -m asyncio ps 12345\n"
"\n"
"tid        task id              task name            coroutine "
"stack                                    awaiter "
"chain                                      awaiter name    awaiter id\n"
"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
"1935500    0x7fc930c18050       Task-1               TaskGroup._aexit -> "
"TaskGroup.__aexit__ -> "
"main                                                                       "
"0x0\n"
"1935500    0x7fc930c18230       Sundowning           TaskGroup._aexit -> "
"TaskGroup.__aexit__ -> album   TaskGroup._aexit -> TaskGroup.__aexit__ -> "
"main    Task-1          0x7fc930c18050\n"
"1935500    0x7fc93173fa50       TMBTE                TaskGroup._aexit -> "
"TaskGroup.__aexit__ -> album   TaskGroup._aexit -> TaskGroup.__aexit__ -> "
"main    Task-1          0x7fc930c18050\n"
"1935500    0x7fc93173fdf0       TNDNBTG              sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   Sundowning      0x7fc930c18230\n"
"1935500    0x7fc930d32510       Levitate             sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   Sundowning      0x7fc930c18230\n"
"1935500    0x7fc930d32890       DYWTYLM              sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   TMBTE           0x7fc93173fa50\n"
"1935500    0x7fc93161ec30       Aqua Regia           sleep -> "
"play                                      TaskGroup._aexit -> TaskGroup."
"__aexit__ -> album   TMBTE           0x7fc93173fa50"
msgstr ""
"python -m asyncio ps 12345\n"
"\n"
"tid uppgift id uppgift namn coroutine stack awaiter kedja awaiter namn "
"awaiter id\n"
"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
"1935500 0x7fc930c18050 Uppgift-1 TaskGroup._aexit -> TaskGroup.__aexit__ -> "
"main 0x0\n"
"1935500 0x7fc930c18230 Solnedgång TaskGroup._aexit -> TaskGroup.__aexit__ -> "
"album TaskGroup._aexit -> TaskGroup.__aexit__ -> main Task-1 0x7fc930c18050\n"
"1935500 0x7fc93173fa50 TMBTE TaskGroup._aexit -> TaskGroup.__aexit__ -> "
"album TaskGroup._aexit -> TaskGroup.__aexit__ -> huvuduppgift-1 "
"0x7fc930c18050\n"
"1935500 0x7fc93173fdf0 TNDNBTG sleep -> play TaskGroup._aexit -> TaskGroup."
"__aexit__ -> albumet Sundowning 0x7fc930c18230\n"
"1935500 0x7fc930d32510 Levitate sömn -> spela TaskGroup._aexit -> TaskGroup."
"__aexit__ -> albumet Sundowning 0x7fc930c18230\n"
"1935500 0x7fc930d32890 DYWTYLM sömn -> spela upp TaskGroup._aexit -> "
"TaskGroup.__aexit__ -> albumet TMBTE 0x7fc93173fa50\n"
"1935500 0x7fc93161ec30 Aqua Regia sömn -> spela upp TaskGroup._aexit -> "
"TaskGroup.__aexit__ -> album TMBTE 0x7fc93173fa50"

msgid "or a tree like this:"
msgstr "eller ett träd som det här:"

msgid ""
"python -m asyncio pstree 12345\n"
"\n"
"└── (T) Task-1\n"
"    └──  main example.py:13\n"
"        └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups.py:72\n"
"            └──  TaskGroup._aexit Lib/asyncio/taskgroups.py:121\n"
"                ├── (T) Sundowning\n"
"                │   └──  album example.py:8\n"
"                │       └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups."
"py:72\n"
"                │           └──  TaskGroup._aexit Lib/asyncio/taskgroups."
"py:121\n"
"                │               ├── (T) TNDNBTG\n"
"                │               │   └──  play example.py:4\n"
"                │               │       └──  sleep Lib/asyncio/tasks.py:702\n"
"                │               └── (T) Levitate\n"
"                │                   └──  play example.py:4\n"
"                │                       └──  sleep Lib/asyncio/tasks.py:702\n"
"                └── (T) TMBTE\n"
"                    └──  album example.py:8\n"
"                        └──  TaskGroup.__aexit__ Lib/asyncio/taskgroups."
"py:72\n"
"                            └──  TaskGroup._aexit Lib/asyncio/taskgroups."
"py:121\n"
"                                ├── (T) DYWTYLM\n"
"                                │   └──  play example.py:4\n"
"                                │       └──  sleep Lib/asyncio/tasks.py:702\n"
"                                └── (T) Aqua Regia\n"
"                                    └──  play example.py:4\n"
"                                        └──  sleep Lib/asyncio/tasks.py:702"
msgstr ""
"python -m asyncio pstree 12345\n"
"\n"
"└── (T) Uppgift-1\n"
"    └── huvud exempel.py:13\n"
"        └── TaskGroup.__aexit__ Lib/asyncio/taskgroups.py:72\n"
"            └── TaskGroup._aexit Lib/asyncio/taskgroups.py:121\n"
"                ├── (T) Solnedgång\n"
"                │ └── album example.py:8\n"
"                │ └─── TaskGroup.__aexit__ Lib/asyncio/taskgroups.py:72\n"
"                │ └─── TaskGroup._aexit Lib/asyncio/taskgroups.py:121\n"
"                │ ├── (T) TNDNBTG\n"
"                │ │ └── spela exempel.py:4\n"
"                │ │ └── sleep Lib/asyncio/tasks.py:702\n"
"                │ └── (T) Levitate\n"
"                │ └── spela exempel.py:4\n"
"                │ └── sova Lib/asyncio/tasks.py:702\n"
"                └── (T) TMBTE\n"
"                    └── album exempel.py:8\n"
"                        └── TaskGroup.__aexit__ Lib/asyncio/taskgroups."
"py:72\n"
"                            └── TaskGroup._aexit Lib/asyncio/taskgroups."
"py:121\n"
"                                ├── (T) DYWTYLM\n"
"                                │ └── spela exempel.py:4\n"
"                                │ └── sleep Lib/asyncio/tasks.py:702\n"
"                                └── (T) Aqua Regia\n"
"                                    └── spela exempel.py:4\n"
"                                        └── sova Lib/asyncio/tasks.py:702"

msgid ""
"If a cycle is detected in the async await graph (which could indicate a "
"programming issue), the tool raises an error and lists the cycle paths that "
"prevent tree construction:"
msgstr ""
"Om en cykel upptäcks i async await-grafen (vilket kan tyda på ett "
"programmeringsproblem), ger verktyget ett felmeddelande och listar de "
"cykelvägar som förhindrar trädkonstruktion:"

msgid ""
"python -m asyncio pstree 12345\n"
"\n"
"ERROR: await-graph contains cycles - cannot print a tree!\n"
"\n"
"cycle: Task-2 → Task-3 → Task-2"
msgstr ""
"python -m asyncio pstree 12345\n"
"\n"
"FEL: await-graph innehåller cykler - kan inte skriva ut ett träd!\n"
"\n"
"cykel: Uppgift-2 → Uppgift-3 → Uppgift-2"

msgid ""
"(Contributed by Pablo Galindo, Łukasz Langa, Yury Selivanov, and Marta Gomez "
"Macias in :gh:`91048`.)"
msgstr ""
"(Bidrag från Pablo Galindo, Łukasz Langa, Yury Selivanov och Marta Gomez "
"Macias i :gh:`91048`.)"

msgid "A new type of interpreter"
msgstr "En ny typ av tolk"

msgid ""
"A new type of interpreter has been added to CPython. It uses tail calls "
"between small C functions that implement individual Python opcodes, rather "
"than one large C case statement. For certain newer compilers, this "
"interpreter provides significantly better performance. Preliminary numbers "
"on our machines suggest anywhere up to 30% faster Python code, and a "
"geometric mean of 3-5% faster on ``pyperformance`` depending on platform and "
"architecture. The baseline is Python 3.14 built with Clang 19 without this "
"new interpreter."
msgstr ""
"En ny typ av tolk har lagts till i CPython. Den använder tail calls mellan "
"små C-funktioner som implementerar enskilda Python-opkoder, snarare än en "
"stor C case-sats. För vissa nyare kompilatorer ger denna tolk betydligt "
"bättre prestanda. Preliminära siffror på våra maskiner tyder på upp till 30% "
"faster Python-kod, och ett geometriskt medelvärde på 3-5% faster på "
"``pyperformance`` beroende på plattform och arkitektur. Baslinjen är Python "
"3.14 byggd med Clang 19 utan denna nya tolk."

msgid ""
"This interpreter currently only works with Clang 19 and newer on x86-64 and "
"AArch64 architectures. However, we expect that a future release of GCC will "
"support this as well."
msgstr ""
"Denna tolk fungerar för närvarande endast med Clang 19 och nyare på x86-64- "
"och AArch64-arkitekturer. Vi förväntar oss dock att en framtida version av "
"GCC kommer att stödja detta också."

msgid ""
"This feature is opt-in for now. We highly recommend enabling profile-guided "
"optimization with the new interpreter as it is the only configuration we "
"have tested and can validate its improved performance. For further "
"information on how to build Python, see :option:`--with-tail-call-interp`."
msgstr ""
"Denna funktion är opt-in för tillfället. Vi rekommenderar starkt att du "
"aktiverar profilstyrd optimering med den nya tolken eftersom det är den enda "
"konfigurationen vi har testat och kan validera dess förbättrade prestanda. "
"För ytterligare information om hur man bygger Python, se :option:`--with-"
"tail-call-interp`."

msgid ""
"This is not to be confused with `tail call optimization`__ of Python "
"functions, which is currently not implemented in CPython."
msgstr ""
"Detta ska inte förväxlas med `tail call optimization`__ av Python-"
"funktioner, som för närvarande inte är implementerat i CPython."

msgid ""
"This new interpreter type is an internal implementation detail of the "
"CPython interpreter.  It doesn't change the visible behavior of Python "
"programs at all.  It can improve their performance, but doesn't change "
"anything else."
msgstr ""
"Denna nya tolktyp är en intern implementeringsdetalj av CPython-tolken.  Den "
"ändrar inte Python-programmens synliga beteende alls.  Det kan förbättra "
"deras prestanda, men ändrar inget annat."

msgid ""
"This section previously reported a 9-15% geometric mean speedup. This number "
"has since been cautiously revised down to 3-5%. While we expect performance "
"results to be better than what we report, our estimates are more "
"conservative due to a `compiler bug <https://github.com/llvm/llvm-project/"
"issues/106846>`_ found in Clang/LLVM 19, which causes the normal interpreter "
"to be slower. We were unaware of this bug, resulting in inaccurate results. "
"We sincerely apologize for communicating results that were only accurate for "
"LLVM v19.1.x and v20.1.0. In the meantime, the bug has been fixed in LLVM "
"v20.1.1 and for the upcoming v21.1, but it will remain unfixed for LLVM "
"v19.1.x and v20.1.0. Thus any benchmarks with those versions of LLVM may "
"produce inaccurate numbers. (Thanks to Nelson Elhage for bringing this to "
"light.)"
msgstr ""
"Detta avsnitt rapporterade tidigare en 9-15% geometrisk "
"medelhastighetsökning. Denna siffra har sedan dess försiktigt reviderats ned "
"till 3-5%. Även om vi förväntar oss att prestandaresultaten ska vara bättre "
"än vad vi rapporterar, är våra uppskattningar mer konservativa på grund av "
"en `kompilatorbugg <https://github.com/llvm/llvm-project/issues/106846>`_ "
"som finns i Clang/LLVM 19, som gör att den normala tolken blir långsammare. "
"Vi var inte medvetna om denna bugg, vilket resulterade i felaktiga resultat. "
"Vi ber uppriktigt om ursäkt för att vi kommunicerade resultat som endast var "
"korrekta för LLVM v19.1.x och v20.1.0. Under tiden har buggen åtgärdats i "
"LLVM v20.1.1 och för den kommande v21.1, men den kommer inte att åtgärdas "
"för LLVM v19.1.x och v20.1.0. Därför kan alla benchmarks med dessa versioner "
"av LLVM ge felaktiga siffror. (Tack till Nelson Elhage för att han "
"uppmärksammade detta)"

msgid ""
"(Contributed by Ken Jin in :gh:`128563`, with ideas on how to implement this "
"in CPython by Mark Shannon, Garrett Gu, Haoran Xu, and Josh Haberman.)"
msgstr ""
"(Bidrag från Ken Jin i :gh:`128563`, med idéer om hur man implementerar "
"detta i CPython av Mark Shannon, Garrett Gu, Haoran Xu och Josh Haberman.)"

msgid "Free-threaded mode"
msgstr "Frittrådat läge"

msgid ""
"Free-threaded mode (:pep:`703`), initially added in 3.13, has been "
"significantly improved. The implementation described in PEP 703 was "
"finished, including C API changes, and temporary workarounds in the "
"interpreter were replaced with more permanent solutions. The specializing "
"adaptive interpreter (:pep:`659`) is now enabled in free-threaded mode, "
"which along with many other optimizations greatly improves its performance. "
"The performance penalty on single-threaded code in free-threaded mode is now "
"roughly 5-10%, depending on platform and C compiler used."
msgstr ""
"Free-threaded mode (:pep:`703`), som ursprungligen lades till i 3.13, har "
"förbättrats avsevärt. Implementationen som beskrivs i PEP 703 har slutförts, "
"inklusive ändringar i C API, och tillfälliga lösningar i tolken har ersatts "
"med mer permanenta lösningar. Den specialiserade adaptiva tolken (:pep:"
"`659`) är nu aktiverad i fritt trådat läge, vilket tillsammans med många "
"andra optimeringar kraftigt förbättrar dess prestanda. Prestandaförlusten "
"för enkeltrådad kod i fritt trådat läge är nu ungefär 5-10%, beroende på "
"plattform och vilken C-kompilator som används."

msgid ""
"This work was done by many contributors: Sam Gross, Matt Page, Neil "
"Schemenauer, Thomas Wouters, Donghee Na, Kirill Podoprigora, Ken Jin, Itamar "
"Oren, Brett Simmers, Dino Viehland, Nathan Goldbaum, Ralf Gommers, Lysandros "
"Nikolaou, Kumar Aditya, Edgar Margffoy, and many others."
msgstr ""
"Detta arbete har utförts av många bidragsgivare: Sam Gross, Matt Page, Neil "
"Schemenauer, Thomas Wouters, Donghee Na, Kirill Podoprigora, Ken Jin, Itamar "
"Oren, Brett Simmers, Dino Viehland, Nathan Goldbaum, Ralf Gommers, Lysandros "
"Nikolaou, Kumar Aditya, Edgar Margffoy och många andra."

msgid ""
"Some of these contributors are employed by Meta, which has continued to "
"provide significant engineering resources to support this project."
msgstr ""
"Några av dessa medarbetare är anställda av Meta, som har fortsatt att "
"tillhandahålla betydande tekniska resurser för att stödja detta projekt."

msgid ""
"From 3.14, when compiling extension modules for the free-threaded build of "
"CPython on Windows, the preprocessor variable ``Py_GIL_DISABLED`` now needs "
"to be specified by the build backend, as it will no longer be determined "
"automatically by the C compiler. For a running interpreter, the setting that "
"was used at compile time can be found using :func:`sysconfig.get_config_var`."
msgstr ""
"Från och med 3.14 måste preprocessorvariabeln ``Py_GIL_DISABLED`` nu anges "
"av build backend vid kompilering av tilläggsmoduler för den fritt trådade "
"versionen av CPython på Windows, eftersom den inte längre bestäms "
"automatiskt av C-kompilatorn. För en tolk som körs kan den inställning som "
"användes vid kompileringstillfället hittas med :func:`sysconfig."
"get_config_var`."

msgid ""
"A new flag has been added, :data:`~sys.flags.context_aware_warnings`.  This "
"flag defaults to true for the free-threaded build and false for the GIL-"
"enabled build. If the flag is true then the :class:`warnings.catch_warnings` "
"context manager uses a context variable for warning filters.  This makes the "
"context manager behave predicably when used with multiple threads or "
"asynchronous tasks."
msgstr ""
"En ny flagga har lagts till, :data:`~sys.flags.context_aware_warnings`.  "
"Denna flagga är som standard true för free-threaded build och false för GIL-"
"enabled build. Om flaggan är true använder kontexthanteraren :class:"
"`warnings.catch_warnings` en kontextvariabel för varningsfilter.  Detta gör "
"att kontexthanteraren beter sig förutsägbart när den används med flera "
"trådar eller asynkrona uppgifter."

msgid ""
"A new flag has been added, :data:`~sys.flags.thread_inherit_context`. This "
"flag defaults to true for the free-threaded build and false for the GIL-"
"enabled build. If the flag is true then threads created with :class:"
"`threading.Thread` start with a copy of the :class:`~contextvars.Context()` "
"of the caller of :meth:`~threading.Thread.start`.  Most significantly, this "
"makes the warning filtering context established by :class:`~warnings."
"catch_warnings` be \"inherited\" by threads (or asyncio tasks) started "
"within that context.  It also affects other modules that use context "
"variables, such as the :mod:`decimal` context manager."
msgstr ""
"En ny flagga har lagts till, :data:`~sys.flags.thread_inherit_context`. "
"Denna flagga är som standard true för free-threaded build och false för GIL-"
"enabled build. Om flaggan är true kommer trådar som skapas med :class:"
"`threading.Thread` att starta med en kopia av :class:`~contextvars."
"Context()` för den som anropar :meth:`~threading.Thread.start`.  Viktigast "
"av allt är att detta gör att varningsfiltreringskontexten som upprättas av :"
"class:`~warnings.catch_warnings` \"ärvs\" av trådar (eller asyncio-"
"uppgifter) som startas inom den kontexten.  Det påverkar även andra moduler "
"som använder kontextvariabler, t.ex. kontexthanteraren :mod:`decimal`."

msgid "Syntax highlighting in PyREPL"
msgstr "Syntaxmarkering i PyREPL"

msgid ""
"The default :term:`interactive` shell now highlights Python syntax as you "
"type.  The feature is enabled by default unless the :envvar:"
"`PYTHON_BASIC_REPL` environment is set or any color-disabling environment "
"variables are used. See :ref:`using-on-controlling-color` for details."
msgstr ""
"Standardskalet :term:`interactive` markerar nu Python-syntax när du "
"skriver.  Denna funktion är aktiverad som standard om inte :envvar:"
"`PYTHON_BASIC_REPL` är inställd eller om inga miljövariabler som inaktiverar "
"färg används. Se :ref:`using-on-controlling-color` för detaljer."

msgid ""
"The default color theme for syntax highlighting strives for good contrast "
"and uses exclusively the 4-bit VGA standard ANSI color codes for maximum "
"compatibility. The theme can be customized using an experimental API "
"``_colorize.set_theme()``.  This can be called interactively, as well as in "
"the :envvar:`PYTHONSTARTUP` script."
msgstr ""
"Standardfärgtemat för syntaxmarkering strävar efter god kontrast och "
"använder uteslutande 4-bitars VGA-standard ANSI-färgkoder för maximal "
"kompatibilitet. Temat kan anpassas med hjälp av ett experimentellt API "
"``_colorize.set_theme()``.  Detta kan anropas interaktivt, såväl som i "
"skriptet :envvar:`PYTHONSTARTUP`."

msgid "(Contributed by Łukasz Langa in :gh:`131507`.)"
msgstr "(Bidrag från Łukasz Langa i :gh:`131507`.)"

msgid "Binary releases for the experimental just-in-time compiler"
msgstr "Binära utgåvor för den experimentella just-in-time-kompilatorn"

msgid ""
"The official macOS and Windows release binaries now include an "
"*experimental* just-in-time (JIT) compiler. Although it is **not** "
"recommended for production use, it can be tested by setting :envvar:"
"`PYTHON_JIT=1 <PYTHON_JIT>` as an environment variable. Downstream source "
"builds and redistributors can use the :option:`--enable-experimental-jit=yes-"
"off` configuration option for similar behavior."
msgstr ""
"De officiella binärversionerna för macOS och Windows innehåller nu en "
"*experimentell* JIT-kompilator (just-in-time). Även om den **inte** "
"rekommenderas för produktionsanvändning kan den testas genom att ställa in :"
"envvar:`PYTHON_JIT=1 <PYTHON_JIT>` som en miljövariabel. Nedströms "
"källkodskonstruktioner och redistributörer kan använda "
"konfigurationsalternativet :option:`--enable-experimental-jit=yes-off` för "
"liknande beteende."

msgid ""
"The JIT is at an early stage and still in active development. As such, the "
"typical performance impact of enabling it can range from 10% slower to 20% "
"faster, depending on workload. To aid in testing and evaluation, a set of "
"introspection functions has been provided in the :data:`sys._jit` "
"namespace. :func:`sys._jit.is_available` can be used to determine if the "
"current executable supports JIT compilation, while :func:`sys._jit."
"is_enabled` can be used to tell if JIT compilation has been enabled for the "
"current process."
msgstr ""
"JIT befinner sig i ett tidigt skede och är fortfarande under aktiv "
"utveckling. Därför kan den typiska prestandapåverkan av att aktivera den "
"variera från 10% s% lägre till 20% f% högre, beroende på arbetsbelastning. "
"För att underlätta testning och utvärdering har en uppsättning "
"introspektionsfunktioner tillhandahållits i namnrymden :data:`sys._jit`. :"
"func:`sys._jit.is_available` kan användas för att avgöra om den aktuella "
"körbara filen stöder JIT-kompilering, medan :func:`sys._jit.is_enabled` kan "
"användas för att avgöra om JIT-kompilering har aktiverats för den aktuella "
"processen."

msgid ""
"Currently, the most significant missing functionality is that native "
"debuggers and profilers like ``gdb`` and ``perf`` are unable to unwind "
"through JIT frames (Python debuggers and profilers, like :mod:`pdb` or :mod:"
"`profile`, continue to work without modification). Free-threaded builds do "
"not support JIT compilation."
msgstr ""
"För närvarande är den viktigaste saknade funktionaliteten att inbyggda "
"debuggers och profilerare som ``gdb`` och ``perf`` inte kan spola tillbaka "
"genom JIT-ramar (Python-debuggers och profilerare, som :mod:`pdb` eller :mod:"
"`profile`, fortsätter att fungera utan modifiering). Frittrådade builds "
"stöder inte JIT-kompilering."

msgid ""
"Please report any bugs or major performance regressions that you encounter!"
msgstr ""
"Vänligen rapportera alla buggar eller större prestandaförbättringar som du "
"stöter på!"

msgid ":pep:`744`"
msgstr ":pep:`744``"

msgid "Concurrent safe warnings control"
msgstr "Kontroll av samtidiga säkra varningar"

msgid ""
"The :class:`warnings.catch_warnings` context manager will now optionally use "
"a context variable for warning filters.  This is enabled by setting the :"
"data:`~sys.flags.context_aware_warnings` flag, either with the ``-X`` "
"command-line option or an environment variable.  This gives predicable "
"warnings control when using :class:`~warnings.catch_warnings` combined with "
"multiple threads or asynchronous tasks. The flag defaults to true for the "
"free-threaded build and false for the GIL-enabled build."
msgstr ""
"Kontexthanteraren :class:`warnings.catch_warnings` använder nu valfritt en "
"kontextvariabel för varningsfilter.  Detta aktiveras genom att ställa in "
"flaggan :data:`~sys.flags.context_aware_warnings`, antingen med "
"kommandoradsalternativet ``-X`` eller en miljövariabel.  Detta ger "
"förutsägbar varningskontroll när du använder :class:`~warnings."
"catch_warnings` i kombination med flera trådar eller asynkrona uppgifter. "
"Flaggan är som standard true för den fritt trådade byggnaden och false för "
"den GIL-aktiverade byggnaden."

msgid "(Contributed by Neil Schemenauer and Kumar Aditya in :gh:`130010`.)"
msgstr "(Bidrag från Neil Schemenauer och Kumar Aditya i :gh:`130010`.)"

msgid "Incremental garbage collection"
msgstr "Inkrementell skräpplockning"

msgid ""
"The cycle garbage collector is now incremental. This means that maximum "
"pause times are reduced by an order of magnitude or more for larger heaps."
msgstr ""
"Cykelns sopsamlare är nu inkrementell. Det innebär att den maximala "
"paustiden minskar med en storleksordning eller mer för större högar."

msgid ""
"There are now only two generations: young and old. When :func:`gc.collect` "
"is not called directly, the GC is invoked a little less frequently. When "
"invoked, it collects the young generation and an increment of the old "
"generation, instead of collecting one or more generations."
msgstr ""
"Det finns nu bara två generationer: unga och gamla. När :func:`gc.collect` "
"inte anropas direkt, anropas GC lite mer sällan. När den anropas samlar den "
"in den unga generationen och ett inkrement av den gamla generationen, "
"istället för att samla in en eller flera generationer."

msgid "The behavior of :func:`!gc.collect` changes slightly:"
msgstr "Beteendet för :func:`!gc.collect` ändras något:"

msgid ""
"``gc.collect(1)``: Performs an increment of garbage collection, rather than "
"collecting generation 1."
msgstr ""
"``gc.collect(1)``: Utför en ökning av skräpinsamlingen, istället för att "
"samla in generation 1."

msgid "Other calls to :func:`!gc.collect` are unchanged."
msgstr "Andra anrop till :func:`!gc.collect` är oförändrade."

msgid "(Contributed by Mark Shannon in :gh:`108362`.)"
msgstr "(Bidrag från Mark Shannon i :gh:`108362`.)"

msgid "Platform support"
msgstr "Stöd för plattform"

msgid ""
":pep:`776`: Emscripten is now an officially supported platform at :pep:`tier "
"3 <11#tier-3>`. As a part of this effort, more than 25 bugs in `Emscripten "
"libc`__ were fixed. Emscripten now includes support for :mod:`ctypes`, :mod:"
"`termios`, and :mod:`fcntl`, as well as experimental support for :ref:"
"`PyREPL <tut-interactive>`."
msgstr ""
":pep:`776`: Emscripten är nu en officiellt stödd plattform på :pep:`tier 3 "
"<11#tier-3>`. Som en del av detta arbete har mer än 25 buggar i `Emscripten "
"libc`__ åtgärdats. Emscripten innehåller nu stöd för :mod:`ctypes`, :mod:"
"`termios` och :mod:`fcntl`, samt experimentellt stöd för :ref:`PyREPL <tut-"
"interactive>`."

msgid ""
"(Contributed by R. Hood Chatham in :gh:`127146`, :gh:`127683`, and :gh:"
"`136931`.)"
msgstr ""
"(Bidrag från R. Hood Chatham i :gh:`127146`, :gh:`127683`, och :gh:`136931`.)"

msgid "Other language changes"
msgstr "Andra språkliga ändringar"

msgid ""
"The default :term:`interactive` shell now supports import autocompletion. "
"This means that typing ``import foo`` and pressing ``<tab>`` will suggest "
"modules starting with ``foo``. Similarly, typing ``from foo import b`` will "
"suggest submodules of ``foo`` starting with ``b``. Note that autocompletion "
"of module attributes is not currently supported. (Contributed by Tomas Roun "
"in :gh:`69605`.)"
msgstr ""
"Standardskalet :term:`interactive` har nu stöd för automatisk "
"importkomplettering. Detta innebär att om du skriver ``import foo`` och "
"trycker på ``<tab>`` kommer moduler som börjar med ``foo`` att föreslås. På "
"samma sätt, om du skriver ``from foo import b`` kommer undermoduler till "
"``foo`` som börjar med ``b`` att föreslås. Observera att autokomplettering "
"av modulattribut för närvarande inte stöds. (Bidrag från Tomas Roun i :gh:"
"`69605`.)"

msgid ""
"The :func:`map` built-in now has an optional keyword-only *strict* flag "
"like :func:`zip` to check that all the iterables are of equal length. "
"(Contributed by Wannes Boeykens in :gh:`119793`.)"
msgstr ""
"Den inbyggda :func:`map` har nu en valfri *strict*-flagga för endast "
"nyckelord som :func:`zip` för att kontrollera att alla iterabler är lika "
"långa. (Bidrag från Wannes Boeykens i :gh:`119793`.)"

msgid ""
"Incorrect usage of :keyword:`await` and asynchronous comprehensions is now "
"detected even if the code is optimized away by the :option:`-O` command-line "
"option. For example, ``python -O -c 'assert await 1'`` now produces a :exc:"
"`SyntaxError`. (Contributed by Jelle Zijlstra in :gh:`121637`.)"
msgstr ""
"Felaktig användning av :keyword:`await` och asynkrona förståelser upptäcks "
"nu även om koden har optimerats bort med kommandoradsalternativet :option:`-"
"O`. Till exempel, ``python -O -c 'assert await 1'`` producerar nu en :exc:"
"`SyntaxError`. (Bidrag från Jelle Zijlstra i :gh:`121637`.)"

msgid ""
"Writes to ``__debug__`` are now detected even if the code is optimized away "
"by the :option:`-O` command-line option. For example, ``python -O -c 'assert "
"(__debug__ := 1)'`` now produces a :exc:`SyntaxError`. (Contributed by Irit "
"Katriel in :gh:`122245`.)"
msgstr ""
"Skrivningar till ``__debug__`` upptäcks nu även om koden har optimerats bort "
"med kommandoradsalternativet :option:`-O`. Till exempel, ``python -O -c "
"'assert (__debug__ := 1)'`` producerar nu en :exc:`SyntaxError`. (Bidrag "
"från Irit Katriel i :gh:`122245`.)"

msgid ""
"Add class methods :meth:`float.from_number` and :meth:`complex.from_number` "
"to convert a number to :class:`float` or :class:`complex` type "
"correspondingly. They raise an error if the argument is a string. "
"(Contributed by Serhiy Storchaka in :gh:`84978`.)"
msgstr ""
"Lägg till klassmetoderna :meth:`float.from_number` och :meth:`complex."
"from_number` för att konvertera ett tal till :class:`float` respektive :"
"class:`complex`. De ger upphov till ett fel om argumentet är en sträng. "
"(Bidrag från Serhiy Storchaka i :gh:`84978`.)"

msgid ""
"Implement mixed-mode arithmetic rules combining real and complex numbers as "
"specified by C standards since C99. (Contributed by Sergey B Kirpichev in :"
"gh:`69639`.)"
msgstr ""
"Implementera aritmetiska regler för blandade lägen som kombinerar reella och "
"komplexa tal enligt C-standarderna sedan C99. (Bidrag från Sergey B "
"Kirpichev i :gh:`69639`.)"

msgid ""
"All Windows code pages are now supported as \"cpXXX\" codecs on Windows. "
"(Contributed by Serhiy Storchaka in :gh:`123803`.)"
msgstr ""
"Alla Windows-kodsidor stöds nu som \"cpXXX\"-codecs i Windows. (Bidrag från "
"Serhiy Storchaka i :gh:`123803`.)"

msgid ""
":class:`super` objects are now :mod:`pickleable <pickle>` and :mod:`copyable "
"<copy>`. (Contributed by Serhiy Storchaka in :gh:`125767`.)"
msgstr ""
":class:`super`-objekt är nu :mod:`pickleable <pickle>` och :mod:`copyable "
"<copy>`. (Bidrag från Serhiy Storchaka i :gh:`125767`.)"

msgid ""
"The :class:`memoryview` type now supports subscription, making it a :term:"
"`generic type`. (Contributed by Brian Schubert in :gh:`126012`.)"
msgstr ""
"Typen :class:`memoryview` har nu stöd för prenumeration, vilket gör den till "
"en :term:`generisk typ`. (Bidrag från Brian Schubert i :gh:`126012`.)"

msgid ""
"Support underscore and comma as thousands separators in the fractional part "
"for floating-point presentation types of the new-style string formatting "
"(with :func:`format` or :ref:`f-strings`). (Contributed by Sergey B "
"Kirpichev in :gh:`87790`.)"
msgstr ""
"Stöd för understrykning och kommatecken som tusentalsavgränsare i bråkdelen "
"för presentationstyper med flyttal i den nya stilen för strängformatering "
"(med :func:`format` eller :ref:`f-strings`). (Bidrag från Sergey B Kirpichev "
"i :gh:`87790`.)"

msgid ""
"The :func:`bytes.fromhex` and :func:`bytearray.fromhex` methods now accept "
"ASCII :class:`bytes` and :term:`bytes-like objects <bytes-like object>`. "
"(Contributed by Daniel Pope in :gh:`129349`.)"
msgstr ""
"Metoderna :func:`bytes.fromhex` och :func:`bytearray.fromhex` accepterar nu "
"ASCII :class:`bytes` och :term:`bytesliknande objekt <bytes-like object>`. "
"(Bidrag från Daniel Pope i :gh:`129349`.)"

msgid ""
"Support ``\\z`` as a synonym for ``\\Z`` in :mod:`regular expressions <re>`. "
"It is interpreted unambiguously in many other regular expression engines, "
"unlike ``\\Z``, which has subtly different behavior. (Contributed by Serhiy "
"Storchaka in :gh:`133306`.)"
msgstr ""
"Stöd för ``z`` som synonym för ``Z`` i :mod:`reguljära uttryck <re>`. Det "
"tolkas otvetydigt i många andra motorer för reguljära uttryck, till skillnad "
"från ``Z``, som har ett subtilt annorlunda beteende. (Bidrag från Serhiy "
"Storchaka i :gh:`133306`.)"

msgid ""
"``\\B`` in :mod:`regular expression <re>` now matches empty input string. "
"Now it is always the opposite of ``\\b``. (Contributed by Serhiy Storchaka "
"in :gh:`124130`.)"
msgstr ""
"``B`` i :mod:`regelbundet uttryck <re>`` matchar nu tom indatasträng. Nu är "
"det alltid motsatsen till ``b``. (Bidrag från Serhiy Storchaka i :gh:"
"`124130`.)"

msgid ""
"iOS and macOS apps can now be configured to redirect ``stdout`` and "
"``stderr`` content to the system log. (Contributed by Russell Keith-Magee "
"in :gh:`127592`.)"
msgstr ""
"iOS- och macOS-appar kan nu konfigureras att omdirigera innehåll från "
"``stdout`` och ``stderr`` till systemloggen. (Bidrag från Russell Keith-"
"Magee i :gh:`127592`.)"

msgid ""
"The iOS testbed is now able to stream test output while the test is running. "
"The testbed can also be used to run the test suite of projects other than "
"CPython itself. (Contributed by Russell Keith-Magee in :gh:`127592`.)"
msgstr ""
"IOS-testbädden kan nu strömma testutdata medan testet körs. Testbädden kan "
"också användas för att köra testsviten för andra projekt än CPython själv. "
"(Bidrag från Russell Keith-Magee i :gh:`127592`.)"

msgid ""
"Three-argument :func:`pow` now tries calling :meth:`~object.__rpow__` if "
"necessary. Previously it was only called in two-argument :func:`!pow` and "
"the binary power operator. (Contributed by Serhiy Storchaka in :gh:`130104`.)"
msgstr ""
"Tre-argument :func:`pow` försöker nu anropa :meth:`~object.__rpow__` om det "
"behövs. Tidigare anropades det bara i två-argument :func:`!pow` och den "
"binära potensoperatorn. (Bidrag från Serhiy Storchaka i :gh:`130104`.)"

msgid ""
"Add a built-in implementation for HMAC (:rfc:`2104`) using formally verified "
"code from the `HACL* <https://github.com/hacl-star/hacl-star/>`__ project. "
"This implementation is used as a fallback when the OpenSSL implementation of "
"HMAC is not available. (Contributed by Bénédikt Tran in :gh:`99108`.)"
msgstr ""
"Lägg till en inbyggd implementering för HMAC (:rfc:`2104`) med hjälp av "
"formellt verifierad kod från projektet `HACL* <https://github.com/hacl-star/"
"hacl-star/>`__. Denna implementation används som en reservlösning när "
"OpenSSL-implementationen av HMAC inte är tillgänglig. (Bidrag från Bénédikt "
"Tran i :gh:`99108`.)"

msgid ""
"The import time flag can now track modules that are already loaded "
"('cached'), via the new :option:`-X importtime=2 <-X>`. When such a module "
"is imported, the ``self`` and ``cumulative`` times are replaced by the "
"string ``cached``. Values above ``2`` for ``-X importtime`` are now reserved "
"for future use. (Contributed by Noah Kim and Adam Turner in :gh:`118655`.)"
msgstr ""
"Flaggan för importtid kan nu spåra moduler som redan är inlästa "
"(\"cached\"), via det nya :option:`-X importtime=2 <-X>`. När en sådan modul "
"importeras kommer tiderna ``self`` och ``cumulative`` att ersättas av "
"strängen ``cached``. Värden över ``2`` för ``-X importtime`` är nu "
"reserverade för framtida användning. (Bidrag från Noah Kim och Adam Turner "
"i :gh:`118655`.)"

msgid ""
"When subclassing from a pure C type, the C slots for the new type are no "
"longer replaced with a wrapped version on class creation if they are not "
"explicitly overridden in the subclass. (Contributed by Tomasz Pytel in :gh:"
"`132329`.)"
msgstr ""
"Vid underklassning från en ren C-typ ersätts inte längre C-platserna för den "
"nya typen med en omsluten version när klassen skapas om de inte uttryckligen "
"åsidosätts i underklassen. (Bidrag från Tomasz Pytel i :gh:`132329`.)"

msgid ""
"The command-line option :option:`-c` now automatically dedents its code "
"argument before execution. The auto-dedentation behavior mirrors :func:"
"`textwrap.dedent`. (Contributed by Jon Crall and Steven Sun in :gh:`103998`.)"
msgstr ""
"Kommandoradsalternativet :option:`-c` avtäcker nu automatiskt sitt "
"kodargument före exekvering. Beteendet för automatisk dedentering speglar :"
"func:`textwrap.dedent`. (Bidrag från Jon Crall och Steven Sun i :gh:"
"`103998`.)"

msgid ""
"Improve error message when an object supporting the synchronous context "
"manager protocol is entered using :keyword:`async with` instead of :keyword:"
"`with`. And vice versa with the asynchronous context manager protocol. "
"(Contributed by Bénédikt Tran in :gh:`128398`.)"
msgstr ""
"Förbättra felmeddelandet när ett objekt som stöder protokollet för synkron "
"kontexthantering anges med :keyword:`async with` istället för :keyword:"
"`with`. Och vice versa med det asynkrona kontexthanterarprotokollet. (Bidrag "
"från Bénédikt Tran i :gh:`128398`.)"

msgid ""
":option:`!-J` is no longer a reserved flag for Jython_, and now has no "
"special meaning. (Contributed by Adam Turner in :gh:`133336`.)"
msgstr ""
":option:`!-J` är inte längre en reserverad flagga för Jython_, och har nu "
"ingen speciell betydelse. (Bidrag från Adam Turner i :gh:`133336`.)"

msgid ""
"PEP 765: Disallow ``return``/``break``/``continue`` that exit a ``finally`` "
"block"
msgstr ""
"PEP 765: Förbjud ``return``/`break``/`continue`` som avslutar ett "
"``finally`` block"

msgid ""
"The compiler emits a :exc:`SyntaxWarning` when a :keyword:`return`, :keyword:"
"`break` or :keyword:`continue` statements appears where it exits a :keyword:"
"`finally` block. This change is specified in :pep:`765`."
msgstr ""
"Kompilatorn avger en :exc:`SyntaxWarning` när en :keyword:`return`, :keyword:"
"`break` eller :keyword:`continue`-sats visas där den avslutar ett :keyword:"
"`finally`-block. Denna ändring är specificerad i :pep:`765`."

msgid "New modules"
msgstr "Nya moduler"

msgid ""
":mod:`annotationlib`: For introspecting :term:`annotations <annotation>`. "
"See :pep:`749` for more details. (Contributed by Jelle Zijlstra in :gh:"
"`119180`.)"
msgstr ""
":mod:`annotationlib`: För introspektering av :term:`annotations "
"<annotation>`. Se :pep:`749` för mer information. (Bidrag från Jelle "
"Zijlstra i :gh:`119180`.)"

msgid "Improved modules"
msgstr "Förbättrade moduler"

msgid "argparse"
msgstr "argparse"

msgid ""
"The default value of the :ref:`program name <prog>` for :class:`argparse."
"ArgumentParser` now reflects the way the Python interpreter was instructed "
"to find the ``__main__`` module code. (Contributed by Serhiy Storchaka and "
"Alyssa Coghlan in :gh:`66436`.)"
msgstr ""
"Standardvärdet för :ref:`programnamn <prog>` för :class:`argparse."
"ArgumentParser` återspeglar nu det sätt på vilket Python-tolken instruerades "
"att hitta modulkoden ``__main__``. (Bidrag från Serhiy Storchaka och Alyssa "
"Coghlan i :gh:`66436`.)"

msgid ""
"Introduced the optional *suggest_on_error* parameter to :class:`argparse."
"ArgumentParser`, enabling suggestions for argument choices and subparser "
"names if mistyped by the user. (Contributed by Savannah Ostrowski in :gh:"
"`124456`.)"
msgstr ""
"Införde den valfria parametern *suggest_on_error* till :class:`argparse."
"ArgumentParser`, vilket möjliggör förslag på argumentval och namn på "
"subparser om användaren skriver fel. (Bidrag från Savannah Ostrowski i :gh:"
"`124456`.)"

msgid ""
"Enable color for help text, which can be disabled with the optional *color* "
"parameter to :class:`argparse.ArgumentParser`. This can also be controlled "
"by :ref:`environment variables <using-on-controlling-color>`. (Contributed "
"by Hugo van Kemenade in :gh:`130645`.)"
msgstr ""
"Aktivera färg för hjälptext, som kan inaktiveras med den valfria *color*-"
"parametern till :class:`argparse.ArgumentParser`. Detta kan också "
"kontrolleras med :ref:``miljövariabler <using-on-controlling-color>`. "
"(Bidrag från Hugo van Kemenade i :gh:`130645`.)"

msgid "ast"
msgstr "ast"

msgid ""
"Add :func:`ast.compare` for comparing two ASTs. (Contributed by Batuhan "
"Taskaya and Jeremy Hylton in :gh:`60191`.)"
msgstr ""
"Lägg till :func:`ast.compare` för att jämföra två AST:er. (Bidrag från "
"Batuhan Taskaya och Jeremy Hylton i :gh:`60191`.)"

msgid ""
"Add support for :func:`copy.replace` for AST nodes. (Contributed by Bénédikt "
"Tran in :gh:`121141`.)"
msgstr ""
"Lägg till stöd för :func:`copy.replace` för AST-noder. (Bidrag från Bénédikt "
"Tran i :gh:`121141`.)"

msgid ""
"Docstrings are now removed from an optimized AST in optimization level 2. "
"(Contributed by Irit Katriel in :gh:`123958`.)"
msgstr ""
"Docstrings tas nu bort från en optimerad AST i optimeringsnivå 2. (Bidrag "
"från Irit Katriel i :gh:`123958`.)"

msgid ""
"The ``repr()`` output for AST nodes now includes more information. "
"(Contributed by Tomas Roun in :gh:`116022`.)"
msgstr ""
"Utmatningen ``repr()`` för AST-noder innehåller nu mer information. (Bidrag "
"från Tomas Roun i :gh:`116022`.)"

msgid ""
":func:`ast.parse`, when called with an AST as input, now always verifies "
"that the root node type is appropriate. (Contributed by Irit Katriel in :gh:"
"`130139`.)"
msgstr ""
":func:`ast.parse`, när den anropas med en AST som indata, verifierar nu "
"alltid att rotnodstypen är lämplig. (Bidrag från Irit Katriel i :gh:"
"`130139`.)"

msgid ""
"Add new ``--feature-version``, ``--optimize``, ``--show-empty`` options to "
"command-line interface. (Contributed by Semyon Moroz in :gh:`133367`.)"
msgstr ""
"Lägg till nya ``--feature-version``, ``--optimize``, ``--show-empty`` "
"alternativ till kommandoradsgränssnittet. (Bidrag från Semyon Moroz i :gh:"
"`133367`.)"

msgid "asyncio"
msgstr "asyncio"

msgid ""
"The function and methods named :func:`!create_task` now take an arbitrary "
"list of keyword arguments. All keyword arguments are passed to the :class:"
"`~asyncio.Task` constructor or the custom task factory. (See :meth:`~asyncio."
"loop.set_task_factory` for details.) The ``name`` and ``context`` keyword "
"arguments are no longer special; the name should now be set using the "
"``name`` keyword argument of the factory, and ``context`` may be ``None``."
msgstr ""
"Funktionen och metoderna med namnet :func:`!create_task` tar nu en "
"godtycklig lista med nyckelordsargument. Alla nyckelordsargument skickas "
"till :class:`~asyncio.task`-konstruktören eller den anpassade "
"uppgiftsfabriken. (Se :meth:`~asyncio.loop.set_task_factory` för detaljer.) "
"Nyckelordsargumenten ``name`` och ``context`` är inte längre speciella; "
"namnet ska nu anges med hjälp av nyckelordsargumentet ``name`` i fabriken, "
"och ``context`` kan vara ``None``."

msgid ""
"This affects the following function and methods: :meth:`asyncio."
"create_task`, :meth:`asyncio.loop.create_task`, :meth:`asyncio.TaskGroup."
"create_task`. (Contributed by Thomas Grainger in :gh:`128307`.)"
msgstr ""
"Detta påverkar följande funktioner och metoder: :meth:`asyncio."
"create_task`, :meth:`asyncio.loop.create_task`, :meth:`asyncio.TaskGroup."
"create_task`. (Bidrag från Thomas Grainger i :gh:`128307`.)"

msgid "bdb"
msgstr "bdb"

msgid ""
"The :mod:`bdb` module now supports the :mod:`sys.monitoring` backend. "
"(Contributed by Tian Gao in :gh:`124533`.)"
msgstr ""
"Modulen :mod:`bdb` har nu stöd för backend :mod:`sys.monitoring`. (Bidrag "
"från Tian Gao i :gh:`124533`.)"

msgid "calendar"
msgstr "kalender"

msgid ""
"By default, today's date is highlighted in color in :mod:`calendar`'s :ref:"
"`command-line <calendar-cli>` text output. This can be controlled by :ref:"
"`environment variables <using-on-controlling-color>`. (Contributed by Hugo "
"van Kemenade in :gh:`128317`.)"
msgstr ""
"Som standard är dagens datum markerat i färg i :mod:`calendar`:s :ref:"
"`kommandorad <calendar-cli>` textutdata. Detta kan kontrolleras med :ref:"
"``miljövariabler <using-on-controlling-color>`. (Bidrag från Hugo van "
"Kemenade i :gh:`128317`.)"

msgid "concurrent.futures"
msgstr "concurrent.futures"

msgid ""
"Add :class:`~concurrent.futures.InterpreterPoolExecutor`, which exposes "
"\"subinterpreters\" (multiple Python interpreters in the same process) to "
"Python code.  This is separate from the proposed API in :pep:`734`. "
"(Contributed by Eric Snow in :gh:`124548`.)"
msgstr ""
"Lägg till :class:`~concurrent.futures.InterpreterPoolExecutor`, som "
"exponerar \"undertolkare\" (flera Python-tolkare i samma process) till "
"Python-kod.  Detta är separat från det föreslagna API:et i :pep:`734`. "
"(Bidrag från Eric Snow i :gh:`124548`.)"

msgid ""
"The default :class:`~concurrent.futures.ProcessPoolExecutor` :ref:`start "
"method <multiprocessing-start-methods>` changed from :ref:`fork "
"<multiprocessing-start-method-fork>` to :ref:`forkserver <multiprocessing-"
"start-method-forkserver>` on platforms other than macOS and Windows where it "
"was already :ref:`spawn <multiprocessing-start-method-spawn>`."
msgstr ""
"Standard :class:`~concurrent.futures.ProcessPoolExecutor` :ref:`startmetod "
"<multiprocessing-start-methods>` ändrades från :ref:`fork <multiprocessing-"
"start-method-fork>` till :ref:`forkserver <multiprocessing-start-method-"
"forkserver>` på andra plattformar än macOS och Windows där den redan var :"
"ref:`spawn <multiprocessing-start-method-spawn>`."

msgid ""
"If the threading incompatible *fork* method is required, you must explicitly "
"request it by supplying a multiprocessing context *mp_context* to :class:"
"`~concurrent.futures.ProcessPoolExecutor`."
msgstr ""
"Om den trådningsinkompatibla *fork*-metoden krävs måste du uttryckligen "
"begära den genom att tillhandahålla en multiprocessing-kontext *mp_context* "
"till :class:`~concurrent.futures.ProcessPoolExecutor`."

msgid ""
"See :ref:`forkserver restrictions <multiprocessing-programming-forkserver>` "
"for information and differences with the *fork* method and how this change "
"may affect existing code with mutable global shared variables and/or shared "
"objects that can not be automatically :mod:`pickled <pickle>`."
msgstr ""
"Se :ref:`forkserver restrictions <multiprocessing-programming-forkserver>` "
"för information och skillnader med metoden *fork* och hur denna ändring kan "
"påverka befintlig kod med föränderliga globala delade variabler och/eller "
"delade objekt som inte automatiskt kan :mod:`pickled <pickle>`."

msgid "(Contributed by Gregory P. Smith in :gh:`84559`.)"
msgstr "(Bidrag från Gregory P. Smith i :gh:`84559`.)"

msgid ""
"Add :meth:`concurrent.futures.ProcessPoolExecutor.terminate_workers` and :"
"meth:`concurrent.futures.ProcessPoolExecutor.kill_workers` as ways to "
"terminate or kill all living worker processes in the given pool. "
"(Contributed by Charles Machalow in :gh:`130849`.)"
msgstr ""
"Lägg till :meth:`concurrent.futures.ProcessPoolExecutor.terminate_workers` "
"och :meth:`concurrent.futures.ProcessPoolExecutor.kill_workers` som sätt att "
"avsluta eller döda alla levande arbetsprocesser i den givna poolen. (Bidrag "
"från Charles Machalow i :gh:`130849`.)"

msgid ""
"Add the optional ``buffersize`` parameter to :meth:`concurrent.futures."
"Executor.map` to limit the number of submitted tasks whose results have not "
"yet been yielded. If the buffer is full, iteration over the *iterables* "
"pauses until a result is yielded from the buffer. (Contributed by Enzo "
"Bonnal and Josh Rosenberg in :gh:`74028`.)"
msgstr ""
"Lägg till den valfria parametern ``buffersize`` i :meth:`concurrent.futures."
"Executor.map` för att begränsa antalet inlämnade uppgifter vars resultat "
"ännu inte har hämtats. Om bufferten är full pausas iterationen över "
"*iterables* tills ett resultat hämtas från bufferten. (Bidrag från Enzo "
"Bonnal och Josh Rosenberg i :gh:`74028`.)"

msgid "configparser"
msgstr "konfigurationsanalysator"

msgid ""
"Security fix: will no longer write config files it cannot read. Attempting "
"to :meth:`configparser.ConfigParser.write` keys containing delimiters or "
"beginning with the section header pattern will raise a :class:`configparser."
"InvalidWriteError`. (Contributed by Jacob Lincoln in :gh:`129270`.)"
msgstr ""
"Säkerhetsfix: kommer inte längre att skriva konfigurationsfiler som den inte "
"kan läsa. Försök att :meth:`configparser.ConfigParser.write` nycklar som "
"innehåller avgränsare eller börjar med section header-mönstret kommer att ge "
"upphov till :class:`configparser.InvalidWriteError`. (Bidrag från Jacob "
"Lincoln i :gh:`129270`.)"

msgid "contextvars"
msgstr "kontextvarianter"

msgid ""
"Support context manager protocol by :class:`contextvars.Token`. (Contributed "
"by Andrew Svetlov in :gh:`129889`.)"
msgstr ""
"Stödjer protokoll för kontexthanterare genom :class:`contextvars.Token`. "
"(Bidrag från Andrew Svetlov i :gh:`129889`.)"

msgid "ctypes"
msgstr "ctyper"

msgid ""
"The layout of :ref:`bit fields <ctypes-bit-fields-in-structures-unions>` in :"
"class:`~ctypes.Structure` and :class:`~ctypes.Union` now matches platform "
"defaults (GCC/Clang or MSVC) more closely. In particular, fields no longer "
"overlap. (Contributed by Matthias Görgens in :gh:`97702`.)"
msgstr ""
"Layouten för :ref:`bit-fält <ctypes-bit-fields-in-structures-unions>` i :"
"class:`~ctypes.Structure` och :class:`~ctypes.Union` stämmer nu bättre "
"överens med standardinställningarna för plattformar (GCC/Clang eller MSVC). "
"I synnerhet överlappar fält inte längre varandra. (Bidrag från Matthias "
"Görgens i :gh:`97702`.)"

msgid ""
"The :attr:`.Structure._layout_` class attribute can now be set to help match "
"a non-default ABI. (Contributed by Petr Viktorin in :gh:`97702`.)"
msgstr ""
"Klassattributet :attr:`.Structure._layout_` kan nu ställas in för att hjälpa "
"till att matcha ett ABI som inte är standard. (Bidrag från Petr Viktorin i :"
"gh:`97702`.)"

msgid ""
"The class of :class:`~ctypes.Structure`/:class:`~ctypes.Union` field "
"descriptors is now available as :class:`~ctypes.CField`, and has new "
"attributes to aid debugging and introspection. (Contributed by Petr Viktorin "
"in :gh:`128715`.)"
msgstr ""
"Klassen av fältbeskrivare för :class:`~ctypes.Structure`/:class:`~ctypes."
"Union` finns nu tillgänglig som :class:`~ctypes.CField`, och har nya "
"attribut för att underlätta felsökning och introspektion. (Bidrag från Petr "
"Viktorin i :gh:`128715`.)"

msgid ""
"On Windows, the :exc:`~ctypes.COMError` exception is now public. "
"(Contributed by Jun Komoda in :gh:`126686`.)"
msgstr ""
"I Windows är undantaget :exc:`~ctypes.COMError` nu offentligt. (Bidrag från "
"Jun Komoda i :gh:`126686`.)"

msgid ""
"On Windows, the :func:`~ctypes.CopyComPointer` function is now public. "
"(Contributed by Jun Komoda in :gh:`127275`.)"
msgstr ""
"I Windows är funktionen :func:`~ctypes.CopyComPointer` nu publik. (Bidrag "
"från Jun Komoda i :gh:`127275`.)"

msgid ""
":func:`ctypes.memoryview_at` now exists to create a :class:`memoryview` "
"object that refers to the supplied pointer and length. This works like :func:"
"`ctypes.string_at` except it avoids a buffer copy, and is typically useful "
"when implementing pure Python callback functions that are passed dynamically-"
"sized buffers. (Contributed by Rian Hunter in :gh:`112018`.)"
msgstr ""
":func:`ctypes.memoryview_at` finns nu för att skapa ett :class:`memoryview`-"
"objekt som refererar till den medföljande pekaren och längden. Detta "
"fungerar som :func:`ctypes.string_at` förutom att det undviker en "
"buffertkopiering, och är typiskt användbart när man implementerar rena "
"Python callback-funktioner som får dynamiskt stora buffertar. (Bidrag från "
"Rian Hunter i :gh:`112018`.)"

msgid ""
"Complex types, :class:`~ctypes.c_float_complex`, :class:`~ctypes."
"c_double_complex` and :class:`~ctypes.c_longdouble_complex`, are now "
"available if both the compiler and the ``libffi`` library support complex C "
"types. (Contributed by Sergey B Kirpichev in :gh:`61103`.)"
msgstr ""
"Komplexa typer, :class:`~ctypes.c_float_complex`, :class:`~ctypes."
"c_double_complex` och :class:`~ctypes.c_longdouble_complex`, är nu "
"tillgängliga om både kompilatorn och biblioteket ``libffi`` stöder komplexa "
"C-typer. (Bidrag från Sergey B Kirpichev i :gh:`61103`.)"

msgid ""
"Add :func:`ctypes.util.dllist` for listing the shared libraries loaded by "
"the current process. (Contributed by Brian Ward in :gh:`119349`.)"
msgstr ""
"Lägg till :func:`ctypes.util.dllist` för att lista de delade bibliotek som "
"laddats av den aktuella processen. (Bidrag från Brian Ward i :gh:`119349`.)"

msgid ""
"Move :func:`ctypes.POINTER` types cache from a global internal cache "
"(``_pointer_type_cache``) to the :attr:`ctypes._CData.__pointer_type__` "
"attribute of the corresponding :mod:`ctypes` types. This will stop the cache "
"from growing without limits in some situations. (Contributed by Sergey "
"Miryanov in :gh:`100926`.)"
msgstr ""
"Flytta :func:`ctypes.POINTER`-typernas cache från en global intern cache "
"(``_pointer_type_cache``) till :attr:`ctypes._CData.__pointer_type__`-"
"attributet för motsvarande :mod:`ctypes`-typer. Detta kommer att hindra "
"cacheminnet från att växa utan gränser i vissa situationer. (Bidrag från "
"Sergey Miryanov i :gh:`100926`.)"

msgid ""
"The :class:`ctypes.py_object` type now supports subscription, making it a :"
"term:`generic type`. (Contributed by Brian Schubert in :gh:`132168`.)"
msgstr ""
"Typen :class:`ctypes.py_object` har nu stöd för prenumeration, vilket gör "
"den till en :term:`generisk typ`. (Bidrag från Brian Schubert i :gh:"
"`132168`.)"

msgid ""
":mod:`ctypes` now supports :term:`free-threading builds <free threading>`. "
"(Contributed by Kumar Aditya and Peter Bierma in :gh:`127945`.)"
msgstr ""
":mod:`ctypes` stöder nu :term:``free-threading builds <free threading>`. "
"(Bidrag från Kumar Aditya och Peter Bierma i :gh:`127945`.)"

msgid "curses"
msgstr "förbannelser"

msgid ""
"Add the :func:`~curses.assume_default_colors` function, a refinement of the :"
"func:`~curses.use_default_colors` function which allows to change the color "
"pair ``0``. (Contributed by Serhiy Storchaka in :gh:`133139`.)"
msgstr ""
"Lägg till funktionen :func:`~curses.assume_default_colors`, en förfining av "
"funktionen :func:`~curses.use_default_colors` som gör det möjligt att ändra "
"färgparet ``0``. (Bidrag från Serhiy Storchaka i :gh:`133139`.)"

msgid "datetime"
msgstr "datatid"

msgid ""
"Add :meth:`datetime.time.strptime` and :meth:`datetime.date.strptime`. "
"(Contributed by Wannes Boeykens in :gh:`41431`.)"
msgstr ""
"Lägg till :meth:`datetime.time.strptime` och :meth:`datetime.date.strptime`. "
"(Bidrag från Wannes Boeykens i :gh:`41431`.)"

msgid "decimal"
msgstr "decimal"

msgid ""
"Add alternative :class:`~decimal.Decimal` constructor :meth:`Decimal."
"from_number() <decimal.Decimal.from_number>`. (Contributed by Serhiy "
"Storchaka in :gh:`121798`.)"
msgstr ""
"Lägg till alternativ :class:`~decimal.Decimal`-konstruktör :meth:`Decimal."
"from_number() <decimal.Decimal.from_number>`. (Bidrag från Serhiy Storchaka "
"i :gh:`121798`.)"

msgid ""
"Expose :func:`decimal.IEEEContext` to support creation of contexts "
"corresponding to the IEEE 754 (2008) decimal interchange formats. "
"(Contributed by Sergey B Kirpichev in :gh:`53032`.)"
msgstr ""
"Expose :func:`decimal.IEEEContext` to support creation of contexts "
"corresponding to the IEEE 754 (2008) decimal interchange formats. (Bidrag "
"från Sergey B Kirpichev i :gh:`53032`.)"

msgid "difflib"
msgstr "difflib"

msgid ""
"Comparison pages with highlighted changes generated by the :class:`difflib."
"HtmlDiff` class now support dark mode. (Contributed by Jiahao Li in :gh:"
"`129939`.)"
msgstr ""
"Jämförelsesidor med markerade ändringar som genereras av klassen :class:"
"`difflib.HtmlDiff` stöder nu mörkt läge. (Bidrag från Jiahao Li i :gh:"
"`129939`.)"

msgid "dis"
msgstr "dis"

msgid ""
"Add support for rendering full source location information of :class:"
"`instructions <dis.Instruction>`, rather than only the line number. This "
"feature is added to the following interfaces via the *show_positions* "
"keyword argument:"
msgstr ""
"Lägg till stöd för rendering av fullständig källplatsinformation för :class:"
"`instructions <dis.Instruction>`, i stället för bara radnumret. Denna "
"funktion läggs till i följande gränssnitt via nyckelordsargumentet "
"*show_positions*:"

msgid ":class:`dis.Bytecode`"
msgstr ":class:`dis.Bytecode`"

msgid ":func:`dis.dis`"
msgstr ":func:`dis.dis`"

msgid ":func:`dis.distb`"
msgstr ":func:`dis.distb`"

msgid ":func:`dis.disassemble`"
msgstr ":func:`dis.disassemble`"

msgid ""
"This feature is also exposed via :option:`dis --show-positions`. "
"(Contributed by Bénédikt Tran in :gh:`123165`.)"
msgstr ""
"Denna funktion visas också via :option:`dis --show-positions`. (Bidrag från "
"Bénédikt Tran i :gh:`123165`.)"

msgid ""
"Add the :option:`dis --specialized` command-line option to show specialized "
"bytecode. (Contributed by Bénédikt Tran in :gh:`127413`.)"
msgstr ""
"Lägg till kommandoradsalternativet :option:`dis --specialized` för att visa "
"specialiserad bytekod. (Bidrag från Bénédikt Tran i :gh:`127413`.)"

msgid "errno"
msgstr "errno"

msgid ""
"Add :data:`errno.EHWPOISON` error code. (Contributed by James Roy in :gh:"
"`126585`.)"
msgstr ""
"Lägg till :data:`errno.EHWPOISON` felkod. (Bidrag från James Roy i :gh:"
"`126585`.)"

msgid "faulthandler"
msgstr "felhanterare"

msgid ""
"Add support for printing the C stack trace on systems that :ref:`support it "
"<c-stack-compatibility>` via :func:`faulthandler.dump_c_stack` or via the "
"*c_stack* argument in :func:`faulthandler.enable`. (Contributed by Peter "
"Bierma in :gh:`127604`.)"
msgstr ""
"Lägg till stöd för att skriva ut C-stackspårningen på system som :ref:"
"`stödjer det <c-stack-compatibility>` via :func:`faulthandler.dump_c_stack` "
"eller via argumentet *c_stack* i :func:`faulthandler.enable`. (Bidrag från "
"Peter Bierma i :gh:`127604`.)"

msgid "fnmatch"
msgstr "fnmatch"

msgid ""
"Added :func:`fnmatch.filterfalse` for excluding names matching a pattern. "
"(Contributed by Bénédikt Tran in :gh:`74598`.)"
msgstr ""
"Lagt till :func:`fnmatch.filterfalse` för att utesluta namn som matchar ett "
"mönster. (Bidrag från Bénédikt Tran i :gh:`74598`.)"

msgid "fractions"
msgstr "fraktioner"

msgid ""
"Add support for converting any objects that have the :meth:`!"
"as_integer_ratio` method to a :class:`~fractions.Fraction`. (Contributed by "
"Serhiy Storchaka in :gh:`82017`.)"
msgstr ""
"Lägg till stöd för att konvertera alla objekt som har metoden :meth:`!"
"as_integer_ratio` till en :class:`~fractions.Fraction`. (Bidrag från Serhiy "
"Storchaka i :gh:`82017`.)"

msgid ""
"Add alternative :class:`~fractions.Fraction` constructor :meth:`Fraction."
"from_number() <fractions.Fraction.from_number>`. (Contributed by Serhiy "
"Storchaka in :gh:`121797`.)"
msgstr ""
"Lägg till alternativ :class:`~fractions.Fraction`-konstruktor :meth:"
"`Fraction.from_number() <fractions.Fraction.from_number>`. (Bidrag från "
"Serhiy Storchaka i :gh:`121797`.)"

msgid "functools"
msgstr "functools"

msgid ""
"Add support to :func:`functools.partial` and :func:`functools.partialmethod` "
"for :data:`functools.Placeholder` sentinels to reserve a place for "
"positional arguments. (Contributed by Dominykas Grigonis in :gh:`119127`.)"
msgstr ""
"Lägg till stöd för :func:`functools.partial` och :func:`functools."
"partialmethod` för :data:`functools.Placeholder` sentinels för att reservera "
"en plats för positionella argument. (Bidrag från Dominykas Grigonis i :gh:"
"`119127`.)"

msgid ""
"Allow the *initial* parameter of :func:`functools.reduce` to be passed as a "
"keyword argument. (Contributed by Sayandip Dutta in :gh:`125916`.)"
msgstr ""
"Tillåt att *initial*-parametern i :func:`functools.reduce` skickas som ett "
"nyckelordsargument. (Bidrag från Sayandip Dutta i :gh:`125916`.)"

msgid "gc"
msgstr "gc"

msgid ""
"The cyclic garbage collector is now incremental, which changes the meaning "
"of the results of :meth:`~gc.get_threshold` and :meth:`~gc.set_threshold` as "
"well as :meth:`~gc.get_count` and :meth:`~gc.get_stats`."
msgstr ""
"Den cykliska skräpsamlaren är nu inkrementell, vilket ändrar betydelsen av "
"resultaten av :meth:`~gc.get_threshold` och :meth:`~gc.set_threshold` samt :"
"meth:`~gc.get_count` och :meth:`~gc.get_stats`."

msgid ""
"For backwards compatibility, :meth:`~gc.get_threshold` continues to return a "
"three-item tuple. The first value is the threshold for young collections, as "
"before; the second value determines the rate at which the old collection is "
"scanned (the default is 10, and higher values mean that the old collection "
"is scanned more slowly). The third value is meaningless and is always zero."
msgstr ""
"För bakåtkompatibilitet fortsätter :meth:`~gc.get_threshold` att returnera "
"en tupel med tre värden. Det första värdet är tröskelvärdet för unga "
"samlingar, som tidigare; det andra värdet bestämmer hur snabbt den gamla "
"samlingen skannas (standardvärdet är 10, och högre värden innebär att den "
"gamla samlingen skannas långsammare). Det tredje värdet är meningslöst och "
"är alltid noll."

msgid ":meth:`~gc.set_threshold` ignores any items after the second."
msgstr ":meth:`~gc.set_threshold` ignorerar alla poster efter den andra."

msgid ""
":meth:`~gc.get_count` and :meth:`~gc.get_stats` continue to return the same "
"format of results. The only difference is that instead of the results "
"referring to the young, aging and old generations, the results refer to the "
"young generation and the aging and collecting spaces of the old generation."
msgstr ""
":meth:`~gc.get_count` och :meth:`~gc.get_stats` fortsätter att returnera "
"samma resultatformat. Den enda skillnaden är att i stället för att "
"resultaten hänvisar till de unga, åldrande och gamla generationerna, "
"hänvisar resultaten till den unga generationen och den åldrande och samlande "
"utrymmena i den gamla generationen."

msgid ""
"In summary, code that attempted to manipulate the behavior of the cycle GC "
"may not work exactly as intended, but it is very unlikely to be harmful. All "
"other code will work just fine."
msgstr ""
"Sammanfattningsvis kan sägas att kod som försöker manipulera beteendet hos "
"cycle GC kanske inte fungerar exakt som avsett, men det är mycket osannolikt "
"att den är skadlig. All annan kod kommer att fungera alldeles utmärkt."

msgid "getopt"
msgstr "getopt"

msgid ""
"Add support for options with optional arguments. (Contributed by Serhiy "
"Storchaka in :gh:`126374`.)"
msgstr ""
"Lägg till stöd för alternativ med valfria argument. (Bidrag från Serhiy "
"Storchaka i :gh:`126374`.)"

msgid ""
"Add support for returning intermixed options and non-option arguments in "
"order. (Contributed by Serhiy Storchaka in :gh:`126390`.)"
msgstr ""
"Lägg till stöd för att returnera blandade alternativ och icke-"
"optionsargument i ordning. (Bidrag från Serhiy Storchaka i :gh:`126390`.)"

msgid "getpass"
msgstr "passera"

msgid ""
"Support keyboard feedback by :func:`getpass.getpass` via the keyword-only "
"optional argument ``echo_char``. Placeholder characters are rendered "
"whenever a character is entered, and removed when a character is deleted. "
"(Contributed by Semyon Moroz in :gh:`77065`.)"
msgstr ""
"Stöd för återkoppling från tangentbordet med :func:`getpass.getpass` via det "
"valfria argumentet ``echo_char`` som endast är tillgängligt för nyckelord. "
"Platshållartecken visas när ett tecken skrivs in och tas bort när ett tecken "
"raderas. (Bidrag från Semyon Moroz i :gh:`77065`.)"

msgid "graphlib"
msgstr "graflib"

msgid ""
"Allow :meth:`graphlib.TopologicalSorter.prepare` to be called more than once "
"as long as sorting has not started. (Contributed by Daniel Pope in :gh:"
"`130914`.)"
msgstr ""
"Tillåt :meth:`graphlib.TopologicalSorter.prepare` att anropas mer än en gång "
"så länge sorteringen inte har startat. (Bidrag från Daniel Pope i :gh:"
"`130914`.)"

msgid "heapq"
msgstr "heapq"

msgid "Add functions for working with max-heaps:"
msgstr "Lägg till funktioner för att arbeta med max-heaps:"

msgid ":func:`heapq.heapify_max`,"
msgstr ":func:`heapq.heapify_max`,"

msgid ":func:`heapq.heappush_max`,"
msgstr ":func:`heapq.heappush_max`,"

msgid ":func:`heapq.heappop_max`,"
msgstr ":func:`heapq.heappop_max`,"

msgid ":func:`heapq.heapreplace_max`"
msgstr ":func:`heapq.heapreplace_max"

msgid ":func:`heapq.heappushpop_max`"
msgstr ":func:`heapq.heappushpop_max`"

msgid "hmac"
msgstr "hmac"

msgid ""
"Add a built-in implementation for HMAC (:rfc:`2104`) using formally verified "
"code from the `HACL* <https://github.com/hacl-star/hacl-star/>`__ project. "
"(Contributed by Bénédikt Tran in :gh:`99108`.)"
msgstr ""
"Lägg till en inbyggd implementering för HMAC (:rfc:`2104`) med hjälp av "
"formellt verifierad kod från projektet `HACL* <https://github.com/hacl-star/"
"hacl-star/>`__. (Bidrag från Bénédikt Tran i :gh:`99108`.)"

msgid "http"
msgstr "http"

msgid ""
"Directory lists and error pages generated by the :mod:`http.server` module "
"allow the browser to apply its default dark mode. (Contributed by Yorik "
"Hansen in :gh:`123430`.)"
msgstr ""
"Kataloglistor och felsidor som genereras av modulen :mod:`http.server` "
"tillåter webbläsaren att använda sitt standard mörka läge. (Bidrag från "
"Yorik Hansen i :gh:`123430`.)"

msgid ""
"The :mod:`http.server` module now supports serving over HTTPS using the :"
"class:`http.server.HTTPSServer` class. This functionality is exposed by the "
"command-line interface (``python -m http.server``) through the following "
"options:"
msgstr ""
"Modulen :mod:`http.server` stöder nu servering över HTTPS med hjälp av "
"klassen :class:`http.server.HTTPSServer`. Denna funktionalitet exponeras av "
"kommandoradsgränssnittet (``python -m http.server``) genom följande "
"alternativ:"

msgid "``--tls-cert <path>``: Path to the TLS certificate file."
msgstr "``--tls-cert <path>``: Sökväg till TLS-certifikatfilen."

msgid "``--tls-key <path>``: Optional path to the private key file."
msgstr ""
"``--tls-key <path>``: Valfri sökväg till filen med den privata nyckeln."

msgid ""
"``--tls-password-file <path>``: Optional path to the password file for the "
"private key."
msgstr ""
"``--tls-password-file <path>``: Valfri sökväg till lösenordsfilen för den "
"privata nyckeln."

msgid "(Contributed by Semyon Moroz in :gh:`85162`.)"
msgstr "(Bidrag från Semyon Moroz i :gh:`85162`.)"

msgid "imaplib"
msgstr "imaplib"

msgid ""
"Add :meth:`IMAP4.idle() <imaplib.IMAP4.idle>`, implementing the IMAP4 "
"``IDLE`` command as defined in :rfc:`2177`. (Contributed by Forest in :gh:"
"`55454`.)"
msgstr ""
"Lägg till :meth:`IMAP4.idle() <imaplib.IMAP4.idle>`, som implementerar IMAP4-"
"kommandot ``IDLE`` enligt definitionen i :rfc:`2177`. (Bidrag från Forest i :"
"gh:`55454`.)"

msgid "inspect"
msgstr "inspektera"

msgid ""
":func:`inspect.signature` takes a new argument *annotation_format* to "
"control the :class:`annotationlib.Format` used for representing annotations. "
"(Contributed by Jelle Zijlstra in :gh:`101552`.)"
msgstr ""
":func:`inspect.signature` tar ett nytt argument *annotation_format* för att "
"styra :class:`annotationlib.Format` som används för att representera "
"annoteringar. (Bidrag från Jelle Zijlstra i :gh:`101552`.)"

msgid ""
":meth:`inspect.Signature.format` takes a new argument *unquote_annotations*. "
"If true, string :term:`annotations <annotation>` are displayed without "
"surrounding quotes. (Contributed by Jelle Zijlstra in :gh:`101552`.)"
msgstr ""
":meth:`inspect.Signature.format` tar ett nytt argument "
"*unquote_annotations*. Om true visas strängen :term:`annotations "
"<annotation>` utan omgivande citattecken. (Bidrag från Jelle Zijlstra i :gh:"
"`101552`.)"

msgid ""
"Add function :func:`inspect.ispackage` to determine whether an object is a :"
"term:`package` or not. (Contributed by Zhikang Yan in :gh:`125634`.)"
msgstr ""
"Lägg till funktionen :func:`inspect.ispackage` för att avgöra om ett objekt "
"är en :term:`package` eller inte. (Bidrag från Zhikang Yan i :gh:`125634`.)"

msgid "io"
msgstr "io"

msgid ""
"Reading text from a non-blocking stream with ``read`` may now raise a :exc:"
"`BlockingIOError` if the operation cannot immediately return bytes. "
"(Contributed by Giovanni Siragusa in :gh:`109523`.)"
msgstr ""
"Att läsa text från en icke-blockerande ström med ``read`` kan nu ge upphov "
"till ett :exc:`BlockingIOError` om operationen inte omedelbart kan returnera "
"bytes. (Bidrag från Giovanni Siragusa i :gh:`109523`.)"

msgid ""
"Add protocols :class:`io.Reader` and :class:`io.Writer` as a simpler "
"alternatives to the pseudo-protocols :class:`typing.IO`, :class:`typing."
"TextIO`, and :class:`typing.BinaryIO`. (Contributed by Sebastian Rittau in :"
"gh:`127648`.)"
msgstr ""
"Lägg till protokollen :class:`io.Reader` och :class:`io.Writer` som enklare "
"alternativ till pseudo-protokollen :class:`typing.IO`, :class:`typing."
"TextIO` och :class:`typing.BinaryIO`. (Bidrag från Sebastian Rittau i :gh:"
"`127648`.)"

msgid "json"
msgstr "json"

msgid ""
"Add notes for JSON serialization errors that allow to identify the source of "
"the error. (Contributed by Serhiy Storchaka in :gh:`122163`.)"
msgstr ""
"Lägg till anteckningar för JSON-serialiseringsfel som gör det möjligt att "
"identifiera källan till felet. (Bidrag från Serhiy Storchaka i :gh:`122163`.)"

msgid ""
"Enable the :mod:`json` module to work as a script using the :option:`-m` "
"switch: :program:`python -m json`. See the :ref:`JSON command-line interface "
"<json-commandline>` documentation. (Contributed by Trey Hunner in :gh:"
"`122873`.)"
msgstr ""
"Aktivera modulen :mod:`json` så att den fungerar som ett skript med hjälp "
"av :option:`-m`: :program:`python -m json`. Se dokumentationen :ref:`JSON "
"command-line interface <json-commandline>`. (Bidrag från Trey Hunner i :gh:"
"`122873`.)"

msgid ""
"By default, the output of the :ref:`JSON command-line interface <json-"
"commandline>` is highlighted in color. This can be controlled by :ref:"
"`environment variables <using-on-controlling-color>`. (Contributed by Tomas "
"Roun in :gh:`131952`.)"
msgstr ""
"Som standard är utdata från kommandoradsgränssnittet :ref:`JSON <json-"
"commandline>` markerade i färg. Detta kan kontrolleras med :ref:"
"``miljövariabler <using-on-controlling-color>`. (Bidrag från Tomas Roun i :"
"gh:`131952`.)"

msgid "linecache"
msgstr "linecache"

msgid ""
":func:`linecache.getline` can retrieve source code for frozen modules. "
"(Contributed by Tian Gao in :gh:`131638`.)"
msgstr ""
":func:`linecache.getline` kan hämta källkod för frysta moduler. (Bidrag från "
"Tian Gao i :gh:`131638`.)"

msgid "logging.handlers"
msgstr "loggning.hanterare"

msgid ""
":class:`logging.handlers.QueueListener` now implements the context manager "
"protocol, allowing it to be used in a :keyword:`with` statement. "
"(Contributed by Charles Machalow in :gh:`132106`.)"
msgstr ""
":class:`logging.handlers.QueueListener` implementerar nu "
"kontexthanterarprotokollet, vilket gör att den kan användas i en :keyword:"
"`with`-sats. (Bidrag från Charles Machalow i :gh:`132106`.)"

msgid ""
":meth:`QueueListener.start <logging.handlers.QueueListener.start>` now "
"raises a :exc:`RuntimeError` if the listener is already started. "
"(Contributed by Charles Machalow in :gh:`132106`.)"
msgstr ""
":meth:`QueueListener.start <logging.handlers.QueueListener.start>` ger nu "
"upphov till ett :exc:`RuntimeError` om lyssnaren redan är startad. (Bidrag "
"från Charles Machalow i :gh:`132106`.)"

msgid "math"
msgstr "matematik"

msgid ""
"Added more detailed error messages for domain errors in the module. "
"(Contributed by Charlie Zhao and Sergey B Kirpichev in :gh:`101410`.)"
msgstr ""
"Mer detaljerade felmeddelanden för domänfel har lagts till i modulen. "
"(Bidrag från Charlie Zhao och Sergey B Kirpichev i :gh:`101410`.)"

msgid "mimetypes"
msgstr "mimetyper"

msgid ""
"Document the command-line for :mod:`mimetypes`. It now exits with ``1`` on "
"failure instead of ``0`` and ``2`` on incorrect command-line parameters "
"instead of ``1``. Also, errors are printed to stderr instead of stdout and "
"their text is made tighter. (Contributed by Oleg Iarygin and Hugo van "
"Kemenade in :gh:`93096`.)"
msgstr ""
"Dokumentera kommandoraden för :mod:`mimetypes`. Den avslutas nu med ``1`` "
"vid misslyckande istället för ``0`` och ``2`` vid felaktiga "
"kommandoradsparametrar istället för ``1``. Dessutom skrivs fel ut till "
"stderr istället för stdout och deras text har stramats upp. (Bidrag från "
"Oleg Iarygin och Hugo van Kemenade i :gh:`93096`.)"

msgid "Add MS and :rfc:`8081` MIME types for fonts:"
msgstr "Lägg till MS- och :rfc:`8081` MIME-typer för teckensnitt:"

msgid "Embedded OpenType: ``application/vnd.ms-fontobject``"
msgstr "Inbäddad OpenType: ``applikation/vnd.ms-fontobject``"

msgid "OpenType Layout (OTF) ``font/otf``"
msgstr "OpenType Layout (OTF) ``font/otf``"

msgid "TrueType: ``font/ttf``"
msgstr "TrueType: ``font/ttf``"

msgid "WOFF 1.0 ``font/woff``"
msgstr "WOFF 1.0 ``font/woff```"

msgid "WOFF 2.0 ``font/woff2``"
msgstr "WOFF 2.0 ``font/woff2``"

msgid "(Contributed by Sahil Prajapati and Hugo van Kemenade in :gh:`84852`.)"
msgstr "(Bidrag från Sahil Prajapati och Hugo van Kemenade i :gh:`84852`.)"

msgid ""
"Add :rfc:`9559` MIME types for Matroska audiovisual data container "
"structures, containing:"
msgstr ""
"Lägg till :rfc:`9559` MIME-typer för Matroska audiovisuella "
"databehållarstrukturer, innehållande:"

msgid "audio with no video: ``audio/matroska`` (``.mka``)"
msgstr "ljud utan video: ``audio/matroska`` (``.mka``)"

msgid "video: ``video/matroska`` (``.mkv``)"
msgstr "video: ``video/matroska`` (``.mkv``)"

msgid "stereoscopic video: ``video/matroska-3d`` (``.mk3d``)"
msgstr "stereoskopisk video: ``video/matroska-3d`` (``.mk3d``)"

msgid "(Contributed by Hugo van Kemenade in :gh:`89416`.)"
msgstr "(Bidrag från Hugo van Kemenade i :gh:`89416`.)"

msgid "Add MIME types for images with RFCs:"
msgstr "Lägg till MIME-typer för bilder med RFC:er:"

msgid ":rfc:`1494`: CCITT Group 3 (``.g3``)"
msgstr ":rfc:`1494`: CCITT Grupp 3 (``.g3``)"

msgid ":rfc:`3362`: Real-time Facsimile, T.38 (``.t38``)"
msgstr ":rfc:`3362`: Faksimile i realtid, T.38 (``.t38``)"

msgid ""
":rfc:`3745`: JPEG 2000 (``.jp2``), extension (``.jpx``) and compound (``."
"jpm``)"
msgstr ""
":rfc:`3745`: JPEG 2000 (``.jp2``), förlängning (``.jpx``) och sammansatt (``."
"jpm``)"

msgid ":rfc:`3950`: Tag Image File Format Fax eXtended, TIFF-FX (``.tfx``)"
msgstr ":rfc:`3950`: Tag Image File Format Fax eXtended, TIFF-FX (``.tfx``)"

msgid ":rfc:`4047`: Flexible Image Transport System (``.fits``)"
msgstr ":rfc:`4047`: Flexibelt bildtransportsystem (``.fits``)"

msgid ""
":rfc:`7903`: Enhanced Metafile (``.emf``) and Windows Metafile (``.wmf``)"
msgstr ""
":rfc:`7903`: Enhanced Metafile (``.emf``) och Windows Metafile (``.wmf``)"

msgid "(Contributed by Hugo van Kemenade in :gh:`85957`.)"
msgstr "(Bidrag från Hugo van Kemenade i :gh:`85957`.)"

msgid "More MIME type changes:"
msgstr "Fler ändringar av MIME-typer:"

msgid ""
":rfc:`2361`: Change type for ``.avi`` to ``video/vnd.avi`` and for ``.wav`` "
"to ``audio/vnd.wave``"
msgstr ""
":rfc:`2361`: Ändra typ för ``.avi`` till ``video/vnd.avi`` och för ``.wav`` "
"till ``audio/vnd.wave``"

msgid ":rfc:`4337`: Add MPEG-4 ``audio/mp4`` (``.m4a``)"
msgstr ":rfc:`4337`: Lägg till MPEG-4 ``audio/mp4`` (``.m4a``)"

msgid ":rfc:`5334`: Add Ogg media (``.oga``, ``.ogg`` and ``.ogx``)"
msgstr ":rfc:`5334`: Lägg till Ogg-media (``.oga``, ``.ogg`` och ``.ogx``)"

msgid ":rfc:`6713`: Add gzip ``application/gzip`` (``.gz``)"
msgstr ":rfc:`6713`: Lägg till gzip ``application/gzip`` (``.gz``)"

msgid ":rfc:`9639`: Add FLAC ``audio/flac`` (``.flac``)"
msgstr ":rfc:`9639`: Lägg till FLAC ``audio/flac`` (``.flac``)"

msgid "Add 7z ``application/x-7z-compressed`` (``.7z``)"
msgstr "Lägg till 7z ``application/x-7z-compressed`` (``.7z``)"

msgid ""
"Add Android Package ``application/vnd.android.package-archive`` (``.apk``) "
"when not strict"
msgstr ""
"Lägg till Android-paketet ``application/vnd.android.package-archive`` (``."
"apk``) när det inte är strikt"

msgid "Add deb ``application/x-debian-package`` (``.deb``)"
msgstr "Lägg till deb ``application/x-debian-package`` (``.deb``)"

msgid "Add glTF binary ``model/gltf-binary`` (``.glb``)"
msgstr "Lägg till glTF-binär ``model/gltf-binary`` (``.glb``)"

msgid "Add glTF JSON/ASCII ``model/gltf+json`` (``.gltf``)"
msgstr "Lägg till glTF JSON/ASCII ``model/gltf+json`` (``.gltf``)"

msgid "Add M4V ``video/x-m4v`` (``.m4v``)"
msgstr "Lägg till M4V ``video/x-m4v`` (``.m4v``)"

msgid "Add PHP ``application/x-httpd-php`` (``.php``)"
msgstr "Lägg till PHP ``application/x-httpd-php`` (``.php``)"

msgid "Add RAR ``application/vnd.rar`` (``.rar``)"
msgstr "Lägg till RAR ``application/vnd.rar`` (``.rar``)"

msgid "Add RPM ``application/x-rpm`` (``.rpm``)"
msgstr "Lägg till RPM ``application/x-rpm`` (``.rpm``)"

msgid "Add STL ``model/stl`` (``.stl``)"
msgstr "Lägg till STL ``modell/stl`` (``.stl``)"

msgid "Add Windows Media Video ``video/x-ms-wmv`` (``.wmv``)"
msgstr "Lägg till Windows Media Video ``video/x-ms-wmv`` (``.wmv``)"

msgid "De facto: Add WebM ``audio/webm`` (``.weba``)"
msgstr "De facto: Lägg till WebM ``audio/webm`` (``.weba``)"

msgid ""
"`ECMA-376 <https://ecma-international.org/publications-and-standards/"
"standards/ecma-376/>`__: Add ``.docx``, ``.pptx`` and ``.xlsx`` types"
msgstr ""
"`ECMA-376 <https://ecma-international.org/publications-and-standards/"
"standards/ecma-376/>`__: Lägg till typerna ``.docx``, ``.pptx`` och ``.xlsx``"

msgid ""
"`OASIS <https://docs.oasis-open.org/office/v1.2/cs01/OpenDocument-v1.2-cs01-"
"part1.html#Appendix_C>`__: Add OpenDocument ``.odg``, ``.odp``, ``.ods`` and "
"``.odt`` types"
msgstr ""
"`OASIS <https://docs.oasis-open.org/office/v1.2/cs01/OpenDocument-v1.2-cs01-"
"part1.html#Appendix_C>`__: Lägg till OpenDocument-typerna ``.odg``, ``."
"odp``, ``.ods`` och ``.odt``"

msgid ""
"`W3C <https://www.w3.org/TR/epub-33/#app-media-type>`__: Add EPUB "
"``application/epub+zip`` (``.epub``)"
msgstr ""
"`W3C <https://www.w3.org/TR/epub-33/#app-media-type>`__: Lägg till EPUB "
"``application/epub+zip`` (``.epub``)"

msgid "(Contributed by Hugo van Kemenade in :gh:`129965`.)"
msgstr "(Bidrag från Hugo van Kemenade i :gh:`129965`.)"

msgid ""
"Add :rfc:`9512` ``application/yaml`` MIME type for YAML files (``.yaml`` and "
"``.yml``). (Contributed by Sasha \"Nelie\" Chernykh and Hugo van Kemenade "
"in :gh:`132056`.)"
msgstr ""
"Lägg till :rfc:`9512` ``application/yaml`` MIME-typ för YAML-filer (``."
"yaml`` och ``.yml``). (Bidrag från Sasha \"Nelie\" Chernykh och Hugo van "
"Kemenade i :gh:`132056`.)"

msgid "multiprocessing"
msgstr "multiprocessing"

msgid ""
"The default :ref:`start method <multiprocessing-start-methods>` changed "
"from :ref:`fork <multiprocessing-start-method-fork>` to :ref:`forkserver "
"<multiprocessing-start-method-forkserver>` on platforms other than macOS and "
"Windows where it was already :ref:`spawn <multiprocessing-start-method-"
"spawn>`."
msgstr ""
"Standard :ref:`startmetod <multiprocessing-start-methods>` ändrades från :"
"ref:`fork <multiprocessing-start-method-fork>` till :ref:`forkserver "
"<multiprocessing-start-method-forkserver>` på andra plattformar än macOS och "
"Windows där den redan var :ref:`spawn <multiprocessing-start-method-spawn>`."

msgid ""
"If the threading incompatible *fork* method is required, you must explicitly "
"request it via a context from :func:`multiprocessing.get_context` "
"(preferred) or change the default via :func:`multiprocessing."
"set_start_method`."
msgstr ""
"Om den trådningsinkompatibla *fork*-metoden krävs måste du uttryckligen "
"begära den via en kontext från :func:`multiprocessing.get_context` "
"(föredras) eller ändra standardvärdet via :func:`multiprocessing."
"set_start_method`."

msgid ""
":mod:`multiprocessing`'s ``\"forkserver\"`` start method now authenticates "
"its control socket to avoid solely relying on filesystem permissions to "
"restrict what other processes could cause the forkserver to spawn workers "
"and run code. (Contributed by Gregory P. Smith for :gh:`97514`.)"
msgstr ""
":mod:`multiprocessing`'s startmetod ``\"forkserver\"`` autentiserar nu sin "
"kontrollsocket för att undvika att enbart förlita sig på "
"filsystembehörigheter för att begränsa vilka andra processer som kan få "
"forkservern att skapa arbetare och köra kod. (Bidrag från Gregory P. Smith "
"för :gh:`97514`.)"

msgid ""
"The :ref:`multiprocessing proxy objects <multiprocessing-proxy_objects>` for "
"*list* and *dict* types gain previously overlooked missing methods:"
msgstr ""
":ref:`multiprocessing proxy objects <multiprocessing-proxy_objects>` för "
"typerna *list* och *dict* får tidigare förbisedda saknade metoder:"

msgid ":meth:`!clear` and :meth:`!copy` for proxies of :class:`list`"
msgstr ":meth:`!clear` och :meth:`!copy` för proxies av :class:`list`"

msgid ""
":meth:`~dict.fromkeys`, ``reversed(d)``, ``d | {}``, ``{} | d``, ``d |= "
"{'b': 2}`` for proxies of :class:`dict`"
msgstr ""
":meth:`~dict.fromkeys`, ``reversed(d)``, ``d | {}``, ``{} | d``, ``d |= "
"{'b': 2}`` för proxies av :class:`dict`"

msgid "(Contributed by Roy Hyunjin Han for :gh:`103134`.)"
msgstr "(Bidrag från Roy Hyunjin Han för :gh:`103134`.)"

msgid ""
"Add support for shared :class:`set` objects via :meth:`SyncManager.set() "
"<multiprocessing.managers.SyncManager.set>`. The :func:`set` in :func:"
"`multiprocessing.Manager` method is now available. (Contributed by Mingyu "
"Park in :gh:`129949`.)"
msgstr ""
"Lägg till stöd för delade :class:`set`-objekt via :meth:`SyncManager.set() "
"<multiprocessing.managers.SyncManager.set>`. Metoden :func:`set` i :func:"
"`multiprocessing.Manager` är nu tillgänglig. (Bidrag från Mingyu Park i :gh:"
"`129949`.)"

msgid ""
"Add :func:`multiprocessing.Process.interrupt` which terminates the child "
"process by sending :py:const:`~signal.SIGINT`. This enables :keyword:"
"`finally` clauses to print a stack trace for the terminated process. "
"(Contributed by Artem Pulkin in :gh:`131913`.)"
msgstr ""
"Lägg till :func:`multiprocessing.Process.interrupt` som avslutar "
"barnprocessen genom att skicka :py:const:`~signal.SIGINT`. Detta gör att :"
"keyword:`finally`-klausuler kan skriva ut en stack trace för den avslutade "
"processen. (Bidrag från Artem Pulkin i :gh:`131913`.)"

msgid "operator"
msgstr "operator"

msgid ""
"Two new functions :func:`operator.is_none` and :func:`operator.is_not_none` "
"have been added, such that ``operator.is_none(obj)`` is equivalent to ``obj "
"is None`` and ``operator.is_not_none(obj)`` is equivalent to ``obj is not "
"None``. (Contributed by Raymond Hettinger and Nico Mexis in :gh:`115808`.)"
msgstr ""
"Två nya funktioner :func:`operator.is_none` och :func:`operator.is_not_none` "
"har lagts till, så att ``operator.is_none(obj)`` är ekvivalent med ``obj är "
"None`` och ``operator.is_not_none(obj)`` är ekvivalent med ``obj är inte "
"None``. (Bidrag från Raymond Hettinger och Nico Mexis i :gh:`115808`.)"

msgid "os"
msgstr "os"

msgid ""
"Add the :func:`os.reload_environ` function to update :data:`os.environ` and :"
"data:`os.environb` with changes to the environment made by :func:`os."
"putenv`, by :func:`os.unsetenv`, or made outside Python in the same process. "
"(Contributed by Victor Stinner in :gh:`120057`.)"
msgstr ""
"Lägg till funktionen :func:`os.reload_environ` för att uppdatera :data:`os."
"environ` och :data:`os.environb` med ändringar i miljön som gjorts av :func:"
"`os.putenv`, av :func:`os.unsetenv`, eller som gjorts utanför Python i samma "
"process. (Bidrag från Victor Stinner i :gh:`120057`.)"

msgid ""
"Add the :data:`~os.SCHED_DEADLINE` and :data:`~os.SCHED_NORMAL` constants to "
"the :mod:`os` module. (Contributed by James Roy in :gh:`127688`.)"
msgstr ""
"Lägg till konstanterna :data:`~os.SCHED_DEADLINE` och :data:`~os."
"SCHED_NORMAL` i modulen :mod:`os`. (Bidrag från James Roy i :gh:`127688`.)"

msgid ""
"Add the :func:`os.readinto` function to read into a :ref:`buffer object "
"<bufferobjects>` from a file descriptor. (Contributed by Cody Maloney in :gh:"
"`129205`.)"
msgstr ""
"Lägg till funktionen :func:`os.readinto` för att läsa in ett :ref:`buffer "
"object <bufferobjects>` från en filbeskrivare. (Bidrag från Cody Maloney i :"
"gh:`129205`.)"

msgid "os.path"
msgstr "os.sökväg"

msgid ""
"The *strict* parameter to :func:`os.path.realpath` accepts a new value, :"
"data:`os.path.ALLOW_MISSING`. If used, errors other than :exc:"
"`FileNotFoundError` will be re-raised; the resulting path can be missing but "
"it will be free of symlinks. (Contributed by Petr Viktorin for :cve:"
"`2025-4517`.)"
msgstr ""
"Parametern *strict* till :func:`os.path.realpath` accepterar ett nytt "
"värde, :data:`os.path.ALLOW_MISSING`. Om det används kommer andra fel än :"
"exc:`FileNotFoundError` att återaktiveras; den resulterande sökvägen kan "
"saknas men den kommer att vara fri från symlinks. (Bidrag från Petr Viktorin "
"för :cve:`2025-4517`.)"

msgid "pathlib"
msgstr "sökväg"

msgid ""
"Add methods to :class:`pathlib.Path` to recursively copy or move files and "
"directories:"
msgstr ""
"Lägg till metoder i :class:`pathlib.Path` för att rekursivt kopiera eller "
"flytta filer och kataloger:"

msgid ""
":meth:`~pathlib.Path.copy` copies a file or directory tree to a destination."
msgstr ""
":meth:`~pathlib.Path.copy` kopierar ett fil- eller katalogträd till en "
"destination."

msgid ":meth:`~pathlib.Path.copy_into` copies *into* a destination directory."
msgstr ":meth:`~pathlib.Path.copy_into` kopierar *in* en destinationskatalog."

msgid ""
":meth:`~pathlib.Path.move` moves a file or directory tree to a destination."
msgstr ""
":meth:`~pathlib.Path.move` flyttar ett fil- eller katalogträd till en "
"destination."

msgid ":meth:`~pathlib.Path.move_into` moves *into* a destination directory."
msgstr ":meth:`~pathlib.Path.move_into` flyttar *in* i en destinationskatalog."

msgid "(Contributed by Barney Gale in :gh:`73991`.)"
msgstr "(Bidrag från Barney Gale i :gh:`73991`.)"

msgid ""
"Add :attr:`pathlib.Path.info` attribute, which stores an object implementing "
"the :class:`pathlib.types.PathInfo` protocol (also new). The object supports "
"querying the file type and internally caching :func:`~os.stat` results. Path "
"objects generated by :meth:`~pathlib.Path.iterdir` are initialized with file "
"type information gleaned from scanning the parent directory. (Contributed by "
"Barney Gale in :gh:`125413`.)"
msgstr ""
"Lägg till attributet :attr:`pathlib.Path.info`, som lagrar ett objekt som "
"implementerar protokollet :class:`pathlib.types.PathInfo` (också nytt). "
"Objektet stöder frågor om filtyp och intern cachelagring av :func:`~os.stat`-"
"resultat. Path-objekt som genereras av :meth:`~pathlib.Path.iterdir` "
"initialiseras med filtypsinformation som hämtas genom att skanna den "
"överordnade katalogen. (Bidrag från Barney Gale i :gh:`125413`.)"

msgid "pdb"
msgstr "pdb"

msgid ""
"Hardcoded breakpoints (:func:`breakpoint` and :func:`pdb.set_trace`) now "
"reuse the most recent :class:`~pdb.Pdb` instance that calls :meth:`~pdb.Pdb."
"set_trace`, instead of creating a new one each time. As a result, all the "
"instance specific data like :pdbcmd:`display` and :pdbcmd:`commands` are "
"preserved across hardcoded breakpoints. (Contributed by Tian Gao in :gh:"
"`121450`.)"
msgstr ""
"Hårdkodade brytpunkter (:func:`breakpoint` och :func:`pdb.set_trace`) "
"återanvänder nu den senaste :class:`~pdb.Pdb`-instansen som anropar :meth:"
"`~pdb.Pdb.set_trace`, istället för att skapa en ny varje gång. Som ett "
"resultat bevaras alla instansspecifika data som :pdbcmd:`display` och :"
"pdbcmd:`commands` över hårdkodade brytpunkter. (Bidrag från Tian Gao i :gh:"
"`121450`.)"

msgid ""
"Add a new argument *mode* to :class:`pdb.Pdb`. Disable the ``restart`` "
"command when :mod:`pdb` is in ``inline`` mode. (Contributed by Tian Gao in :"
"gh:`123757`.)"
msgstr ""
"Lägg till ett nytt argument *mode* till :class:`pdb.Pdb`. Inaktivera "
"kommandot ``restart`` när :mod:`pdb` är i ``inline``-läge. (Bidrag från Tian "
"Gao i :gh:`123757`.)"

msgid ""
"A confirmation prompt will be shown when the user tries to quit :mod:`pdb` "
"in ``inline`` mode. ``y``, ``Y``, ``<Enter>`` or ``EOF`` will confirm the "
"quit and call :func:`sys.exit`, instead of raising :exc:`bdb.BdbQuit`. "
"(Contributed by Tian Gao in :gh:`124704`.)"
msgstr ""
"En bekräftelseprompt kommer att visas när användaren försöker avsluta :mod:"
"`pdb` i ``inline``-läge. ``y``, ``Y``, ``<Enter>`` eller ``EOF`` kommer att "
"bekräfta avslutningen och anropa :func:`sys.exit`, istället för att ge "
"upphov till :exc:`bdb.BdbQuit`. (Bidrag från Tian Gao i :gh:`124704`.)"

msgid ""
"Inline breakpoints like :func:`breakpoint` or :func:`pdb.set_trace` will "
"always stop the program at calling frame, ignoring the ``skip`` pattern (if "
"any). (Contributed by Tian Gao in :gh:`130493`.)"
msgstr ""
"Inline breakpoints som :func:`breakpoint` eller :func:`pdb.set_trace` kommer "
"alltid att stoppa programmet vid anropande frame och ignorerar ``skip``-"
"mönstret (om det finns något). (Bidrag från Tian Gao i :gh:`130493`.)"

msgid ""
"``<tab>`` at the beginning of the line in :mod:`pdb` multi-line input will "
"fill in a 4-space indentation now, instead of inserting a ``\\t`` character. "
"(Contributed by Tian Gao in :gh:`130471`.)"
msgstr ""
"``<tab>`` i början av raden i :mod:`pdb` flerradig inmatning kommer att "
"fylla i en 4-space indragning nu, istället för att infoga en ``t`` karaktär. "
"(Bidrag från Tian Gao i :gh:`130471`.)"

msgid ""
"Auto-indent is introduced in :mod:`pdb` multi-line input. It will either "
"keep the indentation of the last line or insert a 4-space indentation when "
"it detects a new code block. (Contributed by Tian Gao in :gh:`133350`.)"
msgstr ""
"Auto-indrag införs i :mod:`pdb` flerradig inmatning. Den kommer antingen att "
"behålla indraget på den sista raden eller infoga ett indrag på 4 mellanrum "
"när den upptäcker ett nytt kodblock. (Bidrag från Tian Gao i :gh:`133350`.)"

msgid ""
"``$_asynctask`` is added to access the current asyncio task if applicable. "
"(Contributed by Tian Gao in :gh:`124367`.)"
msgstr ""
"``$_asynctask`` läggs till för att komma åt den aktuella asyncio-uppgiften "
"om tillämpligt. (Bidrag från Tian Gao i :gh:`124367`.)"

msgid ""
":mod:`pdb` now supports two backends: :func:`sys.settrace` and :mod:`sys."
"monitoring`. Using :mod:`pdb` CLI or :func:`breakpoint` will always use the :"
"mod:`sys.monitoring` backend. Explicitly instantiating :class:`pdb.Pdb` and "
"its derived classes will use the :func:`sys.settrace` backend by default, "
"which is configurable. (Contributed by Tian Gao in :gh:`124533`.)"
msgstr ""
":mod:`pdb` stöder nu två backends: :func:`sys.settrace` och :mod:`sys."
"monitoring`. Om du använder :mod:`pdb` CLI eller :func:`breakpoint` kommer "
"du alltid att använda :mod:`sys.monitoring` backend. Explicit instansiering "
"av :class:`pdb.Pdb` och dess härledda klasser kommer att använda :func:`sys."
"settrace` backend som standard, vilket är konfigurerbart. (Bidrag från Tian "
"Gao i :gh:`124533`.)"

msgid ""
":func:`pdb.set_trace_async` is added to support debugging asyncio "
"coroutines. :keyword:`await` statements are supported with this function. "
"(Contributed by Tian Gao in :gh:`132576`.)"
msgstr ""
":func:`pdb.set_trace_async` läggs till för att stödja felsökning av asyncio "
"coroutines. :keyword:`await` statements stöds med denna funktion. (Bidrag "
"från Tian Gao i :gh:`132576`.)"

msgid ""
"Source code displayed in :mod:`pdb` will be syntax-highlighted. This feature "
"can be controlled using the same methods as PyREPL, in addition to the newly "
"added ``colorize`` argument of :class:`pdb.Pdb`. (Contributed by Tian Gao "
"and Łukasz Langa in :gh:`133355`.)"
msgstr ""
"Källkod som visas i :mod:`pdb` kommer att syntaxmarkeras. Denna funktion kan "
"kontrolleras med samma metoder som PyREPL, utöver det nyligen tillagda "
"``colorize``-argumentet i :class:`pdb.Pdb`. (Bidrag från Tian Gao och Łukasz "
"Langa i :gh:`133355`.)"

msgid "pickle"
msgstr "gurka"

msgid ""
"Set the default protocol version on the :mod:`pickle` module to 5. For more "
"details, see :ref:`pickle protocols <pickle-protocols>`."
msgstr ""
"Ställ in standardprotokollversionen på :mod:`pickle`-modulen till 5. För mer "
"information, se :ref:`pickle protocols <pickle-protocols>`."

msgid ""
"Add notes for pickle serialization errors that allow to identify the source "
"of the error. (Contributed by Serhiy Storchaka in :gh:`122213`.)"
msgstr ""
"Lägg till anteckningar för pickle-serialiseringsfel som gör det möjligt att "
"identifiera källan till felet. (Bidrag från Serhiy Storchaka i :gh:`122213`.)"

msgid "platform"
msgstr "plattform"

msgid ""
"Add :func:`platform.invalidate_caches` to invalidate the cached results. "
"(Contributed by Bénédikt Tran in :gh:`122549`.)"
msgstr ""
"Lägg till :func:`platform.invalidate_caches` för att ogiltigförklara de "
"cachade resultaten. (Bidrag från Bénédikt Tran i :gh:`122549`.)"

msgid "pydoc"
msgstr "pydoc"

msgid ""
":term:`Annotations <annotation>` in help output are now usually displayed in "
"a format closer to that in the original source. (Contributed by Jelle "
"Zijlstra in :gh:`101552`.)"
msgstr ""
":term:`Annotationer <annotation>` i hjälptexter visas nu vanligtvis i ett "
"format som ligger närmare originalkällans. (Bidrag från Jelle Zijlstra i :gh:"
"`101552`.)"

msgid "socket"
msgstr "kortplats"

msgid "Improve and fix support for Bluetooth sockets."
msgstr "Förbättrat och åtgärdat stöd för Bluetooth-uttag."

msgid ""
"Fix support of Bluetooth sockets on NetBSD and DragonFly BSD. (Contributed "
"by Serhiy Storchaka in :gh:`132429`.)"
msgstr ""
"Fixa stöd för Bluetooth-sockets på NetBSD och DragonFly BSD. (Bidrag från "
"Serhiy Storchaka i :gh:`132429`.)"

msgid ""
"Fix support for :const:`~socket.BTPROTO_HCI` on FreeBSD. (Contributed by "
"Victor Stinner in :gh:`111178`.)"
msgstr ""
"Fixar stöd för :const:`~socket.BTPROTO_HCI` på FreeBSD. (Bidrag från Victor "
"Stinner i :gh:`111178`.)"

msgid ""
"Add support for :const:`~socket.BTPROTO_SCO` on FreeBSD. (Contributed by "
"Serhiy Storchaka in :gh:`85302`.)"
msgstr ""
"Lägg till stöd för :const:`~socket.BTPROTO_SCO` på FreeBSD. (Bidrag från "
"Serhiy Storchaka i :gh:`85302`.)"

msgid ""
"Add support for *cid* and *bdaddr_type* in the address for :const:`~socket."
"BTPROTO_L2CAP` on FreeBSD. (Contributed by Serhiy Storchaka in :gh:`132429`.)"
msgstr ""
"Lägg till stöd för *cid* och *bdaddr_type* i adressen för :const:`~socket."
"BTPROTO_L2CAP` på FreeBSD. (Bidrag från Serhiy Storchaka i :gh:`132429`.)"

msgid ""
"Add support for *channel* in the address for :const:`~socket.BTPROTO_HCI` on "
"Linux. (Contributed by Serhiy Storchaka in :gh:`70145`.)"
msgstr ""
"Lägg till stöd för *channel* i adressen för :const:`~socket.BTPROTO_HCI` på "
"Linux. (Bidrag från Serhiy Storchaka i :gh:`70145`.)"

msgid ""
"Accept an integer as the address for :const:`~socket.BTPROTO_HCI` on Linux. "
"(Contributed by Serhiy Storchaka in :gh:`132099`.)"
msgstr ""
"Acceptera ett heltal som adress för :const:`~socket.BTPROTO_HCI` på Linux. "
"(Bidrag från Serhiy Storchaka i :gh:`132099`.)"

msgid ""
"Return *cid* in :meth:`~socket.socket.getsockname` for :const:`~socket."
"BTPROTO_L2CAP`. (Contributed by Serhiy Storchaka in :gh:`132429`.)"
msgstr ""
"Returnerar *cid* i :meth:`~socket.socket.getsockname` för :const:`~socket."
"BTPROTO_L2CAP`. (Bidrag från Serhiy Storchaka i :gh:`132429`.)"

msgid ""
"Add many new constants. (Contributed by Serhiy Storchaka in :gh:`132734`.)"
msgstr ""
"Lägg till många nya konstanter. (Bidrag från Serhiy Storchaka i :gh:"
"`132734`.)"

msgid "ssl"
msgstr "ssl"

msgid ""
"Indicate through :data:`ssl.HAS_PHA` whether the :mod:`ssl` module supports "
"TLSv1.3 post-handshake client authentication (PHA). (Contributed by Will "
"Childs-Klein in :gh:`128036`.)"
msgstr ""
"Ange genom :data:`ssl.HAS_PHA` om :mod:`ssl`-modulen stöder TLSv1.3 post-"
"handskakning av klientautentisering (PHA). (Bidrag från Will Childs-Klein i :"
"gh:`128036`.)"

msgid "struct"
msgstr "struktur"

msgid ""
"Support the :c:expr:`float complex` and :c:expr:`double complex` C types in "
"the :mod:`struct` module (formatting characters ``'F'`` and ``'D'`` "
"respectively). (Contributed by Sergey B Kirpichev in :gh:`121249`.)"
msgstr ""
"Stöd för C-typerna :c:expr:`float complex` och :c:expr:`double complex` i "
"modulen :mod:`struct` (formateringstecken ``'F'`` respektive ``'D'``). "
"(Bidrag från Sergey B Kirpichev i :gh:`121249`.)"

msgid "symtable"
msgstr "symtomtabell"

msgid "Expose the following :class:`symtable.Symbol` methods:"
msgstr "Exponera följande :class:`symtable.Symbol`-metoder:"

msgid ":meth:`~symtable.Symbol.is_comp_cell`"
msgstr ":meth:`~symtable.Symbol.is_comp_cell`"

msgid ":meth:`~symtable.Symbol.is_comp_iter`"
msgstr ":meth:`~symtable.Symbol.is_comp_iter`"

msgid ":meth:`~symtable.Symbol.is_free_class`"
msgstr ":meth:`~symtable.Symbol.is_free_class`"

msgid "(Contributed by Bénédikt Tran in :gh:`120029`.)"
msgstr "(Bidrag från Bénédikt Tran i :gh:`120029`.)"

msgid "sys"
msgstr "system"

msgid ""
"The previously undocumented special function :func:`sys.getobjects`, which "
"only exists in specialized builds of Python, may now return objects from "
"other interpreters than the one it's called in."
msgstr ""
"Den tidigare odokumenterade specialfunktionen :func:`sys.getobjects`, som "
"bara finns i specialiserade Python-versioner, kan nu returnera objekt från "
"andra tolkar än den som den anropas i."

msgid ""
"Add :func:`sys._is_immortal` for determining if an object is :term:"
"`immortal`. (Contributed by Peter Bierma in :gh:`128509`.)"
msgstr ""
"Lägg till :func:`sys._is_immortal` för att avgöra om ett objekt är :term:"
"`immortal`. (Bidrag från Peter Bierma i :gh:`128509`.)"

msgid ""
"On FreeBSD, :data:`sys.platform` doesn't contain the major version anymore. "
"It is always ``'freebsd'``, instead of ``'freebsd13'`` or ``'freebsd14'``."
msgstr ""
"På FreeBSD innehåller :data:`sys.platform` inte huvudversionen längre. Den "
"är alltid ``'freebsd'``, istället för ``'freebsd13'`` eller ``'freebsd14'``."

msgid ""
"Raise :exc:`DeprecationWarning` for :func:`sys._clear_type_cache`. This "
"function was deprecated in Python 3.13 but it didn't raise a runtime warning."
msgstr ""
"Utlös :exc:`DeprecationWarning` för :func:`sys._clear_type_cache`. Denna "
"funktion var föråldrad i Python 3.13 men den gav inte upphov till någon "
"varning under körning."

msgid "sys.monitoring"
msgstr "sys.övervakning"

msgid ""
"Two new events are added: :monitoring-event:`BRANCH_LEFT` and :monitoring-"
"event:`BRANCH_RIGHT`. The ``BRANCH`` event is deprecated."
msgstr ""
"Två nya händelser har lagts till: :monitoring-event:`BRANCH_LEFT` och :"
"monitoring-event:`BRANCH_RIGHT`. Händelsen ``BRANCH`` är utdaterad."

msgid "sysconfig"
msgstr "sysconfig"

msgid ""
"Add ``ABIFLAGS`` key to :func:`sysconfig.get_config_vars` on Windows. "
"(Contributed by Xuehai Pan in :gh:`131799`.)"
msgstr ""
"Lägg till ``ABIFLAGS`` nyckel till :func:`sysconfig.get_config_vars` på "
"Windows. (Bidrag från Xuehai Pan i :gh:`131799`.)"

msgid "tarfile"
msgstr "tarfil"

msgid ""
":func:`~tarfile.data_filter` now normalizes symbolic link targets in order "
"to avoid path traversal attacks. (Contributed by Petr Viktorin in :gh:"
"`127987` and :cve:`2025-4138`.)"
msgstr ""
":func:`~tarfile.data_filter` normaliserar nu mål för symboliska länkar för "
"att undvika attacker genom sökvägar. (Bidrag från Petr Viktorin i :gh:"
"`127987` och :cve:`2025-4138`.)"

msgid ""
":func:`~tarfile.TarFile.extractall` now skips fixing up directory attributes "
"when a directory was removed or replaced by another kind of file. "
"(Contributed by Petr Viktorin in :gh:`127987` and :cve:`2024-12718`.)"
msgstr ""
":func:`~tarfile.TarFile.extractall` hoppar nu över att fixa katalogattribut "
"när en katalog har tagits bort eller ersatts av en annan typ av fil. (Bidrag "
"från Petr Viktorin i :gh:`127987` och :cve:`2024-12718`.)"

msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` now "
"(re-)apply the extraction filter when substituting a link (hard or symbolic) "
"with a copy of another archive member, and when fixing up directory "
"attributes. The former raises a new exception, :exc:`~tarfile."
"LinkFallbackError`. (Contributed by Petr Viktorin for :cve:`2025-4330` and :"
"cve:`2024-12718`.)"
msgstr ""
":func:`~tarfile.TarFile.extract` och :func:`~tarfile.TarFile.extractall` "
"(åter)tillämpar nu extraktionsfiltret när en länk (hård eller symbolisk) "
"ersätts med en kopia av en annan arkivmedlem och när katalogattribut "
"korrigeras. Det förstnämnda ger upphov till ett nytt undantag, :exc:"
"`~tarfile.LinkFallbackError`. (Bidrag från Petr Viktorin för :cve:"
"`2025-4330` och :cve:`2024-12718`.)"

msgid ""
":func:`~tarfile.TarFile.extract` and :func:`~tarfile.TarFile.extractall` no "
"longer extract rejected members when :func:`~tarfile.TarFile.errorlevel` is "
"zero. (Contributed by Matt Prodani and Petr Viktorin in :gh:`112887` and :"
"cve:`2025-4435`.)"
msgstr ""
":func:`~tarfile.TarFile.extract` och :func:`~tarfile.TarFile.extractall` "
"extraherar inte längre avvisade medlemmar när :func:`~tarfile.TarFile."
"errorlevel` är noll. (Bidrag från Matt Prodani och Petr Viktorin i :gh:"
"`112887` och :cve:`2025-4435`.)"

msgid "threading"
msgstr "gängning"

msgid ""
":meth:`threading.Thread.start` now sets the operating system thread name to :"
"attr:`threading.Thread.name`. (Contributed by Victor Stinner in :gh:`59705`.)"
msgstr ""
":meth:`threading.Thread.start` sätter nu operativsystemets trådnamn till :"
"attr:`threading.Thread.name`. (Bidrag från Victor Stinner i :gh:`59705`.)"

msgid "tkinter"
msgstr "tkinter"

msgid ""
"Make :mod:`tkinter` widget methods :meth:`!after` and :meth:`!after_idle` "
"accept arguments passed by keyword. (Contributed by Zhikang Yan in :gh:"
"`126899`.)"
msgstr ""
"Gör så att :mod:`tkinter` widgetmetoderna :meth:`!after` och :meth:`!"
"after_idle` accepterar argument som skickas med nyckelord. (Bidrag från "
"Zhikang Yan i :gh:`126899`.)"

msgid ""
"Add ability to specify name for :class:`!tkinter.OptionMenu` and :class:`!"
"tkinter.ttk.OptionMenu`. (Contributed by Zhikang Yan in :gh:`130482`.)"
msgstr ""
"Lägg till möjligheten att ange namn för :class:`!tkinter.OptionMenu` och :"
"class:`!tkinter.ttk.OptionMenu`. (Bidrag från Zhikang Yan i :gh:`130482`.)"

msgid "turtle"
msgstr "sköldpadda"

msgid ""
"Add context managers for :func:`turtle.fill`, :func:`turtle.poly` and :func:"
"`turtle.no_animation`. (Contributed by Marie Roald and Yngve Mardal Moe in :"
"gh:`126350`.)"
msgstr ""
"Lägg till kontexthanterare för :func:`turtle.fill`, :func:`turtle.poly` och :"
"func:`turtle.no_animation`. (Bidrag från Marie Roald och Yngve Mardal Moe i :"
"gh:`126350`.)"

msgid "types"
msgstr "typer"

msgid ""
":class:`types.UnionType` is now an alias for :class:`typing.Union`. See :ref:"
"`below <whatsnew314-typing-union>` for more details. (Contributed by Jelle "
"Zijlstra in :gh:`105499`.)"
msgstr ""
":class:`types.UnionType` är nu ett alias för :class:`typing.Union`. Se :ref:"
"``under <whatsnew314-typing-union>`` för mer information. (Bidrag från Jelle "
"Zijlstra i :gh:`105499`.)"

msgid "typing"
msgstr "maskinskrivning"

msgid ""
":class:`types.UnionType` and :class:`typing.Union` are now aliases for each "
"other, meaning that both old-style unions (created with ``Union[int, str]``) "
"and new-style unions (``int | str``) now create instances of the same "
"runtime type. This unifies the behavior between the two syntaxes, but leads "
"to some differences in behavior that may affect users who introspect types "
"at runtime:"
msgstr ""
":class:`types.UnionType` och :class:`typing.Union` är nu alias för varandra, "
"vilket innebär att både gamla tiders unioner (skapade med ``Union[int, "
"str]``) och nya tiders unioner (``int | str``) nu skapar instanser av samma "
"runtime-typ. Detta förenhetligar beteendet mellan de två syntaxerna, men "
"leder till vissa skillnader i beteende som kan påverka användare som "
"introspekterar typer vid körning:"

msgid ""
"Both syntaxes for creating a union now produce the same string "
"representation in ``repr()``. For example, ``repr(Union[int, str])`` is now "
"``\"int | str\"`` instead of ``\"typing.Union[int, str]\"``."
msgstr ""
"Båda syntaxerna för att skapa en union ger nu samma strängrepresentation i "
"``repr()``. Till exempel, ``repr(Union[int, str])`` är nu ``\"int | str\"`` "
"istället för ``\"typing.Union[int, str]\"``."

msgid ""
"Unions created using the old syntax are no longer cached. Previously, "
"running ``Union[int, str]`` multiple times would return the same object "
"(``Union[int, str] is Union[int, str]`` would be ``True``), but now it will "
"return two different objects. Users should use ``==`` to compare unions for "
"equality, not ``is``. New-style unions have never been cached this way. This "
"change could increase memory usage for some programs that use a large number "
"of unions created by subscripting ``typing.Union``. However, several factors "
"offset this cost: unions used in annotations are no longer evaluated by "
"default in Python 3.14 because of :pep:`649`; an instance of :class:`types."
"UnionType` is itself much smaller than the object returned by ``Union[]`` "
"was on prior Python versions; and removing the cache also saves some space. "
"It is therefore unlikely that this change will cause a significant increase "
"in memory usage for most users."
msgstr ""
"Unioner som skapats med den gamla syntaxen cachas inte längre. Tidigare "
"skulle körning av ``Union[int, str]`` flera gånger returnera samma objekt "
"(``Union[int, str] is Union[int, str]`` skulle vara ``True``), men nu kommer "
"det att returnera två olika objekt. Användare bör använda ``==`` för att "
"jämföra unioner för likhet, inte ``is``. Nya unions har aldrig cachelagrats "
"på det här sättet. Denna ändring kan öka minnesanvändningen för vissa "
"program som använder ett stort antal unioner som skapats genom subskription "
"av ``typing.Union``. Flera faktorer uppväger dock denna kostnad: unioner som "
"används i annoteringar utvärderas inte längre som standard i Python 3.14 på "
"grund av :pep:`649`; en instans av :class:`types.UnionType` är i sig mycket "
"mindre än det objekt som returneras av ``Union[]`` var i tidigare Python-"
"versioner; och att ta bort cacheminnet sparar också lite utrymme. Det är "
"därför osannolikt att denna ändring kommer att orsaka en betydande ökning av "
"minnesanvändningen för de flesta användare."

msgid ""
"Previously, old-style unions were implemented using the private class "
"``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection "
"helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""
"Tidigare implementerades gammaldags unioner med hjälp av den privata klassen "
"``typing._UnionGenericAlias``. Denna klass behövs inte längre för "
"implementationen, men den har behållits för bakåtkompatibilitet, med "
"borttagning planerad till Python 3.17. Användare bör använda dokumenterade "
"introspektionshjälpmedel som :func:`typing.get_origin` och :func:`typing."
"get_args` istället för att förlita sig på privata implementationsdetaljer."

msgid ""
"It is now possible to use :class:`typing.Union` itself in :func:`isinstance` "
"checks. For example, ``isinstance(int | str, typing.Union)`` will return "
"``True``; previously this raised :exc:`TypeError`."
msgstr ""
"Det är nu möjligt att använda :class:`typing.Union` själv i :func:"
"`isinstance`-kontroller. Till exempel kommer ``isinstance(int | str, typing."
"Union)`` att returnera ``True``; tidigare gav detta upphov till :exc:"
"`TypeError`."

msgid ""
"The ``__args__`` attribute of :class:`typing.Union` objects is no longer "
"writable."
msgstr ""
"Attributet ``__args__`` för :class:`typing.Union`-objekt är inte längre "
"skrivbart."

msgid ""
"It is no longer possible to set any attributes on :class:`typing.Union` "
"objects. This only ever worked for dunder attributes on previous versions, "
"was never documented to work, and was subtly broken in many cases."
msgstr ""
"Det är inte längre möjligt att ange några attribut på :class:`typing.Union`-"
"objekt. Detta fungerade bara för dunder-attribut i tidigare versioner, var "
"aldrig dokumenterat att fungera och var subtilt trasigt i många fall."

msgid "(Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr "(Bidrag från Jelle Zijlstra i :gh:`105499`.)"

msgid "unicodedata"
msgstr "unicodedata"

msgid "The Unicode database has been updated to Unicode 16.0.0."
msgstr "Unicode-databasen har uppdaterats till Unicode 16.0.0."

msgid "unittest"
msgstr "unittest"

msgid ""
":mod:`unittest` output is now colored by default. This can be controlled by :"
"ref:`environment variables <using-on-controlling-color>`. (Contributed by "
"Hugo van Kemenade in :gh:`127221`.)"
msgstr ""
":mod:`unittest`-utdata är nu färgade som standard. Detta kan kontrolleras "
"med :ref:``miljövariabler <using-on-controlling-color>`. (Bidrag från Hugo "
"van Kemenade i :gh:`127221`.)"

msgid ""
"unittest discovery supports :term:`namespace package` as start directory "
"again. It was removed in Python 3.11. (Contributed by Jacob Walls in :gh:"
"`80958`.)"
msgstr ""
"unittest discovery stöder :term:`namespace package` som startkatalog igen. "
"Det togs bort i Python 3.11. (Bidrag från Jacob Walls i :gh:`80958`.)"

msgid ""
"A number of new methods were added in the :class:`~unittest.TestCase` class "
"that provide more specialized tests."
msgstr ""
"Ett antal nya metoder har lagts till i klassen :class:`~unittest.TestCase` "
"som ger mer specialiserade tester."

msgid ""
":meth:`~unittest.TestCase.assertHasAttr` and :meth:`~unittest.TestCase."
"assertNotHasAttr` check whether the object has a particular attribute."
msgstr ""
":meth:`~unittest.TestCase.assertHasAttr` och :meth:`~unittest.TestCase."
"assertNotHasAttr` kontrollerar om objektet har ett visst attribut."

msgid ""
":meth:`~unittest.TestCase.assertIsSubclass` and :meth:`~unittest.TestCase."
"assertNotIsSubclass` check whether the object is a subclass of a particular "
"class, or of one of a tuple of classes."
msgstr ""
":meth:`~unittest.TestCase.assertIsSubclass` och :meth:`~unittest.TestCase."
"assertNotIsSubclass` kontrollerar om objektet är en underklass till en viss "
"klass eller till en av flera klasser."

msgid ""
":meth:`~unittest.TestCase.assertStartsWith`, :meth:`~unittest.TestCase."
"assertNotStartsWith`, :meth:`~unittest.TestCase.assertEndsWith` and :meth:"
"`~unittest.TestCase.assertNotEndsWith` check whether the Unicode or byte "
"string starts or ends with particular string(s)."
msgstr ""
":meth:`~unittest.TestCase.assertStartsWith`, :meth:`~unittest.TestCase."
"assertNotStartsWith`, :meth:`~unittest.TestCase.assertEndsWith` och :meth:"
"`~unittest.TestCase.assertNotEndsWith` kontrollerar om Unicode- eller "
"bytesträngen börjar eller slutar med viss(a) sträng(ar)."

msgid "(Contributed by Serhiy Storchaka in :gh:`71339`.)"
msgstr "(Bidrag från Serhiy Storchaka i :gh:`71339`.)"

msgid "urllib"
msgstr "urllib"

msgid ""
"Upgrade HTTP digest authentication algorithm for :mod:`urllib.request` by "
"supporting SHA-256 digest authentication as specified in :rfc:`7616`. "
"(Contributed by Calvin Bui in :gh:`128193`.)"
msgstr ""
"Uppgradera HTTP digest-autentiseringsalgoritmen för :mod:`urllib.request` "
"genom att stödja SHA-256 digest-autentisering enligt specifikationen i :rfc:"
"`7616`. (Bidrag från Calvin Bui i :gh:`128193`.)"

msgid ""
"Improve ergonomics and standards compliance when parsing and emitting ``file:"
"`` URLs."
msgstr ""
"Förbättrad ergonomi och efterlevnad av standarder vid analys och utgivning "
"av URL:er för ``file:``."

msgid "In :func:`urllib.request.url2pathname`:"
msgstr "I :func:`urllib.request.url2pathname`:"

msgid ""
"Accept a complete URL when the new *require_scheme* argument is set to true."
msgstr ""
"Acceptera en komplett URL när det nya argumentet *require_scheme* är satt "
"till true."

msgid "Discard URL authority if it matches the local hostname."
msgstr "Avvisa URL-behörighet om den matchar det lokala värdnamnet."

msgid ""
"Discard URL authority if it resolves to a local IP address when the new "
"*resolve_host* argument is set to true."
msgstr ""
"Kassera URL-behörighet om den löser upp till en lokal IP-adress när det nya "
"*resolve_host*-argumentet är satt till true."

msgid "Discard URL query and fragment components."
msgstr "Kassera URL-fråga och fragmentkomponenter."

msgid ""
"Raise :exc:`~urllib.error.URLError` if a URL authority isn't local, except "
"on Windows where we return a UNC path as before."
msgstr ""
"Utlös :exc:`~urllib.error.URLError` om en URL-auktoritet inte är lokal, utom "
"på Windows där vi returnerar en UNC-sökväg som tidigare."

msgid "In :func:`urllib.request.pathname2url`:"
msgstr "I :func:`urllib.request.pathname2url`:"

msgid ""
"Return a complete URL when the new *add_scheme* argument is set to true."
msgstr ""
"Returnerar en komplett URL när det nya argumentet *add_scheme* är satt till "
"true."

msgid ""
"Include an empty URL authority when a path begins with a slash. For example, "
"the path ``/etc/hosts`` is converted to the URL ``///etc/hosts``."
msgstr ""
"Inkludera en tom URL-auktoritet när en sökväg börjar med ett snedstreck. "
"Till exempel konverteras sökvägen ``/etc/hosts`` till URL:en ``///etc/"
"hosts``."

msgid ""
"On Windows, drive letters are no longer converted to uppercase, and ``:`` "
"characters not following a drive letter no longer cause an :exc:`OSError` "
"exception to be raised."
msgstr ""
"I Windows konverteras inte längre enhetsbokstäver till versaler, och ``:``-"
"tecken som inte följer efter en enhetsbokstav orsakar inte längre ett :exc:"
"`OSError`-undantag."

msgid "(Contributed by Barney Gale in :gh:`125866`.)"
msgstr "(Bidrag från Barney Gale i :gh:`125866`.)"

msgid "uuid"
msgstr "uuid"

msgid ""
"Add support for UUID versions 6, 7, and 8 via :func:`uuid.uuid6`, :func:"
"`uuid.uuid7`, and :func:`uuid.uuid8` respectively, as specified in :rfc:"
"`9562`. (Contributed by Bénédikt Tran in :gh:`89083`.)"
msgstr ""
"Lägg till stöd för UUID-versionerna 6, 7 och 8 via :func:`uuid.uuid6`, :func:"
"`uuid.uuid7` respektive :func:`uuid.uuid8`, enligt specifikationen i :rfc:"
"`9562`. (Bidrag från Bénédikt Tran i :gh:`89083`.)"

msgid ""
":const:`uuid.NIL` and :const:`uuid.MAX` are now available to represent the "
"Nil and Max UUID formats as defined by :rfc:`9562`. (Contributed by Nick "
"Pope in :gh:`128427`.)"
msgstr ""
":const:`uuid.NIL` och :const:`uuid.MAX` är nu tillgängliga för att "
"representera UUID-formaten Nil och Max enligt definitionen i :rfc:`9562`. "
"(Bidrag från Nick Pope i :gh:`128427`.)"

msgid ""
"Allow to generate multiple UUIDs at once via :option:`python -m uuid --count "
"<uuid --count>`. (Contributed by Simon Legner in :gh:`131236`.)"
msgstr ""
"Tillåt att generera flera UUID:er samtidigt via :option:`python -m uuid --"
"count <uuid --count>`. (Bidrag från Simon Legner i :gh:`131236`.)"

msgid "webbrowser"
msgstr "webbläsare"

msgid ""
"Names in the :envvar:`BROWSER` environment variable can now refer to already "
"registered browsers for the :mod:`webbrowser` module, instead of always "
"generating a new browser command."
msgstr ""
"Namn i miljövariabeln :envvar:`BROWSER` kan nu hänvisa till redan "
"registrerade webbläsare för modulen :mod:`webbrowser`, i stället för att "
"alltid generera ett nytt webbläsarkommando."

msgid ""
"This makes it possible to set :envvar:`BROWSER` to the value of one of the "
"supported browsers on macOS."
msgstr ""
"Detta gör det möjligt att ställa in :envvar:`BROWSER` till värdet för en av "
"de webbläsare som stöds på macOS."

msgid "zipinfo"
msgstr "zipinfo"

msgid ""
"Added :func:`ZipInfo._for_archive <zipfile.ZipInfo._for_archive>` to resolve "
"suitable defaults for a :class:`~zipfile.ZipInfo` object as used by :func:"
"`ZipFile.writestr <zipfile.ZipFile.writestr>`. (Contributed by Bénédikt Tran "
"in :gh:`123424`.)"
msgstr ""
"Lade till :func:`ZipInfo._for_archive <zipfile.ZipInfo._for_archive>` för "
"att bestämma lämpliga standardvärden för ett :class:`~zipfile.ZipInfo`-"
"objekt som används av :func:`ZipFile.writestr <zipfile.ZipFile.writestr>`. "
"(Bidrag från Bénédikt Tran i :gh:`123424`.)"

msgid ""
":meth:`zipfile.ZipFile.writestr` now respect ``SOURCE_DATE_EPOCH`` that "
"distributions can set centrally and have build tools consume this in order "
"to produce reproducible output. (Contributed by Jiahao Li in :gh:`91279`.)"
msgstr ""
":meth:`zipfile.ZipFile.writestr` respekterar nu ``SOURCE_DATE_EPOCH`` som "
"distributioner kan ställa in centralt och låta byggverktyg använda detta för "
"att producera reproducerbar utdata. (Bidrag från Jiahao Li i :gh:`91279`.)"

msgid "Optimizations"
msgstr "Optimeringar"

msgid ""
"The import time for several standard library modules has been improved, "
"including :mod:`ast`, :mod:`asyncio`, :mod:`base64`, :mod:`cmd`, :mod:"
"`csv`, :mod:`gettext`, :mod:`importlib.util`, :mod:`locale`, :mod:"
"`mimetypes`, :mod:`optparse`, :mod:`pickle`, :mod:`pprint`, :mod:`pstats`, :"
"mod:`socket`, :mod:`subprocess`, :mod:`threading`, :mod:`tomllib`, and :mod:"
"`zipfile`."
msgstr ""
"Importtiden för flera standardbiblioteksmoduler har förbättrats, inklusive :"
"mod:`ast`, :mod:`asyncio`, :mod:`base64`, :mod:`cmd`, :mod:`csv`, :mod:"
"`gettext`, :mod:`importlib.util`, :mod:`locale`, :mod:`mimetypes`, :mod:"
"`optparse`, :mod:`pickle`, :mod:`pprint`, :mod:`pstats`, :mod:`socket`, :mod:"
"`subprocess`, :mod:`threading`, :mod:`tomllib` och :mod:`zipfile`."

msgid ""
"(Contributed by Adam Turner, Bénédikt Tran, Chris Markiewicz, Eli Schwartz, "
"Hugo van Kemenade, Jelle Zijlstra, and others in :gh:`118761`.)"
msgstr ""
"(Bidrag från Adam Turner, Bénédikt Tran, Chris Markiewicz, Eli Schwartz, "
"Hugo van Kemenade, Jelle Zijlstra, och andra i :gh:`118761`.)"

msgid ""
":mod:`asyncio` has a new per-thread double linked list implementation "
"internally for :class:`native tasks <asyncio.Task>` which speeds up "
"execution by 10-20% on standard pyperformance benchmarks and reduces memory "
"usage. This enables external introspection tools such as :ref:`python -m "
"asyncio pstree <whatsnew314-asyncio-introspection>` to introspect the call "
"graph of asyncio tasks running in all threads. (Contributed by Kumar Aditya "
"in :gh:`107803`.)"
msgstr ""
":mod:`asyncio` har en ny implementering av dubbla länkade listor per tråd "
"internt för :class:`native tasks <asyncio.Task>` som snabbar upp "
"exekveringen med 10-20% on standard pyperformance benchmarks och minskar "
"minnesanvändningen. Detta gör det möjligt för externa introspektionsverktyg "
"som :ref:`python -m asyncio pstree <whatsnew314-asyncio-introspection>` att "
"introspektera anropsgrafen för asyncio-uppgifter som körs i alla trådar. "
"(Bidrag från Kumar Aditya i :gh:`107803`.)"

msgid ""
":mod:`asyncio` has first class support for :term:`free-threading builds "
"<free threading>`. This enables parallel execution of multiple event loops "
"across different threads and scales linearly with the number of threads. "
"(Contributed by Kumar Aditya in :gh:`128002`.)"
msgstr ""
":mod:`asyncio` har förstklassigt stöd för :term:``free-threading builds "
"<free threading>`. Detta möjliggör parallellkörning av flera händelseslingor "
"över olika trådar och skalar linjärt med antalet trådar. (Bidrag från Kumar "
"Aditya i :gh:`128002`.)"

msgid ""
":mod:`asyncio` has new utility functions for introspecting and printing the "
"program's call graph: :func:`asyncio.capture_call_graph` and :func:`asyncio."
"print_call_graph`. (Contributed by Yury Selivanov, Pablo Galindo Salgado, "
"and Łukasz Langa in :gh:`91048`.)"
msgstr ""
":mod:`asyncio` har nya verktygsfunktioner för introspektion och utskrift av "
"programmets anropsgraf: :func:`asyncio.capture_call_graph` och :func:"
"`asyncio.print_call_graph`. (Bidrag från Yury Selivanov, Pablo Galindo "
"Salgado och Łukasz Langa i :gh:`91048`.)"

msgid "base64"
msgstr "bas64"

msgid ""
"Improve the performance of :func:`base64.b16decode` by up to ten times, and "
"reduce the import time of :mod:`base64` by up to six times. (Contributed by "
"Bénédikt Tran, Chris Markiewicz, and Adam Turner in :gh:`118761`.)"
msgstr ""
"Förbättra prestanda för :func:`base64.b16decode` med upp till tio gånger och "
"minska importtiden för :mod:`base64` med upp till sex gånger. (Bidrag från "
"Bénédikt Tran, Chris Markiewicz och Adam Turner i :gh:`118761`.)"

msgid ""
"The new :ref:`incremental garbage collector <whatsnew314-incremental-gc>` "
"means that maximum pause times are reduced by an order of magnitude or more "
"for larger heaps. (Contributed by Mark Shannon in :gh:`108362`.)"
msgstr ""
"Den nya :ref:``incremental garbage collector <whatsnew314-incremental-gc>`` "
"innebär att den maximala paustiden minskar med en storleksordning eller mer "
"för större högar. (Bidrag från Mark Shannon i :gh:`108362`.)"

msgid ""
":mod:`io` which provides the built-in :func:`open` makes less system calls "
"when opening regular files as well as reading whole files. Reading a small "
"operating system cached file in full is up to 15% faster. :func:`pathlib."
"Path.read_bytes` has the most optimizations for reading a file's bytes in "
"full. (Contributed by Cody Maloney and Victor Stinner in :gh:`120754` and :"
"gh:`90102`.)"
msgstr ""
":mod:`io` som tillhandahåller den inbyggda :func:`open` gör färre "
"systemanrop vid öppning av vanliga filer samt vid läsning av hela filer. Att "
"läsa en liten cachad fil i operativsystemet i sin helhet är upp till 15% "
"faster. :func:`pathlib.Path.read_bytes` har flest optimeringar för att läsa "
"en fils bytes i sin helhet. (Bidrag från Cody Maloney och Victor Stinner i :"
"gh:`120754` och :gh:`90102`.)"

msgid ""
"Improve generation of :class:`~uuid.UUID` objects via their dedicated "
"functions:"
msgstr ""
"Förbättra genereringen av :class:`~uuid.UUID`-objekt via deras dedikerade "
"funktioner:"

msgid ""
":func:`~uuid.uuid3` and :func:`~uuid.uuid5` are both roughly 40% faster for "
"16-byte names and 20% faster for 1024-byte names. Performance for longer "
"names remains unchanged."
msgstr ""
":func:`~uuid.uuid3` och :func:`~uuid.uuid5` är båda ungefär 40% faster för "
"namn på 16 byte och 20% faster för namn på 1024 byte. Prestanda för längre "
"namn förblir oförändrad."

msgid ":func:`~uuid.uuid4` is 30% faster."
msgstr ":func:`~uuid.uuid4` är 30% faster."

msgid "(Contributed by Bénédikt Tran in :gh:`128150`.)"
msgstr "(Bidrag från Bénédikt Tran i :gh:`128150`.)"

msgid "zlib"
msgstr "zlib"

msgid ""
"On Windows, ``zlib-ng`` is now used as the implementation of the :mod:`zlib` "
"module. This should produce compatible and comparable results with better "
"performance, though it is worth noting that ``zlib.Z_BEST_SPEED`` (1) may "
"result in significantly less compression than the previous implementation "
"(while also significantly reducing the time taken to compress). (Contributed "
"by Steve Dower in :gh:`91349`.)"
msgstr ""
"På Windows används nu ``zlib-ng`` som implementering av modulen :mod:`zlib`. "
"Detta bör ge kompatibla och jämförbara resultat med bättre prestanda, även "
"om det är värt att notera att ``zlib.Z_BEST_SPEED`` (1) kan resultera i "
"betydligt mindre komprimering än den tidigare implementationen (samtidigt "
"som tiden det tar att komprimera också minskar betydligt). (Bidrag från "
"Steve Dower i :gh:`91349`.)"

msgid "Deprecated"
msgstr "Föråldrat"

msgid ":mod:`argparse`:"
msgstr ":mod:`argparse`:"

msgid ""
"Passing the undocumented keyword argument *prefix_chars* to :meth:`~argparse."
"ArgumentParser.add_argument_group` is now deprecated. (Contributed by "
"Savannah Ostrowski in :gh:`125563`.)"
msgstr ""
"Att skicka det odokumenterade nyckelordsargumentet *prefix_chars* till :meth:"
"`~argparse.ArgumentParser.add_argument_group` är nu föråldrat. (Bidrag från "
"Savannah Ostrowski i :gh:`125563`.)"

msgid ""
"Deprecated the :class:`argparse.FileType` type converter. Anything with "
"resource management should be done downstream after the arguments are "
"parsed. (Contributed by Serhiy Storchaka in :gh:`58032`.)"
msgstr ""
"Föråldrad typomvandlare för :class:`argparse.FileType`. Allt som har med "
"resurshantering att göra bör göras nedströms efter att argumenten har "
"analyserats. (Bidrag från Serhiy Storchaka i :gh:`58032`.)"

msgid ":mod:`asyncio`:"
msgstr ":mod:`asyncio`:"

msgid ""
":func:`!asyncio.iscoroutinefunction` is deprecated and will be removed in "
"Python 3.16; use :func:`inspect.iscoroutinefunction` instead. (Contributed "
"by Jiahao Li and Kumar Aditya in :gh:`122875`.)"
msgstr ""
":func:`!asyncio.iscoroutinefunction` är föråldrad och kommer att tas bort i "
"Python 3.16; använd :func:`inspect.iscoroutinefunction` istället. (Bidrag "
"från Jiahao Li och Kumar Aditya i :gh:`122875`.)"

msgid ""
":mod:`asyncio` policy system is deprecated and will be removed in Python "
"3.16. In particular, the following classes and functions are deprecated:"
msgstr ""
":mod:`asyncio`-policysystemet är föråldrat och kommer att tas bort i Python "
"3.16. I synnerhet är följande klasser och funktioner föråldrade:"

msgid ":class:`asyncio.AbstractEventLoopPolicy`"
msgstr ":class:`asyncio.AbstractEventLoopPolicy`"

msgid ":class:`asyncio.DefaultEventLoopPolicy`"
msgstr ":class:`asyncio.DefaultEventLoopPolicy`"

msgid ":class:`asyncio.WindowsSelectorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsSelectorEventLoopPolicy`"

msgid ":class:`asyncio.WindowsProactorEventLoopPolicy`"
msgstr ":class:`asyncio.WindowsProactorEventLoopPolicy`"

msgid ":func:`asyncio.get_event_loop_policy`"
msgstr ":func:`asyncio.get_event_loop_policy`"

msgid ":func:`asyncio.set_event_loop_policy`"
msgstr ":func:`asyncio.set_event_loop_policy`"

msgid ""
"Users should use :func:`asyncio.run` or :class:`asyncio.Runner` with "
"*loop_factory* to use the desired event loop implementation."
msgstr ""
"Användare bör använda :func:`asyncio.run` eller :class:`asyncio.Runner` med "
"*loop_factory* för att använda önskad implementering av händelseslingan."

msgid "For example, to use :class:`asyncio.SelectorEventLoop` on Windows::"
msgstr ""
"Till exempel, för att använda :class:`asyncio.SelectorEventLoop` på Windows::"

msgid ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"
msgstr ""
"import asyncio\n"
"\n"
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main(), loop_factory=asyncio.SelectorEventLoop)"

msgid "(Contributed by Kumar Aditya in :gh:`127949`.)"
msgstr "(Bidrag från Kumar Aditya i :gh:`127949`.)"

msgid ""
":mod:`builtins`: Passing a complex number as the *real* or *imag* argument "
"in the :func:`complex` constructor is now deprecated; it should only be "
"passed as a single positional argument. (Contributed by Serhiy Storchaka in :"
"gh:`109218`.)"
msgstr ""
":mod:`builtins`: Att skicka ett komplext tal som *real* eller *imag* "
"argument i :func:`complex`-konstruktören är nu föråldrat; det bör endast "
"skickas som ett enda positionellt argument. (Bidrag från Serhiy Storchaka i :"
"gh:`109218`.)"

msgid ""
":mod:`codecs`: :func:`codecs.open` is now deprecated. Use :func:`open` "
"instead. (Contributed by Inada Naoki in :gh:`133036`.)"
msgstr ""
":mod:`codecs`: :func:`codecs.open` är nu föråldrad. Använd :func:`open` "
"istället. (Bidrag från Inada Naoki i :gh:`133036`.)"

msgid ":mod:`ctypes`:"
msgstr ":mod:`ctypes`:"

msgid ""
"On non-Windows platforms, setting :attr:`.Structure._pack_` to use a MSVC-"
"compatible default memory layout is deprecated in favor of setting :attr:`."
"Structure._layout_` to ``'ms'``. (Contributed by Petr Viktorin in :gh:"
"`131747`.)"
msgstr ""
"På icke-Windows-plattformar är inställningen :attr:`.Structure._pack_` för "
"att använda en MSVC-kompatibel standardminneslayout föråldrad till förmån "
"för inställningen :attr:`.Structure._layout_` till ``'ms'``. (Bidrag från "
"Petr Viktorin i :gh:`131747`.)"

msgid ""
"Calling :func:`ctypes.POINTER` on a string is deprecated. Use :ref:`ctypes-"
"incomplete-types` for self-referential structures. Also, the internal "
"``ctypes._pointer_type_cache`` is deprecated. See :func:`ctypes.POINTER` for "
"updated implementation details. (Contributed by Sergey Myrianov in :gh:"
"`100926`.)"
msgstr ""
"Att anropa :func:`ctypes.POINTER` på en sträng är föråldrat. Använd :ref:"
"`ctypes-incomplete-types` för självrefererande strukturer. Även den interna "
"``ctypes._pointer_type_cache`` är föråldrad. Se :func:`ctypes.POINTER` för "
"uppdaterade implementationsdetaljer. (Bidrag från Sergey Myrianov i :gh:"
"`100926`.)"

msgid ""
":mod:`functools`: Calling the Python implementation of :func:`functools."
"reduce` with *function* or *sequence* as keyword arguments is now "
"deprecated. (Contributed by Kirill Podoprigora in :gh:`121676`.)"
msgstr ""
":mod:`functools`: Att anropa Python-implementationen av :func:`functools."
"reduce` med *function* eller *sequence* som nyckelordsargument är nu "
"föråldrat. (Bidrag från Kirill Podoprigora i :gh:`121676`.)"

msgid ""
":mod:`logging`: Support for custom logging handlers with the *strm* argument "
"is deprecated and scheduled for removal in Python 3.16. Define handlers with "
"the *stream* argument instead. (Contributed by Mariusz Felisiak in :gh:"
"`115032`.)"
msgstr ""
":mod:`logging`: Stöd för anpassade loggningshanterare med *strm*-argumentet "
"är föråldrat och kommer att tas bort i Python 3.16. Definiera hanterare med "
"*stream*-argumentet istället. (Bidrag från Mariusz Felisiak i :gh:`115032`.)"

msgid ""
":mod:`mimetypes`: Valid extensions start with a '.' or are empty for :meth:"
"`mimetypes.MimeTypes.add_type`. Undotted extensions are deprecated and will "
"raise a :exc:`ValueError` in Python 3.16. (Contributed by Hugo van Kemenade "
"in :gh:`75223`.)"
msgstr ""
":mod:`mimetypes`: Giltiga tillägg börjar med en '.' eller är tomma för :meth:"
"`mimetypes.MimeTypes.add_type`. Okommenterade tillägg är föråldrade och "
"kommer att ge upphov till ett :exc:`ValueError` i Python 3.16. (Bidrag från "
"Hugo van Kemenade i :gh:`75223`.)"

msgid ""
":mod:`!nturl2path`: This module is now deprecated. Call :func:`urllib."
"request.url2pathname` and :func:`~urllib.request.pathname2url` instead. "
"(Contributed by Barney Gale in :gh:`125866`.)"
msgstr ""
":mod:`!nturl2path`: Denna modul är nu föråldrad. Anropa :func:`urllib."
"request.url2pathname` och :func:`~urllib.request.pathname2url` istället. "
"(Bidrag från Barney Gale i :gh:`125866`.)"

msgid ""
":mod:`os`: :term:`Soft deprecate <soft deprecated>` :func:`os.popen` and :"
"func:`os.spawn* <os.spawnl>` functions. They should no longer be used to "
"write new code.  The :mod:`subprocess` module is recommended instead. "
"(Contributed by Victor Stinner in :gh:`120743`.)"
msgstr ""
":mod:`os`: :term:`Soft deprecate <soft deprecated>` :func:`os.popen` och :"
"func:`os.spawn* <os.spawnl>` funktioner. De bör inte längre användas för att "
"skriva ny kod.  Modulen :mod:`subprocess` rekommenderas istället. (Bidrag "
"från Victor Stinner i :gh:`120743`.)"

msgid ""
":mod:`pathlib`: :meth:`!pathlib.PurePath.as_uri` is deprecated and will be "
"removed in Python 3.19. Use :meth:`pathlib.Path.as_uri` instead. "
"(Contributed by Barney Gale in :gh:`123599`.)"
msgstr ""
":mod:`pathlib`: :meth:`!pathlib.PurePath.as_uri` är föråldrad och kommer att "
"tas bort i Python 3.19. Använd :meth:`pathlib.Path.as_uri` istället. (Bidrag "
"från Barney Gale i :gh:`123599`.)"

msgid ""
":mod:`pdb`: The undocumented ``pdb.Pdb.curframe_locals`` attribute is now a "
"deprecated read-only property. The low overhead dynamic frame locals access "
"added in Python 3.13 by PEP 667 means the frame locals cache reference "
"previously stored in this attribute is no longer needed. Derived debuggers "
"should access ``pdb.Pdb.curframe.f_locals`` directly in Python 3.13 and "
"later versions. (Contributed by Tian Gao in :gh:`124369` and :gh:`125951`.)"
msgstr ""
":mod:`pdb`: Det odokumenterade attributet ``pdb.Pdb.curframe_locals`` är nu "
"en föråldrad skrivskyddad egenskap. Den dynamiska frame locals-åtkomsten med "
"låg overhead som lades till i Python 3.13 genom PEP 667 innebär att frame "
"locals-cachereferensen som tidigare lagrats i detta attribut inte längre "
"behövs. Härledda debuggers bör komma åt ``pdb.Pdb.curframe.f_locals`` direkt "
"i Python 3.13 och senare versioner. (Bidrag från Tian Gao i :gh:`124369` "
"och :gh:`125951`.)"

msgid ""
":mod:`symtable`: Deprecate :meth:`symtable.Class.get_methods` due to the "
"lack of interest. (Contributed by Bénédikt Tran in :gh:`119698`.)"
msgstr ""
":mod:`symtable`: Deprecate :meth:`symtable.Class.get_methods` på grund av "
"bristande intresse. (Bidrag från Bénédikt Tran i :gh:`119698`.)"

msgid ""
":mod:`tkinter`: The :class:`!tkinter.Variable` methods :meth:`!"
"trace_variable`, :meth:`!trace_vdelete` and :meth:`!trace_vinfo` are now "
"deprecated. Use :meth:`!trace_add`, :meth:`!trace_remove` and :meth:`!"
"trace_info` instead. (Contributed by Serhiy Storchaka in :gh:`120220`.)"
msgstr ""
":mod:`tkinter`: Metoderna :class:`!tkinter.Variable` :meth:`!"
"trace_variable`, :meth:`!trace_vdelete` och :meth:`!trace_vinfo` är nu "
"föråldrade. Använd :meth:`!trace_add`, :meth:`!trace_remove` och :meth:`!"
"trace_info` istället. (Bidrag från Serhiy Storchaka i :gh:`120220`.)"

msgid ""
":mod:`urllib.parse`: Accepting objects with false values (like ``0`` and "
"``[]``) except empty strings, byte-like objects and ``None`` in :mod:`urllib."
"parse` functions :func:`~urllib.parse.parse_qsl` and :func:`~urllib.parse."
"parse_qs` is now deprecated. (Contributed by Serhiy Storchaka in :gh:"
"`116897`.)"
msgstr ""
":mod:`urllib.parse`: Att acceptera objekt med falska värden (som ``0`` och "
"``[]``) förutom tomma strängar, byte-liknande objekt och ``None`` i :mod:"
"`urllib.parse`-funktionerna :func:`~urllib.parse.parse_qsl` och :func:"
"`~urllib.parse.parse_qs` är nu föråldrat. (Bidrag från Serhiy Storchaka i :"
"gh:`116897`.)"

msgid "Pending removal in Python 3.15"
msgstr "Väntar på borttagning i Python 3.15"

msgid "The import system:"
msgstr "Importsystemet:"

msgid ""
"Setting :attr:`~module.__cached__` on a module while failing to set :attr:"
"`__spec__.cached <importlib.machinery.ModuleSpec.cached>` is deprecated. In "
"Python 3.15, :attr:`!__cached__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"Att ställa in :attr:`~module.__cached__` på en modul samtidigt som man "
"misslyckas med att ställa in :attr:`__spec__.cached <importlib.machinery."
"ModuleSpec.cached>` är föråldrat. I Python 3.15 kommer :attr:`!__cached__` "
"inte längre att anges eller tas i beaktande av importsystemet eller "
"standardbiblioteket. (:gh:`97879`)"

msgid ""
"Setting :attr:`~module.__package__` on a module while failing to set :attr:"
"`__spec__.parent <importlib.machinery.ModuleSpec.parent>` is deprecated. In "
"Python 3.15, :attr:`!__package__` will cease to be set or take into "
"consideration by the import system or standard library. (:gh:`97879`)"
msgstr ""
"Att ställa in :attr:`~module.__package__` på en modul utan att ställa in :"
"attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>` är föråldrat. "
"I Python 3.15 kommer :attr:`!__package__` inte längre att anges eller tas i "
"beaktande av importsystemet eller standardbiblioteket. (:gh:`97879`)"

msgid ""
"The undocumented :func:`!ctypes.SetPointerType` function has been deprecated "
"since Python 3.13."
msgstr ""
"Den odokumenterade :func:`!ctypes.SetPointerType`-funktionen är föråldrad "
"sedan Python 3.13."

msgid ":mod:`http.server`:"
msgstr ":mod:`http.server`:"

msgid ""
"The obsolete and rarely used :class:`~http.server.CGIHTTPRequestHandler` has "
"been deprecated since Python 3.13. No direct replacement exists. *Anything* "
"is better than CGI to interface a web server with a request handler."
msgstr ""
"Den föråldrade och sällan använda :class:`~http.server."
"CGIHTTPRequestHandler` har utgått sedan Python 3.13. Ingen direkt ersättare "
"finns. *Anything* är bättre än CGI för att koppla en webbserver till en "
"request-hanterare."

msgid ""
"The :option:`!--cgi` flag to the :program:`python -m http.server` command-"
"line interface has been deprecated since Python 3.13."
msgstr ""
"Flaggan :option:`!--cgi` till kommandoradsgränssnittet :program:`python -m "
"http.server` har utgått sedan Python 3.13."

msgid ":mod:`importlib`:"
msgstr ":mod:`importlib`:"

msgid "``load_module()`` method: use ``exec_module()`` instead."
msgstr "``load_module()`` metod: använd ``exec_module()`` istället."

msgid ":class:`locale`:"
msgstr ":class:`locale`:"

msgid ""
"The :func:`~locale.getdefaultlocale` function has been deprecated since "
"Python 3.11. Its removal was originally planned for Python 3.13 (:gh:"
"`90817`), but has been postponed to Python 3.15. Use :func:`~locale."
"getlocale`, :func:`~locale.setlocale`, and :func:`~locale.getencoding` "
"instead. (Contributed by Hugo van Kemenade in :gh:`111187`.)"
msgstr ""
"Funktionen :func:`~locale.getdefaultlocale` har varit föråldrad sedan Python "
"3.11. Dess borttagning var ursprungligen planerad till Python 3.13 (:gh:"
"`90817`), men har skjutits upp till Python 3.15. Använd :func:`~locale."
"getlocale`, :func:`~locale.setlocale`, och :func:`~locale.getencoding` "
"istället. (Bidrag från Hugo van Kemenade i :gh:`111187`.)"

msgid ":mod:`pathlib`:"
msgstr ":mod:`pathlib`:"

msgid ""
":meth:`.PurePath.is_reserved` has been deprecated since Python 3.13. Use :"
"func:`os.path.isreserved` to detect reserved paths on Windows."
msgstr ""
":meth:`.PurePath.is_reserved` har utgått sedan Python 3.13. Använd :func:`os."
"path.isreserved` för att upptäcka reserverade sökvägar i Windows."

msgid ":mod:`platform`:"
msgstr ":mod:`plattform`:"

msgid ""
":func:`~platform.java_ver` has been deprecated since Python 3.13. This "
"function is only useful for Jython support, has a confusing API, and is "
"largely untested."
msgstr ""
":func:`~platform.java_ver` har utgått sedan Python 3.13. Denna funktion är "
"endast användbar för Jython-stöd, har ett förvirrande API och är i stort "
"sett otestad."

msgid ":mod:`sysconfig`:"
msgstr ":mod:`sysconfig`:"

msgid ""
"The *check_home* argument of :func:`sysconfig.is_python_build` has been "
"deprecated since Python 3.12."
msgstr ""
"Argumentet *check_home* i :func:`sysconfig.is_python_build` har utgått sedan "
"Python 3.12."

msgid ":mod:`threading`:"
msgstr ":mod:`threading`:"

msgid ""
":func:`~threading.RLock` will take no arguments in Python 3.15. Passing any "
"arguments has been deprecated since Python 3.14, as the  Python version does "
"not permit any arguments, but the C version allows any number of positional "
"or keyword arguments, ignoring every argument."
msgstr ""
":func:`~threading.RLock` kommer inte att ta några argument i Python 3.15. "
"Att skicka några argument har varit föråldrat sedan Python 3.14, eftersom "
"Python-versionen inte tillåter några argument, men C-versionen tillåter "
"valfritt antal positionella eller nyckelordsargument och ignorerar varje "
"argument."

msgid ":mod:`types`:"
msgstr ":mod:`types`:"

msgid ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. May be removed "
"in 3.15. (Contributed by Nikita Sobolev in :gh:`101866`.)"
msgstr ""
":class:`types.CodeType`: Accessing :attr:`~codeobject.co_lnotab` was "
"deprecated in :pep:`626` since 3.10 and was planned to be removed in 3.12, "
"but it only got a proper :exc:`DeprecationWarning` in 3.12. Kan komma att "
"tas bort i 3.15. (Bidrag från Nikita Sobolev i :gh:`101866`.)"

msgid ":mod:`typing`:"
msgstr ":mod:`typning`:"

msgid ""
"The undocumented keyword argument syntax for creating :class:`~typing."
"NamedTuple` classes (for example, ``Point = NamedTuple(\"Point\", x=int, "
"y=int)``) has been deprecated since Python 3.13. Use the class-based syntax "
"or the functional syntax instead."
msgstr ""
"Den odokumenterade syntaxen för nyckelordsargument för att skapa :class:"
"`~typing.NamedTuple`-klasser (till exempel ``Point = NamedTuple(\"Point\", "
"x=int, y=int)``) har utgått sedan Python 3.13. Använd den klassbaserade "
"syntaxen eller den funktionella syntaxen istället."

msgid ""
"When using the functional syntax of :class:`~typing.TypedDict`\\s, failing "
"to pass a value to the *fields* parameter (``TD = TypedDict(\"TD\")``) or "
"passing ``None`` (``TD = TypedDict(\"TD\", None)``) has been deprecated "
"since Python 3.13. Use ``class TD(TypedDict): pass`` or ``TD = "
"TypedDict(\"TD\", {})`` to create a TypedDict with zero field."
msgstr ""
"När man använder den funktionella syntaxen för :class:`~typing."
"TypedDict`\\s, att inte skicka ett värde till parametern *fields* (``TD = "
"TypedDict(\"TD\")``) eller att skicka ``None`` (``TD = TypedDict(\"TD\", "
"None)``) har varit föråldrat sedan Python 3.13. Använd ``class "
"TD(TypedDict): pass`` eller ``TD = TypedDict(\"TD\", {})`` för att skapa en "
"TypedDict med noll fält."

msgid ""
"The :func:`typing.no_type_check_decorator` decorator function has been "
"deprecated since Python 3.13. After eight years in the :mod:`typing` module, "
"it has yet to be supported by any major type checker."
msgstr ""
"Dekoratorfunktionen :func:`typing.no_type_check_decorator` har varit "
"föråldrad sedan Python 3.13. Efter åtta år i modulen :mod:`typing` har den "
"ännu inte fått stöd av någon större typkontroll."

msgid ":mod:`wave`:"
msgstr ":mod:`våg`:"

msgid ""
"The :meth:`~wave.Wave_read.getmark`, :meth:`!setmark`, and :meth:`~wave."
"Wave_read.getmarkers` methods of the :class:`~wave.Wave_read` and :class:"
"`~wave.Wave_write` classes have been deprecated since Python 3.13."
msgstr ""
"Metoderna :meth:`~wave.Wave_read.getmark`, :meth:`!setmark` och :meth:`~wave."
"Wave_read.getmarkers` i klasserna :class:`~wave.Wave_read` och :class:`~wave."
"Wave_write` har utgått sedan Python 3.13."

msgid ":mod:`zipimport`:"
msgstr ":mod:`zipimport`:"

msgid ""
":meth:`~zipimport.zipimporter.load_module` has been deprecated since Python "
"3.10. Use :meth:`~zipimport.zipimporter.exec_module` instead. (Contributed "
"by Jiahao Li in :gh:`125746`.)"
msgstr ""
":meth:`~zipimport.zipimporter.load_module` är föråldrad sedan Python 3.10. "
"Använd :meth:`~zipimport.zipimporter.exec_module` istället. (Bidrag från "
"Jiahao Li i :gh:`125746`.)"

msgid "Pending removal in Python 3.16"
msgstr "Väntar på borttagning i Python 3.16"

msgid ""
"Setting :attr:`~module.__loader__` on a module while failing to set :attr:"
"`__spec__.loader <importlib.machinery.ModuleSpec.loader>` is deprecated. In "
"Python 3.16, :attr:`!__loader__` will cease to be set or taken into "
"consideration by the import system or the standard library."
msgstr ""
"Att ställa in :attr:`~module.__loader__` på en modul medan man misslyckas "
"med att ställa in :attr:`__spec__.loader <importlib.machinery.ModuleSpec."
"loader>` är föråldrat. I Python 3.16 kommer :attr:`!__loader__` inte längre "
"att anges eller tas i beaktande av importsystemet eller standardbiblioteket."

msgid ":mod:`array`:"
msgstr ":mod:`array`:"

msgid ""
"The ``'u'`` format code (:c:type:`wchar_t`) has been deprecated in "
"documentation since Python 3.3 and at runtime since Python 3.13. Use the "
"``'w'`` format code (:c:type:`Py_UCS4`) for Unicode characters instead."
msgstr ""
"Formatkoden ``'u'`` (:c:type:`wchar_t`) har utgått i dokumentation sedan "
"Python 3.3 och vid körning sedan Python 3.13. Använd istället formatkoden "
"``'w'`` (:c:type:`Py_UCS4`) för Unicode-tecken."

msgid ":mod:`builtins`:"
msgstr ":mod:`builtins`:"

msgid ""
"Bitwise inversion on boolean types, ``~True`` or ``~False`` has been "
"deprecated since Python 3.12, as it produces surprising and unintuitive "
"results (``-2`` and ``-1``). Use ``not x`` instead for the logical negation "
"of a Boolean. In the rare case that you need the bitwise inversion of the "
"underlying integer, convert to ``int`` explicitly (``~int(x)``)."
msgstr ""
"Bitvis invertering på booleska typer, ``~True`` eller ``~False`` har varit "
"föråldrad sedan Python 3.12, eftersom det ger överraskande och ointuitiva "
"resultat (``-2`` och ``-1``). Använd ``not x`` istället för den logiska "
"negationen av en booleansk formel. I det sällsynta fallet att du behöver den "
"bitvisa inverteringen av det underliggande heltalet, konvertera till ``int`` "
"explicit (``~int(x)``)."

msgid ":mod:`functools`:"
msgstr ":mod:`functools`:"

msgid ""
"Calling the Python implementation of :func:`functools.reduce` with "
"*function* or *sequence* as keyword arguments has been deprecated since "
"Python 3.14."
msgstr ""
"Att anropa Python-implementationen av :func:`functools.reduce` med "
"*funktion* eller *sekvens* som nyckelordsargument är inte längre aktuellt "
"sedan Python 3.14."

msgid ":mod:`logging`:"
msgstr ":mod:`logging`:"

msgid ""
"Support for custom logging handlers with the *strm* argument is deprecated "
"and scheduled for removal in Python 3.16. Define handlers with the *stream* "
"argument instead. (Contributed by Mariusz Felisiak in :gh:`115032`.)"
msgstr ""
"Stöd för anpassade logghanterare med *strm*-argumentet är föråldrat och "
"planeras att tas bort i Python 3.16. Definiera hanterare med *stream*-"
"argumentet istället. (Bidrag från Mariusz Felisiak i :gh:`115032`.)"

msgid ":mod:`mimetypes`:"
msgstr ":mod:`mimetypes`:"

msgid ""
"Valid extensions start with a '.' or are empty for :meth:`mimetypes."
"MimeTypes.add_type`. Undotted extensions are deprecated and will raise a :"
"exc:`ValueError` in Python 3.16. (Contributed by Hugo van Kemenade in :gh:"
"`75223`.)"
msgstr ""
"Giltiga tillägg börjar med en '.' eller är tomma för :meth:`mimetypes."
"MimeTypes.add_type`. Okommenterade tillägg är föråldrade och kommer att ge "
"upphov till ett :exc:`ValueError` i Python 3.16. (Bidrag från Hugo van "
"Kemenade i :gh:`75223`.)"

msgid ":mod:`shutil`:"
msgstr ":mod:`shutil`:"

msgid ""
"The :class:`!ExecError` exception has been deprecated since Python 3.14. It "
"has not been used by any function in :mod:`!shutil` since Python 3.4, and is "
"now an alias of :exc:`RuntimeError`."
msgstr ""
"Undantaget :class:`!ExecError` har varit föråldrat sedan Python 3.14. Det "
"har inte använts av någon funktion i :mod:`!shutil` sedan Python 3.4, och är "
"nu ett alias för :exc:`RuntimeError`."

msgid ":mod:`symtable`:"
msgstr ":mod:`symtable`:"

msgid ""
"The :meth:`Class.get_methods <symtable.Class.get_methods>` method has been "
"deprecated since Python 3.14."
msgstr ""
"Metoden :meth:`Class.get_methods <symtable.Class.get_methods>` har utgått "
"sedan Python 3.14."

msgid ":mod:`sys`:"
msgstr ":mod:`sys`:"

msgid ""
"The :func:`~sys._enablelegacywindowsfsencoding` function has been deprecated "
"since Python 3.13. Use the :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"environment variable instead."
msgstr ""
"Funktionen :func:`~sys._enablelegacywindowsfsencoding` är föråldrad sedan "
"Python 3.13. Använd miljövariabeln :envvar:`PYTHONLEGACYWINDOWSFSENCODING` "
"istället."

msgid ""
"The :func:`!sysconfig.expand_makefile_vars` function has been deprecated "
"since Python 3.14. Use the ``vars`` argument of :func:`sysconfig.get_paths` "
"instead."
msgstr ""
"Funktionen :func:`!sysconfig.expand_makefile_vars` är föråldrad sedan Python "
"3.14. Använd ``vars``-argumentet i :func:`sysconfig.get_paths` istället."

msgid ":mod:`tarfile`:"
msgstr ":mod:`tarfile`:"

msgid ""
"The undocumented and unused :attr:`!TarFile.tarfile` attribute has been "
"deprecated since Python 3.13."
msgstr ""
"Det odokumenterade och oanvända attributet :attr:`!TarFile.tarfile` är "
"föråldrat sedan Python 3.13."

msgid "Pending removal in Python 3.17"
msgstr "Väntar på borttagning i Python 3.17"

msgid ""
"Before Python 3.14, old-style unions were implemented using the private "
"class ``typing._UnionGenericAlias``. This class is no longer needed for the "
"implementation, but it has been retained for backward compatibility, with "
"removal scheduled for Python 3.17. Users should use documented introspection "
"helpers like :func:`typing.get_origin` and :func:`typing.get_args` instead "
"of relying on private implementation details."
msgstr ""
"Före Python 3.14 implementerades gamla tiders unioner med hjälp av den "
"privata klassen ``typing._UnionGenericAlias``. Denna klass behövs inte "
"längre för implementationen, men den har behållits för bakåtkompatibilitet, "
"med borttagning planerad till Python 3.17. Användare bör använda "
"dokumenterade introspektionshjälpmedel som :func:`typing.get_origin` och :"
"func:`typing.get_args` istället för att förlita sig på privata "
"implementationsdetaljer."

msgid "Pending removal in Python 3.19"
msgstr "Väntar på borttagning i Python 3.19"

msgid ""
"Implicitly switching to the MSVC-compatible struct layout by setting :attr:"
"`~ctypes.Structure._pack_` but not :attr:`~ctypes.Structure._layout_` on non-"
"Windows platforms."
msgstr ""
"Implicit byte till MSVC-kompatibel struct-layout genom att ställa in :attr:"
"`~ctypes.Structure._pack_` men inte :attr:`~ctypes.Structure._layout_` på "
"icke-Windows-plattformar."

msgid "Pending removal in future versions"
msgstr "Avser att tas bort i framtida versioner"

msgid ""
"The following APIs will be removed in the future, although there is "
"currently no date scheduled for their removal."
msgstr ""
"Följande API:er kommer att tas bort i framtiden, även om det för närvarande "
"inte finns något datum för när de ska tas bort."

msgid ""
"Nesting argument groups and nesting mutually exclusive groups are deprecated."
msgstr ""
"Nesting av argumentgrupper och nesting av ömsesidigt uteslutande grupper är "
"avförda."

msgid ""
"Passing the undocumented keyword argument *prefix_chars* to :meth:`~argparse."
"ArgumentParser.add_argument_group` is now deprecated."
msgstr ""
"Att skicka det odokumenterade nyckelordsargumentet *prefix_chars* till :meth:"
"`~argparse.ArgumentParser.add_argument_group` är nu föråldrat."

msgid "The :class:`argparse.FileType` type converter is deprecated."
msgstr "Typomvandlaren :class:`argparse.FileType` är föråldrad."

msgid "``bool(NotImplemented)``."
msgstr "``bool(NotImplemented)``."

msgid ""
"Generators: ``throw(type, exc, tb)`` and ``athrow(type, exc, tb)`` signature "
"is deprecated: use ``throw(exc)`` and ``athrow(exc)`` instead, the single "
"argument signature."
msgstr ""
"Generatorer: ``throw(type, exc, tb)`` och ``athrow(type, exc, tb)`` "
"signaturen är förbrukad: använd ``throw(exc)`` och ``athrow(exc)`` istället, "
"signaturen med ett enda argument."

msgid ""
"Currently Python accepts numeric literals immediately followed by keywords, "
"for example ``0in x``, ``1or x``, ``0if 1else 2``.  It allows confusing and "
"ambiguous expressions like ``[0x1for x in y]`` (which can be interpreted as "
"``[0x1 for x in y]`` or ``[0x1f or x in y]``).  A syntax warning is raised "
"if the numeric literal is immediately followed by one of keywords :keyword:"
"`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:`in`, :"
"keyword:`is` and :keyword:`or`.  In a future release it will be changed to a "
"syntax error. (:gh:`87999`)"
msgstr ""
"För närvarande accepterar Python numeriska literaler omedelbart följt av "
"nyckelord, till exempel ``0in x``, ``1or x``, ``0if 1else 2``.  Det tillåter "
"förvirrande och tvetydiga uttryck som ``[0x1for x in y]`` (som kan tolkas "
"som ``[0x1 for x in y]`` eller ``[0x1f or x in y]``).  En syntaxvarning "
"visas om den numeriska litteralen omedelbart följs av något av nyckelorden :"
"keyword:`and`, :keyword:`else`, :keyword:`for`, :keyword:`if`, :keyword:"
"`in`, :keyword:`is` och :keyword:`or`.  I en framtida version kommer det att "
"ändras till ett syntaxfel. (:gh:`87999`)"

msgid ""
"Support for ``__index__()`` and ``__int__()`` method returning non-int type: "
"these methods will be required to return an instance of a strict subclass "
"of :class:`int`."
msgstr ""
"Stöd för metoderna ``__index__()`` och ``__int__()`` som returnerar icke-int-"
"typer: dessa metoder kommer att behöva returnera en instans av en strikt "
"underklass av :class:`int`."

msgid ""
"Support for ``__float__()`` method returning a strict subclass of :class:"
"`float`: these methods will be required to return an instance of :class:"
"`float`."
msgstr ""
"Stöd för metoden ``__float__()`` som returnerar en strikt underklass av :"
"class:`float`: dessa metoder måste returnera en instans av :class:`float`."

msgid ""
"Support for ``__complex__()`` method returning a strict subclass of :class:"
"`complex`: these methods will be required to return an instance of :class:"
"`complex`."
msgstr ""
"Stöd för metoden ``__complex__()`` som returnerar en strikt underklass av :"
"class:`complex`: dessa metoder måste returnera en instans av :class:"
"`complex`."

msgid "Delegation of ``int()`` to ``__trunc__()`` method."
msgstr "Delegering av ``int()`` till metoden ``__trunc__()``."

msgid ""
"Passing a complex number as the *real* or *imag* argument in the :func:"
"`complex` constructor is now deprecated; it should only be passed as a "
"single positional argument. (Contributed by Serhiy Storchaka in :gh:"
"`109218`.)"
msgstr ""
"Att skicka ett komplext tal som *real* eller *imag* argument i :func:"
"`complex`-konstruktorn är nu föråldrat; det bör endast skickas som ett enda "
"positionellt argument. (Bidrag från Serhiy Storchaka i :gh:`109218`.)"

msgid ""
":mod:`calendar`: ``calendar.January`` and ``calendar.February`` constants "
"are deprecated and replaced by :data:`calendar.JANUARY` and :data:`calendar."
"FEBRUARY`. (Contributed by Prince Roshan in :gh:`103636`.)"
msgstr ""
":mod:`calendar`: Konstanterna ``calendar.January`` och ``calendar.February`` "
"är föråldrade och ersätts av :data:`calendar.JANUARY` och :data:`calendar."
"FEBRUARY`. (Bidrag från Prince Roshan i :gh:`103636`.)"

msgid ""
":mod:`codecs`: use :func:`open` instead of :func:`codecs.open`. (:gh:"
"`133038`)"
msgstr ""
":mod:`codecs`: använd :func:`open` istället för :func:`codecs.open`. (:gh:"
"`133038`)"

msgid ""
":attr:`codeobject.co_lnotab`: use the :meth:`codeobject.co_lines` method "
"instead."
msgstr ""
":attr:`codeobject.co_lnotab`: använd istället metoden :meth:`codeobject."
"co_lines`."

msgid ":mod:`datetime`:"
msgstr ":mod:`datumtid`:"

msgid ""
":meth:`~datetime.datetime.utcnow`: use ``datetime.datetime.now(tz=datetime."
"UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcnow`: använd ``datetime.datetime."
"now(tz=datetime.UTC)``."

msgid ""
":meth:`~datetime.datetime.utcfromtimestamp`: use ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."
msgstr ""
":meth:`~datetime.datetime.utcfromtimestamp`: använd ``datetime.datetime."
"fromtimestamp(timestamp, tz=datetime.UTC)``."

msgid ":mod:`gettext`: Plural value must be an integer."
msgstr ":mod:`gettext`: Pluralvärdet måste vara ett heltal."

msgid ""
":func:`~importlib.util.cache_from_source` *debug_override* parameter is "
"deprecated: use the *optimization* parameter instead."
msgstr ""
":func:`~importlib.util.cache_from_source` Parametern *debug_override* är "
"föråldrad: använd parametern *optimization* istället."

msgid ":mod:`importlib.metadata`:"
msgstr ":mod:`importlib.metadata`:"

msgid "``EntryPoints`` tuple interface."
msgstr "``EntryPoints`` tuple-gränssnitt."

msgid "Implicit ``None`` on return values."
msgstr "Implicit ``None`` på returvärden."

msgid ""
":mod:`logging`: the ``warn()`` method has been deprecated since Python 3.3, "
"use :meth:`~logging.warning` instead."
msgstr ""
":mod:`logging`: metoden ``warn()`` har utgått sedan Python 3.3, använd :meth:"
"`~logging.warning` istället."

msgid ""
":mod:`mailbox`: Use of StringIO input and text mode is deprecated, use "
"BytesIO and binary mode instead."
msgstr ""
":mod:`mailbox`: Användning av StringIO-ingång och textläge är föråldrad, "
"använd BytesIO och binärt läge istället."

msgid ""
":mod:`os`: Calling :func:`os.register_at_fork` in multi-threaded process."
msgstr ":mod:`os`: Anropar :func:`os.register_at_fork` i flertrådad process."

msgid ""
":class:`!pydoc.ErrorDuringImport`: A tuple value for *exc_info* parameter is "
"deprecated, use an exception instance."
msgstr ""
":class:`!pydoc.ErrorDuringImport`: Ett tupelvärde för parametern *exc_info* "
"är föråldrat, använd en undantagsinstans."

msgid ""
":mod:`re`: More strict rules are now applied for numerical group references "
"and group names in regular expressions.  Only sequence of ASCII digits is "
"now accepted as a numerical reference.  The group name in bytes patterns and "
"replacement strings can now only contain ASCII letters and digits and "
"underscore. (Contributed by Serhiy Storchaka in :gh:`91760`.)"
msgstr ""
":mod:`re`: Strängare regler tillämpas nu för numeriska gruppreferenser och "
"gruppnamn i reguljära uttryck.  Endast sekvenser av ASCII-siffror accepteras "
"nu som numeriska referenser.  Gruppnamnet i bytesmönster och "
"ersättningssträngar kan nu endast innehålla ASCII-bokstäver och siffror samt "
"understreck. (Bidrag från Serhiy Storchaka i :gh:`91760`.)"

msgid ""
":mod:`!sre_compile`, :mod:`!sre_constants` and :mod:`!sre_parse` modules."
msgstr ""
"modulerna :mod:`!sre_compile`, :mod:`!sre_constants` och :mod:`!sre_parse`."

msgid ""
":mod:`shutil`: :func:`~shutil.rmtree`'s *onerror* parameter is deprecated in "
"Python 3.12; use the *onexc* parameter instead."
msgstr ""
":mod:`shutil`: :func:`~shutil.rmtree`:s parameter *onerror* är föråldrad i "
"Python 3.12; använd istället parametern *onexc*."

msgid ":mod:`ssl` options and protocols:"
msgstr ":mod:`ssl` alternativ och protokoll:"

msgid ":class:`ssl.SSLContext` without protocol argument is deprecated."
msgstr ":class:`ssl.SSLContext` utan protokollargument är föråldrad."

msgid ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."
msgstr ""
":class:`ssl.SSLContext`: :meth:`~ssl.SSLContext.set_npn_protocols` and :meth:"
"`!selected_npn_protocol` are deprecated: use ALPN instead."

msgid "``ssl.OP_NO_SSL*`` options"
msgstr "``ssl.OP_NO_SSL*`` alternativ"

msgid "``ssl.OP_NO_TLS*`` options"
msgstr "``ssl.OP_NO_TLS*`` alternativ"

msgid "``ssl.PROTOCOL_SSLv3``"
msgstr "``ssl.PROTOCOL_SSLv3``"

msgid "``ssl.PROTOCOL_TLS``"
msgstr "``ssl.PROTOCOL_TLS``"

msgid "``ssl.PROTOCOL_TLSv1``"
msgstr "``ssl.PROTOCOL_TLSv1``"

msgid "``ssl.PROTOCOL_TLSv1_1``"
msgstr "``ssl.PROTOCOL_TLSv1_1``"

msgid "``ssl.PROTOCOL_TLSv1_2``"
msgstr "``ssl.PROTOCOL_TLSv1_2``"

msgid "``ssl.TLSVersion.SSLv3``"
msgstr "``ssl.TLSVersion.SSLv3``"

msgid "``ssl.TLSVersion.TLSv1``"
msgstr "``ssl.TLSVersion.TLSv1``"

msgid "``ssl.TLSVersion.TLSv1_1``"
msgstr "``ssl.TLSVersion.TLSv1_1``"

msgid ":mod:`threading` methods:"
msgstr ":mod:`threading` metoder:"

msgid ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."
msgstr ""
":meth:`!threading.Condition.notifyAll`: use :meth:`~threading.Condition."
"notify_all`."

msgid ":meth:`!threading.Event.isSet`: use :meth:`~threading.Event.is_set`."
msgstr ""
":meth:`!threading.Event.isSet`: använd :meth:`~threading.Event.is_set`."

msgid ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: use :"
"attr:`threading.Thread.daemon` attribute."
msgstr ""
":meth:`!threading.Thread.isDaemon`, :meth:`threading.Thread.setDaemon`: "
"använd attributet :attr:`threading.Thread.daemon`."

msgid ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: use :"
"attr:`threading.Thread.name` attribute."
msgstr ""
":meth:`!threading.Thread.getName`, :meth:`threading.Thread.setName`: använd "
"attributet :attr:`threading.Thread.name`."

msgid ":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."
msgstr ""
":meth:`!threading.currentThread`: use :meth:`threading.current_thread`."

msgid ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."
msgstr ":meth:`!threading.activeCount`: use :meth:`threading.active_count`."

msgid ":class:`typing.Text` (:gh:`92332`)."
msgstr ":class:`typing.Text` (:gh:`92332`)."

msgid ""
"The internal class ``typing._UnionGenericAlias`` is no longer used to "
"implement :class:`typing.Union`. To preserve compatibility with users using "
"this private class, a compatibility shim will be provided until at least "
"Python 3.17. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""
"Den interna klassen ``typing._UnionGenericAlias`` används inte längre för "
"att implementera :class:`typing.Union`. För att bevara kompatibiliteten med "
"användare som använder denna privata klass, kommer en kompatibilitets-shim "
"att tillhandahållas åtminstone fram till Python 3.17. (Bidrag från Jelle "
"Zijlstra i :gh:`105499`.)"

msgid ""
":class:`unittest.IsolatedAsyncioTestCase`: it is deprecated to return a "
"value that is not ``None`` from a test case."
msgstr ""
":class:`unittest.IsolatedAsyncioTestCase`: det är förkastligt att returnera "
"ett värde som inte är ``None`` från ett testfall."

msgid ""
":mod:`urllib.parse` deprecated functions: :func:`~urllib.parse.urlparse` "
"instead"
msgstr ""
":mod:`urllib.parse` föråldrade funktioner: :func:`~urllib.parse.urlparse` "
"istället"

msgid "``splitattr()``"
msgstr "``splitattr()``"

msgid "``splithost()``"
msgstr "``splithost()```"

msgid "``splitnport()``"
msgstr "``splitnport()``"

msgid "``splitpasswd()``"
msgstr "``splitpasswd()``"

msgid "``splitport()``"
msgstr "``splitport()```"

msgid "``splitquery()``"
msgstr "```splitquery()```"

msgid "``splittag()``"
msgstr "``splittag()``"

msgid "``splittype()``"
msgstr "```splittype()```"

msgid "``splituser()``"
msgstr "``splituser()```"

msgid "``splitvalue()``"
msgstr "``splitvärde()``"

msgid "``to_bytes()``"
msgstr "``to_bytes()```"

msgid ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` should not do partial "
"writes."
msgstr ""
":mod:`wsgiref`: ``SimpleHandler.stdout.write()`` bör inte göra partiella "
"skrivningar."

msgid ""
":mod:`xml.etree.ElementTree`: Testing the truth value of an :class:`~xml."
"etree.ElementTree.Element` is deprecated. In a future release it will always "
"return ``True``. Prefer explicit ``len(elem)`` or ``elem is not None`` tests "
"instead."
msgstr ""
":mod:`xml.etree.ElementTree`: Att testa sanningsvärdet för en :class:`~xml."
"etree.ElementTree.Element` är föråldrat. I en framtida version kommer det "
"alltid att returnera ``True``. Föredra istället explicita ``len(elem)`` "
"eller ``elem is not None`` tester."

msgid ""
":func:`sys._clear_type_cache` is deprecated: use :func:`sys."
"_clear_internal_caches` instead."
msgstr ""
":func:`sys._clear_type_cache` är föråldrad: använd :func:`sys."
"_clear_internal_caches` istället."

msgid "Removed"
msgstr "Borttagen"

msgid ""
"Remove the *type*, *choices*, and *metavar* parameters of :class:`!argparse."
"BooleanOptionalAction`. They were deprecated since 3.12."
msgstr ""
"Ta bort parametrarna *type*, *choices* och *metavar* i :class:`!argparse."
"BooleanOptionalAction`. De var föråldrade sedan 3.12."

msgid ""
"Calling :meth:`~argparse.ArgumentParser.add_argument_group` on an argument "
"group, and calling :meth:`~argparse.ArgumentParser.add_argument_group` or :"
"meth:`~argparse.ArgumentParser.add_mutually_exclusive_group` on a mutually "
"exclusive group now raise exceptions. This nesting was never supported, "
"often failed to work correctly, and was unintentionally exposed through "
"inheritance. This functionality has been deprecated since Python 3.11. "
"(Contributed by Savannah Ostrowski in :gh:`127186`.)"
msgstr ""
"Anrop av :meth:`~argparse.ArgumentParser.add_argument_group` på en "
"argumentgrupp och anrop av :meth:`~argparse.ArgumentParser."
"add_argument_group` eller :meth:`~argparse.ArgumentParser."
"add_mutually_exclusive_group` på en ömsesidigt exklusiv grupp ger nu upphov "
"till undantag. Denna nestning stöddes aldrig, fungerade ofta inte korrekt "
"och exponerades oavsiktligt genom arv. Denna funktionalitet har utgått sedan "
"Python 3.11. (Bidrag från Savannah Ostrowski i :gh:`127186`.)"

msgid ""
"Remove the following classes. They were all deprecated since Python 3.8, and "
"have emitted deprecation warnings since Python 3.12:"
msgstr ""
"Ta bort följande klasser. De var alla utfasade sedan Python 3.8 och har "
"skickat ut varningar om utfasning sedan Python 3.12:"

msgid ":class:`!ast.Bytes`"
msgstr ":class:`!ast.Bytes`"

msgid ":class:`!ast.Ellipsis`"
msgstr ":class:`!ast.Ellipsis`"

msgid ":class:`!ast.NameConstant`"
msgstr ":class:`!ast.NamnKonstant`"

msgid ":class:`!ast.Num`"
msgstr ":class:`!ast.Num`"

msgid ":class:`!ast.Str`"
msgstr ":class:`!ast.Str`"

msgid ""
"Use :class:`ast.Constant` instead. As a consequence of these removals, user-"
"defined ``visit_Num``, ``visit_Str``, ``visit_Bytes``, "
"``visit_NameConstant`` and ``visit_Ellipsis`` methods on custom :class:`ast."
"NodeVisitor` subclasses will no longer be called when the :class:`!"
"NodeVisitor` subclass is visiting an AST. Define a ``visit_Constant`` method "
"instead."
msgstr ""
"Använd :class:`ast.Constant` istället. Som en konsekvens av dessa "
"borttagningar kommer användardefinierade ``visit_Num``, ``visit_Str``, "
"``visit_Bytes``, ``visit_NameConstant`` och ``visit_Ellipsis`` metoder på "
"anpassade :class:`ast.NodeVisitor` subklasser inte längre att anropas när :"
"class:`!NodeVisitor` subklassen besöker en AST. Definiera en "
"``visit_Constant`` metod istället."

msgid ""
"Also, remove the following deprecated properties on :class:`ast.Constant`, "
"which were present for compatibility with the now-removed AST classes:"
msgstr ""
"Ta också bort följande föråldrade egenskaper på :class:`ast.Constant`, som "
"fanns för kompatibilitet med de nu borttagna AST-klasserna:"

msgid ":attr:`!ast.Constant.n`"
msgstr ":attr:`!ast.Constant.n`"

msgid ":attr:`!ast.Constant.s`"
msgstr ":attr:`!ast.Constant.s`"

msgid ""
"Use :attr:`!ast.Constant.value` instead. (Contributed by Alex Waygood in :gh:"
"`119562`.)"
msgstr ""
"Använd :attr:`!ast.Constant.value` istället. (Bidrag från Alex Waygood i :gh:"
"`119562`.)"

msgid ""
"Remove the following classes and functions. They were all deprecated and "
"emitted deprecation warnings since Python 3.12:"
msgstr ""
"Ta bort följande klasser och funktioner. De var alla föråldrade och gav ut "
"varningar om föråldring sedan Python 3.12:"

msgid ":func:`!asyncio.get_child_watcher`"
msgstr ":func:`!asyncio.get_child_watcher`"

msgid ":func:`!asyncio.set_child_watcher`"
msgstr ":func:`!asyncio.set_child_watcher`"

msgid ":meth:`!asyncio.AbstractEventLoopPolicy.get_child_watcher`"
msgstr ":meth:`!asyncio.AbstractEventLoopPolicy.get_child_watcher`"

msgid ":meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher`"
msgstr ":meth:`!asyncio.AbstractEventLoopPolicy.set_child_watcher`"

msgid ":class:`!asyncio.AbstractChildWatcher`"
msgstr ":class:`!asyncio.AbstractChildWatcher`"

msgid ":class:`!asyncio.FastChildWatcher`"
msgstr ":class:`!asyncio.FastChildWatcher`"

msgid ":class:`!asyncio.MultiLoopChildWatcher`"
msgstr ":class:`!asyncio.MultiLoopChildWatcher`"

msgid ":class:`!asyncio.PidfdChildWatcher`"
msgstr ":class:`!asyncio.PidfdChildWatcher`"

msgid ":class:`!asyncio.SafeChildWatcher`"
msgstr ":class:`!asyncio.SafeChildWatcher`"

msgid ":class:`!asyncio.ThreadedChildWatcher`"
msgstr ":class:`!asyncio.ThreadedChildWatcher`"

msgid "(Contributed by Kumar Aditya in :gh:`120804`.)"
msgstr "(Bidrag från Kumar Aditya i :gh:`120804`.)"

msgid ""
"Removed implicit creation of event loop by :func:`asyncio.get_event_loop`. "
"It now raises a :exc:`RuntimeError` if there is no current event loop. "
"(Contributed by Kumar Aditya in :gh:`126353`.)"
msgstr ""
"Tog bort implicit skapande av händelseslinga med :func:`asyncio."
"get_event_loop`. Den ger nu upphov till ett :exc:`RuntimeError` om det inte "
"finns någon aktuell händelseslinga. (Bidrag från Kumar Aditya i :gh:"
"`126353`.)"

msgid ""
"There's a few patterns that use :func:`asyncio.get_event_loop`, most of them "
"can be replaced with :func:`asyncio.run`."
msgstr ""
"Det finns några mönster som använder :func:`asyncio.get_event_loop`, de "
"flesta av dem kan ersättas med :func:`asyncio.run`."

msgid "If you're running an async function, simply use :func:`asyncio.run`."
msgstr ""
"Om du kör en asynkron funktion använder du helt enkelt :func:`asyncio.run`."

msgid "Before::"
msgstr "Före::"

msgid ""
"async def main():\n"
"    ...\n"
"\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(main())\n"
"finally:\n"
"    loop.close()"
msgstr ""
"async def main():\n"
"    ...\n"
"\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"försök:\n"
"    loop.run_until_complete(main())\n"
"slutligen:\n"
"    loop.close()"

msgid "After::"
msgstr "Efter::"

msgid ""
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main())"
msgstr ""
"async def main():\n"
"    ...\n"
"\n"
"asyncio.run(main())"

msgid ""
"If you need to start something, for example, a server listening on a socket "
"and then run forever, use :func:`asyncio.run` and an :class:`asyncio.Event`."
msgstr ""
"Om du behöver starta något, t.ex. en server som lyssnar på en socket och "
"sedan köra för evigt, använd :func:`asyncio.run` och en :class:`asyncio."
"Event`."

msgid ""
"def start_server(loop):\n"
"    ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    start_server(loop)\n"
"    loop.run_forever()\n"
"finally:\n"
"    loop.close()"
msgstr ""
"def start_server(loop):\n"
"    ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"försök:\n"
"    start_server(loop)\n"
"    loop.run_forever()\n"
"slutligen:\n"
"    loop.close()"

msgid ""
"def start_server(loop):\n"
"    ...\n"
"\n"
"async def main():\n"
"    start_server(asyncio.get_running_loop())\n"
"    await asyncio.Event().wait()\n"
"\n"
"asyncio.run(main())"
msgstr ""
"def start_server(loop):\n"
"    ...\n"
"\n"
"async def main():\n"
"    start_server(asyncio.get_running_loop())\n"
"    await asyncio.Event().wait()\n"
"\n"
"asyncio.run(main())"

msgid ""
"If you need to run something in an event loop, then run some blocking code "
"around it, use :class:`asyncio.Runner`."
msgstr ""
"Om du behöver köra något i en händelseslinga och sedan köra lite blockerande "
"kod runt det, använd :class:`asyncio.Runner`."

msgid ""
"async def operation_one():\n"
"    ...\n"
"\n"
"def blocking_code():\n"
"    ...\n"
"\n"
"async def operation_two():\n"
"    ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"try:\n"
"    loop.run_until_complete(operation_one())\n"
"    blocking_code()\n"
"    loop.run_until_complete(operation_two())\n"
"finally:\n"
"    loop.close()"
msgstr ""
"async def operation_one():\n"
"    ...\n"
"\n"
"def blocking_code():\n"
"    ...\n"
"\n"
"async def operation_two():\n"
"    ...\n"
"\n"
"loop = asyncio.get_event_loop()\n"
"försök:\n"
"    loop.run_until_complete(operation_one())\n"
"    blockering_kod()\n"
"    loop.run_until_complete(operation_two())\n"
"slutligen:\n"
"    loop.close()"

msgid ""
"async def operation_one():\n"
"    ...\n"
"\n"
"def blocking_code():\n"
"    ...\n"
"\n"
"async def operation_two():\n"
"    ...\n"
"\n"
"with asyncio.Runner() as runner:\n"
"    runner.run(operation_one())\n"
"    blocking_code()\n"
"    runner.run(operation_two())"
msgstr ""
"async def operation_one():\n"
"    ...\n"
"\n"
"def blocking_code():\n"
"    ...\n"
"\n"
"async def operation_two():\n"
"    ...\n"
"\n"
"med asyncio.Runner() som runner:\n"
"    runner.run(operation_one())\n"
"    blockerande_kod()\n"
"    runner.run(operation_two())"

msgid "collections.abc"
msgstr "samlingar.abc"

msgid ""
"Remove :class:`!collections.abc.ByteString`. It had previously raised a :exc:"
"`DeprecationWarning` since Python 3.12."
msgstr ""
"Ta bort :class:`!collections.abc.ByteString`. Den hade tidigare gett upphov "
"till en :exc:`DeprecationWarning` sedan Python 3.12."

msgid "email"
msgstr "e-post"

msgid ""
"Remove the *isdst* parameter from :func:`email.utils.localtime`. "
"(Contributed by Hugo van Kemenade in :gh:`118798`.)"
msgstr ""
"Ta bort parametern *isdst* från :func:`email.utils.localtime`. (Bidrag från "
"Hugo van Kemenade i :gh:`118798`.)"

msgid "importlib"
msgstr "importlib"

msgid "Remove deprecated :mod:`importlib.abc` classes:"
msgstr "Ta bort föråldrade :mod:`importlib.abc`-klasser:"

msgid ":class:`!importlib.abc.ResourceReader`"
msgstr ":class:`!importlib.abc.ResourceReader`"

msgid ":class:`!importlib.abc.Traversable`"
msgstr ":class:`!importlib.abc.Traversable`"

msgid ":class:`!importlib.abc.TraversableResources`"
msgstr ":class:`!importlib.abc.TraversableResources`"

msgid "Use :mod:`importlib.resources.abc` classes instead:"
msgstr "Använd :mod:`importlib.resources.abc`-klasser istället:"

msgid ":class:`importlib.resources.abc.Traversable`"
msgstr ":class:`importlib.resources.abc.Traversable`"

msgid ":class:`importlib.resources.abc.TraversableResources`"
msgstr ":class:`importlib.resources.abc.TraversableResources`"

msgid "(Contributed by Jason R. Coombs and Hugo van Kemenade in :gh:`93963`.)"
msgstr "(Bidrag från Jason R. Coombs och Hugo van Kemenade i :gh:`93963`.)"

msgid "itertools"
msgstr "itertools"

msgid ""
"Remove :mod:`itertools` support for copy, deepcopy, and pickle operations. "
"These had previously raised a :exc:`DeprecationWarning` since Python 3.12. "
"(Contributed by Raymond Hettinger in :gh:`101588`.)"
msgstr ""
"Ta bort :mod:`itertools` stöd för copy-, deepcopy- och pickle-operationer. "
"Dessa hade tidigare gett upphov till en :exc:`DeprecationWarning` sedan "
"Python 3.12. (Bidrag från Raymond Hettinger i :gh:`101588`.)"

msgid ""
"Remove support for passing additional keyword arguments to :class:`pathlib."
"Path`. In previous versions, any such arguments are ignored."
msgstr ""
"Ta bort stöd för att skicka ytterligare nyckelordsargument till :class:"
"`pathlib.Path`. I tidigare versioner ignoreras alla sådana argument."

msgid ""
"Remove support for passing additional positional arguments to :meth:`pathlib."
"PurePath.relative_to` and :meth:`~pathlib.PurePath.is_relative_to`. In "
"previous versions, any such arguments are joined onto *other*."
msgstr ""
"Ta bort stöd för att skicka ytterligare positionella argument till :meth:"
"`pathlib.PurePath.relative_to` och :meth:`~pathlib.PurePath.is_relative_to`. "
"I tidigare versioner är sådana argument sammanfogade med *other*."

msgid "pkgutil"
msgstr "pkgutil"

msgid ""
"Remove deprecated :func:`!pkgutil.get_loader` and :func:`!pkgutil."
"find_loader`. These had previously raised a :exc:`DeprecationWarning` since "
"Python 3.12. (Contributed by Bénédikt Tran in :gh:`97850`.)"
msgstr ""
"Ta bort föråldrade :func:`!pkgutil.get_loader` och :func:`!pkgutil."
"find_loader`. Dessa har tidigare gett upphov till en :exc:"
"`DeprecationWarning` sedan Python 3.12. (Bidrag från Bénédikt Tran i :gh:"
"`97850`.)"

msgid "pty"
msgstr "pty"

msgid ""
"Remove deprecated :func:`!pty.master_open` and :func:`!pty.slave_open`. They "
"had previously raised a :exc:`DeprecationWarning` since Python 3.12. Use :"
"func:`pty.openpty` instead. (Contributed by Nikita Sobolev in :gh:`118824`.)"
msgstr ""
"Ta bort föråldrade :func:`!pty.master_open` och :func:`!pty.slave_open`. De "
"har tidigare gett upphov till en :exc:`DeprecationWarning` sedan Python "
"3.12. Använd :func:`pty.openpty` istället. (Bidrag från Nikita Sobolev i :gh:"
"`118824`.)"

msgid "sqlite3"
msgstr "sqlite3"

msgid ""
"Remove :data:`!version` and :data:`!version_info` from :mod:`sqlite3`; use :"
"data:`~sqlite3.sqlite_version` and :data:`~sqlite3.sqlite_version_info` for "
"the actual version number of the runtime SQLite library. (Contributed by "
"Hugo van Kemenade in :gh:`118924`.)"
msgstr ""
"Ta bort :data:`!version` och :data:`!version_info` från :mod:`sqlite3`; "
"använd :data:`~sqlite3.sqlite_version` och :data:`~sqlite3."
"sqlite_version_info` för det faktiska versionsnumret för SQLite-biblioteket "
"under körning. (Bidrag från Hugo van Kemenade i :gh:`118924`.)"

msgid ""
"Disallow using a sequence of parameters with named placeholders. This had "
"previously raised a :exc:`DeprecationWarning` since Python 3.12; it will now "
"raise a :exc:`sqlite3.ProgrammingError`. (Contributed by Erlend E. Aasland "
"in :gh:`118928` and :gh:`101693`.)"
msgstr ""
"Tillåt inte att använda en sekvens av parametrar med namngivna platshållare. "
"Detta har tidigare gett upphov till en :exc:`DeprecationWarning` sedan "
"Python 3.12; det kommer nu att ge upphov till en :exc:`sqlite3."
"ProgrammingError`. (Bidrag från Erlend E. Aasland i :gh:`118928` och :gh:"
"`101693`.)"

msgid ""
"Remove :class:`!typing.ByteString`. It had previously raised a :exc:"
"`DeprecationWarning` since Python 3.12."
msgstr ""
"Ta bort :class:`!typing.ByteString`. Den hade tidigare gett upphov till en :"
"exc:`DeprecationWarning` sedan Python 3.12."

msgid ":class:`typing.TypeAliasType` now supports star unpacking."
msgstr ":class:`typing.TypeAliasType` stöder nu uppackning av stjärnor."

msgid ""
"Remove deprecated :class:`!Quoter` class from :mod:`urllib.parse`. It had "
"previously raised a :exc:`DeprecationWarning` since Python 3.11. "
"(Contributed by Nikita Sobolev in :gh:`118827`.)"
msgstr ""
"Ta bort den föråldrade :class:`!Quoter`-klassen från :mod:`urllib.parse`. "
"Den hade tidigare gett upphov till en :exc:`DeprecationWarning` sedan Python "
"3.11. (Bidrag från Nikita Sobolev i :gh:`118827`.)"

msgid ""
"Remove deprecated :class:`!URLopener` and :class:`!FancyURLopener` classes "
"from :mod:`urllib.request`. They had previously raised a :exc:"
"`DeprecationWarning` since Python 3.3."
msgstr ""
"Ta bort de föråldrade klasserna :class:`!URLopener` och :class:`!"
"FancyURLopener` från :mod:`urllib.request`. De har tidigare gett upphov till "
"en :exc:`DeprecationWarning` sedan Python 3.3."

msgid ""
"``myopener.open()`` can be replaced with :func:`~urllib.request.urlopen`, "
"and ``myopener.retrieve()`` can be replaced with :func:`~urllib.request."
"urlretrieve`. Customizations to the opener classes can be replaced by "
"passing customized handlers to :func:`~urllib.request.build_opener`. "
"(Contributed by Barney Gale in :gh:`84850`.)"
msgstr ""
"``myopener.open()`` kan ersättas med :func:`~urllib.request.urlopen`, och "
"``myopener.retrieve()`` kan ersättas med :func:`~urllib.request."
"urlretrieve`. Anpassningar till öppningsklasserna kan ersättas genom att "
"skicka anpassade hanterare till :func:`~urllib.request.build_opener`. "
"(Bidrag från Barney Gale i :gh:`84850`.)"

msgid "Others"
msgstr "Andra"

msgid ""
"Using :data:`NotImplemented` in a boolean context will now raise a :exc:"
"`TypeError`. It had previously raised a :exc:`DeprecationWarning` since "
"Python 3.9. (Contributed by Jelle Zijlstra in :gh:`118767`.)"
msgstr ""
"Att använda :data:`NotImplemented` i en boolesk kontext kommer nu att ge "
"upphov till ett :exc:`TypeError`. Det har tidigare gett upphov till en :exc:"
"`DeprecationWarning` sedan Python 3.9. (Bidrag från Jelle Zijlstra i :gh:"
"`118767`.)"

msgid ""
"The :func:`int` built-in no longer delegates to :meth:`~object.__trunc__`. "
"Classes that want to support conversion to integer must implement either :"
"meth:`~object.__int__` or :meth:`~object.__index__`. (Contributed by Mark "
"Dickinson in :gh:`119743`.)"
msgstr ""
"Den inbyggda :func:`int` delegerar inte längre till :meth:`~object."
"__trunc__`. Klasser som vill stödja konvertering till heltal måste "
"implementera antingen :meth:`~object.__int__` eller :meth:`~object."
"__index__`. (Bidrag från Mark Dickinson i :gh:`119743`.)"

msgid "CPython bytecode changes"
msgstr "CPython bytecode-ändringar"

msgid ""
"Replaced the opcode ``BINARY_SUBSCR`` by :opcode:`BINARY_OP` with oparg "
"``NB_SUBSCR``. (Contributed by Irit Katriel in :gh:`100239`.)"
msgstr ""
"Ersatte opcode ``BINARY_SUBSCR`` med :opcode:`BINARY_OP` med oparg "
"``NB_SUBSCR``. (Bidrag från Irit Katriel i :gh:`100239`.)"

msgid "Porting to Python 3.14"
msgstr "Portning till Python 3.14"

msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"I det här avsnittet listas tidigare beskrivna ändringar och andra buggfixar "
"som kan kräva ändringar i din kod."

msgid "Changes in the Python API"
msgstr "Ändringar i Python API"

msgid ""
":class:`functools.partial` is now a method descriptor. Wrap it in :func:"
"`staticmethod` if you want to preserve the old behavior. (Contributed by "
"Serhiy Storchaka and Dominykas Grigonis in :gh:`121027`.)"
msgstr ""
":class:`functools.partial` är nu en metoddeskriptor. Packa in den i :func:"
"`staticmethod` om du vill bevara det gamla beteendet. (Bidrag från Serhiy "
"Storchaka och Dominykas Grigonis i :gh:`121027`.)"

msgid ""
"The :ref:`garbage collector is now incremental <whatsnew314-incremental-"
"gc>`, which means that the behavior of :func:`gc.collect` changes slightly:"
msgstr ""
":ref:`Garbage collector är nu inkrementell <whatsnew314-incremental-gc>`, "
"vilket innebär att beteendet hos :func:`gc.collect` ändras något:"

msgid ""
"The :func:`locale.nl_langinfo` function now sets temporarily the "
"``LC_CTYPE`` locale in some cases. This temporary change affects other "
"threads. (Contributed by Serhiy Storchaka in :gh:`69998`.)"
msgstr ""
"Funktionen :func:`locale.nl_langinfo` ställer nu temporärt in ``LC_CTYPE`` "
"locale i vissa fall. Denna temporära ändring påverkar andra trådar. (Bidrag "
"från Serhiy Storchaka i :gh:`69998`.)"

msgid ""
":class:`types.UnionType` is now an alias for :class:`typing.Union`, causing "
"changes in some behaviors. See :ref:`above <whatsnew314-typing-union>` for "
"more details. (Contributed by Jelle Zijlstra in :gh:`105499`.)"
msgstr ""
":class:`types.UnionType` är nu ett alias för :class:`typing.Union`, vilket "
"orsakar förändringar i vissa beteenden. Se :ref:``above <whatsnew314-typing-"
"union>`` för mer information. (Bidrag från Jelle Zijlstra i :gh:`105499`.)"

msgid ""
"The runtime behavior of annotations has changed in various ways; see :ref:"
"`above <whatsnew314-pep649>` for details. While most code that interacts "
"with annotations should continue to work, some undocumented details may "
"behave differently."
msgstr ""
"Körtidsbeteendet för annoteringar har ändrats på olika sätt; se :ref:`över "
"<whatsnew314-pep649>` för detaljer. Även om den mesta kod som interagerar "
"med annotationer bör fortsätta att fungera, kan vissa odokumenterade "
"detaljer bete sig annorlunda."

msgid "Build changes"
msgstr "Förändringar i byggnaden"

msgid ""
"GNU Autoconf 2.72 is now required to generate :file:`configure`. "
"(Contributed by Erlend Aasland in :gh:`115765`.)"
msgstr ""
"GNU Autoconf 2.72 krävs nu för att generera :file:`configure`. (Bidrag från "
"Erlend Aasland i :gh:`115765`.)"

msgid ""
"``#pragma``-based linking with ``python3*.lib`` can now be switched off "
"with :c:expr:`Py_NO_LINK_LIB`. (Contributed by Jean-Christophe Fillion-Robin "
"in :gh:`82909`.)"
msgstr ""
"``#pragma``-baserad länkning med ``python3*.lib`` kan nu stängas av med :c:"
"expr:`Py_NO_LINK_LIB`. (Bidrag från Jean-Christophe Fillion-Robin i :gh:"
"`82909`.)"

msgid "PEP 761: Discontinuation of PGP signatures"
msgstr "PEP 761: Avveckling av PGP-signaturer"

msgid ""
"PGP signatures will not be available for CPython 3.14 and onwards. Users "
"verifying artifacts must use `Sigstore verification materials`_ for "
"verifying CPython artifacts. This change in release process is specified in :"
"pep:`761`."
msgstr ""
"PGP-signaturer kommer inte att vara tillgängliga för CPython 3.14 och "
"framåt. Användare som verifierar artefakter måste använda `Sigstore "
"verifieringsmaterial`_ för att verifiera CPython-artefakter. Denna "
"förändring i utgivningsprocessen specificeras i :pep:`761`."

msgid "C API changes"
msgstr "C API-ändringar"

msgid ""
"Add :c:func:`PyLong_GetSign` function to get the sign of :class:`int` "
"objects. (Contributed by Sergey B Kirpichev in :gh:`116560`.)"
msgstr ""
"Lägg till :c:func:`PyLong_GetSign`-funktionen för att få tecknet på :class:"
"`int`-objekt. (Bidrag från Sergey B Kirpichev i :gh:`116560`.)"

msgid ""
"Add a new :c:type:`PyUnicodeWriter` API to create a Python :class:`str` "
"object:"
msgstr ""
"Lägg till ett nytt :c:type:`PyUnicodeWriter` API för att skapa ett Python :"
"class:`str` objekt:"

msgid ":c:func:`PyUnicodeWriter_Create`"
msgstr ":c:func:`PyUnicodeWriter_Create`"

msgid ":c:func:`PyUnicodeWriter_DecodeUTF8Stateful`"
msgstr ":c:func:`PyUnicodeWriter_DecodeUTF8Stateful`"

msgid ":c:func:`PyUnicodeWriter_Discard`"
msgstr ":c:func:`PyUnicodeWriter_Discard`"

msgid ":c:func:`PyUnicodeWriter_Finish`"
msgstr ":c:func:`PyUnicodeWriter_Finish`"

msgid ":c:func:`PyUnicodeWriter_Format`"
msgstr ":c:func:`PyUnicodeWriter_Format`"

msgid ":c:func:`PyUnicodeWriter_WriteASCII`"
msgstr ":c:func:`PyUnicodeWriter_WriteASCII`"

msgid ":c:func:`PyUnicodeWriter_WriteChar`"
msgstr ":c:func:`PyUnicodeWriter_WriteChar`"

msgid ":c:func:`PyUnicodeWriter_WriteRepr`"
msgstr ":c:func:`PyUnicodeWriter_WriteRepr`"

msgid ":c:func:`PyUnicodeWriter_WriteStr`"
msgstr ":c:func:`PyUnicodeWriter_WriteStr`"

msgid ":c:func:`PyUnicodeWriter_WriteSubstring`"
msgstr ":c:func:`PyUnicodeWriter_WriteSubstring`"

msgid ":c:func:`PyUnicodeWriter_WriteUCS4`"
msgstr ":c:func:`PyUnicodeWriter_WriteUCS4`"

msgid ":c:func:`PyUnicodeWriter_WriteUTF8`"
msgstr ":c:func:`PyUnicodeWriter_WriteUTF8`"

msgid ":c:func:`PyUnicodeWriter_WriteWideChar`"
msgstr ":c:func:`PyUnicodeWriter_WriteWideChar`"

msgid "(Contributed by Victor Stinner in :gh:`119182`.)"
msgstr "(Bidrag från Victor Stinner i :gh:`119182`.)"

msgid ""
"Add :c:func:`PyIter_NextItem` to replace :c:func:`PyIter_Next`, which has an "
"ambiguous return value. (Contributed by Irit Katriel and Erlend Aasland in :"
"gh:`105201`.)"
msgstr ""
"Lägg till :c:func:`PyIter_NextItem` för att ersätta :c:func:`PyIter_Next`, "
"som har ett tvetydigt returvärde. (Bidrag från Irit Katriel och Erlend "
"Aasland i :gh:`105201`.)"

msgid ""
"Add :c:func:`PyLong_IsPositive`, :c:func:`PyLong_IsNegative` and :c:func:"
"`PyLong_IsZero` for checking if :c:type:`PyLongObject` is positive, "
"negative, or zero, respectively. (Contributed by James Roy and Sergey B "
"Kirpichev in :gh:`126061`.)"
msgstr ""
"Lägg till :c:func:`PyLong_IsPositive`, :c:func:`PyLong_IsNegative` och :c:"
"func:`PyLong_IsZero` för att kontrollera om :c:type:`PyLongObject` är "
"positivt, negativt respektive noll. (Bidrag från James Roy och Sergey B "
"Kirpichev i :gh:`126061`.)"

msgid ""
"Add new functions to convert C ``<stdint.h>`` numbers from/to Python :class:"
"`int`:"
msgstr ""
"Lägg till nya funktioner för att konvertera C ``<stdint.h>``-tal från/till "
"Python :class:`int`:"

msgid ":c:func:`PyLong_AsInt32`"
msgstr ":c:func:`PyLong_AsInt32`"

msgid ":c:func:`PyLong_AsInt64`"
msgstr ":c:func:`PyLong_AsInt64`"

msgid ":c:func:`PyLong_AsUInt32`"
msgstr ":c:func:`PyLong_AsUInt32`"

msgid ":c:func:`PyLong_AsUInt64`"
msgstr ":c:func:`PyLong_AsUInt64`"

msgid ":c:func:`PyLong_FromInt32`"
msgstr ":c:func:`PyLong_FromInt32`"

msgid ":c:func:`PyLong_FromInt64`"
msgstr ":c:func:`PyLong_FrånInt64`"

msgid ":c:func:`PyLong_FromUInt32`"
msgstr ":c:func:`PyLong_FromUInt32`"

msgid ":c:func:`PyLong_FromUInt64`"
msgstr ":c:func:`PyLong_FromUInt64`"

msgid "(Contributed by Victor Stinner in :gh:`120389`.)"
msgstr "(Bidrag från Victor Stinner i :gh:`120389`.)"

msgid ""
"Add :c:func:`PyBytes_Join(sep, iterable) <PyBytes_Join>` function, similar "
"to ``sep.join(iterable)`` in Python. (Contributed by Victor Stinner in :gh:"
"`121645`.)"
msgstr ""
"Lägg till :c:func:`PyBytes_Join(sep, iterable) <PyBytes_Join>` funktion, "
"liknande ``sep.join(iterable)`` i Python. (Bidrag från Victor Stinner i :gh:"
"`121645`.)"

msgid ""
"Add :c:func:`Py_HashBuffer` to compute and return the hash value of a "
"buffer. (Contributed by Antoine Pitrou and Victor Stinner in :gh:`122854`.)"
msgstr ""
"Lägg till :c:func:`Py_HashBuffer` för att beräkna och returnera hashvärdet "
"för en buffert. (Bidrag från Antoine Pitrou och Victor Stinner i :gh:"
"`122854`.)"

msgid ""
"Add functions to get and set the current runtime Python configuration (:pep:"
"`741`):"
msgstr ""
"Lägg till funktioner för att hämta och ställa in den aktuella Python-"
"konfigurationen för körtid (:pep:`741`):"

msgid ":c:func:`PyConfig_Get`"
msgstr ":c:func:`PyConfig_Get`"

msgid ":c:func:`PyConfig_GetInt`"
msgstr ":c:func:`PyConfig_GetInt`"

msgid ":c:func:`PyConfig_Set`"
msgstr ":c:func:`PyConfig_Set`"

msgid ":c:func:`PyConfig_Names`"
msgstr ":c:func:`PyConfig_Names`"

msgid "Add functions to configure the Python initialization (:pep:`741`):"
msgstr ""
"Lägg till funktioner för att konfigurera Python-initialiseringen (:pep:"
"`741`):"

msgid ":c:func:`Py_InitializeFromInitConfig`"
msgstr ":c:func:`Py_InitializeFromInitConfig`"

msgid ":c:func:`PyInitConfig_AddModule`"
msgstr ":c:func:`PyInitConfig_AddModule`"

msgid ":c:func:`PyInitConfig_Create`"
msgstr ":c:func:`PyInitConfig_Create`"

msgid ":c:func:`PyInitConfig_Free`"
msgstr ":c:func:`PyInitConfig_Free`"

msgid ":c:func:`PyInitConfig_FreeStrList`"
msgstr ":c:func:`PyInitConfig_FreeStrList`"

msgid ":c:func:`PyInitConfig_GetError`"
msgstr ":c:func:`PyInitConfig_GetError`"

msgid ":c:func:`PyInitConfig_GetExitCode`"
msgstr ":c:func:`PyInitConfig_GetExitCode`"

msgid ":c:func:`PyInitConfig_GetInt`"
msgstr ":c:func:`PyInitConfig_GetInt`"

msgid ":c:func:`PyInitConfig_GetStr`"
msgstr ":c:func:`PyInitConfig_GetStr`"

msgid ":c:func:`PyInitConfig_GetStrList`"
msgstr ":c:func:`PyInitConfig_GetStrList`"

msgid ":c:func:`PyInitConfig_HasOption`"
msgstr ":c:func:`PyInitConfig_HasOption`"

msgid ":c:func:`PyInitConfig_SetInt`"
msgstr ":c:func:`PyInitConfig_SetInt`"

msgid ":c:func:`PyInitConfig_SetStr`"
msgstr ":c:func:`PyInitConfig_SetStr`"

msgid ":c:func:`PyInitConfig_SetStrList`"
msgstr ":c:func:`PyInitConfig_SetStrList`"

msgid ""
"Add a new import and export API for Python :class:`int` objects (:pep:`757`):"
msgstr ""
"Lägg till ett nytt import- och export-API för Python :class:`int`-objekt (:"
"pep:`757`):"

msgid ":c:func:`PyLong_GetNativeLayout`"
msgstr ":c:func:`PyLong_GetNativeLayout`"

msgid ":c:func:`PyLong_Export`"
msgstr ":c:func:`PyLong_Export`"

msgid ":c:func:`PyLong_FreeExport`"
msgstr ":c:func:`PyLong_FreeExport`"

msgid ":c:func:`PyLongWriter_Create`"
msgstr ":c:func:`PyLongWriter_Create`"

msgid ":c:func:`PyLongWriter_Finish`"
msgstr ":c:func:`PyLongWriter_Finish`"

msgid ":c:func:`PyLongWriter_Discard`"
msgstr ":c:func:`PyLongWriter_Discard`"

msgid "(Contributed by Sergey B Kirpichev and Victor Stinner in :gh:`102471`.)"
msgstr "(Bidrag från Sergey B Kirpichev och Victor Stinner i :gh:`102471`.)"

msgid ""
"Add :c:func:`PyType_GetBaseByToken` and :c:data:`Py_tp_token` slot for "
"easier superclass identification, which attempts to resolve the `type "
"checking issue <https://peps.python.org/pep-0630/#type-checking>`__ "
"mentioned in :pep:`630`. (Contributed in :gh:`124153`.)"
msgstr ""
"Lägg till :c:func:`PyType_GetBaseByToken` och :c:data:`Py_tp_token` slot för "
"enklare identifiering av superklass, vilket försöker lösa "
"`typkontrollproblemet <https://peps.python.org/pep-0630/#type-checking>`__ "
"som nämns i :pep:`630`. (Bidrag i :gh:`124153`.)"

msgid ""
"Add :c:func:`PyUnicode_Equal` function to the limited C API: test if two "
"strings are equal. (Contributed by Victor Stinner in :gh:`124502`.)"
msgstr ""
"Lägg till :c:func:`PyUnicode_Equal`-funktionen till det begränsade C API:et: "
"testa om två strängar är lika. (Bidrag från Victor Stinner i :gh:`124502`.)"

msgid ""
"Add :c:func:`PyType_Freeze` function to make a type immutable. (Contributed "
"by Victor Stinner in :gh:`121654`.)"
msgstr ""
"Lägg till :c:func:`PyType_Freeze`-funktionen för att göra en typ "
"oföränderlig. (Bidrag från Victor Stinner i :gh:`121654`.)"

msgid ""
"Add :c:func:`PyUnstable_Object_EnableDeferredRefcount` for enabling deferred "
"reference counting, as outlined in :pep:`703`."
msgstr ""
"Lägg till :c:func:`PyUnstable_Object_EnableDeferredRefcount` för att "
"aktivera uppskjuten referensräkning, enligt beskrivningen i :pep:`703`."

msgid ""
"Add :c:func:`PyMonitoring_FireBranchLeftEvent` and :c:func:"
"`PyMonitoring_FireBranchRightEvent` for generating :monitoring-event:"
"`BRANCH_LEFT` and :monitoring-event:`BRANCH_RIGHT` events, respectively."
msgstr ""
"Lägg till :c:func:`PyMonitoring_FireBranchLeftEvent` och :c:func:"
"`PyMonitoring_FireBranchRightEvent` för att generera händelserna :monitoring-"
"event:`BRANCH_LEFT` respektive :monitoring-event:`BRANCH_RIGHT`."

msgid ""
"Add :c:func:`Py_fopen` function to open a file. Similar to the :c:func:`!"
"fopen` function, but the *path* parameter is a Python object and an "
"exception is set on error. Add also :c:func:`Py_fclose` function to close a "
"file. (Contributed by Victor Stinner in :gh:`127350`.)"
msgstr ""
"Lägg till funktionen :c:func:`Py_fopen` för att öppna en fil. Liknar "
"funktionen :c:func:`!fopen`, men parametern *path* är ett Python-objekt och "
"ett undantag sätts vid fel. Lägg även till funktionen :c:func:`Py_fclose` "
"för att stänga en fil. (Bidrag från Victor Stinner i :gh:`127350`.)"

msgid ""
"The ``k`` and ``K`` formats in :c:func:`PyArg_ParseTuple` and similar "
"functions now use :meth:`~object.__index__` if available, like all other "
"integer formats. (Contributed by Serhiy Storchaka in :gh:`112068`.)"
msgstr ""
"Formaten ``k`` och ``K`` i :c:func:`PyArg_ParseTuple` och liknande "
"funktioner använder nu :meth:`~object.__index__` om det finns tillgängligt, "
"precis som alla andra heltalsformat. (Bidrag från Serhiy Storchaka i :gh:"
"`112068`.)"

msgid ""
"Add macros :c:func:`Py_PACK_VERSION` and :c:func:`Py_PACK_FULL_VERSION` for "
"bit-packing Python version numbers. (Contributed by Petr Viktorin in :gh:"
"`128629`.)"
msgstr ""
"Lägg till makron :c:func:`Py_PACK_VERSION` och :c:func:"
"`Py_PACK_FULL_VERSION` för bit-packning av Pythons versionsnummer. (Bidrag "
"från Petr Viktorin i :gh:`128629`.)"

msgid ""
"Add :c:func:`PyUnstable_IsImmortal` for determining whether an object is :"
"term:`immortal`, for debugging purposes."
msgstr ""
"Lägg till :c:func:`PyUnstable_IsImmortal` för att avgöra om ett objekt är :"
"term:`immortal`, för felsökningsändamål."

msgid ""
"Add :c:func:`PyImport_ImportModuleAttr` and :c:func:"
"`PyImport_ImportModuleAttrString` helper functions to import a module and "
"get an attribute of the module. (Contributed by Victor Stinner in :gh:"
"`128911`.)"
msgstr ""
"Lägg till hjälpfunktionerna :c:func:`PyImport_ImportModuleAttr` och :c:func:"
"`PyImport_ImportModuleAttrString` för att importera en modul och hämta ett "
"attribut för modulen. (Bidrag från Victor Stinner i :gh:`128911`.)"

msgid ""
"Add support for a new ``p`` format unit in :c:func:`Py_BuildValue` that "
"allows to take a C integer and produce a Python :class:`bool` object. "
"(Contributed by Pablo Galindo in :issue:`45325`.)"
msgstr ""
"Lägg till stöd för en ny ``p``-formatenhet i :c:func:`Py_BuildValue` som gör "
"det möjligt att ta ett heltal i C och producera ett Python :class:`bool`-"
"objekt. (Bidrag från Pablo Galindo i :issue:`45325`.)"

msgid ""
"Add :c:func:`PyUnstable_Object_IsUniqueReferencedTemporary` to determine if "
"an object is a unique temporary object on the interpreter's operand stack. "
"This can be used in some cases as a replacement for checking if :c:func:"
"`Py_REFCNT` is ``1`` for Python objects passed as arguments to C API "
"functions."
msgstr ""
"Lägg till :c:func:`PyUnstable_Object_IsUniqueReferencedTemporary` för att "
"avgöra om ett objekt är ett unikt temporärt objekt på tolkens operandstack. "
"Detta kan i vissa fall användas som en ersättning för att kontrollera om :c:"
"func:`Py_REFCNT` är ``1`` för Python-objekt som skickas som argument till C "
"API-funktioner."

msgid ""
"Add :c:func:`PyUnstable_Object_IsUniquelyReferenced` as a replacement for "
"``Py_REFCNT(op) == 1`` on :term:`free threaded <free threading>` builds. "
"(Contributed by Peter Bierma in :gh:`133140`.)"
msgstr ""
"Lägg till :c:func:`PyUnstable_Object_IsUniquelyReferenced` som ersättning "
"för ``Py_REFCNT(op) == 1`` på :term:`free threaded <free threading>`-byggen. "
"(Bidrag från Peter Bierma i :gh:`133140`.)"

msgid "Limited C API changes"
msgstr "Begränsade C API-ändringar"

msgid ""
"In the limited C API 3.14 and newer, :c:func:`Py_TYPE` and :c:func:"
"`Py_REFCNT` are now implemented as an opaque function call to hide "
"implementation details. (Contributed by Victor Stinner in :gh:`120600` and :"
"gh:`124127`.)"
msgstr ""
"I det begränsade C API:et 3.14 och senare implementeras nu :c:func:`Py_TYPE` "
"och :c:func:`Py_REFCNT` som ett opakt funktionsanrop för att dölja "
"implementationsdetaljer. (Bidrag från Victor Stinner i :gh:`120600` och :gh:"
"`124127`.)"

msgid ""
"Remove the :c:macro:`PySequence_Fast_GET_SIZE`, :c:macro:"
"`PySequence_Fast_GET_ITEM` and :c:macro:`PySequence_Fast_ITEMS` macros from "
"the limited C API, since these macros never worked in the limited C API. "
"Keep :c:func:`PySequence_Fast` in the limited C API. (Contributed by Victor "
"Stinner in :gh:`91417`.)"
msgstr ""
"Ta bort makron :c:macro:`PySequence_Fast_GET_SIZE`, :c:macro:"
"`PySequence_Fast_GET_ITEM` och :c:macro:`PySequence_Fast_ITEMS` från det "
"begränsade C API:et, eftersom dessa makron aldrig fungerade i det begränsade "
"C API:et. Behåll :c:func:`PySequence_Fast` i det begränsade C API:et. "
"(Bidrag från Victor Stinner i :gh:`91417`.)"

msgid ""
":c:func:`Py_Finalize` now deletes all interned strings. This is backwards "
"incompatible to any C-Extension that holds onto an interned string after a "
"call to :c:func:`Py_Finalize` and is then reused after a call to :c:func:"
"`Py_Initialize`.  Any issues arising from this behavior will normally result "
"in crashes during the execution of the subsequent call to :c:func:"
"`Py_Initialize` from accessing uninitialized memory. To fix, use an address "
"sanitizer to identify any use-after-free coming from an interned string and "
"deallocate it during module shutdown. (Contributed by Eddie Elizondo in :gh:"
"`113601`.)"
msgstr ""
":c:func:`Py_Finalize` raderar nu alla internaliserade strängar. Detta är "
"bakåtkompatibelt med alla C-extensioner som behåller en internerad sträng "
"efter ett anrop till :c:func:`Py_Finalize` och som sedan återanvänds efter "
"ett anrop till :c:func:`Py_Initialize`.  Eventuella problem som uppstår på "
"grund av detta beteende kommer normalt att leda till krascher under "
"exekveringen av det efterföljande anropet till :c:func:`Py_Initialize` på "
"grund av åtkomst till oinitialiserat minne. För att åtgärda detta, använd en "
"adressrensare för att identifiera eventuella use-after-free som kommer från "
"en internerad sträng och avallokera den under modulavstängning. (Bidrag från "
"Eddie Elizondo i :gh:`113601`.)"

msgid ""
"The :ref:`Unicode Exception Objects <unicodeexceptions>` C API now raises a :"
"exc:`TypeError` if its exception argument is not a :exc:`UnicodeError` "
"object. (Contributed by Bénédikt Tran in :gh:`127691`.)"
msgstr ""
"C API:t :ref:`Unicode Exception Objects <unicodeexceptions>` ger nu upphov "
"till ett :exc:`TypeError` om dess undantagsargument inte är ett :exc:"
"`UnicodeError`-objekt. (Bidrag från Bénédikt Tran i :gh:`127691`.)"

msgid ""
"The interpreter internally avoids some reference count modifications when "
"loading objects onto the operands stack by :term:`borrowing <borrowed "
"reference>` references when possible. This can lead to smaller reference "
"count values compared to previous Python versions. C API extensions that "
"checked :c:func:`Py_REFCNT` of ``1`` to determine if an function argument is "
"not referenced by any other code should instead use :c:func:"
"`PyUnstable_Object_IsUniqueReferencedTemporary` as a safer replacement."
msgstr ""
"Tolken undviker internt vissa ändringar av referensantalet när objekt laddas "
"i operandstacken genom att :term:`låna <borrowed reference>` referenser när "
"det är möjligt. Detta kan leda till mindre referensräkningsvärden jämfört "
"med tidigare Python-versioner. C API-tillägg som kontrollerade :c:func:"
"`Py_REFCNT` av ``1`` för att avgöra om ett funktionsargument inte refereras "
"av någon annan kod bör istället använda :c:func:"
"`PyUnstable_Object_IsUniqueReferencedTemporary` som en säkrare ersättning."

msgid "Private functions promoted to public C APIs:"
msgstr "Privata funktioner lyfts upp till publika C API:er:"

msgid "``_PyBytes_Join()``: :c:func:`PyBytes_Join`"
msgstr "``_PyBytes_Join()``: :c:func:`PyBytes_Join`"

msgid "``_PyLong_IsNegative()``: :c:func:`PyLong_IsNegative`"
msgstr "``_PyLong_IsNegative()``: :c:func:`PyLong_IsNegative`"

msgid "``_PyLong_IsPositive()``: :c:func:`PyLong_IsPositive`"
msgstr "``_PyLong_IsPositive()``: :c:func:`PyLong_IsPositive`"

msgid "``_PyLong_IsZero()``: :c:func:`PyLong_IsZero`"
msgstr "``_PyLong_IsZero()``: :c:func:`PyLong_IsZero`"

msgid "``_PyLong_Sign()``: :c:func:`PyLong_GetSign`"
msgstr "``_PyLong_Sign()``: :c:func:`PyLong_GetSign`"

msgid "``_PyUnicodeWriter_Dealloc()``: :c:func:`PyUnicodeWriter_Discard`"
msgstr "``_PyUnicodeWriter_Dealloc()``: :c:func:`PyUnicodeWriter_Discard`"

msgid "``_PyUnicodeWriter_Finish()``: :c:func:`PyUnicodeWriter_Finish`"
msgstr "``_PyUnicodeWriter_Finish()``: :c:func:`PyUnicodeWriter_Finish`"

msgid "``_PyUnicodeWriter_Init()``: use :c:func:`PyUnicodeWriter_Create`"
msgstr "``_PyUnicodeWriter_Init()``: use :c:func:`PyUnicodeWriter_Create`"

msgid "``_PyUnicodeWriter_Prepare()``: (no replacement)"
msgstr "``_PyUnicodeWriter_Prepare()``: (ingen ersättning)"

msgid "``_PyUnicodeWriter_PrepareKind()``: (no replacement)"
msgstr "``_PyUnicodeWriter_PrepareKind()``: (ingen ersättning)"

msgid "``_PyUnicodeWriter_WriteChar()``: :c:func:`PyUnicodeWriter_WriteChar`"
msgstr "``_PyUnicodeWriter_WriteChar()``: :c:func:`PyUnicodeWriter_WriteChar`"

msgid "``_PyUnicodeWriter_WriteStr()``: :c:func:`PyUnicodeWriter_WriteStr`"
msgstr "``_PyUnicodeWriter_WriteStr()``: :c:func:`PyUnicodeWriter_WriteStr`"

msgid ""
"``_PyUnicodeWriter_WriteSubstring()``: :c:func:"
"`PyUnicodeWriter_WriteSubstring`"
msgstr ""
"``_PyUnicodeWriter_WriteSubstring()``: :c:func:"
"`PyUnicodeWriter_WriteSubstring`"

msgid "``_PyUnicode_EQ()``: :c:func:`PyUnicode_Equal`"
msgstr "``_PyUnicode_EQ()``: :c:func:`PyUnicode_Equal`"

msgid "``_PyUnicode_Equal()``: :c:func:`PyUnicode_Equal`"
msgstr "``_PyUnicode_Equal()``: :c:func:`PyUnicode_Equal`"

msgid ""
"``_Py_GetConfig()``: :c:func:`PyConfig_Get` and :c:func:`PyConfig_GetInt`"
msgstr ""
"``_Py_GetConfig()``: :c:func:`PyConfig_Get` och :c:func:`PyConfig_GetInt`"

msgid "``_Py_HashBytes()``: :c:func:`Py_HashBuffer`"
msgstr "``_Py_HashBytes()``: :c:func:`Py_HashBuffer`"

msgid "``_Py_fopen_obj()``: :c:func:`Py_fopen`"
msgstr "``_Py_fopen_obj()``: :c:func:`Py_fopen`"

msgid "``PyMutex_IsLocked()`` : :c:func:`PyMutex_IsLocked`"
msgstr "``PyMutex_IsLocked()`` : :c:func:`PyMutex_IsLocked`"

msgid ""
"The `pythoncapi-compat project`_ can be used to get most of these new "
"functions on Python 3.13 and older."
msgstr ""
"Projektet `pythoncapi-compat`_ kan användas för att få de flesta av dessa "
"nya funktioner på Python 3.13 och äldre."

msgid ""
"The :c:macro:`!Py_HUGE_VAL` macro is :term:`soft deprecated`, use :c:macro:`!"
"Py_INFINITY` instead. (Contributed by Sergey B Kirpichev in :gh:`120026`.)"
msgstr ""
"Makrot :c:macro:`!Py_HUGE_VAL` är :term:`soft deprecated`, använd :c:macro:`!"
"Py_INFINITY` istället. (Bidrag från Sergey B Kirpichev i :gh:`120026`.)"

msgid ""
"Macros :c:macro:`!Py_IS_NAN`, :c:macro:`!Py_IS_INFINITY` and :c:macro:`!"
"Py_IS_FINITE` are :term:`soft deprecated`, use instead :c:macro:`!isnan`, :c:"
"macro:`!isinf` and :c:macro:`!isfinite` available from :file:`math.h` since "
"C99.  (Contributed by Sergey B Kirpichev in :gh:`119613`.)"
msgstr ""
"Makron :c:macro:`!Py_IS_NAN`, :c:macro:`!Py_IS_INFINITY` och :c:macro:`!"
"Py_IS_FINITE` är :term:`soft deprecated`, använd istället :c:macro:`!"
"isnan`, :c:macro:`!isinf` och :c:macro:`!isfinite` tillgängliga från :file:"
"`math.h` sedan C99.  (Bidrag från Sergey B Kirpichev i :gh:`119613`.)"

msgid ""
"Non-tuple sequences are deprecated as argument for the ``(items)`` format "
"unit in :c:func:`PyArg_ParseTuple` and other :ref:`argument parsing <arg-"
"parsing>` functions if *items* contains format units which store a :ref:"
"`borrowed buffer <c-arg-borrowed-buffer>` or a :term:`borrowed reference`. "
"(Contributed by Serhiy Storchaka in :gh:`50333`.)"
msgstr ""
"Sekvenser som inte är tuplar är avförda som argument för formatenheten "
"``(items)`` i :c:func:`PyArg_ParseTuple` och andra :ref:`argumentparsing "
"<arg-parsing>` funktioner om *items* innehåller formatenheter som lagrar en :"
"ref:`lånad buffert <c-arg-borrowed-buffer>` eller en :term:`lånad referens`. "
"(Bidrag från Serhiy Storchaka i :gh:`50333`.)"

msgid ""
"The previously undocumented function :c:func:`PySequence_In` is :term:`soft "
"deprecated`. Use :c:func:`PySequence_Contains` instead. (Contributed by Yuki "
"Kobayashi in :gh:`127896`.)"
msgstr ""
"Den tidigare odokumenterade funktionen :c:func:`PySequence_In` är :term:"
"`soft deprecated`. Använd :c:func:`PySequence_Contains` istället. (Bidrag "
"från Yuki Kobayashi i :gh:`127896`.)"

msgid ""
"The ``PyMonitoring_FireBranchEvent`` function is deprecated and should be "
"replaced with calls to :c:func:`PyMonitoring_FireBranchLeftEvent` and :c:"
"func:`PyMonitoring_FireBranchRightEvent`."
msgstr ""
"Funktionen ``PyMonitoring_FireBranchEvent`` är föråldrad och bör ersättas "
"med anrop till :c:func:`PyMonitoring_FireBranchLeftEvent` och :c:func:"
"`PyMonitoring_FireBranchRightEvent`."

msgid ""
"The following private functions are deprecated and planned for removal in "
"Python 3.18:"
msgstr ""
"Följande privata funktioner är föråldrade och planeras att tas bort i Python "
"3.18:"

msgid ":c:func:`!_PyBytes_Join`: use :c:func:`PyBytes_Join`."
msgstr ":c:func:`!_PyBytes_Join`: använd :c:func:`PyBytes_Join`."

msgid ""
":c:func:`!_PyDict_GetItemStringWithError`: use :c:func:"
"`PyDict_GetItemStringRef`."
msgstr ""
":c:func:`!_PyDict_GetItemStringWithError`: använd :c:func:"
"`PyDict_GetItemStringRef`."

msgid ":c:func:`!_PyDict_Pop()`: use :c:func:`PyDict_Pop`."
msgstr ":c:func:`!_PyDict_Pop()`: använd :c:func:`PyDict_Pop`."

msgid ":c:func:`!_PyLong_Sign()`: use :c:func:`PyLong_GetSign`."
msgstr ":c:func:`!_PyLong_Sign()`: använd :c:func:`PyLong_GetSign`."

msgid ""
":c:func:`!_PyLong_FromDigits` and :c:func:`!_PyLong_New`: use :c:func:"
"`PyLongWriter_Create`."
msgstr ""
":c:func:`!_PyLong_FromDigits` och :c:func:`!_PyLong_New`: använd :c:func:"
"`PyLongWriter_Create`."

msgid ""
":c:func:`!_PyThreadState_UncheckedGet`: use :c:func:"
"`PyThreadState_GetUnchecked`."
msgstr ""
":c:func:`!_PyThreadState_UncheckedGet`: använd :c:func:"
"`PyThreadState_GetUnchecked`."

msgid ":c:func:`!_PyUnicode_AsString`: use :c:func:`PyUnicode_AsUTF8`."
msgstr ":c:func:`!_PyUnicode_AsString`: använd :c:func:`PyUnicode_AsUTF8`."

msgid ""
":c:func:`!_PyUnicodeWriter_Init`: replace ``_PyUnicodeWriter_Init(&writer)`` "
"with :c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Init`: ersätt ``_PyUnicodeWriter_Init(&writer)`` "
"med :c:func:`writer = PyUnicodeWriter_Create(0) <PyUnicodeWriter_Create>`."

msgid ""
":c:func:`!_PyUnicodeWriter_Finish`: replace "
"``_PyUnicodeWriter_Finish(&writer)`` with :c:func:"
"`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Finish`: ersätt "
"``_PyUnicodeWriter_Finish(&writer)`` med :c:func:"
"`PyUnicodeWriter_Finish(writer) <PyUnicodeWriter_Finish>`."

msgid ""
":c:func:`!_PyUnicodeWriter_Dealloc`: replace "
"``_PyUnicodeWriter_Dealloc(&writer)`` with :c:func:"
"`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_Dealloc`: ersätt "
"``_PyUnicodeWriter_Dealloc(&writer)`` med :c:func:"
"`PyUnicodeWriter_Discard(writer) <PyUnicodeWriter_Discard>`."

msgid ""
":c:func:`!_PyUnicodeWriter_WriteChar`: replace "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` with :c:func:"
"`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteChar`: ersätt "
"``_PyUnicodeWriter_WriteChar(&writer, ch)`` med :c:func:"
"`PyUnicodeWriter_WriteChar(writer, ch) <PyUnicodeWriter_WriteChar>`."

msgid ""
":c:func:`!_PyUnicodeWriter_WriteStr`: replace "
"``_PyUnicodeWriter_WriteStr(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteStr(writer, str) <PyUnicodeWriter_WriteStr>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteStr`: ersätt "
"``_PyUnicodeWriter_WriteStr(&writer, str)`` med :c:func:"
"`PyUnicodeWriter_WriteStr(writer, str) <PyUnicodeWriter_WriteStr>`."

msgid ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: replace "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` with :c:func:"
"`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteSubstring`: ersätt "
"``_PyUnicodeWriter_WriteSubstring(&writer, str, start, end)`` med :c:func:"
"`PyUnicodeWriter_WriteSubstring(writer, str, start, end) "
"<PyUnicodeWriter_WriteSubstring>`."

msgid ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: replace "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteASCII(writer, str) <PyUnicodeWriter_WriteASCII>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: ersätt "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` med :c:func:"
"`PyUnicodeWriter_WriteASCII(writer, str) <PyUnicodeWriter_WriteASCII>`."

msgid ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: replace "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteLatin1String`: ersätt "
"``_PyUnicodeWriter_WriteLatin1String(&writer, str)`` med :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."

msgid ":c:func:`!_Py_HashPointer`: use :c:func:`Py_HashPointer`."
msgstr ":c:func:`!_Py_HashPointer`: använd :c:func:`Py_HashPointer`."

msgid ":c:func:`!_Py_fopen_obj`: use :c:func:`Py_fopen`."
msgstr ":c:func:`!_Py_fopen_obj`: använd :c:func:`Py_fopen`."

msgid ""
"The `pythoncapi-compat project`_ can be used to get these new public "
"functions on Python 3.13 and older. (Contributed by Victor Stinner in :gh:"
"`128863`.)"
msgstr ""
"Projektet `pythoncapi-compat`_ kan användas för att få dessa nya publika "
"funktioner på Python 3.13 och äldre. (Bidrag från Victor Stinner i :gh:"
"`128863`.)"

msgid ""
"The :c:func:`PyImport_ImportModuleNoBlock`: Use :c:func:"
"`PyImport_ImportModule` instead."
msgstr ""
":c:func:`PyImport_ImportModuleNoBlock`: Använd :c:func:"
"`PyImport_ImportModule` istället."

msgid ""
":c:func:`PyWeakref_GetObject` and :c:func:`PyWeakref_GET_OBJECT`: Use :c:"
"func:`PyWeakref_GetRef` instead. The `pythoncapi-compat project <https://"
"github.com/python/pythoncapi-compat/>`__ can be used to get :c:func:"
"`PyWeakref_GetRef` on Python 3.12 and older."
msgstr ""
":c:func:`PyWeakref_GetObject` och :c:func:`PyWeakref_GET_OBJECT`: Använd :c:"
"func:`PyWeakref_GetRef` istället. Projektet `pythoncapi-compat <https://"
"github.com/python/pythoncapi-compat/>`__ kan användas för att hämta :c:func:"
"`PyWeakref_GetRef` på Python 3.12 och äldre."

msgid ""
":c:type:`Py_UNICODE` type and the :c:macro:`!Py_UNICODE_WIDE` macro: Use :c:"
"type:`wchar_t` instead."
msgstr ""
":c:type:`Py_UNICODE` typ och :c:macro:`!Py_UNICODE_WIDE` makro: Använd :c:"
"type:`wchar_t` istället."

msgid ""
":c:func:`!PyUnicode_AsDecodedObject`: Use :c:func:`PyCodec_Decode` instead."
msgstr ""
":c:func:`!PyUnicode_AsDecodedObject`: Använd :c:func:`PyCodec_Decode` "
"istället."

msgid ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Use :c:func:`PyCodec_Decode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`str`, such as :class:`bytes`."
msgstr ""
":c:func:`!PyUnicode_AsDecodedUnicode`: Använd :c:func:`PyCodec_Decode` "
"istället; Observera att vissa codecs (t.ex. \"base64\") kan returnera en "
"annan typ än :class:`str`, t.ex. :class:`bytes`."

msgid ""
":c:func:`!PyUnicode_AsEncodedObject`: Use :c:func:`PyCodec_Encode` instead."
msgstr ""
":c:func:`!PyUnicode_AsEncodedObject`: Använd :c:func:`PyCodec_Encode` "
"istället."

msgid ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Use :c:func:`PyCodec_Encode` instead; "
"Note that some codecs (for example, \"base64\") may return a type other "
"than :class:`bytes`, such as :class:`str`."
msgstr ""
":c:func:`!PyUnicode_AsEncodedUnicode`: Använd :c:func:`PyCodec_Encode` "
"istället; Observera att vissa codecs (t.ex. \"base64\") kan returnera en "
"annan typ än :class:`bytes`, t.ex. :class:`str`."

msgid "Python initialization functions, deprecated in Python 3.13:"
msgstr "Python-initialiseringsfunktioner, föråldrade i Python 3.13:"

msgid ""
":c:func:`Py_GetPath`: Use :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) instead."
msgstr ""
":c:func:`Py_GetPath`: Använd :c:func:`PyConfig_Get(\"module_search_paths\") "
"<PyConfig_Get>` (:data:`sys.path`) istället."

msgid ""
":c:func:`Py_GetPrefix`: Use :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) if :ref:"
"`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetPrefix`: Använd :c:func:`PyConfig_Get(\"base_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_prefix`) istället. Använd :c:func:"
"`PyConfig_Get(\"prefix\") <PyConfig_Get>` (:data:`sys.prefix`) om :ref:"
"`virtuella miljöer <venv-def>` behöver hanteras."

msgid ""
":c:func:`Py_GetExecPrefix`: Use :c:func:`PyConfig_Get(\"base_exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.base_exec_prefix`) instead. Use :c:func:"
"`PyConfig_Get(\"exec_prefix\") <PyConfig_Get>` (:data:`sys.exec_prefix`) if :"
"ref:`virtual environments <venv-def>` need to be handled."
msgstr ""
":c:func:`Py_GetExecPrefix`: Använd :c:func:"
"`PyConfig_Get(\"base_exec_prefix\") <PyConfig_Get>` (:data:`sys."
"base_exec_prefix`) istället. Använd :c:func:`PyConfig_Get(\"exec_prefix\") "
"<PyConfig_Get>` (:data:`sys.exec_prefix`) om :ref:`virtuella miljöer <venv-"
"def>` behöver hanteras."

msgid ""
":c:func:`Py_GetProgramFullPath`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramFullPath`: Använd :c:func:"
"`PyConfig_Get(\"executable\") <PyConfig_Get>` (:data:`sys.executable`) "
"istället."

msgid ""
":c:func:`Py_GetProgramName`: Use :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) instead."
msgstr ""
":c:func:`Py_GetProgramName`: Använd :c:func:`PyConfig_Get(\"executable\") "
"<PyConfig_Get>` (:data:`sys.executable`) istället."

msgid ""
":c:func:`Py_GetPythonHome`: Use :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` or the :envvar:`PYTHONHOME` environment variable instead."
msgstr ""
":c:func:`Py_GetPythonHome`: Använd :c:func:`PyConfig_Get(\"home\") "
"<PyConfig_Get>` eller miljövariabeln :envvar:`PYTHONHOME` istället."

msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get :c:func:`PyConfig_Get` on Python 3.13 and older."
msgstr ""
"Projektet `pythoncapi-compat <https://github.com/python/pythoncapi-compat/"
">`__ kan användas för att få :c:func:`PyConfig_Get` på Python 3.13 och äldre."

msgid ""
"Functions to configure Python's initialization, deprecated in Python 3.11:"
msgstr ""
"Funktioner för att konfigurera Pythons initialisering, föråldrad i Python "
"3.11:"

msgid ":c:func:`!PySys_SetArgvEx()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""
":c:func:`!PySys_SetArgvEx()`: Ställ in :c:member:`PyConfig.argv` istället."

msgid ":c:func:`!PySys_SetArgv()`: Set :c:member:`PyConfig.argv` instead."
msgstr ""
":c:func:`!PySys_SetArgv()`: Ställ in :c:member:`PyConfig.argv` istället."

msgid ""
":c:func:`!Py_SetProgramName()`: Set :c:member:`PyConfig.program_name` "
"instead."
msgstr ""
":c:func:`!Py_SetProgramName()`: Ställ in :c:member:`PyConfig.program_name` "
"istället."

msgid ":c:func:`!Py_SetPythonHome()`: Set :c:member:`PyConfig.home` instead."
msgstr ""
":c:func:`!Py_SetPythonHome()`: Ställ in :c:member:`PyConfig.home` istället."

msgid ""
":c:func:`PySys_ResetWarnOptions`: Clear :data:`sys.warnoptions` and :data:`!"
"warnings.filters` instead."
msgstr ""
":c:func:`PySys_ResetWarnOptions`: Rensa :data:`sys.warnoptions` och :data:`!"
"warnings.filters` istället."

msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` instead."
msgstr ""
"API:t :c:func:`Py_InitializeFromConfig` bör användas med :c:type:`PyConfig` "
"istället."

msgid "Global configuration variables:"
msgstr "Variabler för global konfiguration:"

msgid ""
":c:var:`Py_DebugFlag`: Use :c:member:`PyConfig.parser_debug` or :c:func:"
"`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DebugFlag`: Använd :c:member:`PyConfig.parser_debug` eller :c:"
"func:`PyConfig_Get(\"parser_debug\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_VerboseFlag`: Use :c:member:`PyConfig.verbose` or :c:func:"
"`PyConfig_Get(\"verbose\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_VerboseFlag`: Använd :c:member:`PyConfig.verbose` eller :c:func:"
"`PyConfig_Get(\"verbose\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_QuietFlag`: Use :c:member:`PyConfig.quiet` or :c:func:"
"`PyConfig_Get(\"quiet\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_QuietFlag`: Använd :c:member:`PyConfig.quiet` eller :c:func:"
"`PyConfig_Get(\"quiet\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_InteractiveFlag`: Use :c:member:`PyConfig.interactive` or :c:func:"
"`PyConfig_Get(\"interactive\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InteractiveFlag`: Använd :c:member:`PyConfig.interactive` eller :"
"c:func:`PyConfig_Get(\"interactive\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_InspectFlag`: Use :c:member:`PyConfig.inspect` or :c:func:"
"`PyConfig_Get(\"inspect\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_InspectFlag`: Använd :c:member:`PyConfig.inspect` eller :c:func:"
"`PyConfig_Get(\"inspect\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_OptimizeFlag`: Use :c:member:`PyConfig.optimization_level` or :c:"
"func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_OptimizeFlag`: Använd :c:member:`PyConfig.optimization_level` "
"eller :c:func:`PyConfig_Get(\"optimization_level\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_NoSiteFlag`: Use :c:member:`PyConfig.site_import` or :c:func:"
"`PyConfig_Get(\"site_import\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoSiteFlag`: Använd :c:member:`PyConfig.site_import` eller :c:"
"func:`PyConfig_Get(\"site_import\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_BytesWarningFlag`: Use :c:member:`PyConfig.bytes_warning` or :c:"
"func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_BytesWarningFlag`: Använd :c:member:`PyConfig.bytes_warning` "
"eller :c:func:`PyConfig_Get(\"bytes_warning\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_FrozenFlag`: Use :c:member:`PyConfig.pathconfig_warnings` or :c:"
"func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_FrozenFlag`: Använd :c:member:`PyConfig.pathconfig_warnings` "
"eller :c:func:`PyConfig_Get(\"pathconfig_warnings\") <PyConfig_Get>` "
"istället."

msgid ""
":c:var:`Py_IgnoreEnvironmentFlag`: Use :c:member:`PyConfig.use_environment` "
"or :c:func:`PyConfig_Get(\"use_environment\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IgnoreEnvironmentFlag`: Använd :c:member:`PyConfig."
"use_environment` eller :c:func:`PyConfig_Get(\"use_environment\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`Py_DontWriteBytecodeFlag`: Use :c:member:`PyConfig.write_bytecode` "
"or :c:func:`PyConfig_Get(\"write_bytecode\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_DontWriteBytecodeFlag`: Använd :c:member:`PyConfig."
"write_bytecode` eller :c:func:`PyConfig_Get(\"write_bytecode\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`Py_NoUserSiteDirectory`: Use :c:member:`PyConfig."
"user_site_directory` or :c:func:`PyConfig_Get(\"user_site_directory\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_NoUserSiteDirectory`: Använd :c:member:`PyConfig."
"user_site_directory` eller :c:func:`PyConfig_Get(\"user_site_directory\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`Py_UnbufferedStdioFlag`: Use :c:member:`PyConfig.buffered_stdio` or :"
"c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_UnbufferedStdioFlag`: Använd :c:member:`PyConfig.buffered_stdio` "
"eller :c:func:`PyConfig_Get(\"buffered_stdio\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_HashRandomizationFlag`: Use :c:member:`PyConfig.use_hash_seed` "
"and :c:member:`PyConfig.hash_seed` or :c:func:`PyConfig_Get(\"hash_seed\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_HashRandomizationFlag`: Använd :c:member:`PyConfig.use_hash_seed` "
"och :c:member:`PyConfig.hash_seed` eller :c:func:"
"`PyConfig_Get(\"hash_seed\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_IsolatedFlag`: Use :c:member:`PyConfig.isolated` or :c:func:"
"`PyConfig_Get(\"isolated\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_IsolatedFlag`: Använd :c:member:`PyConfig.isolated` eller :c:func:"
"`PyConfig_Get(\"isolated\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Use :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` or :c:func:"
"`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsFSEncodingFlag`: Använd :c:member:`PyPreConfig."
"legacy_windows_fs_encoding` eller :c:func:"
"`PyConfig_Get(\"legacy_windows_fs_encoding\") <PyConfig_Get>` istället."

msgid ""
":c:var:`Py_LegacyWindowsStdioFlag`: Use :c:member:`PyConfig."
"legacy_windows_stdio` or :c:func:`PyConfig_Get(\"legacy_windows_stdio\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`Py_LegacyWindowsStdioFlag`: Använd :c:member:`PyConfig."
"legacy_windows_stdio` eller :c:func:`PyConfig_Get(\"legacy_windows_stdio\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`!Py_FileSystemDefaultEncoding`, :c:var:`!"
"Py_HasFileSystemDefaultEncoding`: Use :c:member:`PyConfig."
"filesystem_encoding` or :c:func:`PyConfig_Get(\"filesystem_encoding\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncoding`, :c:var:`!"
"Py_HasFileSystemDefaultEncoding`: Använd :c:member:`PyConfig."
"filesystem_encoding` eller :c:func:`PyConfig_Get(\"filesystem_encoding\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Use :c:member:`PyConfig."
"filesystem_errors` or :c:func:`PyConfig_Get(\"filesystem_errors\") "
"<PyConfig_Get>` instead."
msgstr ""
":c:var:`!Py_FileSystemDefaultEncodeErrors`: Använd :c:member:`PyConfig."
"filesystem_errors` eller :c:func:`PyConfig_Get(\"filesystem_errors\") "
"<PyConfig_Get>` istället."

msgid ""
":c:var:`!Py_UTF8Mode`: Use :c:member:`PyPreConfig.utf8_mode` or :c:func:"
"`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` instead. (see :c:func:"
"`Py_PreInitialize`)"
msgstr ""
":c:var:`!Py_UTF8Mode`: Använd :c:member:`PyPreConfig.utf8_mode` eller :c:"
"func:`PyConfig_Get(\"utf8_mode\") <PyConfig_Get>` istället. (se :c:func:"
"`Py_PreInitialize`)"

msgid ""
"The :c:func:`Py_InitializeFromConfig` API should be used with :c:type:"
"`PyConfig` to set these options. Or :c:func:`PyConfig_Get` can be used to "
"get these options at runtime."
msgstr ""
"API:et :c:func:`Py_InitializeFromConfig` bör användas med :c:type:`PyConfig` "
"för att ställa in dessa alternativ. Eller så kan :c:func:`PyConfig_Get` "
"användas för att hämta dessa alternativ vid körning."

msgid "The bundled copy of ``libmpdec``."
msgstr "Den medföljande kopian av ``libmpdec``."

msgid "Pending removal in Python 3.18"
msgstr "Väntar på borttagning i Python 3.18"

msgid "Deprecated private functions (:gh:`128863`):"
msgstr "Föråldrade privata funktioner (:gh:`128863`):"

msgid ":c:func:`!_PyDict_Pop()`: :c:func:`PyDict_Pop`."
msgstr ":c:func:`!_PyDict_Pop()`: :c:func:`PyDict_Pop`."

msgid ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: replace "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` with :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."
msgstr ""
":c:func:`!_PyUnicodeWriter_WriteASCIIString`: ersätt "
"``_PyUnicodeWriter_WriteASCIIString(&writer, str)`` med :c:func:"
"`PyUnicodeWriter_WriteUTF8(writer, str) <PyUnicodeWriter_WriteUTF8>`."

msgid ":c:func:`!_PyUnicodeWriter_Prepare`: (no replacement)."
msgstr ":c:func:`!_PyUnicodeWriter_Prepare`: (ingen ersättning)."

msgid ":c:func:`!_PyUnicodeWriter_PrepareKind`: (no replacement)."
msgstr ":c:func:`!_PyUnicodeWriter_PrepareKind`: (ingen ersättning)."

msgid ""
"The `pythoncapi-compat project <https://github.com/python/pythoncapi-compat/"
">`__ can be used to get these new public functions on Python 3.13 and older."
msgstr ""
"Projektet `pythoncapi-compat <https://github.com/python/pythoncapi-compat/"
">`__ kan användas för att få dessa nya offentliga funktioner på Python 3.13 "
"och äldre."

msgid ""
"The following APIs are deprecated and will be removed, although there is "
"currently no date scheduled for their removal."
msgstr ""
"Följande API:er är föråldrade och kommer att tas bort, även om det för "
"närvarande inte finns något datum för när de ska tas bort."

msgid ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Unneeded since Python 3.8."
msgstr ":c:macro:`Py_TPFLAGS_HAVE_FINALIZE`: Behövs inte sedan Python 3.8."

msgid ":c:func:`PyErr_Fetch`: Use :c:func:`PyErr_GetRaisedException` instead."
msgstr ""
":c:func:`PyErr_Fetch`: Använd :c:func:`PyErr_GetRaisedException` istället."

msgid ""
":c:func:`PyErr_NormalizeException`: Use :c:func:`PyErr_GetRaisedException` "
"instead."
msgstr ""
":c:func:`PyErr_NormalizeException`: Använd :c:func:"
"`PyErr_GetRaisedException` istället."

msgid ""
":c:func:`PyErr_Restore`: Use :c:func:`PyErr_SetRaisedException` instead."
msgstr ""
":c:func:`PyErr_Restore`: Använd :c:func:`PyErr_SetRaisedException` istället."

msgid ""
":c:func:`PyModule_GetFilename`: Use :c:func:`PyModule_GetFilenameObject` "
"instead."
msgstr ""
":c:func:`PyModule_GetFilename`: Använd :c:func:`PyModule_GetFilenameObject` "
"istället."

msgid ":c:func:`PyOS_AfterFork`: Use :c:func:`PyOS_AfterFork_Child` instead."
msgstr ""
":c:func:`PyOS_AfterFork`: Använd :c:func:`PyOS_AfterFork_Child` istället."

msgid ""
":c:func:`PySlice_GetIndicesEx`: Use :c:func:`PySlice_Unpack` and :c:func:"
"`PySlice_AdjustIndices` instead."
msgstr ""
":c:func:`PySlice_GetIndicesEx`: Använd :c:func:`PySlice_Unpack` och :c:func:"
"`PySlice_AdjustIndices` istället."

msgid ":c:func:`PyUnicode_READY`: Unneeded since Python 3.12"
msgstr ":c:func:`PyUnicode_READY`: Behövs inte sedan Python 3.12"

msgid ":c:func:`!PyErr_Display`: Use :c:func:`PyErr_DisplayException` instead."
msgstr ""
":c:func:`!PyErr_Display`: Använd :c:func:`PyErr_DisplayException` istället."

msgid ""
":c:func:`!_PyErr_ChainExceptions`: Use :c:func:`!_PyErr_ChainExceptions1` "
"instead."
msgstr ""
":c:func:`!_PyErr_ChainExceptions`: Använd :c:func:`!_PyErr_ChainExceptions1` "
"istället."

msgid ""
":c:member:`!PyBytesObject.ob_shash` member: call :c:func:`PyObject_Hash` "
"instead."
msgstr ""
":c:member:`!PyBytesObject.ob_shash` member: anropa :c:func:`PyObject_Hash` "
"istället."

msgid "Thread Local Storage (TLS) API:"
msgstr "API för lokal lagring av trådar (TLS):"

msgid ""
":c:func:`PyThread_create_key`: Use :c:func:`PyThread_tss_alloc` instead."
msgstr ""
":c:func:`PyThread_create_key`: Använd :c:func:`PyThread_tss_alloc` istället."

msgid ":c:func:`PyThread_delete_key`: Use :c:func:`PyThread_tss_free` instead."
msgstr ""
":c:func:`PyThread_delete_key`: Använd :c:func:`PyThread_tss_free` istället."

msgid ""
":c:func:`PyThread_set_key_value`: Use :c:func:`PyThread_tss_set` instead."
msgstr ""
":c:func:`PyThread_set_key_value`: Använd :c:func:`PyThread_tss_set` istället."

msgid ""
":c:func:`PyThread_get_key_value`: Use :c:func:`PyThread_tss_get` instead."
msgstr ""
":c:func:`PyThread_get_key_value`: Använd :c:func:`PyThread_tss_get` istället."

msgid ""
":c:func:`PyThread_delete_key_value`: Use :c:func:`PyThread_tss_delete` "
"instead."
msgstr ""
":c:func:`PyThread_delete_key_value`: Använd :c:func:`PyThread_tss_delete` "
"istället."

msgid ":c:func:`PyThread_ReInitTLS`: Unneeded since Python 3.7."
msgstr ":c:func:`PyThread_ReInitTLS`: Behövs inte sedan Python 3.7."

msgid ""
"Creating :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` with mutable "
"bases was deprecated since 3.12 and now raises a :exc:`TypeError`."
msgstr ""
"Att skapa :c:data:`immutable types <Py_TPFLAGS_IMMUTABLETYPE>` med mutabla "
"baser var föråldrat sedan 3.12 och ger nu upphov till ett :exc:`TypeError`."

msgid ""
"Remove ``PyDictObject.ma_version_tag`` member which was deprecated since "
"Python 3.12. Use the :c:func:`PyDict_AddWatcher` API instead. (Contributed "
"by Sam Gross in :gh:`124296`.)"
msgstr ""
"Ta bort medlemmen ``PyDictObject.ma_version_tag`` som var föråldrad sedan "
"Python 3.12. Använd :c:func:`PyDict_AddWatcher` API istället. (Bidrag från "
"Sam Gross i :gh:`124296`.)"

msgid ""
"Remove the private ``_Py_InitializeMain()`` function. It was a :term:"
"`provisional API` added to Python 3.8 by :pep:`587`. (Contributed by Victor "
"Stinner in :gh:`129033`.)"
msgstr ""
"Ta bort den privata funktionen ``_Py_InitializeMain()``. Det var ett :term:"
"`provisoriskt API` som lades till i Python 3.8 av :pep:`587`. (Bidrag från "
"Victor Stinner i :gh:`129033`.)"

msgid ""
"The undocumented APIs :c:macro:`!Py_C_RECURSION_LIMIT` and :c:member:`!"
"PyThreadState.c_recursion_remaining`, added in 3.13, are removed without a "
"deprecation period. Please use :c:func:`Py_EnterRecursiveCall` to guard "
"against runaway recursion in C code. (Removed in :gh:`133079`, see also :gh:"
"`130396`.)"
msgstr ""
"De odokumenterade API:erna :c:macro:`!Py_C_RECURSION_LIMIT` och :c:member:`!"
"PyThreadState.c_recursion_remaining`, som lades till i 3.13, tas bort utan "
"en avvecklingsperiod. Använd :c:func:`Py_EnterRecursiveCall` för att skydda "
"mot okontrollerad rekursion i C-kod. (Borttagen i :gh:`133079`, se även :gh:"
"`130396`.)"
