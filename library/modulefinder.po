# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!modulefinder` --- Find modules used by a script"
msgstr ":mod:`!modulefinder` --- Hitta moduler som används av ett skript"

msgid "**Source code:** :source:`Lib/modulefinder.py`"
msgstr "**Källkod:** :source:`Lib/modulefinder.py`"

msgid ""
"This module provides a :class:`ModuleFinder` class that can be used to "
"determine the set of modules imported by a script. ``modulefinder.py`` can "
"also be run as a script, giving the filename of a Python script as its "
"argument, after which a report of the imported modules will be printed."
msgstr ""
"Den här modulen innehåller en :class:`ModuleFinder`-klass som kan användas "
"för att avgöra vilka moduler som importeras av ett skript. ``modulefinder."
"py`` kan också köras som ett skript, med filnamnet på ett Python-skript som "
"argument, varefter en rapport om de importerade modulerna skrivs ut."

msgid ""
"Record that the package named *pkg_name* can be found in the specified "
"*path*."
msgstr ""
"Registrera att paketet med namnet *pkg_name* finns i den angivna *path*."

msgid ""
"Allows specifying that the module named *oldname* is in fact the package "
"named *newname*."
msgstr ""
"Gör det möjligt att ange att modulen med namnet *oldname* i själva verket är "
"paketet med namnet *newname*."

msgid ""
"This class provides :meth:`run_script` and :meth:`report` methods to "
"determine the set of modules imported by a script. *path* can be a list of "
"directories to search for modules; if not specified, ``sys.path`` is used.  "
"*debug* sets the debugging level; higher values make the class print "
"debugging messages about what it's doing. *excludes* is a list of module "
"names to exclude from the analysis. *replace_paths* is a list of ``(oldpath, "
"newpath)`` tuples that will be replaced in module paths."
msgstr ""
"Denna klass tillhandahåller metoderna :meth:`run_script` och :meth:`report` "
"för att bestämma uppsättningen moduler som importeras av ett skript. *path* "
"kan vara en lista över kataloger att söka efter moduler i; om inget anges "
"används ``sys.path``.  *debug* anger felsökningsnivån; högre värden gör att "
"klassen skriver ut felsökningsmeddelanden om vad den gör. *excludes* är en "
"lista med modulnamn som ska uteslutas från analysen. *replace_paths* är en "
"lista med ``(oldpath, newpath)``-tupler som ska ersättas i modulens sökvägar."

msgid ""
"Print a report to standard output that lists the modules imported by the "
"script and their paths, as well as modules that are missing or seem to be "
"missing."
msgstr ""
"Skriv ut en rapport till standardutdata med en lista över de moduler som "
"importerats av skriptet och deras sökvägar, samt moduler som saknas eller "
"verkar saknas."

msgid ""
"Analyze the contents of the *pathname* file, which must contain Python code."
msgstr ""
"Analysera innehållet i filen *pathname*, som måste innehålla Python-kod."

msgid ""
"A dictionary mapping module names to modules. See :ref:`modulefinder-"
"example`."
msgstr ""
"En ordbok som mappar modulnamn till moduler. Se :ref:`modulefinder-example`."

msgid "Example usage of :class:`ModuleFinder`"
msgstr "Exempel på användning av :class:`ModuleFinder`"

msgid "The script that is going to get analyzed later on (bacon.py)::"
msgstr "Skriptet som kommer att analyseras senare (bacon.py)::"

msgid ""
"import re, itertools\n"
"\n"
"try:\n"
"    import baconhameggs\n"
"except ImportError:\n"
"    pass\n"
"\n"
"try:\n"
"    import guido.python.ham\n"
"except ImportError:\n"
"    pass"
msgstr ""
"import re, itertools\n"
"\n"
"try:\n"
"    import baconhameggs\n"
"except ImportError:\n"
"    pass\n"
"\n"
"try:\n"
"    import guido.python.ham\n"
"except ImportError:\n"
"    pass"

msgid "The script that will output the report of bacon.py::"
msgstr "Skriptet som kommer att mata ut rapporten från bacon.py::"

msgid ""
"from modulefinder import ModuleFinder\n"
"\n"
"finder = ModuleFinder()\n"
"finder.run_script('bacon.py')\n"
"\n"
"print('Loaded modules:')\n"
"for name, mod in finder.modules.items():\n"
"    print('%s: ' % name, end='')\n"
"    print(','.join(list(mod.globalnames.keys())[:3]))\n"
"\n"
"print('-'*50)\n"
"print('Modules not imported:')\n"
"print('\\n'.join(finder.badmodules.keys()))"
msgstr ""
"from modulefinder import ModuleFinder\n"
"\n"
"finder = ModuleFinder()\n"
"finder.run_script('bacon.py')\n"
"\n"
"print('Loaded modules:')\n"
"for name, mod in finder.modules.items():\n"
"    print('%s: ' % name, end='')\n"
"    print(','.join(list(mod.globalnames.keys())[:3]))\n"
"\n"
"print('-'*50)\n"
"print('Modules not imported:')\n"
"print('\\n'.join(finder.badmodules.keys()))"

msgid "Sample output (may vary depending on the architecture)::"
msgstr "Exempel på utdata (kan variera beroende på arkitektur)::"

msgid ""
"Loaded modules:\n"
"_types:\n"
"copyreg:  _inverted_registry,_slotnames,__all__\n"
"re._compiler:  isstring,_sre,_optimize_unicode\n"
"_sre:\n"
"re._constants:  REPEAT_ONE,makedict,AT_END_LINE\n"
"sys:\n"
"re:  __module__,finditer,_expand\n"
"itertools:\n"
"__main__:  re,itertools,baconhameggs\n"
"re._parser:  _PATTERNENDERS,SRE_FLAG_UNICODE\n"
"array:\n"
"types:  __module__,IntType,TypeType\n"
"---------------------------------------------------\n"
"Modules not imported:\n"
"guido.python.ham\n"
"baconhameggs"
msgstr ""
"Loaded modules:\n"
"_types:\n"
"copyreg:  _inverted_registry,_slotnames,__all__\n"
"re._compiler:  isstring,_sre,_optimize_unicode\n"
"_sre:\n"
"re._constants:  REPEAT_ONE,makedict,AT_END_LINE\n"
"sys:\n"
"re:  __module__,finditer,_expand\n"
"itertools:\n"
"__main__:  re,itertools,baconhameggs\n"
"re._parser:  _PATTERNENDERS,SRE_FLAG_UNICODE\n"
"array:\n"
"types:  __module__,IntType,TypeType\n"
"---------------------------------------------------\n"
"Modules not imported:\n"
"guido.python.ham\n"
"baconhameggs"
