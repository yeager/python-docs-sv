# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "An Informal Introduction to Python"
msgstr "En informell introduktion till Python"

msgid ""
"In the following examples, input and output are distinguished by the "
"presence or absence of prompts (:term:`>>>` and :term:`...`): to repeat the "
"example, you must type everything after the prompt, when the prompt appears; "
"lines that do not begin with a prompt are output from the interpreter. Note "
"that a secondary prompt on a line by itself in an example means you must "
"type a blank line; this is used to end a multi-line command."
msgstr ""
"I följande exempel skiljer sig inmatning och utmatning åt genom förekomst "
"eller frånvaro av prompter (:term:`>>>` och :term:`...`): för att upprepa "
"exemplet måste du skriva allt efter prompten, när prompten visas; rader som "
"inte börjar med en prompt matas ut från tolken. Observera att en sekundär "
"prompt på en egen rad i ett exempel innebär att du måste skriva en tom rad; "
"detta används för att avsluta ett kommando med flera rader."

msgid ""
"You can use the \"Copy\" button (it appears in the upper-right corner when "
"hovering over or tapping a code example), which strips prompts and omits "
"output, to copy and paste the input lines into your interpreter."
msgstr ""
"Du kan använda knappen \"Kopiera\" (den visas i det övre högra hörnet när du "
"håller muspekaren över eller trycker på ett kodexempel), som tar bort "
"uppmaningar och utelämnar utdata, för att kopiera och klistra in "
"inmatningsraderna i din tolk."

msgid ""
"Many of the examples in this manual, even those entered at the interactive "
"prompt, include comments.  Comments in Python start with the hash character, "
"``#``, and extend to the end of the physical line.  A comment may appear at "
"the start of a line or following whitespace or code, but not within a string "
"literal.  A hash character within a string literal is just a hash character. "
"Since comments are to clarify code and are not interpreted by Python, they "
"may be omitted when typing in examples."
msgstr ""
"Många av exemplen i den här handboken, även de som skrivs in i den "
"interaktiva prompten, innehåller kommentarer.  Kommentarer i Python börjar "
"med hashtecknet, ``#``, och sträcker sig till slutet av den fysiska raden.  "
"En kommentar kan förekomma i början av en rad eller efter blanksteg eller "
"kod, men inte inom en stränglitteral.  Ett hash-tecken inom en stränglitual "
"är bara ett hash-tecken. Eftersom kommentarer är till för att förtydliga "
"koden och inte tolkas av Python, kan de utelämnas när du skriver in exempel."

msgid "Some examples::"
msgstr "Några exempel::"

msgid ""
"# this is the first comment\n"
"spam = 1  # and this is the second comment\n"
"          # ... and now a third!\n"
"text = \"# This is not a comment because it's inside quotes.\""
msgstr ""
"# detta är den första kommentaren\n"
"spam = 1 # och det här är den andra kommentaren\n"
"          # ... och nu en tredje!\n"
"text = \"# Det här är inte en kommentar eftersom den är inom citationstecken."
"\""

msgid "Using Python as a Calculator"
msgstr "Använda Python som kalkylator"

msgid ""
"Let's try some simple Python commands.  Start the interpreter and wait for "
"the primary prompt, ``>>>``.  (It shouldn't take long.)"
msgstr ""
"Låt oss prova några enkla Python-kommandon.  Starta tolken och vänta på den "
"första prompten, ``>>>``.  (Det borde inte ta lång tid.)"

msgid "Numbers"
msgstr "Nummer"

msgid ""
"The interpreter acts as a simple calculator: you can type an expression at "
"it and it will write the value.  Expression syntax is straightforward: the "
"operators ``+``, ``-``, ``*`` and ``/`` can be used to perform arithmetic; "
"parentheses (``()``) can be used for grouping. For example::"
msgstr ""
"Tolken fungerar som en enkel miniräknare: du kan skriva in ett uttryck i den "
"och den skriver ut värdet.  Uttryckets syntax är enkel: operatorerna ``+``, "
"``-``, ``*`` och ``/`` kan användas för att utföra aritmetik; parenteser "
"(``()``) kan användas för gruppering. Till exempel::"

msgid ""
">>> 2 + 2\n"
"4\n"
">>> 50 - 5*6\n"
"20\n"
">>> (50 - 5*6) / 4\n"
"5.0\n"
">>> 8 / 5  # division always returns a floating-point number\n"
"1.6"
msgstr ""
">>> 2 + 2\n"
"4\n"
">>> 50 - 5*6\n"
"20\n"
">>> (50 - 5*6) / 4\n"
"5.0\n"
">>> 8 / 5 # division returnerar alltid ett flyttal\n"
"1.6"

msgid ""
"The integer numbers (e.g. ``2``, ``4``, ``20``) have type :class:`int`, the "
"ones with a fractional part (e.g. ``5.0``, ``1.6``) have type :class:"
"`float`.  We will see more about numeric types later in the tutorial."
msgstr ""
"Heltalen (t.ex. ``2``, ``4``, ``20``) har typen :class:`int`, de med en "
"bråkdel (t.ex. ``5,0``, ``1,6``) har typen :class:`float`.  Vi kommer att se "
"mer om numeriska typer senare i handledningen."

msgid ""
"Division (``/``) always returns a float.  To do :term:`floor division` and "
"get an integer result you can use the ``//`` operator; to calculate the "
"remainder you can use ``%``::"
msgstr ""
"Division (``/``) returnerar alltid en float.  För att göra :term:`floor "
"division` och få ett heltalsresultat kan du använda operatorn ``//``; för "
"att beräkna resten kan du använda ``%``::"

msgid ""
">>> 17 / 3  # classic division returns a float\n"
"5.666666666666667\n"
">>>\n"
">>> 17 // 3  # floor division discards the fractional part\n"
"5\n"
">>> 17 % 3  # the % operator returns the remainder of the division\n"
"2\n"
">>> 5 * 3 + 2  # floored quotient * divisor + remainder\n"
"17"
msgstr ""
">>> 17 / 3 # klassisk division returnerar en flottör\n"
"5.666666666666667\n"
">>>\n"
">>> 17 // 3 # golvdelning kasserar den bråkiga delen\n"
"5\n"
">>> 17 % 3  # % operatorn returnerar återstoden av divisionen\n"
"2\n"
">>> 5 * 3 + 2 # golvkvot * divisor + rest\n"
"17"

msgid ""
"With Python, it is possible to use the ``**`` operator to calculate powers "
"[#]_::"
msgstr ""
"Med Python är det möjligt att använda operatorn ``**`` för att beräkna "
"potenser [#]_::"

msgid ""
">>> 5 ** 2  # 5 squared\n"
"25\n"
">>> 2 ** 7  # 2 to the power of 7\n"
"128"
msgstr ""
">>> 5 ** 2  # 5 squared\n"
"25\n"
">>> 2 ** 7  # 2 to the power of 7\n"
"128"

msgid ""
"The equal sign (``=``) is used to assign a value to a variable. Afterwards, "
"no result is displayed before the next interactive prompt::"
msgstr ""
"Likhetstecknet (``=``) används för att tilldela en variabel ett värde. "
"Därefter visas inget resultat före nästa interaktiva prompt::"

msgid ""
">>> width = 20\n"
">>> height = 5 * 9\n"
">>> width * height\n"
"900"
msgstr ""
">>> width = 20\n"
">>> height = 5 * 9\n"
">>> width * height\n"
"900"

msgid ""
"If a variable is not \"defined\" (assigned a value), trying to use it will "
"give you an error::"
msgstr ""
"Om en variabel inte är \"definierad\" (tilldelad ett värde) får du ett "
"felmeddelande när du försöker använda den::"

msgid ""
">>> n  # try to access an undefined variable\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"NameError: name 'n' is not defined"
msgstr ""
"&gt;&gt;&gt; n # försök att komma åt en odefinierad variabel\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i <module>\n"
"NameError: namnet 'n' är inte definierat"

msgid ""
"There is full support for floating point; operators with mixed type operands "
"convert the integer operand to floating point::"
msgstr ""
"Det finns fullt stöd för flyttal; operatorer med operander av blandad typ "
"konverterar heltalsoperanden till flyttal::"

msgid ""
">>> 4 * 3.75 - 1\n"
"14.0"
msgstr ""
">>> 4 * 3.75 - 1\n"
"14.0"

msgid ""
"In interactive mode, the last printed expression is assigned to the variable "
"``_``.  This means that when you are using Python as a desk calculator, it "
"is somewhat easier to continue calculations, for example::"
msgstr ""
"I interaktivt läge tilldelas det senast utskrivna uttrycket till variabeln "
"``_``.  Detta innebär att när du använder Python som en skrivbordsräknare, "
"är det något lättare att fortsätta beräkningar, till exempel::"

msgid ""
">>> tax = 12.5 / 100\n"
">>> price = 100.50\n"
">>> price * tax\n"
"12.5625\n"
">>> price + _\n"
"113.0625\n"
">>> round(_, 2)\n"
"113.06"
msgstr ""
">>> skatt = 12,5 / 100\n"
">>> pris = 100,50\n"
">>> pris * skatt\n"
"12.5625\n"
">>> pris + _\n"
"113.0625\n"
">>> runda(_, 2)\n"
"113.06"

msgid ""
"This variable should be treated as read-only by the user.  Don't explicitly "
"assign a value to it --- you would create an independent local variable with "
"the same name masking the built-in variable with its magic behavior."
msgstr ""
"Denna variabel bör behandlas som skrivskyddad av användaren.  Tilldela inte "
"uttryckligen ett värde till den --- du skulle skapa en oberoende lokal "
"variabel med samma namn som maskerar den inbyggda variabeln med sitt magiska "
"beteende."

msgid ""
"In addition to :class:`int` and :class:`float`, Python supports other types "
"of numbers, such as :class:`~decimal.Decimal` and :class:`~fractions."
"Fraction`. Python also has built-in support for :ref:`complex numbers "
"<typesnumeric>`, and uses the ``j`` or ``J`` suffix to indicate the "
"imaginary part (e.g. ``3+5j``)."
msgstr ""
"Förutom :class:`int` och :class:`float` har Python stöd för andra typer av "
"tal, till exempel :class:`~decimal.Decimal` och :class:`~fractions."
"Fraction`. Python har också inbyggt stöd för :ref:`komplexa tal "
"<typesnumeric>`, och använder suffixet ``j`` eller ``J`` för att ange den "
"imaginära delen (t.ex. ``3+5j``)."

msgid "Text"
msgstr "Text"

msgid ""
"Python can manipulate text (represented by type :class:`str`, so-called "
"\"strings\") as well as numbers.  This includes characters \"``!``\", words "
"\"``rabbit``\", names \"``Paris``\", sentences \"``Got your back.``\", etc. "
"\"``Yay! :)``\". They can be enclosed in single quotes (``'...'``) or double "
"quotes (``\"...\"``) with the same result [#]_."
msgstr ""
"Python kan manipulera text (representerad av typen :class:`str`, s.k. "
"\"strängar\") såväl som siffror.  Detta inkluderar tecken \"``!``\", ord "
"\"``kanin``\", namn \"``Paris``\", meningar \"``Got your back.``\", etc. "
"\"``Yay! :)``\". De kan omslutas av enkla citattecken (``'...'``) eller "
"dubbla citattecken (``\"...'``) med samma resultat [#]_."

msgid ""
">>> 'spam eggs'  # single quotes\n"
"'spam eggs'\n"
">>> \"Paris rabbit got your back :)! Yay!\"  # double quotes\n"
"'Paris rabbit got your back :)! Yay!'\n"
">>> '1975'  # digits and numerals enclosed in quotes are also strings\n"
"'1975'"
msgstr ""
">>> 'spamägg' # enkla citattecken\n"
"'spam ägg'\n"
">>> \"Paris kanin har din rygg :)! Yay!\"  # dubbla citattecken\n"
"\"Paris kanin fick din rygg :)! Yay!'\n"
">>> '1975' # siffror och numeraler inom citationstecken är också strängar\n"
"'1975'"

msgid ""
"To quote a quote, we need to \"escape\" it, by preceding it with ``\\``. "
"Alternatively, we can use the other type of quotation marks::"
msgstr ""
"För att citera ett citat måste vi \"undkomma\" det genom att föregå det med "
"`````. Alternativt kan vi använda den andra typen av citattecken::"

msgid ""
">>> 'doesn\\'t'  # use \\' to escape the single quote...\n"
"\"doesn't\"\n"
">>> \"doesn't\"  # ...or use double quotes instead\n"
"\"doesn't\"\n"
">>> '\"Yes,\" they said.'\n"
"'\"Yes,\" they said.'\n"
">>> \"\\\"Yes,\\\" they said.\"\n"
"'\"Yes,\" they said.'\n"
">>> '\"Isn\\'t,\" they said.'\n"
"'\"Isn\\'t,\" they said.'"
msgstr ""
">>> 'doesn\\'t' # använd \\' för att undkomma det enkla citatet ...\n"
"\"gör inte\"\n"
">>> \"gör inte\"  # ...eller använd dubbla citattecken istället\n"
"\"gör inte\"\n"
">>> ''Ja,'' sa de.''\n"
"'\"Ja,\" sa de.'\n"
">>> \"\\\"Ja,\\\" sa de.\"\n"
"'\"Ja\", sa de.'\n"
">>> \"\"Är inte\", sa de.\"\n"
"\"\"Är inte\", sa de.\""

msgid ""
"In the Python shell, the string definition and output string can look "
"different.  The :func:`print` function produces a more readable output, by "
"omitting the enclosing quotes and by printing escaped and special "
"characters::"
msgstr ""
"I Python-skalet kan strängdefinitionen och utdatasträngen se olika ut.  "
"Funktionen :func:`print` ger en mer läsbar utdata genom att utelämna de "
"omslutande citattecknen och skriva ut undangömda tecken och specialtecken::"

msgid ""
">>> s = 'First line.\\nSecond line.'  # \\n means newline\n"
">>> s  # without print(), special characters are included in the string\n"
"'First line.\\nSecond line.'\n"
">>> print(s)  # with print(), special characters are interpreted, so \\n "
"produces new line\n"
"First line.\n"
"Second line."
msgstr ""
">>> s = 'Första raden.\\nTvåa raden.'  # \\n betyder ny rad\n"
">>> s # utan print() inkluderas specialtecken i strängen\n"
"\"Första raden. \\n Andra raden\n"
">>> print(s) # med print() tolkas specialtecken, så \\n ger ny rad\n"
"Första raden.\n"
"Andra raden."

msgid ""
"If you don't want characters prefaced by ``\\`` to be interpreted as special "
"characters, you can use *raw strings* by adding an ``r`` before the first "
"quote::"
msgstr ""
"Om du inte vill att tecken som inleds med ``\\`` ska tolkas som "
"specialtecken kan du använda *raw strings* genom att lägga till ett ``r`` "
"före det första citatet::"

msgid ""
">>> print('C:\\some\\name')  # here \\n means newline!\n"
"C:\\some\n"
"ame\n"
">>> print(r'C:\\some\\name')  # note the r before the quote\n"
"C:\\some\\name"
msgstr ""
">>> print('C:\\some\\name') # här betyder \\n ny rad!\n"
"C:\\some\n"
"ame\n"
">>> print(r'C:\\some\\name') # notera r:et före citatet\n"
"C:\\some\\namn"

msgid ""
"There is one subtle aspect to raw strings: a raw string may not end in an "
"odd number of ``\\`` characters; see :ref:`the FAQ entry <faq-programming-"
"raw-string-backslash>` for more information and workarounds."
msgstr ""
"Det finns en subtil aspekt av råa strängar: en rå sträng får inte sluta med "
"ett udda antal \"``\"-tecken; se :ref:`` FAQ-artikeln <faq-programming-raw-"
"string-backslash>` för mer information och lösningar."

msgid ""
"String literals can span multiple lines.  One way is using triple-quotes: "
"``\"\"\"...\"\"\"`` or ``'''...'''``.  End-of-line characters are "
"automatically included in the string, but it's possible to prevent this by "
"adding a ``\\`` at the end of the line.  In the following example, the "
"initial newline is not included::"
msgstr ""
"Stränglitteraler kan sträcka sig över flera rader.  Ett sätt är att använda "
"tredubbla citationstecken: ``\"\"\"...\"\"\"\"`` eller ``'''...'''``.  "
"Tecken i slutet av raden inkluderas automatiskt i strängen, men det är "
"möjligt att förhindra detta genom att lägga till en ````` i slutet av "
"raden.  I följande exempel inkluderas inte den inledande nya linjen::"

msgid ""
">>> print(\"\"\"\\\n"
"... Usage: thingy [OPTIONS]\n"
"...      -h                        Display this usage message\n"
"...      -H hostname               Hostname to connect to\n"
"... \"\"\")\n"
"Usage: thingy [OPTIONS]\n"
"     -h                        Display this usage message\n"
"     -H hostname               Hostname to connect to\n"
"\n"
">>>"
msgstr ""
">>> print(\"\"\"\\\")\n"
"... Användning: thingy [ALTERNATIV]\n"
"...      -h                        Visa detta användningsmeddelande\n"
"...      -H hostname               Värdnamn att ansluta till\n"
"... \"\"\")\n"
"Användning: thingy [ALTERNATIV]\n"
"     -h                        Visa detta användningsmeddelande\n"
"     -H hostname               Värdnamn att ansluta till\n"
"\n"
">>>"

msgid ""
"Strings can be concatenated (glued together) with the ``+`` operator, and "
"repeated with ``*``::"
msgstr ""
"Strängar kan konkateneras (sammanfogas) med operatorn ``+`` och upprepas med "
"``*``::"

msgid ""
">>> # 3 times 'un', followed by 'ium'\n"
">>> 3 * 'un' + 'ium'\n"
"'unununium'"
msgstr ""
">>> # 3 gånger 'un', följt av 'ium'\n"
">>> 3 * 'un' + 'ium'\n"
"'ununununium'"

msgid ""
"Two or more *string literals* (i.e. the ones enclosed between quotes) next "
"to each other are automatically concatenated. ::"
msgstr ""
"Två eller flera *stränglitteraler* (dvs. de som är inneslutna mellan "
"citattecken) bredvid varandra konkateneras automatiskt. ::"

msgid ""
">>> 'Py' 'thon'\n"
"'Python'"
msgstr ""
">>> 'Py' 'thon'\n"
"'Python'"

msgid ""
"This feature is particularly useful when you want to break long strings::"
msgstr ""
"Denna funktion är särskilt användbar när du vill bryta långa strängar::"

msgid ""
">>> text = ('Put several strings within parentheses '\n"
"...         'to have them joined together.')\n"
">>> text\n"
"'Put several strings within parentheses to have them joined together.'"
msgstr ""
">>> text = ('Sätt flera strängar inom parentes '\n"
"...         'för att få dem sammanfogade.')\n"
">>> text\n"
"\"Sätt flera strängar inom parentes för att få dem sammanfogade"

msgid ""
"This only works with two literals though, not with variables or expressions::"
msgstr ""
"Detta fungerar dock bara med två literaler, inte med variabler eller "
"uttryck::"

msgid ""
">>> prefix = 'Py'\n"
">>> prefix 'thon'  # can't concatenate a variable and a string literal\n"
"  File \"<stdin>\", line 1\n"
"    prefix 'thon'\n"
"           ^^^^^^\n"
"SyntaxError: invalid syntax\n"
">>> ('un' * 3) 'ium'\n"
"  File \"<stdin>\", line 1\n"
"    ('un' * 3) 'ium'\n"
"               ^^^^^\n"
"SyntaxError: invalid syntax"
msgstr ""
"&gt;&gt;&gt; prefix = 'Py'\n"
"&gt;&gt;&gt; prefix 'thon' # kan inte konkatenera en variabel och en "
"stränglitteral\n"
"  Fil \"<stdin>\", rad 1\n"
"    prefix 'thon'\n"
"           ^^^^^^\n"
"SyntaxError: ogiltig syntax\n"
"&gt;&gt;&gt; ('un' * 3) 'ium'\n"
"  Fil \"<stdin>\", rad 1\n"
"    ('un' * 3) 'ium'\n"
"               ^^^^^\n"
"SyntaxError: ogiltig syntax"

msgid ""
"If you want to concatenate variables or a variable and a literal, use ``+``::"
msgstr ""
"Om du vill sammanfoga variabler eller en variabel och en bokstav, använd "
"``+``::"

msgid ""
">>> prefix + 'thon'\n"
"'Python'"
msgstr ""
">>> prefix + 'thon'\n"
"'Python'"

msgid ""
"Strings can be *indexed* (subscripted), with the first character having "
"index 0. There is no separate character type; a character is simply a string "
"of size one::"
msgstr ""
"Strängar kan *indexeras* (subskriberas), varvid det första tecknet har index "
"0. Det finns ingen separat teckentyp, utan ett tecken är helt enkelt en "
"sträng av storleken ett::"

msgid ""
">>> word = 'Python'\n"
">>> word[0]  # character in position 0\n"
"'P'\n"
">>> word[5]  # character in position 5\n"
"'n'"
msgstr ""
">>> ord = 'Python'\n"
">>> word[0] # tecken i position 0\n"
"'P'\n"
">>> word[5] # tecken i position 5\n"
"'n'"

msgid ""
"Indices may also be negative numbers, to start counting from the right::"
msgstr "Index kan också vara negativa tal, för att börja räkna från höger::"

msgid ""
">>> word[-1]  # last character\n"
"'n'\n"
">>> word[-2]  # second-last character\n"
"'o'\n"
">>> word[-6]\n"
"'P'"
msgstr ""
">>> word[-1] # sista tecknet\n"
"'n'\n"
">>> ord[-2] # näst sista tecknet\n"
"'o'\n"
">>> ord[-6]\n"
"'P'"

msgid "Note that since -0 is the same as 0, negative indices start from -1."
msgstr ""
"Observera att eftersom -0 är samma sak som 0, börjar negativa index från -1."

msgid ""
"In addition to indexing, *slicing* is also supported.  While indexing is "
"used to obtain individual characters, *slicing* allows you to obtain a "
"substring::"
msgstr ""
"Förutom indexering stöds även *slicing*.  Medan indexering används för att "
"få fram enskilda tecken, kan du med *slicing* få fram en delsträng::"

msgid ""
">>> word[0:2]  # characters from position 0 (included) to 2 (excluded)\n"
"'Py'\n"
">>> word[2:5]  # characters from position 2 (included) to 5 (excluded)\n"
"'tho'"
msgstr ""
">>> word[0:2] # tecken från position 0 (inkluderad) till 2 (exkluderad)\n"
"'Py'\n"
">>> ord[2:5] # tecken från position 2 (inkluderad) till 5 (exkluderad)\n"
"'tho'"

msgid ""
"Slice indices have useful defaults; an omitted first index defaults to zero, "
"an omitted second index defaults to the size of the string being sliced. ::"
msgstr ""
"Slice-index har användbara standardvärden; ett utelämnat första index har "
"standardvärdet noll, ett utelämnat andra index har standardvärdet storleken "
"på den sträng som ska skivas:"

msgid ""
">>> word[:2]   # character from the beginning to position 2 (excluded)\n"
"'Py'\n"
">>> word[4:]   # characters from position 4 (included) to the end\n"
"'on'\n"
">>> word[-2:]  # characters from the second-last (included) to the end\n"
"'on'"
msgstr ""
">>> word[:2] # tecken från början till position 2 (uteslutet)\n"
"'Py'\n"
">>> ord[4:] # tecken från position 4 (inkluderat) till slutet\n"
"'on'\n"
">>> ord[-2:] # tecken från näst sista (inkluderat) till slutet\n"
"'on'"

msgid ""
"Note how the start is always included, and the end always excluded.  This "
"makes sure that ``s[:i] + s[i:]`` is always equal to ``s``::"
msgstr ""
"Notera att början alltid är inkluderad och slutet alltid exkluderat.  Detta "
"säkerställer att ``s[:i] + s[i:]`` alltid är lika med ``s``::"

msgid ""
">>> word[:2] + word[2:]\n"
"'Python'\n"
">>> word[:4] + word[4:]\n"
"'Python'"
msgstr ""
">>> word[:2] + word[2:]\n"
"'Python'\n"
">>> word[:4] + word[4:]\n"
"'Python'"

msgid ""
"One way to remember how slices work is to think of the indices as pointing "
"*between* characters, with the left edge of the first character numbered 0. "
"Then the right edge of the last character of a string of *n* characters has "
"index *n*, for example::"
msgstr ""
"Ett sätt att komma ihåg hur skivorna fungerar är att tänka på indexen som "
"pekande *mellan* tecken, med vänsterkanten på det första tecknet numrerat 0. "
"Sedan har högerkanten på det sista tecknet i en sträng med *n* tecken index "
"*n*, till exempel::"

msgid ""
" +---+---+---+---+---+---+\n"
" | P | y | t | h | o | n |\n"
" +---+---+---+---+---+---+\n"
" 0   1   2   3   4   5   6\n"
"-6  -5  -4  -3  -2  -1"
msgstr ""
" +---+---+---+---+---+---+\n"
" | P | y | t | h | o | n |\n"
" +---+---+---+---+---+---+\n"
" 0   1   2   3   4   5   6\n"
"-6  -5  -4  -3  -2  -1"

msgid ""
"The first row of numbers gives the position of the indices 0...6 in the "
"string; the second row gives the corresponding negative indices. The slice "
"from *i* to *j* consists of all characters between the edges labeled *i* and "
"*j*, respectively."
msgstr ""
"Den första talraden anger positionen för indexen 0...6 i strängen; den andra "
"talraden anger motsvarande negativa index. Skivan från *i* till *j* består "
"av alla tecken mellan kanterna märkta *i* respektive *j*."

msgid ""
"For non-negative indices, the length of a slice is the difference of the "
"indices, if both are within bounds.  For example, the length of "
"``word[1:3]`` is 2."
msgstr ""
"För icke-negativa index är längden på en skiva skillnaden mellan indexen, om "
"båda är inom gränserna.  Till exempel är längden på ``ord[1:3]`` 2."

msgid "Attempting to use an index that is too large will result in an error::"
msgstr ""
"Försök att använda ett index som är för stort kommer att resultera i ett "
"felmeddelande::"

msgid ""
">>> word[42]  # the word only has 6 characters\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"IndexError: string index out of range"
msgstr ""
"&gt;&gt;&gt; ord[42] # ordet har bara 6 tecken\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i <module>\n"
"IndexError: strängindex utanför intervallet"

msgid ""
"However, out of range slice indexes are handled gracefully when used for "
"slicing::"
msgstr ""
"Slice-index som ligger utanför intervallet hanteras dock på ett elegant sätt "
"när de används för slicing::"

msgid ""
">>> word[4:42]\n"
"'on'\n"
">>> word[42:]\n"
"''"
msgstr ""
">>> word[4:42]\n"
"'on'\n"
">>> word[42:]\n"
"''"

msgid ""
"Python strings cannot be changed --- they are :term:`immutable`. Therefore, "
"assigning to an indexed position in the string results in an error::"
msgstr ""
"Python-strängar kan inte ändras --- de är :term:`immutable`. Därför "
"resulterar tilldelning till en indexerad position i strängen i ett fel::"

msgid ""
">>> word[0] = 'J'\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: 'str' object does not support item assignment\n"
">>> word[2:] = 'py'\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: 'str' object does not support item assignment"
msgstr ""
">>> ord[0] = 'J'\n"
"Traceback (senaste anropet senast):\n"
"  Filen \"<stdin>\", rad 1, i <module>\n"
"TypeError: Objektet 'str' stöder inte tilldelning av objekt\n"
">>> word[2:] = 'py'\n"
"Traceback (senaste anropet senast):\n"
"  Filen \"<stdin>\", rad 1, i <module>\n"
"TypeError: 'str'-objektet stöder inte tilldelning av objekt"

msgid "If you need a different string, you should create a new one::"
msgstr "Om du behöver en annan sträng ska du skapa en ny::"

msgid ""
">>> 'J' + word[1:]\n"
"'Jython'\n"
">>> word[:2] + 'py'\n"
"'Pypy'"
msgstr ""
">>> 'J' + word[1:]\n"
"'Jython'\n"
">>> word[:2] + 'py'\n"
"'Pypy'"

msgid "The built-in function :func:`len` returns the length of a string::"
msgstr "Den inbyggda funktionen :func:`len` returnerar längden på en sträng::"

msgid ""
">>> s = 'supercalifragilisticexpialidocious'\n"
">>> len(s)\n"
"34"
msgstr ""
">>> s = 'supercalifragilisticexpialidocious'\n"
">>> len(s)\n"
"34"

msgid ":ref:`textseq`"
msgstr ":ref:`textseq`"

msgid ""
"Strings are examples of *sequence types*, and support the common operations "
"supported by such types."
msgstr ""
"Strängar är exempel på *sekvenstyper* och stöder de vanliga operationer som "
"stöds av sådana typer."

msgid ":ref:`string-methods`"
msgstr ":ref:`string-methods`"

msgid ""
"Strings support a large number of methods for basic transformations and "
"searching."
msgstr ""
"Strängar har stöd för ett stort antal metoder för grundläggande omvandlingar "
"och sökning."

msgid ":ref:`f-strings`"
msgstr ":ref:`f-strings`"

msgid "String literals that have embedded expressions."
msgstr "Stränglitteraler som har inbäddade uttryck."

msgid ":ref:`formatstrings`"
msgstr ":ref:`formatstrings`"

msgid "Information about string formatting with :meth:`str.format`."
msgstr "Information om strängformatering med :meth:`str.format`."

msgid ":ref:`old-string-formatting`"
msgstr ":ref:`old-string-formatting`"

msgid ""
"The old formatting operations invoked when strings are the left operand of "
"the ``%`` operator are described in more detail here."
msgstr ""
"De gamla formateringsoperationerna som används när strängar är den vänstra "
"operanden i operatorn ``%`` beskrivs mer i detalj här."

msgid "Lists"
msgstr "Listor"

msgid ""
"Python knows a number of *compound* data types, used to group together other "
"values.  The most versatile is the *list*, which can be written as a list of "
"comma-separated values (items) between square brackets.  Lists might contain "
"items of different types, but usually the items all have the same type. ::"
msgstr ""
"Python känner till ett antal *compound*-datatyper, som används för att "
"gruppera andra värden.  Den mest mångsidiga är *list*, som kan skrivas som "
"en lista med kommaseparerade värden (objekt) mellan hakparenteser.  Listor "
"kan innehålla objekt av olika typer, men vanligtvis har alla objekt samma "
"typ. ::"

msgid ""
">>> squares = [1, 4, 9, 16, 25]\n"
">>> squares\n"
"[1, 4, 9, 16, 25]"
msgstr ""
">>> squares = [1, 4, 9, 16, 25]\n"
">>> squares\n"
"[1, 4, 9, 16, 25]"

msgid ""
"Like strings (and all other built-in :term:`sequence` types), lists can be "
"indexed and sliced::"
msgstr ""
"Precis som strängar (och alla andra inbyggda :term:`sequence`-typer) kan "
"listor indexeras och skivas:"

msgid ""
">>> squares[0]  # indexing returns the item\n"
"1\n"
">>> squares[-1]\n"
"25\n"
">>> squares[-3:]  # slicing returns a new list\n"
"[9, 16, 25]"
msgstr ""
">>> squares[0] # indexering returnerar objektet\n"
"1\n"
">>> squares[-1]\n"
"25\n"
">>> squares[-3:] # slicing returnerar en ny lista\n"
"[9, 16, 25]"

msgid "Lists also support operations like concatenation::"
msgstr "Listor stöder också operationer som konkatenering::"

msgid ""
">>> squares + [36, 49, 64, 81, 100]\n"
"[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
msgstr ""
">>> squares + [36, 49, 64, 81, 100]\n"
"[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"

msgid ""
"Unlike strings, which are :term:`immutable`, lists are a :term:`mutable` "
"type, i.e. it is possible to change their content::"
msgstr ""
"Till skillnad från strängar, som är :term:`immutable`, är listor en :term:"
"`mutable` typ, dvs. det är möjligt att ändra deras innehåll::"

msgid ""
">>> cubes = [1, 8, 27, 65, 125]  # something's wrong here\n"
">>> 4 ** 3  # the cube of 4 is 64, not 65!\n"
"64\n"
">>> cubes[3] = 64  # replace the wrong value\n"
">>> cubes\n"
"[1, 8, 27, 64, 125]"
msgstr ""
">>> cubes = [1, 8, 27, 65, 125] # något är fel här\n"
">>> 4 ** 3 # kuben av 4 är 64, inte 65!\n"
"64\n"
">>> cubes[3] = 64 # ersätt det felaktiga värdet\n"
">>> cubes\n"
"[1, 8, 27, 64, 125]"

msgid ""
"You can also add new items at the end of the list, by using the :meth:`!list."
"append` *method* (we will see more about methods later)::"
msgstr ""
"Du kan också lägga till nya objekt i slutet av listan genom att använda :"
"meth:`!list.append` *metod* (vi kommer att se mer om metoder senare)::"

msgid ""
">>> cubes.append(216)  # add the cube of 6\n"
">>> cubes.append(7 ** 3)  # and the cube of 7\n"
">>> cubes\n"
"[1, 8, 27, 64, 125, 216, 343]"
msgstr ""
">>> cubes.append(216) # lägg till kuben av 6\n"
">>> cubes.append(7 ** 3) # och kuben av 7\n"
">>> cubes\n"
"[1, 8, 27, 64, 125, 216, 343]"

msgid ""
"Simple assignment in Python never copies data. When you assign a list to a "
"variable, the variable refers to the *existing list*. Any changes you make "
"to the list through one variable will be seen through all other variables "
"that refer to it.::"
msgstr ""
"Enkel tilldelning i Python kopierar aldrig data. När du tilldelar en lista "
"till en variabel, refererar variabeln till den *existerande listan*. Alla "
"ändringar som du gör i listan genom en variabel kommer att ses genom alla "
"andra variabler som refererar till den:"

msgid ""
">>> rgb = [\"Red\", \"Green\", \"Blue\"]\n"
">>> rgba = rgb\n"
">>> id(rgb) == id(rgba)  # they reference the same object\n"
"True\n"
">>> rgba.append(\"Alph\")\n"
">>> rgb\n"
"[\"Red\", \"Green\", \"Blue\", \"Alph\"]"
msgstr ""
">>> rgb = [\"Red\", \"Green\", \"Blue\"]\n"
">>> rgba = rgb\n"
">>> id(rgb) == id(rgba)  # de refererar till samma objekt\n"
"True\n"
">>> rgba.append(\"Alph\")\n"
">>> rgb\n"
"[\"Red\", \"Green\", \"Blue\", \"Alph\"]"

msgid ""
"All slice operations return a new list containing the requested elements.  "
"This means that the following slice returns a :ref:`shallow copy "
"<shallow_vs_deep_copy>` of the list::"
msgstr ""
"Alla slice-operationer returnerar en ny lista som innehåller de begärda "
"elementen.  Detta innebär att följande slice returnerar en :ref:`skallig "
"kopia <shallow_vs_deep_copy>` av listan::"

msgid ""
">>> correct_rgba = rgba[:]\n"
">>> correct_rgba[-1] = \"Alpha\"\n"
">>> correct_rgba\n"
"[\"Red\", \"Green\", \"Blue\", \"Alpha\"]\n"
">>> rgba\n"
"[\"Red\", \"Green\", \"Blue\", \"Alph\"]"
msgstr ""
">>> correct_rgba = rgba[:]\n"
">>> correct_rgba[-1] = \"Alpha\"\n"
">>> correct_rgba\n"
"[\"Red\", \"Green\", \"Blue\", \"Alpha\"]\n"
">>> rgba\n"
"[\"Red\", \"Green\", \"Blue\", \"Alph\"]"

msgid ""
"Assignment to slices is also possible, and this can even change the size of "
"the list or clear it entirely::"
msgstr ""
"Tilldelning till skivor är också möjlig, och detta kan till och med ändra "
"listans storlek eller rensa den helt::"

msgid ""
">>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
">>> letters\n"
"['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
">>> # replace some values\n"
">>> letters[2:5] = ['C', 'D', 'E']\n"
">>> letters\n"
"['a', 'b', 'C', 'D', 'E', 'f', 'g']\n"
">>> # now remove them\n"
">>> letters[2:5] = []\n"
">>> letters\n"
"['a', 'b', 'f', 'g']\n"
">>> # clear the list by replacing all the elements with an empty list\n"
">>> letters[:] = []\n"
">>> letters\n"
"[]"
msgstr ""
">>> bokstäver = ['a', 'b', 'c', 'd', 'e', 'f', 'g'] >>> bokstäver = ['a', "
"'b', 'c', 'd', 'e', 'f', 'g']\n"
">>> bokstäver\n"
"['a', 'b', 'c', 'd', 'e', 'f', 'g']\n"
">>> # ersätta vissa värden\n"
">>> bokstäver[2:5] = ['C', 'D', 'E']\n"
">>> bokstäver\n"
"['a', 'b', 'C', 'D', 'E', 'f', 'g']\n"
">>> # ta nu bort dem\n"
">>> bokstäver[2:5] = []\n"
">>> bokstäver\n"
"['a', 'b', 'f', 'g']\n"
">>> # rensa listan genom att ersätta alla element med en tom lista\n"
">>> bokstäver[:] = []\n"
">>> bokstäver\n"
"[]"

msgid "The built-in function :func:`len` also applies to lists::"
msgstr "Den inbyggda funktionen :func:`len` gäller även för listor::"

msgid ""
">>> letters = ['a', 'b', 'c', 'd']\n"
">>> len(letters)\n"
"4"
msgstr ""
">>> letters = ['a', 'b', 'c', 'd']\n"
">>> len(letters)\n"
"4"

msgid ""
"It is possible to nest lists (create lists containing other lists), for "
"example::"
msgstr ""
"Det är möjligt att nesta listor (skapa listor som innehåller andra listor), "
"till exempel::"

msgid ""
">>> a = ['a', 'b', 'c']\n"
">>> n = [1, 2, 3]\n"
">>> x = [a, n]\n"
">>> x\n"
"[['a', 'b', 'c'], [1, 2, 3]]\n"
">>> x[0]\n"
"['a', 'b', 'c']\n"
">>> x[0][1]\n"
"'b'"
msgstr ""
">>> a = ['a', 'b', 'c']\n"
">>> n = [1, 2, 3]\n"
">>> x = [a, n]\n"
">>> x\n"
"[['a', 'b', 'c'], [1, 2, 3]]\n"
">>> x[0]\n"
"['a', 'b', 'c']\n"
">>> x[0][1]\n"
"'b'"

msgid "First Steps Towards Programming"
msgstr "Första stegen mot programmering"

msgid ""
"Of course, we can use Python for more complicated tasks than adding two and "
"two together.  For instance, we can write an initial sub-sequence of the "
"`Fibonacci series <https://en.wikipedia.org/wiki/Fibonacci_sequence>`_ as "
"follows::"
msgstr ""
"Naturligtvis kan vi använda Python för mer komplicerade uppgifter än att "
"lägga ihop två och två.  Vi kan till exempel skriva en första undersekvens "
"av Fibonacci-serien <https://en.wikipedia.org/wiki/Fibonacci_sequence>`_ på "
"följande sätt::"

msgid ""
">>> # Fibonacci series:\n"
">>> # the sum of two elements defines the next\n"
">>> a, b = 0, 1\n"
">>> while a < 10:\n"
"...     print(a)\n"
"...     a, b = b, a+b\n"
"...\n"
"0\n"
"1\n"
"1\n"
"2\n"
"3\n"
"5\n"
"8"
msgstr ""
">>> # Fibonacci-serien:\n"
">>> # summan av två element definierar nästa\n"
">>> a, b = 0, 1\n"
">>> medan a < 10:\n"
"... print(a)\n"
"... a, b = b, a+b\n"
"...\n"
"0\n"
"1\n"
"1\n"
"2\n"
"3\n"
"5\n"
"8"

msgid "This example introduces several new features."
msgstr "I detta exempel introduceras flera nya funktioner."

msgid ""
"The first line contains a *multiple assignment*: the variables ``a`` and "
"``b`` simultaneously get the new values 0 and 1.  On the last line this is "
"used again, demonstrating that the expressions on the right-hand side are "
"all evaluated first before any of the assignments take place.  The right-"
"hand side expressions are evaluated  from the left to the right."
msgstr ""
"Den första raden innehåller en *multipeltilldelning*: variablerna ``a`` och "
"``b`` får samtidigt de nya värdena 0 och 1. På den sista raden används detta "
"igen, vilket visar att uttrycken på höger sida alla utvärderas först innan "
"någon av tilldelningarna äger rum.  Uttrycken på höger sida utvärderas från "
"vänster till höger."

msgid ""
"The :keyword:`while` loop executes as long as the condition (here: ``a < "
"10``) remains true.  In Python, like in C, any non-zero integer value is "
"true; zero is false.  The condition may also be a string or list value, in "
"fact any sequence; anything with a non-zero length is true, empty sequences "
"are false.  The test used in the example is a simple comparison.  The "
"standard comparison operators are written the same as in C: ``<`` (less "
"than), ``>`` (greater than), ``==`` (equal to), ``<=`` (less than or equal "
"to), ``>=`` (greater than or equal to) and ``!=`` (not equal to)."
msgstr ""
"Slingan :keyword:`while` körs så länge villkoret (här: ``a < 10``) förblir "
"sant.  I Python, precis som i C, är alla heltalsvärden som inte är noll "
"sanna; noll är falskt.  Villkoret kan också vara en sträng eller ett "
"listvärde, i själva verket vilken sekvens som helst; allt med en längd som "
"inte är noll är sant, tomma sekvenser är falska.  Testet som används i "
"exemplet är en enkel jämförelse.  Standardoperatorerna för jämförelser "
"skrivs på samma sätt som i C: ``<`` (mindre än), ``>`` (större än), ``==`` "
"(lika med), ``<=`` (mindre än eller lika med), ``>=`` (större än eller lika "
"med) och ``!=`` (inte lika med)."

msgid ""
"The *body* of the loop is *indented*: indentation is Python's way of "
"grouping statements.  At the interactive prompt, you have to type a tab or "
"space(s) for each indented line.  In practice you will prepare more "
"complicated input for Python with a text editor; all decent text editors "
"have an auto-indent facility.  When a compound statement is entered "
"interactively, it must be followed by a blank line to indicate completion "
"(since the parser cannot guess when you have typed the last line).  Note "
"that each line within a basic block must be indented by the same amount."
msgstr ""
"Slingans *brödtext* är *indragen*: indrag är Pythons sätt att gruppera "
"satser.  Vid den interaktiva prompten måste du skriva en tabb eller ett "
"mellanslag för varje indragen rad.  I praktiken kommer du att förbereda mer "
"komplicerad inmatning för Python med en textredigerare; alla anständiga "
"textredigerare har en automatisk indenteringsfunktion.  När en sammansatt "
"sats skrivs in interaktivt måste den följas av en tom rad för att visa att "
"den är klar (eftersom parsern inte kan gissa när du har skrivit den sista "
"raden).  Observera att varje rad inom ett basblock måste vara indragen lika "
"mycket."

msgid ""
"The :func:`print` function writes the value of the argument(s) it is given. "
"It differs from just writing the expression you want to write (as we did "
"earlier in the calculator examples) in the way it handles multiple "
"arguments, floating-point quantities, and strings.  Strings are printed "
"without quotes, and a space is inserted between items, so you can format "
"things nicely, like this::"
msgstr ""
"Funktionen :func:`print` skriver ut värdet på det eller de argument som den "
"får. Den skiljer sig från att bara skriva det uttryck du vill skriva (som vi "
"gjorde tidigare i räknarexemplen) genom sättet den hanterar flera argument, "
"flyttalsmängder och strängar.  Strängar skrivs ut utan citattecken och ett "
"mellanslag infogas mellan objekten, så att du kan formatera saker snyggt, så "
"här::"

msgid ""
">>> i = 256*256\n"
">>> print('The value of i is', i)\n"
"The value of i is 65536"
msgstr ""
">>> i = 256*256\n"
">>> print('Värdet av i är', i)\n"
"Värdet av i är 65536"

msgid ""
"The keyword argument *end* can be used to avoid the newline after the "
"output, or end the output with a different string::"
msgstr ""
"Nyckelordsargumentet *end* kan användas för att undvika ny rad efter utdata, "
"eller avsluta utdata med en annan sträng::"

msgid ""
">>> a, b = 0, 1\n"
">>> while a < 1000:\n"
"...     print(a, end=',')\n"
"...     a, b = b, a+b\n"
"...\n"
"0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,"
msgstr ""
">>> a, b = 0, 1\n"
">>> medan a < 1000:\n"
"... print(a, end=',')\n"
"... a, b = b, a+b\n"
"...\n"
"0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,"

msgid "Footnotes"
msgstr "Fotnoter"

msgid ""
"Since ``**`` has higher precedence than ``-``, ``-3**2`` will be interpreted "
"as ``-(3**2)`` and thus result in ``-9``.  To avoid this and get ``9``, you "
"can use ``(-3)**2``."
msgstr ""
"Eftersom ``**`` har högre prioritet än ``-`` kommer ``-3**2`` att tolkas som "
"``-(3**2)`` och därmed resultera i ``-9``.  För att undvika detta och få "
"``9`` kan du använda ``(-3)**2``."

msgid ""
"Unlike other languages, special characters such as ``\\n`` have the same "
"meaning with both single (``'...'``) and double (``\"...\"``) quotes. The "
"only difference between the two is that within single quotes you don't need "
"to escape ``\"`` (but you have to escape ``\\'``) and vice versa."
msgstr ""
"Till skillnad från andra språk har specialtecken som ``\\n`` samma betydelse "
"med både enkla (``'...'``) och dubbla (``\"...'``) citattecken. Den enda "
"skillnaden mellan de två är att inom enkla citattecken behöver du inte "
"undkomma ``\"`` (men du måste undkomma ``\\'``) och vice versa."

msgid "# (hash)"
msgstr "# (hash)"

msgid "comment"
msgstr "kommentar"
