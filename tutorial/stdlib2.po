# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Brief Tour of the Standard Library --- Part II"
msgstr "Kort rundtur i standardbiblioteket --- Del II"

msgid ""
"This second tour covers more advanced modules that support professional "
"programming needs.  These modules rarely occur in small scripts."
msgstr ""
"Denna andra genomgång omfattar mer avancerade moduler som stöder "
"professionella programmeringsbehov.  Dessa moduler förekommer sällan i små "
"skript."

msgid "Output Formatting"
msgstr "Formatering av utdata"

msgid ""
"The :mod:`reprlib` module provides a version of :func:`repr` customized for "
"abbreviated displays of large or deeply nested containers::"
msgstr ""
"Modulen :mod:`reprlib` tillhandahåller en version av :func:`repr` som är "
"anpassad för förkortad visning av stora eller djupt nästlade behållare::"

msgid ""
">>> import reprlib\n"
">>> reprlib.repr(set('supercalifragilisticexpialidocious'))\n"
"\"{'a', 'c', 'd', 'e', 'f', 'g', ...}\""
msgstr ""
">>> import reprlib\n"
">>> reprlib.repr(set('supercalifragilisticexpialidocious'))\n"
"\"{'a', 'c', 'd', 'e', 'f', 'g', ...}\""

msgid ""
"The :mod:`pprint` module offers more sophisticated control over printing "
"both built-in and user defined objects in a way that is readable by the "
"interpreter. When the result is longer than one line, the \"pretty printer\" "
"adds line breaks and indentation to more clearly reveal data structure::"
msgstr ""
"Modulen :mod:`pprint` erbjuder mer sofistikerad kontroll över utskriften av "
"både inbyggda och användardefinierade objekt på ett sätt som är läsbart för "
"tolken. När resultatet är längre än en rad lägger \"pretty printer\" till "
"radbrytningar och indrag för att tydligare avslöja datastrukturen::"

msgid ""
">>> import pprint\n"
">>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',\n"
"...     'yellow'], 'blue']]]\n"
"...\n"
">>> pprint.pprint(t, width=30)\n"
"[[[['black', 'cyan'],\n"
"   'white',\n"
"   ['green', 'red']],\n"
"  [['magenta', 'yellow'],\n"
"   'blue']]]"
msgstr ""
">>> import pprint\n"
">>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',\n"
"...     'gul'], 'blå']]]]\n"
"...\n"
">>> pprint.pprint(t, width=30)\n"
"[[[['black', 'cyan'],\n"
"   'vit',\n"
"   ['grön', 'röd']],\n"
"  [['magenta', 'gul'],\n"
"   'blå']]]]"

msgid ""
"The :mod:`textwrap` module formats paragraphs of text to fit a given screen "
"width::"
msgstr ""
"Modulen :mod:`textwrap` formaterar textstycken så att de passar en given "
"skärmbredd::"

msgid ""
">>> import textwrap\n"
">>> doc = \"\"\"The wrap() method is just like fill() except that it "
"returns\n"
"... a list of strings instead of one big string with newlines to separate\n"
"... the wrapped lines.\"\"\"\n"
"...\n"
">>> print(textwrap.fill(doc, width=40))\n"
"The wrap() method is just like fill()\n"
"except that it returns a list of strings\n"
"instead of one big string with newlines\n"
"to separate the wrapped lines."
msgstr ""
">>> import textwrap\n"
">>> doc = \"\"\"Wrap()-metoden är precis som fill() förutom att den "
"returnerar\n"
"... en lista med strängar istället för en stor sträng med nya linjer för att "
"separera\n"
"... de omslutna raderna.\"\"\"\n"
"...\n"
">>> print(textwrap.fill(doc, width=40))\n"
"Metoden wrap() är precis som fill()\n"
"förutom att den returnerar en lista med strängar\n"
"istället för en stor sträng med nya linjer\n"
"för att separera de inplastade raderna."

msgid ""
"The :mod:`locale` module accesses a database of culture specific data "
"formats. The grouping attribute of locale's format function provides a "
"direct way of formatting numbers with group separators::"
msgstr ""
"Modulen :mod:`locale` ger tillgång till en databas med kulturspecifika "
"dataformat. Grupperingsattributet i locales formatfunktion ger ett direkt "
"sätt att formatera tal med gruppseparatorer::"

msgid ""
">>> import locale\n"
">>> locale.setlocale(locale.LC_ALL, 'English_United States.1252')\n"
"'English_United States.1252'\n"
">>> conv = locale.localeconv()          # get a mapping of conventions\n"
">>> x = 1234567.8\n"
">>> locale.format_string(\"%d\", x, grouping=True)\n"
"'1,234,567'\n"
">>> locale.format_string(\"%s%.*f\", (conv['currency_symbol'],\n"
"...                      conv['frac_digits'], x), grouping=True)\n"
"'$1,234,567.80'"
msgstr ""
">>> import locale\n"
">>> locale.setlocale(locale.LC_ALL, 'English_United States.1252')\n"
"'English_United States.1252'\n"
">>> conv = locale.localeconv()          # get a mapping of conventions\n"
">>> x = 1234567.8\n"
">>> locale.format_string(\"%d\", x, grouping=True)\n"
"'1,234,567'\n"
">>> locale.format_string(\"%s%.*f\", (conv['currency_symbol'],\n"
"...                      conv['frac_digits'], x), grouping=True)\n"
"'$1,234,567.80'"

msgid "Templating"
msgstr "Templating"

msgid ""
"The :mod:`string` module includes a versatile :class:`~string.Template` "
"class with a simplified syntax suitable for editing by end-users.  This "
"allows users to customize their applications without having to alter the "
"application."
msgstr ""
"Modulen :mod:`string` innehåller en mångsidig klass :class:`~string."
"Template` med en förenklad syntax som är lämplig för redigering av "
"slutanvändare.  Detta gör det möjligt för användare att anpassa sina "
"applikationer utan att behöva ändra applikationen."

msgid ""
"The format uses placeholder names formed by ``$`` with valid Python "
"identifiers (alphanumeric characters and underscores).  Surrounding the "
"placeholder with braces allows it to be followed by more alphanumeric "
"letters with no intervening spaces.  Writing ``$$`` creates a single escaped "
"``$``::"
msgstr ""
"Formatet använder platshållarnamn som bildas av ``$`` med giltiga Python-"
"identifierare (alfanumeriska tecken och understreck).  Genom att omge "
"platshållaren med hakparenteser kan den följas av fler alfanumeriska "
"bokstäver utan mellanliggande mellanslag.  Att skriva ``$$`` skapar en enda "
"escapad ``$``::"

msgid ""
">>> from string import Template\n"
">>> t = Template('${village}folk send $$10 to $cause.')\n"
">>> t.substitute(village='Nottingham', cause='the ditch fund')\n"
"'Nottinghamfolk send $10 to the ditch fund.'"
msgstr ""
">>> från string import Template\n"
">>> t = Template('${village}folk skickar $$10 till $cause.')\n"
">>> t.substitute(by='Nottingham', orsak='dikesfonden')\n"
"\"Nottinghamfolk skickar $10 till dikesfonden"

msgid ""
"The :meth:`~string.Template.substitute` method raises a :exc:`KeyError` when "
"a placeholder is not supplied in a dictionary or a keyword argument.  For "
"mail-merge style applications, user supplied data may be incomplete and the :"
"meth:`~string.Template.safe_substitute` method may be more appropriate --- "
"it will leave placeholders unchanged if data is missing::"
msgstr ""
"Metoden :meth:`~string.Template.substitute` ger upphov till ett :exc:"
"`KeyError` när en platshållare inte anges i en ordbok eller ett "
"nyckelordsargument.  För applikationer av typen mail-merge kan användarens "
"data vara ofullständiga och metoden :meth:`~string.Template.safe_substitute` "
"kan vara mer lämplig --- den lämnar platshållare oförändrade om data saknas::"

msgid ""
">>> t = Template('Return the $item to $owner.')\n"
">>> d = dict(item='unladen swallow')\n"
">>> t.substitute(d)\n"
"Traceback (most recent call last):\n"
"  ...\n"
"KeyError: 'owner'\n"
">>> t.safe_substitute(d)\n"
"'Return the unladen swallow to $owner.'"
msgstr ""
">>> t = Template('Återlämna $objektet till $ägaren.')\n"
">>> d = dict(objekt='olastad svala')\n"
">>> t.substitute(d)\n"
"Traceback (senaste anropet senast):\n"
"  ...\n"
"KeyError: 'ägare'\n"
">>> t.safe_substitute(d)\n"
"\"Återlämna den olastade svalan till $ägaren"

msgid ""
"Template subclasses can specify a custom delimiter.  For example, a batch "
"renaming utility for a photo browser may elect to use percent signs for "
"placeholders such as the current date, image sequence number, or file "
"format::"
msgstr ""
"Mallunderklasser kan ange en anpassad avgränsare.  Ett verktyg för "
"namnändring i batch för en fotobrowser kan till exempel välja att använda "
"procenttecken för platshållare som aktuellt datum, bildsekvensnummer eller "
"filformat::"

msgid ""
">>> import time, os.path\n"
">>> photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']\n"
">>> class BatchRename(Template):\n"
"...     delimiter = '%'\n"
"...\n"
">>> fmt = input('Enter rename style (%d-date %n-seqnum %f-format):  ')\n"
"Enter rename style (%d-date %n-seqnum %f-format):  Ashley_%n%f\n"
"\n"
">>> t = BatchRename(fmt)\n"
">>> date = time.strftime('%d%b%y')\n"
">>> for i, filename in enumerate(photofiles):\n"
"...     base, ext = os.path.splitext(filename)\n"
"...     newname = t.substitute(d=date, n=i, f=ext)\n"
"...     print('{0} --> {1}'.format(filename, newname))\n"
"\n"
"img_1074.jpg --> Ashley_0.jpg\n"
"img_1076.jpg --> Ashley_1.jpg\n"
"img_1077.jpg --> Ashley_2.jpg"
msgstr ""
">>> import time, os.path\n"
">>> photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']\n"
">>> class BatchRename(Template):\n"
"...     delimiter = '%'\n"
"...\n"
">>> fmt = input('Enter rename style (%d-date %n-seqnum %f-format):  ')\n"
"Enter rename style (%d-date %n-seqnum %f-format):  Ashley_%n%f\n"
"\n"
">>> t = BatchRename(fmt)\n"
">>> date = time.strftime('%d%b%y')\n"
">>> for i, filename in enumerate(photofiles):\n"
"...     base, ext = os.path.splitext(filename)\n"
"...     newname = t.substitute(d=date, n=i, f=ext)\n"
"...     print('{0} --> {1}'.format(filename, newname))\n"
"\n"
"img_1074.jpg --> Ashley_0.jpg\n"
"img_1076.jpg --> Ashley_1.jpg\n"
"img_1077.jpg --> Ashley_2.jpg"

msgid ""
"Another application for templating is separating program logic from the "
"details of multiple output formats.  This makes it possible to substitute "
"custom templates for XML files, plain text reports, and HTML web reports."
msgstr ""
"Ett annat användningsområde för mallar är att skilja programlogiken från "
"detaljerna i olika utdataformat.  Detta gör det möjligt att ersätta "
"anpassade mallar för XML-filer, rapporter i klartext och HTML-webbrapporter."

msgid "Working with Binary Data Record Layouts"
msgstr "Arbeta med layouter för binära dataposter"

msgid ""
"The :mod:`struct` module provides :func:`~struct.pack` and :func:`~struct."
"unpack` functions for working with variable length binary record formats.  "
"The following example shows how to loop through header information in a ZIP "
"file without using the :mod:`zipfile` module.  Pack codes ``\"H\"`` and "
"``\"I\"`` represent two and four byte unsigned numbers respectively.  The "
"``\"<\"`` indicates that they are standard size and in little-endian byte "
"order::"
msgstr ""
"Modulen :mod:`struct` innehåller funktionerna :func:`~struct.pack` och :func:"
"`~struct.unpack` för att arbeta med binära postformat med variabel längd.  "
"Följande exempel visar hur man loopar genom headerinformation i en ZIP-fil "
"utan att använda modulen :mod:`zipfile`.  Paketkoderna ``\"H\"`` och "
"``\"I\"`` representerar osignerade tal på två respektive fyra byte.  Tecknet "
"``\"<\"`` anger att de är av standardstorlek och i little-endian "
"byteordning::"

msgid ""
"import struct\n"
"\n"
"with open('myfile.zip', 'rb') as f:\n"
"    data = f.read()\n"
"\n"
"start = 0\n"
"for i in range(3):                      # show the first 3 file headers\n"
"    start += 14\n"
"    fields = struct.unpack('<IIIHH', data[start:start+16])\n"
"    crc32, comp_size, uncomp_size, filenamesize, extra_size = fields\n"
"\n"
"    start += 16\n"
"    filename = data[start:start+filenamesize]\n"
"    start += filenamesize\n"
"    extra = data[start:start+extra_size]\n"
"    print(filename, hex(crc32), comp_size, uncomp_size)\n"
"\n"
"    start += extra_size + comp_size     # skip to the next header"
msgstr ""
"import struct\n"
"\n"
"with open('myfile.zip', 'rb') as f:\n"
"    data = f.read()\n"
"\n"
"start = 0\n"
"for i in range(3):                      # show the first 3 file headers\n"
"    start += 14\n"
"    fields = struct.unpack('<IIIHH', data[start:start+16])\n"
"    crc32, comp_size, uncomp_size, filenamesize, extra_size = fields\n"
"\n"
"    start += 16\n"
"    filename = data[start:start+filenamesize]\n"
"    start += filenamesize\n"
"    extra = data[start:start+extra_size]\n"
"    print(filename, hex(crc32), comp_size, uncomp_size)\n"
"\n"
"    start += extra_size + comp_size     # skip to the next header"

msgid "Multi-threading"
msgstr "Multi-threading"

msgid ""
"Threading is a technique for decoupling tasks which are not sequentially "
"dependent.  Threads can be used to improve the responsiveness of "
"applications that accept user input while other tasks run in the "
"background.  A related use case is running I/O in parallel with computations "
"in another thread."
msgstr ""
"Trådning är en teknik för att frikoppla uppgifter som inte är sekventiellt "
"beroende av varandra.  Trådar kan användas för att förbättra responsen i "
"applikationer som accepterar användarinmatning medan andra uppgifter körs i "
"bakgrunden.  Ett relaterat användningsfall är att köra I/O parallellt med "
"beräkningar i en annan tråd."

msgid ""
"The following code shows how the high level :mod:`threading` module can run "
"tasks in background while the main program continues to run::"
msgstr ""
"Följande kod visar hur högnivåmodulen :mod:`threading` kan köra uppgifter i "
"bakgrunden medan huvudprogrammet fortsätter att köras::"

msgid ""
"import threading, zipfile\n"
"\n"
"class AsyncZip(threading.Thread):\n"
"    def __init__(self, infile, outfile):\n"
"        threading.Thread.__init__(self)\n"
"        self.infile = infile\n"
"        self.outfile = outfile\n"
"\n"
"    def run(self):\n"
"        f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)\n"
"        f.write(self.infile)\n"
"        f.close()\n"
"        print('Finished background zip of:', self.infile)\n"
"\n"
"background = AsyncZip('mydata.txt', 'myarchive.zip')\n"
"background.start()\n"
"print('The main program continues to run in foreground.')\n"
"\n"
"background.join()    # Wait for the background task to finish\n"
"print('Main program waited until background was done.')"
msgstr ""
"import threading, zipfile\n"
"\n"
"class AsyncZip(threading.Thread):\n"
"    def __init__(self, infile, outfile):\n"
"        threading.Thread.__init__(self)\n"
"        self.infile = infile\n"
"        self.outfile = outfile\n"
"\n"
"    def run(self):\n"
"        f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)\n"
"        f.write(self.infile)\n"
"        f.close()\n"
"        print('Finished background zip of:', self.infile)\n"
"\n"
"background = AsyncZip('mydata.txt', 'myarchive.zip')\n"
"background.start()\n"
"print('The main program continues to run in foreground.')\n"
"\n"
"background.join()    # Wait for the background task to finish\n"
"print('Main program waited until background was done.')"

msgid ""
"The principal challenge of multi-threaded applications is coordinating "
"threads that share data or other resources.  To that end, the threading "
"module provides a number of synchronization primitives including locks, "
"events, condition variables, and semaphores."
msgstr ""
"Den största utmaningen med flertrådade program är att koordinera trådar som "
"delar data eller andra resurser.  För detta ändamål tillhandahåller "
"trådningsmodulen ett antal synkroniseringsprimitiver, inklusive lås, "
"händelser, villkorsvariabler och semaforer."

msgid ""
"While those tools are powerful, minor design errors can result in problems "
"that are difficult to reproduce.  So, the preferred approach to task "
"coordination is to concentrate all access to a resource in a single thread "
"and then use the :mod:`queue` module to feed that thread with requests from "
"other threads. Applications using :class:`~queue.Queue` objects for inter-"
"thread communication and coordination are easier to design, more readable, "
"and more reliable."
msgstr ""
"Även om dessa verktyg är kraftfulla kan mindre konstruktionsfel leda till "
"problem som är svåra att reproducera.  Det bästa sättet att samordna "
"uppgifter är därför att koncentrera all åtkomst till en resurs till en enda "
"tråd och sedan använda modulen :mod:`queue` för att mata den tråden med "
"förfrågningar från andra trådar. Program som använder :class:`~queue.Queue`-"
"objekt för kommunikation och samordning mellan trådar är enklare att "
"utforma, mer läsbara och mer tillförlitliga."

msgid "Logging"
msgstr "Loggning"

msgid ""
"The :mod:`logging` module offers a full featured and flexible logging "
"system. At its simplest, log messages are sent to a file or to ``sys."
"stderr``::"
msgstr ""
"Modulen :mod:`logging` erbjuder ett fullt utrustat och flexibelt "
"loggningssystem. I sin enklaste form skickas loggmeddelanden till en fil "
"eller till ``sys.stderr``::"

msgid ""
"import logging\n"
"logging.debug('Debugging information')\n"
"logging.info('Informational message')\n"
"logging.warning('Warning:config file %s not found', 'server.conf')\n"
"logging.error('Error occurred')\n"
"logging.critical('Critical error -- shutting down')"
msgstr ""
"import loggning\n"
"logging.debug('Felsökningsinformation')\n"
"logging.info('Informativt meddelande')\n"
"logging.warning('Varning:config-filen %s hittades inte', 'server.conf')\n"
"logging.error('Fel inträffade')\n"
"logging.critical('Kritiskt fel - stängs av')"

msgid "This produces the following output:"
msgstr "Detta ger följande resultat:"

msgid ""
"WARNING:root:Warning:config file server.conf not found\n"
"ERROR:root:Error occurred\n"
"CRITICAL:root:Critical error -- shutting down"
msgstr ""
"WARNING:root:Warning:config-filen server.conf hittades inte\n"
"ERROR:root:Fel inträffade\n"
"CRITICAL:root:Kritiskt fel -- stänger ner"

msgid ""
"By default, informational and debugging messages are suppressed and the "
"output is sent to standard error.  Other output options include routing "
"messages through email, datagrams, sockets, or to an HTTP Server.  New "
"filters can select different routing based on message priority: :const:"
"`~logging.DEBUG`, :const:`~logging.INFO`, :const:`~logging.WARNING`, :const:"
"`~logging.ERROR`, and :const:`~logging.CRITICAL`."
msgstr ""
"Som standard undertrycks informations- och felsökningsmeddelanden och utdata "
"skickas till standardfel.  Andra utdataalternativ inkluderar dirigering av "
"meddelanden via e-post, datagram, socklar eller till en HTTP-server.  Nya "
"filter kan välja olika routning baserat på meddelandets prioritet: :const:"
"`~logging.DEBUG`, :const:`~logging.INFO`, :const:`~logging.WARNING`, :const:"
"`~logging.ERROR` och :const:`~logging.CRITICAL`."

msgid ""
"The logging system can be configured directly from Python or can be loaded "
"from a user editable configuration file for customized logging without "
"altering the application."
msgstr ""
"Loggningssystemet kan konfigureras direkt från Python eller laddas från en "
"konfigurationsfil som kan redigeras av användaren för anpassad loggning utan "
"att applikationen behöver ändras."

msgid "Weak References"
msgstr "Svaga referenser"

msgid ""
"Python does automatic memory management (reference counting for most objects "
"and :term:`garbage collection` to eliminate cycles).  The memory is freed "
"shortly after the last reference to it has been eliminated."
msgstr ""
"Python gör automatisk minneshantering (referensräkning för de flesta objekt "
"och :term:`garbage collection` för att eliminera cykler).  Minnet frigörs "
"kort efter att den sista referensen till det har eliminerats."

msgid ""
"This approach works fine for most applications but occasionally there is a "
"need to track objects only as long as they are being used by something else. "
"Unfortunately, just tracking them creates a reference that makes them "
"permanent. The :mod:`weakref` module provides tools for tracking objects "
"without creating a reference.  When the object is no longer needed, it is "
"automatically removed from a weakref table and a callback is triggered for "
"weakref objects.  Typical applications include caching objects that are "
"expensive to create::"
msgstr ""
"Detta tillvägagångssätt fungerar bra för de flesta tillämpningar, men ibland "
"finns det ett behov av att spåra objekt endast så länge de används av något "
"annat. Tyvärr skapar bara spårningen av dem en referens som gör dem "
"permanenta. Modulen :mod:`weakref` ger verktyg för att spåra objekt utan att "
"skapa en referens.  När objektet inte längre behövs tas det automatiskt bort "
"från en weakref-tabell och en återuppringning utlöses för weakref-objekt.  "
"Typiska tillämpningar inkluderar cachelagring av objekt som är dyra att "
"skapa::"

msgid ""
">>> import weakref, gc\n"
">>> class A:\n"
"...     def __init__(self, value):\n"
"...         self.value = value\n"
"...     def __repr__(self):\n"
"...         return str(self.value)\n"
"...\n"
">>> a = A(10)                   # create a reference\n"
">>> d = weakref.WeakValueDictionary()\n"
">>> d['primary'] = a            # does not create a reference\n"
">>> d['primary']                # fetch the object if it is still alive\n"
"10\n"
">>> del a                       # remove the one reference\n"
">>> gc.collect()                # run garbage collection right away\n"
"0\n"
">>> d['primary']                # entry was automatically removed\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"    d['primary']                # entry was automatically removed\n"
"  File \"C:/python314/lib/weakref.py\", line 46, in __getitem__\n"
"    o = self.data[key]()\n"
"KeyError: 'primary'"
msgstr ""
"&gt;&gt;&gt; import svagref, gc\n"
"&gt;&gt;&gt; klass A:\n"
"... def __init__(self, value):\n"
"... self.value = värde\n"
"... def __repr__(self):\n"
"... return str(self.value)\n"
"...\n"
"&gt;&gt;&gt; a = A(10) # skapa en referens\n"
"&gt;&gt;&gt; d = weakref.WeakValueDictionary()\n"
"&gt;&gt;&gt; d['primary'] = a # skapar inte en referens\n"
"&gt;&gt;&gt; d['primary'] # hämta objektet om det fortfarande är vid liv\n"
"10\n"
"&gt;&gt;&gt; del a # ta bort den ena referensen\n"
"&gt;&gt;&gt; gc.collect() # kör skräpinsamling direkt\n"
"0\n"
"&gt;&gt;&gt; d['primary'] # posten togs bort automatiskt\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i <module>\n"
"    d['primary'] # posten togs bort automatiskt\n"
"  Fil \"C:/python314/lib/weakref.py\", rad 46, i __getitem__\n"
"    o = self.data[nyckel]()\n"
"KeyError: 'primär'"

msgid "Tools for Working with Lists"
msgstr "Verktyg för att arbeta med listor"

msgid ""
"Many data structure needs can be met with the built-in list type. However, "
"sometimes there is a need for alternative implementations with different "
"performance trade-offs."
msgstr ""
"Många behov av datastrukturer kan tillgodoses med den inbyggda listtypen. "
"Ibland finns det dock behov av alternativa implementeringar med olika "
"prestandakompromisser."

msgid ""
"The :mod:`array` module provides an :class:`~array.array` object that is "
"like a list that stores only homogeneous data and stores it more compactly.  "
"The following example shows an array of numbers stored as two byte unsigned "
"binary numbers (typecode ``\"H\"``) rather than the usual 16 bytes per entry "
"for regular lists of Python int objects::"
msgstr ""
"Modulen :mod:`array` tillhandahåller ett :class:`~array.array`-objekt som är "
"som en lista som bara lagrar homogena data och lagrar dem mer kompakt.  "
"Följande exempel visar en matris med tal som lagras som två byte osignerade "
"binära tal (typkod ``\"H\"``) i stället för de vanliga 16 byte per post för "
"vanliga listor med Python int-objekt::"

msgid ""
">>> from array import array\n"
">>> a = array('H', [4000, 10, 700, 22222])\n"
">>> sum(a)\n"
"26932\n"
">>> a[1:3]\n"
"array('H', [10, 700])"
msgstr ""
">>> from array import array\n"
">>> a = array('H', [4000, 10, 700, 22222])\n"
">>> sum(a)\n"
"26932\n"
">>> a[1:3]\n"
"array('H', [10, 700])"

msgid ""
"The :mod:`collections` module provides a :class:`~collections.deque` object "
"that is like a list with faster appends and pops from the left side but "
"slower lookups in the middle. These objects are well suited for implementing "
"queues and breadth first tree searches::"
msgstr ""
"Modulen :mod:`collections` tillhandahåller ett :class:`~collections.deque`-"
"objekt som är som en lista med snabbare appends och pops från vänster sida "
"men långsammare lookups i mitten. Dessa objekt är väl lämpade för att "
"implementera köer och breda första trädsökningar::"

msgid ""
">>> from collections import deque\n"
">>> d = deque([\"task1\", \"task2\", \"task3\"])\n"
">>> d.append(\"task4\")\n"
">>> print(\"Handling\", d.popleft())\n"
"Handling task1"
msgstr ""
">>> from collections import deque\n"
">>> d = deque([\"uppgift1\", \"uppgift2\", \"uppgift3\"])\n"
">>> d.append(\"uppgift4\")\n"
">>> print(\"Hantering\", d.popleft())\n"
"Hantering av uppgift1"

msgid ""
"unsearched = deque([starting_node])\n"
"def breadth_first_search(unsearched):\n"
"    node = unsearched.popleft()\n"
"    for m in gen_moves(node):\n"
"        if is_goal(m):\n"
"            return m\n"
"        unsearched.append(m)"
msgstr ""
"unsearched = deque([start_node])\n"
"def breadth_first_search(unsearched):\n"
"    nod = unsearched.popleft()\n"
"    för m i gen_moves(nod):\n"
"        if is_goal(m):\n"
"            returnera m\n"
"        unsearched.append(m)"

msgid ""
"In addition to alternative list implementations, the library also offers "
"other tools such as the :mod:`bisect` module with functions for manipulating "
"sorted lists::"
msgstr ""
"Förutom alternativa implementeringar av listor erbjuder biblioteket även "
"andra verktyg, t.ex. modulen :mod:`bisect` med funktioner för att manipulera "
"sorterade listor::"

msgid ""
">>> import bisect\n"
">>> scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]\n"
">>> bisect.insort(scores, (300, 'ruby'))\n"
">>> scores\n"
"[(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]"
msgstr ""
">>> import bisect\n"
">>> scores = [(100, 'perl'), (200, 'tcl'), (400, 'lua'), (500, 'python')]\n"
">>> bisect.insort(poäng, (300, 'ruby'))\n"
">>> poäng\n"
"[(100, 'perl'), (200, 'tcl'), (300, 'ruby'), (400, 'lua'), (500, 'python')]"

msgid ""
"The :mod:`heapq` module provides functions for implementing heaps based on "
"regular lists.  The lowest valued entry is always kept at position zero.  "
"This is useful for applications which repeatedly access the smallest element "
"but do not want to run a full list sort::"
msgstr ""
"Modulen :mod:`heapq` tillhandahåller funktioner för att implementera högar "
"baserade på vanliga listor.  Den lägst värderade posten hålls alltid på "
"position noll.  Detta är användbart för applikationer som upprepade gånger "
"vill komma åt det minsta elementet men inte vill köra en fullständig list "
"sortering::"

msgid ""
">>> from heapq import heapify, heappop, heappush\n"
">>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n"
">>> heapify(data)                      # rearrange the list into heap order\n"
">>> heappush(data, -5)                 # add a new entry\n"
">>> [heappop(data) for i in range(3)]  # fetch the three smallest entries\n"
"[-5, 0, 1]"
msgstr ""
">>> from heapq import heapify, heappop, heappush\n"
">>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n"
">>> heapify(data)                      # rearrange the list into heap order\n"
">>> heappush(data, -5)                 # add a new entry\n"
">>> [heappop(data) for i in range(3)]  # fetch the three smallest entries\n"
"[-5, 0, 1]"

msgid "Decimal Floating-Point Arithmetic"
msgstr "Decimal Aritmetik med flyttal"

msgid ""
"The :mod:`decimal` module offers a :class:`~decimal.Decimal` datatype for "
"decimal floating-point arithmetic.  Compared to the built-in :class:`float` "
"implementation of binary floating point, the class is especially helpful for"
msgstr ""
"Modulen :mod:`decimal` erbjuder en :class:`~decimal.Decimal`-datatyp för "
"decimal aritmetik med flyttal.  Jämfört med den inbyggda :class:`float`-"
"implementeringen av binär flyttalsaritmetik är klassen särskilt användbar för"

msgid ""
"financial applications and other uses which require exact decimal "
"representation,"
msgstr ""
"finansiella applikationer och andra användningsområden som kräver exakt "
"decimal representation,"

msgid "control over precision,"
msgstr "kontroll över precision,"

msgid "control over rounding to meet legal or regulatory requirements,"
msgstr ""
"kontroll över avrundningar för att uppfylla lagstadgade eller regulatoriska "
"krav,"

msgid "tracking of significant decimal places, or"
msgstr "spårning av signifikanta decimaler, eller"

msgid ""
"applications where the user expects the results to match calculations done "
"by hand."
msgstr ""
"applikationer där användaren förväntar sig att resultaten ska matcha "
"beräkningar som gjorts för hand."

msgid ""
"For example, calculating a 5% tax on a 70 cent phone charge gives different "
"results in decimal floating point and binary floating point. The difference "
"becomes significant if the results are rounded to the nearest cent::"
msgstr ""
"Om man t.ex. beräknar 5% tax för en telefonavgift på 70 cent får man olika "
"resultat med decimalt flyttal och binärt flyttal. Skillnaden blir betydande "
"om resultaten avrundas till närmaste cent:"

msgid ""
">>> from decimal import *\n"
">>> round(Decimal('0.70') * Decimal('1.05'), 2)\n"
"Decimal('0.74')\n"
">>> round(.70 * 1.05, 2)\n"
"0.73"
msgstr ""
">>> från decimal import *\n"
">>> round(Decimal('0,70') * Decimal('1,05'), 2)\n"
"Decimal('0,74')\n"
">>> runda(.70 * 1.05, 2)\n"
"0.73"

msgid ""
"The :class:`~decimal.Decimal` result keeps a trailing zero, automatically "
"inferring four place significance from multiplicands with two place "
"significance.  Decimal reproduces mathematics as done by hand and avoids "
"issues that can arise when binary floating point cannot exactly represent "
"decimal quantities."
msgstr ""
"Resultatet av :class:`~decimal.Decimal` behåller en efterföljande nolla och "
"härleder automatiskt fyrställig signifikans från multiplikander med "
"tvåställig signifikans.  Decimal återger matematiken som den görs för hand "
"och undviker problem som kan uppstå när binär flyttal inte exakt kan "
"representera decimala kvantiteter."

msgid ""
"Exact representation enables the :class:`~decimal.Decimal` class to perform "
"modulo calculations and equality tests that are unsuitable for binary "
"floating point::"
msgstr ""
"Exakt representation gör det möjligt för klassen :class:`~decimal.Decimal` "
"att utföra modulo-beräkningar och likhetstester som är olämpliga för binär "
"flyttal::"

msgid ""
">>> Decimal('1.00') % Decimal('.10')\n"
"Decimal('0.00')\n"
">>> 1.00 % 0.10\n"
"0.09999999999999995\n"
"\n"
">>> sum([Decimal('0.1')]*10) == Decimal('1.0')\n"
"True\n"
">>> 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 == 1.0\n"
"False"
msgstr ""
">>> Decimal('1.00') % Decimal('.10')\n"
"Decimal('0,00')\n"
">>> 1.00 % 0.10\n"
"0.09999999999999995\n"
"\n"
">>> sum([Decimal('0,1')]*10) == Decimal('1,0')\n"
"Sant\n"
">>> 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 == 1.0\n"
"Falskt"

msgid ""
"The :mod:`decimal` module provides arithmetic with as much precision as "
"needed::"
msgstr ""
"Modulen :mod:`decimal` ger aritmetik med så stor precision som behövs::"

msgid ""
">>> getcontext().prec = 36\n"
">>> Decimal(1) / Decimal(7)\n"
"Decimal('0.142857142857142857142857142857142857')"
msgstr ""
">>> getcontext().prec = 36\n"
">>> Decimal(1) / Decimal(7)\n"
"Decimal('0.142857142857142857142857142857142857')"
