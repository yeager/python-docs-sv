# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!pty` --- Pseudo-terminal utilities"
msgstr ":mod:`!pty` --- Verktyg för pseudoterminal"

msgid "**Source code:** :source:`Lib/pty.py`"
msgstr "**Källkod:** :source:`Lib/pty.py`"

msgid ""
"The :mod:`pty` module defines operations for handling the pseudo-terminal "
"concept: starting another process and being able to write to and read from "
"its controlling terminal programmatically."
msgstr ""
"Modulen :mod:`pty` definierar operationer för hantering av "
"pseudoterminalbegreppet: att starta en annan process och kunna skriva till "
"och läsa från dess kontrollterminal programmatiskt."

msgid "Availability"
msgstr "Tillgänglighet"

msgid ""
"Pseudo-terminal handling is highly platform dependent. This code is mainly "
"tested on Linux, FreeBSD, and macOS (it is supposed to work on other POSIX "
"platforms but it's not been thoroughly tested)."
msgstr ""
"Hanteringen av pseudoterminaler är i hög grad plattformsberoende. Den här "
"koden är huvudsakligen testad på Linux, FreeBSD och macOS (den ska fungera "
"på andra POSIX-plattformar men har inte testats grundligt)."

msgid "The :mod:`pty` module defines the following functions:"
msgstr "Modulen :mod:`pty` definierar följande funktioner:"

msgid ""
"Fork. Connect the child's controlling terminal to a pseudo-terminal. Return "
"value is ``(pid, fd)``. Note that the child  gets *pid* 0, and the *fd* is "
"*invalid*. The parent's return value is the *pid* of the child, and *fd* is "
"a file descriptor connected to the child's controlling terminal (and also to "
"the child's standard input and output)."
msgstr ""
"Fork. Anslut underliggande kontrollterminal till en pseudoterminal. "
"Returvärdet är ``(pid, fd)``. Observera att barnet får *pid* 0 och att *fd* "
"är *invalid*. Förälderns returvärde är barnets *pid* och *fd* är en "
"filbeskrivare som är ansluten till barnets kontrollterminal (och även till "
"barnets standardinmatning och -utmatning)."

msgid ""
"On macOS the use of this function is unsafe when mixed with using higher-"
"level system APIs, and that includes using :mod:`urllib.request`."
msgstr ""
"På macOS är användningen av denna funktion osäker när den blandas med "
"användning av system-API:er på högre nivå, och det inkluderar användning av :"
"mod:`urllib.request`."

msgid ""
"Open a new pseudo-terminal pair, using :func:`os.openpty` if possible, or "
"emulation code for generic Unix systems. Return a pair of file descriptors "
"``(master, slave)``, for the master and the slave end, respectively."
msgstr ""
"Öppna ett nytt pseudoterminalpar, med :func:`os.openpty` om möjligt, eller "
"emuleringskod för generiska Unix-system. Returnera ett par filbeskrivare "
"``(master, slave)``, för master- respektive slave-änden."

msgid ""
"Spawn a process, and connect its controlling terminal with the current "
"process's standard io. This is often used to baffle programs which insist on "
"reading from the controlling terminal. It is expected that the process "
"spawned behind the pty will eventually terminate, and when it does *spawn* "
"will return."
msgstr ""
"Starta en process och anslut dess kontrollterminal till den aktuella "
"processens standard io. Detta används ofta för att förvirra program som "
"insisterar på att läsa från den kontrollerande terminalen. Det förväntas att "
"processen som startas bakom pty så småningom kommer att avslutas, och när "
"den gör det kommer *spawn* att returneras."

msgid ""
"A loop copies STDIN of the current process to the child and data received "
"from the child to STDOUT of the current process. It is not signaled to the "
"child if STDIN of the current process closes down."
msgstr ""
"En loop kopierar STDIN i den aktuella processen till barnet och data som tas "
"emot från barnet till STDOUT i den aktuella processen. Det signaleras inte "
"till barnet om STDIN i den aktuella processen stängs ned."

msgid ""
"The functions *master_read* and *stdin_read* are passed a file descriptor "
"which they should read from, and they should always return a byte string. In "
"order to force spawn to return before the child process exits an empty byte "
"array should be returned to signal end of file."
msgstr ""
"Funktionerna *master_read* och *stdin_read* får en filbeskrivare som de ska "
"läsa från och de ska alltid returnera en byte-sträng. För att tvinga spawn "
"att returnera innan barnprocessen avslutas bör en tom bytearray returneras "
"för att signalera slutet på filen."

msgid ""
"The default implementation for both functions will read and return up to "
"1024 bytes each time the function is called. The *master_read* callback is "
"passed the pseudoterminal’s master file descriptor to read output from the "
"child process, and *stdin_read* is passed file descriptor 0, to read from "
"the parent process's standard input."
msgstr ""
"Standardimplementeringen för båda funktionerna läser och returnerar upp till "
"1024 byte varje gång funktionen anropas. Återuppringningen *master_read* får "
"pseudoterminalens master file descriptor för att läsa utdata från "
"barnprocessen, och *stdin_read* får file descriptor 0 för att läsa från den "
"överordnade processens standardinmatning."

msgid ""
"Returning an empty byte string from either callback is interpreted as an end-"
"of-file (EOF) condition, and that callback will not be called after that. If "
"*stdin_read* signals EOF the controlling terminal can no longer communicate "
"with the parent process OR the child process. Unless the child process will "
"quit without any input, *spawn* will then loop forever. If *master_read* "
"signals EOF the same behavior results (on linux at least)."
msgstr ""
"Om en tom bytesträng returneras från något av återuppringningsprogrammen "
"tolkas det som ett EOF-villkor (end-of-file) och det "
"återuppringningsprogrammet kommer inte att anropas efter det. Om "
"*stdin_read* signalerar EOF kan den kontrollerande terminalen inte längre "
"kommunicera med moderprocessen eller barnprocessen. Om inte barnprocessen "
"kommer att avslutas utan någon indata kommer *spawn* att loopa för evigt. Om "
"*master_read* signalerar EOF blir resultatet detsamma (åtminstone på Linux)."

msgid ""
"Return the exit status value from :func:`os.waitpid` on the child process."
msgstr ""
"Returnerar utgångsstatusvärdet från :func:`os.waitpid` på underordnad "
"process."

msgid ""
":func:`os.waitstatus_to_exitcode` can be used to convert the exit status "
"into an exit code."
msgstr ""
":func:`os.waitstatus_to_exitcode` kan användas för att konvertera "
"utgångsstatus till en utgångskod."

msgid ""
"Raises an :ref:`auditing event <auditing>` ``pty.spawn`` with argument "
"``argv``."
msgstr ""
"Utlöser en :ref:`auditing event <auditing>` ``pty.spawn`` med argumentet "
"``argv``."

msgid ""
":func:`spawn` now returns the status value from :func:`os.waitpid` on the "
"child process."
msgstr ""
":func:`spawn` returnerar nu statusvärdet från :func:`os.waitpid` på "
"barnprocessen."

msgid "Example"
msgstr "Exempel"

msgid ""
"The following program acts like the Unix command :manpage:`script(1)`, using "
"a pseudo-terminal to record all input and output of a terminal session in a "
"\"typescript\". ::"
msgstr ""
"Följande program fungerar som Unix-kommandot :manpage:`script(1)` och "
"använder en pseudoterminal för att registrera alla in- och utdata i en "
"terminalsession i ett \"typescript\". ::"

msgid ""
"import argparse\n"
"import os\n"
"import pty\n"
"import sys\n"
"import time\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument('-a', dest='append', action='store_true')\n"
"parser.add_argument('-p', dest='use_python', action='store_true')\n"
"parser.add_argument('filename', nargs='?', default='typescript')\n"
"options = parser.parse_args()\n"
"\n"
"shell = sys.executable if options.use_python else os.environ.get('SHELL', "
"'sh')\n"
"filename = options.filename\n"
"mode = 'ab' if options.append else 'wb'\n"
"\n"
"with open(filename, mode) as script:\n"
"    def read(fd):\n"
"        data = os.read(fd, 1024)\n"
"        script.write(data)\n"
"        return data\n"
"\n"
"    print('Script started, file is', filename)\n"
"    script.write(('Script started on %s\\n' % time.asctime()).encode())\n"
"\n"
"    pty.spawn(shell, read)\n"
"\n"
"    script.write(('Script done on %s\\n' % time.asctime()).encode())\n"
"    print('Script done, file is', filename)"
msgstr ""
"import argparse\n"
"import os\n"
"import pty\n"
"import sys\n"
"import time\n"
"\n"
"parser = argparse.ArgumentParser()\n"
"parser.add_argument('-a', dest='append', action='store_true')\n"
"parser.add_argument('-p', dest='use_python', action='store_true')\n"
"parser.add_argument('filename', nargs='?', default='typescript')\n"
"options = parser.parse_args()\n"
"\n"
"shell = sys.executable if options.use_python else os.environ.get('SHELL', "
"'sh')\n"
"filename = options.filename\n"
"mode = 'ab' if options.append else 'wb'\n"
"\n"
"with open(filename, mode) as script:\n"
"    def read(fd):\n"
"        data = os.read(fd, 1024)\n"
"        script.write(data)\n"
"        return data\n"
"\n"
"    print('Script started, file is', filename)\n"
"    script.write(('Script started on %s\\n' % time.asctime()).encode())\n"
"\n"
"    pty.spawn(shell, read)\n"
"\n"
"    script.write(('Script done on %s\\n' % time.asctime()).encode())\n"
"    print('Script done, file is', filename)"
