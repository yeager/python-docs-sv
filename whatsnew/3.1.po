# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 20:38+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's New In Python 3.1"
msgstr "Vad är nytt i Python 3.1"

msgid "Author"
msgstr "Författare"

msgid "Raymond Hettinger"
msgstr "Raymond Hettinger"

msgid ""
"This article explains the new features in Python 3.1, compared to 3.0. "
"Python 3.1 was released on June 27, 2009."
msgstr ""
"I den här artikeln förklaras de nya funktionerna i Python 3.1 jämfört med "
"3.0. Python 3.1 släpptes den 27 juni 2009."

msgid "PEP 372: Ordered Dictionaries"
msgstr "PEP 372: Ordnade ordböcker"

msgid ""
"Regular Python dictionaries iterate over key/value pairs in arbitrary order. "
"Over the years, a number of authors have written alternative implementations "
"that remember the order that the keys were originally inserted.  Based on "
"the experiences from those implementations, a new :class:`collections."
"OrderedDict` class has been introduced."
msgstr ""
"Vanliga Python-ordböcker itererar över nyckel/värde-par i godtycklig "
"ordning. Under årens lopp har ett antal författare skrivit alternativa "
"implementationer som kommer ihåg den ordning som nycklarna ursprungligen "
"infogades.  Baserat på erfarenheterna från dessa implementationer har en ny :"
"class:`collections.OrderedDict`-klass introducerats."

msgid ""
"The OrderedDict API is substantially the same as regular dictionaries but "
"will iterate over keys and values in a guaranteed order depending on when a "
"key was first inserted.  If a new entry overwrites an existing entry, the "
"original insertion position is left unchanged.  Deleting an entry and "
"reinserting it will move it to the end."
msgstr ""
"OrderedDict API är i stort sett detsamma som vanliga ordböcker men kommer "
"att iterera över nycklar och värden i en garanterad ordning beroende på när "
"en nyckel först infogades.  Om en ny post skriver över en befintlig post "
"lämnas den ursprungliga inmatningspositionen oförändrad.  Om du tar bort en "
"post och lägger in den igen flyttas den till slutet."

msgid ""
"The standard library now supports use of ordered dictionaries in several "
"modules.  The :mod:`configparser` module uses them by default.  This lets "
"configuration files be read, modified, and then written back in their "
"original order.  The *_asdict()* method for :func:`collections.namedtuple` "
"now returns an ordered dictionary with the values appearing in the same "
"order as the underlying tuple indices.  The :mod:`json` module is being "
"built-out with an *object_pairs_hook* to allow OrderedDicts to be built by "
"the decoder. Support was also added for third-party tools like `PyYAML "
"<https://pyyaml.org/>`_."
msgstr ""
"Standardbiblioteket stöder nu användning av ordnade lexikon i flera "
"moduler.  Modulen :mod:`configparser` använder dem som standard.  Detta gör "
"att konfigurationsfiler kan läsas, ändras och sedan skrivas tillbaka i sin "
"ursprungliga ordning.  Metoden *_asdict()* för :func:`collections."
"namedtuple` returnerar nu en ordnad ordbok där värdena visas i samma ordning "
"som de underliggande tuple-indexen.  Modulen :mod:`json` håller på att "
"byggas ut med en *object_pairs_hook* för att OrderedDicts ska kunna byggas "
"av avkodaren. Stöd har även lagts till för tredjepartsverktyg som `PyYAML "
"<https://pyyaml.org/>`_."

msgid ":pep:`372` - Ordered Dictionaries"
msgstr ":pep:`372` - Ordnade ordböcker"

msgid ""
"PEP written by Armin Ronacher and Raymond Hettinger.  Implementation written "
"by Raymond Hettinger."
msgstr ""
"PEP skriven av Armin Ronacher och Raymond Hettinger.  Implementation skriven "
"av Raymond Hettinger."

msgid ""
"Since an ordered dictionary remembers its insertion order, it can be used in "
"conjunction with sorting to make a sorted dictionary::"
msgstr ""
"Eftersom en ordnad ordbok kommer ihåg sin inmatningsordning kan den användas "
"tillsammans med sortering för att skapa en sorterad ordbok::"

msgid ""
">>> # regular unsorted dictionary\n"
">>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}\n"
"\n"
">>> # dictionary sorted by key\n"
">>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))\n"
"OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])\n"
"\n"
">>> # dictionary sorted by value\n"
">>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))\n"
"OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])\n"
"\n"
">>> # dictionary sorted by length of the key string\n"
">>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))\n"
"OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])"
msgstr ""
">>> # vanlig osorterad ordbok\n"
">>> d = {'banan': 3, 'äpple':4, 'päron': 1, 'apelsin': 2}\n"
"\n"
">>> # ordbok sorterad efter nyckel\n"
">>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))\n"
"OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])\n"
"\n"
">>> # ordbok sorterad efter värde\n"
">>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))\n"
"OrderedDict([('päron', 1), ('apelsin', 2), ('banan', 3), ('äpple', 4)])\n"
"\n"
">>> # ordbok sorterad efter nyckelsträngens längd\n"
">>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))\n"
"OrderedDict([('päron', 1), ('äpple', 4), ('apelsin', 2), ('banan', 3)])"

msgid ""
"The new sorted dictionaries maintain their sort order when entries are "
"deleted.  But when new keys are added, the keys are appended to the end and "
"the sort is not maintained."
msgstr ""
"De nya sorterade lexikonen behåller sin sorteringsordning när poster "
"raderas.  Men när nya nycklar läggs till, läggs nycklarna till i slutet och "
"sorteringen bibehålls inte."

msgid "PEP 378: Format Specifier for Thousands Separator"
msgstr "PEP 378: Formatspecifikator för tusentalsavgränsare"

msgid ""
"The built-in :func:`format` function and the :meth:`str.format` method use a "
"mini-language that now includes a simple, non-locale aware way to format a "
"number with a thousands separator.  That provides a way to humanize a "
"program's output, improving its professional appearance and readability::"
msgstr ""
"Den inbyggda funktionen :func:`format` och metoden :meth:`str.format` "
"använder ett minispråk som nu innehåller ett enkelt, icke-lokalanpassat sätt "
"att formatera ett tal med en tusentalsavgränsare.  Det ger ett sätt att "
"humanisera ett programs utdata, förbättra dess professionella utseende och "
"läsbarhet::"

msgid ""
">>> format(1234567, ',d')\n"
"'1,234,567'\n"
">>> format(1234567.89, ',.2f')\n"
"'1,234,567.89'\n"
">>> format(12345.6 + 8901234.12j, ',f')\n"
"'12,345.600000+8,901,234.120000j'\n"
">>> format(Decimal('1234567.89'), ',f')\n"
"'1,234,567.89'"
msgstr ""
">>> format(1234567, ',d')\n"
"'1,234,567'\n"
">>> format(1234567.89, ',.2f')\n"
"'1,234,567.89'\n"
">>> format(12345.6 + 8901234.12j, ',f')\n"
"'12,345.600000+8,901,234.120000j'\n"
">>> format(Decimal('1234567.89'), ',f')\n"
"'1,234,567.89'"

msgid ""
"The supported types are :class:`int`, :class:`float`, :class:`complex` and :"
"class:`decimal.Decimal`."
msgstr ""
"De typer som stöds är :class:`int`, :class:`float`, :class:`complex` och :"
"class:`decimal.decimal`."

msgid ""
"Discussions are underway about how to specify alternative separators like "
"dots, spaces, apostrophes, or underscores.  Locale-aware applications should "
"use the existing *n* format specifier which already has some support for "
"thousands separators."
msgstr ""
"Diskussioner pågår om hur man ska ange alternativa avgränsare som punkter, "
"mellanslag, apostrofer eller understrykningstecken.  Lokalt anpassade "
"program bör använda den befintliga formatspecificeraren *n* som redan har "
"visst stöd för tusentals separatorer."

msgid ":pep:`378` - Format Specifier for Thousands Separator"
msgstr ":pep:`378` - Formatspecifikator för tusentalsavgränsare"

msgid ""
"PEP written by Raymond Hettinger and implemented by Eric Smith and Mark "
"Dickinson."
msgstr ""
"PEP skriven av Raymond Hettinger och implementerad av Eric Smith och Mark "
"Dickinson."

msgid "Other Language Changes"
msgstr "Andra språkliga förändringar"

msgid "Some smaller changes made to the core Python language are:"
msgstr "Några mindre ändringar som gjorts i Python-språkets kärna är:"

msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can now "
"be executed directly by passing their name to the interpreter. The directory/"
"zipfile is automatically inserted as the first entry in sys.path.  "
"(Suggestion and initial patch by Andy Chu; revised patch by Phillip J. Eby "
"and Nick Coghlan; :issue:`1739468`.)"
msgstr ""
"Kataloger och zip-arkiv som innehåller en :file:`__main__.py`-fil kan nu "
"exekveras direkt genom att namnet anges till tolken. Katalogen/zipfilen "
"infogas automatiskt som den första posten i sys.path.  (Förslag och "
"ursprunglig patch av Andy Chu; reviderad patch av Phillip J. Eby och Nick "
"Coghlan; :issue:`1739468`.)"

msgid ""
"The :func:`int` type gained a ``bit_length`` method that returns the number "
"of bits necessary to represent its argument in binary::"
msgstr ""
"Typen :func:`int` har en metod ``bit_length`` som returnerar det antal bitar "
"som krävs för att representera argumentet i binärformat:"

msgid ""
">>> n = 37\n"
">>> bin(37)\n"
"'0b100101'\n"
">>> n.bit_length()\n"
"6\n"
">>> n = 2**123-1\n"
">>> n.bit_length()\n"
"123\n"
">>> (n+1).bit_length()\n"
"124"
msgstr ""
">>> n = 37\n"
">>> bin(37)\n"
"'0b100101'\n"
">>> n.bit_längd()\n"
"6\n"
">>> n = 2**123-1\n"
">>> n.bit_längd()\n"
"123\n"
">>> (n+1).bit_längd()\n"
"124"

msgid ""
"(Contributed by Fredrik Johansson, Victor Stinner, Raymond Hettinger, and "
"Mark Dickinson; :issue:`3439`.)"
msgstr ""
"(Bidrag från Fredrik Johansson, Victor Stinner, Raymond Hettinger och Mark "
"Dickinson; :issue:`3439`.)"

msgid ""
"The fields in :func:`format` strings can now be automatically numbered::"
msgstr "Fälten i :func:`format`-strängar kan nu numreras automatiskt::"

msgid ""
">>> 'Sir {} of {}'.format('Gallahad', 'Camelot')\n"
"'Sir Gallahad of Camelot'"
msgstr ""
">>> 'Sir {} av {}'.format('Gallahad', 'Camelot')\n"
"\"Sir Gallahad av Camelot"

msgid ""
"Formerly, the string would have required numbered fields such as: ``'Sir {0} "
"of {1}'``."
msgstr ""
"Tidigare skulle strängen ha krävt numrerade fält som t.ex: ``'Sir {0} av "
"{1}'``."

msgid "(Contributed by Eric Smith; :issue:`5237`.)"
msgstr "(Bidrag från Eric Smith; :issue:`5237`.)"

msgid ""
"The :func:`!string.maketrans` function is deprecated and is replaced by new "
"static methods, :meth:`bytes.maketrans` and :meth:`bytearray.maketrans`. "
"This change solves the confusion around which types were supported by the :"
"mod:`string` module. Now, :class:`str`, :class:`bytes`, and :class:"
"`bytearray` each have their own **maketrans** and **translate** methods with "
"intermediate translation tables of the appropriate type."
msgstr ""
"Funktionen :func:`!string.maketrans` är utdaterad och ersätts av nya "
"statiska metoder, :meth:`bytes.maketrans` och :meth:`bytearray.maketrans`. "
"Den här ändringen löser förvirringen kring vilka typer som stöds av modulen :"
"mod:`string`. Nu har :class:`str`, :class:`bytes` och :class:`bytearray` var "
"och en sina egna **maketrans**- och **translate**-metoder med mellanliggande "
"översättningstabeller av lämplig typ."

msgid "(Contributed by Georg Brandl; :issue:`5675`.)"
msgstr "(Bidrag från Georg Brandl; :issue:`5675`.)"

msgid ""
"The syntax of the :keyword:`with` statement now allows multiple context "
"managers in a single statement::"
msgstr ""
"Syntaxen för :keyword:`with`-satsen tillåter nu flera kontexthanterare i en "
"enda sats::"

msgid ""
">>> with open('mylog.txt') as infile, open('a.out', 'w') as outfile:\n"
"...     for line in infile:\n"
"...         if '<critical>' in line:\n"
"...             outfile.write(line)"
msgstr ""
"&gt;&gt;&gt; med open('mylog.txt') som infile, open('a.out', 'w') som "
"outfile:\n"
"... för rad i infile:\n"
"... if '<critical>' i rad:\n"
"... outfile.write(rad)"

msgid ""
"With the new syntax, the :func:`!contextlib.nested` function is no longer "
"needed and is now deprecated."
msgstr ""
"Med den nya syntaxen behövs inte längre funktionen :func:`!contextlib."
"nested` och den är nu föråldrad."

msgid ""
"(Contributed by Georg Brandl and Mattias Brändström; `appspot issue 53094 "
"<https://codereview.appspot.com/53094>`_.)"
msgstr ""
"(Bidrag från Georg Brandl och Mattias Brändström; `appspot issue 53094 "
"<https://codereview.appspot.com/53094>`_.)"

msgid ""
"``round(x, n)`` now returns an integer if *x* is an integer. Previously it "
"returned a float::"
msgstr ""
"``round(x, n)`` returnerar nu ett heltal om *x* är ett heltal. Tidigare "
"returnerade den en float::"

msgid ""
">>> round(1123, -2)\n"
"1100"
msgstr ""
">>> runda(1123, -2)\n"
"1100"

msgid "(Contributed by Mark Dickinson; :issue:`4707`.)"
msgstr "(Bidrag från Mark Dickinson; :issue:`4707`.)"

msgid ""
"Python now uses David Gay's algorithm for finding the shortest floating-"
"point representation that doesn't change its value.  This should help "
"mitigate some of the confusion surrounding binary floating-point numbers."
msgstr ""
"Python använder nu David Gays algoritm för att hitta den kortaste "
"representationen av flyttal som inte ändrar sitt värde.  Detta bör bidra "
"till att mildra en del av förvirringen kring binära flyttal."

msgid ""
"The significance is easily seen with a number like ``1.1`` which does not "
"have an exact equivalent in binary floating point.  Since there is no exact "
"equivalent, an expression like ``float('1.1')`` evaluates to the nearest "
"representable value which is ``0x1.199999999999ap+0`` in hex or "
"``1.100000000000000088817841970012523233890533447265625`` in decimal. That "
"nearest value was and still is used in subsequent floating-point "
"calculations."
msgstr ""
"Betydelsen är lätt att se med ett tal som ``1,1`` som inte har någon exakt "
"motsvarighet i binär flyttal.  Eftersom det inte finns någon exakt "
"motsvarighet utvärderas ett uttryck som ``float('1.1')`` till det närmaste "
"representerbara värdet, vilket är ``0x1.199999999999ap+0`` i hex eller "
"``1.100000000000000088817841970012523233890533447265625`` i decimal. Det "
"närmaste värdet användes och används fortfarande i efterföljande beräkningar "
"med flyttal."

msgid ""
"What is new is how the number gets displayed.  Formerly, Python used a "
"simple approach.  The value of ``repr(1.1)`` was computed as ``format(1.1, "
"'.17g')`` which evaluated to ``'1.1000000000000001'``. The advantage of "
"using 17 digits was that it relied on IEEE-754 guarantees to assure that "
"``eval(repr(1.1))`` would round-trip exactly to its original value.  The "
"disadvantage is that many people found the output to be confusing (mistaking "
"intrinsic limitations of binary floating-point representation as being a "
"problem with Python itself)."
msgstr ""
"Det som är nytt är hur numret visas.  Tidigare använde Python ett enkelt "
"tillvägagångssätt.  Värdet av ``repr(1.1)`` beräknades som ``format(1.1, "
"'.17g')`` vilket utvärderades till ``'1.1000000000000001'``. Fördelen med "
"att använda 17 siffror var att den förlitade sig på IEEE-754-garantier för "
"att säkerställa att ``eval(repr(1.1))`` skulle avrundas exakt till sitt "
"ursprungliga värde.  Nackdelen är att många tyckte att resultatet var "
"förvirrande (och misstog de inneboende begränsningarna i binär "
"representation av flyttal som ett problem med Python självt)."

msgid ""
"The new algorithm for ``repr(1.1)`` is smarter and returns ``'1.1'``. "
"Effectively, it searches all equivalent string representations (ones that "
"get stored with the same underlying float value) and returns the shortest "
"representation."
msgstr ""
"Den nya algoritmen för ``repr(1.1)`` är smartare och returnerar ``'1.1'``. I "
"själva verket söker den efter alla likvärdiga strängrepresentationer (de som "
"lagras med samma underliggande flottörvärde) och returnerar den kortaste "
"representationen."

msgid ""
"The new algorithm tends to emit cleaner representations when possible, but "
"it does not change the underlying values.  So, it is still the case that "
"``1.1 + 2.2 != 3.3`` even though the representations may suggest otherwise."
msgstr ""
"Den nya algoritmen tenderar att ge renare representationer när det är "
"möjligt, men den ändrar inte de underliggande värdena.  Så det är "
"fortfarande så att ``1,1 + 2,2 != 3,3`` även om representationerna kan "
"antyda något annat."

msgid ""
"The new algorithm depends on certain features in the underlying floating-"
"point implementation.  If the required features are not found, the old "
"algorithm will continue to be used.  Also, the text pickle protocols assure "
"cross-platform portability by using the old algorithm."
msgstr ""
"Den nya algoritmen är beroende av vissa funktioner i den underliggande "
"implementeringen av flyttal.  Om de nödvändiga funktionerna inte finns "
"kommer den gamla algoritmen att fortsätta att användas.  Dessutom "
"säkerställer text pickle-protokollen portabilitet mellan plattformar genom "
"att använda den gamla algoritmen."

msgid "(Contributed by Eric Smith and Mark Dickinson; :issue:`1580`)"
msgstr "(Bidrag från Eric Smith och Mark Dickinson; :issue:`1580`)"

msgid "New, Improved, and Deprecated Modules"
msgstr "Nya, förbättrade och utfasade moduler"

msgid ""
"Added a :class:`collections.Counter` class to support convenient counting of "
"unique items in a sequence or iterable::"
msgstr ""
"Lagt till en :class:`collections.Counter`-klass för att stödja bekväm "
"räkning av unika objekt i en sekvens eller iterabel::"

msgid ""
">>> Counter(['red', 'blue', 'red', 'green', 'blue', 'blue'])\n"
"Counter({'blue': 3, 'red': 2, 'green': 1})"
msgstr ""
">>> Counter(['röd', 'blå', 'röd', 'grön', 'blå', 'blå'])\n"
"Räknare({'blå': 3, 'röd': 2, 'grön': 1})"

msgid "(Contributed by Raymond Hettinger; :issue:`1696199`.)"
msgstr "(Bidrag från Raymond Hettinger; :issue:`1696199`.)"

msgid ""
"Added a new module, :mod:`tkinter.ttk` for access to the Tk themed widget "
"set. The basic idea of ttk is to separate, to the extent possible, the code "
"implementing a widget's behavior from the code implementing its appearance."
msgstr ""
"Lagt till en ny modul, :mod:`tkinter.ttk` för åtkomst till Tk:s tematiska "
"widgetuppsättning. Grundtanken med ttk är att i möjligaste mån separera "
"koden som implementerar en widgets beteende från koden som implementerar "
"dess utseende."

msgid "(Contributed by Guilherme Polo; :issue:`2983`.)"
msgstr "(Bidrag från Guilherme Polo; :issue:`2983`.)"

msgid ""
"The :class:`gzip.GzipFile` and :class:`bz2.BZ2File` classes now support the "
"context management protocol::"
msgstr ""
"Klasserna :class:`gzip.GzipFile` och :class:`bz2.BZ2File` har nu stöd för "
"kontexthanteringsprotokollet::"

msgid ""
">>> # Automatically close file after writing\n"
">>> with gzip.GzipFile(filename, \"wb\") as f:\n"
"...     f.write(b\"xxx\")"
msgstr ""
">>> # Stäng filen automatiskt efter skrivning\n"
">>> med gzip.GzipFile(filnamn, \"wb\") som f:\n"
"... f.write(b\"xxx\")"

msgid "(Contributed by Antoine Pitrou.)"
msgstr "(Bidrag från Antoine Pitrou.)"

msgid ""
"The :mod:`decimal` module now supports methods for creating a decimal object "
"from a binary :class:`float`.  The conversion is exact but can sometimes be "
"surprising::"
msgstr ""
"Modulen :mod:`decimal` stöder nu metoder för att skapa ett decimalobjekt "
"från ett binärt :class:`float`.  Konverteringen är exakt men kan ibland vara "
"överraskande::"

msgid ""
">>> Decimal.from_float(1.1)\n"
"Decimal('1.100000000000000088817841970012523233890533447265625')"
msgstr ""
">>> Decimal.from_float(1.1)\n"
"Decimal('1.100000000000000088817841970012523233890533447265625')"

msgid ""
"The long decimal result shows the actual binary fraction being stored for "
"*1.1*.  The fraction has many digits because *1.1* cannot be exactly "
"represented in binary."
msgstr ""
"Det långa decimalresultatet visar det faktiska binära bråket som lagras för "
"*1,1*.  Bråket har många siffror eftersom *1,1* inte kan representeras exakt "
"i binär form."

msgid "(Contributed by Raymond Hettinger and Mark Dickinson.)"
msgstr "(Bidrag från Raymond Hettinger och Mark Dickinson.)"

msgid ""
"The :mod:`itertools` module grew two new functions.  The :func:`itertools."
"combinations_with_replacement` function is one of four for generating "
"combinatorics including permutations and Cartesian products.  The :func:"
"`itertools.compress` function mimics its namesake from APL.  Also, the "
"existing :func:`itertools.count` function now has an optional *step* "
"argument and can accept any type of counting sequence including :class:"
"`fractions.Fraction` and :class:`decimal.Decimal`::"
msgstr ""
"Modulen :mod:`itertools` har utökats med två nya funktioner.  Funktionen :"
"func:`itertools.combinations_with_replacement` är en av fyra funktioner för "
"att generera kombinatorik, inklusive permutationer och kartesiska "
"produkter.  Funktionen :func:`itertools.compress` efterliknar sin namne från "
"APL.  Dessutom har den befintliga funktionen :func:`itertools.count` nu ett "
"valfritt *step*-argument och kan acceptera alla typer av räknesekvenser, "
"inklusive :class:`fractions.Fraction` och :class:`decimal.Decimal`:"

msgid ""
">>> [p+q for p,q in combinations_with_replacement('LOVE', 2)]\n"
"['LL', 'LO', 'LV', 'LE', 'OO', 'OV', 'OE', 'VV', 'VE', 'EE']\n"
"\n"
">>> list(compress(data=range(10), selectors=[0,0,1,1,0,1,0,1,0,0]))\n"
"[2, 3, 5, 7]\n"
"\n"
">>> c = count(start=Fraction(1,2), step=Fraction(1,6))\n"
">>> [next(c), next(c), next(c), next(c)]\n"
"[Fraction(1, 2), Fraction(2, 3), Fraction(5, 6), Fraction(1, 1)]"
msgstr ""
">>> [p+q for p,q in combinations_with_replacement('LOVE', 2)]\n"
"['LL', 'LO', 'LV', 'LE', 'OO', 'OV', 'OE', 'VV', 'VE', 'EE']\n"
"\n"
">>> list(compress(data=intervall(10), väljare=[0,0,1,1,0,1,0,0,1,0,0]))\n"
"[2, 3, 5, 7]\n"
"\n"
">>> c = count(start=Fraktion(1,2), steg=Fraktion(1,6))\n"
">>> [nästa(c), nästa(c), nästa(c), nästa(c)]\n"
"[Fraktion(1, 2), Fraktion(2, 3), Fraktion(5, 6), Fraktion(1, 1)]"

msgid "(Contributed by Raymond Hettinger.)"
msgstr "(Bidrag från Raymond Hettinger.)"

msgid ""
":func:`collections.namedtuple` now supports a keyword argument *rename* "
"which lets invalid fieldnames be automatically converted to positional names "
"in the form _0, _1, etc.  This is useful when the field names are being "
"created by an external source such as a CSV header, SQL field list, or user "
"input::"
msgstr ""
":func:`collections.namedtuple` har nu stöd för ett nyckelordsargument "
"*rename* som gör att ogiltiga fältnamn automatiskt kan konverteras till "
"positionsnamn i formen _0, _1, etc.  Detta är användbart när fältnamnen "
"skapas av en extern källa, t.ex. ett CSV-huvud, en SQL-fältlista eller "
"användarinmatning:"

msgid ""
">>> query = input()\n"
"SELECT region, dept, count(*) FROM main GROUPBY region, dept\n"
"\n"
">>> cursor.execute(query)\n"
">>> query_fields = [desc[0] for desc in cursor.description]\n"
">>> UserQuery = namedtuple('UserQuery', query_fields, rename=True)\n"
">>> pprint.pprint([UserQuery(*row) for row in cursor])\n"
"[UserQuery(region='South', dept='Shipping', _2=185),\n"
" UserQuery(region='North', dept='Accounting', _2=37),\n"
" UserQuery(region='West', dept='Sales', _2=419)]"
msgstr ""
">>> query = input()\n"
"SELECT region, dept, count(*) FROM main GROUPBY region, dept\n"
"\n"
">>> cursor.execute(fråga)\n"
">>> query_fields = [desc[0] för desc i cursor.description]\n"
">>> UserQuery = namedtuple('UserQuery', query_fields, rename=True)\n"
">>> pprint.pprint([UserQuery(*row) for row in cursor])\n"
"[UserQuery(region='South', dept='Shipping', _2=185),\n"
" UserQuery(region='North', dept='Accounting', _2=37),\n"
" UserQuery(region='West', avdelning='Försäljning', _2=419)]"

msgid "(Contributed by Raymond Hettinger; :issue:`1818`.)"
msgstr "(Bidrag från Raymond Hettinger; :issue:`1818`.)"

msgid ""
"The :func:`re.sub`, :func:`re.subn` and :func:`re.split` functions now "
"accept a flags parameter."
msgstr ""
"Funktionerna :func:`re.sub`, :func:`re.subn` och :func:`re.split` accepterar "
"nu en flags parameter."

msgid "(Contributed by Gregory Smith.)"
msgstr "(Bidrag från Gregory Smith.)"

msgid ""
"The :mod:`logging` module now implements a simple :class:`logging."
"NullHandler` class for applications that are not using logging but are "
"calling library code that does.  Setting-up a null handler will suppress "
"spurious warnings such as \"No handlers could be found for logger foo\"::"
msgstr ""
"Modulen :mod:`logging` implementerar nu en enkel klass :class:`logging."
"NullHandler` för applikationer som inte använder loggning men som anropar "
"bibliotekskod som gör det.  Genom att konfigurera en null-hanterare kan man "
"undvika onödiga varningar som \"Inga hanterare kunde hittas för logger "
"foo\"::"

msgid ""
">>> h = logging.NullHandler()\n"
">>> logging.getLogger(\"foo\").addHandler(h)"
msgstr ""
">>> h = loggning.NullHandler()\n"
">>> logging.getLogger(\"foo\").addHandler(h)"

msgid "(Contributed by Vinay Sajip; :issue:`4384`)."
msgstr "(Bidrag från Vinay Sajip; :issue:`4384`)."

msgid ""
"The :mod:`runpy` module which supports the ``-m`` command line switch now "
"supports the execution of packages by looking for and executing a "
"``__main__`` submodule when a package name is supplied."
msgstr ""
"Modulen :mod:`runpy`, som stöder kommandoradsväxeln ``-m``, stöder nu "
"exekvering av paket genom att leta efter och exekvera en ``__main__``-"
"undermodul när ett paketnamn anges."

msgid "(Contributed by Andi Vajda; :issue:`4195`.)"
msgstr "(Bidrag från Andi Vajda; :issue:`4195`.)"

msgid ""
"The :mod:`pdb` module can now access and display source code loaded via :mod:"
"`zipimport` (or any other conformant :pep:`302` loader)."
msgstr ""
"Modulen :mod:`pdb` kan nu komma åt och visa källkod som laddats via :mod:"
"`zipimport` (eller någon annan kompatibel :pep:`302`-laddare)."

msgid "(Contributed by Alexander Belopolsky; :issue:`4201`.)"
msgstr "(Bidrag från Alexander Belopolsky; :issue:`4201`.)"

msgid ":class:`functools.partial` objects can now be pickled."
msgstr ":class:`functools.partial`-objekt kan nu picklas."

msgid ""
"(Suggested by Antoine Pitrou and Jesse Noller.  Implemented by Jack "
"Diederich; :issue:`5228`.)"
msgstr ""
"(Föreslagen av Antoine Pitrou och Jesse Noller.  Implementerad av Jack "
"Diederich; :issue:`5228`.)"

msgid ""
"Add :mod:`pydoc` help topics for symbols so that ``help('@')`` works as "
"expected in the interactive environment."
msgstr ""
"Lägg till :mod:`pydoc`-hjälpämnen för symboler så att ``help('@')`` fungerar "
"som förväntat i den interaktiva miljön."

msgid "(Contributed by David Laban; :issue:`4739`.)"
msgstr "(Bidrag från David Laban; :issue:`4739`.)"

msgid ""
"The :mod:`unittest` module now supports skipping individual tests or classes "
"of tests. And it supports marking a test as an expected failure, a test that "
"is known to be broken, but shouldn't be counted as a failure on a "
"TestResult::"
msgstr ""
"Modulen :mod:`unittest` har nu stöd för att hoppa över enskilda tester eller "
"klasser av tester. Den stöder även att markera ett test som ett förväntat "
"misslyckande, ett test som man vet är trasigt, men som inte bör räknas som "
"ett misslyckande i ett TestResult::"

msgid ""
"class TestGizmo(unittest.TestCase):\n"
"\n"
"    @unittest.skipUnless(sys.platform.startswith(\"win\"), \"requires "
"Windows\")\n"
"    def test_gizmo_on_windows(self):\n"
"        ...\n"
"\n"
"    @unittest.expectedFailure\n"
"    def test_gimzo_without_required_library(self):\n"
"        ..."
msgstr ""
"klass TestGizmo(unittest.TestCase):\n"
"\n"
"    @unittest.skipUnless(sys.platform.startswith(\"win\")), \"kräver "
"Windows\")\n"
"    def test_gizmo_on_windows(self):\n"
"        ...\n"
"\n"
"    @unittest.expectedFailure\n"
"    def test_gimzo_without_required_library(self):\n"
"        ..."

msgid ""
"Also, tests for exceptions have been builtout to work with context managers "
"using the :keyword:`with` statement::"
msgstr ""
"Dessutom har tester för undantag byggts ut för att fungera med "
"kontexthanterare som använder :keyword:`with` statement::"

msgid ""
"def test_division_by_zero(self):\n"
"    with self.assertRaises(ZeroDivisionError):\n"
"        x / 0"
msgstr ""
"def test_division_by_zero(self):\n"
"    med self.assertRaises(ZeroDivisionError):\n"
"        x / 0"

msgid ""
"In addition, several new assertion methods were added including :meth:"
"`~unittest.TestCase.assertSetEqual`, :meth:`~unittest.TestCase."
"assertDictEqual`, :meth:`!assertDictContainsSubset`, :meth:`~unittest."
"TestCase.assertListEqual`, :meth:`~unittest.TestCase.assertTupleEqual`, :"
"meth:`~unittest.TestCase.assertSequenceEqual`, :meth:`assertRaisesRegexp() "
"<unittest.TestCase.assertRaisesRegex>`, :meth:`~unittest.TestCase."
"assertIsNone`, and :meth:`~unittest.TestCase.assertIsNotNone`."
msgstr ""
"Dessutom har flera nya assertionmetoder lagts till, inklusive :meth:"
"`~unittest.TestCase.assertSetEqual`, :meth:`~unittest.TestCase."
"assertDictEqual`, :meth:`!assertDictContainsSubset`, :meth:`~unittest."
"TestCase.assertListEqual`, :meth:`~unittest.TestCase.assertTupleEqual`, :"
"meth:`~unittest.TestCase.assertSequenceEqual`, :meth:`assertRaisesRegexp() "
"<unittest.TestCase.assertRaisesRegex>`, :meth:`~unittest.TestCase."
"assertIsNone`, och :meth:`~unittest.TestCase.assertIsNotNone`."

msgid "(Contributed by Benjamin Peterson and Antoine Pitrou.)"
msgstr "(Bidrag från Benjamin Peterson och Antoine Pitrou.)"

msgid ""
"The :mod:`io` module has three new constants for the :meth:`~io.IOBase.seek` "
"method: :data:`~os.SEEK_SET`, :data:`~os.SEEK_CUR`, and :data:`~os.SEEK_END`."
msgstr ""
"Modulen :mod:`io` har tre nya konstanter för metoden :meth:`~io.IOBase."
"seek`: :data:`~os.SEEK_SET`, :data:`~os.SEEK_CUR` och :data:`~os.SEEK_END`."

msgid "The :data:`sys.version_info` tuple is now a named tuple::"
msgstr "Tupeln :data:`sys.version_info` är nu en namngiven tupel::"

msgid ""
">>> sys.version_info\n"
"sys.version_info(major=3, minor=1, micro=0, releaselevel='alpha', serial=2)"
msgstr ""
">>> sys.version_info\n"
"sys.version_info(major=3, minor=1, micro=0, releaselevel='alpha', serial=2)"

msgid "(Contributed by Ross Light; :issue:`4285`.)"
msgstr "(Bidrag från Ross Light; :issue:`4285`.)"

msgid "The :mod:`!nntplib` and :mod:`imaplib` modules now support IPv6."
msgstr "Modulerna :mod:`!nntplib` och :mod:`imaplib` har nu stöd för IPv6."

msgid "(Contributed by Derek Morr; :issue:`1655` and :issue:`1664`.)"
msgstr "(Bidrag från Derek Morr; :issue:`1655` och :issue:`1664`.)"

msgid ""
"The :mod:`pickle` module has been adapted for better interoperability with "
"Python 2.x when used with protocol 2 or lower.  The reorganization of the "
"standard library changed the formal reference for many objects.  For "
"example, ``__builtin__.set`` in Python 2 is called ``builtins.set`` in "
"Python 3. This change confounded efforts to share data between different "
"versions of Python.  But now when protocol 2 or lower is selected, the "
"pickler will automatically use the old Python 2 names for both loading and "
"dumping. This remapping is turned-on by default but can be disabled with the "
"*fix_imports* option::"
msgstr ""
"Modulen :mod:`pickle` har anpassats för bättre interoperabilitet med Python "
"2.x när den används med protokoll 2 eller lägre.  Omorganiseringen av "
"standardbiblioteket ändrade den formella referensen för många objekt.  Till "
"exempel kallas ``__builtin__.set`` i Python 2 för ``builtins.set`` i Python "
"3. Denna förändring förvirrade ansträngningarna att dela data mellan olika "
"versioner av Python.  Men nu när protokoll 2 eller lägre väljs, kommer "
"picklern automatiskt att använda de gamla Python 2-namnen för både laddning "
"och dumpning. Denna remappning är aktiverad som standard men kan avaktiveras "
"med alternativet *fix_imports*::"

msgid ""
">>> s = {1, 2, 3}\n"
">>> pickle.dumps(s, protocol=0)\n"
"b'c__builtin__\\nset\\np0\\n((lp1\\nL1L\\naL2L\\naL3L\\natp2\\nRp3\\n.'\n"
">>> pickle.dumps(s, protocol=0, fix_imports=False)\n"
"b'cbuiltins\\nset\\np0\\n((lp1\\nL1L\\naL2L\\naL3L\\natp2\\nRp3\\n.'"
msgstr ""
">>> s = {1, 2, 3}\n"
">>> pickle.dumps(s, protokoll=0)\n"
"b'c__builtin__\\nset\\np0\\n((lp1\\nL1L\\naL2L\\naL3L\\natp2\\nRp3\\n.'\n"
">>> pickle.dumps(s, protokoll=0, fix_imports=False)\n"
"b'cbuiltins\\nset\\np0\\n((lp1\\nL1L\\naL2L\\naL3L\\natp2\\nRp3\\n.'"

msgid ""
"An unfortunate but unavoidable side-effect of this change is that protocol 2 "
"pickles produced by Python 3.1 won't be readable with Python 3.0. The latest "
"pickle protocol, protocol 3, should be used when migrating data between "
"Python 3.x implementations, as it doesn't attempt to remain compatible with "
"Python 2.x."
msgstr ""
"En olycklig men oundviklig bieffekt av denna förändring är att protokoll 2-"
"pickles som produceras av Python 3.1 inte kommer att kunna läsas med Python "
"3.0. Det senaste pickle-protokollet, protokoll 3, bör användas vid migrering "
"av data mellan Python 3.x-implementeringar, eftersom det inte försöker "
"förbli kompatibelt med Python 2.x."

msgid ""
"(Contributed by Alexandre Vassalotti and Antoine Pitrou, :issue:`6137`.)"
msgstr "(Bidrag från Alexandre Vassalotti och Antoine Pitrou, :issue:`6137`.)"

msgid ""
"A new module, :mod:`importlib` was added.  It provides a complete, portable, "
"pure Python reference implementation of the :keyword:`import` statement and "
"its counterpart, the :func:`__import__` function.  It represents a "
"substantial step forward in documenting and defining the actions that take "
"place during imports."
msgstr ""
"En ny modul, :mod:`importlib` har lagts till.  Den ger en komplett, "
"portabel, ren Python-referensimplementation av :keyword:`import`-satsen och "
"dess motsvarighet, funktionen :func:`__import__`.  Den utgör ett stort steg "
"framåt när det gäller att dokumentera och definiera de åtgärder som vidtas "
"under import."

msgid "(Contributed by Brett Cannon.)"
msgstr "(Bidrag från Brett Cannon.)"

msgid "Optimizations"
msgstr "Optimeringar"

msgid "Major performance enhancements have been added:"
msgstr "Stora prestandaförbättringar har lagts till:"

msgid ""
"The new I/O library (as defined in :pep:`3116`) was mostly written in Python "
"and quickly proved to be a problematic bottleneck in Python 3.0. In Python "
"3.1, the I/O library has been entirely rewritten in C and is 2 to 20 times "
"faster depending on the task at hand. The pure Python version is still "
"available for experimentation purposes through the ``_pyio`` module."
msgstr ""
"Det nya I/O-biblioteket (enligt definitionen i :pep:`3116`) var till största "
"delen skrivet i Python och visade sig snabbt vara en problematisk flaskhals "
"i Python 3.0. I Python 3.1 har I/O-biblioteket skrivits om helt och hållet i "
"C och är 2 till 20 gånger snabbare beroende på vilken uppgift som ska "
"utföras. Den rena Python-versionen är fortfarande tillgänglig för "
"experimentändamål genom modulen ``_pyio``."

msgid "(Contributed by Amaury Forgeot d'Arc and Antoine Pitrou.)"
msgstr "(Bidrag från Amaury Forgeot d'Arc och Antoine Pitrou.)"

msgid ""
"Added a heuristic so that tuples and dicts containing only untrackable "
"objects are not tracked by the garbage collector. This can reduce the size "
"of collections and therefore the garbage collection overhead on long-running "
"programs, depending on their particular use of datatypes."
msgstr ""
"Lagt till en heuristik som gör att tuples och dicts som bara innehåller "
"objekt som inte kan spåras inte spåras av skräpsamlaren. Detta kan minska "
"storleken på samlingarna och därmed sopinsamlingens overhead i långkörande "
"program, beroende på hur datatyperna används."

msgid "(Contributed by Antoine Pitrou, :issue:`4688`.)"
msgstr "(Bidrag från Antoine Pitrou, :issue:`4688`.)"

msgid ""
"Enabling a configure option named ``--with-computed-gotos`` on compilers "
"that support it (notably: gcc, SunPro, icc), the bytecode evaluation loop is "
"compiled with a new dispatch mechanism which gives speedups of up to 20%, "
"depending on the system, the compiler, and the benchmark."
msgstr ""
"Genom att aktivera ett konfigurationsalternativ med namnet ``--with-computed-"
"gotos`` på kompilatorer som stöder det (särskilt: gcc, SunPro, icc), "
"kompileras bytecode-utvärderingsslingan med en ny dispatchmekanism som ger "
"hastigheter på upp till 20%, beroende på system, kompilator och benchmark."

msgid ""
"(Contributed by Antoine Pitrou along with a number of other participants, :"
"issue:`4753`)."
msgstr ""
"(Bidrag från Antoine Pitrou tillsammans med ett antal andra deltagare, :"
"issue:`4753`)."

msgid ""
"The decoding of UTF-8, UTF-16 and LATIN-1 is now two to four times faster."
msgstr ""
"Avkodningen av UTF-8, UTF-16 och LATIN-1 är nu två till fyra gånger snabbare."

msgid ""
"(Contributed by Antoine Pitrou and Amaury Forgeot d'Arc, :issue:`4868`.)"
msgstr "(Bidrag från Antoine Pitrou och Amaury Forgeot d'Arc, :issue:`4868`.)"

msgid ""
"The :mod:`json` module now has a C extension to substantially improve its "
"performance.  In addition, the API was modified so that json works only "
"with :class:`str`, not with :class:`bytes`.  That change makes the module "
"closely match the `JSON specification <https://json.org/>`_ which is defined "
"in terms of Unicode."
msgstr ""
"Modulen :mod:`json` har nu ett C-tillägg som avsevärt förbättrar dess "
"prestanda.  Dessutom har API:et modifierats så att json endast fungerar med :"
"class:`str`, inte med :class:`bytes`.  Denna förändring gör att modulen nära "
"matchar `JSON-specifikationen <https://json.org/>`_ som definieras i termer "
"av Unicode."

msgid ""
"(Contributed by Bob Ippolito and converted to Py3.1 by Antoine Pitrou and "
"Benjamin Peterson; :issue:`4136`.)"
msgstr ""
"(Bidrag från Bob Ippolito och konverterad till Py3.1 av Antoine Pitrou och "
"Benjamin Peterson; :issue:`4136`.)"

msgid ""
"Unpickling now interns the attribute names of pickled objects.  This saves "
"memory and allows pickles to be smaller."
msgstr ""
"Unpickling internerar nu attributnamnen för picklade objekt.  Detta sparar "
"minne och gör att pickles kan vara mindre."

msgid "(Contributed by Jake McGuire and Antoine Pitrou; :issue:`5084`.)"
msgstr "(Bidrag från Jake McGuire och Antoine Pitrou; :issue:`5084`.)"

msgid "IDLE"
msgstr "IDLE"

msgid ""
"IDLE's format menu now provides an option to strip trailing whitespace from "
"a source file."
msgstr ""
"IDLE:s formatmeny innehåller nu ett alternativ för att ta bort efterföljande "
"blanksteg från en källfil."

msgid "(Contributed by Roger D. Serwy; :issue:`5150`.)"
msgstr "(Bidrag från Roger D. Serwy; :issue:`5150`.)"

msgid "Build and C API Changes"
msgstr "Ändringar i Build och C API"

msgid "Changes to Python's build process and to the C API include:"
msgstr "Ändringar i Pythons byggprocess och i C API inkluderar:"

msgid ""
"Integers are now stored internally either in base ``2**15`` or in base "
"``2**30``, the base being determined at build time.  Previously, they were "
"always stored in base ``2**15``.  Using base ``2**30`` gives significant "
"performance improvements on 64-bit machines, but benchmark results on 32-bit "
"machines have been mixed.  Therefore, the default is to use base ``2**30`` "
"on 64-bit machines and base ``2**15`` on 32-bit machines; on Unix, there's a "
"new configure option ``--enable-big-digits`` that can be used to override "
"this default."
msgstr ""
"Heltal lagras nu internt antingen i basen ``2**15`` eller i basen ``2**30``, "
"basen bestäms vid byggtiden.  Tidigare lagrades de alltid i bas ``2**15``.  "
"Att använda bas ``2**30`` ger betydande prestandaförbättringar på 64-bitars "
"maskiner, men benchmarkresultaten på 32-bitars maskiner har varit blandade.  "
"Därför är standardinställningen att använda bas ``2**30`` på 64-bitars "
"maskiner och bas ``2**15`` på 32-bitars maskiner; på Unix finns det ett nytt "
"configure-alternativ ``--enable-big-digits`` som kan användas för att "
"åsidosätta denna standardinställning."

msgid ""
"Apart from the performance improvements this change should be invisible to "
"end users, with one exception: for testing and debugging purposes there's a "
"new :data:`sys.int_info` that provides information about the internal "
"format, giving the number of bits per digit and the size in bytes of the C "
"type used to store each digit::"
msgstr ""
"Bortsett från prestandaförbättringarna bör denna ändring vara osynlig för "
"slutanvändarna, med ett undantag: för test- och felsökningsändamål finns det "
"en ny :data:`sys.int_info` som ger information om det interna formatet, med "
"antalet bitar per siffra och storleken i byte på den C-typ som används för "
"att lagra varje siffra::"

msgid ""
">>> import sys\n"
">>> sys.int_info\n"
"sys.int_info(bits_per_digit=30, sizeof_digit=4)"
msgstr ""
">>> import sys\n"
">>> sys.int_info\n"
"sys.int_info(bits_per_digit=30, sizeof_digit=4)"

msgid "(Contributed by Mark Dickinson; :issue:`4258`.)"
msgstr "(Bidrag från Mark Dickinson; :issue:`4258`.)"

msgid ""
"The :c:func:`PyLong_AsUnsignedLongLong()` function now handles a negative "
"*pylong* by raising :exc:`OverflowError` instead of :exc:`TypeError`."
msgstr ""
"Funktionen :c:func:`PyLong_AsUnsignedLongLong()` hanterar nu en negativ "
"*pylong* genom att ge :exc:`OverflowError` istället för :exc:`TypeError`."

msgid "(Contributed by Mark Dickinson and Lisandro Dalcrin; :issue:`5175`.)"
msgstr "(Bidrag från Mark Dickinson och Lisandro Dalcrin; :issue:`5175`.)"

msgid ""
"Deprecated :c:func:`!PyNumber_Int`.  Use :c:func:`PyNumber_Long` instead."
msgstr ""
"Föråldrad :c:func:`!PyNumber_Int`.  Använd :c:func:`PyNumber_Long` istället."

msgid "(Contributed by Mark Dickinson; :issue:`4910`.)"
msgstr "(Bidrag från Mark Dickinson; :issue:`4910`.)"

msgid ""
"Added a new :c:func:`PyOS_string_to_double` function to replace the "
"deprecated functions :c:func:`!PyOS_ascii_strtod` and :c:func:`!"
"PyOS_ascii_atof`."
msgstr ""
"Lagt till en ny :c:func:`PyOS_string_to_double`-funktion för att ersätta de "
"föråldrade funktionerna :c:func:`!PyOS_ascii_strtod` och :c:func:`!"
"PyOS_ascii_atof`."

msgid "(Contributed by Mark Dickinson; :issue:`5914`.)"
msgstr "(Bidrag från Mark Dickinson; :issue:`5914`.)"

msgid ""
"Added :c:type:`PyCapsule` as a replacement for the :c:type:`!PyCObject` API. "
"The principal difference is that the new type has a well defined interface "
"for passing typing safety information and a less complicated signature for "
"calling a destructor.  The old type had a problematic API and is now "
"deprecated."
msgstr ""
"Lagt till :c:type:`PyCapsule` som en ersättning för :c:type:`!PyCObject` "
"API. Den huvudsakliga skillnaden är att den nya typen har ett väldefinierat "
"gränssnitt för att skicka information om typningssäkerhet och en mindre "
"komplicerad signatur för att anropa en destruktor.  Den gamla typen hade ett "
"problematiskt API och är nu föråldrad."

msgid "(Contributed by Larry Hastings; :issue:`5630`.)"
msgstr "(Bidrag från Larry Hastings; :issue:`5630`.)"

msgid "Porting to Python 3.1"
msgstr "Portning till Python 3.1"

msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr ""
"I det här avsnittet listas tidigare beskrivna ändringar och andra buggfixar "
"som kan kräva ändringar i din kod:"

msgid ""
"The new floating-point string representations can break existing doctests. "
"For example::"
msgstr ""
"De nya representationerna av strängar med flyttal kan bryta befintliga "
"doctests. Till exempel::"

msgid ""
"def e():\n"
"    '''Compute the base of natural logarithms.\n"
"\n"
"    >>> e()\n"
"    2.7182818284590451\n"
"\n"
"    '''\n"
"    return sum(1/math.factorial(x) for x in reversed(range(30)))\n"
"\n"
"doctest.testmod()\n"
"\n"
"**********************************************************************\n"
"Failed example:\n"
"    e()\n"
"Expected:\n"
"    2.7182818284590451\n"
"Got:\n"
"    2.718281828459045\n"
"**********************************************************************"
msgstr ""
"def e():\n"
"    '''Beräkna basen för naturliga logaritmer.\n"
"\n"
"    >>> e()\n"
"    2.7182818284590451\n"
"\n"
"    '''\n"
"    return sum(1/math.factorial(x) for x in reversed(range(30))))\n"
"\n"
"doctest.testmod()\n"
"\n"
"**********************************************************************\n"
"Misslyckat exempel:\n"
"    e()\n"
"Förväntad:\n"
"    2.7182818284590451\n"
"Fick:\n"
"    2.718281828459045\n"
"**********************************************************************"

msgid ""
"The automatic name remapping in the pickle module for protocol 2 or lower "
"can make Python 3.1 pickles unreadable in Python 3.0.  One solution is to "
"use protocol 3.  Another solution is to set the *fix_imports* option to "
"``False``. See the discussion above for more details."
msgstr ""
"Den automatiska namnomvandlingen i pickle-modulen för protokoll 2 eller "
"lägre kan göra Python 3.1-pickles oläsliga i Python 3.0.  En lösning är att "
"använda protokoll 3.  En annan lösning är att sätta alternativet "
"*fix_imports* till ``False``. Se diskussionen ovan för mer information."
