# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!__main__` --- Top-level code environment"
msgstr ":mod:`!__main__` --- Kodmiljö på högsta nivå"

msgid ""
"In Python, the special name ``__main__`` is used for two important "
"constructs:"
msgstr ""
"I Python används det speciella namnet ``__main__`` för två viktiga "
"konstruktioner:"

msgid ""
"the name of the top-level environment of the program, which can be checked "
"using the ``__name__ == '__main__'`` expression; and"
msgstr ""
"namnet på programmets toppnivåmiljö, vilket kan kontrolleras med hjälp av "
"uttrycket ``__name__ == '__main__'``; och"

msgid "the ``__main__.py`` file in Python packages."
msgstr "filen ``__main__.py`` i Python-paket."

msgid ""
"Both of these mechanisms are related to Python modules; how users interact "
"with them and how they interact with each other.  They are explained in "
"detail below.  If you're new to Python modules, see the tutorial section :"
"ref:`tut-modules` for an introduction."
msgstr ""
"Båda dessa mekanismer är relaterade till Python-moduler; hur användare "
"interagerar med dem och hur de interagerar med varandra.  De förklaras i "
"detalj nedan.  Om du är nybörjare på Python-moduler, se avsnittet om "
"självstudier :ref:`tut-modules` för en introduktion."

msgid "``__name__ == '__main__'``"
msgstr "``__name__ == '__main__'```"

msgid ""
"When a Python module or package is imported, ``__name__`` is set to the "
"module's name.  Usually, this is the name of the Python file itself without "
"the ``.py`` extension::"
msgstr ""
"När en Python-modul eller ett Python-paket importeras sätts ``__name__`` "
"till modulens namn.  Vanligtvis är detta namnet på själva Python-filen utan "
"tillägget ``.py``::"

msgid ""
">>> import configparser\n"
">>> configparser.__name__\n"
"'configparser'"
msgstr ""
">>> import configparser\n"
">>> configparser.__name__\n"
"'configparser'"

msgid ""
"If the file is part of a package, ``__name__`` will also include the parent "
"package's path::"
msgstr ""
"Om filen är en del av ett paket kommer ``__name__`` också att inkludera det "
"överordnade paketets sökväg::"

msgid ""
">>> from concurrent.futures import process\n"
">>> process.__name__\n"
"'concurrent.futures.process'"
msgstr ""
">>> from concurrent.futures import process\n"
">>> process.__name__\n"
"'concurrent.futures.process'"

msgid ""
"However, if the module is executed in the top-level code environment, its "
"``__name__`` is set to the string ``'__main__'``."
msgstr ""
"Men om modulen körs i kodmiljön på högsta nivån sätts dess ``__name__`` till "
"strängen ``'__main__'``."

msgid "What is the \"top-level code environment\"?"
msgstr "Vad är \"kodmiljön på högsta nivå\"?"

msgid ""
"``__main__`` is the name of the environment where top-level code is run. "
"\"Top-level code\" is the first user-specified Python module that starts "
"running. It's \"top-level\" because it imports all other modules that the "
"program needs. Sometimes \"top-level code\" is called an *entry point* to "
"the application."
msgstr ""
"``__main__`` är namnet på den miljö där toppnivåkoden körs. \"Toppnivåkod\" "
"är den första användarspecificerade Python-modulen som börjar köras. Den är "
"\"toppnivå\" eftersom den importerar alla andra moduler som programmet "
"behöver. Ibland kallas \"toppnivåkoden\" för en *ingångspunkt* till "
"programmet."

msgid "The top-level code environment can be:"
msgstr "Kodmiljön på högsta nivå kan vara:"

msgid "the scope of an interactive prompt::"
msgstr "omfattningen av en interaktiv uppmaning::"

msgid ""
">>> __name__\n"
"'__main__'"
msgstr ""
">>> __name__\n"
"'__main__'"

msgid "the Python module passed to the Python interpreter as a file argument:"
msgstr "den Python-modul som skickas till Python-tolken som ett filargument:"

msgid ""
"$ python helloworld.py\n"
"Hello, world!"
msgstr ""
"$ python helloworld.py\n"
"Hallå där i världen!"

msgid ""
"the Python module or package passed to the Python interpreter with the :"
"option:`-m` argument:"
msgstr ""
"den Python-modul eller det Python-paket som skickas till Python-tolken med :"
"option:`-m`-argumentet:"

msgid ""
"$ python -m tarfile\n"
"usage: tarfile.py [-h] [-v] (...)"
msgstr ""
"$ python -m tarfile\n"
"användning: tarfile.py [-h] [-v] (...)"

msgid "Python code read by the Python interpreter from standard input:"
msgstr "Python-kod som läses av Python-tolken från standardinmatningen:"

msgid ""
"$ echo \"import this\" | python\n"
"The Zen of Python, by Tim Peters\n"
"\n"
"Beautiful is better than ugly.\n"
"Explicit is better than implicit.\n"
"..."
msgstr ""
"$ echo \"importera detta\" | python\n"
"Pythons zen, av Tim Peters\n"
"\n"
"Vackert är bättre än fult.\n"
"Explicit är bättre än implicit.\n"
"..."

msgid ""
"Python code passed to the Python interpreter with the :option:`-c` argument:"
msgstr "Python-kod som skickas till Python-tolken med argumentet :option:`-c`:"

msgid ""
"$ python -c \"import this\"\n"
"The Zen of Python, by Tim Peters\n"
"\n"
"Beautiful is better than ugly.\n"
"Explicit is better than implicit.\n"
"..."
msgstr ""
"$ python -c \"importera detta\"\n"
"Zen av Python, av Tim Peters\n"
"\n"
"Vackert är bättre än fult.\n"
"Explicit är bättre än implicit.\n"
"..."

msgid ""
"In each of these situations, the top-level module's ``__name__`` is set to "
"``'__main__'``."
msgstr ""
"I alla dessa situationer sätts toppmodulens ``__name__`` till ``'__main__'``."

msgid ""
"As a result, a module can discover whether or not it is running in the top-"
"level environment by checking its own ``__name__``, which allows a common "
"idiom for conditionally executing code when the module is not initialized "
"from an import statement::"
msgstr ""
"En modul kan därför upptäcka om den körs i toppnivåmiljön eller inte genom "
"att kontrollera sitt eget ``__name__``, vilket möjliggör ett vanligt idiom "
"för villkorlig exekvering av kod när modulen inte initieras från en "
"importsats::"

msgid ""
"if __name__ == '__main__':\n"
"    # Execute when the module is not initialized from an import statement.\n"
"    ..."
msgstr ""
"if __name__ == '__main__':\n"
"    # Exekveras när modulen inte initieras från ett import-sats.\n"
"    ..."

msgid ""
"For a more detailed look at how ``__name__`` is set in all situations, see "
"the tutorial section :ref:`tut-modules`."
msgstr ""
"För en mer detaljerad titt på hur ``__name__`` ställs in i alla situationer, "
"se handledningsavsnittet :ref:`tut-modules`."

msgid "Idiomatic Usage"
msgstr "Idiomatisk användning"

msgid ""
"Some modules contain code that is intended for script use only, like parsing "
"command-line arguments or fetching data from standard input.  If a module "
"like this was imported from a different module, for example to unit test it, "
"the script code would unintentionally execute as well."
msgstr ""
"Vissa moduler innehåller kod som endast är avsedd för skriptanvändning, t."
"ex. parsning av kommandoradsargument eller hämtning av data från "
"standardinmatning.  Om en sådan modul importeras från en annan modul, t.ex. "
"för att enhetstesta den, skulle skriptkoden oavsiktligt också exekveras."

msgid ""
"This is where using the ``if __name__ == '__main__'`` code block comes in "
"handy. Code within this block won't run unless the module is executed in the "
"top-level environment."
msgstr ""
"Det är här som kodblocket ``if __name__ == '__main__'`` kommer väl till "
"pass. Kod inom detta block kommer inte att köras om inte modulen exekveras i "
"miljön på högsta nivå."

msgid ""
"Putting as few statements as possible in the block below ``if __name__ == "
"'__main__'`` can improve code clarity and correctness. Most often, a "
"function named ``main`` encapsulates the program's primary behavior::"
msgstr ""
"Om du lägger in så få satser som möjligt i blocket under ``if __name__ == "
"'__main__'`` kan du förbättra kodens tydlighet och korrekthet. Oftast "
"kapslar en funktion med namnet ``main`` in programmets primära beteende::"

msgid ""
"# echo.py\n"
"\n"
"import shlex\n"
"import sys\n"
"\n"
"def echo(phrase: str) -> None:\n"
"   \"\"\"A dummy wrapper around print.\"\"\"\n"
"   # for demonstration purposes, you can imagine that there is some\n"
"   # valuable and reusable logic inside this function\n"
"   print(phrase)\n"
"\n"
"def main() -> int:\n"
"    \"\"\"Echo the input arguments to standard output\"\"\"\n"
"    phrase = shlex.join(sys.argv)\n"
"    echo(phrase)\n"
"    return 0\n"
"\n"
"if __name__ == '__main__':\n"
"    sys.exit(main())  # next section explains the use of sys.exit"
msgstr ""
"# echo.py\n"
"\n"
"import shlex\n"
"import sys\n"
"\n"
"def echo(phrase: str) -> None:\n"
"   \"\"\"A dummy wrapper around print.\"\"\"\n"
"   # for demonstration purposes, you can imagine that there is some\n"
"   # valuable and reusable logic inside this function\n"
"   print(phrase)\n"
"\n"
"def main() -> int:\n"
"    \"\"\"Echo the input arguments to standard output\"\"\"\n"
"    phrase = shlex.join(sys.argv)\n"
"    echo(phrase)\n"
"    return 0\n"
"\n"
"if __name__ == '__main__':\n"
"    sys.exit(main())  # next section explains the use of sys.exit"

msgid ""
"Note that if the module didn't encapsulate code inside the ``main`` function "
"but instead put it directly within the ``if __name__ == '__main__'`` block, "
"the ``phrase`` variable would be global to the entire module.  This is error-"
"prone as other functions within the module could be unintentionally using "
"the global variable instead of a local name.  A ``main`` function solves "
"this problem."
msgstr ""
"Observera att om modulen inte kapslade in koden i funktionen ``main`` utan "
"istället lade den direkt i blocket ``if __name__ == '__main__'``, skulle "
"variabeln ``phrase`` vara global för hela modulen.  Detta är felbenäget "
"eftersom andra funktioner inom modulen oavsiktligt kan använda den globala "
"variabeln istället för ett lokalt namn.  En ``main``-funktion löser detta "
"problem."

msgid ""
"Using a ``main`` function has the added benefit of the ``echo`` function "
"itself being isolated and importable elsewhere. When ``echo.py`` is "
"imported, the ``echo`` and ``main`` functions will be defined, but neither "
"of them will be called, because ``__name__ != '__main__'``."
msgstr ""
"Att använda en ``main``-funktion har den extra fördelen att ``echo``-"
"funktionen i sig isoleras och kan importeras till andra ställen. När ``echo."
"py`` importeras kommer funktionerna ``echo`` och ``main`` att definieras, "
"men ingen av dem kommer att anropas, eftersom ``__name__ != '__main__'``."

msgid "Packaging Considerations"
msgstr "Överväganden om förpackningar"

msgid ""
"``main`` functions are often used to create command-line tools by specifying "
"them as entry points for console scripts.  When this is done, `pip <https://"
"pip.pypa.io/>`_ inserts the function call into a template script, where the "
"return value of ``main`` is passed into :func:`sys.exit`. For example::"
msgstr ""
"``main``-funktioner används ofta för att skapa kommandoradsverktyg genom att "
"ange dem som ingångspunkter för konsolskript.  När detta görs infogar `pip "
"<https://pip.pypa.io/>`_ funktionsanropet i ett mallskript, där returvärdet "
"för ``main`` skickas till :func:`sys.exit`. Till exempel::"

msgid "sys.exit(main())"
msgstr "sys.exit(main())"

msgid ""
"Since the call to ``main`` is wrapped in :func:`sys.exit`, the expectation "
"is that your function will return some value acceptable as an input to :func:"
"`sys.exit`; typically, an integer or ``None`` (which is implicitly returned "
"if your function does not have a return statement)."
msgstr ""
"Eftersom anropet till ``main`` är inkapslat i :func:`sys.exit`, förväntas "
"din funktion returnera något värde som kan accepteras som indata till :func:"
"`sys.exit`; vanligtvis ett heltal eller ``None`` (som returneras implicit om "
"din funktion inte har ett return-svar)."

msgid ""
"By proactively following this convention ourselves, our module will have the "
"same behavior when run directly (i.e. ``python echo.py``) as it will have if "
"we later package it as a console script entry-point in a pip-installable "
"package."
msgstr ""
"Genom att vi själva proaktivt följer denna konvention kommer vår modul att "
"ha samma beteende när den körs direkt (dvs. ``python echo.py``) som om vi "
"senare paketerar den som en ingångspunkt för konsolskript i ett paket som "
"kan installeras med pip."

msgid ""
"In particular, be careful about returning strings from your ``main`` "
"function. :func:`sys.exit` will interpret a string argument as a failure "
"message, so your program will have an exit code of ``1``, indicating "
"failure, and the string will be written to :data:`sys.stderr`.  The ``echo."
"py`` example from earlier exemplifies using the ``sys.exit(main())`` "
"convention."
msgstr ""
"Var särskilt försiktig med att returnera strängar från din ``main``-"
"funktion. :func:`sys.exit` tolkar ett strängargument som ett felmeddelande, "
"så ditt program kommer att ha en utgångskod på ``1``, vilket indikerar fel, "
"och strängen kommer att skrivas till :data:`sys.stderr`.  Exemplet ``echo."
"py`` från tidigare exemplifierar användningen av ``sys.exit(main())``-"
"konventionen."

msgid ""
"`Python Packaging User Guide <https://packaging.python.org/>`_ contains a "
"collection of tutorials and references on how to distribute and install "
"Python packages with modern tools."
msgstr ""
"python Packaging User Guide <https://packaging.python.org/>`_ innehåller en "
"samling handledningar och referenser om hur man distribuerar och installerar "
"Python-paket med moderna verktyg."

msgid "``__main__.py`` in Python Packages"
msgstr "``__main__.py`` i Python-paket"

msgid ""
"If you are not familiar with Python packages, see section :ref:`tut-"
"packages` of the tutorial.  Most commonly, the ``__main__.py`` file is used "
"to provide a command-line interface for a package. Consider the following "
"hypothetical package, \"bandclass\":"
msgstr ""
"Om du inte är bekant med Python-paket, se avsnitt :ref:`tut-packages` i "
"handledningen.  Vanligtvis används filen ``__main__.py`` för att "
"tillhandahålla ett kommandoradsgränssnitt för ett paket. Tänk på följande "
"hypotetiska paket, \"bandclass\":"

msgid ""
"bandclass\n"
"  ├── __init__.py\n"
"  ├── __main__.py\n"
"  └── student.py"
msgstr ""
"bandklass\n"
"  ├── __init__.py\n"
"  ├── __main__.py\n"
"  └── student.py"

msgid ""
"``__main__.py`` will be executed when the package itself is invoked directly "
"from the command line using the :option:`-m` flag. For example:"
msgstr ""
"``__main__.py`` kommer att exekveras när själva paketet anropas direkt från "
"kommandoraden med hjälp av flaggan :option:`-m`. Till exempel"

msgid "$ python -m bandclass"
msgstr "$ python -m bandklass"

msgid ""
"This command will cause ``__main__.py`` to run. How you utilize this "
"mechanism will depend on the nature of the package you are writing, but in "
"this hypothetical case, it might make sense to allow the teacher to search "
"for students::"
msgstr ""
"Detta kommando kommer att få ``__main__.py`` att köras. Hur du använder den "
"här mekanismen beror på hur paketet du skriver ser ut, men i det här "
"hypotetiska fallet kan det vara vettigt att låta läraren söka efter elever::"

msgid ""
"# bandclass/__main__.py\n"
"\n"
"import sys\n"
"from .student import search_students\n"
"\n"
"student_name = sys.argv[1] if len(sys.argv) >= 2 else ''\n"
"print(f'Found student: {search_students(student_name)}')"
msgstr ""
"# bandclass/__main__.py\n"
"\n"
"import sys\n"
"from .student import search_students\n"
"\n"
"student_name = sys.argv[1] if len(sys.argv) >= 2 else ''\n"
"print(f'Found student: {search_students(student_name)}')"

msgid ""
"Note that ``from .student import search_students`` is an example of a "
"relative import.  This import style can be used when referencing modules "
"within a package.  For more details, see :ref:`intra-package-references` in "
"the :ref:`tut-modules` section of the tutorial."
msgstr ""
"Observera att ``from .student import search_students`` är ett exempel på en "
"relativ import.  Denna importstil kan användas när man refererar till "
"moduler inom ett paket.  Mer information finns i :ref:`intra-package-"
"references` i avsnittet :ref:`tut-modules` i självstudien."

msgid ""
"The content of ``__main__.py`` typically isn't fenced with an ``if __name__ "
"== '__main__'`` block.  Instead, those files are kept short and import "
"functions to execute from other modules.  Those other modules can then be "
"easily unit-tested and are properly reusable."
msgstr ""
"Innehållet i ``__main__.py`` är vanligtvis inte avgränsat med ett ``if "
"__name__ == '__main__'``-block.  Istället hålls dessa filer korta och "
"importerar funktioner som ska köras från andra moduler.  Dessa andra moduler "
"kan sedan enkelt enhetstestas och är ordentligt återanvändbara."

msgid ""
"If used, an ``if __name__ == '__main__'`` block will still work as expected "
"for a ``__main__.py`` file within a package, because its ``__name__`` "
"attribute will include the package's path if imported::"
msgstr ""
"Om det används kommer ett ``if __name__ == '__main__'``-block fortfarande "
"att fungera som förväntat för en ``__main__.py``-fil inom ett paket, "
"eftersom dess ``__name__``-attribut kommer att inkludera paketets sökväg om "
"det importeras:"

msgid ""
">>> import asyncio.__main__\n"
">>> asyncio.__main__.__name__\n"
"'asyncio.__main__'"
msgstr ""
">>> import asyncio.__main__\n"
">>> asyncio.__main__.__name__\n"
"'asyncio.__main__'"

msgid ""
"This won't work for ``__main__.py`` files in the root directory of a ``."
"zip`` file though.  Hence, for consistency, a minimal ``__main__.py`` "
"without a ``__name__`` check is preferred."
msgstr ""
"Detta fungerar dock inte för ``__main__.py``-filer i rotkatalogen för en ``."
"zip``-fil.  För konsekvensens skull är därför en minimal ``__main__.py`` "
"utan ``__name__``-kontroll att föredra."

msgid ""
"See :mod:`venv` for an example of a package with a minimal ``__main__.py`` "
"in the standard library. It doesn't contain a ``if __name__ == '__main__'`` "
"block. You can invoke it with ``python -m venv [directory]``."
msgstr ""
"Se :mod:`venv` för ett exempel på ett paket med en minimal ``__main__.py`` i "
"standardbiblioteket. Det innehåller inte något ``if __name__ == '__main__'``-"
"block. Du kan anropa det med ``python -m venv [katalog]``."

msgid ""
"See :mod:`runpy` for more details on the :option:`-m` flag to the "
"interpreter executable."
msgstr ""
"Se :mod:`runpy` för mer information om :option:`-m`-flaggan till tolkens "
"körbara fil."

msgid ""
"See :mod:`zipapp` for how to run applications packaged as *.zip* files. In "
"this case Python looks for a ``__main__.py`` file in the root directory of "
"the archive."
msgstr ""
"Se :mod:`zipapp` för hur man kör program som paketerats som *.zip*-filer. I "
"det här fallet letar Python efter en fil med namnet ``__main__.py`` i "
"arkivets rotkatalog."

msgid "``import __main__``"
msgstr "``import __main__``"

msgid ""
"Regardless of which module a Python program was started with, other modules "
"running within that same program can import the top-level environment's "
"scope (:term:`namespace`) by importing the ``__main__`` module.  This "
"doesn't import a ``__main__.py`` file but rather whichever module that "
"received the special name ``'__main__'``."
msgstr ""
"Oavsett vilken modul ett Python-program startades med, kan andra moduler som "
"körs inom samma program importera toppnivåmiljöns scope (:term:`namespace`) "
"genom att importera modulen ``__main__``.  Detta innebär inte import av "
"filen ``__main__.py`` utan snarare av den modul som fått det speciella "
"namnet ``'__main__'``."

msgid "Here is an example module that consumes the ``__main__`` namespace::"
msgstr "Här är ett exempel på en modul som använder namnrymden ``__main__``::"

msgid ""
"# namely.py\n"
"\n"
"import __main__\n"
"\n"
"def did_user_define_their_name():\n"
"    return 'my_name' in dir(__main__)\n"
"\n"
"def print_user_name():\n"
"    if not did_user_define_their_name():\n"
"        raise ValueError('Define the variable `my_name`!')\n"
"\n"
"    print(__main__.my_name)"
msgstr ""
"# namely.py\n"
"\n"
"import __main__\n"
"\n"
"def did_user_define_their_name():\n"
"    return 'my_name' in dir(__main__)\n"
"\n"
"def print_user_name():\n"
"    if not did_user_define_their_name():\n"
"        raise ValueError('Define the variable `my_name`!')\n"
"\n"
"    print(__main__.my_name)"

msgid "Example usage of this module could be as follows::"
msgstr "Exempel på användning av denna modul kan vara följande::"

msgid ""
"# start.py\n"
"\n"
"import sys\n"
"\n"
"from namely import print_user_name\n"
"\n"
"# my_name = \"Dinsdale\"\n"
"\n"
"def main():\n"
"    try:\n"
"        print_user_name()\n"
"    except ValueError as ve:\n"
"        return str(ve)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    sys.exit(main())"
msgstr ""
"# start.py\n"
"\n"
"import sys\n"
"\n"
"from namely import print_user_name\n"
"\n"
"# my_name = \"Dinsdale\"\n"
"\n"
"def main():\n"
"    try:\n"
"        print_user_name()\n"
"    except ValueError as ve:\n"
"        return str(ve)\n"
"\n"
"if __name__ == \"__main__\":\n"
"    sys.exit(main())"

msgid "Now, if we started our program, the result would look like this:"
msgstr "Om vi nu startade vårt program skulle resultatet se ut så här:"

msgid ""
"$ python start.py\n"
"Define the variable `my_name`!"
msgstr ""
"$ python start.py\n"
"Definiera variabeln `my_name`!"

msgid ""
"The exit code of the program would be 1, indicating an error. Uncommenting "
"the line with ``my_name = \"Dinsdale\"`` fixes the program and now it exits "
"with status code 0, indicating success:"
msgstr ""
"Programmets utgångskod skulle vara 1, vilket indikerar ett fel. Om du "
"avkommenterar raden med ``my_name = \"Dinsdale\"`` åtgärdas programmet och "
"nu avslutas det med statuskod 0, vilket indikerar framgång:"

msgid ""
"$ python start.py\n"
"Dinsdale"
msgstr ""
"$ python start.py\n"
"Dinsdale"

msgid ""
"Note that importing ``__main__`` doesn't cause any issues with "
"unintentionally running top-level code meant for script use which is put in "
"the ``if __name__ == \"__main__\"`` block of the ``start`` module. Why does "
"this work?"
msgstr ""
"Observera att import av ``__main__`` inte orsakar några problem med "
"oavsiktlig körning av toppnivåkod avsedd för skriptanvändning som läggs in i "
"``if __name__ == \"__main__\"``-blocket i ``start``-modulen. Varför fungerar "
"det här?"

msgid ""
"Python inserts an empty ``__main__`` module in :data:`sys.modules` at "
"interpreter startup, and populates it by running top-level code. In our "
"example this is the ``start`` module which runs line by line and imports "
"``namely``. In turn, ``namely`` imports ``__main__`` (which is really "
"``start``). That's an import cycle! Fortunately, since the partially "
"populated ``__main__`` module is present in :data:`sys.modules`, Python "
"passes that to ``namely``. See :ref:`Special considerations for __main__ "
"<import-dunder-main>` in the import system's reference for details on how "
"this works."
msgstr ""
"Python infogar en tom ``__main__``-modul i :data:`sys.modules` vid tolkens "
"start och fyller på den genom att köra kod på högsta nivån. I vårt exempel "
"är detta modulen ``start`` som körs rad för rad och importerar ``namely``. I "
"sin tur importerar ``namely`` ``__main__`` (som egentligen är ``start``). "
"Det är en importcykel! Lyckligtvis, eftersom den delvis fyllda modulen "
"``__main__`` finns i :data:`sys.modules`, skickar Python den till "
"``namely``. Se :ref:``Särskilda överväganden för __main__ <import-dunder-"
"main>`` i importsystemets referens för detaljer om hur detta fungerar."

msgid ""
"The Python REPL is another example of a \"top-level environment\", so "
"anything defined in the REPL becomes part of the ``__main__`` scope::"
msgstr ""
"Python REPL är ett annat exempel på en \"toppnivåmiljö\", så allt som "
"definieras i REPL blir en del av ``__main__`` scope::"

msgid ""
">>> import namely\n"
">>> namely.did_user_define_their_name()\n"
"False\n"
">>> namely.print_user_name()\n"
"Traceback (most recent call last):\n"
"...\n"
"ValueError: Define the variable `my_name`!\n"
">>> my_name = 'Jabberwocky'\n"
">>> namely.did_user_define_their_name()\n"
"True\n"
">>> namely.print_user_name()\n"
"Jabberwocky"
msgstr ""
">>> import namely\n"
">>> namely.did_user_define_their_name()\n"
"Falsk\n"
">>> namely.print_user_name()\n"
"Traceback (senaste anropet senast):\n"
"...\n"
"ValueError: Definiera variabeln `my_name`!\n"
">>> mitt_namn = 'Jabberwocky'\n"
">>> namely.did_user_define_their_name()\n"
"Sant\n"
">>> namely.print_user_name()\n"
"Jabberwocky"

msgid ""
"The ``__main__`` scope is used in the implementation of :mod:`pdb` and :mod:"
"`rlcompleter`."
msgstr ""
"Scope ``__main__`` används i implementeringen av :mod:`pdb` och :mod:"
"`rlcompleter`."
