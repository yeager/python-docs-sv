# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-19 14:18+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Low-level API Index"
msgstr ""

msgid "This page lists all low-level asyncio APIs."
msgstr ""

msgid "Obtaining the Event Loop"
msgstr ""

msgid ":func:`asyncio.get_running_loop`"
msgstr ""

msgid "The **preferred** function to get the running event loop."
msgstr ""

msgid ":func:`asyncio.get_event_loop`"
msgstr ""

msgid "Get an event loop instance (running or current via the current policy)."
msgstr ""

msgid ":func:`asyncio.set_event_loop`"
msgstr ""

msgid "Set the event loop as current via the current policy."
msgstr ""

msgid ":func:`asyncio.new_event_loop`"
msgstr ""

msgid "Create a new event loop."
msgstr ""

msgid "Examples"
msgstr ""

msgid ":ref:`Using asyncio.get_running_loop() <asyncio_example_future>`."
msgstr ""

msgid "Event Loop Methods"
msgstr ""

msgid ""
"See also the main documentation section about the :ref:`asyncio-event-loop-"
"methods`."
msgstr ""

msgid "Lifecycle"
msgstr ""

msgid ":meth:`loop.run_until_complete`"
msgstr ""

msgid "Run a Future/Task/awaitable until complete."
msgstr ""

msgid ":meth:`loop.run_forever`"
msgstr ""

msgid "Run the event loop forever."
msgstr ""

msgid ":meth:`loop.stop`"
msgstr ""

msgid "Stop the event loop."
msgstr ""

msgid ":meth:`loop.close`"
msgstr ""

msgid "Close the event loop."
msgstr ""

msgid ":meth:`loop.is_running`"
msgstr ""

msgid "Return ``True`` if the event loop is running."
msgstr ""

msgid ":meth:`loop.is_closed`"
msgstr ""

msgid "Return ``True`` if the event loop is closed."
msgstr ""

msgid "``await`` :meth:`loop.shutdown_asyncgens`"
msgstr ""

msgid "Close asynchronous generators."
msgstr ""

msgid "Debugging"
msgstr ""

msgid ":meth:`loop.set_debug`"
msgstr ""

msgid "Enable or disable the debug mode."
msgstr ""

msgid ":meth:`loop.get_debug`"
msgstr ""

msgid "Get the current debug mode."
msgstr ""

msgid "Scheduling Callbacks"
msgstr ""

msgid ":meth:`loop.call_soon`"
msgstr ""

msgid "Invoke a callback soon."
msgstr ""

msgid ":meth:`loop.call_soon_threadsafe`"
msgstr ""

msgid "A thread-safe variant of :meth:`loop.call_soon`."
msgstr ""

msgid ":meth:`loop.call_later`"
msgstr ""

msgid "Invoke a callback *after* the given time."
msgstr ""

msgid ":meth:`loop.call_at`"
msgstr ""

msgid "Invoke a callback *at* the given time."
msgstr ""

msgid "Thread/Interpreter/Process Pool"
msgstr ""

msgid "``await`` :meth:`loop.run_in_executor`"
msgstr ""

msgid ""
"Run a CPU-bound or other blocking function in a :mod:`concurrent.futures` "
"executor."
msgstr ""

msgid ":meth:`loop.set_default_executor`"
msgstr ""

msgid "Set the default executor for :meth:`loop.run_in_executor`."
msgstr ""

msgid "Tasks and Futures"
msgstr ""

msgid ":meth:`loop.create_future`"
msgstr ""

msgid "Create a :class:`Future` object."
msgstr ""

msgid ":meth:`loop.create_task`"
msgstr ""

msgid "Schedule coroutine as a :class:`Task`."
msgstr ""

msgid ":meth:`loop.set_task_factory`"
msgstr ""

msgid ""
"Set a factory used by :meth:`loop.create_task` to create :class:`Tasks "
"<Task>`."
msgstr ""

msgid ":meth:`loop.get_task_factory`"
msgstr ""

msgid ""
"Get the factory :meth:`loop.create_task` uses to create :class:`Tasks "
"<Task>`."
msgstr ""

msgid "DNS"
msgstr ""

msgid "``await`` :meth:`loop.getaddrinfo`"
msgstr ""

msgid "Asynchronous version of :meth:`socket.getaddrinfo`."
msgstr ""

msgid "``await`` :meth:`loop.getnameinfo`"
msgstr ""

msgid "Asynchronous version of :meth:`socket.getnameinfo`."
msgstr ""

msgid "Networking and IPC"
msgstr ""

msgid "``await`` :meth:`loop.create_connection`"
msgstr ""

msgid "Open a TCP connection."
msgstr ""

msgid "``await`` :meth:`loop.create_server`"
msgstr ""

msgid "Create a TCP server."
msgstr ""

msgid "``await`` :meth:`loop.create_unix_connection`"
msgstr ""

msgid "Open a Unix socket connection."
msgstr ""

msgid "``await`` :meth:`loop.create_unix_server`"
msgstr ""

msgid "Create a Unix socket server."
msgstr ""

msgid "``await`` :meth:`loop.connect_accepted_socket`"
msgstr ""

msgid "Wrap a :class:`~socket.socket` into a ``(transport, protocol)`` pair."
msgstr ""

msgid "``await`` :meth:`loop.create_datagram_endpoint`"
msgstr ""

msgid "Open a datagram (UDP) connection."
msgstr ""

msgid "``await`` :meth:`loop.sendfile`"
msgstr ""

msgid "Send a file over a transport."
msgstr ""

msgid "``await`` :meth:`loop.start_tls`"
msgstr ""

msgid "Upgrade an existing connection to TLS."
msgstr ""

msgid "``await`` :meth:`loop.connect_read_pipe`"
msgstr ""

msgid "Wrap a read end of a pipe into a ``(transport, protocol)`` pair."
msgstr ""

msgid "``await`` :meth:`loop.connect_write_pipe`"
msgstr ""

msgid "Wrap a write end of a pipe into a ``(transport, protocol)`` pair."
msgstr ""

msgid "Sockets"
msgstr ""

msgid "``await`` :meth:`loop.sock_recv`"
msgstr ""

msgid "Receive data from the :class:`~socket.socket`."
msgstr ""

msgid "``await`` :meth:`loop.sock_recv_into`"
msgstr ""

msgid "Receive data from the :class:`~socket.socket` into a buffer."
msgstr ""

msgid "``await`` :meth:`loop.sock_recvfrom`"
msgstr ""

msgid "Receive a datagram from the :class:`~socket.socket`."
msgstr ""

msgid "``await`` :meth:`loop.sock_recvfrom_into`"
msgstr ""

msgid "Receive a datagram from the :class:`~socket.socket` into a buffer."
msgstr ""

msgid "``await`` :meth:`loop.sock_sendall`"
msgstr ""

msgid "Send data to the :class:`~socket.socket`."
msgstr ""

msgid "``await`` :meth:`loop.sock_sendto`"
msgstr ""

msgid "Send a datagram via the :class:`~socket.socket` to the given address."
msgstr ""

msgid "``await`` :meth:`loop.sock_connect`"
msgstr ""

msgid "Connect the :class:`~socket.socket`."
msgstr ""

msgid "``await`` :meth:`loop.sock_accept`"
msgstr ""

msgid "Accept a :class:`~socket.socket` connection."
msgstr ""

msgid "``await`` :meth:`loop.sock_sendfile`"
msgstr ""

msgid "Send a file over the :class:`~socket.socket`."
msgstr ""

msgid ":meth:`loop.add_reader`"
msgstr ""

msgid "Start watching a file descriptor for read availability."
msgstr ""

msgid ":meth:`loop.remove_reader`"
msgstr ""

msgid "Stop watching a file descriptor for read availability."
msgstr ""

msgid ":meth:`loop.add_writer`"
msgstr ""

msgid "Start watching a file descriptor for write availability."
msgstr ""

msgid ":meth:`loop.remove_writer`"
msgstr ""

msgid "Stop watching a file descriptor for write availability."
msgstr ""

msgid "Unix Signals"
msgstr ""

msgid ":meth:`loop.add_signal_handler`"
msgstr ""

msgid "Add a handler for a :mod:`signal`."
msgstr ""

msgid ":meth:`loop.remove_signal_handler`"
msgstr ""

msgid "Remove a handler for a :mod:`signal`."
msgstr ""

msgid "Subprocesses"
msgstr ""

msgid ":meth:`loop.subprocess_exec`"
msgstr ""

msgid "Spawn a subprocess."
msgstr ""

msgid ":meth:`loop.subprocess_shell`"
msgstr ""

msgid "Spawn a subprocess from a shell command."
msgstr ""

msgid "Error Handling"
msgstr ""

msgid ":meth:`loop.call_exception_handler`"
msgstr ""

msgid "Call the exception handler."
msgstr ""

msgid ":meth:`loop.set_exception_handler`"
msgstr ""

msgid "Set a new exception handler."
msgstr ""

msgid ":meth:`loop.get_exception_handler`"
msgstr ""

msgid "Get the current exception handler."
msgstr ""

msgid ":meth:`loop.default_exception_handler`"
msgstr ""

msgid "The default exception handler implementation."
msgstr ""

msgid ""
":ref:`Using asyncio.new_event_loop() and loop.run_forever() "
"<asyncio_example_lowlevel_helloworld>`."
msgstr ""

msgid ":ref:`Using loop.call_later() <asyncio_example_call_later>`."
msgstr ""

msgid ""
"Using ``loop.create_connection()`` to implement :ref:`an echo-client "
"<asyncio_example_tcp_echo_client_protocol>`."
msgstr ""

msgid ""
"Using ``loop.create_connection()`` to :ref:`connect a socket "
"<asyncio_example_create_connection>`."
msgstr ""

msgid ""
":ref:`Using add_reader() to watch an FD for read events "
"<asyncio_example_watch_fd>`."
msgstr ""

msgid ":ref:`Using loop.add_signal_handler() <asyncio_example_unix_signals>`."
msgstr ""

msgid ":ref:`Using loop.subprocess_exec() <asyncio_example_subprocess_proto>`."
msgstr ""

msgid "Transports"
msgstr ""

msgid "All transports implement the following methods:"
msgstr ""

msgid ":meth:`transport.close() <BaseTransport.close>`"
msgstr ""

msgid "Close the transport."
msgstr ""

msgid ":meth:`transport.is_closing() <BaseTransport.is_closing>`"
msgstr ""

msgid "Return ``True`` if the transport is closing or is closed."
msgstr ""

msgid ":meth:`transport.get_extra_info() <BaseTransport.get_extra_info>`"
msgstr ""

msgid "Request for information about the transport."
msgstr ""

msgid ":meth:`transport.set_protocol() <BaseTransport.set_protocol>`"
msgstr ""

msgid "Set a new protocol."
msgstr ""

msgid ":meth:`transport.get_protocol() <BaseTransport.get_protocol>`"
msgstr ""

msgid "Return the current protocol."
msgstr ""

msgid ""
"Transports that can receive data (TCP and Unix connections, pipes, etc).  "
"Returned from methods like :meth:`loop.create_connection`, :meth:`loop."
"create_unix_connection`, :meth:`loop.connect_read_pipe`, etc:"
msgstr ""

msgid "Read Transports"
msgstr ""

msgid ":meth:`transport.is_reading() <ReadTransport.is_reading>`"
msgstr ""

msgid "Return ``True`` if the transport is receiving."
msgstr ""

msgid ":meth:`transport.pause_reading() <ReadTransport.pause_reading>`"
msgstr ""

msgid "Pause receiving."
msgstr ""

msgid ":meth:`transport.resume_reading() <ReadTransport.resume_reading>`"
msgstr ""

msgid "Resume receiving."
msgstr ""

msgid ""
"Transports that can Send data (TCP and Unix connections, pipes, etc).  "
"Returned from methods like :meth:`loop.create_connection`, :meth:`loop."
"create_unix_connection`, :meth:`loop.connect_write_pipe`, etc:"
msgstr ""

msgid "Write Transports"
msgstr ""

msgid ":meth:`transport.write() <WriteTransport.write>`"
msgstr ""

msgid "Write data to the transport."
msgstr ""

msgid ":meth:`transport.writelines() <WriteTransport.writelines>`"
msgstr ""

msgid "Write buffers to the transport."
msgstr ""

msgid ":meth:`transport.can_write_eof() <WriteTransport.can_write_eof>`"
msgstr ""

msgid "Return :const:`True` if the transport supports sending EOF."
msgstr ""

msgid ":meth:`transport.write_eof() <WriteTransport.write_eof>`"
msgstr ""

msgid "Close and send EOF after flushing buffered data."
msgstr ""

msgid ":meth:`transport.abort() <WriteTransport.abort>`"
msgstr ""

msgid "Close the transport immediately."
msgstr ""

msgid ""
":meth:`transport.get_write_buffer_size() <WriteTransport."
"get_write_buffer_size>`"
msgstr ""

msgid "Return the current size of the output buffer."
msgstr ""

msgid ""
":meth:`transport.get_write_buffer_limits() <WriteTransport."
"get_write_buffer_limits>`"
msgstr ""

msgid "Return high and low water marks for write flow control."
msgstr ""

msgid ""
":meth:`transport.set_write_buffer_limits() <WriteTransport."
"set_write_buffer_limits>`"
msgstr ""

msgid "Set new high and low water marks for write flow control."
msgstr ""

msgid "Transports returned by :meth:`loop.create_datagram_endpoint`:"
msgstr ""

msgid "Datagram Transports"
msgstr ""

msgid ":meth:`transport.sendto() <DatagramTransport.sendto>`"
msgstr ""

msgid "Send data to the remote peer."
msgstr ""

msgid ":meth:`transport.abort() <DatagramTransport.abort>`"
msgstr ""

msgid ""
"Low-level transport abstraction over subprocesses. Returned by :meth:`loop."
"subprocess_exec` and :meth:`loop.subprocess_shell`:"
msgstr ""

msgid "Subprocess Transports"
msgstr ""

msgid ":meth:`transport.get_pid() <SubprocessTransport.get_pid>`"
msgstr ""

msgid "Return the subprocess process id."
msgstr ""

msgid ""
":meth:`transport.get_pipe_transport() <SubprocessTransport."
"get_pipe_transport>`"
msgstr ""

msgid ""
"Return the transport for the requested communication pipe (*stdin*, "
"*stdout*, or *stderr*)."
msgstr ""

msgid ":meth:`transport.get_returncode() <SubprocessTransport.get_returncode>`"
msgstr ""

msgid "Return the subprocess return code."
msgstr ""

msgid ":meth:`transport.kill() <SubprocessTransport.kill>`"
msgstr ""

msgid "Kill the subprocess."
msgstr ""

msgid ":meth:`transport.send_signal() <SubprocessTransport.send_signal>`"
msgstr ""

msgid "Send a signal to the subprocess."
msgstr ""

msgid ":meth:`transport.terminate() <SubprocessTransport.terminate>`"
msgstr ""

msgid "Stop the subprocess."
msgstr ""

msgid ":meth:`transport.close() <SubprocessTransport.close>`"
msgstr ""

msgid "Kill the subprocess and close all pipes."
msgstr ""

msgid "Protocols"
msgstr ""

msgid "Protocol classes can implement the following **callback methods**:"
msgstr ""

msgid "``callback`` :meth:`connection_made() <BaseProtocol.connection_made>`"
msgstr ""

msgid "Called when a connection is made."
msgstr ""

msgid "``callback`` :meth:`connection_lost() <BaseProtocol.connection_lost>`"
msgstr ""

msgid "Called when the connection is lost or closed."
msgstr ""

msgid "``callback`` :meth:`pause_writing() <BaseProtocol.pause_writing>`"
msgstr ""

msgid "Called when the transport's buffer goes over the high water mark."
msgstr ""

msgid "``callback`` :meth:`resume_writing() <BaseProtocol.resume_writing>`"
msgstr ""

msgid "Called when the transport's buffer drains below the low water mark."
msgstr ""

msgid "Streaming Protocols (TCP, Unix Sockets, Pipes)"
msgstr ""

msgid "``callback`` :meth:`data_received() <Protocol.data_received>`"
msgstr ""

msgid "Called when some data is received."
msgstr ""

msgid "``callback`` :meth:`eof_received() <Protocol.eof_received>`"
msgstr ""

msgid "Called when an EOF is received."
msgstr ""

msgid "Buffered Streaming Protocols"
msgstr ""

msgid "``callback`` :meth:`get_buffer() <BufferedProtocol.get_buffer>`"
msgstr ""

msgid "Called to allocate a new receive buffer."
msgstr ""

msgid "``callback`` :meth:`buffer_updated() <BufferedProtocol.buffer_updated>`"
msgstr ""

msgid "Called when the buffer was updated with the received data."
msgstr ""

msgid "``callback`` :meth:`eof_received() <BufferedProtocol.eof_received>`"
msgstr ""

msgid "Datagram Protocols"
msgstr ""

msgid ""
"``callback`` :meth:`datagram_received() <DatagramProtocol.datagram_received>`"
msgstr ""

msgid "Called when a datagram is received."
msgstr ""

msgid "``callback`` :meth:`error_received() <DatagramProtocol.error_received>`"
msgstr ""

msgid ""
"Called when a previous send or receive operation raises an :class:`OSError`."
msgstr ""

msgid "Subprocess Protocols"
msgstr ""

msgid "``callback`` :meth:`~SubprocessProtocol.pipe_data_received`"
msgstr ""

msgid ""
"Called when the child process writes data into its *stdout* or *stderr* pipe."
msgstr ""

msgid "``callback`` :meth:`~SubprocessProtocol.pipe_connection_lost`"
msgstr ""

msgid ""
"Called when one of the pipes communicating with the child process is closed."
msgstr ""

msgid ""
"``callback`` :meth:`process_exited() <SubprocessProtocol.process_exited>`"
msgstr ""

msgid ""
"Called when the child process has exited. It can be called before :meth:"
"`~SubprocessProtocol.pipe_data_received` and :meth:`~SubprocessProtocol."
"pipe_connection_lost` methods."
msgstr ""

msgid "Event Loop Policies"
msgstr ""

msgid ""
"Policies is a low-level mechanism to alter the behavior of functions like :"
"func:`asyncio.get_event_loop`.  See also the main :ref:`policies section "
"<asyncio-policies>` for more details."
msgstr ""

msgid "Accessing Policies"
msgstr ""

msgid ":meth:`asyncio.get_event_loop_policy`"
msgstr ""

msgid "Return the current process-wide policy."
msgstr ""

msgid ":meth:`asyncio.set_event_loop_policy`"
msgstr ""

msgid "Set a new process-wide policy."
msgstr ""

msgid ":class:`AbstractEventLoopPolicy`"
msgstr ""

msgid "Base class for policy objects."
msgstr ""
