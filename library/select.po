# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:34+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid ":mod:`!select` --- Waiting for I/O completion"
msgstr ""

msgid ""
"This module provides access to the :c:func:`!select` and :c:func:`!poll` "
"functions available in most operating systems, :c:func:`!devpoll` available "
"on Solaris and derivatives, :c:func:`!epoll` available on Linux 2.5+ and :c:"
"func:`!kqueue` available on most BSD. Note that on Windows, it only works "
"for sockets; on other operating systems, it also works for other file types "
"(in particular, on Unix, it works on pipes). It cannot be used on regular "
"files to determine whether a file has grown since it was last read."
msgstr ""

msgid ""
"The :mod:`selectors` module allows high-level and efficient I/O "
"multiplexing, built upon the :mod:`select` module primitives. Users are "
"encouraged to use the :mod:`selectors` module instead, unless they want "
"precise control over the OS-level primitives used."
msgstr ""

msgid "Availability"
msgstr ""

msgid ""
"This module does not work or is not available on WebAssembly. See :ref:`wasm-"
"availability` for more information."
msgstr ""

msgid "The module defines the following:"
msgstr ""

msgid "A deprecated alias of :exc:`OSError`."
msgstr ""

msgid "Following :pep:`3151`, this class was made an alias of :exc:`OSError`."
msgstr ""

msgid ""
"(Only supported on Solaris and derivatives.)  Returns a ``/dev/poll`` "
"polling object; see section :ref:`devpoll-objects` below for the methods "
"supported by devpoll objects."
msgstr ""

msgid ""
":c:func:`!devpoll` objects are linked to the number of file descriptors "
"allowed at the time of instantiation. If your program reduces this value, :c:"
"func:`!devpoll` will fail. If your program increases this value, :c:func:`!"
"devpoll` may return an incomplete list of active file descriptors."
msgstr ""

msgid "The new file descriptor is :ref:`non-inheritable <fd_inheritance>`."
msgstr ""

msgid "The new file descriptor is now non-inheritable."
msgstr ""

msgid ""
"(Only supported on Linux 2.5.44 and newer.) Return an edge polling object, "
"which can be used as Edge or Level Triggered interface for I/O events."
msgstr ""

msgid ""
"*sizehint* informs epoll about the expected number of events to be "
"registered.  It must be positive, or ``-1`` to use the default. It is only "
"used on older systems where :c:func:`!epoll_create1` is not available; "
"otherwise it has no effect (though its value is still checked)."
msgstr ""

msgid ""
"*flags* is deprecated and completely ignored.  However, when supplied, its "
"value must be ``0`` or ``select.EPOLL_CLOEXEC``, otherwise ``OSError`` is "
"raised."
msgstr ""

msgid ""
"See the :ref:`epoll-objects` section below for the methods supported by "
"epolling objects."
msgstr ""

msgid ""
"``epoll`` objects support the context management protocol: when used in a :"
"keyword:`with` statement, the new file descriptor is automatically closed at "
"the end of the block."
msgstr ""

msgid "Added the *flags* parameter."
msgstr ""

msgid ""
"Support for the :keyword:`with` statement was added. The new file descriptor "
"is now non-inheritable."
msgstr ""

msgid ""
"The *flags* parameter.  ``select.EPOLL_CLOEXEC`` is used by default now. "
"Use :func:`os.set_inheritable` to make the file descriptor inheritable."
msgstr ""

msgid ""
"(Not supported by all operating systems.)  Returns a polling object, which "
"supports registering and unregistering file descriptors, and then polling "
"them for I/O events; see section :ref:`poll-objects` below for the methods "
"supported by polling objects."
msgstr ""

msgid ""
"(Only supported on BSD.)  Returns a kernel queue object; see section :ref:"
"`kqueue-objects` below for the methods supported by kqueue objects."
msgstr ""

msgid ""
"(Only supported on BSD.)  Returns a kernel event object; see section :ref:"
"`kevent-objects` below for the methods supported by kevent objects."
msgstr ""

msgid ""
"This is a straightforward interface to the Unix :c:func:`!select` system "
"call. The first three arguments are iterables of 'waitable objects': either "
"integers representing file descriptors or objects with a parameterless "
"method named :meth:`~io.IOBase.fileno` returning such an integer:"
msgstr ""

msgid "*rlist*: wait until ready for reading"
msgstr ""

msgid "*wlist*: wait until ready for writing"
msgstr ""

msgid ""
"*xlist*: wait for an \"exceptional condition\" (see the manual page for what "
"your system considers such a condition)"
msgstr ""

msgid ""
"Empty iterables are allowed, but acceptance of three empty iterables is "
"platform-dependent. (It is known to work on Unix but not on Windows.)  The "
"optional *timeout* argument specifies a time-out as a floating-point number "
"in seconds.  When the *timeout* argument is omitted the function blocks "
"until at least one file descriptor is ready.  A time-out value of zero "
"specifies a poll and never blocks."
msgstr ""

msgid ""
"The return value is a triple of lists of objects that are ready: subsets of "
"the first three arguments.  When the time-out is reached without a file "
"descriptor becoming ready, three empty lists are returned."
msgstr ""

msgid ""
"Among the acceptable object types in the iterables are Python :term:`file "
"objects <file object>` (e.g. ``sys.stdin``, or objects returned by :func:"
"`open` or :func:`os.popen`), socket objects returned by :func:`socket."
"socket`.  You may also define a :dfn:`wrapper` class yourself, as long as it "
"has an appropriate :meth:`~io.IOBase.fileno` method (that really returns a "
"file descriptor, not just a random integer)."
msgstr ""

msgid ""
"File objects on Windows are not acceptable, but sockets are.  On Windows, "
"the underlying :c:func:`!select` function is provided by the WinSock "
"library, and does not handle file descriptors that don't originate from "
"WinSock."
msgstr ""

msgid ""
"The function is now retried with a recomputed timeout when interrupted by a "
"signal, except if the signal handler raises an exception (see :pep:`475` for "
"the rationale), instead of raising :exc:`InterruptedError`."
msgstr ""

msgid ""
"The minimum number of bytes which can be written without blocking to a pipe "
"when the pipe has been reported as ready for writing by :func:`~select."
"select`, :func:`!poll` or another interface in this module.  This doesn't "
"apply to other kind of file-like objects such as sockets."
msgstr ""

msgid "This value is guaranteed by POSIX to be at least 512."
msgstr ""

msgid "``/dev/poll`` Polling Objects"
msgstr ""

msgid ""
"Solaris and derivatives have ``/dev/poll``. While :c:func:`!select` is *O*\\ "
"(*highest file descriptor*) and :c:func:`!poll` is *O*\\ (*number of file "
"descriptors*), ``/dev/poll`` is *O*\\ (*active file descriptors*)."
msgstr ""

msgid ""
"``/dev/poll`` behaviour is very close to the standard :c:func:`!poll` object."
msgstr ""

msgid "Close the file descriptor of the polling object."
msgstr ""

msgid "``True`` if the polling object is closed."
msgstr ""

msgid "Return the file descriptor number of the polling object."
msgstr ""

msgid ""
"Register a file descriptor with the polling object.  Future calls to the :"
"meth:`poll` method will then check whether the file descriptor has any "
"pending I/O events.  *fd* can be either an integer, or an object with a :"
"meth:`~io.IOBase.fileno` method that returns an integer.  File objects "
"implement :meth:`!fileno`, so they can also be used as the argument."
msgstr ""

msgid ""
"*eventmask* is an optional bitmask describing the type of events you want to "
"check for. The constants are the same that with :c:func:`!poll` object. The "
"default value is a combination of the constants :const:`POLLIN`, :const:"
"`POLLPRI`, and :const:`POLLOUT`."
msgstr ""

msgid ""
"Registering a file descriptor that's already registered is not an error, but "
"the result is undefined. The appropriate action is to unregister or modify "
"it first. This is an important difference compared with :c:func:`!poll`."
msgstr ""

msgid ""
"This method does an :meth:`unregister` followed by a :meth:`register`. It is "
"(a bit) more efficient that doing the same explicitly."
msgstr ""

msgid ""
"Remove a file descriptor being tracked by a polling object.  Just like the :"
"meth:`register` method, *fd* can be an integer or an object with a :meth:"
"`~io.IOBase.fileno` method that returns an integer."
msgstr ""

msgid ""
"Attempting to remove a file descriptor that was never registered is safely "
"ignored."
msgstr ""

msgid ""
"Polls the set of registered file descriptors, and returns a possibly empty "
"list containing ``(fd, event)`` 2-tuples for the descriptors that have "
"events or errors to report. *fd* is the file descriptor, and *event* is a "
"bitmask with bits set for the reported events for that descriptor --- :const:"
"`POLLIN` for waiting input, :const:`POLLOUT` to indicate that the descriptor "
"can be written to, and so forth. An empty list indicates that the call timed "
"out and no file descriptors had any events to report. If *timeout* is given, "
"it specifies the length of time in milliseconds which the system will wait "
"for events before returning. If *timeout* is omitted, -1, or :const:`None`, "
"the call will block until there is an event for this poll object."
msgstr ""

msgid "Edge and Level Trigger Polling (epoll) Objects"
msgstr ""

msgid "https://linux.die.net/man/4/epoll"
msgstr ""

msgid "*eventmask*"
msgstr ""

msgid "Constant"
msgstr ""

msgid "Meaning"
msgstr ""

msgid ":const:`EPOLLIN`"
msgstr ""

msgid "Available for read"
msgstr ""

msgid ":const:`EPOLLOUT`"
msgstr ""

msgid "Available for write"
msgstr ""

msgid ":const:`EPOLLPRI`"
msgstr ""

msgid "Urgent data for read"
msgstr ""

msgid ":const:`EPOLLERR`"
msgstr ""

msgid "Error condition happened on the assoc. fd"
msgstr ""

msgid ":const:`EPOLLHUP`"
msgstr ""

msgid "Hang up happened on the assoc. fd"
msgstr ""

msgid ":const:`EPOLLET`"
msgstr ""

msgid "Set Edge Trigger behavior, the default is Level Trigger behavior"
msgstr ""

msgid ":const:`EPOLLONESHOT`"
msgstr ""

msgid ""
"Set one-shot behavior. After one event is pulled out, the fd is internally "
"disabled"
msgstr ""

msgid ":const:`EPOLLEXCLUSIVE`"
msgstr ""

msgid ""
"Wake only one epoll object when the associated fd has an event. The default "
"(if this flag is not set) is to wake all epoll objects polling on a fd."
msgstr ""

msgid ":const:`EPOLLRDHUP`"
msgstr ""

msgid ""
"Stream socket peer closed connection or shut down writing half of connection."
msgstr ""

msgid ":const:`EPOLLRDNORM`"
msgstr ""

msgid "Equivalent to :const:`EPOLLIN`"
msgstr ""

msgid ":const:`EPOLLRDBAND`"
msgstr ""

msgid "Priority data band can be read."
msgstr ""

msgid ":const:`EPOLLWRNORM`"
msgstr ""

msgid "Equivalent to :const:`EPOLLOUT`"
msgstr ""

msgid ":const:`EPOLLWRBAND`"
msgstr ""

msgid "Priority data may be written."
msgstr ""

msgid ":const:`EPOLLMSG`"
msgstr ""

msgid "Ignored."
msgstr ""

msgid ":const:`EPOLLWAKEUP`"
msgstr ""

msgid "Prevents sleep during event waiting."
msgstr ""

msgid ""
":const:`EPOLLEXCLUSIVE` was added.  It's only supported by Linux Kernel 4.5 "
"or later."
msgstr ""

msgid ""
":const:`EPOLLWAKEUP` was added. It's only supported by Linux Kernel 3.5 or "
"later."
msgstr ""

msgid "Close the control file descriptor of the epoll object."
msgstr ""

msgid "``True`` if the epoll object is closed."
msgstr ""

msgid "Return the file descriptor number of the control fd."
msgstr ""

msgid "Create an epoll object from a given file descriptor."
msgstr ""

msgid "Register a fd descriptor with the epoll object."
msgstr ""

msgid "Modify a registered file descriptor."
msgstr ""

msgid "Remove a registered file descriptor from the epoll object."
msgstr ""

msgid "The method no longer ignores the :data:`~errno.EBADF` error."
msgstr ""

msgid "Wait for events. timeout in seconds (float)"
msgstr ""

msgid "Polling Objects"
msgstr ""

msgid ""
"The :c:func:`!poll` system call, supported on most Unix systems, provides "
"better scalability for network servers that service many, many clients at "
"the same time. :c:func:`!poll` scales better because the system call only "
"requires listing the file descriptors of interest, while :c:func:`!select` "
"builds a bitmap, turns on bits for the fds of interest, and then afterward "
"the whole bitmap has to be linearly scanned again. :c:func:`!select` is "
"*O*\\ (*highest file descriptor*), while :c:func:`!poll` is *O*\\ (*number "
"of file descriptors*)."
msgstr ""

msgid ""
"*eventmask* is an optional bitmask describing the type of events you want to "
"check for, and can be a combination of the constants :const:`POLLIN`, :const:"
"`POLLPRI`, and :const:`POLLOUT`, described in the table below.  If not "
"specified, the default value used will check for all 3 types of events."
msgstr ""

msgid ":const:`POLLIN`"
msgstr ""

msgid "There is data to read"
msgstr ""

msgid ":const:`POLLPRI`"
msgstr ""

msgid "There is urgent data to read"
msgstr ""

msgid ":const:`POLLOUT`"
msgstr ""

msgid "Ready for output: writing will not block"
msgstr ""

msgid ":const:`POLLERR`"
msgstr ""

msgid "Error condition of some sort"
msgstr ""

msgid ":const:`POLLHUP`"
msgstr ""

msgid "Hung up"
msgstr ""

msgid ":const:`POLLRDHUP`"
msgstr ""

msgid ""
"Stream socket peer closed connection, or shut down writing half of connection"
msgstr ""

msgid ":const:`POLLNVAL`"
msgstr ""

msgid "Invalid request: descriptor not open"
msgstr ""

msgid ""
"Registering a file descriptor that's already registered is not an error, and "
"has the same effect as registering the descriptor exactly once."
msgstr ""

msgid ""
"Modifies an already registered fd. This has the same effect as "
"``register(fd, eventmask)``.  Attempting to modify a file descriptor that "
"was never registered causes an :exc:`OSError` exception with errno :const:"
"`ENOENT` to be raised."
msgstr ""

msgid ""
"Attempting to remove a file descriptor that was never registered causes a :"
"exc:`KeyError` exception to be raised."
msgstr ""

msgid ""
"Polls the set of registered file descriptors, and returns a possibly empty "
"list containing ``(fd, event)`` 2-tuples for the descriptors that have "
"events or errors to report. *fd* is the file descriptor, and *event* is a "
"bitmask with bits set for the reported events for that descriptor --- :const:"
"`POLLIN` for waiting input, :const:`POLLOUT` to indicate that the descriptor "
"can be written to, and so forth. An empty list indicates that the call timed "
"out and no file descriptors had any events to report. If *timeout* is given, "
"it specifies the length of time in milliseconds which the system will wait "
"for events before returning. If *timeout* is omitted, negative, or :const:"
"`None`, the call will block until there is an event for this poll object."
msgstr ""

msgid "Kqueue Objects"
msgstr ""

msgid "Close the control file descriptor of the kqueue object."
msgstr ""

msgid "``True`` if the kqueue object is closed."
msgstr ""

msgid "Create a kqueue object from a given file descriptor."
msgstr ""

msgid "Low level interface to kevent"
msgstr ""

msgid "changelist must be an iterable of kevent objects or ``None``"
msgstr ""

msgid "max_events must be 0 or a positive integer"
msgstr ""

msgid ""
"timeout in seconds (floats possible); the default is ``None``, to wait "
"forever"
msgstr ""

msgid "Kevent Objects"
msgstr ""

msgid "https://man.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2"
msgstr ""

msgid ""
"Value used to identify the event. The interpretation depends on the filter "
"but it's usually the file descriptor. In the constructor ident can either be "
"an int or an object with a :meth:`~io.IOBase.fileno` method. kevent stores "
"the integer internally."
msgstr ""

msgid "Name of the kernel filter."
msgstr ""

msgid ":const:`KQ_FILTER_READ`"
msgstr ""

msgid "Takes a descriptor and returns whenever there is data available to read"
msgstr ""

msgid ":const:`KQ_FILTER_WRITE`"
msgstr ""

msgid ""
"Takes a descriptor and returns whenever there is data available to write"
msgstr ""

msgid ":const:`KQ_FILTER_AIO`"
msgstr ""

msgid "AIO requests"
msgstr ""

msgid ":const:`KQ_FILTER_VNODE`"
msgstr ""

msgid ""
"Returns when one or more of the requested events watched in *fflag* occurs"
msgstr ""

msgid ":const:`KQ_FILTER_PROC`"
msgstr ""

msgid "Watch for events on a process id"
msgstr ""

msgid ":const:`KQ_FILTER_NETDEV`"
msgstr ""

msgid "Watch for events on a network device [not available on macOS]"
msgstr ""

msgid ":const:`KQ_FILTER_SIGNAL`"
msgstr ""

msgid "Returns whenever the watched signal is delivered to the process"
msgstr ""

msgid ":const:`KQ_FILTER_TIMER`"
msgstr ""

msgid "Establishes an arbitrary timer"
msgstr ""

msgid "Filter action."
msgstr ""

msgid ":const:`KQ_EV_ADD`"
msgstr ""

msgid "Adds or modifies an event"
msgstr ""

msgid ":const:`KQ_EV_DELETE`"
msgstr ""

msgid "Removes an event from the queue"
msgstr ""

msgid ":const:`KQ_EV_ENABLE`"
msgstr ""

msgid "Permitscontrol() to returns the event"
msgstr ""

msgid ":const:`KQ_EV_DISABLE`"
msgstr ""

msgid "Disablesevent"
msgstr ""

msgid ":const:`KQ_EV_ONESHOT`"
msgstr ""

msgid "Removes event after first occurrence"
msgstr ""

msgid ":const:`KQ_EV_CLEAR`"
msgstr ""

msgid "Reset the state after an event is retrieved"
msgstr ""

msgid ":const:`KQ_EV_SYSFLAGS`"
msgstr ""

msgid "internal event"
msgstr ""

msgid ":const:`KQ_EV_FLAG1`"
msgstr ""

msgid ":const:`KQ_EV_EOF`"
msgstr ""

msgid "Filter specific EOF condition"
msgstr ""

msgid ":const:`KQ_EV_ERROR`"
msgstr ""

msgid "See return values"
msgstr ""

msgid "Filter specific flags."
msgstr ""

msgid ":const:`KQ_FILTER_READ` and  :const:`KQ_FILTER_WRITE` filter flags:"
msgstr ""

msgid ":const:`KQ_NOTE_LOWAT`"
msgstr ""

msgid "low water mark of a socket buffer"
msgstr ""

msgid ":const:`KQ_FILTER_VNODE` filter flags:"
msgstr ""

msgid ":const:`KQ_NOTE_DELETE`"
msgstr ""

msgid "*unlink()* was called"
msgstr ""

msgid ":const:`KQ_NOTE_WRITE`"
msgstr ""

msgid "a write occurred"
msgstr ""

msgid ":const:`KQ_NOTE_EXTEND`"
msgstr ""

msgid "the file was extended"
msgstr ""

msgid ":const:`KQ_NOTE_ATTRIB`"
msgstr ""

msgid "an attribute was changed"
msgstr ""

msgid ":const:`KQ_NOTE_LINK`"
msgstr ""

msgid "the link count has changed"
msgstr ""

msgid ":const:`KQ_NOTE_RENAME`"
msgstr ""

msgid "the file was renamed"
msgstr ""

msgid ":const:`KQ_NOTE_REVOKE`"
msgstr ""

msgid "access to the file was revoked"
msgstr ""

msgid ":const:`KQ_FILTER_PROC` filter flags:"
msgstr ""

msgid ":const:`KQ_NOTE_EXIT`"
msgstr ""

msgid "the process has exited"
msgstr ""

msgid ":const:`KQ_NOTE_FORK`"
msgstr ""

msgid "the process has called *fork()*"
msgstr ""

msgid ":const:`KQ_NOTE_EXEC`"
msgstr ""

msgid "the process has executed a new process"
msgstr ""

msgid ":const:`KQ_NOTE_PCTRLMASK`"
msgstr ""

msgid "internal filter flag"
msgstr ""

msgid ":const:`KQ_NOTE_PDATAMASK`"
msgstr ""

msgid ":const:`KQ_NOTE_TRACK`"
msgstr ""

msgid "follow a process across *fork()*"
msgstr ""

msgid ":const:`KQ_NOTE_CHILD`"
msgstr ""

msgid "returned on the child process for *NOTE_TRACK*"
msgstr ""

msgid ":const:`KQ_NOTE_TRACKERR`"
msgstr ""

msgid "unable to attach to a child"
msgstr ""

msgid ":const:`KQ_FILTER_NETDEV` filter flags (not available on macOS):"
msgstr ""

msgid ":const:`KQ_NOTE_LINKUP`"
msgstr ""

msgid "link is up"
msgstr ""

msgid ":const:`KQ_NOTE_LINKDOWN`"
msgstr ""

msgid "link is down"
msgstr ""

msgid ":const:`KQ_NOTE_LINKINV`"
msgstr ""

msgid "link state is invalid"
msgstr ""

msgid "Filter specific data."
msgstr ""

msgid "User defined value."
msgstr ""

msgid "socket() (in module socket)"
msgstr ""

msgid "popen() (in module os)"
msgstr ""

msgid "WinSock"
msgstr ""
