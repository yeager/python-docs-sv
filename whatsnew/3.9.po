# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
# Daniel Nylander <po@danielnylander.se>, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's New In Python 3.9"
msgstr "Vad är nytt i Python 3.9"

msgid "Editor"
msgstr "Redigerare"

msgid "Łukasz Langa"
msgstr "Łukasz Langa"

msgid ""
"This article explains the new features in Python 3.9, compared to 3.8. "
"Python 3.9 was released on October 5, 2020. For full details, see the :ref:"
"`changelog <changelog>`."
msgstr ""
"I den här artikeln förklaras de nya funktionerna i Python 3.9 jämfört med "
"3.8. Python 3.9 släpptes den 5 oktober 2020. För fullständig information, "
"se :ref:`changelog <changelog>`."

msgid ":pep:`596` - Python 3.9 Release Schedule"
msgstr ":pep:`596` - Python 3.9 Utgivningsschema"

msgid "Summary -- Release highlights"
msgstr "Sammanfattning -- Release highlights"

msgid "New syntax features:"
msgstr "Nya syntaxfunktioner:"

msgid ":pep:`584`, union operators added to ``dict``;"
msgstr ":pep:`584`, unionsoperatorer tillagda i ``dict``;"

msgid ":pep:`585`, type hinting generics in standard collections;"
msgstr ":pep:`585`, typhintande generik i standardsamlingar;"

msgid ":pep:`614`, relaxed grammar restrictions on decorators."
msgstr ":pep:`614`, lättade på grammatiska begränsningar för dekoratorer."

msgid "New built-in features:"
msgstr "Nya inbyggda funktioner:"

msgid ":pep:`616`, string methods to remove prefixes and suffixes."
msgstr ":pep:`616`, strängmetoder för att ta bort prefix och suffix."

msgid "New features in the standard library:"
msgstr "Nya funktioner i standardbiblioteket:"

msgid ":pep:`593`, flexible function and variable annotations;"
msgstr ":pep:`593`, flexibla funktions- och variabelanteckningar;"

msgid ""
":func:`os.pidfd_open` added that allows process management without races and "
"signals."
msgstr ""
":func:`os.pidfd_open` tillagd som möjliggör processhantering utan tävlingar "
"och signaler."

msgid "Interpreter improvements:"
msgstr "Förbättringar av tolkar:"

msgid ""
":pep:`573`, fast access to module state from methods of C extension types;"
msgstr ""
":pep:`573`, snabb tillgång till modulstatus från metoder för C-tilläggstyper;"

msgid ":pep:`617`, CPython now uses a new parser based on PEG;"
msgstr ":pep:`617`, CPython använder nu en ny parser baserad på PEG;"

msgid ""
"a number of Python builtins (range, tuple, set, frozenset, list, dict) are "
"now sped up using :pep:`590` vectorcall;"
msgstr ""
"ett antal Python-inbyggda program (range, tuple, set, frozenset, list, dict) "
"snabbas nu upp med :pep:`590` vectorcall;"

msgid "garbage collection does not block on resurrected objects;"
msgstr "skräpinsamlingen blockerar inte på återuppståndna objekt;"

msgid ""
"a number of Python modules (:mod:`!_abc`, :mod:`!audioop`, :mod:`!_bz2`, :"
"mod:`!_codecs`, :mod:`!_contextvars`, :mod:`!_crypt`, :mod:`!_functools`, :"
"mod:`!_json`, :mod:`!_locale`, :mod:`math`, :mod:`operator`, :mod:"
"`resource`, :mod:`time`, :mod:`!_weakref`) now use multiphase initialization "
"as defined by PEP 489;"
msgstr ""
"ett antal Python-moduler (:mod:`!_abc`, :mod:`!audioop`, :mod:`!_bz2`, :mod:"
"`!_codecs`, :mod:`!_contextvars`, :mod:`!_crypt`, :mod:`!_functools`, :mod:`!"
"_json`, :mod:`!_locale`, :mod:`math`, :mod:`operator`, :mod:`resource`, :mod:"
"`time`, :mod:`!_weakref`) använder nu flerfasinitialisering enligt "
"definitionen i PEP 489;"

msgid ""
"a number of standard library modules (:mod:`!audioop`, :mod:`ast`, :mod:"
"`grp`, :mod:`!_hashlib`, :mod:`pwd`, :mod:`!_posixsubprocess`, :mod:"
"`random`, :mod:`select`, :mod:`struct`, :mod:`termios`, :mod:`zlib`) are now "
"using the stable ABI defined by PEP 384."
msgstr ""
"ett antal standardbiblioteksmoduler (:mod:`!audioop`, :mod:`ast`, :mod:"
"`grp`, :mod:`!_hashlib`, :mod:`pwd`, :mod:`!_posixsubprocess`, :mod:"
"`random`, :mod:`select`, :mod:`struct`, :mod:`termios`, :mod:`zlib`) "
"använder nu det stabila ABI som definieras av PEP 384."

msgid "New library modules:"
msgstr "Nya biblioteksmoduler:"

msgid ""
":pep:`615`, the IANA Time Zone Database is now present in the standard "
"library in the :mod:`zoneinfo` module;"
msgstr ""
":pep:`615`, IANA:s tidszonsdatabas finns nu i standardbiblioteket i modulen :"
"mod:`zoneinfo`;"

msgid ""
"an implementation of a topological sort of a graph is now provided in the "
"new :mod:`graphlib` module."
msgstr ""
"en implementation av en topologisk sortering av en graf finns nu i den nya :"
"mod:`graphlib`-modulen."

msgid "Release process changes:"
msgstr "Förändringar i releaseprocessen:"

msgid ":pep:`602`, CPython adopts an annual release cycle."
msgstr ":pep:`602`, CPython antar en årlig utgivningscykel."

msgid "You should check for DeprecationWarning in your code"
msgstr "Du bör kontrollera om det finns DeprecationWarning i din kod"

msgid ""
"When Python 2.7 was still supported, a lot of functionality in Python 3 was "
"kept for backward compatibility with Python 2.7. With the end of Python 2 "
"support, these backward compatibility layers have been removed, or will be "
"removed soon. Most of them emitted a :exc:`DeprecationWarning` warning for "
"several years. For example, using ``collections.Mapping`` instead of "
"``collections.abc.Mapping`` emits a :exc:`DeprecationWarning` since Python "
"3.3, released in 2012."
msgstr ""
"När Python 2.7 fortfarande stöddes behölls en hel del funktionalitet i "
"Python 3 för bakåtkompatibilitet med Python 2.7. I och med slutet av Python "
"2-stödet har dessa bakåtkompatibilitetslager tagits bort eller kommer snart "
"att tas bort. De flesta av dem utfärdade en :exc:`DeprecationWarning`-"
"varning i flera år. Om du till exempel använder ``collections.Mapping`` i "
"stället för ``collections.abc.Mapping`` visas en :exc:`DeprecationWarning` "
"sedan Python 3.3, som släpptes 2012."

msgid ""
"Test your application with the :option:`-W` ``default`` command-line option "
"to see :exc:`DeprecationWarning` and :exc:`PendingDeprecationWarning`, or "
"even with :option:`-W` ``error`` to treat them as errors. :ref:`Warnings "
"Filter <warning-filter>` can be used to ignore warnings from third-party "
"code."
msgstr ""
"Testa din applikation med kommandoradsalternativet :option:`-W` ``default`` "
"för att se :exc:`DeprecationWarning` och :exc:`PendingDeprecationWarning`, "
"eller till och med med :option:`-W` ``error`` för att behandla dem som fel. :"
"ref:`Warnings Filter <warning-filter>` kan användas för att ignorera "
"varningar från tredjepartskod."

msgid ""
"Python 3.9 is the last version providing those Python 2 backward "
"compatibility layers, to give more time to Python projects maintainers to "
"organize the removal of the Python 2 support and add support for Python 3.9."
msgstr ""
"Python 3.9 är den sista versionen som tillhandahåller dessa Python 2 "
"bakåtkompatibilitetslager, för att ge mer tid till Python-projektansvariga "
"att organisera borttagningen av Python 2-stödet och lägga till stöd för "
"Python 3.9."

msgid ""
"Aliases to :ref:`Abstract Base Classes <collections-abstract-base-classes>` "
"in the :mod:`collections` module, like ``collections.Mapping`` alias to :"
"class:`collections.abc.Mapping`, are kept for one last release for backward "
"compatibility. They will be removed from Python 3.10."
msgstr ""
"Aliaser till :ref:`Abstract Base Classes <collections-abstract-base-"
"classes>` i modulen :mod:`collections`, som ``collections.Mapping`` alias "
"till :class:`collections.abc.Mapping`, behålls i en sista version för "
"bakåtkompatibilitet. De kommer att tas bort från Python 3.10."

msgid ""
"More generally, try to run your tests in the :ref:`Python Development Mode "
"<devmode>` which helps to prepare your code to make it compatible with the "
"next Python version."
msgstr ""
"Mer generellt, försök att köra dina tester i :ref:`Python Development Mode "
"<devmode>` som hjälper till att förbereda din kod för att göra den "
"kompatibel med nästa Python-version."

msgid ""
"Note: a number of pre-existing deprecations were removed in this version of "
"Python as well. Consult the :ref:`removed-in-python-39` section."
msgstr ""
"Notera: ett antal redan existerande deprecations togs bort i denna version "
"av Python också. Se avsnittet :ref:`removed-in-python-39`."

msgid "New Features"
msgstr "Nya funktioner"

msgid "Dictionary Merge & Update Operators"
msgstr "Operatorer för sammanslagning och uppdatering av ordböcker"

msgid ""
"Merge (``|``) and update (``|=``) operators have been added to the built-in :"
"class:`dict` class. Those complement the existing ``dict.update`` and "
"``{**d1, **d2}`` methods of merging dictionaries."
msgstr ""
"Operatorerna merge (``|``) och update (``|=``) har lagts till i den inbyggda "
"klassen :class:`dict`. Dessa kompletterar de befintliga metoderna ``dict."
"update`` och ``{**d1, **d2}`` för sammanslagning av ordböcker."

msgid "Example::"
msgstr "Exempel::"

msgid ""
">>> x = {\"key1\": \"value1 from x\", \"key2\": \"value2 from x\"}\n"
">>> y = {\"key2\": \"value2 from y\", \"key3\": \"value3 from y\"}\n"
">>> x | y\n"
"{'key1': 'value1 from x', 'key2': 'value2 from y', 'key3': 'value3 from y'}\n"
">>> y | x\n"
"{'key2': 'value2 from x', 'key3': 'value3 from y', 'key1': 'value1 from x'}"
msgstr ""
">>> x = {\"key1\": \"värde1 från x\", \"nyckel2\": \"värde2 från x\"}\n"
">>> y = {\"nyckel2\": \"värde2 från y\", \"nyckel3\": \"värde3 från y\"}\n"
">>> x | y\n"
"{\"key1\": \"värde1 från x\", \"key2\": \"värde2 från y\", \"key3\": "
"\"värde3 från y\"}\n"
">>> y | x\n"
"{'key2': 'värde2 från x', 'key3': 'värde3 från y', 'key1': 'värde1 från x'}"

msgid ""
"See :pep:`584` for a full description. (Contributed by Brandt Bucher in :"
"issue:`36144`.)"
msgstr ""
"Se :pep:`584` för en fullständig beskrivning. (Bidrag från Brandt Bucher i :"
"issue:`36144`.)"

msgid "New String Methods to Remove Prefixes and Suffixes"
msgstr "Nya strängmetoder för att ta bort prefix och suffix"

msgid ""
":meth:`str.removeprefix(prefix)<str.removeprefix>` and :meth:`str."
"removesuffix(suffix)<str.removesuffix>` have been added to easily remove an "
"unneeded prefix or a suffix from a string. Corresponding ``bytes``, "
"``bytearray``, and ``collections.UserString`` methods have also been added. "
"See :pep:`616` for a full description. (Contributed by Dennis Sweeney in :"
"issue:`39939`.)"
msgstr ""
":meth:`str.removeprefix(prefix)<str.removeprefix>` och :meth:`str."
"removesuffix(suffix)<str.removesuffix>` har lagts till för att enkelt ta "
"bort ett onödigt prefix eller suffix från en sträng. Motsvarande metoder "
"``bytes``, ``bytearray`` och ``collections.UserString`` har också lagts "
"till. Se :pep:`616` för en fullständig beskrivning. (Bidrag från Dennis "
"Sweeney i :issue:`39939`.)"

msgid "Type Hinting Generics in Standard Collections"
msgstr "Typhintande generik i standardkollektioner"

msgid ""
"In type annotations you can now use built-in collection types such as "
"``list`` and ``dict`` as generic types instead of importing the "
"corresponding capitalized types (e.g. ``List`` or ``Dict``) from "
"``typing``.  Some other types in the standard library are also now generic, "
"for example ``queue.Queue``."
msgstr ""
"I typannoteringar kan du nu använda inbyggda samlingstyper som ``list`` och "
"``dict`` som generiska typer istället för att importera motsvarande typer "
"med stor bokstav (t.ex. ``List`` eller ``Dict``) från ``typing``.  Vissa "
"andra typer i standardbiblioteket är nu också generiska, till exempel "
"``queue.Queue``."

msgid "Example:"
msgstr "Exempel:"

msgid ""
"def greet_all(names: list[str]) -> None:\n"
"    for name in names:\n"
"        print(\"Hello\", name)"
msgstr ""
"def greet_all(names: list[str]) -> None:\n"
"    för namn i names:\n"
"        print(\"Hello\", namn)"

msgid ""
"See :pep:`585` for more details.  (Contributed by Guido van Rossum, Ethan "
"Smith, and Batuhan Taşkaya in :issue:`39481`.)"
msgstr ""
"Se :pep:`585` för mer information.  (Bidrag från Guido van Rossum, Ethan "
"Smith och Batuhan Taşkaya i :issue:`39481`.)"

msgid "New Parser"
msgstr "Ny parser"

msgid ""
"Python 3.9 uses a new parser, based on `PEG <https://en.wikipedia.org/wiki/"
"Parsing_expression_grammar>`_ instead of `LL(1) <https://en.wikipedia.org/"
"wiki/LL_parser>`_.  The new parser's performance is roughly comparable to "
"that of the old parser, but the PEG formalism is more flexible than LL(1) "
"when it comes to designing new language features.  We'll start using this "
"flexibility in Python 3.10 and later."
msgstr ""
"Python 3.9 använder en ny parser, baserad på `PEG <https://en.wikipedia.org/"
"wiki/Parsing_expression_grammar>`_ istället för `LL(1) <https://en.wikipedia."
"org/wiki/LL_parser>`_.  Den nya parserns prestanda är ungefär jämförbar med "
"den gamla parserns, men PEG-formalismen är mer flexibel än LL(1) när det "
"gäller att utforma nya språkfunktioner.  Vi kommer att börja använda denna "
"flexibilitet i Python 3.10 och senare."

msgid ""
"The :mod:`ast` module uses the new parser and produces the same AST as the "
"old parser."
msgstr ""
"Modulen :mod:`ast` använder den nya parsern och producerar samma AST som den "
"gamla parsern."

msgid ""
"In Python 3.10, the old parser will be deleted and so will all functionality "
"that depends on it (primarily the :mod:`!parser` module, which has long been "
"deprecated).  In Python 3.9 *only*, you can switch back to the LL(1) parser "
"using a command line switch (``-X oldparser``) or an environment variable "
"(``PYTHONOLDPARSER=1``)."
msgstr ""
"I Python 3.10 kommer den gamla parsern att raderas, liksom all "
"funktionalitet som är beroende av den (främst modulen :mod:`!parser`, som "
"sedan länge är föråldrad).  I Python 3.9 *endast* kan du byta tillbaka till "
"LL(1)-parsern med hjälp av en kommandoradsväxel (``-X oldparser``) eller en "
"miljövariabel (``PYTHONOLDPARSER=1``)."

msgid ""
"See :pep:`617` for more details.  (Contributed by Guido van Rossum, Pablo "
"Galindo and Lysandros Nikolaou in :issue:`40334`.)"
msgstr ""
"Se :pep:`617` för mer information.  (Bidrag från Guido van Rossum, Pablo "
"Galindo och Lysandros Nikolaou i :issue:`40334`.)"

msgid "Other Language Changes"
msgstr "Andra språkliga förändringar"

msgid ""
":func:`__import__` now raises :exc:`ImportError` instead of :exc:"
"`ValueError`, which used to occur when a relative import went past its top-"
"level package. (Contributed by Ngalim Siregar in :issue:`37444`.)"
msgstr ""
":func:`__import__` ger nu upphov till :exc:`ImportError` istället för :exc:"
"`ValueError`, vilket brukade inträffa när en relativ import gick förbi sitt "
"toppnivåpaket. (Bidrag från Ngalim Siregar i :issue:`37444`.)"

msgid ""
"Python now gets the absolute path of the script filename specified on the "
"command line (ex: ``python3 script.py``): the ``__file__`` attribute of the :"
"mod:`__main__` module became an absolute path, rather than a relative path. "
"These paths now remain valid after the current directory is changed by :func:"
"`os.chdir`. As a side effect, the traceback also displays the absolute path "
"for :mod:`__main__` module frames in this case. (Contributed by Victor "
"Stinner in :issue:`20443`.)"
msgstr ""
"Python får nu den absoluta sökvägen till skriptfilnamnet som anges på "
"kommandoraden (ex: ``python3 script.py``): attributet ``__file__`` i "
"modulen :mod:`__main__` blev en absolut sökväg, snarare än en relativ "
"sökväg. Dessa sökvägar förblir nu giltiga efter att den aktuella katalogen "
"har ändrats med :func:`os.chdir`. Som en bieffekt visar spårningen även den "
"absoluta sökvägen för :mod:`__main__`-modulramarna i det här fallet. (Bidrag "
"från Victor Stinner i :issue:`20443`.)"

msgid ""
"In the :ref:`Python Development Mode <devmode>` and in :ref:`debug build "
"<debug-build>`, the *encoding* and *errors* arguments are now checked for "
"string encoding and decoding operations. Examples: :func:`open`, :meth:`str."
"encode` and :meth:`bytes.decode`."
msgstr ""
"I :ref:`Python Development Mode <devmode>` och i :ref:`debug build <debug-"
"build>` kontrolleras nu argumenten *encoding* och *errors* för strängkodning "
"och avkodning. Exempel: :func:`open`, :meth:`str.encode` och :meth:`bytes."
"decode`."

msgid ""
"By default, for best performance, the *errors* argument is only checked at "
"the first encoding/decoding error and the *encoding* argument is sometimes "
"ignored for empty strings. (Contributed by Victor Stinner in :issue:`37388`.)"
msgstr ""
"Som standard, för bästa prestanda, kontrolleras *errors*-argumentet endast "
"vid det första kodnings-/avkodningsfelet och *encoding*-argumentet ignoreras "
"ibland för tomma strängar. (Bidrag från Victor Stinner i :issue:`37388`.)"

msgid ""
"``\"\".replace(\"\", s, n)`` now returns ``s`` instead of an empty string "
"for all non-zero ``n``.  It is now consistent with ``\"\".replace(\"\", "
"s)``. There are similar changes for :class:`bytes` and :class:`bytearray` "
"objects. (Contributed by Serhiy Storchaka in :issue:`28029`.)"
msgstr ""
"``\"\".replace(\"\", s, n)`` returnerar nu ``s`` istället för en tom sträng "
"för alla ``n`` som inte är noll.  Det är nu konsekvent med ``\"\"."
"replace(\"\", s)``. Det finns liknande ändringar för objekten :class:`bytes` "
"och :class:`bytearray`. (Bidrag från Serhiy Storchaka i :issue:`28029`.)"

msgid ""
"Any valid expression can now be used as a :term:`decorator`.  Previously, "
"the grammar was much more restrictive.  See :pep:`614` for details. "
"(Contributed by Brandt Bucher in :issue:`39702`.)"
msgstr ""
"Alla giltiga uttryck kan nu användas som en :term:`decorator`.  Tidigare var "
"grammatiken mycket mer restriktiv.  Se :pep:`614` för detaljer. (Bidrag från "
"Brandt Bucher i :issue:`39702`.)"

msgid ""
"Improved help for the :mod:`typing` module. Docstrings are now shown for all "
"special forms and special generic aliases (like ``Union`` and ``List``). "
"Using :func:`help` with generic alias like ``List[int]`` will show the help "
"for the correspondent concrete type (``list`` in this case). (Contributed by "
"Serhiy Storchaka in :issue:`40257`.)"
msgstr ""
"Förbättrad hjälp för modulen :mod:`typing`. Nu visas dokumentsträngar för "
"alla specialformer och speciella generiska alias (som ``Union`` och "
"``List``). Om du använder :func:`help` med ett generiskt alias som "
"``List[int]`` visas hjälpen för den motsvarande konkreta typen (``list`` i "
"det här fallet). (Bidrag från Serhiy Storchaka i :issue:`40257`.)"

msgid ""
"Parallel running of :meth:`~agen.aclose` / :meth:`~agen.asend` / :meth:"
"`~agen.athrow` is now prohibited, and ``ag_running`` now reflects the actual "
"running status of the async generator. (Contributed by Yury Selivanov in :"
"issue:`30773`.)"
msgstr ""
"Parallellkörning av :meth:`~agen.aclose` / :meth:`~agen.asend` / :meth:"
"`~agen.athrow` är nu förbjuden och ``ag_running`` återspeglar nu den "
"faktiska körstatusen för asyncgeneratorn. (Bidrag från Yury Selivanov i :"
"issue:`30773`.)"

msgid ""
"Unexpected errors in calling the ``__iter__`` method are no longer masked by "
"``TypeError`` in the :keyword:`in` operator and functions :func:`~operator."
"contains`, :func:`~operator.indexOf` and :func:`~operator.countOf` of the :"
"mod:`operator` module. (Contributed by Serhiy Storchaka in :issue:`40824`.)"
msgstr ""
"Oväntade fel vid anrop av metoden ``__iter__`` maskeras inte längre av "
"``TypeError`` i operatorn :keyword:`in` och funktionerna :func:`~operator."
"contains`, :func:`~operator.indexOf` och :func:`~operator.countOf` i "
"modulen :mod:`operator`. (Bidrag från Serhiy Storchaka i :issue:`40824`.)"

msgid ""
"Unparenthesized lambda expressions can no longer be the expression part in "
"an ``if`` clause in comprehensions and generator expressions. See :issue:"
"`41848` and :issue:`43755` for details."
msgstr ""
"Lambdauttryck som inte är parenthesized kan inte längre vara uttrycksdelen i "
"en ``if``-sats i förståelser och generatoruttryck. Se :issue:`41848` och :"
"issue:`43755` för detaljer."

msgid "New Modules"
msgstr "Nya moduler"

msgid "zoneinfo"
msgstr "zoninfo"

msgid ""
"The :mod:`zoneinfo` module brings support for the IANA time zone database to "
"the standard library. It adds :class:`zoneinfo.ZoneInfo`, a concrete :class:"
"`datetime.tzinfo` implementation backed by the system's time zone data."
msgstr ""
"Modulen :mod:`zoneinfo` ger stöd för IANA:s tidszonsdatabas till "
"standardbiblioteket. Den lägger till :class:`zoneinfo.ZoneInfo`, en konkret "
"implementation av :class:`datetime.tzinfo` som stöds av systemets "
"tidszonsdata."

msgid ""
">>> from zoneinfo import ZoneInfo\n"
">>> from datetime import datetime, timedelta\n"
"\n"
">>> # Daylight saving time\n"
">>> dt = datetime(2020, 10, 31, 12, tzinfo=ZoneInfo(\"America/"
"Los_Angeles\"))\n"
">>> print(dt)\n"
"2020-10-31 12:00:00-07:00\n"
">>> dt.tzname()\n"
"'PDT'\n"
"\n"
">>> # Standard time\n"
">>> dt += timedelta(days=7)\n"
">>> print(dt)\n"
"2020-11-07 12:00:00-08:00\n"
">>> print(dt.tzname())\n"
"PST"
msgstr ""
">>> from zoneinfo import ZoneInfo\n"
">>> from datetime import datetime, timedelta\n"
"\n"
">>> # Daylight saving time\n"
">>> dt = datetime(2020, 10, 31, 12, tzinfo=ZoneInfo(\"America/"
"Los_Angeles\"))\n"
">>> print(dt)\n"
"2020-10-31 12:00:00-07:00\n"
">>> dt.tzname()\n"
"'PDT'\n"
"\n"
">>> # Standard time\n"
">>> dt += timedelta(days=7)\n"
">>> print(dt)\n"
"2020-11-07 12:00:00-08:00\n"
">>> print(dt.tzname())\n"
"PST"

msgid ""
"As a fall-back source of data for platforms that don't ship the IANA "
"database, the :pypi:`tzdata` module was released as a first-party package -- "
"distributed via PyPI and maintained by the CPython core team."
msgstr ""
"Som en reservkälla för data för plattformar som inte levererar IANA-"
"databasen släpptes modulen :pypi:`tzdata` som ett förstapartspaket - "
"distribuerat via PyPI och underhållet av CPython-kärnteamet."

msgid ""
":pep:`615` -- Support for the IANA Time Zone Database in the Standard Library"
msgstr ":pep:`615` -- Stöd för IANA:s tidszonsdatabas i standardbiblioteket"

msgid "PEP written and implemented by Paul Ganssle"
msgstr "PEP skrivet och implementerat av Paul Ganssle"

msgid "graphlib"
msgstr "graflib"

msgid ""
"A new module, :mod:`graphlib`, was added that contains the :class:`graphlib."
"TopologicalSorter` class to offer functionality to perform topological "
"sorting of graphs. (Contributed by Pablo Galindo, Tim Peters and Larry "
"Hastings in :issue:`17005`.)"
msgstr ""
"En ny modul, :mod:`graphlib`, har lagts till som innehåller klassen :class:"
"`graphlib.TopologicalSorter` för att erbjuda funktionalitet för att utföra "
"topologisk sortering av grafer. (Bidrag från Pablo Galindo, Tim Peters och "
"Larry Hastings i :issue:`17005`.)"

msgid "Improved Modules"
msgstr "Förbättrade moduler"

msgid "ast"
msgstr "ast"

msgid ""
"Added the *indent* option to :func:`~ast.dump` which allows it to produce a "
"multiline indented output. (Contributed by Serhiy Storchaka in :issue:"
"`37995`.)"
msgstr ""
"Lade till alternativet *indent* till :func:`~ast.dump` som gör det möjligt "
"att producera en flerradig indragen utdata. (Bidrag från Serhiy Storchaka i :"
"issue:`37995`.)"

msgid ""
"Added :func:`ast.unparse` as a function in the :mod:`ast` module that can be "
"used to unparse an :class:`ast.AST` object and produce a string with code "
"that would produce an equivalent :class:`ast.AST` object when parsed. "
"(Contributed by Pablo Galindo and Batuhan Taskaya in :issue:`38870`.)"
msgstr ""
"Lade till :func:`ast.unparse` som en funktion i modulen :mod:`ast` som kan "
"användas för att unparsa ett :class:`ast.AST`-objekt och producera en sträng "
"med kod som skulle producera ett motsvarande :class:`ast.AST`-objekt när det "
"parsas. (Bidrag från Pablo Galindo och Batuhan Taskaya i :issue:`38870`.)"

msgid ""
"Added docstrings to AST nodes that contains the ASDL signature used to "
"construct that node. (Contributed by Batuhan Taskaya in :issue:`39638`.)"
msgstr ""
"Lade till docstrings till AST-noder som innehåller ASDL-signaturen som "
"användes för att konstruera den noden. (Bidrag från Batuhan Taskaya i :issue:"
"`39638`.)"

msgid "asyncio"
msgstr "asyncio"

msgid ""
"Due to significant security concerns, the *reuse_address* parameter of :meth:"
"`asyncio.loop.create_datagram_endpoint` is no longer supported. This is "
"because of the behavior of the socket option ``SO_REUSEADDR`` in UDP. For "
"more details, see the documentation for ``loop.create_datagram_endpoint()``. "
"(Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in :issue:"
"`37228`.)"
msgstr ""
"På grund av betydande säkerhetsproblem stöds inte längre parametern "
"*reuse_address* i :meth:`asyncio.loop.create_datagram_endpoint`. Detta beror "
"på beteendet hos socket-alternativet ``SO_REUSEADDR`` i UDP. För mer "
"information, se dokumentationen för ``loop.create_datagram_endpoint()``. "
"(Bidrag från Kyle Stanley, Antoine Pitrou och Yury Selivanov i :issue:"
"`37228`.)"

msgid ""
"Added a new :term:`coroutine` :meth:`~asyncio.loop."
"shutdown_default_executor` that schedules a shutdown for the default "
"executor that waits on the :class:`~concurrent.futures.ThreadPoolExecutor` "
"to finish closing. Also, :func:`asyncio.run` has been updated to use the "
"new :term:`coroutine`. (Contributed by Kyle Stanley in :issue:`34037`.)"
msgstr ""
"Lagt till en ny :term:`coroutine` :meth:`~asyncio.loop."
"shutdown_default_executor` som schemalägger en avstängning för "
"standardutföraren som väntar på att :class:`~concurrent.futures."
"ThreadPoolExecutor` ska stängas. Dessutom har :func:`asyncio.run` "
"uppdaterats för att använda den nya :termen:`coroutine`. (Bidrag från Kyle "
"Stanley i :issue:`34037`.)"

msgid ""
"Added :class:`!asyncio.PidfdChildWatcher`, a Linux-specific child watcher "
"implementation that polls process file descriptors. (:issue:`38692`)"
msgstr ""
"Lagt till :class:`!asyncio.PidfdChildWatcher`, en Linux-specifik "
"implementation av en child watcher som pollar process file descriptors. (:"
"issue:`38692`)"

msgid ""
"Added a new :term:`coroutine` :func:`asyncio.to_thread`. It is mainly used "
"for running IO-bound functions in a separate thread to avoid blocking the "
"event loop, and essentially works as a high-level version of :meth:`~asyncio."
"loop.run_in_executor` that can directly take keyword arguments. (Contributed "
"by Kyle Stanley and Yury Selivanov in :issue:`32309`.)"
msgstr ""
"Lade till en ny :term:`coroutine` :func:`asyncio.to_thread`. Den används "
"huvudsakligen för att köra IO-bundna funktioner i en separat tråd för att "
"undvika blockering av händelseslingan, och fungerar i huvudsak som en "
"högnivåversion av :meth:`~asyncio.loop.run_in_executor` som direkt kan ta "
"nyckelordsargument. (Bidrag från Kyle Stanley och Yury Selivanov i :issue:"
"`32309`.)"

msgid ""
"When cancelling the task due to a timeout, :meth:`asyncio.wait_for` will now "
"wait until the cancellation is complete also in the case when *timeout* is "
"<= 0, like it does with positive timeouts. (Contributed by Elvis "
"Pranskevichus in :issue:`32751`.)"
msgstr ""
"När en uppgift avbryts på grund av en timeout, kommer :meth:`asyncio."
"wait_for` nu att vänta tills avbrytandet är klart även i fallet när "
"*timeout* är <= 0, precis som den gör med positiva timeouts. (Bidrag från "
"Elvis Pranskevichus i :issue:`32751`.)"

msgid ""
":mod:`asyncio` now raises :exc:`TypeError` when calling incompatible methods "
"with an :class:`ssl.SSLSocket` socket. (Contributed by Ido Michael in :issue:"
"`37404`.)"
msgstr ""
":mod:`asyncio` ger nu upphov till :exc:`TypeError` när man anropar "
"inkompatibla metoder med en :class:`ssl.SSLSocket` socket. (Bidrag från Ido "
"Michael i :issue:`37404`.)"

msgid "compileall"
msgstr "kompilera alla"

msgid ""
"Added new possibility to use hardlinks for duplicated ``.pyc`` files: "
"*hardlink_dupes* parameter and --hardlink-dupes command line option. "
"(Contributed by  Lumír 'Frenzy' Balhar in :issue:`40495`.)"
msgstr ""
"Lagt till ny möjlighet att använda hardlinks för duplicerade ``.pyc``-filer: "
"*parametern hardlink_dupes* och kommandoradsalternativet --hardlink-dupes. "
"(Bidrag från Lumír 'Frenzy' Balhar i :issue:`40495`.)"

msgid ""
"Added new options for path manipulation in resulting ``.pyc`` files: "
"*stripdir*, *prependdir*, *limit_sl_dest* parameters and -s, -p, -e command "
"line options. Added the possibility to specify the option for an "
"optimization level multiple times. (Contributed by Lumír 'Frenzy' Balhar in :"
"issue:`38112`.)"
msgstr ""
"Nya alternativ för sökvägsmanipulation i resulterande ``.pyc``-filer har "
"lagts till: *parametrarna stripdir*, *prependdir*, *limit_sl_dest* och "
"kommandoradsalternativen -s, -p, -e. Lagt till möjligheten att ange "
"alternativet för en optimeringsnivå flera gånger. (Bidrag från Lumír "
"'Frenzy' Balhar i :issue:`38112`.)"

msgid "concurrent.futures"
msgstr "concurrent.futures"

msgid ""
"Added a new *cancel_futures* parameter to :meth:`concurrent.futures.Executor."
"shutdown` that cancels all pending futures which have not started running, "
"instead of waiting for them to complete before shutting down the executor. "
"(Contributed by Kyle Stanley in :issue:`39349`.)"
msgstr ""
"Lade till en ny *cancel_futures* parameter till :meth:`concurrent.futures."
"Executor.shutdown` som avbryter alla väntande futures som inte har börjat "
"köras, istället för att vänta på att de ska slutföras innan exekutorn stängs "
"av. (Bidrag från Kyle Stanley i :issue:`39349`.)"

msgid ""
"Removed daemon threads from :class:`~concurrent.futures.ThreadPoolExecutor` "
"and :class:`~concurrent.futures.ProcessPoolExecutor`. This improves "
"compatibility with subinterpreters and predictability in their shutdown "
"processes. (Contributed by Kyle Stanley in :issue:`39812`.)"
msgstr ""
"Tog bort daemon-trådar från :class:`~concurrent.futures.ThreadPoolExecutor` "
"och :class:`~concurrent.futures.ProcessPoolExecutor`. Detta förbättrar "
"kompatibiliteten med undertolkare och förutsägbarheten i deras "
"avstängningsprocesser. (Bidrag från Kyle Stanley i :issue:`39812`.)"

msgid ""
"Workers in :class:`~concurrent.futures.ProcessPoolExecutor` are now spawned "
"on demand, only when there are no available idle workers to reuse. This "
"optimizes startup overhead and reduces the amount of lost CPU time to idle "
"workers. (Contributed by Kyle Stanley in :issue:`39207`.)"
msgstr ""
"Arbetare i :class:`~concurrent.futures.ProcessPoolExecutor` skapas nu på "
"begäran, endast när det inte finns några lediga arbetare att återanvända. "
"Detta optimerar startomkostnaderna och minskar mängden förlorad CPU-tid till "
"inaktiva arbetare. (Bidrag från Kyle Stanley i :issue:`39207`.)"

msgid "curses"
msgstr "förbannelser"

msgid ""
"Added :func:`curses.get_escdelay`, :func:`curses.set_escdelay`, :func:"
"`curses.get_tabsize`, and :func:`curses.set_tabsize` functions. (Contributed "
"by Anthony Sottile in :issue:`38312`.)"
msgstr ""
"Lagt till funktionerna :func:`curses.get_escdelay`, :func:`curses."
"set_escdelay`, :func:`curses.get_tabsize` och :func:`curses.set_tabsize`. "
"(Bidrag från Anthony Sottile i :issue:`38312`.)"

msgid "datetime"
msgstr "datatid"

msgid ""
"The :meth:`~datetime.date.isocalendar` of :class:`datetime.date` and :meth:"
"`~datetime.datetime.isocalendar` of :class:`datetime.datetime` methods now "
"returns a :func:`~collections.namedtuple` instead of a :class:`tuple`. "
"(Contributed by Donghee Na in :issue:`24416`.)"
msgstr ""
"Metoderna :meth:`~datetime.date.isocalendar` av :class:`datetime.date` och :"
"meth:`~datetime.datetime.isocalendar` av :class:`datetime.datetime` "
"returnerar nu en :func:`~collections.namedtuple` istället för en :class:"
"`tuple`. (Bidrag från Donghee Na i :issue:`24416`.)"

msgid "distutils"
msgstr "distutils"

msgid ""
"The :command:`upload` command now creates SHA2-256 and Blake2b-256 hash "
"digests. It skips MD5 on platforms that block MD5 digest. (Contributed by "
"Christian Heimes in :issue:`40698`.)"
msgstr ""
"Kommandot :command:`upload` skapar nu SHA2-256- och Blake2b-256-hashtester. "
"Det hoppar över MD5 på plattformar som blockerar MD5-digest. (Bidrag från "
"Christian Heimes i :issue:`40698`.)"

msgid "fcntl"
msgstr "fcntl"

msgid ""
"Added constants :const:`!fcntl.F_OFD_GETLK`, :const:`!fcntl.F_OFD_SETLK` "
"and :const:`!fcntl.F_OFD_SETLKW`. (Contributed by Donghee Na in :issue:"
"`38602`.)"
msgstr ""
"Lagt till konstanterna :const:`!fcntl.F_OFD_GETLK`, :const:`!fcntl."
"F_OFD_SETLK` och :const:`!fcntl.F_OFD_SETLKW`. (Bidrag från Donghee Na i :"
"issue:`38602`.)"

msgid "ftplib"
msgstr "ftplib"

msgid ""
":class:`~ftplib.FTP` and :class:`~ftplib.FTP_TLS` now raise a :class:"
"`ValueError` if the given timeout for their constructor is zero to prevent "
"the creation of a non-blocking socket. (Contributed by Donghee Na in :issue:"
"`39259`.)"
msgstr ""
":class:`~ftplib.FTP` och :class:`~ftplib.FTP_TLS` ger nu upphov till ett :"
"class:`ValueError` om den angivna timeouten för deras konstruktörer är noll "
"för att förhindra skapandet av en icke-blockerande socket. (Bidrag från "
"Donghee Na i :issue:`39259`.)"

msgid "gc"
msgstr "gc"

msgid ""
"When the garbage collector makes a collection in which some objects "
"resurrect (they are reachable from outside the isolated cycles after the "
"finalizers have been executed), do not block the collection of all objects "
"that are still unreachable. (Contributed by Pablo Galindo and Tim Peters in :"
"issue:`38379`.)"
msgstr ""
"När skräpsamlaren gör en insamling där vissa objekt återuppstår (de är "
"nåbara utanför de isolerade cyklerna efter att finalizers har exekverats), "
"blockera inte insamlingen av alla objekt som fortfarande är oåtkomliga. "
"(Bidrag från Pablo Galindo och Tim Peters i :issue:`38379`.)"

msgid ""
"Added a new function :func:`gc.is_finalized` to check if an object has been "
"finalized by the garbage collector. (Contributed by Pablo Galindo in :issue:"
"`39322`.)"
msgstr ""
"Lagt till en ny funktion :func:`gc.is_finalized` för att kontrollera om ett "
"objekt har slutbehandlats av skräpsamlaren. (Bidrag från Pablo Galindo i :"
"issue:`39322`.)"

msgid "hashlib"
msgstr "hashlib"

msgid ""
"The :mod:`hashlib` module can now use SHA3 hashes and SHAKE XOF from OpenSSL "
"when available. (Contributed by Christian Heimes in :issue:`37630`.)"
msgstr ""
"Modulen :mod:`hashlib` kan nu använda SHA3-hashar och SHAKE XOF från OpenSSL "
"när de är tillgängliga. (Bidrag från Christian Heimes i :issue:`37630`.)"

msgid ""
"Builtin hash modules can now be disabled with ``./configure --without-"
"builtin-hashlib-hashes`` or selectively enabled with e.g. ``./configure --"
"with-builtin-hashlib-hashes=sha3,blake2`` to force use of OpenSSL based "
"implementation. (Contributed by Christian Heimes in :issue:`40479`)"
msgstr ""
"Inbyggda hashmoduler kan nu inaktiveras med ``./configure --without-builtin-"
"hashlib-hashes`` eller selektivt aktiveras med t.ex. ``./configure --with-"
"builtin-hashlib-hashes=sha3,blake2`` för att tvinga fram användning av "
"OpenSSL-baserad implementering. (Bidrag från Christian Heimes i :issue:"
"`40479`)"

msgid "http"
msgstr "http"

msgid ""
"HTTP status codes ``103 EARLY_HINTS``, ``418 IM_A_TEAPOT`` and ``425 "
"TOO_EARLY`` are added to :class:`http.HTTPStatus`. (Contributed by Donghee "
"Na in :issue:`39509` and Ross Rhodes in :issue:`39507`.)"
msgstr ""
"HTTP-statuskoderna ``103 EARLY_HINTS``, ``418 IM_A_TEAPOT`` och ``425 "
"TOO_EARLY`` läggs till i :class:`http.HTTPStatus`. (Bidrag från Donghee Na "
"i :issue:`39509` och Ross Rhodes i :issue:`39507`.)"

msgid "IDLE and idlelib"
msgstr "IDLE och idlelib"

msgid ""
"Added option to toggle cursor blink off.  (Contributed by Zackery Spytz in :"
"issue:`4603`.)"
msgstr ""
"Lagt till alternativ för att slå av markörblinkning.  (Bidrag från Zackery "
"Spytz i :issue:`4603`.)"

msgid ""
"Escape key now closes IDLE completion windows.  (Contributed by Johnny "
"Najera in :issue:`38944`.)"
msgstr ""
"Escape-tangenten stänger nu IDLE-avslutningsfönster.  (Bidrag från Johnny "
"Najera i :issue:`38944`.)"

msgid ""
"Added keywords to module name completion list.  (Contributed by Terry J. "
"Reedy in :issue:`37765`.)"
msgstr ""
"Lade till nyckelord i listan för komplettering av modulnamn.  (Bidrag från "
"Terry J. Reedy i :issue:`37765`.)"

msgid "New in 3.9 maintenance releases"
msgstr "Nytt i 3.9 underhållsversioner"

msgid ""
"Make IDLE invoke :func:`sys.excepthook` (when started without '-n'). User "
"hooks were previously ignored.  (Contributed by Ken Hilton in :issue:"
"`43008`.)"
msgstr ""
"Få IDLE att anropa :func:`sys.excepthook` (när den startas utan '-n'). "
"Användarkrokar ignorerades tidigare.  (Bidrag från Ken Hilton i :issue:"
"`43008`.)"

msgid "The changes above have been backported to 3.8 maintenance releases."
msgstr "Ändringarna ovan har backporterats till underhållsversionerna av 3.8."

msgid ""
"Rearrange the settings dialog.  Split the General tab into Windows and Shell/"
"Ed tabs.  Move help sources, which extend the Help menu, to the Extensions "
"tab.  Make space for new options and shorten the dialog. The latter makes "
"the dialog better fit small screens.  (Contributed by Terry Jan Reedy in :"
"issue:`40468`.)  Move the indent space setting from the Font tab to the new "
"Windows tab.  (Contributed by Mark Roseman and Terry Jan Reedy in :issue:"
"`33962`.)"
msgstr ""
"Omorganisera dialogrutan för inställningar.  Dela upp fliken Allmänt i "
"flikarna Windows och Shell/Ed.  Flytta hjälpkällor, som utökar Hjälp-menyn, "
"till fliken Tillägg.  Gör plats för nya alternativ och förkorta dialogrutan. "
"Det senare gör att dialogrutan passar bättre på små skärmar.  (Bidrag från "
"Terry Jan Reedy i :issue:`40468`.) Flytta inställningen för "
"indragningsutrymme från fliken Font till den nya fliken Windows.  (Bidrag "
"från Mark Roseman och Terry Jan Reedy i :issue:`33962`.)"

msgid ""
"Apply syntax highlighting to ``.pyi`` files. (Contributed by Alex Waygood "
"and Terry Jan Reedy in :issue:`45447`.)"
msgstr ""
"Tillämpa syntaxmarkering på ``.pyi``-filer. (Bidrag från Alex Waygood och "
"Terry Jan Reedy i :issue:`45447`.)"

msgid "imaplib"
msgstr "imaplib"

msgid ""
":class:`~imaplib.IMAP4` and :class:`~imaplib.IMAP4_SSL` now have an optional "
"*timeout* parameter for their constructors. Also, the :meth:`~imaplib.IMAP4."
"open` method now has an optional *timeout* parameter with this change. The "
"overridden methods of :class:`~imaplib.IMAP4_SSL` and :class:`~imaplib."
"IMAP4_stream` were applied to this change. (Contributed by Donghee Na in :"
"issue:`38615`.)"
msgstr ""
":class:`~imaplib.IMAP4` och :class:`~imaplib.IMAP4_SSL` har nu en valfri "
"*timeout*-parameter för sina konstruktörer. Även metoden :meth:`~imaplib."
"IMAP4.open` har nu en valfri *timeout*-parameter i och med denna ändring. De "
"åsidosatta metoderna i :class:`~imaplib.IMAP4_SSL` och :class:`~imaplib."
"IMAP4_stream` tillämpades på denna ändring. (Bidrag från Donghee Na i :issue:"
"`38615`.)"

msgid ""
":meth:`imaplib.IMAP4.unselect` is added. :meth:`imaplib.IMAP4.unselect` "
"frees server's resources associated with the selected mailbox and returns "
"the server to the authenticated state. This command performs the same "
"actions as :meth:`imaplib.IMAP4.close`, except that no messages are "
"permanently removed from the currently selected mailbox. (Contributed by "
"Donghee Na in :issue:`40375`.)"
msgstr ""
":meth:`imaplib.IMAP4.unselect` läggs till. :meth:`imaplib.IMAP4.unselect` "
"frigör serverns resurser som är associerade med den valda brevlådan och "
"återställer servern till det autentiserade tillståndet. Det här kommandot "
"utför samma åtgärder som :meth:`imaplib.IMAP4.close`, förutom att inga "
"meddelanden tas bort permanent från den valda brevlådan. (Bidrag från "
"Donghee Na i :issue:`40375`.)"

msgid "importlib"
msgstr "importlib"

msgid ""
"To improve consistency with import statements, :func:`importlib.util."
"resolve_name` now raises :exc:`ImportError` instead of :exc:`ValueError` for "
"invalid relative import attempts. (Contributed by Ngalim Siregar in :issue:"
"`37444`.)"
msgstr ""
"För att förbättra konsekvensen med importmeddelanden, ger :func:`importlib."
"util.resolve_name` nu :exc:`ImportError` istället för :exc:`ValueError` för "
"ogiltiga relativa importförsök. (Bidrag från Ngalim Siregar i :issue:"
"`37444`.)"

msgid ""
"Import loaders which publish immutable module objects can now publish "
"immutable packages in addition to individual modules. (Contributed by Dino "
"Viehland in :issue:`39336`.)"
msgstr ""
"Importladdare som publicerar oföränderliga modulobjekt kan nu publicera "
"oföränderliga paket utöver enskilda moduler. (Bidrag från Dino Viehland i :"
"issue:`39336`.)"

msgid ""
"Added :func:`importlib.resources.files` function with support for "
"subdirectories in package data, matching backport in ``importlib_resources`` "
"version 1.5. (Contributed by Jason R. Coombs in :issue:`39791`.)"
msgstr ""
"Lagt till :func:`importlib.resources.files`-funktionen med stöd för "
"underkataloger i paketdata, motsvarande backport i ``importlib_resources`` "
"version 1.5. (Bidrag från Jason R. Coombs i :issue:`39791`.)"

msgid ""
"Refreshed ``importlib.metadata`` from ``importlib_metadata`` version 1.6.1."
msgstr ""
"Uppdaterade ``importlib.metadata`` från ``importlib_metadata`` version 1.6.1."

msgid "inspect"
msgstr "inspektera"

msgid ""
":attr:`inspect.BoundArguments.arguments` is changed from ``OrderedDict`` to "
"regular dict.  (Contributed by Inada Naoki in :issue:`36350` and :issue:"
"`39775`.)"
msgstr ""
":attr:`inspect.BoundArguments.arguments` ändras från ``OrderedDict`` till "
"vanlig dict.  (Bidrag från Inada Naoki i :issue:`36350` och :issue:`39775`.)"

msgid "ipaddress"
msgstr "ipadress"

msgid ""
":mod:`ipaddress` now supports IPv6 Scoped Addresses (IPv6 address with "
"suffix ``%<scope_id>``)."
msgstr ""
":mod:`ipaddress` har nu stöd för IPv6 Scoped Addresses (IPv6-adress med "
"suffixet ``%<scope_id>``)."

msgid ""
"Scoped IPv6 addresses can be parsed using :class:`ipaddress.IPv6Address`. If "
"present, scope zone ID is available through the :attr:`~ipaddress."
"IPv6Address.scope_id` attribute. (Contributed by Oleksandr Pavliuk in :issue:"
"`34788`.)"
msgstr ""
"Scoped IPv6-adresser kan tolkas med hjälp av :class:`ipaddress.IPv6Address`. "
"Om det finns ett scope zone ID är det tillgängligt via attributet :attr:"
"`~ipaddress.IPv6Address.scope_id`. (Bidrag från Oleksandr Pavliuk i :issue:"
"`34788`.)"

msgid ""
"Starting with Python 3.9.5 the :mod:`ipaddress` module no longer accepts any "
"leading zeros in IPv4 address strings. (Contributed by Christian Heimes in :"
"issue:`36384`)."
msgstr ""
"Från och med Python 3.9.5 accepterar modulen :mod:`ipaddress` inte längre "
"några inledande nollor i IPv4-adresssträngar. (Bidrag från Christian Heimes "
"i :issue:`36384`)."

msgid "math"
msgstr "matematik"

msgid ""
"Expanded the :func:`math.gcd` function to handle multiple arguments. "
"Formerly, it only supported two arguments. (Contributed by Serhiy Storchaka "
"in :issue:`39648`.)"
msgstr ""
"Utökade :func:`math.gcd`-funktionen till att hantera flera argument. "
"Tidigare hade den bara stöd för två argument. (Bidrag från Serhiy Storchaka "
"i :issue:`39648`.)"

msgid ""
"Added :func:`math.lcm`: return the least common multiple of specified "
"arguments. (Contributed by Mark Dickinson, Ananthakrishnan and Serhiy "
"Storchaka in :issue:`39479` and :issue:`39648`.)"
msgstr ""
"Lagt till :func:`math.lcm`: returnerar den minsta gemensamma multipeln av "
"angivna argument. (Bidrag från Mark Dickinson, Ananthakrishnan och Serhiy "
"Storchaka i :issue:`39479` och :issue:`39648`.)"

msgid ""
"Added :func:`math.nextafter`: return the next floating-point value after *x* "
"towards *y*. (Contributed by Victor Stinner in :issue:`39288`.)"
msgstr ""
"Lagt till :func:`math.nextafter`: returnerar nästa flyttalsvärde efter *x* "
"mot *y*. (Bidrag från Victor Stinner i :issue:`39288`.)"

msgid ""
"Added :func:`math.ulp`: return the value of the least significant bit of a "
"float. (Contributed by Victor Stinner in :issue:`39310`.)"
msgstr ""
"Lagt till :func:`math.ulp`: returnerar värdet av den minst signifikanta "
"biten i en float. (Bidrag från Victor Stinner i :issue:`39310`.)"

msgid "multiprocessing"
msgstr "multiprocessing"

msgid ""
"The :class:`multiprocessing.SimpleQueue` class has a new :meth:"
"`~multiprocessing.SimpleQueue.close` method to explicitly close the queue. "
"(Contributed by Victor Stinner in :issue:`30966`.)"
msgstr ""
"Klassen :class:`multiprocessing.SimpleQueue` har en ny :meth:"
"`~multiprocessing.SimpleQueue.close`-metod för att explicit stänga kön. "
"(Bidrag från Victor Stinner i :issue:`30966`.)"

msgid "nntplib"
msgstr "nntplib"

msgid ""
":class:`!NNTP` and :class:`!NNTP_SSL` now raise a :class:`ValueError` if the "
"given timeout for their constructor is zero to prevent the creation of a non-"
"blocking socket. (Contributed by Donghee Na in :issue:`39259`.)"
msgstr ""
":class:`!NNTP` och :class:`!NNTP_SSL` ger nu upphov till ett :class:"
"`ValueError` om den angivna timeouten för deras konstruktörer är noll för "
"att förhindra skapandet av en icke-blockerande socket. (Bidrag från Donghee "
"Na i :issue:`39259`.)"

msgid "os"
msgstr "os"

msgid ""
"Added :const:`~os.CLD_KILLED` and :const:`~os.CLD_STOPPED` for :attr:`!"
"si_code`. (Contributed by Donghee Na in :issue:`38493`.)"
msgstr ""
"Lade till :const:`~os.CLD_KILLED` och :const:`~os.CLD_STOPPED` för :attr:`!"
"si_code`. (Bidrag från Donghee Na i :issue:`38493`.)"

msgid ""
"Exposed the Linux-specific :func:`os.pidfd_open` (:issue:`38692`) and :const:"
"`os.P_PIDFD` (:issue:`38713`) for process management with file descriptors."
msgstr ""
"Exponerade de Linux-specifika :func:`os.pidfd_open` (:issue:`38692`) och :"
"const:`os.P_PIDFD` (:issue:`38713`) för processhantering med filbeskrivare."

msgid ""
"The :func:`os.unsetenv` function is now also available on Windows. "
"(Contributed by Victor Stinner in :issue:`39413`.)"
msgstr ""
"Funktionen :func:`os.unsetenv` är nu även tillgänglig i Windows. (Bidrag "
"från Victor Stinner i :issue:`39413`.)"

msgid ""
"The :func:`os.putenv` and :func:`os.unsetenv` functions are now always "
"available. (Contributed by Victor Stinner in :issue:`39395`.)"
msgstr ""
"Funktionerna :func:`os.putenv` och :func:`os.unsetenv` är nu alltid "
"tillgängliga. (Bidrag från Victor Stinner i :issue:`39395`.)"

msgid ""
"Added :func:`os.waitstatus_to_exitcode` function: convert a wait status to "
"an exit code. (Contributed by Victor Stinner in :issue:`40094`.)"
msgstr ""
"Lagt till :func:`os.waitstatus_to_exitcode` funktion: konverterar en "
"väntestatus till en utgångskod. (Bidrag från Victor Stinner i :issue:"
"`40094`.)"

msgid "pathlib"
msgstr "sökväg"

msgid ""
"Added :meth:`pathlib.Path.readlink` which acts similarly to :func:`os."
"readlink`. (Contributed by Girts Folkmanis in :issue:`30618`)"
msgstr ""
"Lagt till :meth:`pathlib.Path.readlink` som fungerar på liknande sätt som :"
"func:`os.readlink`. (Bidrag från Girts Folkmanis i :issue:`30618`)"

msgid "pdb"
msgstr "pdb"

msgid ""
"On Windows now :class:`~pdb.Pdb` supports ``~/.pdbrc``. (Contributed by Tim "
"Hopper and Dan Lidral-Porter in :issue:`20523`.)"
msgstr ""
"På Windows stöder nu :class:`~pdb.Pdb` ``~/.pdbrc``. (Bidrag från Tim Hopper "
"och Dan Lidral-Porter i :issue:`20523`.)"

msgid "poplib"
msgstr "poplib"

msgid ""
":class:`~poplib.POP3` and :class:`~poplib.POP3_SSL` now raise a :class:"
"`ValueError` if the given timeout for their constructor is zero to prevent "
"the creation of a non-blocking socket. (Contributed by Donghee Na in :issue:"
"`39259`.)"
msgstr ""
":class:`~poplib.POP3` och :class:`~poplib.POP3_SSL` ger nu upphov till ett :"
"class:`ValueError` om den angivna timeouten för deras konstruktörer är noll "
"för att förhindra att ett icke-blockerande uttag skapas. (Bidrag från "
"Donghee Na i :issue:`39259`.)"

msgid "pprint"
msgstr "tryck"

msgid ""
":mod:`pprint` can now pretty-print :class:`types.SimpleNamespace`. "
"(Contributed by Carl Bordum Hansen in :issue:`37376`.)"
msgstr ""
":mod:`pprint` kan nu pretty-printa :class:`types.SimpleNamespace`. (Bidrag "
"från Carl Bordum Hansen i :issue:`37376`.)"

msgid "pydoc"
msgstr "pydoc"

msgid ""
"The documentation string is now shown not only for class, function, method "
"etc, but for any object that has its own :attr:`~definition.__doc__` "
"attribute. (Contributed by Serhiy Storchaka in :issue:`40257`.)"
msgstr ""
"Dokumentationssträngen visas nu inte bara för klass, funktion, metod etc, "
"utan för alla objekt som har sitt eget :attr:`~definition.__doc__`-attribut. "
"(Bidrag från Serhiy Storchaka i :issue:`40257`.)"

msgid "random"
msgstr "slumpvis"

msgid ""
"Added a new :meth:`random.Random.randbytes` method: generate random bytes. "
"(Contributed by Victor Stinner in :issue:`40286`.)"
msgstr ""
"Lagt till en ny :meth:`random.Random.randbytes`-metod: generera slumpmässiga "
"byte. (Bidrag från Victor Stinner i :issue:`40286`.)"

msgid "signal"
msgstr "signal"

msgid ""
"Exposed the Linux-specific :func:`signal.pidfd_send_signal` for sending to "
"signals to a process using a file descriptor instead of a pid. (:issue:"
"`38712`)"
msgstr ""
"Exponerade den Linux-specifika :func:`signal.pidfd_send_signal` för att "
"skicka signaler till en process som använder en filbeskrivare istället för "
"en pid. (:issue:`38712`)"

msgid "smtplib"
msgstr "smtplib"

msgid ""
":class:`~smtplib.SMTP` and :class:`~smtplib.SMTP_SSL` now raise a :class:"
"`ValueError` if the given timeout for their constructor is zero to prevent "
"the creation of a non-blocking socket. (Contributed by Donghee Na in :issue:"
"`39259`.)"
msgstr ""
":class:`~smtplib.SMTP` och :class:`~smtplib.SMTP_SSL` ger nu upphov till "
"ett :class:`ValueError` om den angivna timeouten för deras konstruktörer är "
"noll för att förhindra att en icke-blockerande socket skapas. (Bidrag från "
"Donghee Na i :issue:`39259`.)"

msgid ""
":class:`~smtplib.LMTP` constructor  now has an optional *timeout* parameter. "
"(Contributed by Donghee Na in :issue:`39329`.)"
msgstr ""
":class:`~smtplib.LMTP`-konstruktören har nu en valfri *timeout*-parameter. "
"(Bidrag från Donghee Na i :issue:`39329`.)"

msgid "socket"
msgstr "kortplats"

msgid ""
"The :mod:`socket` module now exports the :const:`~socket."
"CAN_RAW_JOIN_FILTERS` constant on Linux 4.1 and greater. (Contributed by "
"Stefan Tatschner and Zackery Spytz in :issue:`25780`.)"
msgstr ""
"Modulen :mod:`socket` exporterar nu konstanten :const:`~socket."
"CAN_RAW_JOIN_FILTERS` på Linux 4.1 och senare. (Bidrag från Stefan Tatschner "
"och Zackery Spytz i :issue:`25780`.)"

msgid ""
"The socket module now supports the :const:`~socket.CAN_J1939` protocol on "
"platforms that support it.  (Contributed by Karl Ding in :issue:`40291`.)"
msgstr ""
"Socket-modulen stöder nu :const:`~socket.CAN_J1939`-protokollet på "
"plattformar som stöder det.  (Bidrag från Karl Ding i :issue:`40291`.)"

msgid ""
"The socket module now has the :func:`socket.send_fds` and :func:`socket."
"recv_fds` functions. (Contributed by Joannah Nanjekye, Shinya Okano and "
"Victor Stinner in :issue:`28724`.)"
msgstr ""
"Socket-modulen har nu funktionerna :func:`socket.send_fds` och :func:`socket."
"recv_fds`. (Bidrag från Joannah Nanjekye, Shinya Okano och Victor Stinner i :"
"issue:`28724`.)"

msgid "time"
msgstr "tid"

msgid ""
"On AIX, :func:`~time.thread_time` is now implemented with "
"``thread_cputime()`` which has nanosecond resolution, rather than "
"``clock_gettime(CLOCK_THREAD_CPUTIME_ID)`` which has a resolution of 10 "
"milliseconds. (Contributed by Batuhan Taskaya in :issue:`40192`)"
msgstr ""
"På AIX implementeras nu :func:`~time.thread_time` med ``thread_cputime()`` "
"som har en upplösning på nanosekunder, istället för "
"``clock_gettime(CLOCK_THREAD_CPUTIME_ID)`` som har en upplösning på 10 "
"millisekunder. (Bidrag från Batuhan Taskaya i :issue:`40192`)"

msgid "sys"
msgstr "system"

msgid ""
"Added a new :data:`sys.platlibdir` attribute: name of the platform-specific "
"library directory. It is used to build the path of standard library and the "
"paths of installed extension modules. It is equal to ``\"lib\"`` on most "
"platforms.  On Fedora and SuSE, it is equal to ``\"lib64\"`` on 64-bit "
"platforms. (Contributed by Jan Matějek, Matěj Cepl, Charalampos Stratakis "
"and Victor Stinner in :issue:`1294959`.)"
msgstr ""
"Lade till ett nytt :data:`sys.platlibdir`-attribut: namnet på den "
"plattformsspecifika bibliotekskatalogen. Den används för att bygga sökvägen "
"till standardbiblioteket och sökvägarna till installerade tilläggsmoduler. "
"Det är lika med ``\"lib\"`` på de flesta plattformar.  På Fedora och SuSE är "
"det lika med ``\"lib64\"`` på 64-bitars plattformar. (Bidrag från Jan "
"Matějek, Matěj Cepl, Charalampos Stratakis och Victor Stinner i :issue:"
"`1294959`.)"

msgid ""
"Previously, :data:`sys.stderr` was block-buffered when non-interactive. Now "
"``stderr`` defaults to always being line-buffered. (Contributed by Jendrik "
"Seipp in :issue:`13601`.)"
msgstr ""
"Tidigare var :data:`sys.stderr` blockbuffrad när den inte var interaktiv. Nu "
"är ``stderr`` standardinställning att alltid vara linje-buffrad. (Bidrag "
"från Jendrik Seipp i :issue:`13601`.)"

msgid "tracemalloc"
msgstr "tracemalloc"

msgid ""
"Added :func:`tracemalloc.reset_peak` to set the peak size of traced memory "
"blocks to the current size, to measure the peak of specific pieces of code. "
"(Contributed by Huon Wilson in :issue:`40630`.)"
msgstr ""
"Lagt till :func:`tracemalloc.reset_peak` för att ställa in toppstorleken för "
"spårade minnesblock till den aktuella storleken, för att mäta toppen för "
"specifika bitar av kod. (Bidrag från Huon Wilson i :issue:`40630`.)"

msgid "typing"
msgstr "maskinskrivning"

msgid ""
":pep:`593` introduced an :data:`typing.Annotated` type to decorate existing "
"types with context-specific metadata and new ``include_extras`` parameter "
"to :func:`typing.get_type_hints` to access the metadata at runtime. "
"(Contributed by Till Varoquaux and Konstantin Kashin.)"
msgstr ""
":pep:`593` introducerade en :data:`typing.Annotated`-typ för att dekorera "
"befintliga typer med kontextspecifika metadata och en ny ``include_extras``-"
"parameter till :func:`typing.get_type_hints` för att komma åt metadata vid "
"körning. (Bidrag från Till Varoquaux och Konstantin Kashin.)"

msgid "unicodedata"
msgstr "unicodedata"

msgid ""
"The Unicode database has been updated to version 13.0.0. (:issue:`39926`)."
msgstr ""
"Unicode-databasen har uppdaterats till version 13.0.0. (:issue:`39926`)."

msgid "venv"
msgstr "ven"

msgid ""
"The activation scripts provided by :mod:`venv` now all specify their prompt "
"customization consistently by always using the value specified by "
"``__VENV_PROMPT__``. Previously some scripts unconditionally used "
"``__VENV_PROMPT__``, others only if it happened to be set (which was the "
"default case), and one used ``__VENV_NAME__`` instead. (Contributed by Brett "
"Cannon in :issue:`37663`.)"
msgstr ""
"De aktiveringsskript som tillhandahålls av :mod:`venv` anger nu alla sin "
"promptanpassning konsekvent genom att alltid använda det värde som anges av "
"``__VENV_PROMPT__``. Tidigare använde vissa skript ovillkorligen "
"``__VENV_PROMPT__``, andra bara om det råkade vara inställt (vilket var "
"standardfallet) och ett skript använde ``__VENV_NAME__`` istället. (Bidrag "
"från Brett Cannon i :issue:`37663`.)"

msgid "xml"
msgstr "xml"

msgid ""
"White space characters within attributes are now preserved when serializing :"
"mod:`xml.etree.ElementTree` to XML file. EOLNs are no longer normalized to "
"\"\\n\". This is the result of discussion about how to interpret section "
"2.11 of XML spec. (Contributed by Mefistotelis in :issue:`39011`.)"
msgstr ""
"Vita tecken inom attribut bevaras nu vid serialisering av :mod:`xml.etree."
"ElementTree` till XML-fil. EOLNs normaliseras inte längre till \"\\n\". "
"Detta är resultatet av en diskussion om hur man ska tolka avsnitt 2.11 i XML-"
"specifikationen. (Bidrag från Mefistotelis i :issue:`39011`.)"

msgid "Optimizations"
msgstr "Optimeringar"

msgid ""
"Optimized the idiom for assignment a temporary variable in comprehensions. "
"Now ``for y in [expr]`` in comprehensions is as fast as a simple assignment "
"``y = expr``.  For example:"
msgstr ""
"Optimerat idiomet för tilldelning av en temporär variabel i förståelser. Nu "
"är ``for y in [expr]`` i förståelser lika snabbt som en enkel tilldelning "
"``y = expr``.  Till exempel:"

msgid "sums = [s for s in [0] for x in data for s in [s + x]]"
msgstr "summor = [s för s i [0] för x i data för s i [s + x]]"

msgid ""
"Unlike the ``:=`` operator this idiom does not leak a variable to the outer "
"scope."
msgstr ""
"Till skillnad från operatorn ``:=`` läcker detta idiom inte en variabel till "
"det yttre omfånget."

msgid "(Contributed by Serhiy Storchaka in :issue:`32856`.)"
msgstr "(Bidrag från Serhiy Storchaka i :issue:`32856`.)"

msgid ""
"Optimized signal handling in multithreaded applications. If a thread "
"different than the main thread gets a signal, the bytecode evaluation loop "
"is no longer interrupted at each bytecode instruction to check for pending "
"signals which cannot be handled. Only the main thread of the main "
"interpreter can handle signals."
msgstr ""
"Optimerad signalhantering i flertrådade program. Om en annan tråd än "
"huvudtråden får en signal, avbryts inte längre bytecode-utvärderingsloopen "
"vid varje bytecode-instruktion för att kontrollera om det finns väntande "
"signaler som inte kan hanteras. Endast huvudtråden i huvudtolken kan hantera "
"signaler."

msgid ""
"Previously, the bytecode evaluation loop was interrupted at each instruction "
"until the main thread handles signals. (Contributed by Victor Stinner in :"
"issue:`40010`.)"
msgstr ""
"Tidigare avbröts bytecode-utvärderingsslingan vid varje instruktion tills "
"huvudtråden hanterade signaler. (Bidrag från Victor Stinner i :issue:"
"`40010`.)"

msgid ""
"Optimized the :mod:`subprocess` module on FreeBSD using ``closefrom()``. "
"(Contributed by Ed Maste, Conrad Meyer, Kyle Evans, Kubilay Kocak and Victor "
"Stinner in :issue:`38061`.)"
msgstr ""
"Optimerade modulen :mod:`subprocess` på FreeBSD med hjälp av "
"``closefrom()``. (Bidrag från Ed Maste, Conrad Meyer, Kyle Evans, Kubilay "
"Kocak och Victor Stinner i :issue:`38061`.)"

msgid ""
":c:func:`PyLong_FromDouble` is now up to 1.87x faster for values that fit "
"into :c:expr:`long`. (Contributed by Sergey Fedoseev in :issue:`37986`.)"
msgstr ""
":c:func:`PyLong_FromDouble` är nu upp till 1,87 gånger snabbare för värden "
"som passar in i :c:expr:`long`. (Bidrag från Sergey Fedoseev i :issue:"
"`37986`.)"

msgid ""
"A number of Python builtins (:class:`range`, :class:`tuple`, :class:`set`, :"
"class:`frozenset`, :class:`list`, :class:`dict`) are now sped up by using :"
"pep:`590` vectorcall protocol. (Contributed by Donghee Na, Mark Shannon, "
"Jeroen Demeyer and Petr Viktorin in :issue:`37207`.)"
msgstr ""
"Ett antal Python-inbyggnader (:class:`range`, :class:`tuple`, :class:`set`, :"
"class:`frozenset`, :class:`list`, :class:`dict`) snabbas nu upp genom att "
"använda :pep:`590` vectorcall-protokollet. (Bidrag från Donghee Na, Mark "
"Shannon, Jeroen Demeyer och Petr Viktorin i :issue:`37207`.)"

msgid ""
"Optimized :meth:`!set.difference_update` for the case when the other set is "
"much larger than the base set. (Suggested by Evgeny Kapun with code "
"contributed by Michele Orrù in :issue:`8425`.)"
msgstr ""
"Optimerade :meth:`!set.difference_update` för fallet när den andra "
"uppsättningen är mycket större än basuppsättningen. (Föreslagen av Evgeny "
"Kapun med kod från Michele Orrù i :issue:`8425`.)"

msgid ""
"Python's small object allocator (``obmalloc.c``) now allows (no more than) "
"one empty arena to remain available for immediate reuse, without returning "
"it to the OS.  This prevents thrashing in simple loops where an arena could "
"be created and destroyed anew on each iteration. (Contributed by Tim Peters "
"in :issue:`37257`.)"
msgstr ""
"Pythons allokator för små objekt (``obmalloc.c``) tillåter nu (högst) en tom "
"arena att förbli tillgänglig för omedelbar återanvändning, utan att "
"återlämna den till operativsystemet.  Detta förhindrar thrashing i enkla "
"loopar där en arena skulle kunna skapas och förstöras på nytt vid varje "
"iteration. (Bidrag från Tim Peters i :issue:`37257`.)"

msgid ""
":term:`floor division` of float operation now has a better performance. Also "
"the message of :exc:`ZeroDivisionError` for this operation is updated. "
"(Contributed by Donghee Na in :issue:`39434`.)"
msgstr ""
":term:`floor division` of float operation har nu bättre prestanda. Även "
"meddelandet för :exc:`ZeroDivisionError` för denna operation har "
"uppdaterats. (Bidrag från Donghee Na i :issue:`39434`.)"

msgid ""
"Decoding short ASCII strings with UTF-8 and ascii codecs is now about 15% "
"faster.  (Contributed by Inada Naoki in :issue:`37348`.)"
msgstr ""
"Avkodning av korta ASCII-strängar med UTF-8 och ascii-codecs är nu ca 15% "
"faster.  (Bidrag från Inada Naoki i :issue:`37348`.)"

msgid ""
"Here's a summary of performance improvements from Python 3.4 through Python "
"3.9:"
msgstr ""
"Här är en sammanfattning av prestandaförbättringar från Python 3.4 till "
"Python 3.9:"

msgid ""
"Python version                       3.4     3.5     3.6     3.7     3.8    "
"3.9\n"
"--------------                       ---     ---     ---     ---     ---    "
"---\n"
"\n"
"Variable and attribute read access:\n"
"    read_local                       7.1     7.1     5.4     5.1     3.9    "
"3.9\n"
"    read_nonlocal                    7.1     8.1     5.8     5.4     4.4    "
"4.5\n"
"    read_global                     15.5    19.0    14.3    13.6     7.6    "
"7.8\n"
"    read_builtin                    21.1    21.6    18.5    19.0     7.5    "
"7.8\n"
"    read_classvar_from_class        25.6    26.5    20.7    19.5    18.4   "
"17.9\n"
"    read_classvar_from_instance     22.8    23.5    18.8    17.1    16.4   "
"16.9\n"
"    read_instancevar                32.4    33.1    28.0    26.3    25.4   "
"25.3\n"
"    read_instancevar_slots          27.8    31.3    20.8    20.8    20.2   "
"20.5\n"
"    read_namedtuple                 73.8    57.5    45.0    46.8    18.4   "
"18.7\n"
"    read_boundmethod                37.6    37.9    29.6    26.9    27.7   "
"41.1\n"
"\n"
"Variable and attribute write access:\n"
"    write_local                      8.7     9.3     5.5     5.3     4.3    "
"4.3\n"
"    write_nonlocal                  10.5    11.1     5.6     5.5     4.7    "
"4.8\n"
"    write_global                    19.7    21.2    18.0    18.0    15.8   "
"16.7\n"
"    write_classvar                  92.9    96.0   104.6   102.1    39.2   "
"39.8\n"
"    write_instancevar               44.6    45.8    40.0    38.9    35.5   "
"37.4\n"
"    write_instancevar_slots         35.6    36.1    27.3    26.6    25.7   "
"25.8\n"
"\n"
"Data structure read access:\n"
"    read_list                       24.2    24.5    20.8    20.8    19.0   "
"19.5\n"
"    read_deque                      24.7    25.5    20.2    20.6    19.8   "
"20.2\n"
"    read_dict                       24.3    25.7    22.3    23.0    21.0   "
"22.4\n"
"    read_strdict                    22.6    24.3    19.5    21.2    18.9   "
"21.5\n"
"\n"
"Data structure write access:\n"
"    write_list                      27.1    28.5    22.5    21.6    20.0   "
"20.0\n"
"    write_deque                     28.7    30.1    22.7    21.8    23.5   "
"21.7\n"
"    write_dict                      31.4    33.3    29.3    29.2    24.7   "
"25.4\n"
"    write_strdict                   28.4    29.9    27.5    25.2    23.1   "
"24.5\n"
"\n"
"Stack (or queue) operations:\n"
"    list_append_pop                 93.4   112.7    75.4    74.2    50.8   "
"50.6\n"
"    deque_append_pop                43.5    57.0    49.4    49.2    42.5   "
"44.2\n"
"    deque_append_popleft            43.7    57.3    49.7    49.7    42.8   "
"46.4\n"
"\n"
"Timing loop:\n"
"    loop_overhead                    0.5     0.6     0.4     0.3     0.3    "
"0.3"
msgstr ""
"Python version 3,4 3,5 3,6 3,7 3,8 3,9\n"
"-------------- --- --- --- --- --- ---\n"
"\n"
"Läsåtkomst för variabler och attribut:\n"
"    read_local 7,1 7,1 5,4 5,1 3,9 3,9\n"
"    read_nonlocal 7,1 8,1 5,8 5,4 4,4 4,5\n"
"    läs_global 15,5 19,0 14,3 13,6 7,6 7,8\n"
"    read_builtin 21,1 21,6 18,5 19,0 7,5 7,8\n"
"    läs_klassvar_från_klass 25,6 26,5 20,7 19,5 18,4 17,9\n"
"    read_classvar_from_instance 22,8 23,5 18,8 17,1 16,4 16,9\n"
"    read_instancevar 32,4 33,1 28,0 26,3 25,4 25,3\n"
"    read_instancevar_slots 27,8 31,3 20,8 20,8 20,2 20,5\n"
"    read_namedtuple 73,8 57,5 45,0 46,8 18,4 18,7\n"
"    read_boundmethod 37,6 37,9 29,6 26,9 27,7 41,1\n"
"\n"
"Skrivåtkomst för variabler och attribut:\n"
"    write_local 8,7 9,3 5,5 5,3 4,3 4,3 4,3\n"
"    write_nonlocal 10,5 11,1 5,6 5,5 4,7 4,8\n"
"    write_global 19,7 21,2 18,0 18,0 15,8 16,7\n"
"    write_classvar 92,9 96,0 104,6 102,1 39,2 39,8\n"
"    write_instancevar 44,6 45,8 40,0 38,9 35,5 37,4\n"
"    write_instancevar_slots 35,6 36,1 27,3 26,6 25,7 25,8\n"
"\n"
"Läsåtkomst för datastruktur:\n"
"    read_list 24,2 24,5 20,8 20,8 19,0 19,5\n"
"    read_deque 24,7 25,5 20,2 20,6 19,8 20,2\n"
"    read_dict 24,3 25,7 22,3 23,0 21,0 22,4\n"
"    read_strdict 22,6 24,3 19,5 21,2 18,9 21,5\n"
"\n"
"Skrivåtkomst för datastruktur:\n"
"    write_list 27,1 28,5 22,5 21,6 20,0 20,0\n"
"    write_deque 28,7 30,1 22,7 21,8 23,5 21,7\n"
"    write_dict 31,4 33,3 29,3 29,2 24,7 25,4\n"
"    write_strdict 28,4 29,9 27,5 25,2 23,1 24,5\n"
"\n"
"Stapel- (eller kö-) operationer:\n"
"    list_append_pop 93,4 112,7 75,4 74,2 50,8 50,6\n"
"    deque_append_pop 43,5 57,0 49,4 49,2 42,5 44,2\n"
"    deque_append_popleft 43,7 57,3 49,7 49,7 42,8 46,4\n"
"\n"
"Tidtagning av slinga:\n"
"    loop_overhead 0,5 0,6 0,4 0,3 0,3 0,3 0,3"

msgid ""
"These results were generated from the variable access benchmark script at: "
"``Tools/scripts/var_access_benchmark.py``. The benchmark script displays "
"timings in nanoseconds.  The benchmarks were measured on an `Intel® Core™ "
"i7-4960HQ processor <https://ark.intel.com/content/www/us/en/ark/"
"products/76088/intel-core-i7-4960hq-processor-6m-cache-up-to-3-80-ghz."
"html>`_ running the macOS 64-bit builds found at `python.org <https://www."
"python.org/downloads/macos/>`_."
msgstr ""
"Dessa resultat genererades från skriptet Variable Access Benchmark på : "
"``Tools/scripts/var_access_benchmark.py``. Benchmarkskriptet visar "
"tidsangivelser i nanosekunder.  Riktmärkena uppmättes på en `Intel® Core™ "
"i7-4960HQ-processor <https://ark.intel.com/content/www/us/en/ark/"
"products/76088/intel-core-i7-4960hq-processor-6m-cache-up-to-3-80-ghz."
"html>`_ som körde macOS 64-bitars builds som finns på `python.org <https://"
"www.python.org/downloads/macos/>`_."

msgid "Deprecated"
msgstr "Föråldrat"

msgid ""
"The distutils ``bdist_msi`` command is now deprecated, use ``bdist_wheel`` "
"(wheel packages) instead. (Contributed by Hugo van Kemenade in :issue:"
"`39586`.)"
msgstr ""
"Distutils kommandot ``bdist_msi`` är nu föråldrat, använd ``bdist_wheel`` "
"(wheel-paket) istället. (Bidrag från Hugo van Kemenade i :issue:`39586`.)"

msgid ""
"Currently :func:`math.factorial` accepts :class:`float` instances with non-"
"negative integer values (like ``5.0``).  It raises a :exc:`ValueError` for "
"non-integral and negative floats.  It is now deprecated.  In future Python "
"versions it will raise a :exc:`TypeError` for all floats. (Contributed by "
"Serhiy Storchaka in :issue:`37315`.)"
msgstr ""
"För närvarande accepterar :func:`math.factorial` :class:`float` instanser "
"med icke-negativa heltalsvärden (som ``5.0``).  Den ger upphov till ett :exc:"
"`ValueError` för icke-integrala och negativa float-värden.  Det är nu "
"föråldrat.  I framtida Python-versioner kommer den att ge upphov till ett :"
"exc:`TypeError` för alla flyttal. (Bidrag från Serhiy Storchaka i :issue:"
"`37315`.)"

msgid ""
"The :mod:`!parser` and :mod:`!symbol` modules are deprecated and will be "
"removed in future versions of Python. For the majority of use cases, users "
"can leverage the Abstract Syntax Tree (AST) generation and compilation "
"stage, using the :mod:`ast` module."
msgstr ""
"Modulerna :mod:`!parser` och :mod:`!symbol` är föråldrade och kommer att tas "
"bort i framtida versioner av Python. För de flesta användningsfall kan "
"användare utnyttja genererings- och kompileringssteget för AST (Abstract "
"Syntax Tree) med modulen :mod:`ast`."

msgid ""
"The Public C API functions :c:func:`!PyParser_SimpleParseStringFlags`, :c:"
"func:`!PyParser_SimpleParseStringFlagsFilename`, :c:func:`!"
"PyParser_SimpleParseFileFlags` and :c:func:`!PyNode_Compile` are deprecated "
"and will be removed in Python 3.10 together with the old parser."
msgstr ""
"De offentliga C API-funktionerna :c:func:`!"
"PyParser_SimpleParseStringFlags`, :c:func:`!"
"PyParser_SimpleParseStringFlagsFilename`, :c:func:`!"
"PyParser_SimpleParseFileFlags` och :c:func:`!PyNode_Compile` är föråldrade "
"och kommer att tas bort i Python 3.10 tillsammans med den gamla parsern."

msgid ""
"Using :data:`NotImplemented` in a boolean context has been deprecated, as it "
"is almost exclusively the result of incorrect rich comparator "
"implementations. It will be made a :exc:`TypeError` in a future version of "
"Python. (Contributed by Josh Rosenberg in :issue:`35712`.)"
msgstr ""
"Att använda :data:`NotImplemented` i en boolesk kontext har uteslutits, "
"eftersom det nästan uteslutande är resultatet av felaktiga implementationer "
"av rik komparator. Det kommer att göras till ett :exc:`TypeError` i en "
"framtida version av Python. (Bidrag från Josh Rosenberg i :issue:`35712`.)"

msgid ""
"The :mod:`random` module currently accepts any hashable type as a possible "
"seed value.  Unfortunately, some of those types are not guaranteed to have a "
"deterministic hash value.  After Python 3.9, the module will restrict its "
"seeds to :const:`None`, :class:`int`, :class:`float`, :class:`str`, :class:"
"`bytes`, and :class:`bytearray`."
msgstr ""
"Modulen :mod:`random` accepterar för närvarande vilken hashbar typ som helst "
"som ett möjligt seed-värde.  Tyvärr är vissa av dessa typer inte garanterade "
"att ha ett deterministiskt hashvärde.  Efter Python 3.9 kommer modulen att "
"begränsa sina fröer till :const:`None`, :class:`int`, :class:`float`, :class:"
"`str`, :class:`bytes` och :class:`bytearray`."

msgid ""
"Opening the :class:`~gzip.GzipFile` file for writing without specifying the "
"*mode* argument is deprecated.  In future Python versions it will always be "
"opened for reading by default.  Specify the *mode* argument for opening it "
"for writing and silencing a warning. (Contributed by Serhiy Storchaka in :"
"issue:`28286`.)"
msgstr ""
"Att öppna :class:`~gzip.GzipFile`-filen för skrivning utan att ange *mode*-"
"argumentet är föråldrat.  I framtida Python-versioner kommer den alltid att "
"öppnas för läsning som standard.  Ange *mode*-argumentet för att öppna den "
"för skrivning och tysta en varning. (Bidrag från Serhiy Storchaka i :issue:"
"`28286`.)"

msgid ""
"Deprecated the ``split()`` method of :class:`!_tkinter.TkappType` in favour "
"of the ``splitlist()`` method which has more consistent and predictable "
"behavior. (Contributed by Serhiy Storchaka in :issue:`38371`.)"
msgstr ""
"Föråldrade metoden ``split()`` i :class:`!_tkinter.TkappType` till förmån "
"för metoden ``splitlist()`` som har ett mer konsekvent och förutsägbart "
"beteende. (Bidrag från Serhiy Storchaka i :issue:`38371`.)"

msgid ""
"The explicit passing of coroutine objects to :func:`asyncio.wait` has been "
"deprecated and will be removed in version 3.11. (Contributed by Yury "
"Selivanov and Kyle Stanley in :issue:`34790`.)"
msgstr ""
"Den uttryckliga överföringen av coroutine-objekt till :func:`asyncio.wait` "
"har föråldrats och kommer att tas bort i version 3.11. (Bidrag från Yury "
"Selivanov och Kyle Stanley i :issue:`34790`.)"

msgid ""
"binhex4 and hexbin4 standards are now deprecated. The :mod:`!binhex` module "
"and the following :mod:`binascii` functions are now deprecated:"
msgstr ""
"binhex4- och hexbin4-standarderna är nu föråldrade. Modulen :mod:`!binhex` "
"och följande funktioner :mod:`binascii` är nu föråldrade:"

msgid ":func:`!b2a_hqx`, :func:`!a2b_hqx`"
msgstr ":func:`!b2a_hqx`, :func:`!a2b_hqx`"

msgid ":func:`!rlecode_hqx`, :func:`!rledecode_hqx`"
msgstr ":func:`!rlecode_hqx`, :func:`!rledecode_hqx`"

msgid "(Contributed by Victor Stinner in :issue:`39353`.)"
msgstr "(Bidrag från Victor Stinner i :issue:`39353`.)"

msgid ""
":mod:`ast` classes ``slice``, ``Index`` and ``ExtSlice`` are considered "
"deprecated and will be removed in future Python versions.  ``value`` itself "
"should be used instead of ``Index(value)``.  ``Tuple(slices, Load())`` "
"should be used instead of ``ExtSlice(slices)``. (Contributed by Serhiy "
"Storchaka in :issue:`34822`.)"
msgstr ""
":mod:`ast` klasserna ``lice``, ``Index`` och ``ExtSlice`` anses vara "
"föråldrade och kommer att tas bort i framtida Python-versioner.  ``value`` "
"själv bör användas istället för ``Index(value)``.  ``Tuple(slices, Load())`` "
"bör användas istället för ``ExtSlice(slices)``. (Bidrag från Serhiy "
"Storchaka i :issue:`34822`.)"

msgid ""
":mod:`ast` classes ``Suite``, ``Param``, ``AugLoad`` and ``AugStore`` are "
"considered deprecated and will be removed in future Python versions. They "
"were not generated by the parser and not accepted by the code generator in "
"Python 3. (Contributed by Batuhan Taskaya in :issue:`39639` and :issue:"
"`39969` and Serhiy Storchaka in :issue:`39988`.)"
msgstr ""
":mod:`ast`-klasserna ``Suite``, ``Param``, ``AugLoad`` och ``AugStore`` "
"anses vara föråldrade och kommer att tas bort i framtida Python-versioner. "
"De genererades inte av parsern och accepterades inte av kodgeneratorn i "
"Python 3. (Bidrag från Batuhan Taskaya i :issue:`39639` och :issue:`39969` "
"och Serhiy Storchaka i :issue:`39988`.)"

msgid ""
"The :c:func:`!PyEval_InitThreads` and :c:func:`!PyEval_ThreadsInitialized` "
"functions are now deprecated and will be removed in Python 3.11. Calling :c:"
"func:`!PyEval_InitThreads` now does nothing. The :term:`GIL` is initialized "
"by :c:func:`Py_Initialize` since Python 3.7. (Contributed by Victor Stinner "
"in :issue:`39877`.)"
msgstr ""
"Funktionerna :c:func:`!PyEval_InitThreads` och :c:func:`!"
"PyEval_ThreadsInitialized` är nu föråldrade och kommer att tas bort i Python "
"3.11. Anrop av :c:func:`!PyEval_InitThreads` gör nu ingenting. :term:`GIL` "
"initialiseras av :c:func:`Py_Initialize` sedan Python 3.7. (Bidrag från "
"Victor Stinner i :issue:`39877`.)"

msgid ""
"Passing ``None`` as the first argument to the :func:`shlex.split` function "
"has been deprecated.  (Contributed by Zackery Spytz in :issue:`33262`.)"
msgstr ""
"Att skicka ``None`` som det första argumentet till :func:`shlex.split`-"
"funktionen har blivit föråldrat.  (Bidrag från Zackery Spytz i :issue:"
"`33262`.)"

msgid ""
":func:`!smtpd.MailmanProxy` is now deprecated as it is unusable without an "
"external module, ``mailman``.  (Contributed by Samuel Colvin in :issue:"
"`35800`.)"
msgstr ""
":func:`!smtpd.MailmanProxy` är nu föråldrad eftersom den är oanvändbar utan "
"en extern modul, ``mailman``.  (Bidrag från Samuel Colvin i :issue:`35800`.)"

msgid ""
"The :mod:`!lib2to3` module now emits a :exc:`PendingDeprecationWarning`. "
"Python 3.9 switched to a PEG parser (see :pep:`617`), and Python 3.10 may "
"include new language syntax that is not parsable by lib2to3's LL(1) parser. "
"The :mod:`!lib2to3` module may be removed from the standard library in a "
"future Python version. Consider third-party alternatives such as `LibCST`_ "
"or `parso`_. (Contributed by Carl Meyer in :issue:`40360`.)"
msgstr ""
"Modulen :mod:`!lib2to3` avger nu en :exc:`PendingDeprecationWarning`. Python "
"3.9 bytte till en PEG-parser (se :pep:`617`), och Python 3.10 kan innehålla "
"ny språksyntax som inte kan analyseras av lib2to3:s LL(1)-parser. Modulen :"
"mod:`!lib2to3` kan komma att tas bort från standardbiblioteket i en framtida "
"Python-version. Överväg alternativ från tredje part som `LibCST`_ eller "
"`parso`_. (Bidrag från Carl Meyer i :issue:`40360`.)"

msgid ""
"The *random* parameter of :func:`random.shuffle` has been deprecated. "
"(Contributed by Raymond Hettinger in :issue:`40465`)"
msgstr ""
"Parametern *random* i :func:`random.shuffle` har utgått. (Bidrag från "
"Raymond Hettinger i :issue:`40465`)"

msgid "Removed"
msgstr "Borttagen"

msgid ""
"The erroneous version at :data:`!unittest.mock.__version__` has been removed."
msgstr ""
"Den felaktiga versionen i :data:`!unittest.mock.__version__` har tagits bort."

msgid ""
":class:`!nntplib.NNTP`: ``xpath()`` and ``xgtitle()`` methods have been "
"removed. These methods are deprecated since Python 3.3. Generally, these "
"extensions are not supported or not enabled by NNTP server administrators. "
"For ``xgtitle()``, please use :meth:`!nntplib.NNTP.descriptions` or :meth:`!"
"nntplib.NNTP.description` instead. (Contributed by Donghee Na in :issue:"
"`39366`.)"
msgstr ""
":class:`!nntplib.NNTP`: ``xpath()`` och ``xgtitle()`` metoderna har tagits "
"bort. Dessa metoder är föråldrade sedan Python 3.3. I allmänhet stöds inte "
"dessa tillägg eller aktiveras inte av NNTP-serveradministratörer. För "
"``xgtitle()``, använd :meth:`!nntplib.NNTP.descriptions` eller :meth:`!"
"nntplib.NNTP.description` istället. (Bidrag från Donghee Na i :issue:"
"`39366`.)"

msgid ""
":class:`array.array`: ``tostring()`` and ``fromstring()`` methods have been "
"removed. They were aliases to ``tobytes()`` and ``frombytes()``, deprecated "
"since Python 3.2. (Contributed by Victor Stinner in :issue:`38916`.)"
msgstr ""
":class:`array.array`: Metoderna ``tostring()`` och ``fromstring()`` har "
"tagits bort. De var alias till ``tobytes()`` och ``frombytes()``, föråldrade "
"sedan Python 3.2. (Bidrag från Victor Stinner i :issue:`38916`.)"

msgid ""
"The undocumented ``sys.callstats()`` function has been removed. Since Python "
"3.7, it was deprecated and always returned :const:`None`. It required a "
"special build option ``CALL_PROFILE`` which was already removed in Python "
"3.7. (Contributed by Victor Stinner in :issue:`37414`.)"
msgstr ""
"Den odokumenterade funktionen ``sys.callstats()`` har tagits bort. Sedan "
"Python 3.7 var den föråldrad och returnerade alltid :const:`None`. Den "
"krävde ett speciellt byggalternativ ``CALL_PROFILE`` som redan var borttaget "
"i Python 3.7. (Bidrag från Victor Stinner i :issue:`37414`.)"

msgid ""
"The ``sys.getcheckinterval()`` and ``sys.setcheckinterval()`` functions have "
"been removed. They were deprecated since Python 3.2. Use :func:`sys."
"getswitchinterval` and :func:`sys.setswitchinterval` instead. (Contributed "
"by Victor Stinner in :issue:`37392`.)"
msgstr ""
"Funktionerna ``sys.getcheckinterval()`` och ``sys.setcheckinterval()`` har "
"tagits bort. De var föråldrade sedan Python 3.2. Använd :func:`sys."
"getswitchinterval` och :func:`sys.setswitchinterval` istället. (Bidrag från "
"Victor Stinner i :issue:`37392`.)"

msgid ""
"The C function ``PyImport_Cleanup()`` has been removed. It was documented "
"as: \"Empty the module table.  For internal use only.\" (Contributed by "
"Victor Stinner in :issue:`36710`.)"
msgstr ""
"C-funktionen ``PyImport_Cleanup()`` har tagits bort. Den var dokumenterad "
"som: \"Tömmer modultabellen.  Endast för internt bruk.\" (Bidrag från Victor "
"Stinner i :issue:`36710`.)"

msgid ""
"``_dummy_thread`` and ``dummy_threading`` modules have been removed. These "
"modules were deprecated since Python 3.7 which requires threading support. "
"(Contributed by Victor Stinner in :issue:`37312`.)"
msgstr ""
"modulerna ``dummy_thread`` och ``dummy_threading`` har tagits bort. Dessa "
"moduler är föråldrade sedan Python 3.7 som kräver stöd för trådning. (Bidrag "
"från Victor Stinner i :issue:`37312`.)"

msgid ""
"``aifc.openfp()`` alias to ``aifc.open()``, ``sunau.openfp()`` alias to "
"``sunau.open()``, and ``wave.openfp()`` alias to :func:`wave.open` have been "
"removed. They were deprecated since Python 3.7. (Contributed by Victor "
"Stinner in :issue:`37320`.)"
msgstr ""
"``aifc.openfp()`` alias till ``aifc.open()``, ``unau.openfp()`` alias till "
"``unau.open()`` och ``wave.openfp()`` alias till :func:`wave.open` har "
"tagits bort. De var föråldrade sedan Python 3.7. (Bidrag från Victor Stinner "
"i :issue:`37320`.)"

msgid ""
"The :meth:`!isAlive` method of :class:`threading.Thread` has been removed. "
"It was deprecated since Python 3.8. Use :meth:`~threading.Thread.is_alive` "
"instead. (Contributed by Donghee Na in :issue:`37804`.)"
msgstr ""
"Metoden :meth:`!isAlive` i :class:`threading.Thread` har tagits bort. Den "
"var föråldrad sedan Python 3.8. Använd :meth:`~threading.Thread.is_alive` "
"istället. (Bidrag från Donghee Na i :issue:`37804`.)"

msgid ""
"Methods ``getchildren()`` and ``getiterator()`` of classes :class:`~xml."
"etree.ElementTree.ElementTree` and :class:`~xml.etree.ElementTree.Element` "
"in the :mod:`~xml.etree.ElementTree` module have been removed.  They were "
"deprecated in Python 3.2. Use ``iter(x)`` or ``list(x)`` instead of ``x."
"getchildren()`` and ``x.iter()`` or ``list(x.iter())`` instead of ``x."
"getiterator()``. (Contributed by Serhiy Storchaka in :issue:`36543`.)"
msgstr ""
"Metoderna ``getchildren()`` och ``getiterator()`` i klasserna :class:`~xml."
"etree.ElementTree.ElementTree` och :class:`~xml.etree.ElementTree.Element` i "
"modulen :mod:`~xml.etree.ElementTree` har tagits bort.  De var föråldrade i "
"Python 3.2. Använd ``iter(x)`` eller ``list(x)`` istället för ``x."
"getchildren()`` och ``x.iter()`` eller ``list(x.iter())`` istället för ``x."
"getiterator()``. (Bidrag från Serhiy Storchaka i :issue:`36543`.)"

msgid ""
"The old :mod:`plistlib` API has been removed, it was deprecated since Python "
"3.4. Use the :func:`~plistlib.load`, :func:`~plistlib.loads`, :func:"
"`~plistlib.dump`, and :func:`~plistlib.dumps` functions. Additionally, the "
"*use_builtin_types* parameter was removed, standard :class:`bytes` objects "
"are always used instead. (Contributed by Jon Janzen in :issue:`36409`.)"
msgstr ""
"Det gamla :mod:`plistlib` API:et har tagits bort, det var föråldrat sedan "
"Python 3.4. Använd funktionerna :func:`~plistlib.load`, :func:`~plistlib."
"loads`, :func:`~plistlib.dump` och :func:`~plistlib.dumps`. Dessutom togs "
"parametern *use_builtin_types* bort, standard :class:`bytes`-objekt används "
"alltid istället. (Bidrag från Jon Janzen i :issue:`36409`.)"

msgid ""
"The C function ``PyGen_NeedsFinalizing`` has been removed. It was not "
"documented, tested, or used anywhere within CPython after the implementation "
"of :pep:`442`. Patch by Joannah Nanjekye. (Contributed by Joannah Nanjekye "
"in :issue:`15088`)"
msgstr ""
"C-funktionen ``PyGen_NeedsFinalizing`` har tagits bort. Den var inte "
"dokumenterad, testad eller använd någonstans inom CPython efter "
"implementeringen av :pep:`442`. Patch av Joannah Nanjekye. (Bidrag från "
"Joannah Nanjekye i :issue:`15088`)"

msgid ""
"``base64.encodestring()`` and ``base64.decodestring()``, aliases deprecated "
"since Python 3.1, have been removed: use :func:`base64.encodebytes` and :"
"func:`base64.decodebytes` instead. (Contributed by Victor Stinner in :issue:"
"`39351`.)"
msgstr ""
"``base64.encodestring()`` och ``base64.decodestring()``, alias som är "
"föråldrade sedan Python 3.1, har tagits bort: använd :func:`base64."
"encodebytes` och :func:`base64.decodebytes` istället. (Bidrag från Victor "
"Stinner i :issue:`39351`.)"

msgid ""
"``fractions.gcd()`` function has been removed, it was deprecated since "
"Python 3.5 (:issue:`22486`): use :func:`math.gcd` instead. (Contributed by "
"Victor Stinner in :issue:`39350`.)"
msgstr ""
"funktionen ``fractions.gcd()`` har tagits bort, den är föråldrad sedan "
"Python 3.5 (:issue:`22486`): använd :func:`math.gcd` istället. (Bidrag från "
"Victor Stinner i :issue:`39350`.)"

msgid ""
"The *buffering* parameter of :class:`bz2.BZ2File` has been removed. Since "
"Python 3.0, it was ignored and using it emitted a :exc:`DeprecationWarning`. "
"Pass an open file object to control how the file is opened. (Contributed by "
"Victor Stinner in :issue:`39357`.)"
msgstr ""
"Parametern *buffring* i :class:`bz2.BZ2File` har tagits bort. Sedan Python "
"3.0 ignorerades den och att använda den gav en :exc:`DeprecationWarning`. "
"Skicka ett open file-objekt för att kontrollera hur filen öppnas. (Bidrag "
"från Victor Stinner i :issue:`39357`.)"

msgid ""
"The *encoding* parameter of :func:`json.loads` has been removed. As of "
"Python 3.1, it was deprecated and ignored; using it has emitted a :exc:"
"`DeprecationWarning` since Python 3.8. (Contributed by Inada Naoki in :issue:"
"`39377`)"
msgstr ""
"Parametern *encoding* i :func:`json.loads` har tagits bort. Från och med "
"Python 3.1 var den föråldrad och ignorerades; att använda den har gett "
"upphov till en :exc:`DeprecationWarning` sedan Python 3.8. (Bidrag från "
"Inada Naoki i :issue:`39377`)"

msgid ""
"``with (await asyncio.lock):`` and ``with (yield from asyncio.lock):`` "
"statements are not longer supported, use ``async with lock`` instead.  The "
"same is correct for ``asyncio.Condition`` and ``asyncio.Semaphore``. "
"(Contributed by Andrew Svetlov in :issue:`34793`.)"
msgstr ""
"``with (await asyncio.lock):`` och ``with (yield from asyncio.lock):`` "
"uttalanden stöds inte längre, använd ``async with lock`` istället.  Detsamma "
"gäller för ``asyncio.Condition`` och ``asyncio.Semaphore``. (Bidrag från "
"Andrew Svetlov i :issue:`34793`.)"

msgid ""
"The :func:`!sys.getcounts` function, the ``-X showalloccount`` command line "
"option and the ``show_alloc_count`` field of the C structure :c:type:"
"`PyConfig` have been removed. They required a special Python build by "
"defining ``COUNT_ALLOCS`` macro. (Contributed by Victor Stinner in :issue:"
"`39489`.)"
msgstr ""
"Funktionen :func:`!sys.getcounts`, kommandoradsalternativet ``-X "
"showalloccount`` och fältet ``show_alloc_count`` i C-strukturen :c:type:"
"`PyConfig` har tagits bort. De krävde en speciell Python-byggnad genom att "
"definiera makrot ``COUNT_ALLOCS``. (Bidrag från Victor Stinner i :issue:"
"`39489`.)"

msgid ""
"The ``_field_types`` attribute of the :class:`typing.NamedTuple` class has "
"been removed.  It was deprecated since Python 3.8.  Use the "
"``__annotations__`` attribute instead. (Contributed by Serhiy Storchaka in :"
"issue:`40182`.)"
msgstr ""
"Attributet ``_field_types`` i klassen :class:`typing.NamedTuple` har tagits "
"bort.  Det var föråldrat sedan Python 3.8.  Använd attributet "
"``__annotations__`` istället. (Bidrag från Serhiy Storchaka i :issue:"
"`40182`.)"

msgid ""
"The :meth:`!symtable.SymbolTable.has_exec` method has been removed. It was "
"deprecated since 2006, and only returning ``False`` when it's called. "
"(Contributed by Batuhan Taskaya in :issue:`40208`)"
msgstr ""
"Metoden :meth:`!symtable.SymbolTable.has_exec` har tagits bort. Den var "
"föråldrad sedan 2006 och returnerade bara ``False`` när den anropades. "
"(Bidrag från Batuhan Taskaya i :issue:`40208`)"

msgid ""
"The :meth:`!asyncio.Task.current_task` and :meth:`!asyncio.Task.all_tasks` "
"have been removed. They were deprecated since Python 3.7 and you can use :"
"func:`asyncio.current_task` and :func:`asyncio.all_tasks` instead. "
"(Contributed by Rémi Lapeyre in :issue:`40967`)"
msgstr ""
":meth:`!asyncio.Task.current_task` och :meth:`!asyncio.Task.all_tasks` har "
"tagits bort. De är föråldrade sedan Python 3.7 och du kan använda :func:"
"`asyncio.current_task` och :func:`asyncio.all_tasks` istället. (Bidrag från "
"Rémi Lapeyre i :issue:`40967`)"

msgid ""
"The ``unescape()`` method in the :class:`html.parser.HTMLParser` class has "
"been removed (it was deprecated since Python 3.4).  :func:`html.unescape` "
"should be used for converting character references to the corresponding "
"unicode characters."
msgstr ""
"Metoden ``unescape()`` i klassen :class:`html.parser.HTMLParser` har tagits "
"bort (den har varit föråldrad sedan Python 3.4).  :func:`html.unescape` bör "
"användas för att konvertera teckenreferenser till motsvarande unicode-tecken."

msgid "Porting to Python 3.9"
msgstr "Portning till Python 3.9"

msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code."
msgstr ""
"I det här avsnittet listas tidigare beskrivna ändringar och andra buggfixar "
"som kan kräva ändringar i din kod."

msgid "Changes in the Python API"
msgstr "Ändringar i Python API"

msgid ""
":func:`__import__` and :func:`importlib.util.resolve_name` now raise :exc:"
"`ImportError` where it previously raised :exc:`ValueError`. Callers catching "
"the specific exception type and supporting both Python 3.9 and earlier "
"versions will need to catch both using ``except (ImportError, ValueError):``."
msgstr ""
":func:`__import__` och :func:`importlib.util.resolve_name` ger nu upphov "
"till :exc:`ImportError` där det tidigare gav upphov till :exc:`ValueError`. "
"Anropare som fångar den specifika undantagstypen och stöder både Python 3.9 "
"och tidigare versioner måste fånga båda med hjälp av ``except (ImportError, "
"ValueError):``."

msgid ""
"The :mod:`venv` activation scripts no longer special-case when "
"``__VENV_PROMPT__`` is set to ``\"\"``."
msgstr ""
"Aktiveringsskriptet :mod:`venv` är inte längre ett specialfall när "
"``__VENV_PROMPT__`` är satt till ``\"\"``."

msgid ""
"The :meth:`select.epoll.unregister` method no longer ignores the :const:"
"`~errno.EBADF` error. (Contributed by Victor Stinner in :issue:`39239`.)"
msgstr ""
"Metoden :meth:`select.epoll.unregister` ignorerar inte längre felet :const:"
"`~errno.EBADF`. (Bidrag från Victor Stinner i :issue:`39239`.)"

msgid ""
"The *compresslevel* parameter of :class:`bz2.BZ2File` became keyword-only, "
"since the *buffering* parameter has been removed. (Contributed by Victor "
"Stinner in :issue:`39357`.)"
msgstr ""
"Parametern *compresslevel* i :class:`bz2.BZ2File` blev endast nyckelord, "
"eftersom parametern *buffering* har tagits bort. (Bidrag från Victor Stinner "
"i :issue:`39357`.)"

msgid ""
"Simplified AST for subscription. Simple indices will be represented by their "
"value, extended slices will be represented as tuples. ``Index(value)`` will "
"return a ``value`` itself, ``ExtSlice(slices)`` will return ``Tuple(slices, "
"Load())``. (Contributed by Serhiy Storchaka in :issue:`34822`.)"
msgstr ""
"Förenklad AST för prenumeration. Enkla index kommer att representeras av "
"deras värde, utökade slices kommer att representeras som tuples. "
"``Index(värde)`` kommer att returnera ett ``värde`` själv, "
"``ExtSlice(slices)`` kommer att returnera ``Tuple(slices, Load())``. (Bidrag "
"från Serhiy Storchaka i :issue:`34822`.)"

msgid ""
"The :mod:`importlib` module now ignores the :envvar:`PYTHONCASEOK` "
"environment variable when the :option:`-E` or :option:`-I` command line "
"options are being used."
msgstr ""
"Modulen :mod:`importlib` ignorerar nu miljövariabeln :envvar:`PYTHONCASEOK` "
"när kommandoradsalternativen :option:`-E` eller :option:`-I` används."

msgid ""
"The *encoding* parameter has been added to the classes :class:`ftplib.FTP` "
"and :class:`ftplib.FTP_TLS` as a keyword-only parameter, and the default "
"encoding is changed from Latin-1 to UTF-8 to follow :rfc:`2640`."
msgstr ""
"Parametern *encoding* har lagts till i klasserna :class:`ftplib.FTP` och :"
"class:`ftplib.FTP_TLS` som en parameter med endast nyckelord, och "
"standardkodningen har ändrats från Latin-1 till UTF-8 för att följa :rfc:"
"`2640`."

msgid ""
":meth:`asyncio.loop.shutdown_default_executor` has been added to :class:"
"`~asyncio.AbstractEventLoop`, meaning alternative event loops that inherit "
"from it should have this method defined. (Contributed by Kyle Stanley in :"
"issue:`34037`.)"
msgstr ""
":meth:`asyncio.loop.shutdown_default_executor` har lagts till i :class:"
"`~asyncio.AbstractEventLoop`, vilket innebär att alternativa händelseslingor "
"som ärver från den bör ha denna metod definierad. (Bidrag från Kyle Stanley "
"i :issue:`34037`.)"

msgid ""
"The constant values of future flags in the :mod:`__future__` module is "
"updated in order to prevent collision with compiler flags. Previously "
"``PyCF_ALLOW_TOP_LEVEL_AWAIT`` was clashing with ``CO_FUTURE_DIVISION``. "
"(Contributed by Batuhan Taskaya in :issue:`39562`)"
msgstr ""
"De konstanta värdena för framtidsflaggor i modulen :mod:`__future__` har "
"uppdaterats för att förhindra kollision med kompilatorflaggor. Tidigare "
"krockade ``PyCF_ALLOW_TOP_LEVEL_AWAIT`` med ``CO_FUTURE_DIVISION``. (Bidrag "
"från Batuhan Taskaya i :issue:`39562`)"

msgid ""
"``array('u')`` now uses :c:type:`wchar_t` as C type instead of "
"``Py_UNICODE``. This change doesn't affect to its behavior because "
"``Py_UNICODE`` is alias of :c:type:`wchar_t` since Python 3.3. (Contributed "
"by Inada Naoki in :issue:`34538`.)"
msgstr ""
"``array('u')`` använder nu :c:type:`wchar_t` som C-typ istället för "
"``Py_UNICODE``. Denna ändring påverkar inte dess beteende eftersom "
"``Py_UNICODE`` är alias för :c:type:`wchar_t` sedan Python 3.3. (Bidrag från "
"Inada Naoki i :issue:`34538`.)"

msgid ""
"The :func:`logging.getLogger` API now returns the root logger when passed "
"the name ``'root'``, whereas previously it returned a non-root logger named "
"``'root'``. This could affect cases where user code explicitly wants a non-"
"root logger named ``'root'``, or instantiates a logger using ``logging."
"getLogger(__name__)`` in some top-level module called ``'root.py'``. "
"(Contributed by Vinay Sajip in :issue:`37742`.)"
msgstr ""
"API:et :func:`logging.getLogger` returnerar nu rotloggaren när namnet "
"``'root'`` anges, medan det tidigare returnerade en icke-rotloggare med "
"namnet ``'root'``. Detta kan påverka fall där användarkod uttryckligen vill "
"ha en icke-rotlogger med namnet ``'root``, eller instansierar en logger med "
"hjälp av ``logging.getLogger(__name__)`` i någon toppnivåmodul som heter "
"``'root.py'``. (Bidrag från Vinay Sajip i :issue:`37742`.)"

msgid ""
"Division handling of :class:`~pathlib.PurePath` now returns :data:"
"`NotImplemented` instead of raising a :exc:`TypeError` when passed something "
"other than an instance of ``str`` or :class:`~pathlib.PurePath`.  This "
"allows creating compatible classes that don't inherit from those mentioned "
"types. (Contributed by Roger Aiudi in :issue:`34775`)."
msgstr ""
"Divisionshanteringen av :class:`~pathlib.PurePath` returnerar nu :data:"
"`NotImplemented` istället för att ge upphov till :exc:`TypeError` när något "
"annat än en instans av ``str`` eller :class:`~pathlib.PurePath` skickas.  "
"Detta gör det möjligt att skapa kompatibla klasser som inte ärver från de "
"nämnda typerna. (Bidrag från Roger Aiudi i :issue:`34775`)."

msgid ""
"Starting with Python 3.9.5 the :mod:`ipaddress` module no longer accepts any "
"leading zeros in IPv4 address strings. Leading zeros are ambiguous and "
"interpreted as octal notation by some libraries. For example the legacy "
"function :func:`socket.inet_aton` treats leading zeros as octal notatation. "
"glibc implementation of modern :func:`~socket.inet_pton` does not accept any "
"leading zeros. (Contributed by Christian Heimes in :issue:`36384`)."
msgstr ""
"Från och med Python 3.9.5 accepterar modulen :mod:`ipaddress` inte längre "
"några ledande nollor i IPv4-adresssträngar. Ledande nollor är tvetydiga och "
"tolkas som oktal notation av vissa bibliotek. Till exempel behandlar den "
"äldre funktionen :func:`socket.inet_aton` ledande nollor som oktalnotation. "
"glibc-implementeringen av den moderna :func:`~socket.inet_pton` accepterar "
"inte några ledande nollor. (Bidrag från Christian Heimes i :issue:`36384`)."

msgid ""
":func:`codecs.lookup` now normalizes the encoding name the same way as :func:"
"`encodings.normalize_encoding`, except that :func:`codecs.lookup` also "
"converts the name to lower case. For example, ``\"latex+latin1\"`` encoding "
"name is now normalized to ``\"latex_latin1\"``. (Contributed by Jordon Xu "
"in :issue:`37751`.)"
msgstr ""
":func:`codecs.lookup` normaliserar nu kodningsnamnet på samma sätt som :func:"
"`encodings.normalize_encoding`, förutom att :func:`codecs.lookup` även "
"konverterar namnet till gemener. Till exempel, ``\"latex+latin1\"`` "
"kodningsnamn är nu normaliserat till ``\"latex_latin1\"``. (Bidrag från "
"Jordon Xu i :issue:`37751`.)"

msgid "Changes in the C API"
msgstr "Förändringar i C API"

msgid ""
"Instances of :ref:`heap-allocated types <heap-types>` (such as those created "
"with :c:func:`PyType_FromSpec` and similar APIs) hold a reference to their "
"type object since Python 3.8. As indicated in the \"Changes in the C API\" "
"of Python 3.8, for the vast majority of cases, there should be no side "
"effect but for types that have a custom :c:member:`~PyTypeObject."
"tp_traverse` function, ensure that all custom ``tp_traverse`` functions of "
"heap-allocated types visit the object's type."
msgstr ""
"Instanser av :ref:``heap-allocated types <heap-types>`` (som de som skapats "
"med :c:func:`PyType_FromSpec` och liknande API:er) håller en referens till "
"sitt typobjekt sedan Python 3.8. Som anges i \"Changes in the C API\" i "
"Python 3.8, för de allra flesta fall, bör det inte finnas någon bieffekt men "
"för typer som har en anpassad :c:member:`~PyTypeObject.tp_traverse`-"
"funktion, se till att alla anpassade ``tp_traverse``-funktioner av heap-"
"allokerade typer besöker objektets typ."

msgid ""
"int\n"
"foo_traverse(PyObject *self, visitproc visit, void *arg)\n"
"{\n"
"// Rest of the traverse function\n"
"#if PY_VERSION_HEX >= 0x03090000\n"
"    // This was not needed before Python 3.9 (Python issue 35810 and 40217)\n"
"    Py_VISIT(Py_TYPE(self));\n"
"#endif\n"
"}"
msgstr ""
"int\n"
"foo_traverse(PyObject *self, visitproc visit, void *arg)\n"
"{\n"
"// Resten av traverseringsfunktionen\n"
"#if PY_VERSION_HEX >= 0x03090000\n"
"    // Detta behövdes inte före Python 3.9 (Python issue 35810 och 40217)\n"
"    Py_VISIT(Py_TYPE(self));\n"
"#endif\n"
"}"

msgid ""
"If your traverse function delegates to ``tp_traverse`` of its base class (or "
"another type), ensure that ``Py_TYPE(self)`` is visited only once. Note that "
"only :ref:`heap type <heap-types>` are expected to visit the type in "
"``tp_traverse``."
msgstr ""
"Om din traversefunktion delegerar till ``tp_traverse`` i sin basklass (eller "
"en annan typ), se till att ``Py_TYPE(self)`` bara besöks en gång. Observera "
"att endast :ref:``heap type <heap-types>`` förväntas besöka typen i "
"``tp_traverse``."

msgid "For example, if your ``tp_traverse`` function includes:"
msgstr "Till exempel, om din ``tp_traverse``-funktion innehåller:"

msgid "base->tp_traverse(self, visit, arg)"
msgstr "base->tp_traverse(self, besök, arg)"

msgid "then add:"
msgstr "lägg sedan till:"

msgid ""
"#if PY_VERSION_HEX >= 0x03090000\n"
"    // This was not needed before Python 3.9 (bpo-35810 and bpo-40217)\n"
"    if (base->tp_flags & Py_TPFLAGS_HEAPTYPE) {\n"
"        // a heap type's tp_traverse already visited Py_TYPE(self)\n"
"    } else {\n"
"        Py_VISIT(Py_TYPE(self));\n"
"    }\n"
"#else"
msgstr ""
"#if PY_VERSION_HEX >= 0x03090000\n"
"    // Detta behövdes inte före Python 3.9 (bpo-35810 och bpo-40217)\n"
"    if (bas->tp_flags & Py_TPFLAGS_HEAPTYPE) {\n"
"        // en heap-typs tp_traverse har redan besökt Py_TYPE(self)\n"
"    } else {\n"
"        Py_VISIT(Py_TYPE(self));\n"
"    }\n"
"#else"

msgid "(See :issue:`35810` and :issue:`40217` for more information.)"
msgstr "(Se :issue:`35810` och :issue:`40217` för mer information)"

msgid ""
"The functions ``PyEval_CallObject``, ``PyEval_CallFunction``, "
"``PyEval_CallMethod`` and ``PyEval_CallObjectWithKeywords`` are deprecated. "
"Use :c:func:`PyObject_Call` and its variants instead. (See more details in :"
"issue:`29548`.)"
msgstr ""
"Funktionerna ``PyEval_CallObject``, ``PyEval_CallFunction``, "
"``PyEval_CallMethod`` och ``PyEval_CallObjectWithKeywords`` är föråldrade. "
"Använd :c:func:`PyObject_Call` och dess varianter istället. (Se mer detaljer "
"i :issue:`29548`.)"

msgid "CPython bytecode changes"
msgstr "CPython bytecode-ändringar"

msgid ""
"The :opcode:`!LOAD_ASSERTION_ERROR` opcode was added for handling the :"
"keyword:`assert` statement. Previously, the assert statement would not work "
"correctly if the :exc:`AssertionError` exception was being shadowed. "
"(Contributed by Zackery Spytz in :issue:`34880`.)"
msgstr ""
"Opkoden :opcode:`!LOAD_ASSERTION_ERROR` lades till för hantering av :keyword:"
"`assert`-satsen. Tidigare skulle assert-satsen inte fungera korrekt om :exc:"
"`AssertionError` undantaget skuggades. (Bidrag från Zackery Spytz i :issue:"
"`34880`.)"

msgid ""
"The :opcode:`COMPARE_OP` opcode was split into four distinct instructions:"
msgstr "Opkoden :opcode:`COMPARE_OP` delades upp i fyra olika instruktioner:"

msgid "``COMPARE_OP`` for rich comparisons"
msgstr "``COMPARE_OP`` för omfattande jämförelser"

msgid "``IS_OP`` for 'is' and 'is not' tests"
msgstr "``IS_OP`` för \"är\"- och \"är inte\"-tester"

msgid "``CONTAINS_OP`` for 'in' and 'not in' tests"
msgstr "``CONTAINS_OP`` för \"in\"- och \"not in\"-tester"

msgid ""
"``JUMP_IF_NOT_EXC_MATCH`` for checking exceptions in 'try-except' statements."
msgstr ""
"``JUMP_IF_NOT_EXC_MATCH`` för kontroll av undantag i 'try-except'-satser."

msgid "(Contributed by Mark Shannon in :issue:`39156`.)"
msgstr "(Bidrag från Mark Shannon i :issue:`39156`.)"

msgid "Build Changes"
msgstr "Förändringar i byggning"

msgid ""
"Added ``--with-platlibdir`` option to the ``configure`` script: name of the "
"platform-specific library directory, stored in the new :data:`sys."
"platlibdir` attribute. See :data:`sys.platlibdir` attribute for more "
"information. (Contributed by Jan Matějek, Matěj Cepl, Charalampos Stratakis "
"and Victor Stinner in :issue:`1294959`.)"
msgstr ""
"Lagt till alternativet ``--with-platlibdir`` till ``configure``-skriptet: "
"namnet på den plattformsspecifika bibliotekskatalogen, lagrad i det nya "
"attributet :data:`sys.platlibdir`. Se attributet :data:`sys.platlibdir` för "
"mer information. (Bidrag från Jan Matějek, Matěj Cepl, Charalampos Stratakis "
"och Victor Stinner i :issue:`1294959`.)"

msgid ""
"The ``COUNT_ALLOCS`` special build macro has been removed. (Contributed by "
"Victor Stinner in :issue:`39489`.)"
msgstr ""
"Det speciella byggmakrot ``COUNT_ALLOCS`` har tagits bort. (Bidrag från "
"Victor Stinner i :issue:`39489`.)"

msgid ""
"On non-Windows platforms, the :c:func:`!setenv` and :c:func:`!unsetenv` "
"functions are now required to build Python. (Contributed by Victor Stinner "
"in :issue:`39395`.)"
msgstr ""
"På icke-Windows-plattformar krävs nu funktionerna :c:func:`!setenv` och :c:"
"func:`!unsetenv` för att bygga Python. (Bidrag från Victor Stinner i :issue:"
"`39395`.)"

msgid ""
"On non-Windows platforms, creating ``bdist_wininst`` installers is now "
"officially unsupported.  (See :issue:`10945` for more details.)"
msgstr ""
"På icke-Windows-plattformar stöds nu inte skapandet av ``bdist_wininst``-"
"installationsprogram officiellt.  (Se :issue:`10945` för mer information.)"

msgid ""
"When building Python on macOS from source, ``_tkinter`` now links with non-"
"system Tcl and Tk frameworks if they are installed in ``/Library/"
"Frameworks``, as had been the case on older releases of macOS. If a macOS "
"SDK is explicitly configured, by using :option:`--enable-universalsdk` or ``-"
"isysroot``, only the SDK itself is searched. The default behavior can still "
"be overridden with ``--with-tcltk-includes`` and ``--with-tcltk-libs``. "
"(Contributed by Ned Deily in :issue:`34956`.)"
msgstr ""
"När Python byggs på macOS från källkod, länkar ``_tkinter`` nu med Tcl- och "
"Tk-ramverk som inte finns i systemet om de är installerade i ``/Library/"
"Frameworks``, vilket har varit fallet på äldre versioner av macOS. Om ett "
"macOS SDK är explicit konfigurerat, genom att använda :option:`--enable-"
"universalsdk` eller ``-isysroot``, söks endast SDK:n själv. "
"Standardbeteendet kan fortfarande åsidosättas med ``--with-tcltk-includes`` "
"och ``--with-tcltk-libs``. (Bidrag från Ned Deily i :issue:`34956`.)"

msgid ""
"Python can now be built for Windows 10 ARM64. (Contributed by Steve Dower "
"in :issue:`33125`.)"
msgstr ""
"Python kan nu byggas för Windows 10 ARM64. (Bidrag från Steve Dower i :issue:"
"`33125`.)"

msgid ""
"Some individual tests are now skipped when ``--pgo`` is used.  The tests in "
"question increased the PGO task time significantly and likely didn't help "
"improve optimization of the final executable. This speeds up the task by a "
"factor of about 15x.  Running the full unit test suite is slow.  This change "
"may result in a slightly less optimized build since not as many code "
"branches will be executed.  If you are willing to wait for the much slower "
"build, the old behavior can be restored using ``./configure [..] "
"PROFILE_TASK=\"-m test --pgo-extended\"``.  We make no guarantees as to "
"which PGO task set produces a faster build.  Users who care should run their "
"own relevant benchmarks as results can depend on the environment, workload, "
"and compiler tool chain. (See :issue:`36044` and :issue:`37707` for more "
"details.)"
msgstr ""
"Vissa enskilda tester hoppas nu över när ``--pgo`` används.  Testerna i "
"fråga ökade PGO-uppgiftens tid avsevärt och bidrog sannolikt inte till att "
"förbättra optimeringen av den slutliga körbara filen. Detta påskyndar "
"uppgiften med en faktor på cirka 15x.  Att köra hela enhetstestsviten är "
"långsamt.  Den här ändringen kan resultera i en något mindre optimerad "
"version eftersom inte lika många kodgrenar kommer att köras.  Om du är "
"villig att vänta på den mycket långsammare byggningen kan det gamla "
"beteendet återställas med hjälp av ``./configure [...] PROFILE_TASK=\"-m "
"test --pgo-extended\"``.  Vi ger inga garantier för vilken PGO-"
"uppgiftsuppsättning som ger en snabbare konstruktion.  Användare som bryr "
"sig bör köra sina egna relevanta riktmärken eftersom resultaten kan bero på "
"miljö, arbetsbelastning och kompilatorverktygskedja. (Se :issue:`36044` och :"
"issue:`37707` för mer information)"

msgid "C API Changes"
msgstr "Ändringar i C API"

msgid ""
":pep:`573`: Added :c:func:`PyType_FromModuleAndSpec` to associate a module "
"with a class; :c:func:`PyType_GetModule` and :c:func:`PyType_GetModuleState` "
"to retrieve the module and its state; and :c:type:`PyCMethod` and :c:macro:"
"`METH_METHOD` to allow a method to access the class it was defined in. "
"(Contributed by Marcel Plch and Petr Viktorin in :issue:`38787`.)"
msgstr ""
":pep:`573`: Lagt till :c:func:`PyType_FromModuleAndSpec` för att associera "
"en modul med en klass; :c:func:`PyType_GetModule` och :c:func:"
"`PyType_GetModuleState` för att hämta modulen och dess tillstånd; och :c:"
"type:`PyCMethod` och :c:macro:`METH_METHOD` för att tillåta en metod att "
"komma åt klassen den definierades i. (Bidrag från Marcel Plch och Petr "
"Viktorin i :issue:`38787`.)"

msgid ""
"Added :c:func:`PyFrame_GetCode` function: get a frame code. Added :c:func:"
"`PyFrame_GetBack` function: get the frame next outer frame. (Contributed by "
"Victor Stinner in :issue:`40421`.)"
msgstr ""
"Lagt till :c:func:`PyFrame_GetCode` funktion: hämtar en ramkod. Lagt till :c:"
"func:`PyFrame_GetBack` funktion: hämta nästa yttre ram. (Bidrag från Victor "
"Stinner i :issue:`40421`.)"

msgid ""
"Added :c:func:`PyFrame_GetLineNumber` to the limited C API. (Contributed by "
"Victor Stinner in :issue:`40421`.)"
msgstr ""
"Lagt till :c:func:`PyFrame_GetLineNumber` till det begränsade C API:et. "
"(Bidrag från Victor Stinner i :issue:`40421`.)"

msgid ""
"Added :c:func:`PyThreadState_GetInterpreter` and :c:func:"
"`PyInterpreterState_Get` functions to get the interpreter. Added :c:func:"
"`PyThreadState_GetFrame` function to get the current frame of a Python "
"thread state. Added :c:func:`PyThreadState_GetID` function: get the unique "
"identifier of a Python thread state. (Contributed by Victor Stinner in :"
"issue:`39947`.)"
msgstr ""
"Lagt till :c:func:`PyThreadState_GetInterpreter` och :c:func:"
"`PyInterpreterState_Get` funktioner för att hämta tolken. Lagt till :c:func:"
"`PyThreadState_GetFrame` för att hämta den aktuella ramen i ett Python-"
"trådtillstånd. Lagt till :c:func:`PyThreadState_GetID` funktion: hämta den "
"unika identifieraren för ett Python-trådtillstånd. (Bidrag från Victor "
"Stinner i :issue:`39947`.)"

msgid ""
"Added a new public :c:func:`PyObject_CallNoArgs` function to the C API, "
"which calls a callable Python object without any arguments. It is the most "
"efficient way to call a callable Python object without any argument. "
"(Contributed by Victor Stinner in :issue:`37194`.)"
msgstr ""
"Lade till en ny publik :c:func:`PyObject_CallNoArgs`-funktion till C API, "
"som anropar ett anropbart Python-objekt utan några argument. Det är det mest "
"effektiva sättet att anropa ett anropbart Python-objekt utan några argument. "
"(Bidrag från Victor Stinner i :issue:`37194`.)"

msgid "Changes in the limited C API (if ``Py_LIMITED_API`` macro is defined):"
msgstr ""
"Ändringar i det begränsade C API:et (om makrot ``Py_LIMITED_API`` är "
"definierat):"

msgid ""
"Provide :c:func:`Py_EnterRecursiveCall` and :c:func:`Py_LeaveRecursiveCall` "
"as regular functions for the limited API. Previously, there were defined as "
"macros, but these macros didn't compile with the limited C API which cannot "
"access ``PyThreadState.recursion_depth`` field (the structure is opaque in "
"the limited C API)."
msgstr ""
"Tillhandahåll :c:func:`Py_EnterRecursiveCall` och :c:func:"
"`Py_LeaveRecursiveCall` som vanliga funktioner för det begränsade API:et. "
"Tidigare definierades de som makron, men dessa makron kompilerade inte med "
"det begränsade C API:et som inte kan komma åt fältet ``PyThreadState."
"recursion_depth`` (strukturen är ogenomskinlig i det begränsade C API:et)."

msgid ""
"``PyObject_INIT()`` and ``PyObject_INIT_VAR()`` become regular \"opaque\" "
"function to hide implementation details."
msgstr ""
"``PyObject_INIT()`` och ``PyObject_INIT_VAR()`` blir vanliga \"opaka\" "
"funktioner för att dölja implementeringsdetaljer."

msgid "(Contributed by Victor Stinner in :issue:`38644` and :issue:`39542`.)"
msgstr "(Bidrag från Victor Stinner i :issue:`38644` och :issue:`39542`.)"

msgid ""
"The :c:func:`PyModule_AddType` function is added to help adding a type to a "
"module. (Contributed by Donghee Na in :issue:`40024`.)"
msgstr ""
"Funktionen :c:func:`PyModule_AddType` har lagts till för att hjälpa till att "
"lägga till en typ till en modul. (Bidrag från Donghee Na i :issue:`40024`.)"

msgid ""
"Added the functions :c:func:`PyObject_GC_IsTracked` and :c:func:"
"`PyObject_GC_IsFinalized` to the public API to allow to query if Python "
"objects are being currently tracked or have been already finalized by the "
"garbage collector respectively. (Contributed by Pablo Galindo Salgado in :"
"issue:`40241`.)"
msgstr ""
"Lade till funktionerna :c:func:`PyObject_GC_IsTracked` och :c:func:"
"`PyObject_GC_IsFinalized` till det publika API:et för att göra det möjligt "
"att fråga om Python-objekt för närvarande spåras eller redan har slutförts "
"av skräpsamlaren. (Bidrag från Pablo Galindo Salgado i :issue:`40241`.)"

msgid ""
"Added :c:func:`!_PyObject_FunctionStr` to get a user-friendly string "
"representation of a function-like object. (Patch by Jeroen Demeyer in :issue:"
"`37645`.)"
msgstr ""
"Lagt till :c:func:`!_PyObject_FunctionStr` för att få en användarvänlig "
"strängrepresentation av ett funktionsliknande objekt. (Patch av Jeroen "
"Demeyer i :issue:`37645`.)"

msgid ""
"Added :c:func:`PyObject_CallOneArg` for calling an object with one "
"positional argument (Patch by Jeroen Demeyer in :issue:`37483`.)"
msgstr ""
"Lagt till :c:func:`PyObject_CallOneArg` för att anropa ett objekt med ett "
"positionellt argument (Patch by Jeroen Demeyer in :issue:`37483`.)"

msgid ""
"``PyInterpreterState.eval_frame`` (:pep:`523`) now requires a new mandatory "
"*tstate* parameter (``PyThreadState*``). (Contributed by Victor Stinner in :"
"issue:`38500`.)"
msgstr ""
"``PyInterpreterState.eval_frame`` (:pep:`523``) kräver nu en ny obligatorisk "
"*tstate* parameter (``PyThreadState*``). (Bidrag från Victor Stinner i :"
"issue:`38500`.)"

msgid ""
"Extension modules: :c:member:`~PyModuleDef.m_traverse`, :c:member:"
"`~PyModuleDef.m_clear` and :c:member:`~PyModuleDef.m_free` functions of :c:"
"type:`PyModuleDef` are no longer called if the module state was requested "
"but is not allocated yet. This is the case immediately after the module is "
"created and before the module is executed (:c:data:`Py_mod_exec` function). "
"More precisely, these functions are not called if :c:member:`~PyModuleDef."
"m_size` is greater than 0 and the module state (as returned by :c:func:"
"`PyModule_GetState`) is ``NULL``."
msgstr ""
"Tilläggsmoduler: funktionerna :c:member:`~PyModuleDef.m_traverse`, :c:member:"
"`~PyModuleDef.m_clear` och :c:member:`~PyModuleDef.m_free` i :c:type:"
"`PyModuleDef` anropas inte längre om modultillståndet begärdes men ännu inte "
"har allokerats. Detta är fallet omedelbart efter att modulen har skapats och "
"innan modulen körs (:c:data:`Py_mod_exec` function). Mer exakt anropas inte "
"dessa funktioner om :c:member:`~PyModuleDef.m_size` är större än 0 och "
"modultillståndet (som returneras av :c:func:`PyModule_GetState`) är ``NULL``."

msgid ""
"Extension modules without module state (``m_size <= 0``) are not affected."
msgstr "Tilläggsmoduler utan modulstatus (``m_size <= 0``) påverkas inte."

msgid ""
"If :c:func:`Py_AddPendingCall` is called in a subinterpreter, the function "
"is now scheduled to be called from the subinterpreter, rather than being "
"called from the main interpreter. Each subinterpreter now has its own list "
"of scheduled calls. (Contributed by Victor Stinner in :issue:`39984`.)"
msgstr ""
"Om :c:func:`Py_AddPendingCall` anropas i en undertolk, schemaläggs nu "
"funktionen för att anropas från undertolken, i stället för att anropas från "
"huvudtolken. Varje undertolk har nu sin egen lista över schemalagda anrop. "
"(Bidrag från Victor Stinner i :issue:`39984`.)"

msgid ""
"The Windows registry is no longer used to initialize :data:`sys.path` when "
"the ``-E`` option is used (if :c:member:`PyConfig.use_environment` is set to "
"``0``). This is significant when embedding Python on Windows. (Contributed "
"by Zackery Spytz in :issue:`8901`.)"
msgstr ""
"Windows-registret används inte längre för att initiera :data:`sys.path` när "
"alternativet ``-E`` används (om :c:member:`PyConfig.use_environment`` är "
"satt till ``0``). Detta är viktigt vid inbäddning av Python på Windows. "
"(Bidrag från Zackery Spytz i :issue:`8901`.)"

msgid ""
"The global variable :c:data:`PyStructSequence_UnnamedField` is now a "
"constant and refers to a constant string. (Contributed by Serhiy Storchaka "
"in :issue:`38650`.)"
msgstr ""
"Den globala variabeln :c:data:`PyStructSequence_UnnamedField` är nu en "
"konstant och refererar till en konstant sträng. (Bidrag från Serhiy "
"Storchaka i :issue:`38650`.)"

msgid ""
"The :c:type:`!PyGC_Head` structure is now opaque. It is only defined in the "
"internal C API (``pycore_gc.h``). (Contributed by Victor Stinner in :issue:"
"`40241`.)"
msgstr ""
"Strukturen :c:type:`!PyGC_Head` är nu opak. Den definieras endast i det "
"interna C API:et (``pycore_gc.h``). (Bidrag från Victor Stinner i :issue:"
"`40241`.)"

msgid ""
"The ``Py_UNICODE_COPY``, ``Py_UNICODE_FILL``, ``PyUnicode_WSTR_LENGTH``, :c:"
"func:`!PyUnicode_FromUnicode`, :c:func:`!PyUnicode_AsUnicode`, "
"``_PyUnicode_AsUnicode``, and :c:func:`!PyUnicode_AsUnicodeAndSize` are "
"marked as deprecated in C.  They have been deprecated by :pep:`393` since "
"Python 3.3. (Contributed by Inada Naoki in :issue:`36346`.)"
msgstr ""
"``Py_UNICODE_COPY``, ``Py_UNICODE_FILL``, ``PyUnicode_WSTR_LENGTH``, :c:func:"
"`!PyUnicode_FromUnicode`, :c:func:`!PyUnicode_AsUnicode`, "
"``_PyUnicode_AsUnicode`` och :c:func:`!PyUnicode_AsUnicodeAndSize` är "
"markerade som föråldrade i C. De har varit föråldrade av :pep:`393` sedan "
"Python 3.3. (Bidrag från Inada Naoki i :issue:`36346`.)"

msgid ""
"The :c:func:`Py_FatalError` function is replaced with a macro which logs "
"automatically the name of the current function, unless the "
"``Py_LIMITED_API`` macro is defined. (Contributed by Victor Stinner in :"
"issue:`39882`.)"
msgstr ""
"Funktionen :c:func:`Py_FatalError` är ersatt med ett makro som automatiskt "
"loggar namnet på den aktuella funktionen, såvida inte makrot "
"``Py_LIMITED_API`` är definierat. (Bidrag från Victor Stinner i :issue:"
"`39882`.)"

msgid ""
"The vectorcall protocol now requires that the caller passes only strings as "
"keyword names. (See :issue:`37540` for more information.)"
msgstr ""
"Protokollet vectorcall kräver nu att anroparen endast skickar strängar som "
"nyckelordsnamn. (Se :issue:`37540` för mer information.)"

msgid ""
"Implementation details of a number of macros and functions are now hidden:"
msgstr ""
"Implementeringsdetaljer för ett antal makron och funktioner är nu dolda:"

msgid ":c:func:`PyObject_IS_GC` macro was converted to a function."
msgstr ":c:func:`PyObject_IS_GC` makro konverterades till en funktion."

msgid ""
"The :c:func:`!PyObject_NEW` macro becomes an alias to the :c:macro:"
"`PyObject_New` macro, and the :c:func:`!PyObject_NEW_VAR` macro becomes an "
"alias to the :c:macro:`PyObject_NewVar` macro. They no longer access "
"directly the :c:member:`PyTypeObject.tp_basicsize` member."
msgstr ""
"Makrot :c:func:`!PyObject_NEW` blir ett alias till makrot :c:macro:"
"`PyObject_New`, och makrot :c:func:`!PyObject_NEW_VAR` blir ett alias till "
"makrot :c:macro:`PyObject_NewVar`. De har inte längre direkt åtkomst till :c:"
"member:`PyTypeObject.tp_basicsize`-medlemmen."

msgid ""
":c:func:`!PyObject_GET_WEAKREFS_LISTPTR` macro was converted to a function: "
"the macro accessed directly the :c:member:`PyTypeObject.tp_weaklistoffset` "
"member."
msgstr ""
"makrot :c:func:`!PyObject_GET_WEAKREFS_LISTPTR` konverterades till en "
"funktion: makrot använde direkt medlemmen :c:member:`PyTypeObject."
"tp_weaklistoffset`."

msgid ""
":c:func:`PyObject_CheckBuffer` macro was converted to a function: the macro "
"accessed directly the :c:member:`PyTypeObject.tp_as_buffer` member."
msgstr ""
"makrot :c:func:`PyObject_CheckBuffer` konverterades till en funktion: Makrot "
"använde direkt medlemmen :c:member:`PyTypeObject.tp_as_buffer`."

msgid ""
":c:func:`PyIndex_Check` is now always declared as an opaque function to hide "
"implementation details: removed the ``PyIndex_Check()`` macro. The macro "
"accessed directly the :c:member:`PyTypeObject.tp_as_number` member."
msgstr ""
":c:func:`PyIndex_Check` deklareras nu alltid som en opak funktion för att "
"dölja implementationsdetaljer: tog bort makrot ``PyIndex_Check()``. Makrot "
"hade direkt åtkomst till medlemmen :c:member:`PyTypeObject.tp_as_number`."

msgid "(See :issue:`40170` for more details.)"
msgstr "(Se :issue:`40170` för mer information.)"

msgid ""
"Excluded ``PyFPE_START_PROTECT()`` and ``PyFPE_END_PROTECT()`` macros of "
"``pyfpe.h`` from the limited C API. (Contributed by Victor Stinner in :issue:"
"`38835`.)"
msgstr ""
"Uteslöt ``PyFPE_START_PROTECT()`` och ``PyFPE_END_PROTECT()`` makron i "
"``pyfpe.h`` från det begränsade C API:et. (Bidrag från Victor Stinner i :"
"issue:`38835`.)"

msgid ""
"The ``tp_print`` slot of :ref:`PyTypeObject <type-structs>` has been "
"removed. It was used for printing objects to files in Python 2.7 and before. "
"Since Python 3.0, it has been ignored and unused. (Contributed by Jeroen "
"Demeyer in :issue:`36974`.)"
msgstr ""
"``tp_print`` slot i :ref:`PyTypeObject <type-structs>`` har tagits bort. Den "
"användes för att skriva ut objekt till filer i Python 2.7 och tidigare. "
"Sedan Python 3.0 har den ignorerats och är oanvänd. (Bidrag från Jeroen "
"Demeyer i :issue:`36974`.)"

msgid "Excluded the following functions from the limited C API:"
msgstr "Följande funktioner har uteslutits från det begränsade C API:et:"

msgid ""
"``PyThreadState_DeleteCurrent()`` (Contributed by Joannah Nanjekye in :issue:"
"`37878`.)"
msgstr ""
"``PyThreadState_DeleteCurrent()`` (Bidrag från Joannah Nanjekye i :issue:"
"`37878`.)"

msgid "``_Py_CheckRecursionLimit``"
msgstr "``_Py_CheckRecursionLimit``"

msgid "``_Py_NewReference()``"
msgstr "``_Py_NewReference()``"

msgid "``_Py_ForgetReference()``"
msgstr "``_Py_ForgetReference()``"

msgid "``_PyTraceMalloc_NewReference()``"
msgstr "``_PyTraceMalloc_NewReference()``"

msgid "``_Py_GetRefTotal()``"
msgstr "``_Py_GetRefTotal()``"

msgid "The trashcan mechanism which never worked in the limited C API."
msgstr "Papperskorgsmekanismen som aldrig fungerade i det begränsade C API:et."

msgid "``PyTrash_UNWIND_LEVEL``"
msgstr "``PyTrash_UNWIND_LEVEL``"

msgid "``Py_TRASHCAN_BEGIN_CONDITION``"
msgstr "``Py_TRASHCAN_BEGIN_CONDITION``"

msgid "``Py_TRASHCAN_BEGIN``"
msgstr "``Py_TRASHCAN_BEGIN``"

msgid "``Py_TRASHCAN_END``"
msgstr "``Py_TRASHCAN_END``"

msgid "``Py_TRASHCAN_SAFE_BEGIN``"
msgstr "``Py_TRASHCAN_SAFE_BEGIN``"

msgid "``Py_TRASHCAN_SAFE_END``"
msgstr "``Py_TRASHCAN_SAFE_END``"

msgid "Moved following functions and definitions to the internal C API:"
msgstr ""
"Följande funktioner och definitioner har flyttats till det interna C API:et:"

msgid "``_PyDebug_PrintTotalRefs()``"
msgstr "``_PyDebug_PrintTotalRefs()``"

msgid "``_Py_PrintReferences()``"
msgstr "``_Py_PrintReferences()``"

msgid "``_Py_PrintReferenceAddresses()``"
msgstr "``_Py_PrintReferenceAddresses()``"

msgid "``_Py_tracemalloc_config``"
msgstr "``_Py_tracemalloc_config``"

msgid "``_Py_AddToAllObjects()`` (specific to ``Py_TRACE_REFS`` build)"
msgstr "``_Py_AddToAllObjects() `` (specifik för ``Py_TRACE_REFS``-byggnad)"

msgid ""
"Removed ``_PyRuntime.getframe`` hook and removed ``_PyThreadState_GetFrame`` "
"macro which was an alias to ``_PyRuntime.getframe``. They were only exposed "
"by the internal C API. Removed also ``PyThreadFrameGetter`` type. "
"(Contributed by Victor Stinner in :issue:`39946`.)"
msgstr ""
"Borttagen ``_PyRuntime.getframe`` krok och borttaget "
"``_PyThreadState_GetFrame`` makro som var ett alias till ``_PyRuntime."
"getframe``. De var endast exponerade av det interna C API. Tog även bort "
"typen ``PyThreadFrameGetter``. (Bidrag från Victor Stinner i :issue:`39946`.)"

msgid ""
"Removed the following functions from the C API. Call :c:func:`PyGC_Collect` "
"explicitly to clear all free lists. (Contributed by Inada Naoki and Victor "
"Stinner in :issue:`37340`, :issue:`38896` and :issue:`40428`.)"
msgstr ""
"Följande funktioner har tagits bort från C API. Anropa :c:func:"
"`PyGC_Collect` explicit för att rensa alla fria listor. (Bidrag från Inada "
"Naoki och Victor Stinner i :issue:`37340`, :issue:`38896` och :issue:"
"`40428`.)"

msgid "``PyAsyncGen_ClearFreeLists()``"
msgstr "``PyAsyncGen_ClearFreeLists()``"

msgid "``PyContext_ClearFreeList()``"
msgstr "``PyContext_ClearFreeList()``"

msgid "``PyDict_ClearFreeList()``"
msgstr "``PyDict_ClearFreeList()``"

msgid "``PyFloat_ClearFreeList()``"
msgstr "``PyFloat_ClearFreeList()``"

msgid "``PyFrame_ClearFreeList()``"
msgstr "``PyFrame_ClearFreeList()``"

msgid "``PyList_ClearFreeList()``"
msgstr "``PyList_ClearFreeList()``"

msgid ""
"``PyMethod_ClearFreeList()`` and ``PyCFunction_ClearFreeList()``: the free "
"lists of bound method objects have been removed."
msgstr ""
"``PyMethod_ClearFreeList()`` och ``PyCFunction_ClearFreeList()``: de fria "
"listorna för bundna metodobjekt har tagits bort."

msgid ""
"``PySet_ClearFreeList()``: the set free list has been removed in Python 3.4."
msgstr ""
"``PySet_ClearFreeList()``: listan över fria set har tagits bort i Python 3.4."

msgid "``PyTuple_ClearFreeList()``"
msgstr "``PyTuple_ClearFreeList()``"

msgid ""
"``PyUnicode_ClearFreeList()``: the Unicode free list has been removed in "
"Python 3.3."
msgstr ""
"``PyUnicode_ClearFreeList()``: Unicodes fria lista har tagits bort i Python "
"3.3."

msgid ""
"Removed ``_PyUnicode_ClearStaticStrings()`` function. (Contributed by Victor "
"Stinner in :issue:`39465`.)"
msgstr ""
"Tog bort funktionen ``_PyUnicode_ClearStaticStrings()``. (Bidrag från Victor "
"Stinner i :issue:`39465`.)"

msgid ""
"Removed ``Py_UNICODE_MATCH``. It has been deprecated by :pep:`393`, and "
"broken since Python 3.3. The :c:func:`PyUnicode_Tailmatch` function can be "
"used instead. (Contributed by Inada Naoki in :issue:`36346`.)"
msgstr ""
"Tog bort ``Py_UNICODE_MATCH``. Den har föråldrats av :pep:`393` och är "
"trasig sedan Python 3.3. Funktionen :c:func:`PyUnicode_Tailmatch` kan "
"användas istället. (Bidrag från Inada Naoki i :issue:`36346`.)"

msgid ""
"Cleaned header files of interfaces defined but with no implementation. The "
"public API symbols being removed are: "
"``_PyBytes_InsertThousandsGroupingLocale``, "
"``_PyBytes_InsertThousandsGrouping``, ``_Py_InitializeFromArgs``, "
"``_Py_InitializeFromWideArgs``, ``_PyFloat_Repr``, ``_PyFloat_Digits``, "
"``_PyFloat_DigitsInit``, ``PyFrame_ExtendStack``, ``_PyAIterWrapper_Type``, "
"``PyNullImporter_Type``, ``PyCmpWrapper_Type``, ``PySortWrapper_Type``, "
"``PyNoArgsFunction``. (Contributed by Pablo Galindo Salgado in :issue:"
"`39372`.)"
msgstr ""
"Rensade header-filer från gränssnitt som definierats men som inte har någon "
"implementation. De offentliga API-symbolerna som tas bort är: "
"``_PyBytes_InsertThousandsGroupingLocale``, "
"``_PyBytes_InsertThousandsGrouping``, ``_Py_InitializeFromArgs``, "
"``_Py_InitializeFromWideArgs``, ``_PyFloat_Repr``, ``_PyFloat_Digits``, "
"``_PyFloat_DigitsInit``, ``PyFrame_ExtendStack``, ``_PyAIterWrapper_Type``, "
"``PyNullImporter_Type``, ``PyCmpWrapper_Type``, ``PySortWrapper_Type``, "
"``PyNoArgsFunction``. (Bidrag från Pablo Galindo Salgado i :issue:`39372`.)"

msgid "Notable changes in Python 3.9.1"
msgstr "Viktiga ändringar i Python 3.9.1"

msgid ""
"The behavior of :class:`typing.Literal` was changed to conform with :pep:"
"`586` and to match the behavior of static type checkers specified in the PEP."
msgstr ""
"Beteendet för :class:`typing.Literal` ändrades för att överensstämma med :"
"pep:`586` och för att matcha beteendet hos statiska typkontrollanter som "
"anges i PEP."

msgid "``Literal`` now de-duplicates parameters."
msgstr "``Literal`` avduplicerar nu parametrar."

msgid ""
"Equality comparisons between ``Literal`` objects are now order independent."
msgstr "Jämlikhetsjämförelser mellan ``Literal``-objekt är nu orderoberoende."

msgid ""
"``Literal`` comparisons now respect types.  For example, ``Literal[0] == "
"Literal[False]`` previously evaluated to ``True``.  It is now ``False``.  To "
"support this change, the internally used type cache now supports "
"differentiating types."
msgstr ""
"jämförelser av ``Literal`` respekterar nu typer.  Till exempel, ``Literal[0] "
"== Literal[False]`` utvärderades tidigare till ``True``.  Nu är det "
"``False``.  För att stödja denna förändring stöder den internt använda "
"typcachen nu differentierande typer."

msgid ""
"``Literal`` objects will now raise a :exc:`TypeError` exception during "
"equality comparisons if any of their parameters are not :term:`hashable`. "
"Note that declaring ``Literal`` with mutable parameters will not throw an "
"error::"
msgstr ""
"``Literal`` objekt kommer nu att ge upphov till ett :exc:`TypeError` "
"undantag under jämlikhetsjämförelser om någon av deras parametrar inte är :"
"term:`hashable`. Observera att deklaration av ``Literal`` med mutabla "
"parametrar inte kommer att ge upphov till ett fel::"

msgid ""
">>> from typing import Literal\n"
">>> Literal[{0}]\n"
">>> Literal[{0}] == Literal[{False}]\n"
"Traceback (most recent call last):\n"
"  File \"<stdin>\", line 1, in <module>\n"
"TypeError: unhashable type: 'set'"
msgstr ""
"&gt;&gt;&gt; från typing import Literal\n"
"&gt;&gt;&gt; Literal[{0}]\n"
"&gt;&gt;&gt; Litteral[{0}] == Litteral[{False}]\n"
"Traceback (senaste anropet senast):\n"
"  Fil \"<stdin>\", rad 1, i <module>\n"
"TypeError: ohashbar typ: 'set'"

msgid "(Contributed by Yurii Karabas in :issue:`42345`.)"
msgstr "(Bidrag från Yurii Karabas i :issue:`42345`.)"

msgid "macOS 11.0 (Big Sur) and Apple Silicon Mac support"
msgstr "macOS 11.0 (Big Sur) och stöd för Apple Silicon Mac"

msgid ""
"As of 3.9.1, Python now fully supports building and running on macOS 11.0 "
"(Big Sur) and on Apple Silicon Macs (based on the ``ARM64`` architecture). A "
"new universal build variant, ``universal2``, is now available to natively "
"support both ``ARM64`` and ``Intel 64`` in one set of executables. Binaries "
"can also now be built on current versions of macOS to be deployed on a range "
"of older macOS versions (tested to 10.9) while making some newer OS "
"functions and options conditionally available based on the operating system "
"version in use at runtime (\"weaklinking\")."
msgstr ""
"Från och med 3.9.1 har Python nu fullt stöd för att bygga och köra på macOS "
"11.0 (Big Sur) och på Apple Silicon Macs (baserade på ``ARM64``-"
"arkitekturen). En ny universell byggvariant, ``universal2``, finns nu "
"tillgänglig för inbyggt stöd för både ``ARM64`` och ``Intel 64`` i en "
"uppsättning körbara filer. Binaries kan nu också byggas på aktuella "
"versioner av macOS för att distribueras på en rad äldre macOS-versioner "
"(testade till 10.9) samtidigt som vissa nyare OS-funktioner och alternativ "
"görs villkorligt tillgängliga baserat på den operativsystemversion som "
"används vid körning (\"weaklinking\")."

msgid "(Contributed by Ronald Oussoren and Lawrence D'Anna in :issue:`41100`.)"
msgstr "(Bidrag från Ronald Oussoren och Lawrence D'Anna i :issue:`41100`.)"

msgid "Notable changes in Python 3.9.2"
msgstr "Viktiga ändringar i Python 3.9.2"

msgid "collections.abc"
msgstr "samlingar.abc"

msgid ""
":class:`collections.abc.Callable` generic now flattens type parameters, "
"similar to what :data:`typing.Callable` currently does.  This means that "
"``collections.abc.Callable[[int, str], str]`` will have ``__args__`` of "
"``(int, str, str)``; previously this was ``([int, str], str)``.  To allow "
"this change, :class:`types.GenericAlias` can now be subclassed, and a "
"subclass will be returned when subscripting the :class:`collections.abc."
"Callable` type. Code which accesses the arguments via :func:`typing."
"get_args` or ``__args__`` need to account for this change.  A :exc:"
"`DeprecationWarning` may be emitted for invalid forms of parameterizing :"
"class:`collections.abc.Callable` which may have passed silently in Python "
"3.9.1.  This :exc:`DeprecationWarning` will become a :exc:`TypeError` in "
"Python 3.10. (Contributed by Ken Jin in :issue:`42195`.)"
msgstr ""
":class:`collections.abc.Callable` generic plattar nu till typ-parametrar, "
"liknande vad :data:`typing.Callable` gör för närvarande.  Detta innebär att "
"``collections.abc.Callable[[int, str], str]`` kommer att ha ``__args__`` av "
"``(int, str, str)``; tidigare var detta ``([int, str], str)``.  För att "
"möjliggöra denna ändring kan :class:`types.GenericAlias` nu underklassas, "
"och en underklass kommer att returneras vid subskription av typen :class:"
"`collections.abc.Callable`. Kod som kommer åt argumenten via :func:`typing."
"get_args` eller ``__args__`` måste ta hänsyn till denna ändring.  En :exc:"
"`DeprecationWarning` kan komma att skickas ut för ogiltiga former av "
"parametrisering av :class:`collections.abc.Callable` som kan ha passerat "
"tyst i Python 3.9.1.  Denna :exc:`DeprecationWarning` kommer att bli en :exc:"
"`TypeError` i Python 3.10. (Bidrag från Ken Jin i :issue:`42195`.)"

msgid "urllib.parse"
msgstr "urllib.parse"

msgid ""
"Earlier Python versions allowed using both ``;`` and ``&`` as query "
"parameter separators in :func:`urllib.parse.parse_qs` and :func:`urllib."
"parse.parse_qsl`.  Due to security concerns, and to conform with newer W3C "
"recommendations, this has been changed to allow only a single separator key, "
"with ``&`` as the default.  This change also affects :func:`!cgi.parse` and :"
"func:`!cgi.parse_multipart` as they use the affected functions internally. "
"For more details, please see their respective documentation. (Contributed by "
"Adam Goldschmidt, Senthil Kumaran and Ken Jin in :issue:`42967`.)"
msgstr ""
"Tidigare Python-versioner tillät användning av både ``;`` och ``&`` som "
"separatorer för frågeparametrar i :func:`urllib.parse.parse_qs` och :func:"
"`urllib.parse.parse_qsl`.  På grund av säkerhetsproblem och för att "
"överensstämma med nyare W3C-rekommendationer har detta ändrats så att endast "
"en enda separatornyckel tillåts, med ``&`` som standard.  Denna ändring "
"påverkar även :func:`!cgi.parse` och :func:`!cgi.parse_multipart` eftersom "
"de använder de berörda funktionerna internt. För mer information, vänligen "
"se deras respektive dokumentation. (Bidrag från Adam Goldschmidt, Senthil "
"Kumaran och Ken Jin i :issue:`42967`.)"

msgid "Notable changes in Python 3.9.3"
msgstr "Viktiga ändringar i Python 3.9.3"

msgid ""
"A security fix alters the :class:`ftplib.FTP` behavior to not trust the IPv4 "
"address sent from the remote server when setting up a passive data channel.  "
"We reuse the ftp server IP address instead.  For unusual code requiring the "
"old behavior, set a ``trust_server_pasv_ipv4_address`` attribute on your FTP "
"instance to ``True``.  (See :gh:`87451`)"
msgstr ""
"En säkerhetsfix ändrar :class:`ftplib.FTP`-beteendet så att det inte litar "
"på den IPv4-adress som skickas från fjärrservern när en passiv datakanal "
"sätts upp.  Vi återanvänder istället ftp-serverns IP-adress.  För ovanlig "
"kod som kräver det gamla beteendet, ställ in attributet "
"``trust_server_pasv_ipv4_address`` på din FTP-instans till ``True``.  (Se :"
"gh:`87451`)"

msgid "Notable changes in Python 3.9.5"
msgstr "Viktiga ändringar i Python 3.9.5"

msgid ""
"The presence of newline or tab characters in parts of a URL allows for some "
"forms of attacks. Following the WHATWG specification that updates :rfc:"
"`3986`, ASCII newline ``\\n``, ``\\r`` and tab ``\\t`` characters are "
"stripped from the URL by the parser in :mod:`urllib.parse` preventing such "
"attacks. The removal characters are controlled by a new module level "
"variable ``urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE``. (See :gh:`88048`)"
msgstr ""
"Förekomsten av newline- eller tabb-tecken i delar av en URL möjliggör vissa "
"former av attacker. I enlighet med WHATWG-specifikationen som uppdaterar :"
"rfc:`3986`, tas ASCII newline ``n``, ``\\r`` och tabb ``t``-tecken bort från "
"URL:en av parsern i :mod:`urllib.parse` för att förhindra sådana attacker. "
"De borttagna tecknen styrs av en ny variabel på modulnivå, ``urllib.parse."
"_UNSAFE_URL_BYTES_TO_REMOVE``. (Se :gh:`88048`)"

msgid "Notable security feature in 3.9.14"
msgstr "Anmärkningsvärd säkerhetsfunktion i 3.9.14"

msgid ""
"Converting between :class:`int` and :class:`str` in bases other than 2 "
"(binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal) "
"now raises a :exc:`ValueError` if the number of digits in string form is "
"above a limit to avoid potential denial of service attacks due to the "
"algorithmic complexity. This is a mitigation for :cve:`2020-10735`. This "
"limit can be configured or disabled by environment variable, command line "
"flag, or :mod:`sys` APIs. See the :ref:`integer string conversion length "
"limitation <int_max_str_digits>` documentation.  The default limit is 4300 "
"digits in string form."
msgstr ""
"Konvertering mellan :class:`int` och :class:`str` i andra baser än 2 "
"(binär), 4, 8 (oktal), 16 (hexadecimal) eller 32 såsom bas 10 (decimal) ger "
"nu upphov till ett :exc:`ValueError` om antalet siffror i strängform är över "
"en gräns för att undvika potentiella överbelastningsattacker på grund av den "
"algoritmiska komplexiteten. Detta är en begränsning av :cve:`2020-10735`. "
"Den här gränsen kan konfigureras eller inaktiveras med hjälp av en "
"miljövariabel, kommandoradsflagga eller :mod:`sys` API:er. Se "
"dokumentationen :ref:`Längdsbegränsning för konvertering av heltalssträngar "
"<int_max_str_digits>`.  Standardgränsen är 4300 siffror i strängform."

msgid "Notable changes in 3.9.17"
msgstr "Viktiga ändringar i 3.9.17"

msgid "tarfile"
msgstr "tarfil"

msgid ""
"The extraction methods in :mod:`tarfile`, and :func:`shutil.unpack_archive`, "
"have a new a *filter* argument that allows limiting tar features than may be "
"surprising or dangerous, such as creating files outside the destination "
"directory. See :ref:`tarfile-extraction-filter` for details. In Python 3.12, "
"use without the *filter* argument will show a :exc:`DeprecationWarning`. In "
"Python 3.14, the default will switch to ``'data'``. (Contributed by Petr "
"Viktorin in :pep:`706`.)"
msgstr ""
"Extraktionsmetoderna i :mod:`tarfile` och :func:`shutil.unpack_archive` har "
"ett nytt *filter*-argument som gör det möjligt att begränsa tarfunktioner "
"som kan vara överraskande eller farliga, t.ex. att skapa filer utanför "
"destinationskatalogen. Se :ref:`tarfile-extraction-filter` för detaljer. I "
"Python 3.12 kommer användning utan *filter*-argumentet att visa en :exc:"
"`DeprecationWarning`. I Python 3.14 kommer standardinställningen att ändras "
"till ``'data'``. (Bidrag från Petr Viktorin i :pep:`706`.)"
