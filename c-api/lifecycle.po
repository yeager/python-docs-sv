# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 20:38+0000\n"
"PO-Revision-Date: 2025-08-02 17:33+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "Object Life Cycle"
msgstr "Objektets livscykel"

msgid ""
"This section explains how a type's slots relate to each other throughout the "
"life of an object.  It is not intended to be a complete canonical reference "
"for the slots; instead, refer to the slot-specific documentation in :ref:"
"`type-structs` for details about a particular slot."
msgstr ""
"I det här avsnittet förklaras hur en typs slots förhåller sig till varandra "
"under ett objekts hela livstid.  Det är inte avsett att vara en fullständig "
"kanonisk referens för slotsen; hänvisa istället till slotspecifik "
"dokumentation i :ref:`type-structs` för detaljer om en viss slot."

msgid "Life Events"
msgstr "Livshändelser"

msgid ""
"The figure below illustrates the order of events that can occur throughout "
"an object's life.  An arrow from *A* to *B* indicates that event *B* can "
"occur after event *A* has occurred, with the arrow's label indicating the "
"condition that must be true for *B* to occur after *A*."
msgstr ""
"Figuren nedan illustrerar ordningen på de händelser som kan inträffa under "
"ett objekts liv.  En pil från *A* till *B* anger att händelse *B* kan "
"inträffa efter att händelse *A* har inträffat, och pilens etikett anger det "
"villkor som måste vara sant för att *B* ska inträffa efter *A*."

msgid "Diagram showing events in an object's life.  Explained in detail below."
msgstr ""
"Diagram som visar händelser i ett objekts liv.  Förklaras i detalj nedan."

msgid "Explanation:"
msgstr "Förklaring:"

msgid "When a new object is constructed by calling its type:"
msgstr "När ett nytt objekt konstrueras genom att anropa dess typ:"

msgid ":c:member:`~PyTypeObject.tp_new` is called to create a new object."
msgstr ""
":c:member:`~PyTypeObject.tp_new` anropas för att skapa ett nytt objekt."

msgid ""
":c:member:`~PyTypeObject.tp_alloc` is directly called by :c:member:"
"`~PyTypeObject.tp_new` to allocate the memory for the new object."
msgstr ""
":c:member:`~PyTypeObject.tp_alloc` anropas direkt av :c:member:"
"`~PyTypeObject.tp_new` för att allokera minne till det nya objektet."

msgid ""
":c:member:`~PyTypeObject.tp_init` initializes the newly created object. :c:"
"member:`!tp_init` can be called again to re-initialize an object, if "
"desired. The :c:member:`!tp_init` call can also be skipped entirely, for "
"example by Python code calling :py:meth:`~object.__new__`."
msgstr ""
":c:member:`~PyTypeObject.tp_init` initierar det nyskapade objektet. :c:"
"member:`!tp_init` kan anropas igen för att återinitialisera ett objekt, om "
"så önskas. Anropet av :c:member:`!tp_init` kan också hoppas över helt, till "
"exempel genom att Python-kod anropar :py:meth:`~object.__new__`."

msgid "After :c:member:`!tp_init` completes, the object is ready to use."
msgstr "När :c:member:`!tp_init` har slutförts är objektet klart att användas."

msgid "Some time after the last reference to an object is removed:"
msgstr "En tid efter att den sista referensen till ett objekt har tagits bort:"

msgid ""
"If an object is not marked as *finalized*, it might be finalized by marking "
"it as *finalized* and calling its :c:member:`~PyTypeObject.tp_finalize` "
"function.  Python does *not* finalize an object when the last reference to "
"it is deleted; use :c:func:`PyObject_CallFinalizerFromDealloc` to ensure "
"that :c:member:`~PyTypeObject.tp_finalize` is always called."
msgstr ""
"Om ett objekt inte är markerat som *finalized* kan det finaliseras genom att "
"markera det som *finalized* och anropa dess :c:member:`~PyTypeObject."
"tp_finalize`-funktion.  Python finaliserar *inte* ett objekt när den sista "
"referensen till det tas bort; använd :c:func:"
"`PyObject_CallFinalizerFromDealloc` för att säkerställa att :c:member:"
"`~PyTypeObject.tp_finalize` alltid anropas."

msgid ""
"If the object is marked as finalized, :c:member:`~PyTypeObject.tp_clear` "
"might be called by the garbage collector to clear references held by the "
"object.  It is *not* called when the object's reference count reaches zero."
msgstr ""
"Om objektet är markerat som finalized kan :c:member:`~PyTypeObject.tp_clear` "
"anropas av garbage collector för att rensa referenser som objektet har.  Den "
"anropas *inte* när objektets referensantal når noll."

msgid ""
":c:member:`~PyTypeObject.tp_dealloc` is called to destroy the object. To "
"avoid code duplication, :c:member:`~PyTypeObject.tp_dealloc` typically calls "
"into :c:member:`~PyTypeObject.tp_clear` to free up the object's references."
msgstr ""
":c:member:`~PyTypeObject.tp_dealloc` anropas för att förstöra objektet. För "
"att undvika dubbelkodning anropar :c:member:`~PyTypeObject.tp_dealloc` "
"vanligtvis :c:member:`~PyTypeObject.tp_clear` för att frigöra objektets "
"referenser."

msgid ""
"When :c:member:`~PyTypeObject.tp_dealloc` finishes object destruction, it "
"directly calls :c:member:`~PyTypeObject.tp_free` (usually set to :c:func:"
"`PyObject_Free` or :c:func:`PyObject_GC_Del` automatically as appropriate "
"for the type) to deallocate the memory."
msgstr ""
"När :c:member:`~PyTypeObject.tp_dealloc` avslutar objektdestruktionen "
"anropar den direkt :c:member:`~PyTypeObject.tp_free` (vanligtvis inställd "
"på :c:func:`PyObject_Free` eller :c:func:`PyObject_GC_Del` automatiskt "
"beroende på vad som är lämpligt för typen) för att avallokera minnet."

msgid ""
"The :c:member:`~PyTypeObject.tp_finalize` function is permitted to add a "
"reference to the object if desired.  If it does, the object is "
"*resurrected*, preventing its pending destruction.  (Only :c:member:`!"
"tp_finalize` is allowed to resurrect an object; :c:member:`~PyTypeObject."
"tp_clear` and :c:member:`~PyTypeObject.tp_dealloc` cannot without calling "
"into :c:member:`!tp_finalize`.)  Resurrecting an object may or may not cause "
"the object's *finalized* mark to be removed.  Currently, Python does not "
"remove the *finalized* mark from a resurrected object if it supports garbage "
"collection (i.e., the :c:macro:`Py_TPFLAGS_HAVE_GC` flag is set) but does "
"remove the mark if the object does not support garbage collection; either or "
"both of these behaviors may change in the future."
msgstr ""
"Funktionen :c:member:`~PyTypeObject.tp_finalize` får lägga till en referens "
"till objektet om så önskas.  Om den gör det *återupplivas* objektet, vilket "
"förhindrar att det förstörs i väntan på detta.  (Endast :c:member:`!"
"tp_finalize` får återuppliva ett objekt; :c:member:`~PyTypeObject.tp_clear` "
"och :c:member:`~PyTypeObject.tp_dealloc` kan inte göra det utan att anropa :"
"c:member:`!tp_finalize`)  Att återuppliva ett objekt kan eller kan inte leda "
"till att objektets *finalized*-markering tas bort.  För närvarande tar "
"Python inte bort *finalized*-markeringen från ett återuppväckt objekt om det "
"stöder garbage collection (dvs. flaggan :c:macro:`Py_TPFLAGS_HAVE_GC` är "
"inställd) men tar bort markeringen om objektet inte stöder garbage "
"collection; endera eller båda av dessa beteenden kan ändras i framtiden."

msgid ""
":c:member:`~PyTypeObject.tp_dealloc` can optionally call :c:member:"
"`~PyTypeObject.tp_finalize` via :c:func:`PyObject_CallFinalizerFromDealloc` "
"if it wishes to reuse that code to help with object destruction.  This is "
"recommended because it guarantees that :c:member:`!tp_finalize` is always "
"called before destruction.  See the :c:member:`~PyTypeObject.tp_dealloc` "
"documentation for example code."
msgstr ""
":c:member:`~PyTypeObject.tp_dealloc` kan valfritt anropa :c:member:"
"`~PyTypeObject.tp_finalize` via :c:func:`PyObject_CallFinalizerFromDealloc` "
"om den vill återanvända den koden för att hjälpa till med "
"objektdestruktion.  Detta rekommenderas eftersom det garanterar att :c:"
"member:`!tp_finalize` alltid anropas före destruktion.  Se dokumentationen "
"för :c:member:`~PyTypeObject.tp_dealloc` för exempelkod."

msgid ""
"If the object is a member of a :term:`cyclic isolate` and either :c:member:"
"`~PyTypeObject.tp_clear` fails to break the reference cycle or the cyclic "
"isolate is not detected (perhaps :func:`gc.disable` was called, or the :c:"
"macro:`Py_TPFLAGS_HAVE_GC` flag was erroneously omitted in one of the "
"involved types), the objects remain indefinitely uncollectable (they "
"\"leak\").  See :data:`gc.garbage`."
msgstr ""
"Om objektet ingår i ett :term:`cykliskt isolat` och antingen :c:member:"
"`~PyTypeObject.tp_clear` misslyckas med att bryta referenscykeln eller så "
"upptäcks inte det cykliska isolatet (kanske anropades :func:`gc.disable`, "
"eller så utelämnades flaggan :c:macro:`Py_TPFLAGS_HAVE_GC` felaktigt i en av "
"de inblandade typerna), förblir objekten på obestämd tid omöjliga att samla "
"in (de \"läcker\").  Se :data:`gc.garbage`."

msgid ""
"If the object is marked as supporting garbage collection (the :c:macro:"
"`Py_TPFLAGS_HAVE_GC` flag is set in :c:member:`~PyTypeObject.tp_flags`), the "
"following events are also possible:"
msgstr ""
"Om objektet är markerat som stödjande garbage collection (flaggan :c:macro:"
"`Py_TPFLAGS_HAVE_GC` är inställd i :c:member:`~PyTypeObject.tp_flags`), är "
"följande händelser också möjliga:"

msgid ""
"The garbage collector occasionally calls :c:member:`~PyTypeObject."
"tp_traverse` to identify :term:`cyclic isolates <cyclic isolate>`."
msgstr ""
"Garbage collector anropar ibland :c:member:`~PyTypeObject.tp_traverse` för "
"att identifiera :term:``cykliska isolat <cyclic isolate>`."

msgid ""
"When the garbage collector discovers a :term:`cyclic isolate`, it finalizes "
"one of the objects in the group by marking it as *finalized* and calling "
"its :c:member:`~PyTypeObject.tp_finalize` function, if it has one. This "
"repeats until the cyclic isolate doesn't exist or all of the objects have "
"been finalized."
msgstr ""
"När skräpsamlaren upptäcker en :term:`cyklisk isolat`, finaliserar den ett "
"av objekten i gruppen genom att markera det som *finaliserat* och anropa "
"dess :c:member:`~PyTypeObject.tp_finalize`-funktion, om den har en sådan. "
"Detta upprepas tills det cykliska isolatet inte existerar eller tills alla "
"objekt har slutförts."

msgid ""
":c:member:`~PyTypeObject.tp_finalize` is permitted to resurrect the object "
"by adding a reference from outside the :term:`cyclic isolate`.  The new "
"reference causes the group of objects to no longer form a cyclic isolate "
"(the reference cycle may still exist, but if it does the objects are no "
"longer isolated)."
msgstr ""
":c:member:`~PyTypeObject.tp_finalize` får återuppliva objektet genom att "
"lägga till en referens från utanför :term:`cykliskt isolat`.  Den nya "
"referensen gör att gruppen av objekt inte längre utgör ett cykliskt isolat "
"(referenscykeln kan fortfarande existera, men om den gör det är objekten "
"inte längre isolerade)."

msgid ""
"When the garbage collector discovers a :term:`cyclic isolate` and all of the "
"objects in the group have already been marked as *finalized*, the garbage "
"collector clears one or more of the uncleared objects in the group (possibly "
"concurrently) by calling each's :c:member:`~PyTypeObject.tp_clear` "
"function.  This repeats as long as the cyclic isolate still exists and not "
"all of the objects have been cleared."
msgstr ""
"När skräpsamlaren upptäcker en :term:`cyklisk isolat` och alla objekt i "
"gruppen redan har markerats som *finaliserade*, rensar skräpsamlaren ett "
"eller flera av de orensade objekten i gruppen (eventuellt samtidigt) genom "
"att anropa varje :c:member:`~PyTypeObject.tp_clear`-funktion.  Detta "
"upprepas så länge som det cykliska isolatet fortfarande existerar och inte "
"alla objekt har rensats."

msgid "Cyclic Isolate Destruction"
msgstr "Destruktion av cykliska isolat"

msgid ""
"Listed below are the stages of life of a hypothetical :term:`cyclic isolate` "
"that continues to exist after each member object is finalized or cleared.  "
"It is a memory leak if a cyclic isolate progresses through all of these "
"stages; it should vanish once all objects are cleared, if not sooner.  A "
"cyclic isolate can vanish either because the reference cycle is broken or "
"because the objects are no longer isolated due to finalizer resurrection "
"(see :c:member:`~PyTypeObject.tp_finalize`)."
msgstr ""
"Nedan listas livsstadierna för en hypotetisk :term:`cyklisk isolat` som "
"fortsätter att existera efter att varje medlemsobjekt har slutförts eller "
"rensats.  Det är en minnesläcka om en cyklisk isolat går igenom alla dessa "
"stadier; den bör försvinna när alla objekt har rensats, om inte förr.  En "
"cyklisk isolat kan försvinna antingen för att referenscykeln bryts eller för "
"att objekten inte längre är isolerade på grund av finalizer-uppståndelse "
"(se :c:member:`~PyTypeObject.tp_finalize`)."

msgid ""
"**Reachable** (not yet a cyclic isolate): All objects are in their normal, "
"reachable state.  A reference cycle could exist, but an external reference "
"means the objects are not yet isolated."
msgstr ""
"**Reachable** (ännu inte en cyklisk isolat): Alla objekt befinner sig i sitt "
"normala, nåbara tillstånd.  En referenscykel kan existera, men en extern "
"referens innebär att objekten ännu inte är isolerade."

msgid ""
"**Unreachable but consistent:** The final reference from outside the cyclic "
"group of objects has been removed, causing the objects to become isolated "
"(thus a cyclic isolate is born).  None of the group's objects have been "
"finalized or cleared yet.  The cyclic isolate remains at this stage until "
"some future run of the garbage collector (not necessarily the next run "
"because the next run might not scan every object)."
msgstr ""
"**Unreachable but consistent:** Den slutliga referensen från utanför den "
"cykliska gruppen av objekt har tagits bort, vilket gör att objekten blir "
"isolerade (en cyklisk isolat har alltså uppstått).  Inget av gruppens objekt "
"har slutförts eller klargjorts ännu.  Det cykliska isolatet förblir i detta "
"skede tills någon framtida körning av skräpsamlaren (inte nödvändigtvis "
"nästa körning eftersom nästa körning kanske inte skannar alla objekt)."

msgid ""
"**Mix of finalized and not finalized:** Objects in a cyclic isolate are "
"finalized one at a time, which means that there is a period of time when the "
"cyclic isolate is composed of a mix of finalized and non-finalized objects. "
"Finalization order is unspecified, so it can appear random.  A finalized "
"object must behave in a sane manner when non-finalized objects interact with "
"it, and a non-finalized object must be able to tolerate the finalization of "
"an arbitrary subset of its referents."
msgstr ""
"**Mix av färdigställda och icke färdigställda:** Objekten i en cyklisk "
"isolat färdigställs ett i taget, vilket innebär att det finns en tidsperiod "
"då den cykliska isolaten består av en mix av färdigställda och icke "
"färdigställda objekt. Slutförandets ordning är ospecificerad, så det kan "
"verka slumpmässigt.  Ett finaliserat objekt måste bete sig på ett förnuftigt "
"sätt när icke-finaliserade objekt interagerar med det, och ett icke-"
"finaliserat objekt måste kunna tolerera att en godtycklig delmängd av dess "
"referenter finaliseras."

msgid ""
"**All finalized:** All objects in a cyclic isolate are finalized before any "
"of them are cleared."
msgstr ""
"**All finalized:** Alla objekt i en cyklisk isolat är finalized innan någon "
"av dem rensas."

msgid ""
"**Mix of finalized and cleared:** The objects can be cleared serially or "
"concurrently (but with the :term:`GIL` held); either way, some will finish "
"before others.  A finalized object must be able to tolerate the clearing of "
"a subset of its referents.  :pep:`442` calls this stage \"cyclic trash\"."
msgstr ""
"**Mix av finalized och cleared:** Objekten kan rensas seriellt eller "
"samtidigt (men med :term:`GIL` kvar); oavsett vilket kommer vissa att "
"avslutas före andra.  Ett färdigställt objekt måste kunna tolerera att en "
"delmängd av dess referenter rensas. :pep:`442` kallar detta steg för "
"\"cykliskt skräp\"."

msgid ""
"**Leaked:** If a cyclic isolate still exists after all objects in the group "
"have been finalized and cleared, then the objects remain indefinitely "
"uncollectable (see :data:`gc.garbage`).  It is a bug if a cyclic isolate "
"reaches this stage---it means the :c:member:`~PyTypeObject.tp_clear` methods "
"of the participating objects have failed to break the reference cycle as "
"required."
msgstr ""
"**Leaked:** Om en cyklisk isolat fortfarande existerar efter att alla objekt "
"i gruppen har slutförts och rensats, förblir objekten på obestämd tid "
"omöjliga att samla in (se :data:`gc.garbage`).  Det är ett fel om en cyklisk "
"isolat når detta stadium - det betyder att :c:member:`~PyTypeObject."
"tp_clear`-metoderna för de deltagande objekten inte har lyckats bryta "
"referenscykeln som krävs."

msgid ""
"If :c:member:`~PyTypeObject.tp_clear` did not exist, then Python would have "
"no way to safely break a reference cycle.  Simply destroying an object in a "
"cyclic isolate would result in a dangling pointer, triggering undefined "
"behavior when an object referencing the destroyed object is itself "
"destroyed.  The clearing step makes object destruction a two-phase process: "
"first :c:member:`~PyTypeObject.tp_clear` is called to partially destroy the "
"objects enough to detangle them from each other, then :c:member:"
"`~PyTypeObject.tp_dealloc` is called to complete the destruction."
msgstr ""
"Om :c:member:`~PyTypeObject.tp_clear` inte existerade, skulle Python inte ha "
"något sätt att säkert bryta en referenscykel.  Att helt enkelt förstöra ett "
"objekt i en cyklisk isolat skulle resultera i en dinglande pekare, vilket "
"utlöser odefinierat beteende när ett objekt som refererar till det förstörda "
"objektet själv förstörs.  Rensningssteget gör objektförstöringen till en "
"tvåfasprocess: först anropas :c:member:`~PyTypeObject.tp_clear` för att "
"delvis förstöra objekten tillräckligt för att skilja dem från varandra, "
"sedan anropas :c:member:`~PyTypeObject.tp_dealloc` för att slutföra "
"förstöringen."

msgid ""
"Unlike clearing, finalization is not a phase of destruction.  A finalized "
"object must still behave properly by continuing to fulfill its design "
"contracts.  An object's finalizer is allowed to execute arbitrary Python "
"code, and is even allowed to prevent the impending destruction by adding a "
"reference. The finalizer is only related to destruction by call order---if "
"it runs, it runs before destruction, which starts with :c:member:"
"`~PyTypeObject.tp_clear` (if called) and concludes with :c:member:"
"`~PyTypeObject.tp_dealloc`."
msgstr ""
"Till skillnad från clearing är finalization inte en fas av förstörelse.  Ett "
"finalized-objekt måste fortfarande uppföra sig korrekt genom att fortsätta "
"uppfylla sina designkontrakt.  Ett objekts finalizer får exekvera godtycklig "
"Python-kod och får till och med förhindra den förestående destruktionen "
"genom att lägga till en referens. Finalizer är endast relaterad till "
"destruktion genom anropsordning---om den körs, körs den före destruktion, "
"som börjar med :c:member:`~PyTypeObject.tp_clear` (om den anropas) och "
"avslutas med :c:member:`~PyTypeObject.tp_dealloc`."

msgid ""
"The finalization step is not necessary to safely reclaim the objects in a "
"cyclic isolate, but its existence makes it easier to design types that "
"behave in a sane manner when objects are cleared.  Clearing an object might "
"necessarily leave it in a broken, partially destroyed state---it might be "
"unsafe to call any of the cleared object's methods or access any of its "
"attributes.  With finalization, only finalized objects can possibly interact "
"with cleared objects; non-finalized objects are guaranteed to interact with "
"only non-cleared (but potentially finalized) objects."
msgstr ""
"Finalization-steget är inte nödvändigt för att på ett säkert sätt återta "
"objekten i en cyklisk isolat, men dess existens gör det lättare att designa "
"typer som beter sig på ett vettigt sätt när objekt rensas.  Att rensa ett "
"objekt kan nödvändigtvis lämna det i ett trasigt, delvis förstört tillstånd "
"- det kan vara osäkert att anropa någon av det rensade objektets metoder "
"eller komma åt något av dess attribut.  Med finalization kan endast "
"finalized-objekt eventuellt interagera med clearade objekt; non-finalized-"
"objekt garanteras att interagera med endast icke-clearade (men potentiellt "
"finalized) objekt."

msgid "To summarize the possible interactions:"
msgstr "För att sammanfatta de möjliga interaktionerna:"

msgid ""
"A non-finalized object might have references to or from non-finalized and "
"finalized objects, but not to or from cleared objects."
msgstr ""
"Ett icke-finaliserat objekt kan ha referenser till eller från icke-"
"finaliserade och finaliserade objekt, men inte till eller från rensade "
"objekt."

msgid ""
"A finalized object might have references to or from non-finalized, "
"finalized, and cleared objects."
msgstr ""
"Ett finalized-objekt kan ha referenser till eller från non-finalized-, "
"finalized- och cleared-objekt."

msgid ""
"A cleared object might have references to or from finalized and cleared "
"objects, but not to or from non-finalized objects."
msgstr ""
"Ett avklarat objekt kan ha referenser till eller från färdigbehandlade och "
"avklarade objekt, men inte till eller från icke färdigbehandlade objekt."

msgid ""
"Without any reference cycles, an object can be simply destroyed once its "
"last reference is deleted; the finalization and clearing steps are not "
"necessary to safely reclaim unused objects.  However, it can be useful to "
"automatically call :c:member:`~PyTypeObject.tp_finalize` and :c:member:"
"`~PyTypeObject.tp_clear` before destruction anyway because type design is "
"simplified when all objects always experience the same series of events "
"regardless of whether they participated in a cyclic isolate.  Python "
"currently only calls :c:member:`~PyTypeObject.tp_finalize` and :c:member:"
"`~PyTypeObject.tp_clear` as needed to destroy a cyclic isolate; this may "
"change in a future version."
msgstr ""
"Utan några referenscykler kan ett objekt helt enkelt förstöras när dess "
"sista referens har tagits bort; stegen finalization och clearing är inte "
"nödvändiga för att på ett säkert sätt återta oanvända objekt.  Det kan dock "
"vara användbart att automatiskt anropa :c:member:`~PyTypeObject.tp_finalize` "
"och :c:member:`~PyTypeObject.tp_clear` innan destruktion eftersom typdesign "
"förenklas när alla objekt alltid upplever samma serie händelser oavsett om "
"de deltog i en cyklisk isolat.  Python anropar för närvarande bara :c:member:"
"`~PyTypeObject.tp_finalize` och :c:member:`~PyTypeObject.tp_clear` när det "
"behövs för att förstöra ett cykliskt isolat; detta kan ändras i en framtida "
"version."

msgid "Functions"
msgstr "Funktioner"

msgid "To allocate and free memory, see :ref:`allocating-objects`."
msgstr "För att allokera och frigöra minne, se :ref:`allocating-objects`."

msgid ""
"Finalizes the object as described in :c:member:`~PyTypeObject.tp_finalize`. "
"Call this function (or :c:func:`PyObject_CallFinalizerFromDealloc`) instead "
"of calling :c:member:`~PyTypeObject.tp_finalize` directly because this "
"function may deduplicate multiple calls to :c:member:`!tp_finalize`. "
"Currently, calls are only deduplicated if the type supports garbage "
"collection (i.e., the :c:macro:`Py_TPFLAGS_HAVE_GC` flag is set); this may "
"change in the future."
msgstr ""
"Finaliserar objektet enligt beskrivningen i :c:member:`~PyTypeObject."
"tp_finalize`. Anropa denna funktion (eller :c:func:"
"`PyObject_CallFinalizerFromDealloc`) istället för att anropa :c:member:"
"`~PyTypeObject.tp_finalize` direkt eftersom denna funktion kan avdubbla "
"flera anrop till :c:member:`!tp_finalize`. För närvarande dedupliceras anrop "
"endast om typen stöder garbage collection (dvs. om flaggan :c:macro:"
"`Py_TPFLAGS_HAVE_GC` är inställd); detta kan komma att ändras i framtiden."

msgid ""
"Same as :c:func:`PyObject_CallFinalizer` but meant to be called at the "
"beginning of the object's destructor (:c:member:`~PyTypeObject.tp_dealloc`). "
"There must not be any references to the object.  If the object's finalizer "
"resurrects the object, this function returns -1; no further destruction "
"should happen.  Otherwise, this function returns 0 and destruction can "
"continue normally."
msgstr ""
"Samma som :c:func:`PyObject_CallFinalizer` men avsedd att anropas i början "
"av objektets destruktor (:c:member:`~PyTypeObject.tp_dealloc`). Det får inte "
"finnas några referenser till objektet.  Om objektets finalizer återupplivar "
"objektet returnerar denna funktion -1; ingen ytterligare destruktion bör "
"ske.  I annat fall returnerar denna funktion 0 och destruktionen kan "
"fortsätta normalt."

msgid ":c:member:`~PyTypeObject.tp_dealloc` for example code."
msgstr ":c:member:`~PyTypeObject.tp_dealloc` för exempelkod."
