# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001 Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# python-doc bot, 2025
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.14\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-13 14:19+0000\n"
"PO-Revision-Date: 2025-08-02 17:35+0000\n"
"Last-Translator: python-doc bot, 2025\n"
"Language-Team: Swedish (https://app.transifex.com/python-doc/teams/5390/"
"sv/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: sv\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

msgid "What's New In Python 3.1"
msgstr ""

msgid "Author"
msgstr ""

msgid "Raymond Hettinger"
msgstr ""

msgid ""
"This article explains the new features in Python 3.1, compared to 3.0. "
"Python 3.1 was released on June 27, 2009."
msgstr ""

msgid "PEP 372: Ordered Dictionaries"
msgstr ""

msgid ""
"Regular Python dictionaries iterate over key/value pairs in arbitrary order. "
"Over the years, a number of authors have written alternative implementations "
"that remember the order that the keys were originally inserted.  Based on "
"the experiences from those implementations, a new :class:`collections."
"OrderedDict` class has been introduced."
msgstr ""

msgid ""
"The OrderedDict API is substantially the same as regular dictionaries but "
"will iterate over keys and values in a guaranteed order depending on when a "
"key was first inserted.  If a new entry overwrites an existing entry, the "
"original insertion position is left unchanged.  Deleting an entry and "
"reinserting it will move it to the end."
msgstr ""

msgid ""
"The standard library now supports use of ordered dictionaries in several "
"modules.  The :mod:`configparser` module uses them by default.  This lets "
"configuration files be read, modified, and then written back in their "
"original order.  The *_asdict()* method for :func:`collections.namedtuple` "
"now returns an ordered dictionary with the values appearing in the same "
"order as the underlying tuple indices.  The :mod:`json` module is being "
"built-out with an *object_pairs_hook* to allow OrderedDicts to be built by "
"the decoder. Support was also added for third-party tools like `PyYAML "
"<https://pyyaml.org/>`_."
msgstr ""

msgid ":pep:`372` - Ordered Dictionaries"
msgstr ""

msgid ""
"PEP written by Armin Ronacher and Raymond Hettinger.  Implementation written "
"by Raymond Hettinger."
msgstr ""

msgid ""
"Since an ordered dictionary remembers its insertion order, it can be used in "
"conjunction with sorting to make a sorted dictionary::"
msgstr ""

msgid ""
">>> # regular unsorted dictionary\n"
">>> d = {'banana': 3, 'apple':4, 'pear': 1, 'orange': 2}\n"
"\n"
">>> # dictionary sorted by key\n"
">>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))\n"
"OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), ('pear', 1)])\n"
"\n"
">>> # dictionary sorted by value\n"
">>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))\n"
"OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), ('apple', 4)])\n"
"\n"
">>> # dictionary sorted by length of the key string\n"
">>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))\n"
"OrderedDict([('pear', 1), ('apple', 4), ('orange', 2), ('banana', 3)])"
msgstr ""

msgid ""
"The new sorted dictionaries maintain their sort order when entries are "
"deleted.  But when new keys are added, the keys are appended to the end and "
"the sort is not maintained."
msgstr ""

msgid "PEP 378: Format Specifier for Thousands Separator"
msgstr ""

msgid ""
"The built-in :func:`format` function and the :meth:`str.format` method use a "
"mini-language that now includes a simple, non-locale aware way to format a "
"number with a thousands separator.  That provides a way to humanize a "
"program's output, improving its professional appearance and readability::"
msgstr ""

msgid ""
">>> format(1234567, ',d')\n"
"'1,234,567'\n"
">>> format(1234567.89, ',.2f')\n"
"'1,234,567.89'\n"
">>> format(12345.6 + 8901234.12j, ',f')\n"
"'12,345.600000+8,901,234.120000j'\n"
">>> format(Decimal('1234567.89'), ',f')\n"
"'1,234,567.89'"
msgstr ""

msgid ""
"The supported types are :class:`int`, :class:`float`, :class:`complex` and :"
"class:`decimal.Decimal`."
msgstr ""

msgid ""
"Discussions are underway about how to specify alternative separators like "
"dots, spaces, apostrophes, or underscores.  Locale-aware applications should "
"use the existing *n* format specifier which already has some support for "
"thousands separators."
msgstr ""

msgid ":pep:`378` - Format Specifier for Thousands Separator"
msgstr ""

msgid ""
"PEP written by Raymond Hettinger and implemented by Eric Smith and Mark "
"Dickinson."
msgstr ""

msgid "Other Language Changes"
msgstr ""

msgid "Some smaller changes made to the core Python language are:"
msgstr ""

msgid ""
"Directories and zip archives containing a :file:`__main__.py` file can now "
"be executed directly by passing their name to the interpreter. The directory/"
"zipfile is automatically inserted as the first entry in sys.path.  "
"(Suggestion and initial patch by Andy Chu; revised patch by Phillip J. Eby "
"and Nick Coghlan; :issue:`1739468`.)"
msgstr ""

msgid ""
"The :func:`int` type gained a ``bit_length`` method that returns the number "
"of bits necessary to represent its argument in binary::"
msgstr ""

msgid ""
">>> n = 37\n"
">>> bin(37)\n"
"'0b100101'\n"
">>> n.bit_length()\n"
"6\n"
">>> n = 2**123-1\n"
">>> n.bit_length()\n"
"123\n"
">>> (n+1).bit_length()\n"
"124"
msgstr ""

msgid ""
"(Contributed by Fredrik Johansson, Victor Stinner, Raymond Hettinger, and "
"Mark Dickinson; :issue:`3439`.)"
msgstr ""

msgid ""
"The fields in :func:`format` strings can now be automatically numbered::"
msgstr ""

msgid ""
">>> 'Sir {} of {}'.format('Gallahad', 'Camelot')\n"
"'Sir Gallahad of Camelot'"
msgstr ""

msgid ""
"Formerly, the string would have required numbered fields such as: ``'Sir {0} "
"of {1}'``."
msgstr ""

msgid "(Contributed by Eric Smith; :issue:`5237`.)"
msgstr ""

msgid ""
"The :func:`!string.maketrans` function is deprecated and is replaced by new "
"static methods, :meth:`bytes.maketrans` and :meth:`bytearray.maketrans`. "
"This change solves the confusion around which types were supported by the :"
"mod:`string` module. Now, :class:`str`, :class:`bytes`, and :class:"
"`bytearray` each have their own **maketrans** and **translate** methods with "
"intermediate translation tables of the appropriate type."
msgstr ""

msgid "(Contributed by Georg Brandl; :issue:`5675`.)"
msgstr ""

msgid ""
"The syntax of the :keyword:`with` statement now allows multiple context "
"managers in a single statement::"
msgstr ""

msgid ""
">>> with open('mylog.txt') as infile, open('a.out', 'w') as outfile:\n"
"...     for line in infile:\n"
"...         if '<critical>' in line:\n"
"...             outfile.write(line)"
msgstr ""

msgid ""
"With the new syntax, the :func:`!contextlib.nested` function is no longer "
"needed and is now deprecated."
msgstr ""

msgid ""
"(Contributed by Georg Brandl and Mattias Brändström; `appspot issue 53094 "
"<https://codereview.appspot.com/53094>`_.)"
msgstr ""

msgid ""
"``round(x, n)`` now returns an integer if *x* is an integer. Previously it "
"returned a float::"
msgstr ""

msgid ""
">>> round(1123, -2)\n"
"1100"
msgstr ""

msgid "(Contributed by Mark Dickinson; :issue:`4707`.)"
msgstr ""

msgid ""
"Python now uses David Gay's algorithm for finding the shortest floating-"
"point representation that doesn't change its value.  This should help "
"mitigate some of the confusion surrounding binary floating-point numbers."
msgstr ""

msgid ""
"The significance is easily seen with a number like ``1.1`` which does not "
"have an exact equivalent in binary floating point.  Since there is no exact "
"equivalent, an expression like ``float('1.1')`` evaluates to the nearest "
"representable value which is ``0x1.199999999999ap+0`` in hex or "
"``1.100000000000000088817841970012523233890533447265625`` in decimal. That "
"nearest value was and still is used in subsequent floating-point "
"calculations."
msgstr ""

msgid ""
"What is new is how the number gets displayed.  Formerly, Python used a "
"simple approach.  The value of ``repr(1.1)`` was computed as ``format(1.1, "
"'.17g')`` which evaluated to ``'1.1000000000000001'``. The advantage of "
"using 17 digits was that it relied on IEEE-754 guarantees to assure that "
"``eval(repr(1.1))`` would round-trip exactly to its original value.  The "
"disadvantage is that many people found the output to be confusing (mistaking "
"intrinsic limitations of binary floating-point representation as being a "
"problem with Python itself)."
msgstr ""

msgid ""
"The new algorithm for ``repr(1.1)`` is smarter and returns ``'1.1'``. "
"Effectively, it searches all equivalent string representations (ones that "
"get stored with the same underlying float value) and returns the shortest "
"representation."
msgstr ""

msgid ""
"The new algorithm tends to emit cleaner representations when possible, but "
"it does not change the underlying values.  So, it is still the case that "
"``1.1 + 2.2 != 3.3`` even though the representations may suggest otherwise."
msgstr ""

msgid ""
"The new algorithm depends on certain features in the underlying floating-"
"point implementation.  If the required features are not found, the old "
"algorithm will continue to be used.  Also, the text pickle protocols assure "
"cross-platform portability by using the old algorithm."
msgstr ""

msgid "(Contributed by Eric Smith and Mark Dickinson; :issue:`1580`)"
msgstr ""

msgid "New, Improved, and Deprecated Modules"
msgstr ""

msgid ""
"Added a :class:`collections.Counter` class to support convenient counting of "
"unique items in a sequence or iterable::"
msgstr ""

msgid ""
">>> Counter(['red', 'blue', 'red', 'green', 'blue', 'blue'])\n"
"Counter({'blue': 3, 'red': 2, 'green': 1})"
msgstr ""

msgid "(Contributed by Raymond Hettinger; :issue:`1696199`.)"
msgstr ""

msgid ""
"Added a new module, :mod:`tkinter.ttk` for access to the Tk themed widget "
"set. The basic idea of ttk is to separate, to the extent possible, the code "
"implementing a widget's behavior from the code implementing its appearance."
msgstr ""

msgid "(Contributed by Guilherme Polo; :issue:`2983`.)"
msgstr ""

msgid ""
"The :class:`gzip.GzipFile` and :class:`bz2.BZ2File` classes now support the "
"context management protocol::"
msgstr ""

msgid ""
">>> # Automatically close file after writing\n"
">>> with gzip.GzipFile(filename, \"wb\") as f:\n"
"...     f.write(b\"xxx\")"
msgstr ""

msgid "(Contributed by Antoine Pitrou.)"
msgstr ""

msgid ""
"The :mod:`decimal` module now supports methods for creating a decimal object "
"from a binary :class:`float`.  The conversion is exact but can sometimes be "
"surprising::"
msgstr ""

msgid ""
">>> Decimal.from_float(1.1)\n"
"Decimal('1.100000000000000088817841970012523233890533447265625')"
msgstr ""

msgid ""
"The long decimal result shows the actual binary fraction being stored for "
"*1.1*.  The fraction has many digits because *1.1* cannot be exactly "
"represented in binary."
msgstr ""

msgid "(Contributed by Raymond Hettinger and Mark Dickinson.)"
msgstr ""

msgid ""
"The :mod:`itertools` module grew two new functions.  The :func:`itertools."
"combinations_with_replacement` function is one of four for generating "
"combinatorics including permutations and Cartesian products.  The :func:"
"`itertools.compress` function mimics its namesake from APL.  Also, the "
"existing :func:`itertools.count` function now has an optional *step* "
"argument and can accept any type of counting sequence including :class:"
"`fractions.Fraction` and :class:`decimal.Decimal`::"
msgstr ""

msgid ""
">>> [p+q for p,q in combinations_with_replacement('LOVE', 2)]\n"
"['LL', 'LO', 'LV', 'LE', 'OO', 'OV', 'OE', 'VV', 'VE', 'EE']\n"
"\n"
">>> list(compress(data=range(10), selectors=[0,0,1,1,0,1,0,1,0,0]))\n"
"[2, 3, 5, 7]\n"
"\n"
">>> c = count(start=Fraction(1,2), step=Fraction(1,6))\n"
">>> [next(c), next(c), next(c), next(c)]\n"
"[Fraction(1, 2), Fraction(2, 3), Fraction(5, 6), Fraction(1, 1)]"
msgstr ""

msgid "(Contributed by Raymond Hettinger.)"
msgstr ""

msgid ""
":func:`collections.namedtuple` now supports a keyword argument *rename* "
"which lets invalid fieldnames be automatically converted to positional names "
"in the form _0, _1, etc.  This is useful when the field names are being "
"created by an external source such as a CSV header, SQL field list, or user "
"input::"
msgstr ""

msgid ""
">>> query = input()\n"
"SELECT region, dept, count(*) FROM main GROUPBY region, dept\n"
"\n"
">>> cursor.execute(query)\n"
">>> query_fields = [desc[0] for desc in cursor.description]\n"
">>> UserQuery = namedtuple('UserQuery', query_fields, rename=True)\n"
">>> pprint.pprint([UserQuery(*row) for row in cursor])\n"
"[UserQuery(region='South', dept='Shipping', _2=185),\n"
" UserQuery(region='North', dept='Accounting', _2=37),\n"
" UserQuery(region='West', dept='Sales', _2=419)]"
msgstr ""

msgid "(Contributed by Raymond Hettinger; :issue:`1818`.)"
msgstr ""

msgid ""
"The :func:`re.sub`, :func:`re.subn` and :func:`re.split` functions now "
"accept a flags parameter."
msgstr ""

msgid "(Contributed by Gregory Smith.)"
msgstr ""

msgid ""
"The :mod:`logging` module now implements a simple :class:`logging."
"NullHandler` class for applications that are not using logging but are "
"calling library code that does.  Setting-up a null handler will suppress "
"spurious warnings such as \"No handlers could be found for logger foo\"::"
msgstr ""

msgid ""
">>> h = logging.NullHandler()\n"
">>> logging.getLogger(\"foo\").addHandler(h)"
msgstr ""

msgid "(Contributed by Vinay Sajip; :issue:`4384`)."
msgstr ""

msgid ""
"The :mod:`runpy` module which supports the ``-m`` command line switch now "
"supports the execution of packages by looking for and executing a "
"``__main__`` submodule when a package name is supplied."
msgstr ""

msgid "(Contributed by Andi Vajda; :issue:`4195`.)"
msgstr ""

msgid ""
"The :mod:`pdb` module can now access and display source code loaded via :mod:"
"`zipimport` (or any other conformant :pep:`302` loader)."
msgstr ""

msgid "(Contributed by Alexander Belopolsky; :issue:`4201`.)"
msgstr ""

msgid ":class:`functools.partial` objects can now be pickled."
msgstr ""

msgid ""
"(Suggested by Antoine Pitrou and Jesse Noller.  Implemented by Jack "
"Diederich; :issue:`5228`.)"
msgstr ""

msgid ""
"Add :mod:`pydoc` help topics for symbols so that ``help('@')`` works as "
"expected in the interactive environment."
msgstr ""

msgid "(Contributed by David Laban; :issue:`4739`.)"
msgstr ""

msgid ""
"The :mod:`unittest` module now supports skipping individual tests or classes "
"of tests. And it supports marking a test as an expected failure, a test that "
"is known to be broken, but shouldn't be counted as a failure on a "
"TestResult::"
msgstr ""

msgid ""
"class TestGizmo(unittest.TestCase):\n"
"\n"
"    @unittest.skipUnless(sys.platform.startswith(\"win\"), \"requires "
"Windows\")\n"
"    def test_gizmo_on_windows(self):\n"
"        ...\n"
"\n"
"    @unittest.expectedFailure\n"
"    def test_gimzo_without_required_library(self):\n"
"        ..."
msgstr ""

msgid ""
"Also, tests for exceptions have been builtout to work with context managers "
"using the :keyword:`with` statement::"
msgstr ""

msgid ""
"def test_division_by_zero(self):\n"
"    with self.assertRaises(ZeroDivisionError):\n"
"        x / 0"
msgstr ""

msgid ""
"In addition, several new assertion methods were added including :meth:"
"`~unittest.TestCase.assertSetEqual`, :meth:`~unittest.TestCase."
"assertDictEqual`, :meth:`!assertDictContainsSubset`, :meth:`~unittest."
"TestCase.assertListEqual`, :meth:`~unittest.TestCase.assertTupleEqual`, :"
"meth:`~unittest.TestCase.assertSequenceEqual`, :meth:`assertRaisesRegexp() "
"<unittest.TestCase.assertRaisesRegex>`, :meth:`~unittest.TestCase."
"assertIsNone`, and :meth:`~unittest.TestCase.assertIsNotNone`."
msgstr ""

msgid "(Contributed by Benjamin Peterson and Antoine Pitrou.)"
msgstr ""

msgid ""
"The :mod:`io` module has three new constants for the :meth:`~io.IOBase.seek` "
"method: :data:`~os.SEEK_SET`, :data:`~os.SEEK_CUR`, and :data:`~os.SEEK_END`."
msgstr ""

msgid "The :data:`sys.version_info` tuple is now a named tuple::"
msgstr ""

msgid ""
">>> sys.version_info\n"
"sys.version_info(major=3, minor=1, micro=0, releaselevel='alpha', serial=2)"
msgstr ""

msgid "(Contributed by Ross Light; :issue:`4285`.)"
msgstr ""

msgid "The :mod:`!nntplib` and :mod:`imaplib` modules now support IPv6."
msgstr ""

msgid "(Contributed by Derek Morr; :issue:`1655` and :issue:`1664`.)"
msgstr ""

msgid ""
"The :mod:`pickle` module has been adapted for better interoperability with "
"Python 2.x when used with protocol 2 or lower.  The reorganization of the "
"standard library changed the formal reference for many objects.  For "
"example, ``__builtin__.set`` in Python 2 is called ``builtins.set`` in "
"Python 3. This change confounded efforts to share data between different "
"versions of Python.  But now when protocol 2 or lower is selected, the "
"pickler will automatically use the old Python 2 names for both loading and "
"dumping. This remapping is turned-on by default but can be disabled with the "
"*fix_imports* option::"
msgstr ""

msgid ""
">>> s = {1, 2, 3}\n"
">>> pickle.dumps(s, protocol=0)\n"
"b'c__builtin__\\nset\\np0\\n((lp1\\nL1L\\naL2L\\naL3L\\natp2\\nRp3\\n.'\n"
">>> pickle.dumps(s, protocol=0, fix_imports=False)\n"
"b'cbuiltins\\nset\\np0\\n((lp1\\nL1L\\naL2L\\naL3L\\natp2\\nRp3\\n.'"
msgstr ""

msgid ""
"An unfortunate but unavoidable side-effect of this change is that protocol 2 "
"pickles produced by Python 3.1 won't be readable with Python 3.0. The latest "
"pickle protocol, protocol 3, should be used when migrating data between "
"Python 3.x implementations, as it doesn't attempt to remain compatible with "
"Python 2.x."
msgstr ""

msgid ""
"(Contributed by Alexandre Vassalotti and Antoine Pitrou, :issue:`6137`.)"
msgstr ""

msgid ""
"A new module, :mod:`importlib` was added.  It provides a complete, portable, "
"pure Python reference implementation of the :keyword:`import` statement and "
"its counterpart, the :func:`__import__` function.  It represents a "
"substantial step forward in documenting and defining the actions that take "
"place during imports."
msgstr ""

msgid "(Contributed by Brett Cannon.)"
msgstr ""

msgid "Optimizations"
msgstr ""

msgid "Major performance enhancements have been added:"
msgstr ""

msgid ""
"The new I/O library (as defined in :pep:`3116`) was mostly written in Python "
"and quickly proved to be a problematic bottleneck in Python 3.0. In Python "
"3.1, the I/O library has been entirely rewritten in C and is 2 to 20 times "
"faster depending on the task at hand. The pure Python version is still "
"available for experimentation purposes through the ``_pyio`` module."
msgstr ""

msgid "(Contributed by Amaury Forgeot d'Arc and Antoine Pitrou.)"
msgstr ""

msgid ""
"Added a heuristic so that tuples and dicts containing only untrackable "
"objects are not tracked by the garbage collector. This can reduce the size "
"of collections and therefore the garbage collection overhead on long-running "
"programs, depending on their particular use of datatypes."
msgstr ""

msgid "(Contributed by Antoine Pitrou, :issue:`4688`.)"
msgstr ""

msgid ""
"Enabling a configure option named ``--with-computed-gotos`` on compilers "
"that support it (notably: gcc, SunPro, icc), the bytecode evaluation loop is "
"compiled with a new dispatch mechanism which gives speedups of up to 20%, "
"depending on the system, the compiler, and the benchmark."
msgstr ""

msgid ""
"(Contributed by Antoine Pitrou along with a number of other participants, :"
"issue:`4753`)."
msgstr ""

msgid ""
"The decoding of UTF-8, UTF-16 and LATIN-1 is now two to four times faster."
msgstr ""

msgid ""
"(Contributed by Antoine Pitrou and Amaury Forgeot d'Arc, :issue:`4868`.)"
msgstr ""

msgid ""
"The :mod:`json` module now has a C extension to substantially improve its "
"performance.  In addition, the API was modified so that json works only "
"with :class:`str`, not with :class:`bytes`.  That change makes the module "
"closely match the `JSON specification <https://json.org/>`_ which is defined "
"in terms of Unicode."
msgstr ""

msgid ""
"(Contributed by Bob Ippolito and converted to Py3.1 by Antoine Pitrou and "
"Benjamin Peterson; :issue:`4136`.)"
msgstr ""

msgid ""
"Unpickling now interns the attribute names of pickled objects.  This saves "
"memory and allows pickles to be smaller."
msgstr ""

msgid "(Contributed by Jake McGuire and Antoine Pitrou; :issue:`5084`.)"
msgstr ""

msgid "IDLE"
msgstr ""

msgid ""
"IDLE's format menu now provides an option to strip trailing whitespace from "
"a source file."
msgstr ""

msgid "(Contributed by Roger D. Serwy; :issue:`5150`.)"
msgstr ""

msgid "Build and C API Changes"
msgstr ""

msgid "Changes to Python's build process and to the C API include:"
msgstr ""

msgid ""
"Integers are now stored internally either in base ``2**15`` or in base "
"``2**30``, the base being determined at build time.  Previously, they were "
"always stored in base ``2**15``.  Using base ``2**30`` gives significant "
"performance improvements on 64-bit machines, but benchmark results on 32-bit "
"machines have been mixed.  Therefore, the default is to use base ``2**30`` "
"on 64-bit machines and base ``2**15`` on 32-bit machines; on Unix, there's a "
"new configure option ``--enable-big-digits`` that can be used to override "
"this default."
msgstr ""

msgid ""
"Apart from the performance improvements this change should be invisible to "
"end users, with one exception: for testing and debugging purposes there's a "
"new :data:`sys.int_info` that provides information about the internal "
"format, giving the number of bits per digit and the size in bytes of the C "
"type used to store each digit::"
msgstr ""

msgid ""
">>> import sys\n"
">>> sys.int_info\n"
"sys.int_info(bits_per_digit=30, sizeof_digit=4)"
msgstr ""

msgid "(Contributed by Mark Dickinson; :issue:`4258`.)"
msgstr ""

msgid ""
"The :c:func:`PyLong_AsUnsignedLongLong()` function now handles a negative "
"*pylong* by raising :exc:`OverflowError` instead of :exc:`TypeError`."
msgstr ""

msgid "(Contributed by Mark Dickinson and Lisandro Dalcrin; :issue:`5175`.)"
msgstr ""

msgid ""
"Deprecated :c:func:`!PyNumber_Int`.  Use :c:func:`PyNumber_Long` instead."
msgstr ""

msgid "(Contributed by Mark Dickinson; :issue:`4910`.)"
msgstr ""

msgid ""
"Added a new :c:func:`PyOS_string_to_double` function to replace the "
"deprecated functions :c:func:`!PyOS_ascii_strtod` and :c:func:`!"
"PyOS_ascii_atof`."
msgstr ""

msgid "(Contributed by Mark Dickinson; :issue:`5914`.)"
msgstr ""

msgid ""
"Added :c:type:`PyCapsule` as a replacement for the :c:type:`!PyCObject` API. "
"The principal difference is that the new type has a well defined interface "
"for passing typing safety information and a less complicated signature for "
"calling a destructor.  The old type had a problematic API and is now "
"deprecated."
msgstr ""

msgid "(Contributed by Larry Hastings; :issue:`5630`.)"
msgstr ""

msgid "Porting to Python 3.1"
msgstr ""

msgid ""
"This section lists previously described changes and other bugfixes that may "
"require changes to your code:"
msgstr ""

msgid ""
"The new floating-point string representations can break existing doctests. "
"For example::"
msgstr ""

msgid ""
"def e():\n"
"    '''Compute the base of natural logarithms.\n"
"\n"
"    >>> e()\n"
"    2.7182818284590451\n"
"\n"
"    '''\n"
"    return sum(1/math.factorial(x) for x in reversed(range(30)))\n"
"\n"
"doctest.testmod()\n"
"\n"
"**********************************************************************\n"
"Failed example:\n"
"    e()\n"
"Expected:\n"
"    2.7182818284590451\n"
"Got:\n"
"    2.718281828459045\n"
"**********************************************************************"
msgstr ""

msgid ""
"The automatic name remapping in the pickle module for protocol 2 or lower "
"can make Python 3.1 pickles unreadable in Python 3.0.  One solution is to "
"use protocol 3.  Another solution is to set the *fix_imports* option to "
"``False``. See the discussion above for more details."
msgstr ""
